name: HumanEval_4_mean_absolute_deviation
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = numbers.sum\
    \ / numbers.length;\n    return numbers.map!((x){return abs(x - mean);}).sum /\
    \ numbers.length;\n}\n/*\n Calculate the standard deviation for a given array\
    \ of numbers.\n    Standard deviation is the square root of the average variance\
    \ of each\n    element around the mean:\n    >>> std_dev([2.0, 4.0, 4.0, 4.0,\
    \ 5.0, 5.0, 7.0, 9.0])\n    2.0\n*/\nfloat std_dev(float[] numbers) \n{\n    float\
    \ mean = numbers.sum / numbers.length;\n    float variance = numbers.map!((x){return\
    \ (x - mean) * (x - mean);}).sum / numbers.length;\n    return sqrt(variance);\n\
    }\n/*\n Calculate the median for a given array of numbers.\n    Median is the\
    \ number in the middle of the array after being sorted.\n    >>> median([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat median(float[] numbers) \n{\n    float[]\
    \ sorted = numbers.dup.sort;\n    uint half = sorted.length / 2;\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[half - 1] + sorted[half]) / 2;\n    } else\
    \ {\n        return sorted[half];\n    }\n}\n/*\n Calculate the interquartile\
    \ range for a given array of numbers.\n    The interquartile range is the difference\
    \ between the first and third\n    quartiles:\n    >>> interquartile_range([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n    4.0\n*/\nfloat interquartile_range(float[]\
    \ numbers) \n{\n    float[] sorted = numbers.dup.sort;\n    uint half = sorted.length\
    \ / 2;\n    float[] lower = [];\n    float[] upper = [];\n    if (sorted.length\
    \ % 2 == 0) {\n        lower = sorted[0 .. half];\n        upper = sorted[half\
    \ .. $];\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2zqi4ap4.d(63): Error: found `unittest` instead of statement\\\
    n/tmp/tmp2zqi4ap4.d(71): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2zqi4ap4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    if (numbers.length ==\
    \ 0) \n    {\n        return null;\n    }\n    float mean = 0.0;\n    foreach\
    \ (n; numbers) \n    {\n        mean += n;\n    }\n    mean /= numbers.length;\n\
    \    float abs_dev = 0.0;\n    foreach (n; numbers) \n    {\n        abs_dev +=\
    \ abs(n - mean);\n    }\n    return abs_dev / numbers.length;\n}\nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5d5mdril.d(17): Error: cannot implicitly convert expression `null`\
    \ of type `typeof(null)` to `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp5d5mdril.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  foreach (value; numbers)\n    {\n        mean += value;\n    }\n    mean /=\
    \ numbers.length;\n    float sum = 0.0;\n    foreach (value; numbers)\n    {\n\
    \        sum += abs(value - mean);\n    }\n    return sum / numbers.length;\n\
    }\n/*\n Given a fixed number of clusters and a set of input points,\n    use k-means\
    \ clustering algorithm to derive cluster centers.\n    Once algorithm converges\
    \ (i.e. cluster centers stop moving),\n    points are assigned to clusters.\n\
    \    Cluster centers are returned as well as assignments of points to clusters.\n\
    \    >>> centers, assignments = k_means_clustering(2, [[1.0, 2.0], [3.0, 4.0],\
    \ [5.0, 6.0]])\n    >>> centers\n    [[3.0, 4.0], [5.0, 6.0]]\n    >>> assignments\n\
    \    [0, 1, 1]\n    \n*/\nTuple!(float[][], int[]) k_means_clustering(int number_of_clusters,\
    \ float[][] points) \n{\n    float[][] means = array(float[][](number_of_clusters));\n\
    \    int[] assignments = array(int[](points.length));\n    // Initialize means\
    \ using first points\n    foreach (i; 0 .. number_of_clusters)\n    {\n      \
    \  means[i] = points[i];\n    }\n    // Loop until convergence\n    bool old_assignments\
    \ = false;\n    bool new_assignments = false;\n    while (old_assignments != new_assignments)\n\
    \    {\n        old_assignments = new_assignments;\n        // Assign points to\
    \ clusters based on closest mean\n        foreach (i, point; points)\n       \
    \ {\n            float best_distance = float.max;\n            int best_cluster\
    \ = 0;\n            foreach (i, mean; means)\n            {\n                float\
    \ distance = 0.0;\n                foreach (j, value; mean)\n                {\n\
    \                    distance += (point[j\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpurglin9a.d(43): Error: found `[` when expecting `.` following\
    \ float\\n/tmp/tmpurglin9a.d(43): Error: found `]` when expecting identifier following\
    \ `float`.\\n/tmp/tmpurglin9a.d(44): Error: found `[` when expecting `.` following\
    \ int\\n/tmp/tmpurglin9a.d(44): Error: found `]` when expecting identifier following\
    \ `int`.\\n/tmp/tmpurglin9a.d(67): Error: found `unittest` when expecting `,`\\\
    n/tmp/tmpurglin9a.d(75): Error: found `void` when expecting `,`\\n/tmp/tmpurglin9a.d(75):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmpurglin9a.d(75): Error: expression\
    \ expected, not `}`\\n/tmp/tmpurglin9a.d(75): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmpurglin9a.d(75): Error: found `End of File` when expecting\
    \ `]`\\n/tmp/tmpurglin9a.d(66): Error: found `End of File` when expecting `)`\\\
    n/tmp/tmpurglin9a.d(75): Error: found `End of File` when expecting `;` following\
    \ statement\\n/tmp/tmpurglin9a.d(75): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmpurglin9a.d(75): Error: found `End\
    \ of File` when expecting `}` following compound statement\\n/tmp/tmpurglin9a.d(75):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpurglin9a.d(75): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpurglin9a.d(75): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpurglin9a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float sum_distances = 0.0;\n    for (auto number; numbers) {\n        sum_distances\
    \ += abs(number - mean);\n    }\n    return sum_distances / numbers.length;\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8ixlqi53.d(17): Error: no identifier for declarator `number`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ixlqi53.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = std.algorithm.reduce!\"\
    a + b\"(numbers) / cast(float) numbers.length;\n    return std.algorithm.reduce!\"\
    a + abs(b - mean)\"(numbers) / cast(float) numbers.length;\n}\n/*\n>>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n1.118033988749895\n*/\nfloat standard_deviation(float[] numbers)\n\
    {\n    float mean = std.algorithm.reduce!\"a + b\"(numbers) / cast(float) numbers.length;\n\
    \    float variance = std.algorithm.reduce!\"a + (b - mean)^2\" (numbers) / cast(float)\
    \ numbers.length;\n    return sqrt(variance);\n}\n/*\n>>> variance([1.0, 2.0,\
    \ 3.0, 4.0])\n1.25\n*/\nfloat variance(float[] numbers)\n{\n    float mean = std.algorithm.reduce!\"\
    a + b\"(numbers) / cast(float) numbers.length;\n    return std.algorithm.reduce!\"\
    a + (b - mean)^2\" (numbers) / cast(float) numbers.length;\n}\n/*\n>>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n2.5\n*/\nfloat mean(float[] numbers)\n{\n    return std.algorithm.reduce!\"\
    a + b\"(numbers) / cast(float) numbers.length;\n}\n/*\n>>> median([1.0, 2.0, 3.0,\
    \ 4.0])\n2.5\n>>> median([1.0, 3.0, 4.0])\n3.0\n*/\nfloat median(float[] numbers)\n\
    {\n    auto sorted = numbers.dup.sort;\n    if (sorted.length % 2)\n    {\n  \
    \      return sorted[sorted.length / 2];\n    }\n    else\n    {\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2;\n    }\n}\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjywv3cn3.d(15): Error: undefined identifier `algorithm` in package\
    \ `std`\\n/tmp/tmpjywv3cn3.d(16): Error: undefined identifier `algorithm` in package\
    \ `std`\\n/tmp/tmpjywv3cn3.d(24): Error: undefined identifier `algorithm` in package\
    \ `std`\\n/tmp/tmpjywv3cn3.d(25): Error: undefined identifier `algorithm` in package\
    \ `std`\\n/tmp/tmpjywv3cn3.d(34): Error: undefined identifier `algorithm` in package\
    \ `std`\\n/tmp/tmpjywv3cn3.d(35): Error: undefined identifier `algorithm` in package\
    \ `std`\\n/tmp/tmpjywv3cn3.d(43): Error: undefined identifier `algorithm` in package\
    \ `std`\\n/tmp/tmpjywv3cn3.d(53): Error: no property `sort` for type `float[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjywv3cn3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = average(numbers);\n\
    \    float[] deviations = [$(x => abs(x - mean), numbers)];\n    return average(deviations);\n\
    }\n/*\n Scale a list of numbers using Mean Absolute Deviation scale.\n    Formula:\n\
    \    x_scaled = x / MAD\n    >>> scaled = scale_using_mad([1.0, 2.0, 3.0, 4.0])\n\
    \    >>> xs = [10.0, 20.0, 30.0, 40.0]\n    >>> scaled = scale_using_mad(xs)\n\
    \    >>> scaled\n    [10.0, 5.0, 3.3333333333333335, 2.5]\n    >>> mean_absolute_deviation(scaled)\n\
    \    2.083333333333333\n    \n*/\nfloat[] scale_using_mad(float[] numbers) \n\
    {\n    float[] result = new float[];\n    float mad = mean_absolute_deviation(numbers);\n\
    \    foreach (n; numbers)\n    {\n        result ~= n / mad;\n    }\n    return\
    \ result;\n}\n/*\n Scale a list of numbers using Standard Deviation scale.\n \
    \   Formula:\n    x_scaled = x / SD\n    >>> scaled = scale_using_mad([1.0, 2.0,\
    \ 3.0, 4.0])\n    >>> xs = [10.0, 20.0, 30.0, 40.0]\n    >>> scaled = scale_using_mad(xs)\n\
    \    >>> scaled\n    [10.0, 5.0, 3.3333333333333335, 2.5]\n    >>> mean_absolute_deviation(scaled)\n\
    \    2.083333333333333\n    \n*/\nfloat[] scale_using_sd(float[] numbers) \n{\n\
    \    float[] result = new float[];\n    float sd = standard_deviation(numbers);\n\
    \    foreach (n; numbers)\n    {\n        result ~= n / sd;\n    }\n    return\
    \ result;\n}\n/*\n For a given array of input numbers, calculate Standard Deviation\n\
    \    around the mean of this dataset.\n    Standard Deviation is a \"spread\"\
    \ of the dataset around the\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzzf8264_.d(16): Error: `$` is valid only inside [] of index or\
    \ slice\\n/tmp/tmpzzf8264_.d(65): Error: unterminated /* */ comment\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzzf8264_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float sum_ = 0.0;\n    foreach (num; numbers) \n    {\n        sum_ += abs(num\
    \ - mean);\n    }\n    return sum_ / numbers.length;\n}\n/*\nunittest\n{\n   \
    \ alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0ufmev5j.d(23): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ufmev5j.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float[] deviations = new\
    \ float[numbers.length];\n    float mean = numbers.average;\n    foreach (n; 0\
    \ .. numbers.length) \n    {\n        deviations[n] = abs(numbers[n] - mean);\n\
    \    }\n    return deviations.average;\n}\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzviuf2g9.d(16): Error: no property `average` for type `float[]`\\\
    n/tmp/tmpzviuf2g9.d(21): Error: no property `average` for type `float[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzviuf2g9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n  import std.algorithm : sum;\n\
    \  import std.math : mean;\n  return mean(numbers.map!(a => abs(a - mean(numbers))));\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8cgkpqdb.d(16): Error: module `std.math` import `mean` not found,\
    \ did you mean function `std.math.tan`?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp8cgkpqdb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ > 0);\n    float mean = average(numbers);\n    float[] squared_differences =\
    \ new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        squared_differences[i] = (numbers[i] - mean).abs();\n    }\n    return\
    \ average(squared_differences);\n}\n/*\n Calculate Absolute Deviation of the array\
    \ around a given centerpoint\n*/\nfloat absolute_deviation(float[] numbers, float\
    \ centerpoint) \n{\n    float[] squared_differences = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        squared_differences[i]\
    \ = (numbers[i] - centerpoint).abs();\n    }\n    return average(squared_differences);\n\
    }\n/*\n A common measure of variability is the \"mean absolute deviation.\"\n\
    \    It is a measure of the spread of the data around the arithmetic mean.\n \
    \   It is easy to calculate.\n    It is the average of the absolute values of\
    \ the deviations from the arithmetic mean.\n    When the deviations from the arithmetic\
    \ mean are squared and averaged, the result is the \"variance\" and\n    the square\
    \ root of the variance is the \"standard deviation.\"\n    The mean absolute deviation\
    \ is an attractive alternative to the variance and standard deviation.\n    Because\
    \ it is not squared, the units of the mean absolute deviation are the same as\
    \ the units of the data.\n    Since the original data are maintained, it is easier\
    \ to interpret a mean absolute deviation than a standard deviation.\n    To calculate\
    \ a mean absolute deviation, first find the arithmetic mean.\n    Subtract the\
    \ arithmetic mean from each of the data values and take the absolute value of\
    \ each difference.\n    Sum all of the absolute values and divide by the number\
    \ of data values.\n*/\nfloat mean_absolute_deviation_of_list(List numbers) \n\
    {\n    float[] float_numbers = new float[numbers.length];\n    for (int i = 0;\
    \ i < numbers.length; i++) {\n        float_numbers[i] = numbers[i];\n    }\n\
    \    return mean_absolute_deviation(float_numbers);\n}\n/*\n\nunittest\n{\n  \
    \  alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpktqtly3k.d(56): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpktqtly3k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float absolute_deviations = 0.0;\n    foreach (x; numbers) \n    {\n    \
    \    absolute_deviations += abs(x - mean);\n    }\n    return absolute_deviations\
    \ / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsl4a5csq.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsl4a5csq.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = average(numbers);\n\
    \    float[] abs_diffs = new float[numbers.length];\n    foreach (i, x; numbers)\n\
    \    {\n        abs_diffs[i] = abs(x - mean);\n    }\n    return average(abs_diffs);\n\
    }\n \nfloat[][] generate_data(int size)\n{\n    float[][] data = new float[][](3,\
    \ size);\n    foreach (j; 0 .. size)\n    {\n        data[0][j] = j;\n       \
    \ data[1][j] = pow(j, 2);\n        data[2][j] = j + 2 * sin(j * 3 * PI / size);\n\
    \    }\n    return data;\n}\n \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdp27g_f7.d(15): Error: undefined identifier `average`\\n/tmp/tmpdp27g_f7.d(21):\
    \ Error: undefined identifier `average`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpdp27g_f7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return average(map!(\"\
    a => abs(a - average(numbers))\")(numbers));\n}\n/*\n    For a given array of\
    \ input numbers, calculate Standard Deviation\n    around the mean of this dataset.\n\
    \    Standard Deviation is the square root of the mean squared difference\n  \
    \  between each element and the centerpoint (mean in this case):\n    SD = sqrt(average\
    \ (x - x_mean)**2)\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.118033988749895\n\
    */\nfloat standard_deviation(float[] numbers) \n{\n    float distance = 0.0;\n\
    \    float mean = average(numbers);\n    float[] deviations = new float[numbers.length];\n\
    \    foreach (n; numbers)\n    {\n        deviations[distance] = (n - mean);\n\
    \        distance++;\n    }\n    return sqrt(average(map!(\"a => a * a\")(deviations)));\n\
    }\n// TODO\n/*\n    For a given array of input numbers, calculate the Median Absolute\n\
    \    Deviation around the median of this dataset.\n    Median Absolute Deviation\
    \ is the median of the distance from each\n    element to the centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n*/\n// TODO\n/*\n    Estimate\
    \ how many standard deviations a given value is away from the\n    mean of a given\
    \ dataset. Useful to determine how statistically\n    unusual a given value is.\n\
    \    'stdevs' is the number of standard deviations the given value is away\n \
    \   from the mean of the dataset.\n    >>> how_many_stdevs(3.0, [1.0, 2.0, 3.0,\
    \ 4.0])\n    0.2449489742783178\n*/\nfloat how_many_stdevs(float number, float[]\
    \ numbers) \n{\n    float std_dev = standard_deviation(numbers);\n    if (std_dev\
    \ == 0.0)\n    {\n        return 0.0;\n    }\n    else\n    {\n        return\
    \ (number - average(numbers)) / std_dev;\n    }\n\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps8dbm520.d(68): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8dbm520.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ > 0);\n    float sum = 0.0;\n    foreach (i, val; numbers) \n    {\n       \
    \ sum += abs(val);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn0ph5b1i.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428439]\\n??:? void tmpn0ph5b1i.__unittest_L23_C1()\
    \ [0x427fd0]\\n??:? void tmpn0ph5b1i.__modtest() [0x428104]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c413]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430439]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308e8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303c5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b27d]\\n??:? runModuleUnitTests [0x42c1e9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428888]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42880f]\\n??:? _d_run_main [0x42877a]\\n??:? main [0x428117]\\\
    n??:? __libc_start_main [0xa911b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return sum(map!((numbers)\
    \ => abs(numbers - mean(numbers)))(numbers)) / numbers.length;\n}\n/*\n For a\
    \ given array of input numbers, calculate the Median Absolute Deviation\n    around\
    \ the median of this dataset.\n    Median Absolute Deviation is the median of\
    \ the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat median_absolute_deviation(float[] numbers)\
    \ \n{\n    return median(map!((numbers) => abs(numbers - median(numbers)))(numbers));\n\
    }\n/*\n For a given array of input numbers, calculate the standard deviation of\n\
    \    this dataset.\n    Standard deviation is the square root of the variance.\n\
    \    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n  \
    \  >>> standard_deviation([])\n    nan\n*/\nfloat standard_deviation(float[] numbers)\
    \ \n{\n    return float(sqrt(variance(numbers)));\n}\n/*\n For a given array of\
    \ input numbers, calculate the variance of this dataset.\n    Variance is the\
    \ average of the squared differences from the mean.\n    >>> variance([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.6666666666666667\n    >>> variance([])\n    nan\n*/\nfloat\
    \ variance(float[] numbers) \n{\n    if (numbers.length == 0) \n    {\n      \
    \  return float.nan;\n    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw3zzry2g.d(57): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3zzry2g.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float num_mean = (sum(numbers)\
    \ / float(numbers.length));\n    float mean_absolute_deviation = \n        (sum(numbers.map!(a\
    \ => abs(a - num_mean))) / float(numbers.length));\n    return mean_absolute_deviation;\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps11644yz.d(15): Error: undefined identifier `sum`\\n/tmp/tmps11644yz.d(17):\
    \ Error: undefined identifier `sum`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmps11644yz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    import std.math;\n   \
    \ //from numpy import mean\n    float avg_of_numbers = mean(numbers);\n    //from\
    \ numpy import absolute\n    float[] absolute_differences = absolute(numbers -\
    \ avg_of_numbers);\n    return mean(absolute_differences);\n}\n//Let's test it!\n\
    float[] numbers = [1.0,2.0,3.0,4.0];\npragma(msg, mean_absolute_deviation(numbers));\
    \ //Prints 1.0\n/*\n Knowing how to calculate MAD will help us in calculating\
    \ z-scores in\n    the next section. We'll compare a value to other values\n \
    \   in the dataset.\n*/\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfouqxr8d.d(17): Error: undefined identifier `mean`, did you mean\
    \ function `tan`?\\n/tmp/tmpfouqxr8d.d(19): Error: undefined identifier `absolute`\\\
    n/tmp/tmpfouqxr8d.d(20): Error: undefined identifier `mean`, did you mean function\
    \ `tan`?\\n/tmp/tmpfouqxr8d.d(24):        called from here: `mean_absolute_deviation(numbers)`\\\
    n/tmp/tmpfouqxr8d.d(24):        while evaluating `pragma(msg, mean_absolute_deviation(numbers))`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfouqxr8d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  foreach (n; numbers) {\n        mean += n;\n    }\n    mean /= numbers.length;\n\
    \    float mad = 0.0;\n    foreach (n; numbers) {\n        mad += abs(n - mean);\n\
    \    }\n    return mad / numbers.length;\n}\n \n/*\n    Get the mean absolute\
    \ deviation around the mean for each column in a data set.\n    \n    @param dataset:\
    \ 2D array\n    @return: 1D array\n*/\nfloat[] mean_absolute_deviation_columns(float[][]\
    \ dataset)\n{\n    float[] means = mean_columns(dataset);\n    float[] deviations\
    \ = [];\n    foreach (mea\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwwd2gax7.d(38): Error: no identifier for declarator `mea`\\n/tmp/tmpwwd2gax7.d(38):\
    \ Error: found `unittest` when expecting `;`\\n/tmp/tmpwwd2gax7.d(46): Error:\
    \ found `void` when expecting `)`\\n/tmp/tmpwwd2gax7.d(46): Error: found `{` when\
    \ expecting `;` following statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpwwd2gax7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] differences = [];\n    foreach (float value; numbers) {\n       \
    \ float difference = value - mean;\n        differences ~= abs(difference);\n\
    \    }\n    return mean(differences);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr1hnooy1.d(15): Error: undefined identifier `mean`, did you mean\
    \ function `main`?\\n/tmp/tmpr1hnooy1.d(21): Error: function expected before `()`,\
    \ not `mean` of type `float`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpr1hnooy1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float[] abs_difference_from_mean\
    \ = new float[numbers.length];\n    float abs_difference_sum = 0.0f;\n    float\
    \ numbers_sum = 0.0f;\n    float mean = 0.0f;\n    float mean_absolute_deviation\
    \ = 0.0f;\n    int i = 0;\n    for (; i < numbers.length; i++) \n    {\n     \
    \   numbers_sum += numbers[i];\n    }\n    mean = numbers_sum / numbers.length;\n\
    \    i = 0;\n    for (; i < numbers.length; i++) \n    {\n        abs_difference_from_mean[i]\
    \ = abs(numbers[i] - mean);\n        abs_difference_sum += abs_difference_from_mean[i];\n\
    \    }\n    mean_absolute_deviation = abs_difference_sum / numbers.length;\n \
    \   return mean_absolute_deviation;\n}\n/*\n Calculate median of an array of numbers.\n\
    \    The median is the middle number:\n    in [1, 4, 2, 3] the median is 3.\n\
    \    in [1, 4, 2, 3, 5] the median is 3.\n    >>> median([1, 1, 3])\n    1\n \
    \   >>> median([1, 2, 3])\n    2\n    >>> median([1, 2, 3, 4])\n    2.5\n    >>>\
    \ median([4, 4, 4, 4])\n    4\n*/\nfloat median(float[] numbers) \n{\n    int\
    \ length = numbers.length;\n    if (length % 2 == 0) \n    {\n        float a\
    \ = numbers[(length / 2) - 1];\n        float b = numbers[length / 2];\n     \
    \   return (a + b) / 2;\n    }\n    else \n    {\n        return numbers[((length\
    \ - 1) / 2)];\n    }\n}\n/*\n Calculate mode (most common element) of an array\
    \ of numbers.\n    The mode is the most commonly occuring element:\n    in [1,\
    \ 4, 2, 3, 3] the mode is 3.\n    >>> mode([1, 1, 2, 3])\n    1\n\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptkabmkvx.d(63): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptkabmkvx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
