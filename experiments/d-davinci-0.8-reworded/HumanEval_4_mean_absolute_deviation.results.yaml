language: d
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = numbers.sum\
    \ / numbers.length;\n    return numbers.map!((x){return abs(x - mean);}).sum /\
    \ numbers.length;\n}\n/*\n Calculate the standard deviation for a given array\
    \ of numbers.\n    Standard deviation is the square root of the average variance\
    \ of each\n    element around the mean:\n    >>> std_dev([2.0, 4.0, 4.0, 4.0,\
    \ 5.0, 5.0, 7.0, 9.0])\n    2.0\n*/\nfloat std_dev(float[] numbers) \n{\n    float\
    \ mean = numbers.sum / numbers.length;\n    float variance = numbers.map!((x){return\
    \ (x - mean) * (x - mean);}).sum / numbers.length;\n    return sqrt(variance);\n\
    }\n/*\n Calculate the median for a given array of numbers.\n    Median is the\
    \ number in the middle of the array after being sorted.\n    >>> median([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat median(float[] numbers) \n{\n    float[]\
    \ sorted = numbers.dup.sort;\n    uint half = sorted.length / 2;\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[half - 1] + sorted[half]) / 2;\n    } else\
    \ {\n        return sorted[half];\n    }\n}\n/*\n Calculate the interquartile\
    \ range for a given array of numbers.\n    The interquartile range is the difference\
    \ between the first and third\n    quartiles:\n    >>> interquartile_range([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n    4.0\n*/\nfloat interquartile_range(float[]\
    \ numbers) \n{\n    float[] sorted = numbers.dup.sort;\n    uint half = sorted.length\
    \ / 2;\n    float[] lower = [];\n    float[] upper = [];\n    if (sorted.length\
    \ % 2 == 0) {\n        lower = sorted[0 .. half];\n        upper = sorted[half\
    \ .. $];\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9txvk1yz.d(63): Error: found `unittest` instead of statement

    /tmp/tmp9txvk1yz.d(71): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9txvk1yz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    if (numbers.length ==\
    \ 0) \n    {\n        return null;\n    }\n    float mean = 0.0;\n    foreach\
    \ (n; numbers) \n    {\n        mean += n;\n    }\n    mean /= numbers.length;\n\
    \    float abs_dev = 0.0;\n    foreach (n; numbers) \n    {\n        abs_dev +=\
    \ abs(n - mean);\n    }\n    return abs_dev / numbers.length;\n}\nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx2lwazh3.d(17): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2lwazh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  foreach (value; numbers)\n    {\n        mean += value;\n    }\n    mean /=\
    \ numbers.length;\n    float sum = 0.0;\n    foreach (value; numbers)\n    {\n\
    \        sum += abs(value - mean);\n    }\n    return sum / numbers.length;\n\
    }\n/*\n Given a fixed number of clusters and a set of input points,\n    use k-means\
    \ clustering algorithm to derive cluster centers.\n    Once algorithm converges\
    \ (i.e. cluster centers stop moving),\n    points are assigned to clusters.\n\
    \    Cluster centers are returned as well as assignments of points to clusters.\n\
    \    >>> centers, assignments = k_means_clustering(2, [[1.0, 2.0], [3.0, 4.0],\
    \ [5.0, 6.0]])\n    >>> centers\n    [[3.0, 4.0], [5.0, 6.0]]\n    >>> assignments\n\
    \    [0, 1, 1]\n    \n*/\nTuple!(float[][], int[]) k_means_clustering(int number_of_clusters,\
    \ float[][] points) \n{\n    float[][] means = array(float[][](number_of_clusters));\n\
    \    int[] assignments = array(int[](points.length));\n    // Initialize means\
    \ using first points\n    foreach (i; 0 .. number_of_clusters)\n    {\n      \
    \  means[i] = points[i];\n    }\n    // Loop until convergence\n    bool old_assignments\
    \ = false;\n    bool new_assignments = false;\n    while (old_assignments != new_assignments)\n\
    \    {\n        old_assignments = new_assignments;\n        // Assign points to\
    \ clusters based on closest mean\n        foreach (i, point; points)\n       \
    \ {\n            float best_distance = float.max;\n            int best_cluster\
    \ = 0;\n            foreach (i, mean; means)\n            {\n                float\
    \ distance = 0.0;\n                foreach (j, value; mean)\n                {\n\
    \                    distance += (point[j\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_vbac5lr.d(43): Error: found `[` when expecting `.` following float

    /tmp/tmp_vbac5lr.d(43): Error: found `]` when expecting identifier following `float`.

    /tmp/tmp_vbac5lr.d(44): Error: found `[` when expecting `.` following int

    /tmp/tmp_vbac5lr.d(44): Error: found `]` when expecting identifier following `int`.

    /tmp/tmp_vbac5lr.d(67): Error: found `unittest` when expecting `,`

    /tmp/tmp_vbac5lr.d(75): Error: found `void` when expecting `,`

    /tmp/tmp_vbac5lr.d(75): Error: found `{` when expecting `,`

    /tmp/tmp_vbac5lr.d(75): Error: expression expected, not `}`

    /tmp/tmp_vbac5lr.d(75): Error: found `End of File` when expecting `,`

    /tmp/tmp_vbac5lr.d(75): Error: found `End of File` when expecting `]`

    /tmp/tmp_vbac5lr.d(66): Error: found `End of File` when expecting `)`

    /tmp/tmp_vbac5lr.d(75): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmp_vbac5lr.d(75): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_vbac5lr.d(75): Error: found `End of File` when'
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float sum_distances = 0.0;\n    for (auto number; numbers) {\n        sum_distances\
    \ += abs(number - mean);\n    }\n    return sum_distances / numbers.length;\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpacgne3fn.d(17): Error: no identifier for declarator `number`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpacgne3fn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = std.algorithm.reduce!\"\
    a + b\"(numbers) / cast(float) numbers.length;\n    return std.algorithm.reduce!\"\
    a + abs(b - mean)\"(numbers) / cast(float) numbers.length;\n}\n/*\n>>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n1.118033988749895\n*/\nfloat standard_deviation(float[] numbers)\n\
    {\n    float mean = std.algorithm.reduce!\"a + b\"(numbers) / cast(float) numbers.length;\n\
    \    float variance = std.algorithm.reduce!\"a + (b - mean)^2\" (numbers) / cast(float)\
    \ numbers.length;\n    return sqrt(variance);\n}\n/*\n>>> variance([1.0, 2.0,\
    \ 3.0, 4.0])\n1.25\n*/\nfloat variance(float[] numbers)\n{\n    float mean = std.algorithm.reduce!\"\
    a + b\"(numbers) / cast(float) numbers.length;\n    return std.algorithm.reduce!\"\
    a + (b - mean)^2\" (numbers) / cast(float) numbers.length;\n}\n/*\n>>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n2.5\n*/\nfloat mean(float[] numbers)\n{\n    return std.algorithm.reduce!\"\
    a + b\"(numbers) / cast(float) numbers.length;\n}\n/*\n>>> median([1.0, 2.0, 3.0,\
    \ 4.0])\n2.5\n>>> median([1.0, 3.0, 4.0])\n3.0\n*/\nfloat median(float[] numbers)\n\
    {\n    auto sorted = numbers.dup.sort;\n    if (sorted.length % 2)\n    {\n  \
    \      return sorted[sorted.length / 2];\n    }\n    else\n    {\n        return\
    \ (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2;\n    }\n}\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdp09kxld.d(15): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpdp09kxld.d(16): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpdp09kxld.d(24): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpdp09kxld.d(25): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpdp09kxld.d(34): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpdp09kxld.d(35): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpdp09kxld.d(43): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpdp09kxld.d(53): Error: no property `sort` for type `float[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdp09kxld.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = average(numbers);\n\
    \    float[] deviations = [$(x => abs(x - mean), numbers)];\n    return average(deviations);\n\
    }\n/*\n Scale a list of numbers using Mean Absolute Deviation scale.\n    Formula:\n\
    \    x_scaled = x / MAD\n    >>> scaled = scale_using_mad([1.0, 2.0, 3.0, 4.0])\n\
    \    >>> xs = [10.0, 20.0, 30.0, 40.0]\n    >>> scaled = scale_using_mad(xs)\n\
    \    >>> scaled\n    [10.0, 5.0, 3.3333333333333335, 2.5]\n    >>> mean_absolute_deviation(scaled)\n\
    \    2.083333333333333\n    \n*/\nfloat[] scale_using_mad(float[] numbers) \n\
    {\n    float[] result = new float[];\n    float mad = mean_absolute_deviation(numbers);\n\
    \    foreach (n; numbers)\n    {\n        result ~= n / mad;\n    }\n    return\
    \ result;\n}\n/*\n Scale a list of numbers using Standard Deviation scale.\n \
    \   Formula:\n    x_scaled = x / SD\n    >>> scaled = scale_using_mad([1.0, 2.0,\
    \ 3.0, 4.0])\n    >>> xs = [10.0, 20.0, 30.0, 40.0]\n    >>> scaled = scale_using_mad(xs)\n\
    \    >>> scaled\n    [10.0, 5.0, 3.3333333333333335, 2.5]\n    >>> mean_absolute_deviation(scaled)\n\
    \    2.083333333333333\n    \n*/\nfloat[] scale_using_sd(float[] numbers) \n{\n\
    \    float[] result = new float[];\n    float sd = standard_deviation(numbers);\n\
    \    foreach (n; numbers)\n    {\n        result ~= n / sd;\n    }\n    return\
    \ result;\n}\n/*\n For a given array of input numbers, calculate Standard Deviation\n\
    \    around the mean of this dataset.\n    Standard Deviation is a \"spread\"\
    \ of the dataset around the\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzg6ly_bz.d(16): Error: `$` is valid only inside [] of index or
    slice

    /tmp/tmpzg6ly_bz.d(65): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzg6ly_bz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float sum_ = 0.0;\n    foreach (num; numbers) \n    {\n        sum_ += abs(num\
    \ - mean);\n    }\n    return sum_ / numbers.length;\n}\n/*\nunittest\n{\n   \
    \ alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq_xtr5kr.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_xtr5kr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float[] deviations = new\
    \ float[numbers.length];\n    float mean = numbers.average;\n    foreach (n; 0\
    \ .. numbers.length) \n    {\n        deviations[n] = abs(numbers[n] - mean);\n\
    \    }\n    return deviations.average;\n}\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8nrzm3tp.d(16): Error: no property `average` for type `float[]`

    /tmp/tmp8nrzm3tp.d(21): Error: no property `average` for type `float[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8nrzm3tp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n  import std.algorithm : sum;\n\
    \  import std.math : mean;\n  return mean(numbers.map!(a => abs(a - mean(numbers))));\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp558ndujz.d(16): Error: module `std.math` import `mean` not found,
    did you mean function `std.math.tan`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp558ndujz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ > 0);\n    float mean = average(numbers);\n    float[] squared_differences =\
    \ new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++) {\n\
    \        squared_differences[i] = (numbers[i] - mean).abs();\n    }\n    return\
    \ average(squared_differences);\n}\n/*\n Calculate Absolute Deviation of the array\
    \ around a given centerpoint\n*/\nfloat absolute_deviation(float[] numbers, float\
    \ centerpoint) \n{\n    float[] squared_differences = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        squared_differences[i]\
    \ = (numbers[i] - centerpoint).abs();\n    }\n    return average(squared_differences);\n\
    }\n/*\n A common measure of variability is the \"mean absolute deviation.\"\n\
    \    It is a measure of the spread of the data around the arithmetic mean.\n \
    \   It is easy to calculate.\n    It is the average of the absolute values of\
    \ the deviations from the arithmetic mean.\n    When the deviations from the arithmetic\
    \ mean are squared and averaged, the result is the \"variance\" and\n    the square\
    \ root of the variance is the \"standard deviation.\"\n    The mean absolute deviation\
    \ is an attractive alternative to the variance and standard deviation.\n    Because\
    \ it is not squared, the units of the mean absolute deviation are the same as\
    \ the units of the data.\n    Since the original data are maintained, it is easier\
    \ to interpret a mean absolute deviation than a standard deviation.\n    To calculate\
    \ a mean absolute deviation, first find the arithmetic mean.\n    Subtract the\
    \ arithmetic mean from each of the data values and take the absolute value of\
    \ each difference.\n    Sum all of the absolute values and divide by the number\
    \ of data values.\n*/\nfloat mean_absolute_deviation_of_list(List numbers) \n\
    {\n    float[] float_numbers = new float[numbers.length];\n    for (int i = 0;\
    \ i < numbers.length; i++) {\n        float_numbers[i] = numbers[i];\n    }\n\
    \    return mean_absolute_deviation(float_numbers);\n}\n/*\n\nunittest\n{\n  \
    \  alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2e9uyt6s.d(56): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2e9uyt6s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float absolute_deviations = 0.0;\n    foreach (x; numbers) \n    {\n    \
    \    absolute_deviations += abs(x - mean);\n    }\n    return absolute_deviations\
    \ / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvma3jkic.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvma3jkic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = average(numbers);\n\
    \    float[] abs_diffs = new float[numbers.length];\n    foreach (i, x; numbers)\n\
    \    {\n        abs_diffs[i] = abs(x - mean);\n    }\n    return average(abs_diffs);\n\
    }\n \nfloat[][] generate_data(int size)\n{\n    float[][] data = new float[][](3,\
    \ size);\n    foreach (j; 0 .. size)\n    {\n        data[0][j] = j;\n       \
    \ data[1][j] = pow(j, 2);\n        data[2][j] = j + 2 * sin(j * 3 * PI / size);\n\
    \    }\n    return data;\n}\n \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpawsju_pj.d(15): Error: undefined identifier `average`

    /tmp/tmpawsju_pj.d(21): Error: undefined identifier `average`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpawsju_pj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return average(map!(\"\
    a => abs(a - average(numbers))\")(numbers));\n}\n/*\n    For a given array of\
    \ input numbers, calculate Standard Deviation\n    around the mean of this dataset.\n\
    \    Standard Deviation is the square root of the mean squared difference\n  \
    \  between each element and the centerpoint (mean in this case):\n    SD = sqrt(average\
    \ (x - x_mean)**2)\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.118033988749895\n\
    */\nfloat standard_deviation(float[] numbers) \n{\n    float distance = 0.0;\n\
    \    float mean = average(numbers);\n    float[] deviations = new float[numbers.length];\n\
    \    foreach (n; numbers)\n    {\n        deviations[distance] = (n - mean);\n\
    \        distance++;\n    }\n    return sqrt(average(map!(\"a => a * a\")(deviations)));\n\
    }\n// TODO\n/*\n    For a given array of input numbers, calculate the Median Absolute\n\
    \    Deviation around the median of this dataset.\n    Median Absolute Deviation\
    \ is the median of the distance from each\n    element to the centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n*/\n// TODO\n/*\n    Estimate\
    \ how many standard deviations a given value is away from the\n    mean of a given\
    \ dataset. Useful to determine how statistically\n    unusual a given value is.\n\
    \    'stdevs' is the number of standard deviations the given value is away\n \
    \   from the mean of the dataset.\n    >>> how_many_stdevs(3.0, [1.0, 2.0, 3.0,\
    \ 4.0])\n    0.2449489742783178\n*/\nfloat how_many_stdevs(float number, float[]\
    \ numbers) \n{\n    float std_dev = standard_deviation(numbers);\n    if (std_dev\
    \ == 0.0)\n    {\n        return 0.0;\n    }\n    else\n    {\n        return\
    \ (number - average(numbers)) / std_dev;\n    }\n\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzeh3myuz.d(68): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzeh3myuz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ > 0);\n    float sum = 0.0;\n    foreach (i, val; numbers) \n    {\n       \
    \ sum += abs(val);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzp234ng3.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x428439]

    ??:? void tmpzp234ng3.__unittest_L23_C1() [0x427fd0]

    ??:? void tmpzp234ng3.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c413]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430439]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b27d]

    ??:? runModuleUnitTests [0x42c1e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428888]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return sum(map!((numbers)\
    \ => abs(numbers - mean(numbers)))(numbers)) / numbers.length;\n}\n/*\n For a\
    \ given array of input numbers, calculate the Median Absolute Deviation\n    around\
    \ the median of this dataset.\n    Median Absolute Deviation is the median of\
    \ the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat median_absolute_deviation(float[] numbers)\
    \ \n{\n    return median(map!((numbers) => abs(numbers - median(numbers)))(numbers));\n\
    }\n/*\n For a given array of input numbers, calculate the standard deviation of\n\
    \    this dataset.\n    Standard deviation is the square root of the variance.\n\
    \    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n  \
    \  >>> standard_deviation([])\n    nan\n*/\nfloat standard_deviation(float[] numbers)\
    \ \n{\n    return float(sqrt(variance(numbers)));\n}\n/*\n For a given array of\
    \ input numbers, calculate the variance of this dataset.\n    Variance is the\
    \ average of the squared differences from the mean.\n    >>> variance([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.6666666666666667\n    >>> variance([])\n    nan\n*/\nfloat\
    \ variance(float[] numbers) \n{\n    if (numbers.length == 0) \n    {\n      \
    \  return float.nan;\n    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc9buq6fk.d(57): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc9buq6fk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float num_mean = (sum(numbers)\
    \ / float(numbers.length));\n    float mean_absolute_deviation = \n        (sum(numbers.map!(a\
    \ => abs(a - num_mean))) / float(numbers.length));\n    return mean_absolute_deviation;\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsk4njbiu.d(15): Error: undefined identifier `sum`

    /tmp/tmpsk4njbiu.d(17): Error: undefined identifier `sum`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsk4njbiu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    import std.math;\n   \
    \ //from numpy import mean\n    float avg_of_numbers = mean(numbers);\n    //from\
    \ numpy import absolute\n    float[] absolute_differences = absolute(numbers -\
    \ avg_of_numbers);\n    return mean(absolute_differences);\n}\n//Let's test it!\n\
    float[] numbers = [1.0,2.0,3.0,4.0];\npragma(msg, mean_absolute_deviation(numbers));\
    \ //Prints 1.0\n/*\n Knowing how to calculate MAD will help us in calculating\
    \ z-scores in\n    the next section. We'll compare a value to other values\n \
    \   in the dataset.\n*/\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpumxukugm.d(17): Error: undefined identifier `mean`, did you mean
    function `tan`?

    /tmp/tmpumxukugm.d(19): Error: undefined identifier `absolute`

    /tmp/tmpumxukugm.d(20): Error: undefined identifier `mean`, did you mean function
    `tan`?

    /tmp/tmpumxukugm.d(24):        called from here: `mean_absolute_deviation(numbers)`

    /tmp/tmpumxukugm.d(24):        while evaluating `pragma(msg, mean_absolute_deviation(numbers))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpumxukugm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  foreach (n; numbers) {\n        mean += n;\n    }\n    mean /= numbers.length;\n\
    \    float mad = 0.0;\n    foreach (n; numbers) {\n        mad += abs(n - mean);\n\
    \    }\n    return mad / numbers.length;\n}\n \n/*\n    Get the mean absolute\
    \ deviation around the mean for each column in a data set.\n    \n    @param dataset:\
    \ 2D array\n    @return: 1D array\n*/\nfloat[] mean_absolute_deviation_columns(float[][]\
    \ dataset)\n{\n    float[] means = mean_columns(dataset);\n    float[] deviations\
    \ = [];\n    foreach (mea\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyxxr3k_k.d(38): Error: no identifier for declarator `mea`

    /tmp/tmpyxxr3k_k.d(38): Error: found `unittest` when expecting `;`

    /tmp/tmpyxxr3k_k.d(46): Error: found `void` when expecting `)`

    /tmp/tmpyxxr3k_k.d(46): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxxr3k_k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] differences = [];\n    foreach (float value; numbers) {\n       \
    \ float difference = value - mean;\n        differences ~= abs(difference);\n\
    \    }\n    return mean(differences);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1suuzi2h.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmp1suuzi2h.d(21): Error: function expected before `()`, not `mean` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1suuzi2h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float[] abs_difference_from_mean\
    \ = new float[numbers.length];\n    float abs_difference_sum = 0.0f;\n    float\
    \ numbers_sum = 0.0f;\n    float mean = 0.0f;\n    float mean_absolute_deviation\
    \ = 0.0f;\n    int i = 0;\n    for (; i < numbers.length; i++) \n    {\n     \
    \   numbers_sum += numbers[i];\n    }\n    mean = numbers_sum / numbers.length;\n\
    \    i = 0;\n    for (; i < numbers.length; i++) \n    {\n        abs_difference_from_mean[i]\
    \ = abs(numbers[i] - mean);\n        abs_difference_sum += abs_difference_from_mean[i];\n\
    \    }\n    mean_absolute_deviation = abs_difference_sum / numbers.length;\n \
    \   return mean_absolute_deviation;\n}\n/*\n Calculate median of an array of numbers.\n\
    \    The median is the middle number:\n    in [1, 4, 2, 3] the median is 3.\n\
    \    in [1, 4, 2, 3, 5] the median is 3.\n    >>> median([1, 1, 3])\n    1\n \
    \   >>> median([1, 2, 3])\n    2\n    >>> median([1, 2, 3, 4])\n    2.5\n    >>>\
    \ median([4, 4, 4, 4])\n    4\n*/\nfloat median(float[] numbers) \n{\n    int\
    \ length = numbers.length;\n    if (length % 2 == 0) \n    {\n        float a\
    \ = numbers[(length / 2) - 1];\n        float b = numbers[length / 2];\n     \
    \   return (a + b) / 2;\n    }\n    else \n    {\n        return numbers[((length\
    \ - 1) / 2)];\n    }\n}\n/*\n Calculate mode (most common element) of an array\
    \ of numbers.\n    The mode is the most commonly occuring element:\n    in [1,\
    \ 4, 2, 3, 3] the mode is 3.\n    >>> mode([1, 1, 2, 3])\n    1\n\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4gka_t2n.d(63): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4gka_t2n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = numbers.average;\n\
    \    float sum_of_absolute_deviations = 0.0;\n    foreach (n; numbers)\n    {\n\
    \        sum_of_absolute_deviations += abs(n - mean);\n    }\n    return sum_of_absolute_deviations\
    \ / numbers.length;\n}\n/*\n This function returns the number of times an element\
    \ occurs in a list.\n The same number of elements with different positions are\
    \ considered different.\n    >>> number_of_occurrences(1, [2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgva3e1er.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgva3e1er.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float sum_ = 0.0;\n  \
    \  foreach (n; numbers) \n    {\n        sum_ += abs(n - mean(numbers));\n   \
    \ }\n    return sum_ / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate mean of Absolute Deviation\n around median of this dataset.\n    Mean\
    \ Absolute Deviation around median is the average absolute difference\n    between\
    \ each element and a centerpoint (median in this case):\n    MAD = average | x\
    \ - x_median |\n    >>> mean_absolute_deviation_around_median([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_around_median(float[]\
    \ numbers) \n{\n    float[] absolute_deviations = [abs(n - median(numbers)) for\
    \ n in numbers];\n    return mean(absolute_deviations);\n}\n/*\n For a given array\
    \ of input numbers, calculate Median Absolute Deviation.\n    Median Absolute\
    \ Deviation is the median of the absolute differences between\n    each element\
    \ and the median of the input dataset:\n    MAD = median | x - x_median |\n  \
    \  >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat\
    \ median_absolute_deviation(float[] numbers) \n{\n    float[] absolute_deviations\
    \ = [abs(n - median(numbers)) for n in numbers];\n    return median(absolute_deviations);\n\
    }\n/*\n For a given array of input numbers, calculate mean of Absolute Deviation\n\
    \ around zero of this dataset.\n    Mean Absolute Deviation around zero is the\
    \ average absolute difference\n    between each element and zero:\n    MAD = average\
    \ | x |\n    >>> mean_absolute_deviation_around_zero([1.0, 2.0, 3.0, 4.0])\n \
    \   2.5\n    \n*/\nfloat mean_absolute_deviation_around_zero(float[] numbers)\
    \ \n{\n    float[] absolute_deviations = [abs(n) for n in numbers];\n    return\
    \ mean(absolute_deviations);\n}\n/*\nFor a given array of input\nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0mh0k9dv.d(34): Error: comma expected separating array initializers,
    not `for`

    /tmp/tmp0mh0k9dv.d(34): Error: semicolon expected, not `n`

    /tmp/tmp0mh0k9dv.d(34): Error: found `]` when expecting `;` following statement

    /tmp/tmp0mh0k9dv.d(34): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp0mh0k9dv.d(48): Error: comma expected separating array initializers, not
    `for`

    /tmp/tmp0mh0k9dv.d(48): Error: semicolon expected, not `n`

    /tmp/tmp0mh0k9dv.d(48): Error: found `]` when expecting `;` following statement

    /tmp/tmp0mh0k9dv.d(48): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp0mh0k9dv.d(63): Error: comma expected separating array initializers, not
    `for`

    /tmp/tmp0mh0k9dv.d(63): Error: semicolon expected, not `n`

    /tmp/tmp0mh0k9dv.d(63): Error: found `]` when expecting `;` following statement

    /tmp/tmp0mh0k9dv.d(63): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp0mh0k9dv.d(66): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp'
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float[] temp_numbers =\
    \ std.algorithm.sort(numbers);\n    float avg = mean(temp_numbers);\n    float\
    \ diffs = 0.0;\n    foreach(number; temp_numbers)\n    {\n        diffs += abs(number\
    \ - avg);\n    }\n    return diffs / temp_numbers.length;\n}\nunittest\n{\n  \
    \  alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmgujh7r4.d(15): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpmgujh7r4.d(16): Error: undefined identifier `mean`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmgujh7r4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float absolute_deviations = 0.0;\n    foreach (number; numbers)\n    {\n\
    \        absolute_deviations += abs(number - mean);\n    }\n    return absolute_deviations\
    \ / numbers.length;\n}\n/*\n For a given array of input numbers, calculate Absolute\
    \ Standard Deviation\n    around the mean of this dataset.\n    Standard Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    AS = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat absolute_standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float absolute_deviations\
    \ = 0.0;\n    foreach (number; numbers)\n    {\n        absolute_deviations +=\
    \ abs(number - mean);\n    }\n    return absolute_deviations / numbers.length;\n\
    }\n/*\n    Calculate the standard deviation for a list of numbers.\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \"\"\"\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    1.4142135623730951\n    \"\"\"\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n    1.707825127659933\n    \"\"\"\n    >>> standard_deviation([0.0,\
    \ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n    1.707825127659933\n    \"\"\"\n    >>> standard_deviation([2.0,\
    \ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n    1.707825127659933\n    \"\"\"\n    \"\"\"\
    \n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0, 5\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo__8k4te.d(43): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo__8k4te.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return mean(map!(a =>\
    \ abs(a - mean(numbers)))(numbers));\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkhynu_w.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkhynu_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float x_mean = 0.0;\n\
    \    float absolute_deviations = [];\n    foreach ( x ; numbers ) \n    {\n  \
    \      x_mean += x;\n    }\n    x_mean /= float(numbers.length);\n    foreach\
    \ (x; numbers) \n    {\n        absolute_deviations ~= abs(x - x_mean);\n    }\n\
    \    return sum(absolute_deviations) / float(absolute_deviations.length);\n}\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi_ijfib6.d(16): Error: cannot implicitly convert expression `[]`
    of type `void[]` to `float`

    /tmp/tmpi_ijfib6.d(24): Error: cannot append type `float` to type `float`

    /tmp/tmpi_ijfib6.d(26): Error: undefined identifier `sum`

    /tmp/tmpi_ijfib6.d(26): Error: no property `length` for type `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_ijfib6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = std.algorithm.sum(numbers)\
    \ / numbers.length;\n    float[] distances = numbers.map!( (float n) => abs(n\
    \ - mean) )();\n    return std.algorithm.sum(distances) / distances.length;\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpudmo9jmg.d(15): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpudmo9jmg.d(16): Error: no property `map` for type `float[]`

    /tmp/tmpudmo9jmg.d(17): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpudmo9jmg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \nin {\n    foreach(n; numbers)\n\
    \        assert(n.isNaN == false);\n}\nout (result) {\n    assert(result.isNaN\
    \ == false);\n}\nbody\n{\n    if (numbers.length == 0) \n    {\n        float\
    \ result = float.nan;\n        return result;\n    }\n    float sum = 0.0;\n \
    \   float mean = 0.0;\n    float result = 0.0;\n    float difference = 0.0;\n\
    \    mean = sum(numbers) / numbers.length;\n    foreach(n; numbers) \n    {\n\
    \        if (n < mean)\n            difference = mean - n;\n        else\n   \
    \         difference = n - mean;\n        sum += difference;\n    }\n    result\
    \ = sum / numbers.length;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplc0fortc.d(32): Error: function expected before `()`, not `sum`
    of type `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplc0fortc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = average(numbers);\n\
    \    float abs_deviations = 0.0;\n    float abs_value = 0.0;\n    foreach (n;\
    \ numbers) {\n        abs_value = abs(n - mean);\n        abs_deviations += abs_value;\n\
    \    }\n    return abs_deviations / numbers.length;\n}\n/*\n Calculate the Mean\
    \ Squared Error between two sets of numbers.\n    Mean Squared Error is the average\
    \ of the square of the difference between\n    the numbers in the two sets:\n\
    \    MSE = average ((x1 - x2)^2)\n    >>> mean_squared_error([1.0, 2.0, 3.0, 4.0],\
    \ [4.0, 3.0, 2.0, 1.0])\n    4.0\n    >>> mean_squared_error([1.0, 2.0, 3.0, 4.0],\
    \ [1.0, 2.0, 3.0, 4.0])\n    0.0\n    \n*/\nfloat mean_squared_error(float[] numbers1,\
    \ float[] numbers2) \n{\n    assert(numbers1.length == numbers2.length);\n   \
    \ float diff = 0.0;\n    float sum_squared_differences = 0.0;\n    foreach (i;\
    \ 0 .. numbers1.length) {\n        diff = numbers1[i] - numbers2[i];\n       \
    \ sum_squared_differences += diff * diff;\n    }\n    return sum_squared_differences\
    \ / numbers1.length;\n}\n/*\n Calculate the Root Mean Squared Error between two\
    \ sets of numbers.\n    Root Mean Squared Error is the square root of the average\
    \ of the\n    square of the difference between the numbers in the two sets:\n\
    \    RMSE = sqrt(average ((x1 - x2)^2))\n    >>> root_mean_squared_error([1.0,\
    \ 2.0, 3.0, 4.0], [4.0, 3.0, 2.0, 1.0])\n    2.0\n    >>> root_mean_squared_error([1.0,\
    \ 2.0, 3.0, 4.0],\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpppk51p1s.d(46): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppk51p1s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n    nothrow\n{\n    import std.algorithm;\n\
    \    assert(numbers.length > 0);\n    float mean = numbers.average;\n    return\
    \ numbers.map!(v => abs(v - mean)).average;\n}\n/*\n Compare distributions:\n\
    \    >>> float[] a = [1.0, 2.0, 3.0, 4.0];\n    >>> float[] b = [2.0, 2.0, 2.0,\
    \ 2.0];\n    >>> float[] c = [2.0, 2.0, 2.0, 2.0, 2.0, 2.0];\n    >>> std.math.approxEqual(mean_absolute_deviation(a),\
    \ 1.0);\n    true\n    >>> std.math.approxEqual(mean_absolute_deviation(b), 0.0);\n\
    \    true\n    >>> std.math.approxEqual(mean_absolute_deviation(c), 0.0);\n  \
    \  true\n    \n*/\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpol7p59g0.d(18): Error: no property `average` for type `float[]`

    /tmp/tmpol7p59g0.d(19): Error: no property `average` for type `MapResult!(__lambda2,
    float[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpol7p59g0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  mean = reduce!((a, b) => a + b)(numbers) / float(numbers.length);\n    float\
    \ mad = 0.0;\n    for (float i = 0; i < numbers.length; i++)\n    {\n        mad\
    \ += abs(numbers[cast(int)i] - mean);\n    }\n    return mad / float(numbers.length);\n\
    }\nfloat[] arange(float num)\n{\n    float[] numbers = new float[cast(int)num];\n\
    \    for (float i = 0; i < num; i++)\n    {\n        numbers[cast(int)i] = i;\n\
    \    }\n    return numbers;\n}\n/*\n    Ordinary Least Squares estimator for linear\
    \ regression.\n    >>> import std.math : std;\n    >>> y = [1.0, 3.0, 2.0, 5.0,\
    \ 4.0];\n    >>> x = arange(5);\n    >>> linear_regression(x, y)\n    (1.0, 1.0)\n\
    \    >>> linear_regression(x, y, [0.0, 0.0])\n    (1.0, 1.0)\n    >>> linear_regression(x,\
    \ y, [1.0, 2.0])\n    (0.7999999999999994, 1.2000000000000002)\n    >>> x = [1.0,\
    \ 3.0, 2.0, 5.0, 4.0];\n    >>> y = [1.0, 3.0, 2.0, 5.0, 4.0];\n    >>> linear_regression(x,\
    \ y)\n    (1.0, 0.0)\n    >>> linear_regression(x, y, [0.0, 0.0])\n    (1.0, 0.0)\n\
    \    >>> linear_regression(x, y, [1.0, 2.0])\n    (1.0, -0.20000000000000018)\n\
    \    >>> y = [1.0, 1.0, 2.0, 2.0, 4.0];\n    >>> linear_regression(x, y)\n   \
    \ (2.0\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprs1y3b9b.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprs1y3b9b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean_numbers = statistics.mean(numbers);\n\
    \    float[] absolute_difference = new float[numbers.length];\n    for (size_t\
    \ i = 0; i < numbers.length; i++) {\n        absolute_difference[i] = std.math.abs(numbers[i]\
    \ - mean_numbers);\n    }\n    return statistics.mean(absolute_difference);\n\
    }\nfloat moving_average(float[][] data, size_t key, size_t window_size) \n{\n\
    \    float[] window = new float[window_size];\n    if (key >= window_size) {\n\
    \        size_t window_start = key - window_size;\n        size_t window_end =\
    \ key;\n        for (size_t i = window_start; i < window_end; i++) {\n       \
    \     window[i - window_start] = data[i][key];\n        }\n    }\n    else \n\
    \    {\n        for (size_t i = 0; i < key; i++) {\n            window[i] = data[i][key];\n\
    \        }\n    }\n    return statistics.mean(window);\n}\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79gh6ysl.d(15): Error: undefined identifier `statistics`

    /tmp/tmp79gh6ysl.d(20): Error: undefined identifier `statistics`

    /tmp/tmp79gh6ysl.d(38): Error: undefined identifier `statistics`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79gh6ysl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length);\n\
    \    auto mean = mean(numbers);\n    return mean(map!(e => abs(e - mean))(numbers));\n\
    }\n/*\n For a given array of input numbers, calculate the mean absolute deviation\n\
    \    around the median of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (median in this\
    \ case):\n    MAD = average | x - x_median |\n    >>> mean_absolute_deviation_around_median([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_around_median(float[]\
    \ numbers) \n{\n    assert(numbers.length);\n    auto median = median(numbers);\n\
    \    return mean(map!(e => abs(e - median))(numbers));\n}\n/*\n Calculate the\
    \ median absolute deviation (MAD) of the input array.\n    Median Absolute Deviation\
    \ is the median of the absolute differences\n    between each element and the\
    \ median of the dataset:\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    assert(numbers.length);\n    auto median = median(numbers);\n\
    \    return median(map!(e => abs(e - median))(numbers));\n}\n/*\n Calculate the\
    \ percentile rank of an item in a list, relative to the values\n    in that list.\n\
    \    Percentile rank is the percentage of scores in a distribution that are\n\
    \    equal to or less than the given score.\n    >>> percentile_rank([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10], 4)\n    0.4\n    \n*/\nfloat percentile_rank(float[]\
    \ numbers, float item) \n{\n    assert(numbers.length);\n    auto num_equal_or_less\
    \ = filter!(e => e <= item)(numbers).length;\n    return num_equal_or_less / numbers.length;\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe76c0m_m.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe76c0m_m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n\tif (numbers.length == 0)\
    \ {\n\t\treturn 0.0;\n\t}\n\telse \n\t{\n\t\tfloat mean = 0.0;\n\t\tforeach (i;\
    \ numbers) \n\t\t{\n\t\t\tmean += i;\n\t\t}\n\t\tmean /= numbers.length;\n\t\t\
    float sum_error = 0.0;\n\t\tforeach (j; numbers) \n\t\t{\n\t\t\tsum_error += abs(j\
    \ - mean);\n\t\t}\n\t\treturn sum_error / numbers.length;\n\t}\n}\n/*\n    For\
    \ a given array of input numbers, calculate\n    the root mean square deviation\
    \ from the mean.\n    The root mean square is the square root of the average of\
    \ the square of\n    the differences from the mean:\n    RMS = sqrt ( average\
    \ ( x - x_mean )^2 )\n    >>> root_mean_square_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.2909944\n*/\nfloat root_mean_square_deviation(float[] numbers) \n{\n\t\
    if (numbers.length == 0) {\n\t\treturn 0.0;\n\t}\n\telse \n\t{\n\t\tfloat mean\
    \ = 0.0;\n\t\tforeach (i; numbers) \n\t\t{\n\t\t\tmean += i;\n\t\t}\n\t\tmean\
    \ /= numbers.length;\n\t\tfloat sum_squared_error = 0.0;\n\t\tforeach (j; numbers)\
    \ \n\t\t{\n\t\t\tsum_squared_error += sqrt(j - mean);\n\t\t}\n\t\treturn sum_squared_error\
    \ / numbers.length;\n\t}\n}\n/*\n    For a given array of input numbers, calculate\n\
    \    the median absolute deviation from the median.\n    Median Absolute Deviation\
    \ is the median of the absolute difference from\n    the median:\n    MAD = median\
    \ ( | x - x_median | )\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n*/\nfloat median_absolute_deviation(\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8t19ofir.d(74): Error: basic type expected, not `unittest`

    /tmp/tmp8t19ofir.d(74): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8t19ofir.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    import std.math;\n   \
    \ float m = mean(numbers);\n    float[] _deviations = numbers.map!(a => abs(a\
    \ - m)).array;\n    return mean(_deviations);\n}\n/*\n For a given array of input\
    \ numbers, calculate an array of frequencies.\n    The array contains elements\
    \ of type Tuple!(float, float), which store the\n    (number, frequency) of each\
    \ number in the input array.\n    \n    >>> frequency([1.0, 2.0, 2.0, 2.0, 3.0,\
    \ 4.0])\n    [(1.0, 1.0), (2.0, 3.0), (3.0, 1.0), (4.0, 1.0)]\n*/\nTuple!(float,\
    \ float)[] frequency(float[] numbers) \n{\n    import std.array;\n    float[]\
    \ numbers_copy = numbers.dup;\n    numbers_copy.sort;\n    float[] uniq = numbers_copy.uniq;\n\
    \    Tuple!(float, float)[] _freq = uniq.map!(n => tuple(n, numbers.count(n))).array;\n\
    \    return _freq;\n}\n/*\n For a given array of input numbers, calculate an array\
    \ of frequencies.\n    The array contains elements of type Tuple!(float, float),\
    \ which store the\n    (number, frequency) of each number in the input array.\n\
    \    \n    >>> frequency([1.0, 2.0, 2.0, 2.0, 3.0, 4.0])\n    [(1.0, 1.0), (2.0,\
    \ 3.0), (3.0, 1.0), (4.0, 1.0)]\n*/\nTuple!(float, float)[] frequency(float[]\
    \ numbers) \n{\n    import std.array;\n    float[] numbers_copy = numbers.dup;\n\
    \    numbers_copy.sort;\n    float[] uniq = numbers_copy.uniq;\n    Tuple!(float,\
    \ float)[] _freq = uniq.map!(n => tuple(n, numbers.count(n))).array;\n    return\
    \ _freq;\n}\n/*\n For\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpggl9g_ww.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpggl9g_ww.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float[] ds = numbers.map!((x)=>(abs(x\
    \ - numbers.average)));\n    return ds.average;\n}\n/*\n For a given array of\
    \ input numbers, calculate Mean Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the average absolute difference between\
    \ each\n    element and a centerpoint (median in this case):\n    MAD = average\
    \ | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n   \
    \ float[] ds = numbers.map!((x)=>(abs(x - numbers.median)));\n    return ds.average;\n\
    }\n/*\n Calculate the root mean square of a given array.\n    The root mean square\
    \ is defined as:\n    RMS = sqrt ( average (x^2) )\n    >>> root_mean_square([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.7386127875258304\n    >>> root_mean_square([1.0, 2.0,\
    \ -3.0, 4.0])\n    3.6514837167011076\n    \n*/\nfloat root_mean_square(float[]\
    \ numbers) \n{\n    float[] squares = numbers.map!((x)=>(x * x));\n    return\
    \ sqrt(squares.average);\n}\n/*\n Calculate the mode from a given set of numbers.\n\
    \    The mode is the most common number in the set.\n    >>> mode([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    >>> mode([1.0, 2.0, 2.0, 3.0, 4.0])\n    2.0\n    >>> mode([1.0,\
    \ 1.0, 2.0, 2.0, 3.0, 4.0])\n    1.0\n    >>> mode([1.0, 2.0, 3.0, 4.0, 4.0])\n\
    \    4.0\n    >>> mode([1.0, 1.0,\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp99xy6o1l.d(48): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99xy6o1l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    auto average = average(numbers);\n\
    \    return average(map!(abs)(map!((number) => number - average)(numbers)));\n\
    }\n/*\n This algorithm computes a singular value decomposition of the given\n\
    \    matrix, optionally computing the left and/or right singular vectors.\n  \
    \  If full_matrices is false (default), the dimensions of the resulting arrays\n\
    \    are (M, K) and (K, N) instead of (M, M) and (N, N). That is, the\n    returned\
    \ matrices contain just the nonzero parts.\n    Parameters\n    ----------\n \
    \   a : (M, N) array_like\n        Matrix to decompose\n    full_matrices : bool,\
    \ optional\n        If True (default), u and v have the shapes (M, M) and (N,\
    \ N),\n        respectively.\n        Otherwise, the shapes are (M, K) and (K,\
    \ N), respectively,\n        where K = min(M, N).\n    compute_uv : bool, optional\n\
    \        Whether or not to compute u and v in addition to s.\n        True by\
    \ default.\n    hermitian : bool, optional\n        If True, assume that a is\
    \ Hermitian.\n        If False, assume that a is symmetric.\n        If None,\
    \ a will be treated as Hermitian if a.H == a,\n        and symmetric otherwise.\n\
    \    Returns\n    -------\n    u : ndarray\n        Unitary matrix having left\
    \ singular vectors as columns.\n        Of shape (M, M) or (M, K), depending on\
    \ full_matrices.\n        Not returned if compute_uv is False.\n    s : ndarray\n\
    \        The singular values, sorted in non-increasing order.\n        Of shape\
    \ (K,), with K = min(M, N).\n    v : ndarray\n        Unitary matrix having right\
    \ singular vectors as rows.\n        Of shape (N, N) or (K, N), depending on full_matrices.\n\
    \        Not returned if compute_uv is False.\n*/\n//TODO add support to hermitian\
    \ and full_matrices \ntuple!(T[] u, T s, T[] v)(T[][] a, bool compute_uv=true)\n\
    {\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ew_6up1.d(56): Error: found `u` when expecting `)` following template
    argument list

    /tmp/tmp2ew_6up1.d(56): Error: no identifier for declarator `tuple!(T[])`

    /tmp/tmp2ew_6up1.d(56): Error: declaration expected, not `,`

    /tmp/tmp2ew_6up1.d(63): Error: declaration expected, not `assert`

    /tmp/tmp2ew_6up1.d(64): Error: declaration expected, not `assert`

    /tmp/tmp2ew_6up1.d(65): Error: declaration expected, not `assert`

    /tmp/tmp2ew_6up1.d(66): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ew_6up1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float[] differences =\
    \  (float[]) (float[])(numbers.map!(x => abs(x - numbers.average)));\n    return\
    \ differences.average;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8tqj5y_0.d(15): Error: C style cast illegal, use `cast(float[])numbers.map!((x)
    => abs(x - numbers.average))`

    /tmp/tmp8tqj5y_0.d(15): Error: C style cast illegal, use `cast(float[])cast(float[])numbers.map!((x)
    => abs(x - numbers.average))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8tqj5y_0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    import std.algorithm :\
    \ sum;\n    import std.math : abs;\n    assert(numbers.length > 0);\n    auto\
    \ n = numbers.length;\n    auto avg = numbers.sum / n;\n    return abs(numbers.map!(a\
    \ => a - avg).sum / n);\n}\n/*\n For a given array of input numbers, calculate\
    \ Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute differences\n    between each\
    \ element and a centerpoint (median in this case):\n    MAD = median ( | x - x_median\
    \ | )\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n\
    */\nfloat median_absolute_deviation(float[] numbers) \n{\n    import std.algorithm\
    \ : reduce, map, sum, min, max;\n    import std.range : iota;\n    import std.math\
    \ : abs;\n    assert(numbers.length > 0);\n    auto n = numbers.length;\n    auto\
    \ count = numbers.count;\n    auto nth_element = count / 2;\n    auto values =\
    \ numbers.reduce!(a => a.min, a => a.max).sort;\n    auto index = (count % 2 ==\
    \ 0) ? (nth_element + nth_element - 1) / 2 : nth_element;\n    // Handle even\
    \ number of values\n    return abs(values[index] - values.sum / n);\n}\n/*\n For\
    \ a given array of input numbers, calculate Robust Variance\n    around the median\
    \ of this dataset.\n    Robust Variance is the average absolute difference between\
    \ each\n    element and a centerpoint (median in this case):\n    RobustVariance\
    \ = average ( (x - x_median)^2 )\n    >>> robust_variance([1.0, 2.0, 3.0, 4.0])\n\
    \    1.5\n    \n*/\nfloat robust_variance(float[] numbers) \n{\n    import std.algorithm\
    \ : reduce, map, sum, min, max;\n    import std.range : iota;\n    import std.math\
    \ :\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbo5b1flj.d(61): Error: identifier expected following `:`

    /tmp/tmpbo5b1flj.d(61): Error: `;` expected

    /tmp/tmpbo5b1flj.d(69): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbo5b1flj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  foreach (float number; numbers) \n    {\n        mean += number;\n    }\n \
    \   mean /= numbers.length;\n    float abs_deviation = 0.0;\n    foreach (float\
    \ number; numbers) \n    {\n        abs_deviation += abs(number - mean);\n   \
    \ }\n    return abs_deviation / numbers.length;\n}\n/*\n For a given array of\
    \ input numbers, calculate Median Absolute Deviation\n    around the median of\
    \ this dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float[] abs_differences = new float[];\n    float median = numbers[numbers.length\
    \ / 2];\n    foreach (float number; numbers) \n    {\n        abs_differences\
    \ ~= abs(number - median);\n    }\n    return numbers[abs_differences.length /\
    \ 2];\n}\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute difference between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat[] median_absolute_deviation(float[][]\
    \ numberss) \n{\n    float[] medians = new float[];\n    foreach (float[] numbers;\
    \ numberss) \n    {\n        medians ~= median_absolute_deviation(numbers);\n\
    \    }\n    return medians;\n}\n/*\n For a given array of input numbers, calculate\
    \ Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute\
    \ Deviation is the average absolute difference between each\n    element and a\
    \ centerpoint\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n\
    \    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ph3vrf5.d(67): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ph3vrf5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    if (isInputRange!(float[])(numbers))\n\
    \    {\n        throw new Exception(\"error\");\n    }\n    assert(!numbers.empty);\n\
    \    float average = 0.0;\n    float sum = 0.0;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        sum += numbers[i];\n    }\n    average = sum / numbers.length;\n\
    \    float difference = 0.0;\n    float sumDifference = 0.0;\n    for (int i =\
    \ 0; i < numbers.length; i++)\n    {\n        difference = fabs(numbers[i] - average);\n\
    \        sumDifference += difference;\n    }\n    float averageDifference = sumDifference\
    \ / numbers.length;\n    return averageDifference;\n}\n/*\n For a given array\
    \ of input numbers, calculate median of these numbers.\n    Median is the middle\
    \ element in the sorted array, if length of array is\n    odd or average of two\
    \ middle elements if length of array is even.\n    >>> median([1.0, 2.0, 3.0,\
    \ 4.0])\n    2.5\n    >>> median([1.0, 2.0, 3.0])\n    2.0\n    \n*/\nfloat median(float[]\
    \ numbers) \n{\n    if (isInputRange!(float[])(numbers))\n    {\n        throw\
    \ new Exception(\"error\");\n    }\n    assert(!numbers.empty);\n    float[] numbersSort\
    \ = numbers.dup;\n    numbersSort.sort();\n    size_t sizeNumbers = numbersSort.length;\n\
    \    if (isOdd(sizeNumbers))\n    {\n        return numbersSort[(sizeNumbers /\
    \ 2)];\n    }\n    float num1 = numbersSort[(sizeNumbers / 2) - 1];\n    float\
    \ num2 = numbersSort[(sizeNumbers / 2)];\n    return (num1 + num2) / 2;\n}\n/*\n\
    \ For a given array of input numbers, calculate mode of these numbers.\n    This\
    \ is the number that appears the most frequently in the dataset.\n    If mode\
    \ contains more than one element, return the first element from\n    sorted list.\n\
    \    >>> mode([1.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5jea8c66.d(65): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jea8c66.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    //TODO: Add code here\n\
    \    // Return Mean Absolute Deviation\n    double sum = 0;\n    float mean =\
    \ mean(numbers);\n    foreach(i; numbers)\n    {\n        sum += abs(i - mean);\n\
    \    }\n    return float(sum / numbers.length);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7546jazm.d(18): Error: undefined identifier `mean`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7546jazm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    double average = mean(numbers);\n\
    \    double total_absolute_difference = 0.0;\n    foreach (element; numbers) {\n\
    \        total_absolute_difference += abs(element - average);\n    }\n    return\
    \ cast(float) (total_absolute_difference / numbers.length);\n}\n/*\n For a given\
    \ array of input numbers, calculate Median Absolute Deviation\n    around the\
    \ median of this dataset.\n    Median Absolute Deviation is the median of the\
    \ absolute difference between\n    each element and a centerpoint (median in this\
    \ case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float[] absolute_differences = [];\n    float median = median(numbers);\n\
    \    foreach (element; numbers) {\n        absolute_differences ~= abs(element\
    \ - median);\n    }\n    return median(absolute_differences);\n}\n/*\n Calculate\
    \ the median of a dataset.\n    The median is the value separating the higher\
    \ half of a dataset from the\n    lower half. It may be thought of as the \"middle\"\
    \ value.\n    >>> median([0, 1, 2, 3, 4])\n    2\n    >>> median([0, 1, 2, 3])\
    \  # len(x) is odd\n    1.5\n    \n*/\nfloat median(float[] numbers) \n{\n   \
    \ std.algorithm.sort(numbers);\n    if (numbers.length % 2 == 0) {\n        return\
    \ (numbers[numbers.length / 2 - 1] + numbers[numbers.length / 2]) / 2;\n    }\
    \ else {\n        return numbers[numbers.length / 2];\n    }\n}\n/*\n Calculate\
    \ the mode of a dataset.\n    The mode is the most common element in the dataset.\n\
    \    For example:\n    >>> mode([0, 1, 1, 2, 2, 2])\n    2\n    If there are multiple\
    \ modes, return the smallest one.\n    >>> mode([0, 0, 1, 1, 2, 2])\n\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplvh2l7kj.d(60): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplvh2l7kj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    import std.algorithm :\
    \ reduce;\n    import std.math : abs;\n    if (numbers.length == 0) \n    {\n\
    \        return float.nan;\n    }\n    float mean = reduce!(a + b)(numbers) /\
    \ numbers.length;\n    float absolute_deviations = reduce!(a + abs(b - mean))(numbers);\n\
    \    return absolute_deviations / numbers.length;\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj9656sou.d(21): Error: undefined identifier `a`

    /tmp/tmpj9656sou.d(21): Error: undefined identifier `b`

    /tmp/tmpj9656sou.d(22): Error: undefined identifier `a`

    /tmp/tmpj9656sou.d(22): Error: undefined identifier `b`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj9656sou.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n  double mean = std.algorithm.sum(numbers)/numbers.length;\n\
    \  double abssum = 0.0;\n  foreach(n; numbers)\n  {\n    abssum += abs(n - mean);\n\
    \  }\n  return (float)(abssum/numbers.length);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsv82aemj.d(21): Error: C style cast illegal, use `cast(float)(abssum
    / numbers.length)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsv82aemj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n  float mean = 0.0;\n  foreach\
    \ (x; numbers)\n    mean += x;\n  mean /= numbers.length;\n  float abs_deviations\
    \ = 0.0;\n  foreach (x; numbers)\n    abs_deviations += abs(x - mean);\n  return\
    \ abs_deviations / numbers.length;\n \n/*\n For a given pair of numerical vectors,\n\
    \    calculate Mean Absolute Error between the two vectors.\n    Mean Absolute\
    \ Error is the average absolute difference between each\n    element of the two\
    \ vectors:\n    MAE = average | x - y |\n    >>> mean_absolute_error([1.0, 2.0,\
    \ 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n    0.0\n    >>> mean_absolute_error([1.0,\
    \ 2.0, 3.0, 4.0], [2.0, 3.0, 4.0, 5.0])\n    1.0\n    >>> mean_absolute_error([1.0,\
    \ 2.0, 3.0, 4.0], [2.0, 3.0, 4.0, 4.0])\n    0.5\n*/\nfloat mean_absolute_error(float[]\
    \ x, float[] y) \n  assert(x.length == y.length);\n  float mae = 0.0;\n  foreach\
    \ (i; 0 .. x.length)\n    mae += abs(x[i] - y[i]);\n  return mae / x.length;\n\
    \ \n/*\n For a given pair of numerical vectors,\n    calculate Mean Squared Error\
    \ between the two vectors.\n    Mean Squared Error is the average squared difference\
    \ between each\n    element of the two vectors:\n    MSE = average (x - y) ^ 2\n\
    \    >>> mean_squared_error([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n    0.0\n\
    \    >>> mean_squared_error([1.0, 2.0, 3.0, 4.0], [2.0, 3.0, 4.0, 5.0])\n    1.0\n\
    \   \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7uaz_psv.d(14): Error: semicolon expected following function declaration

    /tmp/tmp7uaz_psv.d(15): Error: declaration expected, not `foreach`

    /tmp/tmp7uaz_psv.d(15): Error: no identifier for declarator `numbers`

    /tmp/tmp7uaz_psv.d(15): Error: declaration expected, not `)`

    /tmp/tmp7uaz_psv.d(17): Error: no identifier for declarator `mean`

    /tmp/tmp7uaz_psv.d(17): Error: declaration expected, not `/=`

    /tmp/tmp7uaz_psv.d(19): Error: declaration expected, not `foreach`

    /tmp/tmp7uaz_psv.d(19): Error: no identifier for declarator `numbers`

    /tmp/tmp7uaz_psv.d(19): Error: declaration expected, not `)`

    /tmp/tmp7uaz_psv.d(21): Error: declaration expected, not `return`

    /tmp/tmp7uaz_psv.d(37): Error: semicolon expected following function declaration

    /tmp/tmp7uaz_psv.d(37): Error: declaration expected, not `assert`

    /tmp/tmp7uaz_psv.d(39): Error: declaration expected, not `foreach`

    /tmp/tmp7uaz_psv.d(39): Error: declaration expected, not `0`

    /tmp/tmp7uaz_psv.d(41): Error: declaration expected, not `return`

    /tmp/tmp7ua'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return 0;\n}\n/*\n For\
    \ a given array of input numbers, calculate the variance of this dataset.\n  \
    \  Variance is the average of the square distance between each element\n    and\
    \ the average element:\n    Var = average (x - x_mean)^2\n    >>> variance([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.25\n*/\nfloat variance(float[] numbers) \n{\n    return\
    \ 0;\n}\n/*\n For a given array of input numbers, calculate the standard deviation\
    \ of\n    this dataset.\n    Standard deviation is the square root of the variance:\n\
    \    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.118033988749895\n*/\n\
    float standard_deviation(float[] numbers) \n{\n    return 0;\n}\n/*\n For a given\
    \ array of input numbers, calculate the median\n    (the middle number when sorted).\n\
    \    >>> median([3, 1, 2])\n    2\n    >>> median([3, 1, 2, 5])\n    2.5\n*/\n\
    float median(float[] numbers) \n{\n    return 0;\n}\n/*\n For a given array of\
    \ input numbers, calculate the mode (the most common\n    number).\n    >>> mode([3,\
    \ 1, 2, 3])\n    3\n    >>> mode([3, 1, 2, 5])\n    None\n*/\nfloat mode(float[]\
    \ numbers) \n{\n    return 0;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy44r91d2.d(68): unittest failure

    ----------------

    ??:? _d_unittestp [0x428355]

    ??:? void tmpy44r91d2.__unittest_L64_C1() [0x427fb0]

    ??:? void tmpy44r91d2.__modtest() [0x4280d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c30b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b19e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430331]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302bd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b175]

    ??:? runModuleUnitTests [0x42c0e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float[] diffs = new float[numbers.length];\n\
    \    foreach (int i, ref float f; numbers)\n    {\n        diffs[i] = abs(f -\
    \ mean(numbers));\n    }\n    return mean(diffs);\n}\n/*\n For a given array of\
    \ input numbers, calculate the median absolute deviation\n    around the median\
    \ of this dataset.\n    Median Absolute Deviation is the median of the absolute\
    \ differences between\n    each element and a centerpoint (median in this case):\n\
    \    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float[] diffs = new float[numbers.length];\n    foreach (int i, ref float\
    \ f; numbers)\n    {\n        diffs[i] = abs(f - median(numbers));\n    }\n  \
    \  return median(diffs);\n}\n/*\n For a given array of input numbers, calculate\
    \ the median absolute deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the absolute differences between\n    each\
    \ element and a centerpoint (median in this case):\n    MAD = median | x - x_median\
    \ |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat\
    \ median_absolute_deviation(float[] numbers) \n{\n    float[] diffs = new float[numbers.length];\n\
    \    foreach (int i, ref float f; numbers)\n    {\n        diffs[i] = abs(f -\
    \ median(numbers));\n    }\n    return median(diffs);\n}\n/*\n For a given array\
    \ of input numbers, calculate the interquartile range (IQR).\n    The IQR is the\
    \ difference between the 75th and 25th percentile,\n    or between upper and lower\
    \ quartiles:\n    IQR = Q3 - Q1\n    >>> interquartile_range([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n*/\nfloat\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj74vwmg5.d(67): Error: no identifier for declarator `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj74vwmg5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  foreach (idx, n; numbers) {\n        mean += n;\n    }\n    mean /= numbers.length;\n\
    \    float sum = 0.0;\n    foreach (idx, n; numbers) {\n        sum += abs(n -\
    \ mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given array of\
    \ input numbers, calculate the Median Absolute Deviation\n    around the median\
    \ of this dataset.\n    Median Absolute Deviation is the median of the absolute\
    \ difference between\n    each element and a centerpoint (median in this case):\n\
    \    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers)\
    \ \n{\n    float median = median_(numbers);\n    float[] diffs = new float[numbers.length];\n\
    \    foreach (idx, n; numbers) {\n        diffs[idx] = abs(n - median);\n    }\n\
    \    return median_(diffs);\n}\n/*\n For a given array of input numbers, calculate\
    \ the mean squared deviation\n    around the mean of this dataset.\n    Mean Squared\
    \ Deviation is the average squared difference between each\n    element and a\
    \ centerpoint (mean in this case):\n    MSD = average (x - x_mean)^2\n    >>>\
    \ mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n    1.25\n    \n*/\nfloat mean_squared_deviation(float[]\
    \ numbers) \n{\n    float mean = 0.0;\n    foreach (idx, n; numbers) {\n     \
    \   mean += n;\n    }\n    mean /= numbers.length;\n    float sum = 0.0;\n   \
    \ foreach (idx, n; numbers) {\n        sum += pow(n - mean, 2);\n    }\n    return\
    \ sum / numbers.length;\n}\n/*\n Return the arithmetic mean of a dataset.\n  \
    \  >>> mean([1.0, 2.0, 3.0, 4.0\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppjq8_25e.d(68): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppjq8_25e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ > 0);\n    float num = 0.0;\n    foreach (inout i; numbers)\n    {\n       \
    \ num += i;\n    }\n    float mean = num / numbers.length;\n    float sum = 0.0;\n\
    \    foreach (inout i; numbers)\n    {\n        float abs_dev = abs(i - mean);\n\
    \        sum += abs_dev;\n    }\n    return sum / numbers.length;\n}\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkz_pws_t.d(17): Error: variable `tmpkz_pws_t.mean_absolute_deviation.i`
    `inout` variables can only be declared inside `inout` functions

    /tmp/tmpkz_pws_t.d(23): Error: variable `tmpkz_pws_t.mean_absolute_deviation.i`
    `inout` variables can only be declared inside `inout` functions

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkz_pws_t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n     float[] difference =\
    \ numbers.map!((x) => abs(x - numbers.average()));\n     return difference.average();\n\
    }\n/*\nThe average of a set of numbers is the sum of all the numbers divided by\
    \ the number of numbers.\n*/\nfloat average(float[] numbers) \n{\n    return numbers.sum\
    \ / numbers.length;\n}\n/*\n Given a set of input numbers, return a new set with\
    \ the variance of the numbers from the mean\n value.\n Variance = sum(x - x_mean)^2\
    \ / (n - 1)\n >>> variance([1.0, 2.0, 3.0, 4.0])\n 1.6666666666666667\n*/\nfloat\
    \ variance(float[] numbers) \n{\n     float[] difference = numbers.map!((x) =>\
    \ (x - numbers.average()));\n     float[] squared_difference = difference.map!((x)\
    \ => x * x);\n     return squared_difference.sum / (numbers.length - 1);\n}\n\
    /*\nReturn the standard deviation of a list of numbers.\nStandard deviation is\
    \ the square root of the variance.\n*/\nfloat standard_deviation(float[] numbers)\
    \ \n{\n    return sqrt(variance(numbers));\n}\n/*\nReturn an array of z-scores\
    \ (normalized values) calculated from the input array.\nZ-score is calculated\
    \ by subtracting the mean and dividing by the standard deviation.\n*/\nfloat[]\
    \ z_scores(float[] numbers) \n{\n    float mean = numbers.average();\n    float\
    \ std_dev = standard_deviation(numbers);\n    return numbers.map!((x) => (x -\
    \ mean) / std_dev);\n}\n/*\nCalculate the number of standard deviations from the\
    \ mean that a given number is\n    >>> standard_score(1.0, 1.0, 2.0)\n    -0.5\n\
    */\nfloat standard_score(float number, float numbers_mean, float numbers_std_dev)\
    \ \n{\n    return (number - numbers_mean) / numbers_std_dev;\n}\n/*\n Calculate\
    \ the median of a set of numbers.\n The median is the number in the middle of\
    \ a sorted list.\n >>> median([1\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp40lgc5r7.d(65): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp40lgc5r7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float numbers_mean = mean(numbers);\n\
    \    float mean_abs_diff = mean(map!(a => abs(a - numbers_mean))(numbers));\n\
    \    return mean_abs_diff;\n}\n/*\n A function to perform MAD based normalization,\
    \ by substracting the mean,\n    and dividing by the MAD of each element in a\
    \ set.\n    It assumes input data is a 1D array of floats.\n    Normalization\
    \ is performed in-place, on the given vector.\n*/\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjygpo6p1.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmpjygpo6p1.d(16): Error: undefined identifier `mean`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjygpo6p1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float average = 0.0;\n\
    \    int n = 0;\n    for (numbers) \n    {\n        average += item;\n       \
    \ n++;\n    }\n    if (n == 0)\n    {\n        return 0.0;\n    }\n    average\
    \ /= n;\n    float result = 0.0;\n    for (numbers) \n    {\n        result +=\
    \ abs(item - average);\n    }\n    return result / n;\n}\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppkapgum9.d(17): Error: found `)` when expecting `;` following statement

    /tmp/tmppkapgum9.d(22): Error: found `if` when expecting `;` following `for` condition

    /tmp/tmppkapgum9.d(22): Error: found `==` when expecting `)`

    /tmp/tmppkapgum9.d(22): Error: missing `{ ... }` for function literal

    /tmp/tmppkapgum9.d(22): Error: found `0` when expecting `)`

    /tmp/tmppkapgum9.d(22): Error: found `)` instead of statement

    /tmp/tmppkapgum9.d(26): Error: no identifier for declarator `average`

    /tmp/tmppkapgum9.d(26): Error: declaration expected, not `/=`

    /tmp/tmppkapgum9.d(28): Error: declaration expected, not `for`

    /tmp/tmppkapgum9.d(31): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppkapgum9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    if (numbers.length ==\
    \ 0) \n    {\n        return 0.0;\n    }\n    float average = std.algorithm.reduce!\"\
    a + b\"(numbers) / numbers.length;\n    float[] differences = new float[numbers.length];\n\
    \    foreach (i, v; numbers)\n    {\n        differences[i] = v - average;\n \
    \   }\n    return std.algorithm.reduce!\"a + b\"(differences) / numbers.length;\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi5v70jrx.d(19): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpi5v70jrx.d(25): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5v70jrx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ > 0);\n    return mean(abs(numbers - numbers.mean()));\n}\n/*\n The array has\
    \ a zero mean and unit variance.\n    >>> a = standardize([1.0, 2.0, 3.0, 4.0])\n\
    \    >>> assert(a.std() == 1)\n    >>> assert(a.mean() == 0)\n*/\nfloat[] standardize(float[]\
    \ numbers) \n{\n    assert(numbers.length > 0);\n    return (numbers - numbers.mean())\
    \ / numbers.std();\n}\n/*\n Calculate the number of standard deviations from the\
    \ mean where the target\n    number lies.\n    >>> standard_deviations_from_mean(2.0,\
    \ [1.0, 2.0, 3.0, 4.0])\n    0.0\n    >>> standard_deviations_from_mean(4.0, [1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat standard_deviations_from_mean(float target,\
    \ float[] numbers) \n{\n    assert(numbers.length > 0);\n    return (target -\
    \ numbers.mean()) / numbers.std();\n}\n/*\n Calculate the (1-alpha)th confidence\
    \ interval around the mean of the\n    elements in the sequence.\n    >>> confidence_interval(0.95,\
    \ [1.0, 2.0, 3.0, 4.0])\n    (1.92, 4.08)\n*/\nfloat[] confidence_interval(float\
    \ alpha, float[] numbers) \n{\n    assert(numbers.length > 0);\n    assert(0 <\
    \ alpha && alpha < 1);\n    float[] z_critical = normal_inv_cdf(alpha / 2);\n\
    \    float n = numbers.length;\n    float std_err = numbers.std() / sqrt(n);\n\
    \    return tuple(numbers.mean() - std_err * z_critical[0], numbers.mean() + std_err\
    \ * z_critical[1]);\n}\n/*\n Compute the covariance between two sequences of numbers.\n\
    \    >>> covariance([1.0, 2.0, 3.0, 4.0], [\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp85smuj0w.d(57): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp85smuj0w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ != 0);\n    float mean = std.algorithm.reduce!\"a + b\"(numbers) / numbers.length;\n\
    \    return std.algorithm.reduce!\"a + b\"(numbers.map!\"std.math.fabs(a - mean)\"\
    ) / numbers.length;\n}\n/*\n Given a set of repeated samples and a confidence\
    \ level, compute the\n    confidence interval.\n    See http://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval\n\
    \    For more information.\n    Essentially, the interval is a range of values\
    \ that with a certain degree\n    of confidence contains the true value of the\
    \ parameter.\n    >>> confidence_interval(100, 50, 0.95)\n    (0.4, 0.6)\n   \
    \ >>> confidence_interval(100, 10, 0.90)\n    (0.0595, 0.1905)\n    >>> confidence_interval(100,\
    \ 90, 0.95)\n    (0.811, 0.989)\n*/\nTuple!(float, float) confidence_interval(float\
    \ number_of_samples, float number_of_positive_samples, float confidence_level)\
    \ \n{\n    float alpha = 1.0 - confidence_level;\n    float z_alpha_2 = std.math.erfinv(1.0\
    \ - alpha / 2.0) * 2.0;\n    float q = 1.0 - number_of_positive_samples / number_of_samples;\n\
    \    float z_alpha_2_sqrt_n = z_alpha_2 * std.math.sqrt(number_of_samples);\n\
    \    float lower_bound = (number_of_positive_samples + z_alpha_2_sqrt_n * z_alpha_2_sqrt_n\
    \ / (2.0 * number_of_samples)) / (number_of_samples + z_alpha_2_sqrt_n * z_alpha_2_sqrt_n);\n\
    \    float upper_bound = (number_of_positive_samples + z_alpha_2_sqrt_n * z_alpha_2_sqrt_n\
    \ / (2.0 *\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n  \
    \  assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz1pjs7sl.d(41): Error: expression expected, not `unittest`

    /tmp/tmpz1pjs7sl.d(40): Error: found `{` when expecting `)`

    /tmp/tmpz1pjs7sl.d(40): Error: found `alias` when expecting `)`

    /tmp/tmpz1pjs7sl.d(43): Error: semicolon expected, not `candidate`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz1pjs7sl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return mean!(abs!(numbers\
    \ - mean(numbers)));\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaiac3maz.d(15): Error: template instance `mean!(abs!(numbers -
    mean(numbers)))` template `mean` is not defined, did you mean main?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiac3maz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  foreach (n; numbers)\n    {\n        mean += n;\n    }\n    mean /= numbers.length;\n\
    \    float sum = 0.0;\n    foreach (n; numbers)\n    {\n        sum += abs(n -\
    \ mean);\n    }\n    return sum / numbers.length;\n}\n/*\n    For a given array\
    \ of input numbers, calculate Mean Absolute Deviation\n    around an arbitrary\
    \ centerpoint.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint:\n    MAD = average | x - center\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0], 2.5)\n    1.5\n*/\n\
    float mean_absolute_deviation(float[] numbers, float center) \n{\n    float sum\
    \ = 0.0;\n    foreach (n; numbers)\n    {\n        sum += abs(n - center);\n \
    \   }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6hcyvoqc.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x428505]

    ??:? void tmp6hcyvoqc.__unittest_L46_C1() [0x428265]

    ??:? void tmp6hcyvoqc.__modtest() [0x428284]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b372]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430505]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430491]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b349]

    ??:? runModuleUnitTests [0x42c2b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428954]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n    float mean = 0.0;\n    foreach\
    \ (value; numbers) \n        mean += value;\n    mean /= numbers.length;\n   \
    \ float sum = 0.0;\n    foreach (value; numbers) \n        sum += abs(value -\
    \ mean);\n    return sum / numbers.length;\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzu96ihj_.d(14): Error: semicolon expected following function declaration

    /tmp/tmpzu96ihj_.d(15): Error: declaration expected, not `foreach`

    /tmp/tmpzu96ihj_.d(15): Error: no identifier for declarator `numbers`

    /tmp/tmpzu96ihj_.d(15): Error: declaration expected, not `)`

    /tmp/tmpzu96ihj_.d(17): Error: no identifier for declarator `mean`

    /tmp/tmpzu96ihj_.d(17): Error: declaration expected, not `/=`

    /tmp/tmpzu96ihj_.d(19): Error: declaration expected, not `foreach`

    /tmp/tmpzu96ihj_.d(19): Error: no identifier for declarator `numbers`

    /tmp/tmpzu96ihj_.d(19): Error: declaration expected, not `)`

    /tmp/tmpzu96ihj_.d(21): Error: declaration expected, not `return`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzu96ihj_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return mean(map!((a) =>\
    \ abs(a - mean(numbers)))(numbers));\n}\n/*\n For a given array of input numbers,\
    \ calculate the Median Absolute Deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint (median in this case):\n    MAD = median |\
    \ x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  \
    \  1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float[]\
    \ diff = map!((a) => abs(a - median(numbers)))(numbers);\n    return median(diff);\n\
    }\n/*\n Calculate the median of an array of numbers.\n If a number is provided,\
    \ calculate the median of an evenly spaced range\n    of numbers.\n    >>> median([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    >>> median(1.0, 2.0, 3.0, 4.0)\n    2.5\n    >>>\
    \ median(1.0, 2.0, 3.0, 4.0, 5.0)\n    3.0\n    \n*/\nfloat median(float[] numbers)\
    \ \n{\n    float[] copy = numbers.dup;\n    copy.sort();\n    int len_ = copy.length;\n\
    \    if (len_ % 2 == 0) \n    {\n        return (copy[len_ / 2 - 1] + copy[len_\
    \ / 2]) / 2;\n    } \n    else \n    {\n        return copy[len_ / 2];\n    }\n\
    }\n/*\n Calculate the Mean Absolute Error for two iterables.\n    This calculation\
    \ is sometimes termed the Root Mean Squared Error,\n    which is inappropriate\
    \ since it is not square rooted.\n    >>> mean_absolute_error([1.0, 2.0, 3.0,\
    \ 4.0], [1.0, 2.0, 3.0, 4.0])\n    0.0\n    >>> mean_absolute_error([1.0, 2.0,\
    \ 3.0, 4\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4aatqljp.d(58): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4aatqljp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return numbers.map!((n)\
    \ => abs(n - mean(numbers))).sum / numbers.length;\n}\n/*\n For a given array\
    \ of input numbers, calculate Median Absolute Deviation\n    around the median\
    \ of this dataset.\n    Median Absolute Deviation is the median of absolute difference\
    \ between each\n    element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    return median(numbers.map!((n) => abs(n - median(numbers))));\n}\n/*\n\
    \ For a given array of input numbers, calculate the average of squared deviations\n\
    \    from the mean. This is also called the Variance.\n    >>> variance([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.25\n    \n*/\nfloat variance(float[] numbers) \n{\n \
    \   return pow(deviation(numbers), 2.0);\n}\n/*\n For a given array of input numbers,\
    \ calculate the average of squared deviations\n    from the mean. This is also\
    \ called the Variance.\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n    1.25\n   \
    \ \n*/\nfloat standard_deviation(float[] numbers) \n{\n    return sqrt(variance(numbers));\n\
    }\n/*\n For a given array of input numbers, calculate the average of squared deviations\n\
    \    from the mean. This is also called the Variance.\n    >>> variance([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.25\n    \n*/\nfloat deviation(float[] numbers) \n{\n\
    \    float the_mean = mean(numbers);\n    return sqrt(numbers.map!((n) => pow(n\
    \ - the_mean, 2.0)).sum / numbers.length);\n}\n/*\n A way to remove outliers from\
    \ a dataset.\n    This can be used to clean up a dataset for analysis.\n    For\
    \ a given array of input numbers, return a new array\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0uqt6s4f.d(65): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0uqt6s4f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return abs(avg(numbers)\
    \ - numbers);\n}\n/*\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpytw1rmvg.d(17): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpytw1rmvg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return mean(map!abs(map!(a\
    \ => a - mean(numbers))(numbers)));\n}\n/*\n For a given array of input numbers,\
    \ calculate Median Absolute Deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of the absolute difference between\n\
    \    each element and a centerpoint (median in this case):\n    MAD = median |\
    \ x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  \
    \  1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    return\
    \ median(map!abs(map!(a => a - median(numbers))(numbers)));\n}\n/*\n Create a\
    \ class to hold the input and results of a regression analysis.\n*/\nclass RegressionAnalysis\
    \ \n{\n    private float[] _x;\n    private float[] _y;\n    private float[] _residuals;\n\
    \    private float[] _predicted;\n    private float[] _fitted;\n    private float[]\
    \ _weights;\n    private float _intercept;\n    private float _slope;\n    private\
    \ float _rvalue;\n    private float _stderr;\n    private float _pvalue;\n   \
    \ private float _error;\n    private float _error_reduction;\n    private float\
    \ _sdr;\n    private float _sigmasq;\n    private float _sigma;\n    private float\
    \ _sst;\n    private float _bic;\n    private float _aic;\n    private float _ssr;\n\
    \    private float _mse;\n    private float _msr;\n    private float _ssr2;\n\
    \    private float _rmse;\n    private float _r2;\n    private float _durbin_watson;\n\
    \    private float _diagnostic_ratio;\n    private float _breusch_pagan;\n   \
    \ private float _harvey_collier;\n    private float _arch_lm;\n    private float\
    \ _engle_granger;\n    private float _white;\n    private float _q;\n    private\
    \ float _p;\n    private float _sw;\n    private float _r\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp185wvc3u.d(72): Error: semicolon expected, not `unittest`

    /tmp/tmp185wvc3u.d(80): Error: `}` expected following members in `class` declaration
    at /tmp/tmp185wvc3u.d(34)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp185wvc3u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float[] n = numbers;\n\
    \    float mean = (n.mean ! \"a + b\" )(0.0f);\n    float[] distance = n.map!(\"\
    a - mean\")(mean);\n    float absolute_distance = distance.map!(\"abs(a)\")(0.0f);\n\
    \    float average_distance = absolute_distance.mean ! \"a + b\" (0.0f);\n   \
    \ return average_distance;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbbk02ccj.d(16): Error: C style cast illegal, use `cast(n.mean!"a
    + b")0.00000F`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbbk02ccj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float average = std.algorithm.reduce!\"\
    a + b\"(numbers) / float(numbers.length);\n    float distances_from_average =\
    \ numbers.map!\"abs(a - average)\";\n    return std.algorithm.reduce!\"a + b\"\
    (distances_from_average) / float(distances_from_average.length);\n}\n/*\n For\
    \ a given array of input numbers, calculate the Mean Absolute Deviation\n    around\
    \ a user-specified centerpoint.\n    Mean Absolute Deviation is the average absolute\
    \ difference between each\n    element and a centerpoint (mean in this case):\n\
    \    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0], 2.5)\n    1.0\n*/\nfloat mean_absolute_deviation(float[] numbers,\
    \ float centerpoint) \n{\n    float distances_from_centerpoint = numbers.map!\"\
    abs(a - centerpoint)\";\n    return std.algorithm.reduce!\"a + b\"(distances_from_centerpoint)\
    \ / float(distances_from_centerpoint.length);\n}\n/*\n For a given array of input\
    \ numbers, calculate the standard deviation.\n    Standard deviation is a measure\
    \ of how spread out numbers are,\n    given a centerpoint (mean in this case).\n\
    \    The formula for standard deviation is the square root of the\n    variance.\
    \ The variance is defined as the average squared difference\n    from the mean:\n\
    \    Var(X) = average ((x - x_mean) ^ 2)\n    >>> standard_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.2909944487358056\n*/\nfloat standard_deviation(float[] numbers)\
    \ \n{\n    float average = std.algorithm.reduce!\"a + b\"(numbers) / float(numbers.length);\n\
    \    float squared_distances_from_average = numbers.map!\"(a - average) ^ 2\"\
    ;\n    float variance = std.algorithm.reduce!\"a + b\"(squared_distances_from_average)\
    \ / float(squared_distances_from_average.length);\n    return sqrt(vari\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe3plfef1.d(50): Error: found `unittest` when expecting `,`

    /tmp/tmpe3plfef1.d(58): Error: found `void` when expecting `,`

    /tmp/tmpe3plfef1.d(58): Error: found `{` when expecting `,`

    /tmp/tmpe3plfef1.d(58): Error: expression expected, not `}`

    /tmp/tmpe3plfef1.d(58): Error: found `End of File` when expecting `,`

    /tmp/tmpe3plfef1.d(58): Error: found `End of File` when expecting `)`

    /tmp/tmpe3plfef1.d(58): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmpe3plfef1.d(58): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe3plfef1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    auto center = mean(numbers);\n\
    \    auto deviations = map!(abs)(map!(a => a - center)(numbers));\n    return\
    \ mean(deviations);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ymwne9_.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmp_ymwne9_.d(16): Error: template instance `map!abs` template `map` is not
    defined

    /tmp/tmp_ymwne9_.d(17): Error: undefined identifier `mean`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ymwne9_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] differences = new float[numbers.length];\n    foreach (i, num; numbers)\
    \ \n    {\n        differences[i] = abs(num - mean);\n    }\n    return mean(differences);\n\
    }\n/*\n Return the median absolute deviation around the median of input array\
    \ of\n    numbers.\n    To calculate this, we need the median of the input array\
    \ first. Then\n    calculate the absolute difference of each element from the\
    \ median. Then\n    find the median of the resulting array.\n    Median Absolute\
    \ Deviation is defined as the median of the absolute\n    differences from the\
    \ median:\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    >>> median_absolute_deviation([1.0, 1.0, 3.0,\
    \ 4.0])\n    0.5\n    >>> median_absolute_deviation([1.0, 2.0, 2.0, 4.0])\n  \
    \  0.5\n    >>> median_absolute_deviation([1.0, 1.0, 1.0, 1.0])\n    0.0\n   \
    \ \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median\
    \ = median(numbers);\n    float[] differences = new float[numbers.length];\n \
    \   foreach (i, num; numbers) \n    {\n        differences[i] = abs(num - median);\n\
    \    }\n    return median(differences);\n}\n/*\n Return the median of the input\
    \ array.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    >>> median([1.0,\
    \ 1.0, 3.0, 4.0])\n    1.5\n    >>> median([1.0, 2.0, 2.0, 4.0])\n    2.0\n  \
    \  >>> median([1.0, 1.0, 1.0, 1.0])\n    1.0\n    \n*/\nfloat median(float[] numbers)\
    \ \n{\n    float[] sorted = sort(numbers);\n\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkgdbasw4.d(68): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkgdbasw4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0;\n   \
    \ int n = numbers.length;\n    if (n <= 1)\n        return 0.0;\n    float mean\
    \ = 0.0;\n    foreach (x; numbers) {\n        mean += x;\n    }\n    mean /= n;\n\
    \    foreach (x; numbers) {\n        sum += abs(x - mean);\n    }\n    return\
    \ sum / n;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n\
    \    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2_vy8rym.d(16): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_vy8rym.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float average = mean(numbers);\n\
    \    float[] differences = numbers.map!(x => abs(x - average));\n    return mean(differences);\n\
    }\n/*\n Return the mean absolute deviation for each key in a dictionary of\n \
    \   numbers.\n    >>> kv = [(\"a\", [1.0, 2.0, 3.0, 4.0]), (\"b\", [5.0, 6.0,\
    \ 7.0, 8.0])]\n    >>> mean_absolute_deviation_by_key(kv)\n    [(\"a\", 1.0),\
    \ (\"b\", 1.0)]\n    \n*/\nTuple!(R, float)[] mean_absolute_deviation_by_key(Tuple!(R,\
    \ float[])[] kv) \n{\n    return kv.map!(x => tuple(x[0], mean_absolute_deviation(x[1])));\n\
    }\n/*\n Return the mean absolute deviation for each key in a dictionary of\n \
    \   numbers.\n    >>> kv = [(\"a\", [1.0, 2.0, 3.0, 4.0]), (\"b\", [5.0, 6.0,\
    \ 7.0, 8.0])]\n    >>> mean_absolute_deviation_by_key(kv)\n    [(\"a\", 1.0),\
    \ (\"b\", 1.0)]\n    \n*/\nfloat mean_absolute_deviation_by_key(float[] numbers)\
    \ \n{\n    float average = mean(numbers);\n    float[] differences = numbers.map!(x\
    \ => abs(x - average));\n    return mean(differences);\n}\n/*\n Return the mean\
    \ absolute deviation for each key in a dictionary of\n    numbers.\n    >>> kv\
    \ = [(\"a\", [1.0, 2.0, 3.0, 4.0]), (\"b\", [5.0, 6.0, 7.0, 8.0])]\n    >>> mean_absolute_deviation_by_key(kv)\n\
    \    [(\"a\", 1.0), (\"b\", 1.0)]\n    \n*/\nfloat[] mean_absolute_deviation_by_key(float[][]\
    \ numbers) \n{\n    float[] result\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbjwhz6o4.d(56): Error: semicolon expected, not `unittest`

    /tmp/tmpbjwhz6o4.d(56): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbjwhz6o4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float deviation = 0.0;\n\
    \    foreach (n; numbers) {\n        deviation += abs(n - mean(numbers));\n  \
    \  }\n    return deviation / float(numbers.length);\n}\n// Returns a pair of ints\
    \ from the std.typecons module.\n// The first is a randomly selected item from\
    \ a list,\n// the second is the list with the first element removed.\nalias StringAndList!(string)\
    \ StringAndList;\n// StringAndList implements opSlice to get the head (string)\n\
    // and tail (string[]) of a list without copying.\nStringAndList randomItemFromList(string[]\
    \ list) {\n    import std.random;\n    auto index = uniform(0, list.length);\n\
    \    return list[index .. $];\n}\n/*\n Return a random item from a list, giving\
    \ each item a \n    weight proportional to the frequency of the value in the input\
    \ data.\n    The weights are normalized to sum to 1.\n    >>> randomItemFromList([2,\
    \ 3, 2, 4, 2, 3], [2, 3, 4])\n    3\n    >>> randomItemFromList([1, 2, 3, 4, 5],\
    \ [1, 2, 3, 4, 5]) in [1, 2, 3, 4, 5]\n    True\n*/\nT randomItemFromList(T)(T[]\
    \ list, T[] data) {\n    T[] counts = new T[data.length];\n    size_t i = 0;\n\
    \    foreach (e; data) {\n        counts[i] = count(e, data);\n        i++;\n\
    \    }\n    float[] weights = new float[counts.length];\n    float totalCount\
    \ = float(counts.sum);\n    foreach (i, c; counts) {\n        weights[i] = float(c)\
    \ / totalCount;\n    }\n    import std.random;\n    return list[choice(list.length,\
    \ weights)];\n}\n/*\n Given a list of numbers, return the mean.\n    >>> mean([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat mean(float[] numbers) {\n    float total\
    \ = 0.0;\n    foreach\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe5n9xfyz.d(64): Error: found `unittest` when expecting `(`

    /tmp/tmpe5n9xfyz.d(65): Error: basic type expected, not `{`

    /tmp/tmpe5n9xfyz.d(65): Error: no identifier for declarator `_error_`

    /tmp/tmpe5n9xfyz.d(65): Error: found `{` when expecting `;`

    /tmp/tmpe5n9xfyz.d(66): Error: expression expected, not `alias`

    /tmp/tmpe5n9xfyz.d(66): Error: found `candidate` when expecting `)`

    /tmp/tmpe5n9xfyz.d(66): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5n9xfyz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    auto N = numbers.length;\n\
    \    assert(N >= 2, \"list length >= 2\");\n    auto total = 0.0;\n    auto mean\
    \ = (numbers[0] + numbers[1]) / 2.0;\n    // Calculate average mean\n    foreach\
    \ (i, v; numbers) \n    {\n        total += v;\n        mean = (mean + v) / 2.0;\n\
    \    }\n    auto average_difference = 0.0;\n    foreach (i, v; numbers) \n   \
    \ {\n        average_difference += abs(v - mean);\n    }\n    return average_difference\
    \ / N;\n}\n/*\n Naive implementation of Mean Absolute Deviation around\n    median\
    \ of the list.\n    MAD = average | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.5\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    auto N = numbers.length;\n    assert(N >= 2, \"list length\
    \ >= 2\");\n    auto median = (numbers[0] + numbers[1]) / 2.0;\n    auto average_difference\
    \ = 0.0;\n    foreach (i, v; numbers) \n    {\n        median = (median + v) /\
    \ 2.0;\n    }\n    foreach (i, v; numbers) \n    {\n        average_difference\
    \ += abs(v - median);\n    }\n    return average_difference / N;\n}\n/*\n For\
    \ a given array of input numbers, calculate Median Absolute Deviation\n    around\
    \ the median of this dataset.\n    Median Absolute Deviation is the median of\
    \ the average absolute difference\n    between each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.5\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    auto N = numbers.length;\n    assert(N >= 2, \"list length\
    \ >= 2\");\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n  \
    \  assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn7z5papv.d(70): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn7z5papv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    import std.math : abs;\n\
    \    assert(numbers.length >= 1);\n    float sum = 0.0;\n    float mean = 0.0;\n\
    \    foreach(n; numbers) \n    {\n        sum += n;\n    }\n    mean = sum / numbers.length;\n\
    \    float mad = 0.0;\n    foreach(n; numbers) \n    {\n        mad += abs(n -\
    \ mean);\n    }\n    return mad / numbers.length;\n}\n/*\n For a given array of\
    \ input numbers, calculate Median Absolute Deviation\n    around the median of\
    \ this dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n \
    \   import std.math : abs;\n    assert(numbers.length >= 1);\n    auto sorted\
    \ = numbers.sort;\n    float median = 0.0;\n    if (sorted.length % 2 == 0) \n\
    \    {\n        median = (sorted[$/2 - 1] + sorted[$/2]) / 2;\n    } \n    else\
    \ \n    {\n        median = sorted[$/2];\n    }\n    float[] deviations = new\
    \ float[sorted.length];\n    foreach(i, n; sorted) \n    {\n        deviations[i]\
    \ = abs(n - median);\n    }\n    return deviations.sort[$/2];\n}\n/*\n Return\
    \ the mean and standard deviation of a dataset.\n    The mean is the average of\
    \ the dataset, the standard deviation is the\n    square root of the variance.\n\
    \    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.118033988749895\n*/\nauto mean_and_standard_deviation(float[]\
    \ numbers) \n{\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n\
    \    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpra1at9vr.d(72): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpra1at9vr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    auto mean = mean(numbers);\n\
    \    auto n = numbers.length;\n    float sum = 0.0;\n    foreach (i, x; numbers)\n\
    \        sum += abs(x - mean);\n    return sum / n;\n}\n/*\n For a given array\
    \ of input numbers, calculate a biweight midvariance.\n     A biweight midvariance\
    \ is a robust measure of statistical dispersion,\n     calculated as the midvariance\
    \ of the biweight midcorrelation.\n     The biweight midcorrelation is the number\
    \ at the center of the ordered\n     dataset that minimizes the average absolute\
    \ difference between each\n     element and this centerpoint.\n     The biweight\
    \ midvariance is the square of the biweight midcorrelation.\n     >>> biweight_midvariance([1.0,\
    \ 2.0, 3.0, 4.0])\n     1.0\n*/\nfloat biweight_midvariance(float[] numbers) \n\
    {\n    auto n = numbers.length;\n    auto sorted_numbers = sort(numbers);\n  \
    \  auto mid = n / 2;\n    float minimum_mad = INFINITY;\n    int index = 0;\n\
    \    foreach (i, x; sorted_numbers) \n    {\n        auto mad = mean_absolute_deviation(sorted_numbers[i\
    \ .. n]);\n        if (mad < minimum_mad) \n        {\n            minimum_mad\
    \ = mad;\n            index = i;\n        }\n    }\n    return pow(sorted_numbers[index],\
    \ 2);\n}\n/*\n Calculate the median absolute deviation around the median.\n  \
    \  The median absolute deviation (MAD) is a robust statistic for scale,\n    providing\
    \ an alternative to the standard deviation. The MAD is defined\n    as the median\
    \ of the absolute deviations from the median.\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat median_absolute_deviation(float[] numbers)\
    \ \n{\n    auto median = median(numbers);\n    auto n = numbers.length;\n    float[]\
    \ deviations = new float[n];\n    foreach (i, x; numbers)\n        deviations[i]\
    \ = abs\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpppfv15zv.d(66): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpppfv15zv.d(74): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppfv15zv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \nin \n{\n    import std.math;\n\
    \    enforce(!numbers.empty, \"empty array given\");\n}\nbody \n{\n    import\
    \ std.math;\n    float mean = mean(numbers);\n    float[] absolute_deviations\
    \ = map!(n => abs(n - mean))(numbers);\n    return mean(absolute_deviations);\n\
    }\n/*\n For a given array of input numbers, calculate the standard deviation\n\
    \    of the dataset.\n    standard deviation is the square root of the Mean Absolute\
    \ Deviation:\n    std.dev = sqrt(average | x - x_mean |^2)\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n*/\nfloat standard_deviation(float[]\
    \ numbers) \nin \n{\n    import std.math;\n    enforce(!numbers.empty, \"empty\
    \ array given\");\n}\nbody \n{\n    import std.math;\n    float mean = mean(numbers);\n\
    \    float[] squared_deviations = map!(n => pow(n - mean, 2))(numbers);\n    return\
    \ sqrt(mean(squared_deviations));\n}\n/*\n For a given array of input numbers,\
    \ calculate the mean\n    of the dataset.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n\
    \    2.5\n*/\nfloat mean(float[] numbers) \nin \n{\n    import std.math;\n   \
    \ enforce(!numbers.empty, \"empty array given\");\n}\nbody \n{\n    import std.math;\n\
    \    return sum(numbers) / numbers.length;\n}\n/*\n For a given array of input\
    \ numbers, calculate the median\n    of the dataset.\n    >>> median([1.0, 2.0,\
    \ 3.0, 4.0])\n    2.5\n*/\nfloat median(float[] numbers) \nin \n{\n    import\
    \ std.math;\n    enforce(!numbers.empty, \"empty array given\");\n}\nbody \n{\n\
    \    import std.math;\n    sort(numbers);\n    if (numbers.length %\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4ovept18.d(81): Error: expression expected, not `unittest`

    /tmp/tmp4ovept18.d(82): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ovept18.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  foreach (i; numbers) {\n        mean += i;\n    }\n    mean /= numbers.length;\n\
    \    return average(map!abs(a => a - mean)(numbers));\n}\n/*\n Forecast a timeseries:\n\
    \    \n    For each timestep x that we want to forecast, take the previous\n \
    \   m timesteps and use a simple linear regression to forecast it.\n    >>> forecast([1.0,\
    \ 2.0, 3.0, 4.0], 2)\n    [3.0, 4.0]\n    \n*/\nfloat[] forecast(float[] timeseries,\
    \ size_t steps) \n{\n    float[] forecasts = new float[steps];\n    size_t ts_length\
    \ = timeseries.length;\n    for (size_t i = ts_length; i < ts_length + steps;\
    \ i++) {\n        float[] x = new float[i];\n        float[] y = new float[i];\n\
    \        foreach (j; 0 .. i) {\n            x[j] = j;\n            y[j] = timeseries[j];\n\
    \        }\n        forecasts[i - ts_length] = linear_regression(x, y).predict(i\
    \ + 1.0);\n    }\n    return forecasts;\n}\n/*\n Forecast a timeseries by building\
    \ a moving average model\n    with the last m points, where m is the number of\
    \ steps to forecast:\n    >>> forecast_moving_average([1.0, 2.0, 3.0, 4.0], 2)\n\
    \    [3.0, 3.0]\n    \n*/\nfloat[] forecast_moving_average(float[] timeseries,\
    \ size_t steps) \n{\n    float[] forecasts = new float[steps];\n    size_t ts_length\
    \ = timeseries.length;\n    for (size_t i = ts_length; i < ts_length + steps;\
    \ i++) {\n        float[] x = new float[i];\n        float[] y = new float[i];\n\
    \        foreach (j; 0 .. i) {\n            x[j] = j;\n            y[j] = timeseries[j];\n\
    \        }\n        size_\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxiwwj_88.d(65): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpxiwwj_88.d(73): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpxiwwj_88.d(73): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxiwwj_88.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float average = average(numbers);\n\
    \    float[] abs_diff = map!((i) { return abs(i - average); })(numbers);\n   \
    \ return average(abs_diff);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpczj3rzsa.d(15): Error: undefined identifier `average`

    /tmp/tmpczj3rzsa.d(16): Error: template instance `map!((i)

    {

    return abs(i - average);

    }

    )` template `map` is not defined

    /tmp/tmpczj3rzsa.d(17): Error: function expected before `()`, not `average` of
    type `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpczj3rzsa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n\treturn sum(map!(abs)(numbers).retro)\
    \ / numbers.length;\n}\n/*\n For a given array of input numbers, calculate Mean\
    \ Absolute Error\n    between each element and a centerpoint (mean in this case).\n\
    \    Mean Absolute Error is the average absolute difference between each\n   \
    \ element and a centerpoint (mean in this case):\n    MAE = average | x - x_mean\
    \ |\n    >>> mean_absolute_error([1.0, 2.0, 3.0, 4.0])\n    1.5\n*/\nfloat mean_absolute_error(float[]\
    \ numbers) \n{\n\tfloat m = mean(numbers);\n\treturn sum(map!(abs)(numbers - m).retro)\
    \ / numbers.length;\n}\n/*\nFor a given array of input numbers, calculate Mean\
    \ Squared Error\n    between each element and a centerpoint (mean in this case).\n\
    \    Mean Squared Error is the average squared difference between each\n    element\
    \ and a centerpoint (mean in this case):\n    MSE = average (x - x_mean)^2\n \
    \   >>> mean_squared_error([1.0, 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat mean_squared_error(float[]\
    \ numbers) \n{\n\tfloat m = mean(numbers);\n\treturn sum(map!(sqr)(numbers - m).retro)\
    \ / numbers.length;\n}\n/*\nFor a given array of input numbers, calculate Mean\
    \ Squared Log Error\n    between each element and a centerpoint (mean in this\
    \ case).\n    Mean Squared Log Error is the average squared difference between\
    \ the\n    log of each element and the log of a centerpoint (mean in this case):\n\
    \    MSLE = average (log(x) - log(x_mean))^2\n    >>> mean_squared_log_error([1.0,\
    \ 2.0, 3.0, 4.0])\n    0.03125\n*/\nfloat mean_squared_log_error(float[] numbers)\
    \ \n{\n\tfloat m = mean(numbers);\n\treturn sum(map!(sqr)(log(numbers) - log(m)).retro)\
    \ / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpap53wrqh.d(15): Error: undefined identifier `sum`

    /tmp/tmpap53wrqh.d(28): Error: undefined identifier `mean`, did you mean function
    `main`?

    /tmp/tmpap53wrqh.d(29): Error: undefined identifier `sum`

    /tmp/tmpap53wrqh.d(42): Error: undefined identifier `mean`, did you mean function
    `main`?

    /tmp/tmpap53wrqh.d(43): Error: undefined identifier `sum`

    /tmp/tmpap53wrqh.d(56): Error: undefined identifier `mean`, did you mean function
    `main`?

    /tmp/tmpap53wrqh.d(57): Error: undefined identifier `sum`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpap53wrqh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    const x_mean = statistics.mean(numbers);\n\
    \    const deviations = numbers.map!((num) => abs(num - x_mean));\n    return\
    \ statistics.mean(deviations);\n}\nfloat[] codons_coding(float freq[])\n{\n  \
    \  float[] temp;\n    float[] codons_coding_freq;\n    foreach(i, codon; codons)\n\
    \    {\n        temp ~= i;\n        codons_coding_freq ~= freq[i];\n    }\n  \
    \  return codons_coding_freq;\n}\nfloat[] codons_noncoding(float freq[])\n{\n\
    \    float[] temp;\n    float[] codons_noncoding_freq;\n    foreach(i, codon;\
    \ codons)\n    {\n        temp ~= i;\n        codons_noncoding_freq ~= freq[i];\n\
    \    }\n    return codons_noncoding_freq;\n}\nfloat[] codons_freq(string seq,\
    \ float freq[])\n{\n    string codon;\n    int j = 0;\n    float[] codons_freq;\n\
    \    foreach(i, codon; codons)\n    {\n        codons_freq ~= count(seq, codon);\n\
    \    }\n    return codons_freq;\n}\nfloat[] make_codons_freq(string seq)\n{\n\
    \    float[] freq;\n    foreach(i, codon; codons)\n    {\n        freq ~= count(seq,\
    \ codon);\n    }\n    return freq;\n}\nfloat[] codons_usage(string seq)\n{\n \
    \   float[] freq;\n    foreach(i, codon; codons)\n    {\n        freq ~= count(seq,\
    \ codon);\n    }\n    float[] freq_calc;\n    float codons_num = seq.length/3;\n\
    \    foreach(freq_item; freq)\n    {\n        freq_calc ~= (freq_item/codons_num);\n\
    \    }\n    return freq_calc;\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4c_59p_y.d(19): Deprecation: instead of C-style syntax, use D-style
    syntax `float[] freq`

    /tmp/tmp4c_59p_y.d(30): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] freq`

    /tmp/tmp4c_59p_y.d(41): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] freq`

    /tmp/tmp4c_59p_y.d(75): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4c_59p_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float[] abs_deviations\
    \ = new float[numbers.length];\n    float mean = average(numbers);\n    foreach\
    \ (idx, val; numbers)\n    {\n        abs_deviations[idx] = abs(val - mean);\n\
    \    }\n    return average(abs_deviations);\n}\n \n/*\n    For a given array of\
    \ input numbers, calculate the range of the dataset.\n    Range is max - min:\n\
    \    >>> range([1.0, 2.0, 3.0, 4.0])\n    3.0\n*/\nfloat range(float[] numbers)\
    \ \n{\n    float max_ = numbers[0];\n    float min_ = numbers[0];\n    foreach\
    \ (idx, val; numbers)\n    {\n        if (val > max_)\n        {\n           \
    \ max_ = val;\n        }\n        if (val < min_)\n        {\n            min_\
    \ = val;\n        }\n    }\n    return max_ - min_;\n}\n \n/*\n    For a given\
    \ array of input numbers, calculate the variance of the dataset.\n    Variance\
    \ is the average squared difference between each element and the\n    mean of\
    \ the dataset:\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n    1.25\n*/\nfloat variance(float[]\
    \ numbers) \n{\n    float[] squared_deviations = new float[numbers.length];\n\
    \    float mean = average(numbers);\n    foreach (idx, val; numbers)\n    {\n\
    \        squared_deviations[idx] = pow(val - mean, 2);\n    }\n    return average(squared_deviations);\n\
    }\n \n/*\n    For a given array of input numbers, calculate the standard deviation\
    \ of\n    the dataset.\n    Standard deviation is the square root of the variance:\n\
    \    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.118033988749895\n*/\n\
    float standard_deviation(float[] numbers) \n{\n    return sqrt(variance(numbers));\n\
    }\n \n/*\n    For a given array of input numbers, calculate the MAD\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1l1vju91.d(78): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1l1vju91.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_differences = abs_diff(numbers, mean);\n    return mean(abs_differences);\n\
    }\n/*\n    \n    For a given array of input numbers, calculate Mean Squared Deviation\n\
    \    around the mean of this dataset.\n    Mean Squared Deviation is the average\
    \ squared difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MSD = average ( x - x_mean )^2\n    >>> mean_squared_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.25\n    \n*/\nfloat mean_squared_deviation(float[] numbers)\
    \ \n{\n    float mean = mean(numbers);\n    float[] squared_differences = squared_diff(numbers,\
    \ mean);\n    return mean(squared_differences);\n}\n/*\n    \n    For a given\
    \ array of input numbers, calculate Median Absolute Deviation\n    around the\
    \ median of this dataset.\n    Median Absolute Deviation is the median of the\
    \ absolute difference between\n    each element and a centerpoint (median in this\
    \ case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] abs_differences\
    \ = abs_diff(numbers, median);\n    return median(abs_differences);\n}\n/*\n \
    \   \n    Standard deviation is a measure of spread, a quantification of how\n\
    \    dispersed the set of values is.\n    The standard deviation is the square\
    \ root of the variance, the average\n    squared difference from the mean.\n \
    \   Args:\n        numbers (list) - The list of numbers used to calculate the\
    \ standard\n        deviation.\n    Returns:\n        float: The standard deviation\
    \ of the list of numbers given.\n    Examples:\n        >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n        1.1180339887498949\n    \n*/\nfloat standard_deviation(\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpikuj5dtr.d(70): Error: basic type expected, not `unittest`

    /tmp/tmpikuj5dtr.d(70): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikuj5dtr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] absolute_deviations = abs(array(map!((float n) => n - mean)(numbers)));\n\
    \    return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsl_lq_qk.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmpsl_lq_qk.d(16): Error: undefined identifier `array`

    /tmp/tmpsl_lq_qk.d(17): Error: function expected before `()`, not `mean` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsl_lq_qk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return (sum(map!((float\
    \ x) => abs(x - mean(numbers)))(numbers)) / numbers.length);\n}\n/*\n For a given\
    \ array of input numbers, calculate the standard deviation\n of this dataset.\n\
    \ Standard deviation is a measure of the spread of a data set from the mean.\n\
    \    Var = Sum_i (x_i - x_mean)^2 / N\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float m = mean(numbers);\n    float sum_ = 0.0;\n    foreach\
    \ (x; numbers) \n    {\n        sum_ += pow(x - m, 2);\n    }\n    return sqrt(sum_\
    \ / numbers.length);\n}\n/*\n For a given array of input numbers, calculate the\
    \ standard error of the\n mean of this dataset.\n The standard error of the mean\
    \ is the standard deviation of the sampling\n distribution of the mean.\n    SE\
    \ = SD / sqrt(N)\n    >>> standard_error_of_mean([1.0, 2.0, 3.0, 4.0])\n    0.7071067811865476\n\
    */\nfloat standard_error_of_mean(float[] numbers) \n{\n    return standard_deviation(numbers)\
    \ / sqrt(numbers.length);\n}\n/*\n Calculate a range of given input numbers.\n\
    \    >>> range([1.0, 2.0, 3.0, 4.0])\n    3.0\n    \n*/\nfloat range(float[] numbers)\
    \ \n{\n    return max(numbers) - min(numbers);\n}\n/*\n Calculate how many elements\
    \ of a given input array are repeated.\n    >>> count_repeated([1, 2, 3, 2, 1,\
    \ 2, 3, 2, 3, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1])\n    [1: 4, 2: 8, 3: 5]\n    \n*/\n\
    immutable count_repeated(float[] numbers)\n{\n    immutable result = [];\n   \
    \ immutable key = [];\n    immutable items = [];\n    immutable count = [];\n\
    \    immutable a = [];\n    immutable b = [];\n    int n = 0;\nunittest\n{\n \
    \   alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuabp3c_m.d(72): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuabp3c_m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float mad = 0.0;\n    foreach (number; numbers) {\n        mad += abs(number\
    \ - mean);\n    }\n    return mad / numbers.length;\n}\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0w7oa_k2.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0w7oa_k2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float average = (sum(numbers)\
    \ / float(numbers.length));\n    float[] dif = new float[numbers.length];\n  \
    \  foreach (i, v; numbers) \n    {\n        dif[i] = abs(v - average);\n    }\n\
    \    return (sum(dif) / float(dif.length));\n}\n/*\n Given an array of data and\
    \ a reference value,\n    return an array of deviations from the reference value.\n\
    \    >>> deviations_from_reference([1.0, 2.0, 3.0, 4.0], 2.0)\n    [1.0, 0.0,\
    \ 1.0, 2.0]\n*/\nfloat[] deviations_from_reference(float[] data, float ref = 0.0)\
    \ \n{\n    float[] out_deviations = new float[data.length];\n    foreach (i, v;\
    \ data) \n    {\n        out_deviations[i] = abs(v - ref);\n    }\n    return\
    \ out_deviations;\n}\n/*\n Given an array of numbers, return a new array containing\
    \ the number of\n    standard deviations each element lies away from the mean\
    \ of the dataset.\n    >>> standard_deviations([1.0, 2.0, 3.0, 4.0])\n    [0.5,\
    \ 0.5, 0.5, 0.5]\n*/\nfloat[] standard_deviations(float[] numbers) \n{\n    float\
    \ average = (sum(numbers) / float(numbers.length));\n    float[] dif = new float[numbers.length];\n\
    \    foreach (i, v; numbers) \n    {\n        dif[i] = abs(v - average);\n   \
    \ }\n    float deviation = mean_absolute_deviation(numbers);\n    float[] deviation_array\
    \ = new float[numbers.length];\n    foreach (i, v; dif) \n    {\n        deviation_array[i]\
    \ = abs(v / deviation);\n    }\n    return deviation_array;\n}\n/*\n Given an\
    \ array of numbers, return an array where each element is the mean\n    absolute\
    \ deviation of its neighbors.\n    >>> average_deviation_ne\nunittest\n{\n   \
    \ alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplnlzud_l.d(29): Error: found `ref` when expecting `)`

    /tmp/tmplnlzud_l.d(29): Error: semicolon expected following function declaration

    /tmp/tmplnlzud_l.d(29): Error: declaration expected, not `=`

    /tmp/tmplnlzud_l.d(32): Error: declaration expected, not `foreach`

    /tmp/tmplnlzud_l.d(32): Error: no identifier for declarator `data`

    /tmp/tmplnlzud_l.d(32): Error: declaration expected, not `)`

    /tmp/tmplnlzud_l.d(35): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplnlzud_l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float nums_mean = mean(numbers);\n\
    \    float[] nums_deviation = new float[numbers.length];\n    for (int i = 0;\
    \ i < numbers.length; i++)\n    {\n        nums_deviation[i] = abs(numbers[i]\
    \ - nums_mean);\n    }\n    return mean(nums_deviation);\n}\nunittest\n{\n   \
    \ alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqah4vju3.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmpqah4vju3.d(21): Error: undefined identifier `mean`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqah4vju3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = std.algorithm.sum(numbers)\
    \ / numbers.length;\n    float absolute_differences = std.algorithm.sum(numbers.map!((number)\
    \ { return abs(number - mean); }));\n    return absolute_differences / numbers.length;\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp60n0wojy.d(15): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmp60n0wojy.d(16): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp60n0wojy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return numbers.average!\"\
    abs\"(numbers);\n}\n/*\n For a given array of input numbers, calculate Mean Squared\
    \ Deviation\n    around the mean of this dataset.\n    Mean Squared Deviation\
    \ is the average squared difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MSD = average (x - x_mean)^2\n    >>> mean_squared_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.25\n    \n*/\nfloat mean_squared_deviation(float[] numbers)\
    \ \n{\n    float mean = numbers.average;\n    return reduce!\"a + (a - mean)^2\"\
    (numbers) / numbers.length;\n}\n/*\n For a given array of input numbers, calculate\
    \ Root Mean Squared Deviation\n    around the mean of this dataset.\n    Root\
    \ Mean Squared Deviation is the square root of Mean Squared Deviation:\n    RMSD\
    \ = sqrt(average (x - x_mean)^2)\n    >>> root_mean_squared_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.118033988749895\n    \n*/\nfloat root_mean_squared_deviation(float[]\
    \ numbers) \n{\n    return sqrt(mean_squared_deviation(numbers));\n}\n/*\n For\
    \ a given array of input numbers, calculate Median Absolute Deviation\n    around\
    \ the median of this dataset.\n    Median Absolute Deviation is the median of\
    \ the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MED = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float median = numbers.median;\n    float[] differences =\
    \ numbers.map!\"a - median\"(numbers);\n    return differences.median;\n}\n/*\n\
    \ For a given array of input numbers, calculate Standard Deviation\n    around\
    \ the mean of this dataset.\n    Standard Deviation is the square root of the\
    \ variance:\n   \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpge4d7c9y.d(61): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpge4d7c9y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n\tfloat mean = 0.0;\n\tfloat[]\
    \ abs_deviations = new float[numbers.length];\n\t\n\tforeach(i, element; numbers)\n\
    \t{\n\t\tmean += element;\n\t}\n\t\n\tmean /= numbers.length;\n\t\n\tforeach(i,\
    \ element; numbers)\n\t{\n\t\tabs_deviations[i] = abs(element - mean);\n\t}\n\t\
    \n\tfloat abs_dev_mean = 0.0;\n\t\n\tforeach(i, element; abs_deviations)\n\t{\n\
    \t\tabs_dev_mean += element;\n\t}\n\t\n\tabs_dev_mean /= abs_deviations.length;\n\
    \t\n\treturn abs_dev_mean;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqw3qx9wf.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x428535]

    ??:? void tmpqw3qx9wf.__unittest_L41_C1() [0x428299]

    ??:? void tmpqw3qx9wf.__modtest() [0x4282b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430899]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430825]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return mean_absolute_deviation(to!double(numbers));\n\
    }\n/*\nFor a given array of input numbers, calculate Mean Absolute Deviation\n\
    around the mean of this dataset.\nMean Absolute Deviation is the average absolute\
    \ difference between each\nelement and a centerpoint (mean in this case):\nMAD\
    \ = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    1.0\n*/\ndouble mean_absolute_deviation(double[] numbers) \n{\n    double average\
    \ = mean(numbers);\n    double[] distances = map!(x => abs(x - average), numbers);\n\
    \    return mean(distances);\n}\n/*\n For a given array of input numbers, calculate\
    \ Median Absolute Deviation\n around the median of this dataset.\n \n Median Absolute\
    \ Deviation is the median of the distances between each\n element and a centerpoint\
    \ (median in this case):\n MAD = median | x - x_median |\n >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n 1.0\n*/\nfloat median_absolute_deviation(float[] numbers)\
    \ \n{\n    return median_absolute_deviation(to!double(numbers));\n}\n/*\nFor a\
    \ given array of input numbers, calculate Median Absolute Deviation\naround the\
    \ median of this dataset.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn3kbdhob.d(46): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn3kbdhob.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean_absolute_deviation\
    \ = 0.0;\n    float sum_absolute_deviation = 0.0;\n    float sum_absolute_deviation_squared\
    \ = 0.0;\n    float mean = 0.0;\n    float mean_abs_dev_squared = 0.0;\n    float\
    \ mean_abs_dev_squared_minus_one = 0.0;\n    float mean_abs_dev_squared_plus_one\
    \ = 0.0;\n    float mean_abs_dev_squared_plus_two = 0.0;\n    float mean_abs_dev_squared_plus_three\
    \ = 0.0;\n    float mean_abs_dev_squared_plus_four = 0.0;\n    float mean_abs_dev_squared_plus_five\
    \ = 0.0;\n    float mean_abs_dev_squared_plus_six = 0.0;\n    float mean_abs_dev_squared_plus_seven\
    \ = 0.0;\n    float mean_abs_dev_squared_plus_eight = 0.0;\n    float mean_abs_dev_squared_plus_nine\
    \ = 0.0;\n    float mean_abs_dev_squared_plus_ten = 0.0;\n    float mean_abs_dev_squared_plus_eleven\
    \ = 0.0;\n    float mean_abs_dev_squared_plus_twelve = 0.0;\n    float mean_abs_dev_squared_plus_thirteen\
    \ = 0.0;\n    float mean_abs_dev_squared_plus_fourteen = 0.0;\n    float mean_abs_dev_squared_plus_fifteen\
    \ = 0.0;\n    float mean_abs_dev_squared_plus_sixteen = 0.0;\n    float mean_abs_dev_squared_plus_seventeen\
    \ = 0.0;\n    float mean_abs_dev_squared_plus_eighteen = 0.0;\n    float mean_abs_dev_squared_plus_nineteen\
    \ = 0.0;\n    float mean_abs_dev_squared_plus_twenty = 0.0;\n    float mean_abs_dev_\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23pd1jqq.d(42): Error: semicolon expected, not `unittest`

    /tmp/tmp23pd1jqq.d(42): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23pd1jqq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    enum float mean = array.average(numbers);\n\
    \    float sum = 0.0;\n    for (i in 0 .. numbers.length)\n    {\n        sum\
    \ += abs(numbers[i] - mean);\n    }\n    return sum / float(numbers.length);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptmj92xtf.d(17): Error: found `..` when expecting `;` following
    statement

    /tmp/tmptmj92xtf.d(17): Error: found `)` when expecting `;` following `for` condition

    /tmp/tmptmj92xtf.d(21): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptmj92xtf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    import std.math;\n   \
    \ float mean = 0.0;\n    foreach (n; numbers)\n        mean += n;\n    mean /=\
    \ numbers.length;\n    float mad = 0.0;\n    foreach (n; numbers)\n        mad\
    \ += abs(n - mean);\n    return mad / numbers.length;\n}\n \n/*\n Calculate Median\
    \ Absolute Deviation around the median of this dataset.\n*/\nfloat median_absolute_deviation(float[]\
    \ numbers)\n{\n    import std.algorithm : sort;\n    import std.typecons : tuple;\n\
    \    import std.range : only;\n    \n    assert(numbers.length != 0);\n    float[]\
    \ sorted = numbers.dup.sort;\n    float median = sorted[sorted.length / 2];\n\
    \    float[] deviations = new float[sorted.length];\n    foreach (n; sorted)\n\
    \        deviations ~= abs(n - median);\n    return median_absolute_deviation(deviations);\n\
    }\n \n/*\n Calculate the population standard deviation of the given numbers.\n\
    \    Use the given mean, or calculate it if it is not given.\n    Calculating\
    \ the mean is marginally slower than passing it, so unless\n    you need the mean\
    \ anyway, pass it in.\n*/\nfloat population_standard_deviation(float[] numbers,\
    \ float mean = -1.0)\n{\n    import std.math;\n    import std.typecons;\n    assert(numbers.length\
    \ != 0);\n    if (mean < 0.0)\n    {\n        mean = 0.0;\n        foreach (n;\
    \ numbers)\n            mean += n;\n        mean /= numbers.length;\n    }\n \
    \   float standard_deviation = 0.0;\n    foreach (n; numbers)\n        standard_deviation\
    \ += (n - mean) ^^ 2;\n    return sqrt(standard_deviation / numbers.length);\n\
    }\n \n/*\n Calculate the sample standard deviation of the given numbers.\n   \
    \ Use the given mean, or calculate it if it is not given.\n    Calculating the\
    \ mean is marginally slower than passing it, so unless\n    you need the mean\
    \ anyway, pass it in.\n*/\nfloat sample_standard\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm3r501z9.d(75): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm3r501z9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  foreach (x; numbers) {\n        mean += x;\n    }\n    mean /= numbers.length;\n\
    \    float mad = 0.0;\n    foreach (x; numbers) {\n        mad += abs(x - mean);\n\
    \    }\n    return mad / numbers.length;\n}\n \nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj8h1jm50.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283e5]

    ??:? void tmpj8h1jm50.__unittest_L27_C1() [0x428149]

    ??:? void tmpj8h1jm50.__modtest() [0x428168]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3bf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b252]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430894]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430371]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]

    ??:? runModuleUnitTests [0x42c195]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428834]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return sum(map!((x) =>\
    \ abs(x - mean(numbers)))(numbers)) / float(numbers.length);\n}\nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpya6vd2ra.d(15): Error: undefined identifier `sum`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpya6vd2ra.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0.0;\n   \
    \ foreach (number; numbers) {\n        sum += abs(number);\n    }\n    return\
    \ sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5_59cyll.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x42833d]

    ??:? void tmp5_59cyll.__unittest_L21_C1() [0x427f88]

    ??:? void tmp5_59cyll.__modtest() [0x4280bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c317]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43033d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b181]

    ??:? runModuleUnitTests [0x42c0ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42878c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n  return (mean(numbers.map!(x\
    \ => abs(x - mean(numbers))))) ;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoaf517mb.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoaf517mb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float average = mean(numbers);\n\
    \    float sum = 0.0;\n    foreach (value; numbers)\n    {\n        sum += abs(value\
    \ - average);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given array\
    \ of input numbers, calculate Mean Absolute Deviation\n    around an arbitrary\
    \ centerpoint.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint (mean in this case):\n    MAD =\
    \ average | x - center |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0],\
    \ 3.0)\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers, float\
    \ center) \n{\n    float sum = 0.0;\n    foreach (value; numbers)\n    {\n   \
    \     sum += abs(value - center);\n    }\n    return sum / numbers.length;\n}\n\
    /*\n Calculate the median of a given array of numbers.\n    Returns the median\
    \ of the numbers (float)\n    If the array contains an even number of elements,\
    \ the function\n    will return the average of the middle two elements\n    >>>\
    \ median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    >>> median([1.0, 2.0, 3.0])\n   \
    \ 2.0\n    >>> median([1.0, 2.0, 3.0, 4.0, 5.0])\n    3.0\n    \n*/\nfloat median(float[]\
    \ numbers) \n{\n    float[] temp = numbers[];\n    std.algorithm.sort(temp);\n\
    \    int count = temp.length;\n    if (count % 2 == 0)\n    {\n        return\
    \ (temp[count / 2 - 1] + temp[count / 2]) / 2;\n    }\n    else\n    {\n     \
    \   return temp[count / 2];\n    }\n}\n/*\n Calculate the harmonic mean of a given\
    \ array of numbers.\n    The harmonic mean is the reciprocal of the arithmetic\
    \ mean of the\n    reciprocals of the numbers.\n    The harmonic mean is usually\
    \ appropriate for averaging rates\n    >>> harmonic_mean([1.0, 2.0\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp93q3fs2w.d(69): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93q3fs2w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n    in \n    {\n        assert(numbers.length\
    \ != 0u);\n    }\n    body\n    {\n        float mean = mean(numbers);\n     \
    \   auto diffs = numbers.map!(elem => abs(elem - mean));\n        return mean(diffs);\n\
    \    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpef6z0_ax.d(20): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmpef6z0_ax.d(21): Error: no property `map` for type `float[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpef6z0_ax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    import std.exception :\
    \ assertNotNull;\n    assertNotNull!(float[]) (numbers);\n    enum int N = numbers.length;\n\
    \    float mean = sum(numbers) / N;\n    float[] diff = numbers.map!(a => abs(a\
    \ - mean));\n    return sum(diff) / N;\n}\n/*\n    For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute differences\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    import std.exception : assertNotNull;\n    assertNotNull!(float[]) (numbers);\n\
    \    enum int N = numbers.length;\n    float[] abs_dev = numbers.map!(a => abs(a\
    \ - numbers[N / 2]));\n    abs_dev.sort();\n    return abs_dev[N / 2];\n}\n/*\n\
    \    For a given array of input numbers, calculate sample standard deviation\n\
    \    around the mean of this dataset.\n    Standard deviation is the square root\
    \ of the variance.  The sample\n    standard deviation is the square root of the\
    \ sample variance (see\n    variance), and is an unbiased estimator for the population\
    \ standard\n    deviation.\n    >>> sample_standard_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.2909944487358056\n    >>> sample_standard_deviation([1.0, 2.0,\
    \ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0])\n    0.0\n    \n*/\nfloat sample_standard_deviation(float[]\
    \ numbers) \n{\n    import std.exception : assertNotNull;\n    assertNotNull!(float[])\
    \ (numbers);\n    enum int N = numbers.length;\n    return sqrt(sample_\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps632_iy0.d(60): Error: found `unittest` when expecting `,`

    /tmp/tmps632_iy0.d(68): Error: found `void` when expecting `,`

    /tmp/tmps632_iy0.d(68): Error: found `{` when expecting `,`

    /tmp/tmps632_iy0.d(68): Error: expression expected, not `}`

    /tmp/tmps632_iy0.d(68): Error: found `End of File` when expecting `,`

    /tmp/tmps632_iy0.d(68): Error: found `End of File` when expecting `)`

    /tmp/tmps632_iy0.d(68): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmps632_iy0.d(68): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps632_iy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = std.algorithm.sum(numbers)\
    \ / numbers.length;\n    return std.algorithm.sum(std.algorithm.map!( (n) => (n\
    \ > mean) ? n - mean : mean - n )(numbers)) / numbers.length;\n}\n/*\n For a given\
    \ array of input numbers, calculate the Mean Absolute Deviation\n    around the\
    \ trimmed mean of this dataset.\n    Mean Absolute Deviation is the average absolute\
    \ difference between each\n    element and a centerpoint (mean in this case):\n\
    \    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    The trimmed mean removes a given percent of data from\
    \ the tails of the\n    input distribution before calculating the mean of the\
    \ remaining data.\n    This is a useful measure of central tendency for non-normal\
    \ distributions.\n    This function uses the Tukey biweight function to determine\
    \ the points to\n    be removed from the tails of the input distribution.\n  \
    \  See:\n    https://en.wikipedia.org/wiki/Trimmed_mean\n    https://en.wikipedia.org/wiki/Tukey_biweight\n\
    \    http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n    @param\
    \  numbers: array of numbers to evaluate\n    @param  p: fraction of input distribution\
    \ to trim from tails\n    @return trimmed mean absolute deviation\n*/\nfloat mean_absolute_deviation_trimmed(float[]\
    \ numbers, float p = 0.1) \n{\n    float mean = mean_trimmed(numbers, p);\n  \
    \  return std.algorithm.sum(std.algorithm.map!( (n) => (n > mean) ? n - mean :\
    \ mean - n )(numbers)) / numbers.length;\n}\n/*\n Calculate the mean of the input\
    \ data.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n*/\nfloat mean(float[] numbers)\
    \ \n{\n    return std.algorithm.sum(numbers) / numbers.length;\n}\n/*\n Calculate\
    \ the\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk9_tbmb3.d(53): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk9_tbmb3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    //float[] numbers = [\
    \ 1.0, 2.0, 3.0, 4.0 ];\n    float[] differences = [];\n    float mean = 0.0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        differences[i] =\
    \ abs(numbers[i] - mean);\n    }\n    return sum(differences) / numbers.length;\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpme3ca9aj.d(22): Error: undefined identifier `sum`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpme3ca9aj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return average(map!((x)\
    \ => abs(x - average(numbers)))(numbers));\n}\n/*\n For a given array of input\
    \ numbers, calculate Median Absolute Deviation\n    around the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of absolute difference\
    \ between each\n    element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    return median(map!((x) => abs(x - median(numbers)))(numbers));\n}\n/*\n\
    \ Return an array of pairs (tuples with two elements) with the original\n    array\
    \ elements and their corresponding rank.\n    >>> ranks([3.0, 1.0, 2.0])\n   \
    \ [(1.0, 2.0), (3.0, 3.0), (2.0, 1.0)]\n    \n*/\ntuple!(float, float)[] ranks(float[]\
    \ numbers) \n{\n    return sort!((a, b) => ((a[0] < b[0]) ? -1 : (a[0] > b[0])\
    \ ? 1 : 0))(map!((x) => tuple(x, cast(float)numbers.length - x + 1))(sort(numbers)));\n\
    }\n/*\n Return the Spearman rank correlation coefficient, based on a pre-calculated\n\
    \    array of pairs (tuples with two elements) with the original array elements\n\
    \    and their corresponding rank.\n    >>> spearman([(3.0, 2.0), (1.0, 3.0),\
    \ (2.0, 1.0)])\n    1.0\n    \n*/\nfloat spearman(tuple!(float, float)[] ranks)\
    \ \n{\n    int n = ranks.length;\n    float cov = (n * sum(map!((x) => x[0] *\
    \ x[1])(ranks))) - (sum(map!((x) => x[0])(ranks)) * sum(map!((x) => x[1\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj0p7_jli.d(54): Error: found `unittest` when expecting `,`

    /tmp/tmpj0p7_jli.d(62): Error: found `void` when expecting `,`

    /tmp/tmpj0p7_jli.d(62): Error: found `{` when expecting `,`

    /tmp/tmpj0p7_jli.d(62): Error: expression expected, not `}`

    /tmp/tmpj0p7_jli.d(62): Error: found `End of File` when expecting `,`

    /tmp/tmpj0p7_jli.d(62): Error: found `End of File` when expecting `]`

    /tmp/tmpj0p7_jli.d(62): Error: found `End of File` when expecting `)` following
    template argument list

    /tmp/tmpj0p7_jli.d(62): Error: found `End of File` when expecting `,`

    /tmp/tmpj0p7_jli.d(62): Error: found `End of File` when expecting `)`

    /tmp/tmpj0p7_jli.d(53): Error: found `End of File` when expecting `)`

    /tmp/tmpj0p7_jli.d(62): Error: semicolon expected, not `End of File`

    /tmp/tmpj0p7_jli.d(62): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj0p7_jli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float absolute_differences_from_mean = 0.0;\n    for (int n in numbers)\n\
    \    {\n        absolute_differences_from_mean += abs(n - mean);\n    }\n    return\
    \ absolute_differences_from_mean / numbers.length;\n}\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxuuynii.d(17): Error: semicolon expected, not `in`

    /tmp/tmpaxuuynii.d(17): Error: expression expected, not `in`

    /tmp/tmpaxuuynii.d(17): Error: found `numbers` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxuuynii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ > 0);\n    float mean = mean_of(numbers);\n    float abs_deviation = numbers.map!((x)=>abs(x\
    \ - mean)).sum();\n    return abs_deviation / float(numbers.length);\n}\n/*\n\
    \ For a given array of input numbers, calculate Mean Squared Deviation\n    around\
    \ the mean of this dataset.\n    Mean Squared Deviation is the average squared\
    \ difference between each\n    element and a centerpoint (mean in this case):\n\
    \    MSD = average (x - x_mean)^2\n    >>> mean_squared_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.25\n    \n*/\nfloat mean_squared_deviation(float[] numbers) \n\
    {\n    assert(numbers.length > 0);\n    float mean = mean_of(numbers);\n    float\
    \ squared_deviation = numbers.map!((x)=>(x - mean)**2).sum();\n    return squared_deviation\
    \ / float(numbers.length);\n}\n/*\n For a given array of input numbers, calculate\
    \ Median Absolute Deviation\n    around the median of this dataset.\n    Median\
    \ Absolute Deviation is the median of the differences between each\n    element\
    \ and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n\
    \    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float median_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ > 0);\n    float median = median_of(numbers);\n    float abs_deviation = numbers.map!((x)=>abs(x\
    \ - median)).sort!((a, b)=>a > b)[numbers.length / 2];\n    return abs_deviation;\n\
    }\n/*\n For a given array of input numbers, calculate Standard Deviation\n   \
    \ around the mean of this dataset.\n    Standard Deviation is the square root\
    \ of the average squared difference\n    between each element and a centerpoint\
    \ (mean in this case):\n    SD = sqrt(average (x - x_mean)\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpccw1wurx.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpccw1wurx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    /* Add all the numbers\
    \ in the given array */\n    float mean = 0.0;\n    foreach (float num; numbers)\n\
    \    {\n        mean += num;\n    }\n    mean /= numbers.length;\n    /* For each\
    \ element, find absolute difference between it and mean,\n       then sum them\
    \ up */\n    float abs_diff = 0.0;\n    foreach (float num; numbers)\n    {\n\
    \        abs_diff += abs(num - mean);\n    }\n    /* Return mean of absolute differences\
    \ */\n    return abs_diff / numbers.length;\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzgj6y199.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283e5]

    ??:? void tmpzgj6y199.__unittest_L32_C1() [0x428149]

    ??:? void tmpzgj6y199.__modtest() [0x428168]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3bf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b252]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430894]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430371]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]

    ??:? runModuleUnitTests [0x42c195]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428834]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    double sum = 0.0;\n  \
    \  foreach (number; numbers) {\n        sum += number;\n    }\n    auto mean =\
    \ sum / numbers.length;\n    double sumOfSquares = 0.0;\n    foreach (number;\
    \ numbers) {\n        sumOfSquares += abs(number - mean);\n    }\n    return sumOfSquares\
    \ / numbers.length;\n}\n \n/*\n For a given array of input numbers, calculate\
    \ Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute\
    \ Deviation is the average absolute difference between each\n    element and a\
    \ centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>>\
    \ mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation(float[]\
    \ numbers) \n{\n    assert(numbers.length != 0, \"numbers cannot be empty\");\n\
    \    double sum = 0.0;\n    foreach (number; numbers) {\n        sum += number;\n\
    \    }\n    auto mean = sum / numbers.length;\n    double sumOfSquares = 0.0;\n\
    \    foreach (number; numbers) {\n        sumOfSquares += abs(number - mean);\n\
    \    }\n    return sumOfSquares / numbers.length;\n}\n \n/*\n For a given array\
    \ of input numbers, calculate Mean Absolute Deviation\n    around the mean of\
    \ this dataset.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint (mean in this case):\n    MAD =\
    \ average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    if\
    \ (numbers.length == 0) {\n        throw new Exception(\"numbers cannot be empty\"\
    );\n    }\n    double sum = 0.0;\n    foreach (number; numbers) {\n        sum\
    \ += number;\n    }\n    auto mean = sum / numbers.length;\n    double sumOfSquares\
    \ = 0.0;\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyj64umk4.d(73): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyj64umk4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] diffs = new float[numbers.length];\n    foreach (n; 0 .. numbers.length)\n\
    \    {\n        diffs[n] = abs(numbers[n] - mean);\n    }\n    return mean(diffs);\n\
    }\n/*\n Given a time series (a sequence of numerical data points),\n    compute\
    \ the fractal dimension of this series using the Higuchi method.\n    The fractal\
    \ dimension index is calculated by dividing the length of the\n    curve into\
    \ segments and calculating a L_k(t) for each segment. The L_k(t)\n    measurements\
    \ are plotted against t (time) on a log-log scale, and the\n    slope of the resulting\
    \ curve is the fractal dimension index.\n    Higuchi, K. \"Approach to an irregular\
    \ time series on the basis of the\n    fractal theory.\" Physica D: Nonlinear\
    \ Phenomena 31.2 (1988): 277-283.\n*/\nfloat fractal_dimension_higuchi(float[]\
    \ x)\n{\n    import std.algorithm : sort;\n    import std.typecons : tuple;\n\
    \    int N = x.length;\n    if (N <= 1) \n    {\n        return 0.0;\n    }\n\
    \    float[] L = new float[N];\n    auto K_max = min(float(N),float(floor(log(N))));\n\
    \    for (int k = 1; k <= K_max; k++)\n    {\n        float[] L_t = new float[N\
    \ - k];\n        for (int t = 0; t < N - k; t++)\n        {\n            auto\
    \ dx = x[t + k] - x[t];\n            auto dy = float(k);\n            L_t[t] =\
    \ sqrt(pow(dx, 2) + pow(dy, 2));\n        }\n        L[k - 1] = mean(L_t);\n \
    \   }\n    auto regr = polyfit(array(tuple(log(1.0f .. K_max + 1.0f), log(L))));\n\
    \    return regr[0];\n}\n//}\n//}\n//{ Variations on the Classical Approach\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuxnzyfdn.d(55): Error: found `..` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuxnzyfdn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n  { \n    float mean = mean(numbers);\n\
    \    auto abs_deviations = map!(x => abs(x - mean))(numbers);\n    return mean(abs_deviations);\n\
    \  }\n/*\n For a given array of input numbers, calculate the Variance of the dataset.\n\
    \    Variance is a statistical measure of how spread out the data is, or:\n  \
    \  Var(X) = average (x - x_mean)^2\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n \
    \   1.25\n    \n*/\nfloat variance(float[] numbers) \n  { \n    float mean = mean(numbers);\n\
    \    float squared_deviations = sum(map!(x => (x - mean)^2)(numbers));\n    return\
    \ squared_deviations / float(numbers.length);\n  }\n/*\n For a given array of\
    \ input numbers, calculate the Standard Deviation of the\n    dataset.\n    Standard\
    \ Deviation is the square root of the Variance:\n    StDev(X) = sqrt(average (x\
    \ - x_mean)^2)\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.118033988749895\n\
    \    \n*/\nfloat standard_deviation(float[] numbers) \n  { \n    return sqrt(variance(numbers));\n\
    \  }\n/*\n For a given array of input numbers, calculate the Median of the dataset.\n\
    \    Median is the middle value of a sorted sequence of numbers.\n    >>> median([1.0,\
    \ 2.0, 3.0, 4.0])\n    2.5\n    \n*/\nfloat median(float[] numbers) \n  { \n \
    \   auto sorted_numbers = sort(numbers);\n    int midpoint = (numbers.length +\
    \ 1) / 2;\n    if (numbers.length % 2 == 0) \n      {\n        return (sorted_numbers[midpoint]\
    \ + sorted_numbers[midpoint + 1]) / 2;\n      }\n    else \n      {\n        return\
    \ sorted_numbers[midpoint];\n      }\n  }\n/*\n For a given array of\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjcvuz90y.d(66): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjcvuz90y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float ave = 0.0;\n   \
    \ float sum_dev = 0.0;\n    for (float f : numbers) \n    {\n        sum_dev +=\
    \ abs(f - ave);\n    }\n    ave = sum_dev / numbers.length;\n    return ave;\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkdujbzpt.d(17): Error: semicolon expected, not `:`

    /tmp/tmpkdujbzpt.d(17): Error: expression expected, not `:`

    /tmp/tmpkdujbzpt.d(17): Error: found `numbers` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdujbzpt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    if(numbers.length == 0)\n\
    \    {\n        return NaN;\n    }\n    float mean = numbers.sum() / numbers.length;\n\
    \    return numbers.map!((n) => abs(n - mean)).sum() / numbers.length;\n}\n/*\n\
    \ For a given array of input numbers, calculate the unbiased variance.\n    The\
    \ unbiased variance for a set of values is equal to the average of the\n    squared\
    \ differences from the mean:\n    VAR = average ( (x - x_mean) ** 2 )\n    >>>\
    \ variance([1.0, 2.0, 3.0, 4.0])\n    1.6666666666666667\n    \n*/\nfloat variance(float[]\
    \ numbers) \n{\n    if(numbers.length == 0)\n    {\n        return NaN;\n    }\n\
    \    float mean = numbers.sum() / numbers.length;\n    float[] distances = numbers.map!((n)\
    \ => pow(n - mean, 2));\n    return distances.sum() / (distances.length - 1);\n\
    }\n/*\n For a given array of input numbers, calculate the standard deviation.\n\
    \    The standard deviation is the square root of the average of the squared\n\
    \    differences from the mean:\n    STD = sqrt(average ( (x - x_mean) ** 2 ))\n\
    \    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n  \
    \  \n*/\nfloat standard_deviation(float[] numbers) \n{\n    if(numbers.length\
    \ == 0)\n    {\n        return NaN;\n    }\n    return sqrt(variance(numbers));\n\
    }\n/*\n For a given array of input numbers, calculate the unbiased standard\n\
    \    error of the mean.\n    The standard error of the mean is the standard deviation\
    \ of the sample\n    divided by the square root of the number of observations:\n\
    \    SE = STD / sqrt(N)\n    >>> standard_error_of_mean([1.0, 2.0, 3.0, 4.0])\n\
    \    0.6454972243679028\n    \n*/\nfloat standard_error_of_mean(float[] numbers)\
    \ \n{\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn5ihvenf.d(71): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn5ihvenf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float avg = average(numbers);\n\
    \    float sum = 0.0;\n    foreach (x; numbers) {\n        sum += abs(x - avg);\n\
    \    }\n    return sum / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate Median Absolute Deviation\n    around the median of this dataset.\n\
    \    Median Absolute Deviation is the median of absolute difference between each\n\
    \    element and a centerpoint (median in this case):\n    MAD = median | x -\
    \ x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\
    \    \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float m =\
    \ median(numbers);\n    float[] deviations = new float[numbers.length];\n    foreach\
    \ (n; numbers) {\n        deviations ~= abs(n - m);\n    }\n    return median(deviations);\n\
    }\n/*\n For a given array of input numbers, calculate variance.\n    >>> variance([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.25\n    \n*/\nfloat variance(float[] numbers) \n{\n \
    \   float avg = average(numbers);\n    float sum = 0.0;\n    foreach (x; numbers)\
    \ {\n        sum += (x - avg) * (x - avg);\n    }\n    return sum / numbers.length;\n\
    }\n/*\n For a given array of input numbers, calculate variance in population.\n\
    \    >>> population_variance([1.0, 2.0, 3.0, 4.0])\n    1.6666666666666667\n \
    \   \n*/\nfloat population_variance(float[] numbers) \n{\n    float avg = average(numbers);\n\
    \    float sum = 0.0;\n    foreach (x; numbers) {\n        sum += (x - avg) *\
    \ (x - avg);\n    }\n    return sum / (numbers.length - 1);\n}\n/*\n For a given\
    \ array of input numbers, calculate standard deviation.\n    >>> std_dev([1.0,\
    \ 2.0, 3.0, 4.0])\n    1\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_o_exugp.d(71): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o_exugp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean_absolute_deviation\
    \ = 0.0;\n    float mean = 0.0;\n    mean = average(numbers);\n    int length\
    \ = numbers.length;\n    foreach (i; 0 .. length) {\n        mean_absolute_deviation\
    \ += abs(numbers[i] - mean);\n    }\n    mean_absolute_deviation /= length;\n\
    \    return mean_absolute_deviation;\n}\n/*\n For a given array of input numbers,\
    \ calculate mean of the dataset.\n    \n    >>> mean([1.0, 2.0, 3.0, 4.0])\n \
    \   2.5\n    \n*/\nfloat mean(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  float sum = 0.0;\n    foreach (i; numbers) {\n        sum += i;\n    }\n  \
    \  mean = sum / numbers.length;\n    return mean;\n}\n/*\n For a given array of\
    \ input numbers, calculate Median Absolute Deviation\n    around the median of\
    \ this dataset.\n    Median Absolute Deviation is the median of the absolute differences\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers) \n\
    {\n    float median_absolute_deviation = 0.0;\n    float[] median_absolute_deviation_values\
    \ = new float[];\n    float median = 0.0;\n    float sum = 0.0;\n    foreach (i;\
    \ numbers) {\n        median_absolute_deviation_values ~= abs(i - median);\n \
    \   }\n    median = median(median_absolute_deviation_values);\n    int length\
    \ = median_absolute_deviation_values.length;\n    foreach (i; 0 .. length) {\n\
    \        sum += median_absolute_deviation_values[i];\n    }\n    median_absolute_deviation\
    \ = sum / length;\n    return median_absolute_deviation;\n}\n/*\n For a given\
    \ array of input numbers, calculate\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvo6xu35o.d(69): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvo6xu35o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n    in(numbers) pure nothrow\
    \ @safe @nogc\n{\n    float average = numbers.average;\n    return average.absdiff(numbers).average;\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1d_2eoem.d(14): Error: ''pure'' cannot be placed after a template
    constraint

    /tmp/tmp1d_2eoem.d(17): Error: declaration expected, not `return`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1d_2eoem.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    if(numbers.length == 0)\
    \ return 0.0;\n    float mean = sum(numbers) / float(numbers.length);\n    return\
    \ sum(map!((float x) => abs(x - mean))(numbers)) / float(numbers.length);\n}\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpywif3hlg.d(16): Error: undefined identifier `sum`

    /tmp/tmpywif3hlg.d(17): Error: undefined identifier `sum`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpywif3hlg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float x_mean = 0.0;\n\
    \    foreach (x; numbers) \n    {\n        x_mean += x;\n    }\n    x_mean /=\
    \ numbers.length;\n    float residuals_sum = 0.0;\n    foreach (x; numbers) \n\
    \    {\n        residuals_sum += abs(x - x_mean);\n    }\n    return residuals_sum\
    \ / numbers.length;\n}\n/*\n For a given array of input numbers, calculate Mean\
    \ Squared Deviation\n    around the mean of this dataset.\n    Mean Squared Deviation\
    \ is the average squared difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MSD = average (x - x_mean)^2\n    >>> mean_squared_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.25\n    \n*/\nfloat mean_squared_deviation(float[] numbers)\
    \ \n{\n    float x_mean = 0.0;\n    foreach (x; numbers) \n    {\n        x_mean\
    \ += x;\n    }\n    x_mean /= numbers.length;\n    float residuals_sum = 0.0;\n\
    \    foreach (x; numbers) \n    {\n        residuals_sum += pow(x - x_mean, 2);\n\
    \    }\n    return residuals_sum / numbers.length;\n}\n/*\n For a given array\
    \ of input numbers, calculate root of Mean Squared Deviation\n    around the mean\
    \ of this dataset.\n    Root Mean Squared Deviation is the square root of the\
    \ average squared\n    difference between each element and a centerpoint (mean\
    \ in this case):\n    RMSD = sqrt(average (x - x_mean)^2)\n    >>> root_mean_squared_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.118033988749895\n    \n*/\nfloat root_mean_squared_deviation(float[]\
    \ numbers) \n{\n    return sqrt(mean_squared_deviation(numbers));\n}\n/*\n For\
    \ a given array of input numbers, calculate the sample variance\n    around the\
    \ mean\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpive07m_1.d(67): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpive07m_1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n\tfloat mean = mean(numbers);\n\
    \tfloat[] differences = map!(a => abs(a - mean))(numbers);\n\treturn mean(differences);\n\
    }\n/*\n Evaluate the Robustness of a given set of numbers\n    The Robustness\
    \ is defined as the number of standard deviations away from\n    the average value\
    \ the Mean Absolute Deviation is. The more robust the\n    dataset, the higher\
    \ the value will be.\n    >>> robustness([1.0, 2.0, 3.0, 4.0])\n    0.6708203932499369\n\
    */\nfloat robustness(float[] numbers) \n{\n\tfloat mean = mean(numbers);\n\tfloat\
    \ std = standard_deviation(numbers);\n\tfloat[] differences = map!(a => abs(a\
    \ - mean))(numbers);\n\tfloat mad = mean(differences);\n\treturn mad / std;\n\
    }\n/*\n For a given array of input numbers, return the number of elements\n  \
    \  which are outliers.\n    Outliers are defined as those which are more than\
    \ two standard deviations\n    away from the mean:\n    >>> how_many_outliers([1.0,\
    \ 2.0, 3.0, 4.0])\n    0\n    >>> how_many_outliers([1.0, 2.0, 3.0, 4.0, 100.0])\n\
    \    1\n    >>> how_many_outliers([1.0, 2.0, 3.0, 4.0, 100.0, -100.0])\n    2\n\
    */\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9ekwhjn6.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmp9ekwhjn6.d(16): Error: template instance `map!((a) => abs(a - mean))`
    template `map` is not defined

    /tmp/tmp9ekwhjn6.d(17): Error: function expected before `()`, not `mean` of type
    `float`

    /tmp/tmp9ekwhjn6.d(29): Error: undefined identifier `mean`, did you mean function
    `main`?

    /tmp/tmp9ekwhjn6.d(30): Error: undefined identifier `standard_deviation`

    /tmp/tmp9ekwhjn6.d(31): Error: template instance `map!((a) => abs(a - mean))`
    template `map` is not defined

    /tmp/tmp9ekwhjn6.d(32): Error: function expected before `()`, not `mean` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ekwhjn6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float abs_diffs = 0.0;\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpijrhmg81.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpijrhmg81.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n\tdouble sum_ = 0.0;\n\tforeach\
    \ (num; numbers) \n\t{\n\t\tsum_ += abs(num);\n\t}\n\treturn sum_ / numbers.length;\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5g4hgnid.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428345]

    ??:? void tmp5g4hgnid.__unittest_L22_C1() [0x427f90]

    ??:? void tmp5g4hgnid.__modtest() [0x4280c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c31f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430345]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b189]

    ??:? runModuleUnitTests [0x42c0f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428794]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ > 0);\n    float m = numbers[0];\n    foreach (n; numbers[1 .. $]) \n    {\n\
    \        m += n;\n    }\n    m /= numbers.length;\n    float m_absolute_deviation\
    \ = 0.0;\n    foreach (n; numbers) \n    {\n        m_absolute_deviation += abs(n\
    \ - m);\n    }\n    return m_absolute_deviation / numbers.length;\n}\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp17403d23.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428519]

    ??:? void tmp17403d23.__unittest_L29_C1() [0x4281c9]

    ??:? void tmp17403d23.__modtest() [0x4281e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c567]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43058d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a3c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430519]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d1]

    ??:? runModuleUnitTests [0x42c33d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    import std.math;\n   \
    \ return mean(numbers.map!(abs)().array);\n}\nfloat[][] _calculate_distance_matrix(float[][]\
    \ matrix, float[][] test_matrix, float[][] train_matrix) \n{\n    int[][] ROWS\
    \ = get_dimensions(matrix);\n    int rows = ROWS[0];\n    int[][] COLS = get_dimensions(matrix);\n\
    \    int cols = COLS[1];\n    float[][] result = new float[][](rows,cols);\n \
    \   float[][] train_matrix_T = train_matrix.transpose;\n    foreach (i; 0 .. rows)\
    \ \n    {\n        foreach (j; 0 .. cols) \n        {\n            float total\
    \ = 0.0;\n            foreach (k; 0 .. cols) \n            {\n               \
    \ total += (test_matrix[i][k] - train_matrix_T[k][j]) * (test_matrix[i][k] - train_matrix_T[k][j]);\n\
    \            }\n            result[i][j] = sqrt(total);\n        }\n    }\n  \
    \  return result;\n}\nfloat[][] _calculate_distance_matrix(float[][] matrix, float[][]\
    \ train_matrix) \n{\n    return _calculate_distance_matrix(matrix, matrix, train_matrix);\n\
    }\nfloat[][] calculate_distance_matrix(float[][] matrix) \n{\n    return _calculate_distance_matrix(matrix,\
    \ matrix);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n\
    \    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp28u7nwgx.d(16): Error: undefined identifier `mean`, did you mean
    function `tan`?

    /tmp/tmp28u7nwgx.d(20): Error: undefined identifier `get_dimensions`

    /tmp/tmp28u7nwgx.d(21): Error: cannot implicitly convert expression `ROWS[0]`
    of type `int[]` to `int`

    /tmp/tmp28u7nwgx.d(22): Error: undefined identifier `get_dimensions`

    /tmp/tmp28u7nwgx.d(23): Error: cannot implicitly convert expression `COLS[1]`
    of type `int[]` to `int`

    /tmp/tmp28u7nwgx.d(25): Error: no property `transpose` for type `float[][]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp28u7nwgx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] deviation = map!(a => abs(a - mean))(numbers);\n    return mean(deviation);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n\tfloat average;\n\tfloat[]\
    \ deviations;\n\tforeach (number; numbers) \n\t{\n\t\taverage += number;\n\t}\n\
    \taverage /= numbers.length;\n\tforeach (number; numbers) \n\t{\n\t\tdeviations\
    \ ~= abs(number - average);\n\t}\n\treturn average(deviations);\n}\n/*\n     For\
    \ a given array of input numbers, calculate the Median Absolute\n    Deviation\
    \ around the median of this dataset.\n    Median Absolute Deviation is the median\
    \ of the absolute differences between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n\tfloat[] deviations;\n\tforeach (number; numbers) \n\t{\n\t\t\
    deviations ~= abs(number - median(numbers));\n\t}\n\treturn median(deviations);\n\
    }\n/*\n     Utility function used to estimate sample standard deviation via interquartile\n\
    \    range.\n    >>> iqr([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat iqr(float[]\
    \ numbers) \n{\n\tfloat[] quartiles;\n\tfloat[] lower;\n\tfloat[] upper;\n\tint\
    \ q;\n\tforeach (number; numbers) \n\t{\n\t\tif (number < median(numbers)) \n\t\
    \t{\n\t\t\tlower ~= number;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tupper ~= number;\n\
    \t\t}\n\t}\n\tquartiles ~= median(lower);\n\tquartiles ~= median(numbers);\n\t\
    quartiles ~= median(upper);\n\treturn quartiles[2] - quartiles[0];\n}\n/*\n  \
    \   Calculate the (uncorrected) sample standard deviation for an array of\n  \
    \  numbers.\n    >>> sample_standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.1180339\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpff_pviys.d(76): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpff_pviys.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    int n = numbers.length;\n\
    \    if (n == 0) \n    {\n        throw new Error(\"numbers must have at least\
    \ one element.\");\n    }\n    float x_bar = mean(numbers);\n    float[] x_diff\
    \ = new float[n];\n    foreach (i, x; numbers) \n    {\n        x_diff[i] = abs(x\
    \ - x_bar);\n    }\n    return mean(x_diff);\n}\n/*\n Find the variance of an\
    \ array of numbers.\n    Variance is the mean of the squared differences from\
    \ the mean.\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n    1.25\n    \n*/\nfloat\
    \ variance(float[] numbers) \n{\n    int n = numbers.length;\n    if (n == 0)\
    \ \n    {\n        throw new Error(\"numbers must have at least one element.\"\
    );\n    }\n    float x_bar = mean(numbers);\n    float[] x_diff = new float[n];\n\
    \    foreach (i, x; numbers) \n    {\n        x_diff[i] = (x - x_bar)^2;\n   \
    \ }\n    return mean(x_diff);\n}\n/*\n Calculate the Standard Deviation of a list\
    \ of numbers.\n    Standard Deviation is the square root of the variance.\n  \
    \  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.1180339887498949\n    \n\
    */\nfloat standard_deviation(float[] numbers) \n{\n    return sqrt(variance(numbers));\n\
    }\n/*\n Calculate the Mean Absolute Error of a list of numbers.\n    The Mean\
    \ Absolute Error is the average of the absolute deviations\n    from the mean.\n\
    \    >>> mean_absolute_error([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_error(float[]\
    \ numbers) \n{\n    int n = numbers.length;\n    if (n == 0) \n    {\n       \
    \ throw new Error(\"numbers must have at least one element.\");\n    }\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfo7bge8z.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfo7bge8z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float x_mean = float.mean(numbers);\n\
    \    float x_deviations = float[](numbers.length);\n    foreach (index, item;\
    \ numbers)\n    {\n        x_deviations[index] = abs(item - x_mean);\n    }\n\
    \    return float.mean(x_deviations);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiqxqr2q0.d(16): Error: found `[` when expecting `.` following float

    /tmp/tmpiqxqr2q0.d(16): Error: found `]` when expecting identifier following `float`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqxqr2q0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n  float mean_val = mean(numbers);\n\
    \  float abs_diffs = map!(x => abs(x - mean_val))(numbers);\n  return sum(abs_diffs)\
    \ / float(abs_diffs.length);\n}\n/*\nThe function mean_absolute_deviation(numbers)\
    \ requires a pair of values\nto be passed to it: the input array numbers and the\
    \ mean value,\nmean_val. Of course, we could pass both, but then we would be repeating\n\
    the calculation of the mean in the function. We can instead pass a tuple\nto the\
    \ function containing the input array and the mean value.\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwqhyxizx.d(19): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqhyxizx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    \n    float x_mean = mean(numbers);\n\
    \    float[] absolute_deviations = [ abs(n - x_mean) for n in numbers ];\n   \
    \ return mean(absolute_deviations);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjkovxxr8.d(17): Error: comma expected separating array initializers,
    not `for`

    /tmp/tmpjkovxxr8.d(17): Error: semicolon expected, not `n`

    /tmp/tmpjkovxxr8.d(17): Error: found `]` when expecting `;` following statement

    /tmp/tmpjkovxxr8.d(17): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjkovxxr8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    auto mean = mean(numbers);\n\
    \    float accum = 0.0;\n    foreach (i, val; numbers) {\n        accum += abs(val\
    \ - mean);\n    }\n    return accum / numbers.length;\n}\n/*\n For a given array\
    \ of input numbers, calculate the ratio of the sum of\n    elements to the sum\
    \ of squared elements.\n    This is a measure of the degree to which each element\
    \ in the input array\n    differs from the mean. A value approaching 0 indicates\
    \ a data set\n    approaching a constant.\n    >>> sum_of_ratios([1.0, 2.0, 3.0,\
    \ 4.0])\n    0.5555555555555556\n    \n*/\nfloat sum_of_ratios(float[] numbers)\
    \ \n{\n    auto sum = sum_of_elements(numbers);\n    auto sum_of_squares = sum_of_squares(numbers);\n\
    \    float accum = 0.0;\n    foreach (i, val; numbers) {\n        accum += val\
    \ / sum_of_squares;\n    }\n    return accum / numbers.length;\n}\n/*\n For a\
    \ given array of input numbers, calculate the sum of elements to the\n    power\
    \ of four.\n    This is a measure of the degree to which each element in the input\
    \ array\n    differs from the mean. A value approaching 0 indicates a data set\n\
    \    approaching a constant.\n    >>> sum_of_fourth_powers([1.0, 2.0, 3.0, 4.0])\n\
    \    100.0\n    \n*/\nfloat sum_of_fourth_powers(float[] numbers) \n{\n    float\
    \ accum = 0.0;\n    foreach (i, val; numbers) {\n        accum += pow(val, 4);\n\
    \    }\n    return accum;\n}\n/*\n For a given array of input numbers, calculate\
    \ the sum of elements to the\n    power of four.\n    This is a measure of the\
    \ degree to which each element in the input array\n    differs from the mean.\
    \ A value approaching 0 indicates a data set\n    approaching a constant.\n  \
    \  >>> sum_of_fourth_powers([1.0, 2.0, 3.0, 4.0])\n    100\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpui8n8nzd.d(60): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpui8n8nzd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ != 0);\n    auto mean = sum(numbers) / numbers.length;\n    float[] variances\
    \ = new float[numbers.length];\n    foreach (i, number; numbers)\n    {\n    \
    \    variances[i] = abs(number - mean);\n    }\n    return sum(variances) / numbers.length;\n\
    }\n/*\n >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n 1.0\n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    assert(numbers.length != 0);\n    auto median = median(numbers);\n\
    \    float[] variances = new float[numbers.length];\n    foreach (i, number; numbers)\n\
    \    {\n        variances[i] = abs(number - median);\n    }\n    return median(variances);\n\
    }\n/*\n  >>> mean_absolute_percentage_error([2.0, 4.0, 6.0], [1.0, 3.0, 5.0])\n\
    \  0.16666666666666666\n*/\nfloat mean_absolute_percentage_error(float[] target,\
    \ float[] output) \n{\n    assert(target.length == output.length);\n    float[]\
    \ errors = new float[target.length];\n    foreach (i, expected, actual; zip(target,\
    \ output))\n    {\n        errors[i] = abs(actual - expected) / expected;\n  \
    \  }\n    return sum(errors) / errors.length;\n}\n/*\n  >>> mean_squared_error([2.0,\
    \ 4.0, 6.0], [1.0, 3.0, 5.0])\n  1.0\n*/\nfloat mean_squared_error(float[] target,\
    \ float[] output) \n{\n    assert(target.length == output.length);\n    float[]\
    \ errors = new float[target.length];\n    foreach (i, expected, actual; zip(target,\
    \ output))\n    {\n        errors[i] = pow(actual - expected, 2);\n    }\n   \
    \ return sum(errors) / errors.length;\n}\n/*\n  >>>\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxhnytlke.d(67): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxhnytlke.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n    float mean = std.algorithm.sum(numbers)\
    \ / numbers.length;\n    float abs_deviations = 0.0;\n    foreach (n; numbers)\
    \ {\n        abs_deviations += abs(n - mean);\n    }\n    return abs_deviations\
    \ / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpouv1494j.d(14): Error: semicolon expected following function declaration

    /tmp/tmpouv1494j.d(16): Error: declaration expected, not `foreach`

    /tmp/tmpouv1494j.d(16): Error: no identifier for declarator `numbers`

    /tmp/tmpouv1494j.d(16): Error: declaration expected, not `)`

    /tmp/tmpouv1494j.d(18): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpouv1494j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    if (numbers.length ==\
    \ 0) {\n        return 0.0;\n    }\n    float mean = mean(numbers);\n    float[]\
    \ absolute_deviations = numbers.map!((x) {\n            return abs(x - mean);\n\
    \        })();\n    return mean(absolute_deviations);\n}\nfloat[] median_absolute_deviation(float[]\
    \ numbers) \n{\n    if (numbers.length == 0) {\n        return [0.0, 0.0];\n \
    \   }\n    float median = median(numbers);\n    float[] absolute_deviations =\
    \ numbers.map!((x) {\n            return abs(x - median);\n        })();\n   \
    \ return [median, mean(absolute_deviations)];\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe2kbf7eu.d(18): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmpe2kbf7eu.d(19): Error: no property `map` for type `float[]`

    /tmp/tmpe2kbf7eu.d(22): Error: function expected before `()`, not `mean` of type
    `float`

    /tmp/tmpe2kbf7eu.d(29): Error: undefined identifier `median`

    /tmp/tmpe2kbf7eu.d(30): Error: no property `map` for type `float[]`

    /tmp/tmpe2kbf7eu.d(33): Error: undefined identifier `mean`, did you mean variable
    `median`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe2kbf7eu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float average = mean(numbers);\n\
    \    float m = reduce!(abs)(numbers, average);\n    return m / numbers.length;\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt3h6e6ed.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmpt3h6e6ed.d(16): Error: template instance `reduce!abs` template `reduce`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt3h6e6ed.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean_of(numbers);\n\
    \    float absolute_deviations = [ abs(x - mean) for x in numbers ];\n    return\
    \ mean_of(absolute_deviations);\n}\n/*\n Represent percentile (0.0 to 1.0) in\
    \ array as an array index and a rest\n    0.0 <= percentile <= 1.0\n    arr =>\
    \ array of values\n    - 0.5 => idx = 0, rest = 0.5\n    - 0.0 => idx = 0, rest\
    \ = 0.0\n    - 1.0 => idx = arr.length-1, rest = 0.0\n    - 0.95 => idx = arr.length-1,\
    \ rest = 0.05\n*/\nTuple!(size_t, float) percentile_and_rest(float[] arr, float\
    \ percentile)\n{\n    float len = cast(float)arr.length;\n    float idx = len\
    \ * percentile;\n    float integer = floor(idx);\n    size_t idx_as_size_t = cast(size_t)integer;\n\
    \    float rest = idx - integer;\n    return tuple(idx_as_size_t, rest);\n}\n\
    /*\n Find value in array that is closest to given value.\n    >>> find_closest_value([1.0,\
    \ 2.0, 3.0, 4.0], 2.5)\n    2.0\n*/\nfloat find_closest_value(float[] arr, float\
    \ value)\n{\n    float closest_value = max(arr);\n    foreach (x; arr)\n    {\n\
    \        float distance = abs(x - value);\n        if (distance < abs(closest_value\
    \ - value))\n        {\n            closest_value = x;\n        }\n    }\n   \
    \ return closest_value;\n}\n/*\n Weighted Median of array of values.\n    >>>\
    \ weighted_median([1.0, 2.0, 3.0, 4.0], [0.8, 0.05, 0.05, 0.1])\n    2.0\n   \
    \ >>> weighted_median([1.0, 2.0, 3.0, 4.0], [0.8, 0.05\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmparnae2c7.d(16): Error: comma expected separating array initializers,
    not `for`

    /tmp/tmparnae2c7.d(16): Error: semicolon expected, not `x`

    /tmp/tmparnae2c7.d(16): Error: found `]` when expecting `;` following statement

    /tmp/tmparnae2c7.d(16): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmparnae2c7.d(55): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmparnae2c7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  foreach (index, num; numbers) {\n        mean += num;\n    }\n    mean /= numbers.length;\n\
    \    float sum_abs_deviation = 0.0;\n    foreach (index, num; numbers) {\n   \
    \     sum_abs_deviation += abs(num - mean);\n    }\n    return sum_abs_deviation\
    \ / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2wkvo0cr.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283e5]

    ??:? void tmp2wkvo0cr.__unittest_L26_C1() [0x428149]

    ??:? void tmp2wkvo0cr.__modtest() [0x428168]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3bf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b252]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430894]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430371]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]

    ??:? runModuleUnitTests [0x42c195]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428834]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    return mean_absolute_deviation(numbers, mean);\n}\nfloat mean_absolute_deviation(float[]\
    \ numbers, float mean)\n{\n    float deviation = 0.0;\n    foreach(i, float x;\
    \ numbers)\n    {\n        deviation += abs(x - mean);\n    }\n    return deviation\
    \ / float(numbers.length);\n}\n/*\n Calculate the Mean Average Deviation around\
    \ the median of the input dataset.\n    Mean Average Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (median in this\
    \ case):\n    MAD = average | x - x_median |\n    >>> mean_average_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_average_deviation(float[] numbers)\n\
    {\n    float median = median(numbers);\n    return mean_average_deviation(numbers,\
    \ median);\n}\nfloat mean_average_deviation(float[] numbers, float median)\n{\n\
    \    float deviation = 0.0;\n    foreach(i, float x; numbers)\n    {\n       \
    \ deviation += abs(x - median);\n    }\n    return deviation / float(numbers.length);\n\
    }\n/*\n Calculate the Median Absolute Deviation (MAD) around the median of the\
    \ input\n    dataset. The MAD is a robust measure of statistical dispersion and\
    \ is\n    more resilient to outliers in a dataset than the standard deviation.\n\
    \    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers)\n\
    {\n    float median = median(numbers);\n    return median_absolute_deviation(numbers,\
    \ median);\n}\nfloat median_absolute_deviation(float[] numbers, float median)\n\
    {\n    float[] deviations = new float[numbers.length];\n    foreach(i, float x;\
    \ numbers)\n    {\n        deviations[i] = abs(x - median);\n    }\n    return\
    \ median(dev\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n\
    \    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkzaiuf0.d(72): Error: found `unittest` when expecting `,`

    /tmp/tmpfkzaiuf0.d(80): Error: found `void` when expecting `,`

    /tmp/tmpfkzaiuf0.d(80): Error: found `{` when expecting `,`

    /tmp/tmpfkzaiuf0.d(80): Error: expression expected, not `}`

    /tmp/tmpfkzaiuf0.d(80): Error: found `End of File` when expecting `,`

    /tmp/tmpfkzaiuf0.d(80): Error: found `End of File` when expecting `)`

    /tmp/tmpfkzaiuf0.d(80): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmpfkzaiuf0.d(80): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkzaiuf0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n  float sum = 0.0;\n  foreach\
    \ (n; numbers) \n  {\n    sum += n;\n  }\n  float mean = sum / numbers.length;\n\
    \  float mad = 0.0;\n  foreach (n; numbers) \n  {\n    mad += abs(n - mean);\n\
    \  }\n  return mad / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxcajzfmd.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283ed]

    ??:? void tmpxcajzfmd.__unittest_L28_C1() [0x428151]

    ??:? void tmpxcajzfmd.__modtest() [0x428170]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3c7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b25a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303ed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43089c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430379]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b231]

    ??:? runModuleUnitTests [0x42c19d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42883c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    if (numbers.length ==\
    \ 0)\n    {\n        throw new Exception(\"mean_absolute_deviation() requires\
    \ at least one number\");\n    }\n    float average = mean(numbers);\n    float\
    \ differences = [];\n    for (; numbers) differences ~= abs(numbers - average);\n\
    \    return average(differences);\n}\n/*\n For a given array of input numbers,\
    \ calculate the Mean Absolute Deviation\n    around the median of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (median in this case):\n    MAD = average | x -\
    \ x_median |\n    >>> mean_absolute_deviation_from_median([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    \n*/\nfloat mean_absolute_deviation_from_median(float[] numbers)\
    \ \n{\n    if (numbers.length == 0)\n    {\n        throw new Exception(\"mean_absolute_deviation_from_median()\
    \ requires at least one number\");\n    }\n    float median = median(numbers);\n\
    \    float differences = [];\n    for (; numbers) differences ~= abs(numbers -\
    \ median);\n    return average(differences);\n}\n/*\n For a given array of input\
    \ numbers, calculate the Median Absolute Deviation\n    from the median of this\
    \ dataset.\n    Median Absolute Deviation is the median of the absolute differences\
    \ between\n    each element and a centerpoint (median in this case):\n    MAD\
    \ = median | x - x_median |\n    >>> median_absolute_deviation_from_median([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation_from_median(float[]\
    \ numbers) \n{\n    if (numbers.length == 0)\n    {\n        throw new Exception(\"\
    median_absolute_deviation_from_median() requires at least one number\");\n   \
    \ }\n    float median = median(numbers);\n    float differences = [];\n    for\
    \ (; numbers) differences ~= abs(numbers - median);\n    return median(differences);\n\
    }\n/*\n Return the mean\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4p__ro0a.d(21): Error: found `)` when expecting `;` following `for`
    condition

    /tmp/tmp4p__ro0a.d(21): Error: found `;` when expecting `)`

    /tmp/tmp4p__ro0a.d(42): Error: found `)` when expecting `;` following `for` condition

    /tmp/tmp4p__ro0a.d(42): Error: found `;` when expecting `)`

    /tmp/tmp4p__ro0a.d(63): Error: found `)` when expecting `;` following `for` condition

    /tmp/tmp4p__ro0a.d(63): Error: found `;` when expecting `)`

    /tmp/tmp4p__ro0a.d(66): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4p__ro0a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n    in\n    {\n    assert(numbers.length\
    \ >= 1);\n    }\n    body\n    {\n    immutable float x_mean = mean(numbers);\n\
    \    float[] abs_differences = numbers.map!(abs)(x_mean - _);\n    immutable float\
    \ numerator = sum(abs_differences);\n    float[] abs_differences_squared = abs_differences.map!(x\
    \ => x * x)(x);\n    immutable float denominator = sum(abs_differences_squared);\n\
    \    return numerator / denominator;\n    }\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprunsp40a.d(20): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmprunsp40a.d(21): Error: no property `map` for type `float[]`

    /tmp/tmprunsp40a.d(22): Error: undefined identifier `sum`

    /tmp/tmprunsp40a.d(23): Error: no property `map` for type `float[]`

    /tmp/tmprunsp40a.d(24): Error: undefined identifier `sum`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprunsp40a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    auto mean = mean(numbers);\n\
    \    return mean(map!abs(a => a - mean)(numbers));\n}\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy_qak2c6.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_qak2c6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float absolute_deviations = 0.0;\n    for (int i = 0; i < len(numbers); i++)\
    \ {\n        absolute_deviations += abs(numbers[i] - mean);\n    }\n    return\
    \ absolute_deviations / len(numbers);\n}\n/*\n Given a number n, return its non-negative\
    \ square root rounded to the\n    nearest integer.\n    >>> int_square_root(9)\n\
    \    3\n    \n*/\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkqo9zkf5.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmpkqo9zkf5.d(17): Error: undefined identifier `len`

    /tmp/tmpkqo9zkf5.d(20): Error: undefined identifier `len`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkqo9zkf5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return average(map!((x)\
    \ => abs(x - average(numbers)))(numbers));\n}\n/*\n Return the kth smallest element\
    \ of this array.\n    The argument is a number that indicates how many elements\
    \ in the array\n    should be larger than the item we return.\n    e.g. k=0 is\
    \ the minimum, k=4 is the 5th smallest.\n    Throws if k is out of range or if\
    \ the array is empty.\n    If k is equal to the size of the array, return the\
    \ maximum element.\n    If multiple items have the same value, choose the one\
    \ with the lowest\n    index in the array.\n    >>> kth_smallest([7, 4, 6, 3,\
    \ 9, 1], 2)\n    6\n    \n*/\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm9lox1gn.d(15): Error: undefined identifier `average`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9lox1gn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float absolute_distances = \n        map!((x) { return abs(x - mean); })(numbers);\n\
    \    return mean(absolute_distances);\n}\n/*\n Calculate the Standard Deviation\
    \ of a given array of numbers.\n    Standard Deviation describes how spread out\
    \ numbers are from the mean of\n    the dataset.\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.118033988749895\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float mean = mean(numbers);\n    float variance = \n     \
    \   sum(map!((x) { return pow(x - mean, 2); })(numbers)) / \n        (numbers.length\
    \ - 1);\n    return sqrt(variance);\n}\n/*\n Calculate the Variance of a given\
    \ array of numbers.\n    Variance describes how spread out numbers are.\n    >>>\
    \ variance([1.0, 2.0, 3.0, 4.0])\n    1.25\n    \n*/\nfloat variance(float[] numbers)\
    \ \n{\n    float mean = mean(numbers);\n    return sum(map!((x) { return pow(x\
    \ - mean, 2); })(numbers)) / \n        (numbers.length - 1);\n}\n/*\n Calculate\
    \ the Sample Variance of a given array of numbers.\n    Sample Variance describes\
    \ how spread out numbers are.\n    >>> sample_variance([1.0, 2.0, 3.0, 4.0])\n\
    \    1.6666666666666667\n    \n*/\nfloat sample_variance(float[] numbers) \n{\n\
    \    float mean = mean(numbers);\n    return sum(map!((x) { return pow(x - mean,\
    \ 2); })(numbers)) / \n        numbers.length;\n}\n/*\n Calculate the Median Absolute\
    \ Deviation of a given array of numbers.\n    Median Absolute Deviation is the\
    \ average absolute difference between each\n    element and the median of the\
    \ dataset.\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu_8pq8fk.d(62): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu_8pq8fk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = numbers.sum\
    \ / numbers.length;\n    float dt = 0.0;\n    foreach (x; numbers)\n        dt\
    \ += abs(x - mean);\n    return dt / numbers.length;\n}\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyjikk8qg.d(15): Error: no property `sum` for type `float[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyjikk8qg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    // get the average of\
    \ the list\n    float mean = 0.0;\n    foreach (number; numbers)\n    {\n    \
    \    mean += number;\n    }\n    mean /= numbers.length;\n    //print(\"mean:\
    \ %f\\n\", mean);\n    // find the mean absolute deviation\n    float deviation\
    \ = 0.0;\n    foreach (number; numbers)\n    {\n        deviation += abs(number\
    \ - mean);\n    }\n    deviation /= numbers.length;\n    return deviation;\n}\n\
    /*\n    Calculate the Mean Absolute Deviation of a dataset as a dictionary\n \
    \   where the keys are the unique elements of the dataset and the values\n   \
    \ are their frequency.\n    Mean Absolute Deviation is the average absolute difference\
    \ between each\n    element and a centerpoint (mean in this case):\n    MAD =\
    \ average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.0\n    >>> from collections import Counter\n    >>> mean_absolute_deviation(Counter([1.0,\
    \ 2.0, 3.0, 4.0]))\n    1.0\n*/\nfloat mean_absolute_deviation(Map numbers)\n\
    {\n    float total = 0.0;\n    int n = 0;\n    foreach (number; numbers.keys)\n\
    \    {\n        total += number * numbers[number];\n        n += numbers[number];\n\
    \    }\n    float mean = total / n;\n    // find the mean absolute deviation\n\
    \    float deviation = 0.0;\n    foreach (number; numbers.keys)\n    {\n     \
    \   deviation += abs(number - mean) * numbers[number];\n    }\n    deviation /=\
    \ n;\n    return deviation;\n}\n/*\n    Calculate the Median Absolute Deviation\
    \ of a dataset.\n    Median Absolute Deviation is the median of the absolute difference\
    \ between\n    each element and the median of the dataset:\n    MAD = median |\
    \ x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  \
    \  1.0\n    >>> median_absolute_deviation([1.0, 2.0, 3\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ooa7lkk.d(64): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ooa7lkk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    \n    float[] x = numbers;\n\
    \    assert(x.length >= 1);\n    double avg = x.sum/x.length;\n    double sum_abs_diff\
    \ = 0.0;\n    foreach(float elem; x)\n        sum_abs_diff += abs(elem - avg);\n\
    \    return cast(float)(sum_abs_diff/x.length);\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd3e9igzk.d(18): Error: no property `sum` for type `float[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd3e9igzk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    if (numbers.length ==\
    \ 0) {\n        return 0.0;\n    }\n    const mean = std.algorithm.sum(numbers)/numbers.length;\n\
    \    return std.algorithm.sum!((x){return abs(x - mean);}(numbers))/numbers.length;\n\
    }\n/*\n For a given array of input numbers, calculate the Mean Absolute Deviation\n\
    \    around a median of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (median in this\
    \ case):\n    MAD = average | x - x_median |\n    >>> mean_absolute_deviation_median([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[]\
    \ numbers) \n{\n    if (numbers.length == 0) {\n        return 0.0;\n    }\n \
    \   const median = std.algorithm.sorted(numbers)[cast(size_t)(numbers.length)/2];\n\
    \    return std.algorithm.sum!((x){return abs(x - median);}(numbers))/numbers.length;\n\
    }\n/*\n A linear regression line has an equation form of Y = a * X + b, where\
    \ X is\n    the independent variable and Y is the dependent variable.\n    This\
    \ function returns a tuple of (a, b) for the best fit line\n    >>> linear_regression([(1,\
    \ 3), (2, 5), (3, 7), (4, 14)])\n    (4.0, -5.0)\n    \n*/\nTuple!(float, float)\
    \ linear_regression(Tuple!(float, float)[] points) \n{\n    if (points.length\
    \ == 0) {\n        return tuple(0.0, 0.0);\n    }\n    float sum_x = 0.0;\n  \
    \  float sum_y = 0.0;\n    float sum_xy = 0.0;\n    float sum_xx = 0.0;\n    float\
    \ count = 0.0;\n    foreach (point; points) {\n        const x = point[0];\n \
    \       const\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n\
    \    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_2ledib_.d(60): Error: basic type expected, not `unittest`

    /tmp/tmp_2ledib_.d(60): Error: no identifier for declarator `_error_`

    /tmp/tmp_2ledib_.d(60): Error: found `unittest` instead of statement

    /tmp/tmp_2ledib_.d(68): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_2ledib_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return average(map!(a\
    \ => abs(a - mean(numbers)))(numbers));\n}\n/*\n Given a list of input numbers,\
    \ calculate the Standard Deviation (or\n    Standard Error of the Mean)\n    Standard\
    \ Deviation is a measure of how spread out the input numbers are.\n    Std Deviation\
    \ = average( (x - x_mean)^2 ) ^ 0.5\n    or\n    Std Deviation = sqrt(average(\
    \ x^2 - 2x*x_mean + x_mean^2 ))\n    or\n    Std Deviation = sqrt(average( x^2\
    \ ) - x_mean^2)\n    Standard Error of the Mean is the Standard Deviation divided\
    \ by the\n    square root of the size of the dataset.\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    return sqrt(average(map!(a => a * a)(numbers)) - mean(numbers)\
    \ * mean(numbers));\n}\n/*\n Given a list of input numbers, calculate the Mean\
    \ Absolute Error\n    around the mean of this dataset.\n    Mean Absolute Error\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAE = average | x - x_mean |\n    >>> mean_absolute_error([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat mean_absolute_error(float[] numbers)\
    \ \n{\n    return average(map!(a => abs(a - mean(numbers)))(numbers));\n}\n/*\n\
    \ Given a list of input numbers, calculate the Mean Squared Error\n    around\
    \ the mean of this dataset.\n    Mean Squared Error is the average squared difference\
    \ between each\n    element and a centerpoint (mean in this case):\n    MSE =\
    \ average (x - x_mean)^2\n    >>> mean_squared_error([1.0, 2.0, 3.0, 4.0])\n \
    \   1.25\n    \n*/\nfloat mean_squared_error(float[] numbers\nunittest\n{\n  \
    \  alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpljbkvo0l.d(61): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpljbkvo0l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] abs_deviations = new float[$];\n    foreach (n; numbers) {\n    \
    \    abs_deviations ~= abs(n - mean);\n    }\n    return mean(abs_deviations);\n\
    }\n/*\n Compare two inputs and calculate the Mean Absolute Deviation for each.\n\
    \    Returns the ratio of the two Mean Absolute Deviations.\n    >>> mean_absolute_deviation_ratio([1.0,\
    \ 2.0, 3.0, 4.0], [2.0, 3.0, 4.0, 5.0])\n    1.0\n*/\nfloat mean_absolute_deviation_ratio(float[]\
    \ first, float[] second) \n{\n    return mean_absolute_deviation(first) / mean_absolute_deviation(second);\n\
    }\n/*\n Perform mean absolute deviation test on input dataset.\n    >>> mean_absolute_deviation_test([1.0,\
    \ 2.0, 3.0, 4.0], [2.0, 3.0, 4.0, 5.0])\n    True\n*/\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmaj2ckhm.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmpmaj2ckhm.d(16): Error: undefined identifier `__dollar`

    /tmp/tmpmaj2ckhm.d(20): Error: function expected before `()`, not `mean` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmaj2ckhm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n\treturn mean(map!((float\
    \ n) => abs(n - mean(numbers)))(numbers));\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplazrdxel.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplazrdxel.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean_absolute_deviation\
    \ = 0.0;\n    float mean = mean(numbers);\n    int count = numbers.length;\n \
    \   foreach (i, number; numbers) {\n        mean_absolute_deviation += abs(number\
    \ - mean);\n    }\n    return mean_absolute_deviation / count;\n}\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpplc7tu5i.d(16): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmpplc7tu5i.d(17): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpplc7tu5i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    import std.math;\n   \
    \ import std.range;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.array;\n    import std.typecons;\n    import std.stdio;\n    double mean\
    \ = sum(numbers) / numbers.length;\n    double[] diffs = numbers.map!(x => abs(x\
    \ - mean)).array;\n    double mad = sum(diffs) / diffs.length;\n    return cast(float)\
    \ mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n   \
    \ assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1jiajr2f.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42c1cd]

    ??:? void tmp1jiajr2f.__unittest_L27_C1() [0x429bfd]

    ??:? void tmp1jiajr2f.__modtest() [0x42ae20]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x430ff3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bcf2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42df35]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42dfc4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42dec1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bcc9]

    ??:? runModuleUnitTests [0x430dc9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42cbec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    if(numbers.length == 0)\n\
    \    {\n        return 0.0;\n    }\n    float xmean = numbers.sum / numbers.length;\n\
    \    return numbers.map!((float x) => abs(x - xmean)).sum / numbers.length;\n\
    }\n/*\n    Compute the median of given numbers.\n    Note that the median is a\
    \ non-parametric statistic, that is, it does not\n    make any assumptions on\
    \ the probability distribution of the input\n    numbers.\n    \n    The median\
    \ is the mean of the two middle numbers if the array has an\n    even number of\
    \ elements.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    >>> median([1.0,\
    \ 2.0, 3.0])\n    2.0\n    >>> median([1.0, 2.0, 3.0, 4.0, 5.0])\n    3.0\n  \
    \  \n*/\nfloat median(float[] numbers) \n{\n    if(numbers.length == 0)\n    {\n\
    \        return 0.0;\n    }\n    if(numbers.length == 1)\n    {\n        return\
    \ numbers[0];\n    }\n    if(numbers.length == 2)\n    {\n        return (numbers[0]\
    \ + numbers[1]) / 2.0;\n    }\n    float[] sorted_numbers = numbers.dup;\n   \
    \ sorted_numbers.sort;\n    int mid_index = numbers.length / 2;\n    if(numbers.length\
    \ % 2 == 0)\n    {\n        return (sorted_numbers[mid_index - 1] + sorted_numbers[mid_index])\
    \ / 2.0;\n    }\n    else\n    {\n        return sorted_numbers[mid_index];\n\
    \    }\n}\n/*\n    Find the middle number of a given array of numbers.\n    If\
    \ the array has an even number of elements, the two middle elements\n    are averaged.\n\
    \    >>> median_low([1.0, 2.0, 3.0, 4.0])\n    2.0\n    >>> median_low([1.0, 2.0,\
    \ 3.0])\n   \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n\
    \    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpois8_t8_.d(64): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpois8_t8_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n\treturn average(map!((x)\
    \ => abs(x - average(numbers)))(numbers));\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2zcez352.d(15): Error: undefined identifier `average`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2zcez352.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float average = mean(numbers);\n\
    \    float[] deviations = numbers.map!((x) => abs(x - average));\n    return mean(deviations);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpefbtizd6.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmpefbtizd6.d(16): Error: no property `map` for type `float[]`

    /tmp/tmpefbtizd6.d(17): Error: undefined identifier `mean`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefbtizd6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float average = mean(numbers);\n\
    \    float[] distances = map!((x){return abs(x - average);})(numbers);\n    return\
    \ mean(distances);\n}\n/*\n For a given array of input numbers, calculate Mean\
    \ Absolute Deviation\n    around the median of this dataset.\n    MAD = average\
    \ | x - x_median |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  \
    \  1.0\n    \n*/\nfloat mean_absolute_deviation_median(float[] numbers) \n{\n\
    \    float median = median(numbers);\n    float[] distances = map!((x){return\
    \ abs(x - median);})(numbers);\n    return mean(distances);\n}\n/*\n For a given\
    \ array of input numbers, calculate the median absolute deviation\n    around\
    \ the mean of this dataset.\n    MAD = median | x - x_mean |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float average = mean(numbers);\n    float[] distances = map!((x){return\
    \ abs(x - average);})(numbers);\n    return median(distances);\n}\n/*\n For a\
    \ given array of input numbers, calculate the median absolute deviation\n    around\
    \ the median of this dataset.\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation_median(float[]\
    \ numbers) \n{\n    float median = median(numbers);\n    float[] distances = map!((x){return\
    \ abs(x - median);})(numbers);\n    return median(distances);\n}\n/*\n For a given\
    \ array of input numbers, calculate the z-score of each value.\n    z = (x - x_mean)\
    \ / std_dev\n    >>> z_score([1.0, 2.0, 3.0, 4.0])\n    [ -1.3416\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyvebvza0.d(61): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyvebvza0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float sum_abs_devs = 0.0;\n\
    \    float sum_num = 0.0;\n    foreach (num; numbers)\n    {\n        sum_num\
    \ += num;\n    }\n    float mean = sum_num / float(numbers.length);\n    foreach\
    \ (num; numbers)\n    {\n        sum_abs_devs += abs(num - mean);\n    }\n   \
    \ return sum_abs_devs / float(numbers.length);\n}\n/*\n For a given array of input\
    \ numbers, calculate Root Mean Square of the\n    errors (RMSE) around the mean\
    \ of this dataset.\n    RMSE is the square root of the mean of the squares of\
    \ the errors:\n    RMSE = sqrt(mean((x - x_mean)^2))\n    >>> root_mean_square_error([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.5811388300841898\n    \n*/\nfloat root_mean_square_error(float[]\
    \ numbers) \n{\n    float sum_squared_devs = 0.0;\n    float sum_num = 0.0;\n\
    \    foreach (num; numbers)\n    {\n        sum_num += num;\n    }\n    float\
    \ mean = sum_num / float(numbers.length);\n    foreach (num; numbers)\n    {\n\
    \        sum_squared_devs += pow(num - mean, 2);\n    }\n    return sqrt(sum_squared_devs\
    \ / float(numbers.length));\n}\n/*\n For a given array of input numbers, calculate\
    \ Root Mean Square of the\n    errors (RMSE) around the median of this dataset.\n\
    \    RMSE is the square root of the mean of the squares of the errors:\n    RMSE\
    \ = sqrt(mean((x - x_median)^2))\n    >>> root_mean_square_error_median([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat root_mean_square_error_median(float[]\
    \ numbers) \n{\n    float[] numbers_copy = numbers.dup;\n\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdcay5swo.d(65): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdcay5swo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float numbers_mean = 0.0;\n\
    \    foreach (n; numbers)\n    {\n        numbers_mean += n;\n    }\n    numbers_mean\
    \ /= numbers.length;\n    float absolute_deviations = 0.0;\n    foreach (n; numbers)\n\
    \    {\n        absolute_deviations += abs(n - numbers_mean);\n    }\n    return\
    \ absolute_deviations / numbers.length;\n}\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmnsw9d2s.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283e5]

    ??:? void tmpmnsw9d2s.__unittest_L28_C1() [0x428149]

    ??:? void tmpmnsw9d2s.__modtest() [0x428168]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3bf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b252]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430894]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430371]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]

    ??:? runModuleUnitTests [0x42c195]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428834]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n  float mean_ = std.math.mean(numbers);\n\
    \  float average_absolute_difference = std.math.mean(numbers.map!((n) => abs(n\
    \ - mean_)));\n  return average_absolute_difference;\n}\n/*\n Given a list of\
    \ points, calculate the mean absolute deviation from each\n    point to the centerpoint\
    \ for each dimension.\n    The centerpoint in each dimension is the mean for that\
    \ dimension of all\n    the points.\n    >>> mean_absolute_deviation_for_points([[1.0,\
    \ 1.0], [2.0, 2.0], [3.0, 3.0]])\n    [1.0, 1.0]\n    \n*/\nfloat[] mean_absolute_deviation_for_points(float[][]\
    \ points) \n{\n  float[] center_of_points = std.math.mean(points, 1);\n  float[]\
    \ average_absolute_deviation = new float[points.length];\n  foreach (dimension,\
    \ dim; points.length) \n  {\n    float[] dimension_data = points.map!((p) => p[dim]);\n\
    \    average_absolute_deviation[dim] = mean_absolute_deviation(dimension_data);\n\
    \  }\n  return average_absolute_deviation;\n}\n/*\n Given a list of points, calculate\
    \ the mean absolute deviation from each\n    point to the centerpoint for each\
    \ dimension.\n    The centerpoint in each dimension is the mean for that dimension\
    \ of all\n    the points.\n    >>> mean_absolute_deviation_for_points([[1.0, 1.0],\
    \ [2.0, 2.0], [3.0, 3.0]])\n    [1.0, 1.0]\n    \n*/\nfloat[] mean_absolute_deviation_for_points(float[][]\
    \ points) \n{\n  float[] center_of_points = std.math.mean(points, 1);\n  float[]\
    \ average_absolute_deviation = new float[points.length];\n  foreach (dimension,\
    \ dim; points.length) \n  {\n    float[] dimension_data = points.map!((p) => p[dim]);\n\
    \    average_absolute_\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu_3ql8t7.d(56): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpu_3ql8t7.d(64): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpu_3ql8t7.d(64): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu_3ql8t7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean_ = mean(numbers);\n\
    \    float[] abs_ = absolute_difference(numbers, mean_);\n    return mean(abs_);\n\
    }\n/*\n Calculate the (unbiased) sample standard deviation\n    of a sequence\
    \ of numbers.\n    The standard deviation is the square root of the variance.\
    \ The variance is\n    the average of the squared differences from the mean.\n\
    \    >>> variance([1.0, 2.0, 3.0, 4.0])\n    1.25\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.1180339887498949\n*/\nfloat variance(float[] numbers)\
    \ \n{\n    float[] diffs = absolute_difference(numbers, mean(numbers));\n    float[]\
    \ squares = power(diffs, 2);\n    return mean(squares);\n}\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    return sqrt(variance(numbers));\n}\n/*\n Calculate the Standard\
    \ Error of a sequence of values.\n    The Standard Error of a sample is the Standard\
    \ Deviation of that sample's\n    Distribution.\n    The Standard Error is not\
    \ always the same as the Standard Deviation,\n    because the Standard Deviation\
    \ is of the Sample Distribution, whereas the\n    Standard Error is of the sampling\
    \ distribution.\n    The Sampling Distribution is the Probability Distribution\
    \ of the mean of\n    the sample, which is the mean of many different Samples\
    \ from the same\n    population.\n    The Sampling Distribution is Normal, but\
    \ the size of each sample will be\n    different, so the distribution of the mean\
    \ of each sample will be\n    different.\n    The standard error of a sample is\
    \ the Standard Deviation of the Sampling\n    Distribution.\n    This is commonly\
    \ confused with the Standard Deviation of the Sample, which\n    is the Sample's\
    \ Distribution.\n    >>> standard_error([1.0, 2.0, 3.0, 4.0])\n    0.5\n    >>>\
    \ stderr([1.0, 2.0, 3.0, 4.0])\n    0.5\n*/\nfloat standard_error(float[] numbers)\
    \ \n{\n    return standard_deviation(numbers) / sq\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8vp9rbcl.d(64): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmp8vp9rbcl.d(72): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8vp9rbcl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = average(numbers);\n\
    \    float[] abs_diff_from_mean = new float[numbers.length];\n    for (int i =\
    \ 0; i < numbers.length; i++)\n    {\n        abs_diff_from_mean[i] = abs(numbers[i]\
    \ - mean);\n    }\n    return average(abs_diff_from_mean);\n}\nunittest\n{\n \
    \   alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0])\
    \ == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp50rdv_o0.d(15): Error: undefined identifier `average`

    /tmp/tmp50rdv_o0.d(21): Error: undefined identifier `average`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp50rdv_o0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float avg=mean(numbers);\n\
    \    float[] aa=[] ;\n    for(int i=0;i<numbers.length;i++)\n    {\n        aa\
    \ ~=abs(numbers[i]-avg);\n    }\n    return mean(aa);\n}\nfloat[][] rows(int[][]\
    \ x)\n{\n    float[][] out=[] ;\n    foreach(a;x)\n    {\n        float[] b=[]\
    \ ;\n        foreach(c;a)\n        {\n            b ~=c*1.0;\n        }\n    \
    \    out ~=b;\n    }\n    return out;\n}\nfloat[] vector(int[] x)\n{\n    float[]\
    \ out=[];\n    foreach(a;x)\n    {\n        out ~=a*1.0;\n    }\n    return out;\n\
    }\n//extracts the first column of a matrix\nfloat[] column(float[][] x)\n{\n \
    \   float[] out=[];\n    foreach(a;x)\n    {\n        out ~=a[0];\n    }\n   \
    \ return out;\n}\nfloat[] column2(float[][] x)\n{\n    float[] out=[];\n    foreach(a;x)\n\
    \    {\n        out ~=a[1];\n    }\n    return out;\n}\n//extracts a given column\
    \ of a matrix\nfloat[] extract(float[][] a,int col)\n{\n    float[] b=[];\n  \
    \  foreach(c;a)\n    {\n        b ~=c[col];\n    }\n    return b;\n}\n//find the\
    \ mean of a vector\nfloat mean(float[] numbers) \n{\n    float sum=0.0;\n    foreach(a;numbers)\n\
    \    {\n        sum +=a;\n    }\n    return sum/numbers.length;\n}\n//find the\
    \ median of a vector\nfloat median(float[] numbers) \n{\n    float m;\n    float[]\
    \ b=numbers.dup;\n    b.sort();\n    if(b.length%2!=0)\n    {\n        m=\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtpbkt8z.d(25): Error: no identifier for declarator `float[][]`

    /tmp/tmpgtpbkt8z.d(25): Error: found `out` instead of statement

    /tmp/tmpgtpbkt8z.d(33): Error: found `out` instead of statement

    /tmp/tmpgtpbkt8z.d(35): Error: expression expected, not `out`

    /tmp/tmpgtpbkt8z.d(39): Error: no identifier for declarator `float[]`

    /tmp/tmpgtpbkt8z.d(39): Error: found `out` instead of statement

    /tmp/tmpgtpbkt8z.d(42): Error: found `out` instead of statement

    /tmp/tmpgtpbkt8z.d(44): Error: expression expected, not `out`

    /tmp/tmpgtpbkt8z.d(49): Error: no identifier for declarator `float[]`

    /tmp/tmpgtpbkt8z.d(49): Error: found `out` instead of statement

    /tmp/tmpgtpbkt8z.d(52): Error: found `out` instead of statement

    /tmp/tmpgtpbkt8z.d(54): Error: expression expected, not `out`

    /tmp/tmpgtpbkt8z.d(58): Error: no identifier for declarator `float[]`

    /tmp/tmpgtpbkt8z.d(58): Error: found `out` instead of statement

    /tmp/tmpgtpbkt8z.d(61): Error: found `out` instead of statement

    /tmp/tmpgtpbkt8z.d(63): Error: expression ex'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \nin{\n  assert(numbers.length\
    \ > 0);\n}\nbody{\n    return mean(numbers.map!(x => abs(x - mean(numbers))));\n\
    }\n/*\n For a given array of input numbers, calculate Standard Deviation\n   \
    \ around the mean of this dataset.\n    Standard Deviation is the square root\
    \ of the mean of the squares of\n    the differences from the mean:\n    standard_deviation\
    \ = sqrt(average (x - x_mean)^2)\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n\
    \    1.118033988749895\n*/\nfloat standard_deviation(float[] numbers) \nin{\n\
    \  assert(numbers.length > 0);\n}\nbody{\n    return sqrt(mean(numbers.map!(x\
    \ => sqr(x - mean(numbers)))));\n}\n/*\n For a given array of input numbers, calculate\
    \ the normal\n    distribution of values around the mean of this dataset.\n  \
    \  Distribution is the fraction of values that are within a given number\n   \
    \ of standard deviations of the mean:\n    distribution = number_of_elements_within_standard_deviations(standard_deviations)\
    \ / number_of_elements\n*/\nfloat[] normal_distribution(float[] numbers, int standard_deviations)\
    \ \nin{\n  assert(numbers.length > 0);\n  assert(standard_deviations > 0);\n}\n\
    body{\n    float[] distribution = new float[2 * standard_deviations + 1];\n  \
    \  float mean = mean(numbers);\n    float std = standard_deviation(numbers);\n\
    \    for (int i = 0; i < distribution.length; i++)\n        distribution[i] =\
    \ \n            cast(float)\n            numbers.filter!(x => abs(x - mean) <=\
    \ (i - standard_deviations) * std).length / \n            numbers.length;\n  \
    \  return distribution;\n}\n/*\n For a given array of input numbers, calculate\
    \ the median\n    of the dataset. The median is the value of the middle element\n\
    \    in the sorted sequence of the dataset. If there are no\n    middle elements\
    \ (i.e. dataset length is even), then\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr794u1gd.d(59): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr794u1gd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float[] distances = map!((float number) => abs(number - mean))(numbers);\n\
    \    return mean(distances);\n}\n/*\n    >>> mean_absolute_deviation([-5.0, 5.0,\
    \ 10.0])\n    7.5\n    >>> mean_absolute_deviation([2.0, 3.0, 4.0, -1.0])\n  \
    \  1.5\n*/\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n  \
    \  assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp39_wt94g.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmp39_wt94g.d(16): Error: template instance `map!((float number) => abs(number
    - mean))` template `map` is not defined

    /tmp/tmp39_wt94g.d(17): Error: function expected before `()`, not `mean` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp39_wt94g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ > 0);\n    float x_mean = mean(numbers);\n    float absolute_differences = 0.0;\n\
    \    foreach (number; numbers) {\n        absolute_differences += abs(number -\
    \ x_mean);\n    }\n    return absolute_differences / float(numbers.length);\n\
    }\n/*\n For a given array of input numbers, calculate Median Absolute Deviation\n\
    \    around the median of this dataset.\n    Median Absolute Deviation is the\
    \ median of the absolute differences between\n    each element and a centerpoint\
    \ (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    assert(numbers.length > 0);\n    float x_median = median(numbers);\n\
    \    float[] absolute_differences = new float[numbers.length];\n    foreach (i,\
    \ number; numbers) {\n        absolute_differences[i] = abs(number - x_median);\n\
    \    }\n    return median(absolute_differences);\n}\n/*\n For a given array of\
    \ input numbers, calculate Standard Deviation\n    around the mean of this dataset.\n\
    \    Standard Deviation is the square root of the average squared deviation from\n\
    \    the mean:\n    SD = sqrt(mean(x - x_mean)^2)\n    >>> standard_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.2909944487358056\n    \n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    assert(numbers.length > 0);\n    float x_mean = mean(numbers);\n\
    \    float sum_squared_deviations = 0.0;\n    foreach (number; numbers) {\n  \
    \      sum_squared_deviations += pow(number - x_mean, 2);\n    }\n    return sqrt(sum_squared_deviations\
    \ / float(numbers.length));\n}\n/*\n For a given array of input numbers, calculate\
    \ Variance\n   \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpki32ajib.d(63): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpki32ajib.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return mean(map!((n) {\
    \ return abs(n - mean(numbers)); })(numbers));\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9i28_mc.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9i28_mc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ > 0);\n    float mean = 0.0;\n    foreach (number; numbers)\n        mean +=\
    \ number;\n    mean /= numbers.length;\n    float absolute_deviations = 0.0;\n\
    \    foreach (number; numbers)\n        absolute_deviations += abs(number - mean);\n\
    \    return absolute_deviations / numbers.length;\n}\n/*\n For a given array of\
    \ input numbers, calculate standard deviation.\n    Standard deviation is a measure\
    \ of the spread of a dataset,\n    and is defined as:\n    sd = sqrt(average (x\
    \ - x_mean) ** 2)\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.118033988749895\n\
    */\nfloat standard_deviation(float[] numbers) \n{\n    assert(numbers.length >\
    \ 0);\n    float mean = 0.0;\n    foreach (number; numbers)\n        mean += number;\n\
    \    mean /= numbers.length;\n    float squared_deviations = 0.0;\n    foreach\
    \ (number; numbers)\n        squared_deviations += pow(number - mean, 2);\n  \
    \  return sqrt(squared_deviations / numbers.length);\n}\n/*\n Given a sequence\
    \ of 2D points, calculate the center of gravity.\n    >>> center_of_gravity([[0.0,\
    \ 0.0], [1.0, 1.0], [2.0, 2.0]])\n    [1.0, 1.0]\n*/\nfloat[] center_of_gravity(float[][]\
    \ points) \n{\n    assert(points.length > 0);\n    float[] center = [0.0, 0.0];\n\
    \    foreach (point; points)\n        center[0] += point[0];\n    center[0] /=\
    \ points.length;\n    foreach (point; points)\n        center[1] += point[1];\n\
    \    center[1] /= points.length;\n    return center;\n}\n/*\n Given a sequence\
    \ of 2D points, calculate the distance between each\n    point and the center\
    \ of gravity.\n    >>> center_distances([[0\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyn3omowf.d(62): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyn3omowf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n\tfloat[] abs_diff = new float[numbers.length];\n\
    \tfloat diff;\n\tfloat mean;\n\tfloat mean_abs_deviation;\n\tint i;\n\t\n\tmean\
    \ = 0.0;\n\tmean_abs_deviation = 0.0;\n\tfor (i = 0; i < numbers.length; i++)\
    \ {\n\t\tmean += numbers[i];\n\t}\n\tmean /= numbers.length;\n\tfor (i = 0; i\
    \ < numbers.length; i++) {\n\t\tdiff = numbers[i] - mean;\n\t\tabs_diff[i] = abs(diff);\n\
    \t}\n\tfor (i = 0; i < numbers.length; i++) {\n\t\tmean_abs_deviation += abs_diff[i];\n\
    \t}\n\tmean_abs_deviation /= numbers.length;\n\treturn mean_abs_deviation;\n}\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpte7_16n8.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x42852d]

    ??:? void tmpte7_16n8.__unittest_L37_C1() [0x42828d]

    ??:? void tmpte7_16n8.__modtest() [0x4282ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c773]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b606]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430891]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d40]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43081d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5dd]

    ??:? runModuleUnitTests [0x42c549]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    auto avg = mean(numbers);\n\
    \    auto differences = array(float)(numbers.length);\n    for (size_t i = 0;\
    \ i < numbers.length; i++)\n    {\n        differences[i] = abs(numbers[i] - avg);\n\
    \    }\n    return mean(differences);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgj1f3stk.d(16): Error: found `)` when expecting `.` following float

    /tmp/tmpgj1f3stk.d(16): Error: found `(` when expecting identifier following `float`.

    /tmp/tmpgj1f3stk.d(16): Error: found `numbers` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgj1f3stk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \nin \n{\n\tassert(numbers.length\
    \ > 0);\n}\nbody \n{\n    float mean = std.math.mean(numbers);\n    float abs_deviations\
    \ = numbers.map!(x => abs(x - mean)).sum;\n    return abs_deviations / numbers.length;\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6h74kboo.d(20): Error: undefined identifier `mean` in module `std.math`,
    did you mean function `tan`?

    /tmp/tmp6h74kboo.d(21): Error: no property `map` for type `float[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6h74kboo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float x_mean = mean(numbers);\n\
    \    float result = mean(map!((x) {return abs(x - x_mean);})(numbers));\n    return\
    \ result;\n}\n/*\nClassification algorithm.\n \nCalculate the median absolute\
    \ deviation of an array\n    of input numbers:\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat median_absolute_deviation(float[] numbers)\
    \ \n{\n    float[] x_median = numbers[numbers.length/2];\n    float result = median(map!((x)\
    \ {return abs(x - x_median);})(numbers));\n    return result;\n}\n/*\nClassification\
    \ algorithm.\n \nCalculate the standard deviation of an array of input numbers:\n\
    \    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat standard_deviation(float[]\
    \ numbers) \n{\n    float x_mean = mean(numbers);\n    float var = mean(map!((x)\
    \ {return pow(x - x_mean, 2);})(numbers));\n    float std = sqrt(var);\n    return\
    \ std;\n}\n/*\nMeasure of how much variance in a set of data is accounted for\
    \ by\n    linear regression.  Most commonly used for determining goodness of fit.\n\
    \    The value returned by this function is the square of\n    R-squared coefficient\
    \ (also called 'coefficient of determination').\n    >>> r_squared([1.0, 2.0,\
    \ 3.0, 4.0], [2.0, 3.0, 4.0, 5.0])\n    1.0\n*/\nfloat r_squared(float[] numbers,\
    \ float[] prediction) \n{\n    float x_mean = mean(numbers);\n    float y_mean\
    \ = mean(prediction);\n    float numerator = sum(map!((a, b) {return (a - x_mean)\
    \ * (b - y_mean);})(numbers, prediction));\n    float denominator = sqrt(sum(map!((a)\
    \ {return pow(a\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp_1xiujw.d(61): Error: found `unittest` when expecting `,`

    /tmp/tmpp_1xiujw.d(69): Error: found `void` when expecting `,`

    /tmp/tmpp_1xiujw.d(69): Error: found `{` when expecting `,`

    /tmp/tmpp_1xiujw.d(69): Error: expression expected, not `}`

    /tmp/tmpp_1xiujw.d(69): Error: found `End of File` when expecting `,`

    /tmp/tmpp_1xiujw.d(69): Error: found `End of File` when expecting `)`

    /tmp/tmpp_1xiujw.d(69): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmpp_1xiujw.d(69): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpp_1xiujw.d(69): Error: found `End of File` when expecting `)` following
    template argument list

    /tmp/tmpp_1xiujw.d(69): Error: found `End of File` when expecting `,`

    /tmp/tmpp_1xiujw.d(69): Error: found `End of File` when expecting `)`

    /tmp/tmpp_1xiujw.d(69): Error: found `End of File` when expecting `,`

    /tmp/tmpp_1xiujw.d(69): Error: found `End of File` when expecting `)`

    /tmp/tmpp_1xiujw.d(69): Error: semicolon expected, no'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    immutable float mean =\
    \ std.algorithm.reduce!\"a + b\"(numbers) / numbers.length;\n    immutable float[]\
    \ diff = numbers.map!\"abs(a - mean)\";\n    return std.algorithm.reduce!\"a +\
    \ b\"(diff) / diff.length;\n}\n/*\n Compute a \"standard deviation\" of a given\
    \ array of numbers.\n    Standard deviation (SD) is a measure of how spread out\
    \ the values are.\n    It is calculated as the square root of the Variance.\n\
    \    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.2909944487358056\n*/\n\
    float standard_deviation(float[] numbers)\n{\n    return sqrt(variance(numbers));\n\
    }\n/*\n    Compute the variance of a list of numbers.\n    The variance is the\
    \ average of the squared differences from the Mean.\n    The variance is also\
    \ the square root of the average of the squared\n    differences from the Mean.\n\
    \    >>> variance([1.0, 2.0, 3.0, 4.0])\n    1.6666666666666667\n*/\nfloat variance(float[]\
    \ numbers)\n{\n    immutable float mean = std.algorithm.reduce!\"a + b\"(numbers)\
    \ / numbers.length;\n    immutable float[] diff = numbers.map!\"(a - mean) **\
    \ 2\";\n    return std.algorithm.reduce!\"a + b\"(diff) / diff.length;\n}\n/*\n\
    \    Compute the population covariance between two lists of numbers.\n    Covariance\
    \ is a measure of how two variables vary in tandem from their means.\n    A positive\
    \ covariance means that the variables are positively correlated --\n    one tends\
    \ to go up when the other goes up, and down when the other goes down.\n    A negative\
    \ covariance means the opposite; the variables tend to go up when\n    the other\
    \ goes down, and vice versa.\n    >>> covariance([1.0, 2.0, 3.0, 4.0], [1.0, 2.0,\
    \ 3.0, 4.0])\n    1.6666666666666667\n    >>> covariance([-2.0, 2.0, -10.0, -4.\n\
    unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxmpziflo.d(44): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmpziflo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n  float sum = 0.0;\n  foreach\
    \ (x; numbers) \n  {\n    sum += x;\n  }\n  float mean = sum / numbers.length;\n\
    \  float sum_of_absolute_differences = 0.0;\n  foreach (x; numbers) \n  {\n  \
    \  sum_of_absolute_differences += abs(x - mean);\n  }\n  return sum_of_absolute_differences\
    \ / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo4la20ar.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283ed]

    ??:? void tmpo4la20ar.__unittest_L28_C1() [0x428151]

    ??:? void tmpo4la20ar.__modtest() [0x428170]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3c7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b25a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303ed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43089c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430379]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b231]

    ??:? runModuleUnitTests [0x42c19d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42883c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    immutable float mu = mean(numbers);\n\
    \    float m = 0.0;\n    foreach (num; numbers) {\n        m += abs(num - mu);\n\
    \    }\n    return m / numbers.length;\n}\n/*\n For a given array of input numbers,\
    \ calculate Mean Absolute Deviation\n    around a custom centerpoint.\n    Mean\
    \ Absolute Deviation is the average absolute difference between each\n    element\
    \ and a centerpoint:\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0], 2.5)\n    1.5\n    \n*/\nfloat mean_absolute_deviation(float[]\
    \ numbers, float center) \n{\n    float m = 0.0;\n    foreach (num; numbers) {\n\
    \        m += abs(num - center);\n    }\n    return m / numbers.length;\n}\n/*\n\
    \ For a given array of input numbers, calculate Mean Squared Deviation\n    around\
    \ the mean of this dataset.\n    Mean Squared Deviation is the average squared\
    \ difference between each\n    element and a centerpoint (mean in this case):\n\
    \    MSD = average (x - x_mean)^2\n    >>> mean_squared_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.25\n    \n*/\nfloat mean_squared_deviation(float[] numbers) \n\
    {\n    immutable float mu = mean(numbers);\n    float m = 0.0;\n    foreach (num;\
    \ numbers) {\n        m += (num - mu)^2;\n    }\n    return m / numbers.length;\n\
    }\n/*\n For a given array of input numbers, calculate Mean Squared Deviation\n\
    \    around a custom centerpoint.\n    Mean Squared Deviation is the average squared\
    \ difference between each\n    element and a centerpoint:\n    MSD = average (x\
    \ - x_mean)^2\n    >>> mean_squared_deviation([1.0, 2.0, 3.0, 4.0], 2.5)\n   \
    \ 2.25\n    \n*/\nfloat mean_squared_deviation(float[] numbers, float center)\
    \ \n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7u6u7iam.d(71): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7u6u7iam.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n    in(numbers) \n{\n    float\
    \ mean = mean(numbers);\n    return mean(map!((x) => abs(x - mean))(numbers));\n\
    }\n/*\n For a given array of input numbers, calculate the normalized\n    array.\
    \ Normalized values are defined as x = (x - min) / (max - min)\n    The normalized\
    \ array will have a minimum value of 0.0 and a maximum\n    value of 1.0.\n  \
    \  Normalization is important for a number of reasons:\n    - The larger a value\
    \ is, the more influence it will have on the average\n    - This can be counter-productive\
    \ when dealing with a number of different\n      units\n    - Normalization can\
    \ also be a good idea for non-linear functions (like\n      sigmoid)\n    >>>\
    \ normalize([0.0, 1.0, 2.0, 3.0, 4.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n\
    */\nfloat[] normalize(float[] numbers) \n    in(numbers) \n{\n    float min =\
    \ min(numbers);\n    float max = max(numbers);\n    return map!((x) => (x - min)\
    \ / (max - min))(numbers);\n}\n/*\n For a given array of input numbers, calculate\
    \ the sliding window average\n    for a certain window size.\n    The window size\
    \ defines how many adjacent elements are used for the\n    average.\n    >>> sliding_window_average([1.0,\
    \ 2.0, 3.0, 4.0], 2)\n    [1.5, 2.5, 3.5]\n    \n*/\nfloat[] sliding_window_average(float[]\
    \ numbers, int window_size) \n    in(numbers) \n{\n    int n = numbers.length;\n\
    \    if (n == 0)\n    {\n        return numbers;\n    }\n    float[] result =\
    \ new float[n - window_size + 1];\n    int last_index = n - window_size + 1;\n\
    \    for (int index = 0; index < last_index; index++)\n    {\n        result[index]\
    \ = mean(numbers[index .. index + window\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ze6ng62.d(63): Error: found `unittest` when expecting `,`

    /tmp/tmp6ze6ng62.d(71): Error: found `void` when expecting `,`

    /tmp/tmp6ze6ng62.d(71): Error: found `{` when expecting `,`

    /tmp/tmp6ze6ng62.d(71): Error: expression expected, not `}`

    /tmp/tmp6ze6ng62.d(71): Error: found `End of File` when expecting `,`

    /tmp/tmp6ze6ng62.d(71): Error: found `End of File` when expecting `]`

    /tmp/tmp6ze6ng62.d(71): Error: found `End of File` when expecting `,`

    /tmp/tmp6ze6ng62.d(71): Error: found `End of File` when expecting `)`

    /tmp/tmp6ze6ng62.d(71): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmp6ze6ng62.d(71): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp6ze6ng62.d(71): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ze6ng62.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float abs_diffs = sum(map!((x)\
    \ => abs(x - mean(numbers)))(numbers));\n    return abs_diffs / numbers.length;\n\
    }\n/*\n    Helper function for getting the mean of a list of numbers.\n*/\nfloat\
    \ mean(float[] numbers) \n{\n    return sum(numbers) / numbers.length;\n}\n/*\n\
    \    For a given array of input numbers, calculate the standard deviation of\n\
    \    the dataset around the mean.\n    Standard deviation is the square root of\
    \ the average of the squared\n    differences from the mean:\n    std dev = sqrt(average(x\
    \ - x_mean) ^ 2)\n    \n*/\nfloat standard_deviation(float[] numbers) \n{\n  \
    \  float sd = 0.0;\n    float avg = mean(numbers);\n    float[] diffs = new float[numbers.length];\n\
    \    foreach (i, num; numbers) \n    {\n        diffs[i] = num - avg;\n    }\n\
    \    float sq_diffs = sum(map!((x) => x * x)(diffs));\n    sd = sqrt(sq_diffs\
    \ / (numbers.length - 1));\n    return sd;\n}\n/*\n    Return a tuple of the first\
    \ and last quartiles for a given list of\n    numbers.\n*/\nfloat[2] quartiles(float[]\
    \ numbers) \n{\n    float[] quartile1, quartile3;\n    float[] q2 = sorted(numbers)[numbers.length\
    \ / 2 .. $];\n    if (numbers.length % 2 == 0) \n    {\n        quartile1 = sorted(numbers)[0\
    \ .. numbers.length / 2];\n        quartile3 = q2;\n    }\n    else \n    {\n\
    \        quartile1 = sorted(numbers)[0 .. numbers.length / 2];\n        quartile3\
    \ = q2[1 .. $];\n    }\n    return [quartile1[quartile1.length / 2], quartile3[quartile3.length\
    \ / 2]];\n}\n/*\n    Return an array containing the lower and upper hinges (quartiles\n\
    \    1/2) for a given list of numbers.\n*/\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp88998z_k.d(15): Error: undefined identifier `sum`

    /tmp/tmp88998z_k.d(23): Error: undefined identifier `sum`

    /tmp/tmp88998z_k.d(42): Error: undefined identifier `sum`

    /tmp/tmp88998z_k.d(53): Error: undefined identifier `sorted`

    /tmp/tmp88998z_k.d(56): Error: undefined identifier `sorted`

    /tmp/tmp88998z_k.d(61): Error: undefined identifier `sorted`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp88998z_k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n  float n = 0.0;\n  float\
    \ mean = 0.0;\n  float mad = 0.0;\n  n = numbers.length;\n  for (float x : numbers)\
    \ \n  {\n    mean += x;\n  }\n  mean /= n;\n  for (float x : numbers) \n  {\n\
    \    mad += abs(x - mean);\n  }\n  mad /= n;\n  return mad;\n}\n/*\n For a given\
    \ array of input numbers, calculate Median Absolute Deviation\n    around the\
    \ median of this dataset.\n    Median Absolute Deviation is the median of the\
    \ absolute difference between\n    each element and a centerpoint (median in this\
    \ case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n  float[] dist_from_median = new float[];\n  float median = 0.0;\n\
    \  float mad = 0.0;\n  dist_from_median.length = numbers.length;\n  for (int i\
    \ = 0; i < numbers.length; i++) \n  {\n    dist_from_median[i] = abs(numbers[i]\
    \ - median);\n  }\n  median = median(dist_from_median);\n  mad = median;\n  return\
    \ mad;\n}\n/*\n A general function for testing a set of input numbers against\
    \ an expected\n    mean absolute deviation.\n    The array of input numbers is\
    \ provided, along with the expected MAD value\n    to test against. The mean or\
    \ median MAD calculation is calculated and\n    compared against the expected\
    \ MAD value.\n    If the MAD calculations are equal to each other, and equal to\
    \ the expected\n    MAD value, then the test passes. Otherwise the test fails.\n\
    \    The test_name string is printed to the terminal to indicate which test is\n\
    \    being run.\n    >>> mad_test([1.0, 2.0, 3.0, 4.0], 1.0, \"A simple test\"\
    )\n    Testing MAD for A simple test.\n    Mean MAD: 1.0.\n   \nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi9mu0my1.d(19): Error: semicolon expected, not `:`

    /tmp/tmpi9mu0my1.d(19): Error: expression expected, not `:`

    /tmp/tmpi9mu0my1.d(19): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmpi9mu0my1.d(24): Error: semicolon expected, not `:`

    /tmp/tmpi9mu0my1.d(24): Error: expression expected, not `:`

    /tmp/tmpi9mu0my1.d(24): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmpi9mu0my1.d(55): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi9mu0my1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float absolute_deviations = reduce!((a, b) => a + abs(b - mean))(numbers);\n\
    \    return absolute_deviations / numbers.length;\n}\n/*\n For a given array of\
    \ input numbers, calculate median absolute deviation\n around the median.\n Median\
    \ Absolute Deviation is the median of the absolute difference between\n each element\
    \ and a centerpoint (median in this case):\n MAD = median(| x - x_median |)\n\
    \ >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n 1.0\n \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers)\n{\n    float median = median(numbers);\n    float absolute_deviations\
    \ = map!(x => abs(x - median))(numbers);\n    return median(absolute_deviations);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcxhni_9g.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmpcxhni_9g.d(16): Error: template instance `reduce!((a, b) => a + abs(b
    - mean))` template `reduce` is not defined

    /tmp/tmpcxhni_9g.d(31): Error: undefined identifier `median`

    /tmp/tmpcxhni_9g.d(32): Error: template instance `map!((x) => abs(x - median))`
    template `map` is not defined

    /tmp/tmpcxhni_9g.d(33): Error: function expected before `()`, not `median` of
    type `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxhni_9g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    /*\n     Check if `numbers`\
    \ contains some elements. If it doesn't -\n    `mean` raises a TypeError, so we\
    \ should avoid calling it.\n    */\n    if (numbers.length == 0)\n    {\n    \
    \    throw new Exception(\"mean_absolute_deviation() arg is an empty sequence\"\
    );\n    }\n    /*\n     Calculate arithmetic mean (the plain old average) from\
    \ the list of\n    numbers using `std.math.mean`.\n    */\n    float mean = std.math.mean(numbers);\n\
    \    /*\n     Now we have a center point for our MAD and we can calculate the\
    \ average\n    difference between each value and the mean:\n    */\n    float[]\
    \ differences = new float[numbers.length];\n    float sum = 0.0f;\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        float number = numbers[i];\n\
    \        float difference = abs(number - mean);\n        differences[i] = difference;\n\
    \        sum += difference;\n    }\n    float mad = sum / numbers.length;\n  \
    \  return mad;\n}\n/*\n For a given array of numbers, calculate the Z-score of\
    \ each value.\n Z-score is a numerical measurement used in statistics of a value's\n\
    \ relationship to the mean (average) of a group of values, measured in terms\n\
    \ of standard deviations from the mean. If a Z-score is 0, it indicates that\n\
    \ the data point's score is identical to the mean score. A Z-score of 1.0\n would\
    \ indicate a value that is one standard deviation from the mean.\n    Z = (x -\
    \ mu) / sigma\n    >>> z_scores([1.0, 2.0, 3.0, 4.0])\n    [1.3363062, 0.6731531,\
    \ 0.0, -0.6731531]\n    \n*/\nfloat[] z_scores(float[] numbers) \n{\n    /*\n\
    \     Create a mapping between the input list `numbers` and a list of Z-scores\n\
    \    with the same length.\n    */\n    float[] z_scores = new float[numbers.length];\n\
    \    /*\n     Use `mean_absolute_deviation` and `std\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp94g7opoq.d(63): Error: unterminated /* */ comment

    /tmp/tmp94g7opoq.d(73): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp94g7opoq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ > 0);\n    float mean = numbers.mean();\n    float squared_differences = 0.0;\n\
    \    foreach (float f; numbers) \n    {\n        squared_differences += (f - mean)\
    \ * (f - mean);\n    }\n    float variance = squared_differences / float(numbers.length);\n\
    \    return sqrt(variance);\n}\n/*\n Calculate the z-score for a given value given\
    \ a dataset.\n    z-score is the signed number of standard deviations by which\
    \ the value of\n    an observation or data point is above the mean value of what\
    \ is being\n    observed or measured.\n    https://en.wikipedia.org/wiki/Standard_score\n\
    \    >>> z_score(1.0, [1.0, 2.0, 3.0, 4.0])\n    -1.0\n    >>> z_score(4.0, [1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat z_score(float value, float[] numbers) \n\
    {\n    float mean = numbers.mean();\n    float stddev = mean_absolute_deviation(numbers);\n\
    \    if (stddev == 0.0) \n    {\n        return 0.0;\n    }\n    return (value\
    \ - mean) / stddev;\n}\n/*\n Find outliers based on z-score.\n    >>> find_outliers([1.0,\
    \ 2.0, 3.0, 4.0])\n    []\n    >>> find_outliers([1.0, 2.0, 3.0, 4.0, 12.0])\n\
    \    [12.0]\n    >>> find_outliers([1.0, 2.0, 3.0, 4.0, -12.0])\n    [-12.0]\n\
    */\nfloat[] find_outliers(float[] numbers) \n{\n    float[] outliers = [];\n \
    \   foreach (float f; numbers) \n    {\n        if (abs(z_score(f, numbers)) >\
    \ 3.0) \n        {\n            outliers ~= f;\n        }\n    }\n   \nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjzg4qv2l.d(66): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjzg4qv2l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float avg = average(numbers);\n\
    \    float distance = 0.0;\n    foreach (num; numbers) {\n        distance +=\
    \ abs(num - avg);\n    }\n    return distance / numbers.length;\n}\n/*\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1nemg25j.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1nemg25j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float x_mean = mean(numbers);\n\
    \    return mean(map!((x) => abs(x - x_mean))(numbers));\n}\n/*\n For a given\
    \ array of input numbers, calculate the Median Absolute Deviation\n    around\
    \ the median of this dataset.\n    Median Absolute Deviation is the median of\
    \ the absolute difference between\n    each element and a centerpoint (median\
    \ in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[]\
    \ numbers) \n{\n    float x_median = median(numbers);\n    return median(map!((x)\
    \ => abs(x - x_median))(numbers));\n}\n/*\n For a given array of input numbers,\
    \ calculate the Standard Deviation of\n    this dataset.\n    Standard Deviation\
    \ is the square root of the average squared differences\n    from the mean:\n\
    \    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.118033988749895\n   \
    \ \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float x_mean = mean(numbers);\n\
    \    float x_squared_deviation = map!((x) => (x - x_mean) ** 2)(numbers);\n  \
    \  return sqrt(mean(x_squared_deviation));\n}\n/*\n For a given array of input\
    \ numbers, calculate the Interquartile Range of\n    this dataset.\n    The IQR\
    \ is the difference between the 75th and 25th percentiles, or\n    between upper\
    \ and lower quartiles.\n    >>> interquartile_range([1.0, 2.0, 3.0, 4.0])\n  \
    \  1.0\n    \n*/\nfloat interquartile_range(float[] numbers) \n{\n    float x_upper_quartile\
    \ = upper_quartile(numbers);\n    float x_lower_quartile = lower_quartile(numbers);\n\
    \    return x_upper_quartile - x_lower_quartile;\n}\n/*\n For a given\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6_4r3dzx.d(63): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_4r3dzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    import std.array;\n  \
    \  return sum(numbers.map!(a => abs(a-numbers.average))) / numbers.length;\n}\n\
    /*\n \n For a given array of input numbers, calculate Mean Absolute Deviation\n\
    \    around a given centerpoint (median in this case).\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (median in this case):\n    MAD = average | x - x_median |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0], centerpoint=median)\n    1.0\n \n*/\nfloat mean_absolute_deviation(float[]\
    \ numbers, float centerpoint(float[])) \n{\n    import std.array;\n    return\
    \ sum(numbers.map!(a => abs(a-centerpoint(numbers)))) / numbers.length;\n}\n/*\n\
    \ \n Given a dataset and the output of a clustering algorithm, determine whether\n\
    \    the clusters are sufficiently separated or not.\n    The \"dispersion\" is\
    \ the maximum distance between the centerpoint of a\n    cluster and the centerpoint\
    \ of the dataset.\n    The \"separation\" is the minimum distance between the\
    \ centerpoints of\n    distinct clusters.\n    If the separation is bigger than\
    \ the dispersion, then the clusters are\n    sufficiently separated.\n    >>>\
    \ clusters = [ [1.0, 2.0, 3.0], [1.1, 2.1, 3.1] ]\n    >>> print(clusters_separation(clusters))\n\
    \    True\n \n*/\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp589cvt3z.d(29): Error: cannot have parameter of function type `float(float[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp589cvt3z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float sum = 0.0;\n    foreach (n; numbers)\n    {\n        sum += abs(n -\
    \ mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp41yz4n7u.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41yz4n7u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    import std.algorithm :\
    \ reduce;\n    alias mean = reduce!q{a + b}(numbers) / numbers.length;\n    return\
    \ reduce!q{a + b}(numbers.map!q{abs(it - mean)}) / numbers.length;\n}\n// [1.0,\
    \ 2.0, 3.0, 4.0]\n/*\n    For a given array of input numbers, calculate Mean Absolute\
    \ Deviation\n    around a different centerpoint than the mean.\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0], 7.0)\n    5.0\n*/\nfloat mean_absolute_deviation(float[] numbers,\
    \ float c) \n{\n    import std.algorithm : reduce;\n    return reduce!q{a + b}(numbers.map!q{abs(it\
    \ - c)}) / numbers.length;\n}\n// [1.0, 2.0, 3.0, 4.0], 7.0\n/*\n    Calculate\
    \ the Median Absolute Deviation from the median of an array\n    of input numbers.\n\
    \    The Median Absolute Deviation is the median of the absolute\n    differences\
    \ from the median:\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat median_absolute_deviation(float[] numbers)\
    \ \n{\n    import std.algorithm : sort, sort!\"a < b\";\n    import std.math :\
    \ median;\n    auto sorted = numbers.dup.sort!\"a < b\";\n    auto c = median(sorted);\n\
    \    return median(sorted.map!q{abs(it - c)});\n}\n// [1.0, 2.0, 3.0, 4.0]\n/*\n\
    \    Calculate the Median Absolute Deviation from the median of an array\n   \
    \ of input numbers.\n    The Median Absolute Deviation is the median of the absolute\n\
    \    differences from the median:\n    MAD = median | x - x_median |\n    >>>\
    \ median_absolute_deviation([1.0, 2.0, 3.0, 4.0\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6b5gcbzb.d(16): Error: function declaration without return type.
    (Note that constructors are always named `this`)

    /tmp/tmp6b5gcbzb.d(16): Error: semicolon expected to close `alias` declaration

    /tmp/tmp6b5gcbzb.d(16): Error: found `/` instead of statement

    /tmp/tmp6b5gcbzb.d(43): Error: `;` expected

    /tmp/tmp6b5gcbzb.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6b5gcbzb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  foreach (number; numbers) {\n        mean += number;\n    }\n    mean /= numbers.length;\n\
    \    float mad = 0.0;\n    foreach (number; numbers) {\n        mad += abs(number\
    \ - mean);\n    }\n    return mad / numbers.length;\n}\n/*\n Given a set of input\
    \ numbers, calculate the Z-score (standard score) of each\n    value.\n    The\
    \ Z-score is the number of standard deviations by which the value of an\n    observation\
    \ or data point is above the mean value of what is being\n    observed or measured.\n\
    \    https://en.wikipedia.org/wiki/Standard_score\n    >>> z_score([1.0, 2.0,\
    \ 3.0])\n    [-1.224744871391589, 0.0, 1.224744871391589]\n    \n*/\nfloat[] z_score(float[]\
    \ numbers) \n{\n    float mean = 0.0;\n    foreach (number; numbers) {\n     \
    \   mean += number;\n    }\n    mean /= numbers.length;\n    float sdev = 0.0;\n\
    \    foreach (number; numbers) {\n        sdev += (number - mean) ** 2;\n    }\n\
    \    sdev = sqrt(sdev / (numbers.length - 1));\n    float[] z_scores = new float[];\n\
    \    foreach (number; numbers) {\n        z_scores ~= (number - mean) / sdev;\n\
    \    }\n    return z_scores;\n}\n/*\n Given a vector of numbers, calculate mean,\
    \ median, mode, minimum, maximum,\n    range, variance, standard deviation, and\
    \ z-scores.\n    >>> statistics([0.0, 0.0, 14.0, 35.0, 48.0, 59.0, 59.0, 60.0])\n\
    \    {\n        mean: 30.25,\n        median: 49.5,\n        mode: 59.0,\n   \
    \     minimum: 0.0,\n        maximum: 60.0,\n        range: 60.0,\n        variance:\
    \ 558.25,\n        standard_deviation: 23.56\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbsm3p1gh.d(55): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbsm3p1gh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean_numbers = mean(numbers);\n\
    \    float sums = reduce!((a, b) => a + abs(b - mean_numbers))(numbers);\n   \
    \ return sums / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl3taayhs.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmpl3taayhs.d(16): Error: template instance `reduce!((a, b) => a + abs(b
    - mean_numbers))` template `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl3taayhs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  foreach (i; numbers)\n    {\n        mean += i;\n    }\n    mean /= numbers.length;\n\
    \    float absolute_deviation = 0.0;\n    foreach (i; numbers)\n    {\n      \
    \  absolute_deviation += abs(i - mean);\n    }\n    absolute_deviation /= numbers.length;\n\
    \    return absolute_deviation;\n}\n/*\nCalculate covariance and correlation\n\
    \    http://en.wikipedia.org/wiki/Covariance\n    http://en.wikipedia.org/wiki/Correlation_and_dependence\n\
    \    >>> covariance( [1.0, 2.0, 3.0, 4.0], [1.0, 1.0, 2.0, 2.0] )\n    1.0\n \
    \   >>> covariance( [1.0, 2.0, 3.0, 4.0], [1.0, 1.0, 3.0, 3.0] )\n    2.0\n  \
    \  >>> correlation( [1.0, 2.0, 3.0, 4.0], [1.0, 1.0, 2.0, 2.0] )\n    1.0\n  \
    \  >>> correlation( [1.0, 2.0, 3.0, 4.0], [1.0, 1.0, 3.0, 3.0] )\n    0.9396926207859084\n\
    \    \n*/\nfloat covariance(float[] X, float[] Y) \n{\n    assert(X.length ==\
    \ Y.length);\n    float mean_X = 0.0;\n    float mean_Y = 0.0;\n    foreach (i;\
    \ X)\n    {\n        mean_X += i;\n    }\n    foreach (i; Y)\n    {\n        mean_Y\
    \ += i;\n    }\n    mean_X /= X.length;\n    mean_Y /= Y.length;\n    float covariance\
    \ = 0.0;\n    for (int i = 0; i < X.length; i++)\n    {\n        covariance +=\
    \ (X[i] - mean_X) * (Y[i] -\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbs3ojbc7.d(62): Error: expression expected, not `unittest`

    /tmp/tmpbs3ojbc7.d(61): Error: found `{` when expecting `)`

    /tmp/tmpbs3ojbc7.d(64): Error: found `alias` when expecting `;` following statement

    /tmp/tmpbs3ojbc7.d(70): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbs3ojbc7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ != 0);\n    float sum;\n    foreach (n; numbers)\n    {\n        sum += abs(n);\n\
    \    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplh4lh133.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x428439]

    ??:? void tmplh4lh133.__unittest_L23_C1() [0x427fd0]

    ??:? void tmplh4lh133.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c413]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430439]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b27d]

    ??:? runModuleUnitTests [0x42c1e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428888]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    assert(numbers.length\
    \ > 0);\n    float sum = 0.0;\n    for (float f : numbers) {\n        sum += f;\n\
    \    }\n    float mean = sum / numbers.length;\n    float[] devs = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        devs[i] = abs(numbers[i]\
    \ - mean);\n    }\n    return mean_absolute_deviation(devs);\n}\nunittest\n{\n\
    \    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx2aqkwnn.d(17): Error: semicolon expected, not `:`

    /tmp/tmpx2aqkwnn.d(17): Error: expression expected, not `:`

    /tmp/tmpx2aqkwnn.d(17): Error: found `numbers` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2aqkwnn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0.0;\n  \
    \  foreach ( i ; numbers )\n        mean += i;\n    mean /= numbers.length;\n\
    \    float absDevSum = 0.0;\n    foreach ( i ; numbers )\n        absDevSum +=\
    \ abs(i - mean);\n    return absDevSum / numbers.length;\n}\n/*\n Calculate the\
    \ Mean Absolute Deviation around the population mean.\n    Assumes the values\
    \ are sampled from a complete population.\n    >>> mean_absolute_deviation_population([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat mean_absolute_deviation_population(float[]\
    \ numbers) \n{\n    float mean = 0.0;\n    foreach ( i ; numbers )\n        mean\
    \ += i;\n    mean /= numbers.length;\n    float absDevSum = 0.0;\n    foreach\
    \ ( i ; numbers )\n        absDevSum += abs(i - mean);\n    return absDevSum /\
    \ numbers.length;\n}\n/*\n Calculate the Mean Absolute Deviation around the median\
    \ of a dataset.\n    Assumes the values are sampled from a complete population.\n\
    \    >>> mean_absolute_deviation_median([1.0, 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat\
    \ mean_absolute_deviation_median(float[] numbers) \n{\n    float median = median(numbers);\n\
    \    float absDevSum = 0.0;\n    foreach ( i ; numbers )\n        absDevSum +=\
    \ abs(i - median);\n    return absDevSum / numbers.length;\n}\n/*\n Calculate\
    \ the Median Absolute Deviation around the mean of a dataset.\n    Assumes the\
    \ values are sampled from a complete population.\n    >>> median_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n*/\nfloat median_absolute_deviation(float[] numbers)\
    \ \n{\n    float[] absDev = new float[numbers.length];\n    float mean = 0.0;\n\
    \    foreach ( i ; numbers )\n        mean += i;\n    mean /= numbers.length;\n\
    \    for ( int i\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp36pfbdtl.d(69): Error: semicolon expected, not `unittest`

    /tmp/tmp36pfbdtl.d(69): Error: expression expected, not `unittest`

    /tmp/tmp36pfbdtl.d(70): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmp36pfbdtl.d(71): Error: expression expected, not `alias`

    /tmp/tmp36pfbdtl.d(71): Error: found `candidate` when expecting `)`

    /tmp/tmp36pfbdtl.d(71): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36pfbdtl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n  assert(numbers.length >\
    \ 0);\n  float mean = sum(numbers) / numbers.length;\n  float[] diffs = numbers.map!((x)\
    \ => abs(x - mean));\n  return sum(diffs) / diffs.length;\n}\n/*\n Calculate a\
    \ z-score (aka, a standard score) for each value in the sample,\n    relative\
    \ to the sample mean and standard deviation.\n    z = (x - x_mean) / x_std\n \
    \   >>> z_scores([1.0, 2.0, 3.0, 4.0])\n    [(-1.3416407864998738, 0.4472135954999579),\
    \ (-0.4472135954999579, 0.8944271909999159), (0.4472135954999579, 1.3416407864998738),\
    \ (1.3416407864998738, 1.7888543819998318)]\n    \n*/\nTuple!(float, float)[]\
    \ z_scores(float[] numbers) \n{\n  assert(numbers.length > 0);\n  float mean =\
    \ sum(numbers) / numbers.length;\n  float sum_sq_diff = sum(numbers.map!((x) =>\
    \ (x - mean) * (x - mean)));\n  float stdev = sqrt(sum_sq_diff / (numbers.length\
    \ - 1));\n  return numbers.map!((x) => tuple(x, (x - mean) / stdev));\n}\n/*\n\
    \ Calculate the median for a list of numbers.\n    This function is not optimized.\n\
    \    The median is the 50th percentile, or the middle value in a sorted list.\n\
    \    The median is the same as the second quartile. The first quartile is the\n\
    \    25th percentile, and the third quartile is the 75th percentile.\n    NOTE:\n\
    \        - even length lists: median = mean(middle two elements)\n        - odd\
    \ length lists: median = middle element\n        - http://en.wikipedia.org/wiki/Percentile\n\
    \        - http://en.wikipedia.org/wiki/Quartile\n    >>> median([1, 3, 5])\n\
    \    3\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg34w4ojk.d(36): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg34w4ojk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float dev = 0.0;\n    foreach(i; 0 .. numbers.length)\n    {\n        dev\
    \ += abs(numbers[i] - mean);\n    }\n    return dev / float(numbers.length);\n\
    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkdvqh6k_.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdvqh6k_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = reduce!q{a\
    \ + b}(numbers) / numbers.length;\n    float[] abs_diff_squared = map!(x => (x\
    \ - mean)^2)(numbers);\n    float mean_abs_diff = sqrt(reduce!q{a + b}(abs_diff_squared)\
    \ / abs_diff_squared.length);\n    return mean_abs_diff;\n}\n/*\n For a given\
    \ array of input numbers, calculate the mean squared error\n    of a regression\
    \ line.\n    >>> mean_squared_error([1.0, 2.0, 3.0, 4.0], [3.0, 5.0, 7.0, 9.0])\n\
    \    4.0\n*/\nfloat mean_squared_error(float[] first_list, float[] second_list)\
    \ \n{\n    assert(first_list.length == second_list.length);\n    float[] squared_diff\
    \ = map!(x => (x[0] - x[1])^2)(zip(first_list, second_list));\n    float mse =\
    \ reduce!q{a + b}(squared_diff) / squared_diff.length;\n    return mse;\n}\n/*\n\
    \ For a given array of numbers and a constant, calculate the sum of the squares\n\
    \    of the difference between each number and the constant.\n    >>> sum_of_squares(1.0,\
    \ [1.0, 2.0, 3.0, 4.0])\n    10.0\n*/\nfloat sum_of_squares(float constant, float[]\
    \ numbers) \n{\n    float[] diff = map!(x => (x - constant)^2)(numbers);\n   \
    \ float sum_of_squares = reduce!q{a + b}(diff);\n    return sum_of_squares;\n\
    }\n/*\n For a given array of numbers, calculate the correlation coefficient, which\
    \ is\n    the covariance of the two arrays of numbers divided by the product of\
    \ their\n    standard deviations.\n    >>> correlation_coefficient([1.0, 2.0,\
    \ 3.0, 4.0], [1.0, 3.0, 5.0, 7.0])\n    0.\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo2lec_i7.d(45): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo2lec_i7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    return average(map!((n)\
    \ => abs(n - average(numbers)))(numbers));\n}\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n\
    \    MAD = average | x - x_median |\n    >>> mean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n    1.0\n    \n*/\nfloat median_absolute_deviation(float[] numbers)\
    \ \n{\n    float median = numbers[$ / 2];\n    return average(map!((n) => abs(n\
    \ - median))(numbers));\n}\n/*\n Calculate Gaussian mixture models (GMMs) for\
    \ a given array of input\n    numbers and a number of components.\n    GMMs return\
    \ a number of gaussian components that can be used to fit\n    data. Each gaussian\
    \ has a mean and standard deviation as well as a\n    weight for interpolation\
    \ between gaussians.\n    >>> gmm = fit_gaussian_mixture(numbers, 2)\n    >>>\
    \ gmm[0].mean\n    0.89\n    >>> gmm[0].std\n    0.04\n    >>> gmm[0].weight\n\
    \    0.43\n    >>> gmm[1].mean\n    1.11\n    >>> gmm[1].std\n    0.04\n    >>>\
    \ gmm[1].weight\n    0.57\n    \n*/\nGaussian[] fit_gaussian_mixture(float[] numbers,\
    \ uint n_components) \n{\n    enum Tolerance = 1e-8;\n    enum MaxIterations =\
    \ 1000;\n    enum Verbose = false;\n    enum RegularizationValue = 1e-12;\n  \
    \  float[] sort_numbers = sort(numbers);\n    float[] histogram = get_histogram(sort_numbers);\n\
    \    Gaussian[] gaussians = _init_gaussians(sort_numbers, histogram, n_components);\n\
    \    float[] weights = _get_component_weights(gaussians);\n    float[][] responsibilities\
    \ = new float[n_components][];\n    float[] new_weights = new float[n_components];\n\
    \    float[][]\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n\
    \    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1pbavfut.d(64): Error: no identifier for declarator `float[][]`

    /tmp/tmp1pbavfut.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1pbavfut.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float average = mean(numbers);\n\
    \    float sum_deviations = 0.0;\n    for (float i = 0; i < numbers.length; i++)\
    \ \n    {\n        sum_deviations += abs(numbers[i] - average);\n    }\n    return\
    \ sum_deviations / numbers.length;\n}\n/*\n    For a given array of input numbers,\
    \ calculate the Mean Absolute Error.\n    The error, e_i, between a prediction,\
    \ y_i, and an observation, x_i, is:\n    e_i = y_i - x_i\n    The mean absolute\
    \ error, MAE, is defined as:\n    MAE = average | e_i |\n    >>> mean_absolute_error([1.0,\
    \ 2.0, 3.0, 4.0], [0.0, 1.0, 2.0, 3.0])\n    1.0\n*/\nfloat mean_absolute_error(float[]\
    \ predictions, float[] targets) \n{\n    float sum_absolute_errors = 0.0;\n  \
    \  for (float i = 0; i < predictions.length; i++) \n    {\n        sum_absolute_errors\
    \ += abs(predictions[i] - targets[i]);\n    }\n    return sum_absolute_errors\
    \ / predictions.length;\n}\n/*\n    For a given array of input numbers, calculate\
    \ the Mean Squared Error.\n    The error, e_i, between a prediction, y_i, and\
    \ an observation, x_i, is:\n    e_i = y_i - x_i\n    The mean squared error, MSE,\
    \ is defined as:\n    MSE = average ( e_i )^2\n    >>> mean_squared_error([1.0,\
    \ 2.0, 3.0, 4.0], [0.0, 1.0, 2.0, 3.0])\n    1.0\n*/\nfloat mean_squared_error(float[]\
    \ predictions, float[] targets) \n{\n    float sum_squared_errors = 0.0;\n   \
    \ for (float i = 0; i < predictions.length; i++) \n    {\n        sum_squared_errors\
    \ += (predictions[i] - targets[i\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo_mi8xjh.d(56): Error: found `unittest` when expecting `,`

    /tmp/tmpo_mi8xjh.d(64): Error: found `void` when expecting `,`

    /tmp/tmpo_mi8xjh.d(64): Error: found `{` when expecting `,`

    /tmp/tmpo_mi8xjh.d(64): Error: expression expected, not `}`

    /tmp/tmpo_mi8xjh.d(64): Error: found `End of File` when expecting `,`

    /tmp/tmpo_mi8xjh.d(64): Error: found `End of File` when expecting `]`

    /tmp/tmpo_mi8xjh.d(55): Error: found `End of File` when expecting `)`

    /tmp/tmpo_mi8xjh.d(64): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpo_mi8xjh.d(64): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpo_mi8xjh.d(64): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_mi8xjh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float mad = 0.0;\n    foreach (i; 0 .. numbers.length)\n    {\n        mad\
    \ += abs(numbers[i] - mean);\n    }\n    return mad / numbers.length;\n}\n/*\n\
    Calculate value-to-mean ratios for a given dataset.\n>>> value_to_mean_ratios([1.0,\
    \ 2.0, 3.0, 4.0])\n[0.25, 0.5, 0.75, 1.0]\n*/\nfloat[] value_to_mean_ratios(float[]\
    \ numbers) \n{\n    float[] ratios = new float[];\n    float mean = mean(numbers);\n\
    \    foreach (i; 0 .. numbers.length)\n    {\n        ratios ~= numbers[i] / mean;\n\
    \    }\n    return ratios;\n}\n/*\nCalculate a single coefficient of variation\
    \ for a given dataset.\n>>> coefficient_of_variation([1.0, 2.0, 3.0, 4.0])\n0.37267799\n\
    */\nfloat coefficient_of_variation(float[] numbers) \n{\n    return sqrt(variance(numbers))\
    \ / mean(numbers);\n}\n/*\n Calculate the mean center for a given dataset.\n \
    \   >>> mean_center([[0.0, 0.0], [5.0, 5.0], [3.0, 3.0]])\n    [3.0, 3.0]\n*/\n\
    float[] mean_center(float[][] numbers) \n{\n    float[] mean_center = new float[];\n\
    \    foreach (i; 0 .. numbers[0].length)\n    {\n        mean_center ~= mean(numbers.map!(x\
    \ => x[i]));\n    }\n    return mean_center;\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvofnmmod.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    /tmp/tmpvofnmmod.d(30): Error: new can only create structs, dynamic arrays or
    class objects, not `float[]`''s

    /tmp/tmpvofnmmod.d(31): Error: undefined identifier `mean`, did you mean function
    `main`?

    /tmp/tmpvofnmmod.d(45): Error: undefined identifier `variance`

    /tmp/tmpvofnmmod.d(45): Error: undefined identifier `mean`, did you mean function
    `main`?

    /tmp/tmpvofnmmod.d(54): Error: new can only create structs, dynamic arrays or
    class objects, not `float[]`''s

    /tmp/tmpvofnmmod.d(57): Error: undefined identifier `mean`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvofnmmod.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n  assert(!numbers.empty);\n\
    \    auto mean = std.algorithm.reduce!\"a + b\"(numbers) / float(numbers.length);\n\
    \    auto diff = std.typecons.Tuple!(float, float)(0.0, 0.0);\n    for (float\
    \ num; num = numbers.popFront)\n    {\n        float absDiff = abs(num - mean);\n\
    \        diff.field0 += absDiff;\n        diff.field1 += absDiff * absDiff;\n\
    \    }\n    return diff.field0 / float(numbers.length);\n}\nunittest\n{\n    alias\
    \ candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) ==\
    \ 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu1saf3v4.d(18): Error: found `)` when expecting `;` following `for`
    condition

    /tmp/tmpu1saf3v4.d(24): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu1saf3v4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n  return mean(map!((x) =>\
    \ abs(x - mean(numbers)))(numbers));\n}\nfloat mean_absolute_deviation([float,\
    \ float] numbers) \n{\n  return mean(map!((x) => abs(x - mean(numbers)))(numbers));\n\
    }\nfloat mean_absolute_deviation([float, float, float] numbers) \n{\n  return\
    \ mean(map!((x) => abs(x - mean(numbers)))(numbers));\n}\nfloat mean_absolute_deviation([float,\
    \ float, float, float] numbers) \n{\n  return mean(map!((x) => abs(x - mean(numbers)))(numbers));\n\
    }\nfloat mean_absolute_deviation([float, float, float, float, float] numbers)\
    \ \n{\n  return mean(map!((x) => abs(x - mean(numbers)))(numbers));\n}\nfloat\
    \ mean_absolute_deviation([float, float, float, float, float, float] numbers)\
    \ \n{\n  return mean(map!((x) => abs(x - mean(numbers)))(numbers));\n}\nfloat\
    \ mean_absolute_deviation([float, float, float, float, float, float, float] numbers)\
    \ \n{\n  return mean(map!((x) => abs(x - mean(numbers)))(numbers));\n}\nfloat\
    \ mean_absolute_deviation([float, float, float, float, float, float, float, float]\
    \ numbers) \n{\n  return mean(map!((x) => abs(x - mean(numbers)))(numbers));\n\
    }\nfloat mean_absolute_deviation([float, float, float, float, float, float, float,\
    \ float, float] numbers) \n{\n  return mean(map!((x) => abs(x - mean(numbers)))(numbers));\n\
    }\nfloat mean_absolute_deviation([float, float, float, float, float, float, float,\
    \ float, float, float] numbers) \n{\n  return mean(map!((x) => abs(x - mean(numbers)))(numbers));\n\
    }\n/*\n For a given array of input numbers, calculate Variance (using\nunittest\n\
    {\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0,\
    \ 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6gwvhyi.d(17): Error: basic type expected, not `[`

    /tmp/tmpp6gwvhyi.d(17): Error: found `,` when expecting `.` following float

    /tmp/tmpp6gwvhyi.d(17): Error: found `float` when expecting identifier following
    `float`.

    /tmp/tmpp6gwvhyi.d(21): Error: basic type expected, not `[`

    /tmp/tmpp6gwvhyi.d(21): Error: found `,` when expecting `.` following float

    /tmp/tmpp6gwvhyi.d(21): Error: found `float` when expecting identifier following
    `float`.

    /tmp/tmpp6gwvhyi.d(21): Error: found `,` when expecting `]`

    /tmp/tmpp6gwvhyi.d(21): Error: found `float` when expecting `)`

    /tmp/tmpp6gwvhyi.d(21): Error: semicolon expected following function declaration

    /tmp/tmpp6gwvhyi.d(21): Error: declaration expected, not `]`

    /tmp/tmpp6gwvhyi.d(24): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6gwvhyi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = mean(numbers);\n\
    \    float absolute_deviations = 0.0;\n    foreach (i; 0 .. numbers.length)\n\
    \    {\n        absolute_deviations += abs(numbers[i] - mean);\n    }\n    return\
    \ absolute_deviations / numbers.length;\n}\nunittest\n{\n    alias candidate =\
    \ mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) ==\
    \ 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxdy_bm6.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxdy_bm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n\tfloat mean = mean(numbers);\n\
    \tfloat diffs = 0.0;\n\tfor (int i = 0; i < numbers.length; i++)\n\t{\n\t\tdiffs\
    \ += abs(numbers[i] - mean);\n\t}\n\tfloat div = float(numbers.length);\n\tfloat\
    \ result = diffs / div;\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n  \
    \  assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpluwqi4k8.d(15): Error: undefined identifier `mean`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpluwqi4k8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given array of input\
    \ numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \n*/\n\
    float mean_absolute_deviation(float[] numbers) \n{\n    float mean = reduce!q{a\
    \ + b}(numbers) / numbers.length;\n    return reduce!q{a + abs(b - mean)}(numbers)\
    \ / numbers.length;\n}\n/*\n For a given array of input numbers, calculate Mean\
    \ Absolute Deviation\n    around a given centerpoint.\n    Mean Absolute Deviation\
    \ is the average absolute difference between each\n    element and a centerpoint\
    \ (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0], 2.5)\n    1.5\n    \n*/\nfloat mean_absolute_deviation(float[]\
    \ numbers, float centerpoint) \n{\n    return reduce!q{a + abs(b - centerpoint)}(numbers)\
    \ / numbers.length;\n}\n/*\n    For a given array of input numbers, calculate\
    \ the coefficient of variation.\n    This is the ratio of the standard deviation\
    \ to the mean:\n    coef = standard_deviation / mean\n    Note that if mean is\
    \ zero, zero is returned.\n    >>> coefficient_of_variation([1.0, 2.0, 3.0, 4.0])\n\
    \    0.8164965809277261\n    \n*/\nfloat coefficient_of_variation(float[] numbers)\
    \ \n{\n    float mean = reduce!q{a + b}(numbers) / numbers.length;\n    if (mean\
    \ == 0.0)\n        return 0.0;\n    float stddev = sqrt(reduce!q{a + (b - mean)\
    \ ^^ 2}(numbers) / numbers.length);\n    return stddev / mean;\n}\n/*\n    Coefficient\
    \ of variation without calculating the standard deviation.\n    This method uses\
    \ the mean absolute deviation instead.\n    Note that if mean is zero, zero is\
    \ returned.\n    >>> coefficient_of_variation_alt([1.0, 2.0, 3.0, 4.0])\n    0.9428090415820634\n\
    \    \n*/\nfloat coefficient_of_variation_alt(float[] numbers) \n{\n    float\
    \ mean = reduce!q{a + b}(numbers)\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\
    \n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3tm_ms95.d(60): Error: semicolon expected, not `unittest`

    /tmp/tmp3tm_ms95.d(60): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3tm_ms95.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
