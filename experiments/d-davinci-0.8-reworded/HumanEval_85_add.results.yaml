language: d
name: HumanEval_85_add
results:
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   int a = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if (i\
    \ % 2 == 1 && lst[i] % 2 == 0)\n        {\n            a += lst[i];\n        }\n\
    \    }\n    return a;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long x=0;\n    foreach(a;0..lst.length)\n    {\n        if(a%2==1)\n     \
    \   {\n            if(lst[a]%2==0)\n            {\n                x+=lst[a];\n\
    \            }\n        }\n    }\n    return x;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt6iiamt8.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6iiamt8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ long result = 0L;\n  foreach(immutable i, immutable l; lst) \n  {\n    static\
    \ if (i % 2 == 1) \n    {\n      static if (l % 2 == 0) \n      {\n        result\
    \ += l;\n      }\n    }\n  }\n  return result;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnk1hk3mw.d(15): Error: variable `__key73` cannot be read at compile
    time

    /tmp/tmpnk1hk3mw.d(17):        while evaluating i.init

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnk1hk3mw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   /*\n    long r = 0;\n    for (auto i = 0; i < lst.length; i += 2)\n      \
    \  r += lst[i];\n    return r;\n    */\n    // isEven() is an expression\n   \
    \ return lst.filter!(i => i % 2 == 0).sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpspye7u0k.d(21): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpspye7u0k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   auto f = (long x) => x % 2 == 0 ? x : 0;\n    return map!f(lst).sum;\n}\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsmlhmcea.d(15): Error: template instance `map!f` template `map`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsmlhmcea.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return 0;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps5heyy_w.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x428115]

    ??:? void tmps5heyy_w.__unittest_L16_C1() [0x427d60]

    ??:? void tmps5heyy_w.__modtest() [0x427e94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c123]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afb6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430149]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4300d5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af8d]

    ??:? runModuleUnitTests [0x42bef9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428564]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long tot;\n    int i,n;\n    foreach(i,n;lst)\n    {\n        if(n%2==0)\n\
    \        {\n            tot+=n;\n        }\n    }\n    return tot;\n}\n    \n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt35d9v_o.d(16): Error: variable `n` is shadowing variable `tmpt35d9v_o.add.n`

    /tmp/tmpt35d9v_o.d(16): Error: variable `i` is shadowing variable `tmpt35d9v_o.add.i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt35d9v_o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   // return sum(i % 2 == 1 ? lst[i] : 0L for i in 0..lst.length);\n    long\
    \ sum = 0L;\n    foreach( idx, num; lst )\n    {\n        if( idx % 2 == 1 )\n\
    \        {\n            sum += num;\n        }\n    }\n    return sum;\n}\n/*\n\
    Given a non-empty array of integers lst. add the even elements that are at odd\
    \ indices..\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphtpvi3eu.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphtpvi3eu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(n; lst)\n    {\n      enum even = n % 2 ==\
    \ 0;\n      enum odd = n % 2 != 0;\n      if(even) \n      {\n        result +=\
    \ n;\n      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxuz9wg0o.d(17): Error: variable `n` cannot be read at compile time

    /tmp/tmpxuz9wg0o.d(18): Error: variable `n` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxuz9wg0o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   alias IndicesAndValues = Tuple!(size_t, \"index\", long, \"value\");\n   \
    \ return lst.enumerate\n        .filter!(a => a.index & 1 == 1 && a.value & 1\
    \ == 0)\n        .map!(a => a.value)\n        .sum;\n}\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvqr6kxzd.d(16): Error: `1 == 1` must be parenthesized when next
    to operator `&`

    /tmp/tmpvqr6kxzd.d(16): Error: `1 == 0` must be parenthesized when next to operator
    `&`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvqr6kxzd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   int result = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n       \
    \ if (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long res=0;\n    int len = lst.length;\n    for(int i=0;i<len;i++){\n    \
    \    if(i%2==1){\n            res+=lst[i];\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8gjg67wl.d(15): Error: cannot implicitly convert expression `lst.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8gjg67wl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.filter!(x => isEven(x))\n              .filter!(x => lst.indexOf(x)\
    \ % 2 == 1)\n              .sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3bujt8fg.d(14): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3bujt8fg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ long sum = 0;\n  foreach(lst, (val, index) => \n  {\n    if (index % 2 != 0\
    \ && val % 2 == 0)\n      sum += val;\n  });\n  return sum;\n}\n/*\nModule contains\
    \ a function that calculates the sum of all even numbers in an array.\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq2c_xx92.d(15): Error: basic type expected, not `(`

    /tmp/tmpq2c_xx92.d(15): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpq2c_xx92.d(15): Error: no identifier for declarator `_error_(val, index)`

    /tmp/tmpq2c_xx92.d(15): Error: found `=>` when expecting `;`

    /tmp/tmpq2c_xx92.d(19): Error: use `{ }` for an empty statement, not `;`

    /tmp/tmpq2c_xx92.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq2c_xx92.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   import std.algorithm;\n    return lst\n    .filter!(a => a%2 == 0)\n    .filter!((a,i)\
    \ => i%2==1)\n    .sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(1164):
    Error: template `tmpm29m0eeh.add.__lambda3` cannot deduce function from argument
    types `!()(long)`, candidates are:

    /tmp/tmpm29m0eeh.d(17):        `tmpm29m0eeh.add.__lambda3`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(1198):
    Error: template `tmpm29m0eeh.add.__lambda3` cannot deduce function from argument
    types `!()(long)`, candidates are:

    /tmp/tmpm29m0eeh.d(17):        `tmpm29m0eeh.add.__lambda3`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(1122):
    Error: template instance `tmpm29m0eeh.add.FilterResult!(__lambda3, FilterResult!(__lambda2,
    long[]))` error instantiating

    /tmp/tmpm29m0eeh.d(17):       '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.zip(0L..lst.length)\n        .filter!(t => (t[1] % 2L) == 0L)\n\
    \        .map!(t => t[0])\n        .sum;\n}\n/*\nReturn the number of consecutive\
    \ integers with the same value as in a given array lst.\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpft6rm03b.d(14): Error: found `..` when expecting `,`

    /tmp/tmpft6rm03b.d(19): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpft6rm03b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long ans = 0L;\n    foreach(i,v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            ans += v;\n        }\n    }\n    return ans;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst) \n    {\n        if(i % 2 == 1 && e\
    \ % 2 == 0)\n            sum += e;\n    }\n    return sum;\n}\n/*\nGiven a tree,\
    \ return the level in the tree that has the greatest sum.\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpenxjabrb.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpenxjabrb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long[] temp = new long[(long) ceil(lst.length / 2.0)];\n    int count = 0;\n\
    \    foreach(i, val; lst)\n    {\n        if(i % 2 == 1 && val % 2 == 0)\n   \
    \     {\n            temp[count] = val;\n            count++;\n        }\n   \
    \ }\n    return reduce!\"a + b\"(temp);\n}\nunittest\n{\n    alias candidate =\
    \ add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc3ehm62v.d(14): Error: C style cast illegal, use `cast(long)ceil(lst.length
    / 2.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3ehm62v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   auto f = (a,b) => a+b;\n    long[] even = lst.filter!((a) => a % 2 == 0);\n\
    \    return even.enumerate.filter!((a) => a.index % 2 == 1).map!(a => a.value).reduce!f(0L);\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4rcdt7_j.d(14): Error: variable `tmp4rcdt7_j.add.f` type `void`
    is inferred from initializer `(a, b) => a + b`, and variables cannot be of type
    `void`

    /tmp/tmp4rcdt7_j.d(14): Error: template lambda has no value

    /tmp/tmp4rcdt7_j.d(15): Error: no property `filter` for type `long[]`

    /tmp/tmp4rcdt7_j.d(16): Error: no property `enumerate` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rcdt7_j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   // change code here\n    long sum = 0;\n    auto i = lst.size;\n    for(size_t\
    \ m = 0; m < i; m++)\n    {\n      if(m % 2 == 1 && lst[m] % 2 == 0)\n      {\n\
    \        sum += lst[m];\n      }\n    }\n    return sum;\n}\nunittest\n{\n   \
    \ alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxaaqpdyc.d(16): Error: no property `size` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxaaqpdyc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long res = 0L;\n    for (int i = 0; i < lst.length; i += 2)\n    {\n     \
    \   long item = lst[i];\n        if ((item % 2L) == 0L)\n        {\n         \
    \   res += item;\n        }\n    }\n    return res;\n}\n/*\nA palindrome is a\
    \ word, phrase, number, or other sequence of characters which reads the same backward\
    \ or forward. Allowances may be made for adjustments to capital letters, punctuation,\
    \ and word dividers.\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4f26ij27.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4f26ij27.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    long index = 0L;\n    foreach (value; lst) \n    {\n\
    \        if (index % 2L == 1L && isEven(value)) \n        {\n            result\
    \ += value;\n        }\n        index++;\n    }\n    return result;\n}\n/*\nDefine\
    \ the function isEven that takes an integer x as a parameter and returns true\
    \ if x is even and false otherwise.\n*/\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyleez9sm.d(18): Error: undefined identifier `isEven`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyleez9sm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(immutable idx, immutable val; lst)\n    {\n   \
    \     if (idx % 2 == 1 && val % 2 == 0)\n        {\n            sum += val;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\n/*\nGiven a list of integers lst and a single\
    \ integer n, return the nth largest integer in lst.\n(If lst has the same largest\
    \ number more than once, return the largest integer in lst.)\nunittest\n{\n  \
    \  alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4oojyf5z.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4oojyf5z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   int a = 0;\n    for (int i = 0; i < lst.length; i += 2)\n    {\n        a\
    \ += lst[i];\n    }\n    return a;\n}\n/*\nYou are given an array of integers,\
    \ where each element represents the maximum number of steps that can be jumped\
    \ going forward from that element. Write a function to return the minimum number\
    \ of jumps you must take in order to get from the start to the end of the array.\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6_s2akl.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6_s2akl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\nlong\
    \ res = 0L;\n//int i = 0;\n//int len = lst.length;\n//while(i < len) {\n    //if((lst[i]\
    \ % 2L) == 0L && (i % 2) == 1) {\n        //res += lst[i];\n    //}\n    //i++;\n\
    //}\n//return res;\nauto odds = filter!(a => (a % 2L) == 0L)(lst);\nauto evens\
    \ = filter!(a => (a % 2L) == 1L)(lst);\nreturn odds.sum() + evens.sum();\n}\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9oqyrzi2.d(24): Error: template instance `filter!((a) => a % 2L
    == 0L)` template `filter` is not defined

    /tmp/tmp9oqyrzi2.d(25): Error: template instance `filter!((a) => a % 2L == 1L)`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oqyrzi2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ long res = 0L;\n  long j = 0L;\n  foreach (long i, long el; lst) \n  {\n   \
    \ if (j % 2L == 0L && el % 2L == 0L) \n    {\n      res += el;\n    }\n    j++;\n\
    \  }\n  return res;\n}\n/*\nGiven an array of integers, return the array with\
    \ all duplicate elements removed.\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp67jhdcd5.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp67jhdcd5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   int i = 0;\n    long sum = 0;\n    foreach(ele; lst)\n    {\n        if(i%2\
    \ != 0 && ele%2 == 0)\n        {\n            sum += ele;\n        }\n       \
    \ i++;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.filter!(a => a % 2 == 0).filter!(a => lst.indexOf(a) % 2 == 1).sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplgcz2nud.d(14): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplgcz2nud.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(index, element; lst) \n    {\n        if(index\
    \ % 2 != 0 && element % 2 == 0)\n        {\n            sum += element;\n    \
    \    }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum=0;\n    int i=0;\n    while(i<lst.length)\n    {\n        if((i%2!=0)&&(lst[i]%2==0))\n\
    \            sum+=lst[i];\n        i++;\n    }\n    return sum;\n}\n/*\nGiven\
    \ a tuple of integers tpl, return the tuple of integers where each element is\
    \ multiplied by 2, as long as the elements are less than 100. Otherwise, keep\
    \ the element as it is.\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3xtt4b6v.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3xtt4b6v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ (lst[i] % 2 == 0 && i % 2 != 0)\n        {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n/*\nGiven the array numbers in the form:\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvj3govf5.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvj3govf5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    int  i = 0;\n    foreach(elem; lst)\n    {\n      \
    \  if (i % 2 == 1 && elem % 2 == 0)\n        {\n            result += elem;\n\
    \        }\n        i++;\n    }\n    return result;\n}\n/*\nGiven an array of\
    \ integers, find the pair of adjacent elements that has the largest product and\
    \ return that product.\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt6g809b5.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6g809b5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ int i = 0;\n  long sum = 0;\n  while (i < lst.length)\n  {\n    if (i % 2 ==\
    \ 1)\n    {\n      sum += lst[i];\n    }\n    i++;\n  }\n  return sum;\n}\n/*\n\
    Given a non-empty array of integers lst. add the even elements that are at odd\
    \ indices..\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyz9zg9d4.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyz9zg9d4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return reduce!((a, b) => a + b)(filter!(a => (a % 2 == 0))(enumerate(lst))).sum;\n\
    }\n// This is a clunky way to get the sum of an array of 2 element tuples.\n//\
    \ It is not the fastest way.\nTuple!(long, long) sum(Tuple!(long, long)[] array)\n\
    {\n    auto result = tuple(0L, 0L);\n    foreach(item; array)\n    {\n       \
    \ result[0] += item[0];\n        result[1] += item[1];\n    }\n    return result;\n\
    }\nlong add_fast(long[] lst) \n{\n    return sum(map!(a => tuple(a[1], 0L))(filter!(a\
    \ => (a[1] % 2 == 0))(enumerate(lst)))).sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgddt3q9y.d(14): Error: template instance `reduce!((a, b) => a +
    b)` template `reduce` is not defined

    /tmp/tmpgddt3q9y.d(30): Error: template instance `map!((a) => tuple(a[1], 0L))`
    template `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgddt3q9y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \  long res = 0L;\n   size_t len = lst.length;\n   for (size_t i = 0; i < len;\
    \ i++)\n    {\n       if (i % 2 == 1)\n        {\n           if (lst[i] % 2 ==\
    \ 0)\n            {\n               res += lst[i];\n            }\n        }\n\
    \    }\n   return res;\n}\n/*\nunittest\n{\n    alias candidate = add;\n\n   \
    \ assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppuxiu3de.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppuxiu3de.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.filter!(a => a % 2 == 0 && lst.indexOf(a) % 2 != 0).sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvvd59yws.d(14): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvvd59yws.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return reduce!((a,b) => a + b)(lst).filter!(x => x % 2 == 0 && lst.indexOf(x)\
    \ % 2 != 0).sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvgz7c30c.d(14): Error: template instance `reduce!((a, b) => a +
    b)` template `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvgz7c30c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return zip(lst,iota(0L,lst.length)).filter!(a => a[1] % 2L == 1L).map!(a =>\
    \ a[0]).filter!(a => a % 2L == 0L).reduce!q{a,b => a + b}();\n}\nunittest\n{\n\
    \    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph23u2m11.d(14): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph23u2m11.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   int len = lst.length;\n    long sum = 0;\n    for (int i = 0; i < len; i++)\n\
    \    {\n        if (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppgugwvvc.d(14): Error: cannot implicitly convert expression `lst.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppgugwvvc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(immutable i, immutable e; lst)\n    {\n       \
    \ if(i%2 != 0 && e%2 == 0)\n        {\n            sum += e;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   /*\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsvbweude.d(14): Error: unterminated /* */ comment

    /tmp/tmpsvbweude.d(24): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsvbweude.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ long sum = 0;\n  foreach(immutable i, long e; lst)\n  {\n    if (i % 2 == 1\
    \ && e % 2 == 0)\n      sum += e;\n  }\n  return sum;\n}\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long res = 0L;\n    foreach(c, i; lst)\n    {\n        if(c%2==0 && i%2==1)\n\
    \        {\n            res += c;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu26xnjf5.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmpu26xnjf5.__unittest_L24_C1() [0x427de4]

    ??:? void tmpu26xnjf5.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b036]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430678]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430155]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b00d]

    ??:? runModuleUnitTests [0x42bf79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long Sum;\n    Sum = 0;\n    long i;\n    i = 0;\n    while (i < lst.length)\n\
    \    {\n        if (lst[i] % 2 == 0 && i % 2 != 0)\n        {\n            Sum\
    \ = Sum + lst[i];\n        }\n        i = i + 1;\n    }\n    return Sum;\n}\n\
    /*\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1hxroxq.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1hxroxq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ long sum=0;\n  foreach(i, e; lst)\n  {\n    if(i%2==1 && e%2==0)\n    {\n  \
    \    sum+=e;\n    }\n  }\n  return sum;\n}\nunittest\n{\n    alias candidate =\
    \ add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long res = 0L;\n    for (int i = 0; i < lst.length; i += 2)\n    {\n     \
    \   if (lst[i] % 2 == 0)\n        {\n            res += lst[i];\n        }\n \
    \   }\n    return res;\n}\nlong add2(long[] lst) \n{\n    long res = 0L;\n   \
    \ foreach (var el; lst)\n    {\n        if (el % 2 == 0)\n        {\n        \
    \    res += el;\n        }\n    }\n    return res;\n}\nlong add3(long[] lst) \n\
    {\n    long res = 0L;\n    foreach (var el; lst)\n    {\n        if (el % 2 ==\
    \ 0)\n        {\n            res += el;\n        }\n    }\n    return res;\n}\n\
    // -----\nauto add4(long[] lst)\n{\n    long res = 0L;\n    foreach (var el; lst)\n\
    \    {\n        if (el % 2 == 0)\n        {\n            res += el;\n        }\n\
    \    }\n    return res;\n}\n// -----\n// -----\n// -----\n// -----\n// -----\n\
    // -----\n// -----\n// -----\n// -----\n// -----\n// -----\n// -----\n// -----\n\
    // -----\n// -----\n// -----\n// -----\n// -----\n// -----\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx0otf1g1.d(27): Error: undefined identifier `var`

    /tmp/tmpx0otf1g1.d(39): Error: undefined identifier `var`

    /tmp/tmpx0otf1g1.d(52): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx0otf1g1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   bool b=true;\n    auto sum = 0L;\n    auto i = 0L;\n    while(i < lst.length)\n\
    \    {\n        sum+=b ? lst[i] : 0L;\n        b = !b;\n        i++;\n    }\n\
    \    return sum;\n}\n/*\nReturn the sum of numbers in lst.\n    \n    Examples:\n\
    \    >>> sum([1, 2, 3, 4])\n    10\n    \n*/\nlong sum(long[] lst) \n{\n    auto\
    \ x = 0L;\n    foreach(long y; lst)\n    {\n        x+=y;\n    }\n    return x;\n\
    }\n/*\nGiven a list of integer lst. do the following.\n- move the positive elements\
    \ to the end.\n- move the negative elements to the front.\n- keep the order of\
    \ the elements unchanged.\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp33n4xbmx.d(42): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp33n4xbmx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long res = 0L;\n    return lst.filter!(i => i % 2 == 0 && lst.indexOf(i) %\
    \ 2 != 0).reduce!((l, r) => l + r)(0L);\n}\n// Example Test Run\nunittest\n{\n\
    \    auto res = add([4L, 2L, 6L, 7L]);\n    assert(res == 2L);\n}\n \n \n /*\n\
    \        Task\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ec7ui7y.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ec7ui7y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(idx, element; lst)\n    {\n        if (idx % 2\
    \ != 0 && element % 2 == 0)\n        {\n            sum += element;\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long oddSum = 0;\n    foreach(int i, long l; lst)\n    {\n        if (i %\
    \ 2 == 1 && l % 2 == 0) \n        {\n            oddSum += l;\n        }\n   \
    \ }\n    return oddSum;\n}\n/*\nWrite a function to check if a given string is\
    \ a palindrome.\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpktdaq0me.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpktdaq0me.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   auto tup = std.typecons.tuple(lst.length);\n    for (int i = 0; i < lst.length;\
    \ i++)\n    {\n        tup[i] = lst[i];\n    }\n    long sum = 0;\n    int j =\
    \ 0;\n    for (int i = 0; i < tup.length; i++)\n    {\n        if (i % 2 == 0)\n\
    \        {\n            sum += tup[i];\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkj1ivcf.d(17): Error: variable `i` cannot be read at compile time

    /tmp/tmpzkj1ivcf.d(25): Error: variable `i` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkj1ivcf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(index, element; lst) \n    {\n        if(index\
    \ % 2 == 1 && element % 2 == 0) \n        {\n            result += element;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long res = 0L;\n    foreach(i, e; lst) if (i % 2 == 1 && e % 2 == 0) res +=\
    \ e;\n    return res;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ long sum = 0;\n  for (int i = 0; i < lst.length; i+=2)\n    sum += lst[i];\n\
    \  return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp903ue33n.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x428175]

    ??:? void tmp903ue33n.__unittest_L19_C1() [0x427dc4]

    ??:? void tmp903ue33n.__modtest() [0x427ef8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b08a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43021d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]

    ??:? runModuleUnitTests [0x42bfcd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428638]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ long res = 0L;\n  foreach(i, e; lst) \n  {\n    if (i % 2)\n      res += e;\n\
    \  }\n  return res;\n}\n/*\nGiven a non-empty array of integers lst. add the even\
    \ elements that are at odd indices..\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo7m1u6yi.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo7m1u6yi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long[] lst1 = lst.retro;\n    long res = 0;\n    for (int i = 0; i < lst1.length;\
    \ i += 2)\n    {\n        res += lst1[i];\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdctpy6h_.d(14): Error: no property `retro` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdctpy6h_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    size_t n = lst.length;\n    for (size_t i = 0; i < n; i++)\
    \ \n    {\n        if (i % 2 != 0 && lst[i] % 2 == 0) \n        {\n          \
    \  sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.sum & 0x1;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvakuoc73.d(14): Error: no property `sum` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvakuoc73.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum=0;\n    for(int i=0;i<lst.length;i+=2)\n        if(lst[i]%2==0)\n\
    \        sum+=lst[i];\n    return sum;\n}\nunittest\n{\n    alias candidate =\
    \ add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_a_amqfe.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281b5]

    ??:? void tmp_a_amqfe.__unittest_L20_C1() [0x427e00]

    ??:? void tmp_a_amqfe.__modtest() [0x427f34]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c237]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43025d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43070c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a1]

    ??:? runModuleUnitTests [0x42c00d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428678]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst[(int)iota(lst.length).filter!(x => x & 1 == 1).filter!(x => lst[x]\
    \ & 1 == 0).reduce!q{a, b => a + b}];\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1zi39ffb.d(14): Error: `1 == 1` must be parenthesized when next
    to operator `&`

    /tmp/tmp1zi39ffb.d(14): Error: `1 == 0` must be parenthesized when next to operator
    `&`

    /tmp/tmp1zi39ffb.d(14): Error: C style cast illegal, use `cast(int)iota(lst.length).filter!((x)
    => x & 1 == 1).filter!((x) => lst[x] & 1 == 0).reduce!"a, b => a + b"`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1zi39ffb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n    =>\
    \ lst.\n        enumerate().\n        filter!(i => i.index % 2 && i.value % 2\
    \ == 0).\n        map!(i => i.value).\n        reduce!((a, b) => a + b)(0L);\n\
    /*\nGiven a tree a, b and c. Find the shortest way to get from a to c.\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphg21e1oa.d(13): Error: semicolon expected following function declaration

    /tmp/tmphg21e1oa.d(13): Error: declaration expected, not `=>`

    /tmp/tmphg21e1oa.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphg21e1oa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, element; lst) \n    {\n        if((i & 1L) &&\
    \ element & 1L == 0L)\n        {\n            sum += element;\n        }\n   \
    \ }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2b885mew.d(17): Error: `1L == 0L` must be parenthesized when next
    to operator `&`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2b885mew.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    return result;\n}\n\"#;\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplcrx3hov.d(17): Error: unterminated string constant starting at
    /tmp/tmplcrx3hov.d(17)

    /tmp/tmplcrx3hov.d(17): Error: declaration expected, not `""`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplcrx3hov.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   int count = 0;\n    long sum = 0;\n    foreach(item; lst)\n    {\n       \
    \ if(count%2==0)\n        {\n            sum += item;\n        }\n        count++;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2mzd1jt4.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp2mzd1jt4.__unittest_L26_C1() [0x427de0]

    ??:? void tmp2mzd1jt4.__modtest() [0x427f14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b036]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430678]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430155]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b00d]

    ??:? runModuleUnitTests [0x42bf79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(index, value; lst) \n    {\n        if(index\
    \ % 2 == 1 && value % 2 == 0) \n        {\n            result += value;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(index,element; lst)\n    {\n        if(index %\
    \ 2 == 1 && element % 2 == 0)\n        {\n            sum += element;\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n \
    \   assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long total = 0;\n    bool odd = true;\n    foreach(i;lst)\n    {\n       \
    \ if (odd)\n        {\n            if (i%2 == 0)\n            {\n            \
    \    total += i;\n            }\n        }\n        odd = !odd;\n    }\n    return\
    \ total;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi6gx2fi6.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281a5]

    ??:? void tmpi6gx2fi6.__unittest_L29_C1() [0x427df0]

    ??:? void tmpi6gx2fi6.__modtest() [0x427f24]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1b3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b046]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430688]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430165]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b01d]

    ??:? runModuleUnitTests [0x42bf89]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   if (lst.length == 0L)\n    {\n        return 0L;\n    }\n    return map!\"\
    a % 2 == 0 ? a : 0\"(iota(lst.length)).sum() + (lst.sum - map!\"a % 2 == 0 ? a\
    \ : 0\"(lst).sum);\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5z06e1ip.d(18): Error: template instance `map!"a % 2 == 0 ? a :
    0"` template `map` is not defined

    /tmp/tmp5z06e1ip.d(18): Error: no property `sum` for type `long[]`

    /tmp/tmp5z06e1ip.d(18): Error: template instance `map!"a % 2 == 0 ? a : 0"` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5z06e1ip.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst[1..$]\n        .filter!(x => x % 2 == 0)\n        .sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf28eeb5h.d(15): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf28eeb5h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ long sum = 0;\n  foreach(i, j; lst) \n  {\n      if (j & 1 == 1)\n      {\n\
    \          continue;\n      }\n      sum += i;\n  }\n  return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprh4rx1pn.d(17): Error: `1 == 1` must be parenthesized when next
    to operator `&`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprh4rx1pn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ return lst.retro.indices.zip(lst.retro).filter!(a => a[0] & 1 && a[1] & 1).map!(a\
    \ => a[1]).sum;\n}\n/*\n    Examples:\n    >>> add1([4L, 2L, 6L, 7L])\n    2L\n\
    \    \n*/\nlong add1(long[] lst) \n{\n  return lst.retro.indices.zip(lst.retro).filter!(a\
    \ => a[0] & 1 && a[1] & 1).map!(a => a[1]).sum;\n}\n/*\nGiven a list of lowercase\
    \ words and a string S, add spaces in s to construct a sentence where each word\
    \ is a valid dictionary word. Return all such possible sentences.\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp47y8srvy.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47y8srvy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (size_t i = 0; i < lst.length; i += 2) \n    {\n  \
    \      sum += lst[i];\n    }\n    return sum;\n}\nlong add([long] lst) \n{\n \
    \   long sum = 0;\n    for (size_t i = 0; i < lst.length; i += 2) \n    {\n  \
    \      sum += lst[i];\n    }\n    return sum;\n}\nlong add(in long[] lst) \n{\n\
    \    long sum = 0;\n    for (size_t i = 0; i < lst.length; i += 2) \n    {\n \
    \       sum += lst[i];\n    }\n    return sum;\n}\nlong add(ref long[] lst) \n\
    {\n    long sum = 0;\n    for (size_t i = 0; i < lst.length; i += 2) \n    {\n\
    \        sum += lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp05i213d9.d(21): Error: basic type expected, not `[`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05i213d9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\"\n# Use std.math, std.typecons\n# Given\
    \ a non-empty array of integers lst. add the even elements that are at odd indices.\n\
    # Examples:\n# add([4L, 2L, 6L, 7L]) == 2L\nunittest\n{\n    alias candidate =\
    \ add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc5kejvlq.d(24): Error: unterminated string constant starting at
    /tmp/tmpc5kejvlq.d(24)

    /tmp/tmpc5kejvlq.d(24): Error: declaration expected, not `""`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5kejvlq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \  long value = 0;\n   foreach(i, element; lst)\n   {\n        if(i%2 != 0 &&\
    \ element%2 == 0)\n        {\n            value += element;\n        }\n   }\n\
    \   return value;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long oddSum = 0;\n    foreach(i, elem; lst)\n    {\n        if (i % 2 == 1\
    \ && (elem % 2 == 0))\n        {\n            oddSum += elem;\n        }\n   \
    \ }\n    return oddSum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\nlong\
    \ c=0;\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_plzhlsk.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_plzhlsk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if (i % 2 == 1 && e\
    \ % 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long x=0;\n    foreach(int i, inout long e; lst)\n    {\n        if (i % 2\
    \ == 1 && e % 2 == 0)\n        {\n            x+=e;\n        }\n    }\n    return\
    \ x;\n}\n/*\nGiven a non-empty array of integers lst. remove the odd elements\
    \ that are at even indices..\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1lmdnaxc.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1lmdnaxc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    for (int i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n\
    \    }\n    return result;\n}\n/*\nGiven a string s, return true if it is comprised\
    \ of unique characters, otherwise return false.\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcbofkrtl.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcbofkrtl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.addEvenOddIndex();\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp3vove6r.d(14): Error: no property `addEvenOddIndex` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp3vove6r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(int i, long elem; lst)\n    {\n        if (i %\
    \ 2 == 1 && elem % 2 == 0)\n        {\n            sum += elem;\n        }\n \
    \   }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    int j = 0;\n    foreach(int i; lst)\n    {\n      \
    \  if (i % 2 == 0 && j % 2 != 0)\n        {\n            result += i;\n      \
    \  }\n        j++;\n    }\n    return result;\n}\n/*\nGiven a list of integers\
    \ lst, find all the odd numbers that are not divisible by 3.\nunittest\n{\n  \
    \  alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6fo4_sje.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6fo4_sje.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   auto odds = lst.filter!(x => lst.indexOf(x) & 1)();\n    return odds.sum();\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp9fennz7.d(14): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp9fennz7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   // auto lst = [4L, 2L, 6L, 7L];\n    long sum = 0;\n    foreach( index, element;\
    \ lst)\n    {\n        if(index % 2 == 1 && element % 2 == 0)\n        {\n   \
    \         sum += element;\n        }\n    }\n    return sum;\n    /*\n    auto\
    \ lst = [4L, 2L, 6L, 7L];\n    long sum = 0;\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(i % 2 == 1 && lst[i] % 2 == 0)\n        {\n        \
    \    sum += lst[i];\n        }\n    }\n    return sum;\n    */\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   import std.algorithm;\n    return chain(lst)\n        .filter!(a => isOdd(a[1]))\n\
    \        .filter!(a => isEven(a[0]))\n        .sum!((a) => a[0]);\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpew0r9uqe.d(15): Error: undefined identifier `chain`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpew0r9uqe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ int i = 0;\n  long sum = 0;\n  while (i < lst.length)\n  {\n    if (i % 2 ==\
    \ 1)\n    {\n      sum += lst[i];\n    }\n    i += 1;\n  }\n  return sum;\n}\n\
    /*\nGiven two positive integers start and end, return a list of all the unique\
    \ \nprimes between start and end, inclusive.\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm0onya4o.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm0onya4o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long total = 0;\n    foreach(index, value; lst)\n    {\n      if(index % 2\
    \ != 0 && value % 2 == 0)\n      {\n        total += value;\n      }\n    }\n\
    \    return total;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(long elt; lst) \n    {\n        if(elt % 2 == 0\
    \ && cast(int)elt % 2 != 0)\n        {\n            sum += elt;\n        }\n \
    \   }\n    return sum;\n}\n/*\n    func f1(func func f, long a) {\n        return\
    \ f(a);\n    }\n    long g1(long a) {\n        return a * a;\n    }\n    long\
    \ f2(long a) {\n        return a * a * a;\n    }\n    Examples:\n    >>> f1(g1,\
    \ 5L)\n    25L\n    >>> f1(f2, 5L)\n    125L\n    \n*/\nlong f1(long delegate(long)\
    \ f, long a) \n{\n    return f(a);\n}\n/*\n    Examples:\n    >>> g1(2L)\n   \
    \ 4L\n    \n*/\nlong g1(long a) \n{\n    return a * a;\n}\n/*\n    Examples:\n\
    \    >>> f2(2L)\n    8L\n    \n*/\nlong f2(long a) \n{\n    return a * a * a;\n\
    }\n/*\nGiven two lists lst1 and lst2, create a new list. For each element of lst1,\
    \ find the value in lst2 that is closest to it.\nIf there are two values in lst2\
    \ that are equal distance from the element of lst1, pick the smallest one.\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8a2l_43t.d(65): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8a2l_43t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.fold!((a, b) => a + (isOdd(b) ? 0 : b))(0L);\n}\nunittest\n{\n\
    \    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpymi521wl.d(14): Error: no property `fold` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpymi521wl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(i, e; lst) \n    {\n        if((i % 2 == 1)\
    \ && (e % 2 == 0)) \n        {\n            result += e;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long l = 0;\n    for (long i = 0; i < lst.length; i++)\n    {\n        if\
    \ (i%2==1 && lst[i]%2==0)\n        {\n            l += lst[i];\n        }\n  \
    \  }\n    return l;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   int sum = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ ( i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n  \
    \      }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach( i, a; lst )\n    {\n        if( a % 2 == 0\
    \ && i % 2 != 0 )\n        {\n            result += a;\n        }\n    }\n   \
    \ return result;\n}\n/*\n    >>> add([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L])\n\
    \    6L\n    \n*/\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum=0;\n    foreach(int i; 0..lst.length)\n    {\n      if(i%2==1 &&\
    \ lst[i]%2==0)\n      {\n        sum+=lst[i];\n      }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rg9e_83.d(15): Error: cannot implicitly convert expression `lst.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rg9e_83.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum=0;\n    for(int i=0;i<lst.length;i++)\n    {\n        if(i%2!=0 &&\
    \ lst[i]%2==0)\n        {\n            sum+=lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(index, elem; lst)\n    {\n        if(elem %\
    \ 2 == 0 && index % 2 != 0)\n        {\n            result += elem;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = add;\n\n   \
    \ assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   int i;\n    long result = 0;\n    for (i = 0; i < lst.length; i++)\n    {\n\
    \        if ((lst[i] % 2 == 0) && (i % 2 != 0))\n        {\n            result\
    \ += lst[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(index, value; lst)\n    {\n        if(index % 2\
    \ == 1 && value % 2 == 0)\n        {\n            sum += value;\n        }\n \
    \   }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ return lst[1L..$].filter!(i => i % 2 == 0).reduce!((a, b) => a + b)(0L);\n}\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnk9ayjnx.d(14): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnk9ayjnx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.enumerate.filter!(a => a.index % 2 == 1 && a.value % 2 == 0).map!(a\
    \ => a.value).sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bu9h3ja.d(14): Error: no property `enumerate` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bu9h3ja.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n    {\n\
    \    long evens = 0;\n    foreach(ind, val; lst) \n        {\n        if(ind %\
    \ 2 == 1 && val % 2 == 0)\n            {\n            evens += val;\n        \
    \    }\n        }\n    return evens;\n    }\n/*\nGiven a list of integers lst\
    \ and a single integer k, add all the elements in lst that are greater than k.\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwbbcgj2d.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbbcgj2d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.enumerate.filter!(a => a.index % 2 == 1 && a.value % 2 == 0).sum!(b\
    \ => b.value)();\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1e9itr78.d(14): Error: no property `enumerate` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1e9itr78.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach( i, v; lst)\n    {\n        if ( i % 2 != 0)\n\
    \        {\n            if ( v % 2 == 0)\n            {\n                result\
    \ += v;\n            }\n        }\n    }\n    return result;\n}\n/*\nGiven a positive\
    \ integer n, and a positive integer start, return the sum of the numbers from\
    \ start to (start+n) using a while loop.\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe7auqmon.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7auqmon.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long res = 0L;\n    foreach(idx, val; lst) \n    {\n        if(idx % 2 ==\
    \ 1 && val % 2 == 0) \n        {\n            res += val;\n        }\n    }\n\
    \    return res;\n}\n/*\nDelete each element at a given index from a list lst.\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprl_ey83w.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprl_ey83w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst) \n    {\n        if(i % 2 == 1 && e\
    \ % 2 == 0) \n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\n/*\nSorting a tuple\nGiven a tuple of integers tpl, sort it by the sum of its\
    \ elements in ascending order.\nunittest\n{\n    alias candidate = add;\n\n  \
    \  assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovj4aqb5.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovj4aqb5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.filter!(x => (x % 2 == 0)).sum();\n}\n/*\nThis time no story, no\
    \ theory. The examples below show you how to write function accum:\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn8bzt8b0.d(16): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn8bzt8b0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long add = 0L;\n    long i = 0L;\n    while (i < lst.length) \n    {\n   \
    \     if (i % 2 == 1L)\n        {\n            add += lst[i];\n        }\n   \
    \     i++;\n    }\n    return add;\n}\n/*\nGiven a non-empty array of integers\
    \ lst, add all the values that are multiples of 5. \nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkxctcb3k.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkxctcb3k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long  x = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2==1 && e%2==0)\n\
    \            x+=e;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.filter!(a => a % 2 == 0 && lst.indexOf(a) % 2 != 0).sum;\n}\n/*\n\
    create a function which will take a string as an argument and return a list containing\
    \ all the words in the string.\ntest(\"test\").map!(a => a.toString()).\n    reduce!((a,\
    \ b) => a + b).length.assertEqual(10);\ntest(\"test\").map!(a => a.toString()).\n\
    \    reduce!((a, b) => a + b).assertEqual(\"test\");\ntest(\"test\").map!(a =>\
    \ a.toString()).reduce!((a, b) => a + b).\n    assertEqual(\"test\");\n*/\nstring[]\
    \ create(string s)\n{\n    auto r = new string[](s.split(\" \").length);\n   \
    \ foreach(a; s.split(\" \"))\n    {\n        r[s.split(\" \").indexOf(a)] = a;\n\
    \    }\n    return r;\n}\n/*\ngiven a string s and a number n\ncreate a function\
    \ which returns a string with n copies of the last n characters of the string\n\
    test(\"Hello\", 2).assertEqual(\"lololo\");\ntest(\"Hello\", 3).assertEqual(\"\
    lllllllll\");\ntest(\"Hello\", 1).assertEqual(\"o\");\ntest(\"Hello\", 0).assertEqual(\"\
    \");\ntest(\"ayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayayay\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppsfgq9wf.d(34): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppsfgq9wf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long s=0;\n    foreach(long i; lst)\n    {\n        if (i%2==0)\n        {\n\
    \            s=s+i;\n        }\n    }\n    return s;\n}\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1_85ofgx.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42818d]

    ??:? void tmp1_85ofgx.__unittest_L24_C1() [0x427ddc]

    ??:? void tmp1_85ofgx.__modtest() [0x427f10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c19b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b02e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301c1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430670]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43014d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b005]

    ??:? runModuleUnitTests [0x42bf71]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(i, element; lst) \n    {\n        if(i % 2L\
    \ != 0L && element % 2L == 0L) \n        {\n            result += element;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(index, value; lst)\n    {\n        if(index % 2\
    \ == 1 && value % 2 == 0)\n        {\n            sum += value;\n        }\n \
    \   }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2 == 1 && e%2 ==\
    \ 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n\
    /*\nGiven a non-empty array of integers lst, return the sum of all its elements.\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphwtzqvqz.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphwtzqvqz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ int n = lst.length;\n  return lst[i] for i in 0..n-1 if (i%2==0) if (lst[i]%2==0);\n\
    }\n/*\nGiven a non-empty array of integers lst, reverse only the even numbers\
    \ from the array.\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwbien_1g.d(15): Error: found `for` when expecting `;` following
    `return` statement

    /tmp/tmpwbien_1g.d(15): Error: found `..` when expecting `;` following statement

    /tmp/tmpwbien_1g.d(15): Error: found `if` when expecting `;` following statement

    /tmp/tmpwbien_1g.d(15): Error: found `if` when expecting `;` following statement

    /tmp/tmpwbien_1g.d(17): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbien_1g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   assert(lst.length > 0L);\n    long rv = 0L;\n    foreach (idx, num; lst) \n\
    \    {\n        if (idx & 1L == 1L && num & 1L == 0L)\n        {\n           \
    \ rv += num;\n        }\n    }\n    return rv;\n}\n/*\nGiven an array of ints,\
    \ set all the odd elements to 1 and all the even ones to 0.\nunittest\n{\n   \
    \ alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwxzteszj.d(18): Error: `1L == 1L` must be parenthesized when next
    to operator `&`

    /tmp/tmpwxzteszj.d(18): Error: `1L == 0L` must be parenthesized when next to operator
    `&`

    /tmp/tmpwxzteszj.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwxzteszj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   /*\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n       \
    \ if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n    */\n    int sum = 0;\n    auto a = lst.filter!(x\
    \ => x % 2 == 0);\n    for (int i = 0; i < a.length; i++) {\n        if (i % 2\
    \ == 1) {\n            sum += a[i];\n        }\n    }\n    return sum;\n}\n/*\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo4kyv96a.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4kyv96a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(idx, element; lst) \n    {\n        if(element\
    \ % 2 == 0 && idx % 2 != 0) \n        {\n            result += element;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst) {\n        if (e % 2 == 0 && i % 2 !=\
    \ 0) {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (long i = 0; i < lst.length; i++)\n    {\n        if\
    \ (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(int i, long l; lst) \n    {\n        if (i % 2\
    \ == 1 && l % 2 == 0) \n        {\n            sum += l;\n        }\n    }\n \
    \   return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long x = 0;\n    bool even = false;\n    foreach(l; lst)\n    {\n        if(l\
    \ % 2 == 0 && even)\n        {\n            x = x + l;\n        }\n        even\
    \ = !even;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ long sum = 0;\n  foreach(idx, l; lst)\n  {\n    if(idx%2 == 1 && l%2 == 0)\n\
    \    {\n      sum += l;\n    }\n  }\n  return sum;\n}\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ long sum = 0;\n  foreach(i, e; lst)\n    if(i % 2 == 1 && e % 2 == 0)\n    \
    \  sum += e;\n  return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n  \
    \  assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n  return\
    \ lst.zip!((x, i) => ((x.isEven) && (i.isOdd)) ? x : 0L)\n  .reduce!((a, b) =>\
    \ a + b)();\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl8ph_e_s.d(13): Error: semicolon expected following function declaration

    /tmp/tmpl8ph_e_s.d(14): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpl8ph_e_s.d(14): Error: no identifier for declarator `lst.zip!((x, i) =>
    x.isEven && i.isOdd ? x : 0L).reduce!((a, b) => a + b)()`

    /tmp/tmpl8ph_e_s.d(15): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl8ph_e_s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n\t\
    long ret = 0;\n\tfor (long idx = 0; idx < lst.length; idx++) \n\t{\n\t\tif (lst[idx]\
    \ % 2 == 0 && idx % 2 == 1)\n\t\t{\n\t\t\tret += lst[idx];\n\t\t}\n\t}\n\treturn\
    \ ret;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(int i, long e; lst)\n    {\n        if (i%2 !=\
    \ 0 && e%2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (isEven(i)\
    \ && isEven(lst[i])) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqm9ryuhm.d(16): Error: undefined identifier `isEven`

    /tmp/tmpqm9ryuhm.d(16): Error: undefined identifier `isEven`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqm9ryuhm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ return lst.retro.filter!(a => a % 2 == 0).sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzxr_kw4h.d(14): Error: no property `retro` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzxr_kw4h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long accumulator = 0L;\n    for (size_t i = 0; i < lst.length; i+=2)\n   \
    \ {\n        accumulator += lst[i];\n    }\n    return accumulator;\n}\n/*\nCreate\
    \ a generic function, fun, that takes an argument and returns the absolute value\
    \ of that argument.\n    Example:\n    >>> fun(-5)\n    5\n*/\nT fun(T)(T x)\n\
    {\n    return abs(x);\n}\n/*\nCreate a function that takes a string, str, and\
    \ returns the string repeated num times.\n    Example:\n    >>> repeat(\"foo\"\
    , 3)\n    \"foofoofoo\"\n*/\nstring repeat(string str, int num)\n{\n    return\
    \ str.dup.joiner(num).array.joiner.toString;\n}\n/*\nCreate a function that takes\
    \ a string, str, and returns the number of occurrences of each letter in the string.\n\
    \    Example:\n    >>> freq_counter(\"aaaaabbbbbbbccccc\")\n    [\"a\": 5, \"\
    b\": 7, \"c\": 5]\n*/\nimmutable int[] freq_counter(string str)\n{\n    immutable\
    \ int[] result = [];\n    foreach(c; str)\n    {\n        immutable size_t index\
    \ = c.toString.indexOf(c);\n        if (result.length == 0)\n        {\n     \
    \       result = [1];\n        }\n        else if (index == 0)\n        {\n  \
    \          result = [result[0] + 1];\n        }\n        else\n        {\n   \
    \         result ~= 1;\n        }\n    }\n    return result;\n}\n/*\nCreate a\
    \ function that takes two strings, str1 and str2, and returns the number of occurrences\
    \ of str2 in str1.\n    Example:\n    >>> check_occurrences(\"aaa\", \"aa\")\n\
    \    2\n*/\nimmutable int check_occurrences(string str1, string str2)\n{\n   \
    \ immutable int[] result = [];\n    foreach(c; str1)\n    {\n        immutable\
    \ size_t index = c.toString.indexOf(c);\n        if (result.length == 0)\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxw5peufq.d(81): Error: found `unittest` instead of statement

    /tmp/tmpxw5peufq.d(90): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxw5peufq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return 0;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps5heyy_w.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x428115]

    ??:? void tmps5heyy_w.__unittest_L16_C1() [0x427d60]

    ??:? void tmps5heyy_w.__modtest() [0x427e94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c123]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afb6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430149]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4300d5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af8d]

    ??:? runModuleUnitTests [0x42bef9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428564]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst) {\n        if(e % 2 == 0 && i % 2 !=\
    \ 0) {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\nGiven\
    \ a list of the form [[1, a], [2, b], [3, c], [4, d], ...]\nconvert it to the\
    \ form [[1, 2, 3, 4, ...], [a, b, c, d, ...]]\n*/\nlong[][] invert(long[][] lst)\
    \ \n{\n    long[][] res = new long[2][];\n    foreach(e; lst) {\n        res[0]\
    \ ~= e[0];\n        res[1] ~= e[1];\n    }\n    return res;\n}\n/*\nGiven a positive\
    \ integer n and a list of the form [[1, a], [2, b], [3, c], [4, d], ...]\nfind\
    \ the nth fibonacci number.\n*/\nlong findFib(long n, long[][] lst) \n{\n    long[][]\
    \ res = invert(lst);\n    for(long i = res[0].length; i < n; i++) {\n        res[0]\
    \ ~= i + 1;\n        res[1] ~= res[1][$ - 1] + res[1][$ - 2];\n    }\n    return\
    \ res[1][$ - 1];\n}\n/*\nGiven an array of integers, return True if the array\
    \ contains a 3 next to a 3 somewhere.\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc6s_vf9j.d(48): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc6s_vf9j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return 0;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps5heyy_w.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x428115]

    ??:? void tmps5heyy_w.__unittest_L16_C1() [0x427d60]

    ??:? void tmps5heyy_w.__modtest() [0x427e94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c123]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afb6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430149]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4300d5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af8d]

    ??:? runModuleUnitTests [0x42bef9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428564]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   alias index_value = Tuple!(int, long);\n    auto pair = zip(iota(lst.length),\
    \ lst);\n    auto odd_even = pair.filter!((a) => a[0] % 2 == 1 && a[1] % 2 ==\
    \ 0)();\n    return odd_even.map!(v => v[1]).reduce!((a,b) => a + b)();\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdryi5lgv.d(15): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdryi5lgv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return 0;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps5heyy_w.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x428115]

    ??:? void tmps5heyy_w.__unittest_L16_C1() [0x427d60]

    ??:? void tmps5heyy_w.__modtest() [0x427e94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c123]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afb6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430149]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4300d5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af8d]

    ??:? runModuleUnitTests [0x42bef9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428564]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum=0;\n    for(long i=0;i<lst.length;i++)\n    {\n        if(lst[i]%2==0\
    \ && i%2!=0)\n        {\n            sum+=lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long ret = 0L;\n    foreach(i, e; lst) \n    {\n        ret += (i % 2 == 0\
    \ && e % 2 == 0) ? e : 0L;\n    }\n    return ret;\n}\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdpevsogh.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmpdpevsogh.__unittest_L21_C1() [0x427de4]

    ??:? void tmpdpevsogh.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b036]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430678]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430155]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b00d]

    ??:? runModuleUnitTests [0x42bf79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(int i, elem; lst)\n    {\n        if(i % 2 == 1\
    \ && elem % 2 == 0)\n        {\n            sum += elem;\n        }\n    }\n \
    \   return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   \n    long r = 0L;\n    foreach(i,e;enumerate(lst)){\n        if(i % 2 ==\
    \ 1 && e % 2 == 0){\n            r += e;\n        }\n    }\n    return r;\n}\n\
    /*\n    Given a non-empty array of integers lst. add the even elements that are\
    \ at odd indices.\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxhzs0p70.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxhzs0p70.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   auto result = reduce!(a=>a[0]+a[1])(zip(filter!((e, i) => e & 1 == 0 && i\
    \ & 1 == 1)(lst), iota(0, lst.length)));\n    return result[0];\n}\n/*\nGiven\
    \ a list lst, multiply each element by 4.\nunittest\n{\n    alias candidate =\
    \ add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsbpv08x2.d(14): Error: `1 == 0` must be parenthesized when next
    to operator `&`

    /tmp/tmpsbpv08x2.d(14): Error: `1 == 1` must be parenthesized when next to operator
    `&`

    /tmp/tmpsbpv08x2.d(17): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsbpv08x2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result=0;\n    for(int i=0;i<lst.length;i++)\n    {\n        if(lst[i]%2==0\
    \ && i%2!=0)\n        {\n            result+=lst[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\nGiven a linked list, remove all consecutive nodes that sum to\
    \ zero. Print out the remaining nodes.\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8tw60e17.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8tw60e17.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long total = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n       \
    \ if (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            total += lst[i];\n\
    \        }\n    }\n    return total;\n}\n/*\n# User-friendly version\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ggwlwtu.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ggwlwtu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst[1..].filter!(a => a % 2 == 0).sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps3xvme2b.d(14): Error: expression expected, not `]`

    /tmp/tmps3xvme2b.d(14): Error: found `;` when expecting `,`

    /tmp/tmps3xvme2b.d(15): Error: expression expected, not `}`

    /tmp/tmps3xvme2b.d(16): Error: found `unittest` when expecting `,`

    /tmp/tmps3xvme2b.d(25): Error: found `void` when expecting `,`

    /tmp/tmps3xvme2b.d(25): Error: found `{` when expecting `,`

    /tmp/tmps3xvme2b.d(25): Error: expression expected, not `}`

    /tmp/tmps3xvme2b.d(25): Error: found `End of File` when expecting `,`

    /tmp/tmps3xvme2b.d(25): Error: found `End of File` when expecting `]`

    /tmp/tmps3xvme2b.d(25): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmps3xvme2b.d(25): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps3xvme2b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i += 2) \n    {\n     \
    \   if (i % 2 == 0) \n        {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphq9iw1t_.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42818d]

    ??:? void tmphq9iw1t_.__unittest_L24_C1() [0x427dd8]

    ??:? void tmphq9iw1t_.__modtest() [0x427f0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c20f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430235]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b079]

    ??:? runModuleUnitTests [0x42bfe5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428650]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n    =>\
    \ lst.filter!(x => x % 2 == 0).fold!((x, y) => x + y);\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4tac1snu.d(13): Error: semicolon expected following function declaration

    /tmp/tmp4tac1snu.d(13): Error: declaration expected, not `=>`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4tac1snu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n    {\n\
    \    long sum=0;\n    for(int i=0;i<lst.length;i++)\n        {\n        if(i%2!=0)\n\
    \            {\n            if(lst[i]%2==0)\n                {\n             \
    \   sum+=lst[i];\n            }\n        }\n    }\n    return sum;\n}\n/*\na=[[1,2,3,4],[2,3,4,5],[3,4,5,6],[4,5,6,7]]\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0gimdxo.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0gimdxo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   auto accum = 0L;\n    auto st = 0L;\n    auto en = lst.length;\n    auto mult\
    \ = 1L;\n    for(auto i = st; i < en; i += 2) \n    {\n        if(lst[i] % 2 ==\
    \ 0) \n        {\n            accum += lst[i];\n        }\n    }\n    return accum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxe2a5ceh.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281ad]

    ??:? void tmpxe2a5ceh.__unittest_L27_C1() [0x427dfc]

    ??:? void tmpxe2a5ceh.__modtest() [0x427f30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c22f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430255]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430704]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b099]

    ??:? runModuleUnitTests [0x42c005]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428670]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiuc62jq7.d(269): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiuc62jq7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(ix, val; lst) \n    {\n        if (ix % 2 ==\
    \ 1 && val % 2 == 0)\n        {\n            result += val;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return map!(a => a * (a & 1))(lst).sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzasvl_gz.d(14): Error: template instance `map!((a) => a * (a &
    1))` template `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzasvl_gz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(i,e; lst) \n    {\n        if(i % 2 == 1 &&\
    \ e % 2 == 0)\n        {\n            result += e;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   import std.range;\n    static if (is(typeof(lst[0]) == long))\n    {\n   \
    \     return lst.zip(0L..lst.length).filter!(a => a[1] % 2 == 1).map!(a => a[0]).filter!(a\
    \ => a % 2 == 0).sum;\n    }\n    else static if (is(typeof(lst[0]) == double))\n\
    \    {\n        return lst.zip(0L..lst.length).filter!(a => a[1] % 2 == 1).map!(a\
    \ => a[0]).filter!(a => a % 2 == 0).sum;\n    }\n    else\n    {\n        return\
    \ 0;\n    }\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwazt3tp3.d(17): Error: found `..` when expecting `,`

    /tmp/tmpwazt3tp3.d(21): Error: found `..` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwazt3tp3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.retro .filter!((a,i) => a % 2 == 0 && i % 2 == 1) .sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3pi2hhb3.d(14): Error: no property `retro` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3pi2hhb3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long ret=0;\n    if (lst.length == 0) \n        return ret;\n    if (lst.length\
    \ == 1) \n        return lst[0];\n    foreach (idx, elem; lst) \n    {\n     \
    \   if (elem % 2 == 0 && idx % 2 != 0) \n            ret += elem;\n    }\n   \
    \ return ret;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return 0;\n}\n/*\nGiven a non-empty array of integers lst. add the odd elements\
    \ that are at even indices..\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0nwzu12e.d(16): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0nwzu12e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   int index = 0;\n    long evenSum = 0;\n    foreach(num; lst)\n    {\n    \
    \    if(index % 2 == 1 && num % 2 == 0)\n        {\n            evenSum += num;\n\
    \        }\n        index++;\n    }\n    return evenSum;\n}\nunittest\n{\n   \
    \ alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ long odd_sum = 0;\n  foreach(i, x; lst) \n  {\n    if (x % 2 == 0 && i % 2 !=\
    \ 0) \n    {\n      odd_sum += x;\n    }\n  }\n  return odd_sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n\t\
    long sum = 0;\n\tint pos = 0;\n\tforeach(num; lst)\n\t{\n\t\tif(pos % 2 == 1 &&\
    \ num % 2 == 0)\n\t\t{\n\t\t\tsum += num;\n\t\t}\n\t\tpos++;\n\t}\n\treturn sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ long res = 0L;\n  for (int i = 0; i < lst.length; i++)\n  {\n    if (i % 2 ==\
    \ 1 && lst[i] % 2 == 0)\n    {\n      res += lst[i];\n    }\n  }\n  return res;\n\
    }\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bbqj3ub.d(24): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bbqj3ub.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(index, elem; lst)\n    {\n        if(elem % 2 ==\
    \ 0 && index % 2 != 0)\n        {\n            sum += elem;\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ return lst.retro.filter!(a => a % 2 == 0)().fold!((acc, cur) => acc + cur)();\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__fwh0ar.d(14): Error: no property `retro` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__fwh0ar.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.filter!(a => a % 2 == 0)().sum();\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq5m6iu8o.d(14): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq5m6iu8o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long n = 0L;\n    foreach(i, e; lst) \n    {\n        if (i % 2 == 1) \n \
    \       {\n            n += e;\n        }\n    }\n    return n;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp4pqjagv.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x428185]

    ??:? void tmpp4pqjagv.__unittest_L24_C1() [0x427e38]

    ??:? void tmpp4pqjagv.__modtest() [0x427f08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c193]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b026]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430668]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430145]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42affd]

    ??:? runModuleUnitTests [0x42bf69]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(idx, e; lst) {\n        if (idx % 2 == 1 && e %\
    \ 2 == 0) {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.filter!(x => x % 2 == 0).sum!((x, y) => x + y)();\n}\n```\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb8dg3u1c.d(16): Error: declaration expected, not `""`

    /tmp/tmpb8dg3u1c.d(16): Error: unterminated string constant starting at /tmp/tmpb8dg3u1c.d(16)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb8dg3u1c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ return lst.length == 0 ? 0 : lst[0] % 2 == 0 ? lst[0] + add(lst[1 .. $]) : add(lst[1\
    \ .. $]);\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_atsclw2.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281f5]

    ??:? void tmp_atsclw2.__unittest_L16_C1() [0x427e44]

    ??:? void tmp_atsclw2.__modtest() [0x427f78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c277]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b10a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43029d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43074c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430229]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e1]

    ??:? runModuleUnitTests [0x42c04d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i += 2)\n    {\n      \
    \  sum += i % 2 == 0 ? lst[i] : 0;\n    }\n    return sum;\n}\n/*\nCheck if a\
    \ string is a palindrome. Palindromes are strings that read the same from the\
    \ left or right, for example madam or 0110.\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2qrlbs4j.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2qrlbs4j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n/*\nGiven a non-empty array of integers lst.\
    \ add the even elements that are at odd indices..\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwnzpzy_t.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwnzpzy_t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   if (lst.length <= 0)\n    {\n        return 0;\n    }\n    long sum = 0;\n\
    \    for (int i = 0; i < lst.length; i++)\n    {\n        if (i % 2 == 1 && lst[i]\
    \ % 2 == 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164330
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n    {\n\
    \        long odd_sum = 0;\n        foreach(i, elem; lst)\n        {\n       \
    \     if(i % 2 == 1 && isEven(elem))\n            {\n                odd_sum +=\
    \ elem;\n            }\n        }\n        return odd_sum;\n    }\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6wq0tupq.d(17): Error: undefined identifier `isEven`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6wq0tupq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.retro.filter!((a, i) => a % 2 == 0 && i % 2 == 1).sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfflu0vdd.d(14): Error: no property `retro` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfflu0vdd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   auto a = lst.dup;\n    a.remove(2..$);\n    a.remove(0..1);\n    return a.sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9ks1efxg.d(15): Error: found `..` when expecting `,`

    /tmp/tmp9ks1efxg.d(15): Error: `$` is valid only inside [] of index or slice

    /tmp/tmp9ks1efxg.d(16): Error: found `..` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ks1efxg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long res = 0L;\n    foreach(i, ind; lst) \n    {\n        if(i % 2 == 0)\n\
    \            res += ind;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2vxja3f1.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428185]

    ??:? void tmp2vxja3f1.__unittest_L22_C1() [0x427dd0]

    ??:? void tmp2vxja3f1.__modtest() [0x427f04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c193]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b026]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430668]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430145]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42affd]

    ??:? runModuleUnitTests [0x42bf69]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164330
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long c=0;\n    foreach(long i, long j; iota(lst.length).zip(lst))\n    {\n\
    \        if(i%2!=0 && j%2==0)\n        {\n            c+=j;\n        }\n    }\n\
    \    return c;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpryhkdjv4.d(15): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpryhkdjv4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ return reduce!q{a + b}(map!q{a}(filter!q{a % 2 == 0}(filter!q{(index % 2) ==\
    \ 1}(zip(lst, iota(lst.length))))));\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqnem6esv.d(14): Error: template instance `reduce!"a + b"` template
    `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqnem6esv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, elem; lst)\n    {\n        if(i%2==1)\n    \
    \    {\n            if(elem%2==0)\n            {\n                sum += elem;\n\
    \            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164330
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   int s = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2\
    \ == 1 && lst[i] % 2 == 0) {\n            s += lst[i];\n        }\n    }\n   \
    \ return s;\n}\n/*\nIn this kata you have to correctly return who is the \"survivor\"\
    , ie: the last element of a Josephus permutation.\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcel7f5d6.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcel7f5d6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ long i = 0;\n  long sum = 0;\n  while (i < lst.length) \n  {\n    if (i % 2\
    \ == 1) \n    {\n      sum += lst[i];\n    }\n    i++;\n  }\n  return sum;\n}\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu8l80t22.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428185]

    ??:? void tmpu8l80t22.__unittest_L26_C1() [0x427e38]

    ??:? void tmpu8l80t22.__modtest() [0x427f08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c207]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b09a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43022d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b071]

    ??:? runModuleUnitTests [0x42bfdd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428648]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164330
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long ret = 0L;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            ret += lst[i];\n   \
    \     }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164330
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long ret = 0L;\n    for (long index = 0L; index < lst.length; index += 1L)\
    \ {\n        if ((((index % 2L) == 0L) && ((lst[index] % 2L) == 0L))) {\n    \
    \        ret += lst[index];\n        }\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9qcbgewd.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281cd]

    ??:? void tmp9qcbgewd.__unittest_L22_C1() [0x427e1c]

    ??:? void tmp9qcbgewd.__modtest() [0x427f50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c24f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0e2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430275]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430724]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430201]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b9]

    ??:? runModuleUnitTests [0x42c025]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428690]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164330
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   if (lst.empty)\n    {\n        return 0;\n    }\n    auto evenOdd = zip(iota(lst.length),\
    \ lst);\n    return evenOdd.map!(a => a[0] % 2 == 0 ? a[1] : 0).reduce!((a, b)\
    \ => a + b)();\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprh2i5lsl.d(14): Error: no property `empty` for type `long[]`

    /tmp/tmprh2i5lsl.d(18): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprh2i5lsl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i += 2)\n    {\n      \
    \  if (lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n        }\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxz2qwqkl.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281b5]

    ??:? void tmpxz2qwqkl.__unittest_L24_C1() [0x427e00]

    ??:? void tmpxz2qwqkl.__modtest() [0x427f34]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c237]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0ca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43025d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43070c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a1]

    ??:? runModuleUnitTests [0x42c00d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428678]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164330
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    int odd = 1;\n    foreach(int elem; lst)\n    {\n \
    \       if(odd % 2 == 1 && elem % 2 == 0)\n        {\n            result += elem;\n\
    \        }\n        odd++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprjmrlvkj.d(16): Error: cannot implicitly convert expression `__r73[__key74]`
    of type `long` to `int`

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(i, n; lst)\n    {\n        if(i % 2 == 1 &&\
    \ n % 2 == 0)\n        {\n            result += n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164330
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \  if (lst.length == 0) \n   {\n      return 0;\n   }\n   else \n   {\n      return\
    \ (lst[0] % 2 == 0 ? lst[0] : 0) + add(lst[1 .. $]);\n   }\n}\nunittest\n{\n \
    \   alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5drdsy_1.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281c5]

    ??:? void tmp5drdsy_1.__unittest_L23_C1() [0x427e14]

    ??:? void tmp5drdsy_1.__modtest() [0x427f48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c247]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43026d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43071c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b1]

    ??:? runModuleUnitTests [0x42c01d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428688]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164330
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt6iiamt8.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6iiamt8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   \n    long sum = 0;\n    for (long i = 0; i < lst.length; i++) {\n       \
    \ if (i%2 != 0 && lst[i]%2 == 0)\n            sum += lst[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn a new array where each element is the mirror image of the\
    \ original.\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt5fw4y2z.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt5fw4y2z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ long sum=0;\n  int n = lst.length;\n  for(int i=0;i<n;i++)\n  {\n    if(i%2==1\
    \ && lst[i]%2==0)\n    {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxsc9lnyh.d(15): Error: cannot implicitly convert expression `lst.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxsc9lnyh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long cnt = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ (lst[i] % 2 == 0 && i % 2 != 0)\n        {\n            cnt += lst[i];\n   \
    \     }\n    }\n    return cnt;\n}\n/*\nGiven a non-empty array of integers lst.\
    \ add the odd elements that are at even indices..\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk7iwpf16.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7iwpf16.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\nlong\
    \ ret = 0L;\nforeach (k, v; lst)\n{\n    if (k % 2)\n    {\n        ret += v;\n\
    \    }\n}\nreturn ret;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmploxng1jh.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x428185]

    ??:? void tmploxng1jh.__unittest_L24_C1() [0x427e34]

    ??:? void tmploxng1jh.__modtest() [0x427f04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c193]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b026]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430668]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430145]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42affd]

    ??:? runModuleUnitTests [0x42bf69]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164330
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(idx, val; lst) {\n        if((idx % 2 == 1)\
    \ && (val % 2 == 0)) result += val;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164330
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   return lst.filter((a,i) => (a%2) == 0 && i%2 != 0).reduce!((a,b) => a+b)();\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqpxkqkny.d(14): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpxkqkny.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164330
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   // Write your code here.\n    int sum = 0;\n    foreach(i, v; lst)\n    {\n\
    \        if (v % 2 == 0 && i % 2 != 0)\n        {\n            sum += v;\n   \
    \     }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164330
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(ind, val; lst)\n    {\n        if (ind % 2\
    \ != 0)\n        {\n            if (val % 2 == 0)\n            {\n           \
    \     result += val;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164330
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long s = 0;\n    int i = 0;\n    foreach(n; lst)\n    {\n        if(i % 2\
    \ == 1 && n % 2 == 0)\n        {\n            s += n;\n        }\n        i++;\n\
    \    }\n    return s;\n}\n \n/*\nGiven a non-empty array of integers lst. add\
    \ the even elements that are at odd indices..\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpus4mx4f0.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpus4mx4f0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \ long i;\n  long r = 0L;\n  long sz = lst.length;\n  foreach (i; 0L..sz) \n \
    \ {\n    if ((i % 2L) != 0L) \n    {\n      r += lst[i];\n    }\n  }\n  return\
    \ r;\n}\n/*\n    Examples:\n    >>> add([4L, 2L, 6L, 7L])\n    2L\n*/\nlong add(long[]\
    \ lst) \n{\n  long i;\n  long r = 0L;\n  long sz = lst.length;\n  foreach (i;\
    \ 0L..sz) \n  {\n    if ((i % 2L) != 0L) \n    {\n      r += lst[i];\n    }\n\
    \  }\n  return r;\n}\n/*\n    Examples:\n    >>> add([4L, 2L, 6L, 7L])\n    2L\n\
    */\nlong add(long[] lst) \n{\n  long i;\n  long r = 0L;\n  long sz = lst.length;\n\
    \  foreach (i; 0L..sz) \n  {\n    if ((i % 2L) != 0L) \n    {\n      r += lst[i];\n\
    \    }\n  }\n  return r;\n}\n/*\n    Examples:\n    >>> add([4L, 2L, 6L, 7L])\n\
    \    2L\n*/\nlong add(long[] lst) \n{\n  long i;\n  long r = 0L;\n  long sz =\
    \ lst.length;\n  foreach (i; 0L..sz) \n  {\n    if ((i % 2L) != 0L) \n    {\n\
    \      r += lst[i];\n    }\n  }\n  return r;\n}\n/*\n    Examples:\n    >>> add([4L,\
    \ 2L, 6L, 7L])\n    2L\n*/\nlong add(long[] lst) \n{\n  long i;\n  long r = 0L;\n\
    \  long sz = lst.length;\n \nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptm42_7rm.d(94): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptm42_7rm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
