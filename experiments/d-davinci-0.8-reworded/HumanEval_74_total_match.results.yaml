language: d
name: HumanEval_74_total_match
results:
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int result = 0;\n    foreach(element; lst1)\n    {\n        result\
    \ += element.length;\n    }\n    int result2 = 0;\n    foreach(element; lst2)\n\
    \    {\n        result2 += element.length;\n    }\n    if(result < result2) return\
    \ lst1;\n    else if(result > result2) return lst2;\n    else return lst1;\n}\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{ \n    int l1 = 0;\n    foreach(i; lst1)\n    {\n        l1 += i.length;\n\
    \    }\n    int l2 = 0;\n    foreach(i; lst2)\n    {\n        l2 += i.length;\n\
    \    }\n    if(l1 > l2)\n    {\n        return lst2;\n    }\n    else\n    {\n\
    \        return lst1;\n    }\n    \n    \n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1Total = 0;\n    foreach(string s; lst1)\n    {\n    \
    \    lst1Total += s.length;\n    }\n    int lst2Total = 0;\n    foreach(string\
    \ s; lst2)\n    {\n        lst2Total += s.length;\n    }\n    if(lst1Total ==\
    \ lst2Total)\n    {\n        return lst1;\n    }\n    else if(lst1Total < lst2Total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    auto rng1 = lst1.length;\n    auto rng2 = lst2.length;\n    auto\
    \ sz1 = 0;\n    auto sz2 = 0;\n    if (rng1 == 0 && rng2 == 0)\n    {\n      \
    \  return [];\n    }\n    else\n    {\n        if (rng1 == 0)\n        {\n   \
    \         return lst2;\n        }\n        else if (rng2 == 0)\n        {\n  \
    \          return lst1;\n        }\n        else\n        {\n            for (auto\
    \ i = 0; i < rng1; i++)\n            {\n                sz1 += lst1[i].length;\n\
    \            }\n            for (auto i = 0; i < rng2; i++)\n            {\n \
    \               sz2 += lst2[i].length;\n            }\n            if (sz1 < sz2)\n\
    \            {\n                return lst1;\n            }\n            else\
    \ if (sz1 > sz2)\n            {\n                return lst2;\n            }\n\
    \            else\n            {\n                return lst1;\n            }\n\
    \        }\n    }\n}\n/*\n    Write a function that accepts two arrays of numbers\
    \ and returns the array \n    that has min and max numbers in the array less than\
    \ the other array.\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe5alsojo.d(68): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5alsojo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(!lst1.length) return lst1;\n    if(!lst2.length) return lst2;\n\
    \    auto len1 = lst1.map!(x => x.length).reduce!(a, b => a + b);\n    auto len2\
    \ = lst2.map!(x => x.length).reduce!(a, b => a + b);\n    return len1 < len2 ?\
    \ lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdegjjlos.d(27): Error: no property `map` for type `string[]`

    /tmp/tmpdegjjlos.d(28): Error: no property `map` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdegjjlos.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n  // Your code here.\n  int lst1_total = 0;\n  foreach(s; lst1)\n\
    \    lst1_total += s.length;\n  int lst2_total = 0;\n  foreach(s; lst2)\n    lst2_total\
    \ += s.length;\n  return (lst1_total < lst2_total) ? lst1 : lst2;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3bsop7ub.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp3bsop7ub.__unittest_L34_C1() [0x428468]

    ??:? void tmp3bsop7ub.__modtest() [0x428748]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    //write the code here\n    return lst1;\n}\n// ----- end of user\
    \ code -----\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeeth2p7g.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293e5]

    ??:? void tmpeeth2p7g.__unittest_L29_C1() [0x427d63]

    ??:? void tmpeeth2p7g.__modtest() [0x42864c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcbf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42913e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab6d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42abfc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42aaf9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429115]

    ??:? runModuleUnitTests [0x42da95]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429834]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return new\
    \ string[0];\n    \n    int lst1_total = 0;\n    int lst2_total = 0;\n    \n \
    \   foreach (str; lst1)\n        lst1_total += str.length;\n    \n    foreach\
    \ (str; lst2)\n        lst2_total += str.length;\n    \n    if (lst1_total ==\
    \ lst2_total)\n        return lst1;\n    else if (lst1_total < lst2_total)\n \
    \       return lst1;\n    else\n        return lst2;\n}\n/*\n    Write a function\
    \ that accepts two arrays of numbers, and returns the array \n    with the largest\
    \ sum of numbers.\n    if the two arrays have the same sum, return the first array.\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj6t0bf4n.d(44): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj6t0bf4n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n\tif (lst1.length == 0 && lst2.length == 0) return lst1;\n\tint count1\
    \ = 0;\n\tforeach (string st1; lst1) count1 += st1.length;\n\tint count2 = 0;\n\
    \tforeach (string st2; lst2) count2 += st2.length;\n\treturn (count1 < count2)\
    \ ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp96fa9fw6.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294fd]

    ??:? void tmp96fa9fw6.__unittest_L32_C1() [0x428488]

    ??:? void tmp96fa9fw6.__modtest() [0x428768]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddd7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429256]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42922d]

    ??:? runModuleUnitTests [0x42dbad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42994c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length == 0) \n    {\n        return lst1;\n    } \n\
    \    else if(lst2.length == 0) \n    {\n        return lst2;\n    } \n    else\
    \ if(lst1.length == lst2.length) \n    {\n        return lst1;\n    } \n    else\
    \ if(lst1.length > lst2.length) \n    {\n        return lst2;\n    } \n    else\
    \ \n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppvc7prj8.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x42944d]

    ??:? void tmppvc7prj8.__unittest_L46_C1() [0x427dcb]

    ??:? void tmppvc7prj8.__modtest() [0x4286b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd27]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4291a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42abd5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ac64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ab61]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42917d]

    ??:? runModuleUnitTests [0x42dafd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42989c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(x; lst1)\n    {\n\
    \        sum1 += x.length;\n    }\n    foreach(x; lst2)\n    {\n        sum2 +=\
    \ x.length;\n    }\n    if(sum1 < sum2)\n    {\n        return lst1;\n    }\n\
    \    else if(sum1 > sum2)\n    {\n        return lst2;\n    }\n    else\n    {\n\
    \        return lst1;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length > lst2.length)\n        return lst2;\n    else\
    \ if (lst1.length < lst2.length)\n        return lst1;\n    else if (lst1.length\
    \ == lst2.length)\n        return lst1;\n    else\n        return null;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx7yaugd7.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429415]

    ??:? void tmpx7yaugd7.__unittest_L34_C1() [0x427d93]

    ??:? void tmpx7yaugd7.__modtest() [0x42867c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42916e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab9d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ac2c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ab29]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429145]

    ??:? runModuleUnitTests [0x42dac5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429864]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int num1 = 0;\n    int num2 = 0;\n    foreach(element; lst1)\n\
    \    {\n        num1 += element.length;\n    }\n    foreach(element; lst2)\n \
    \   {\n        num2 += element.length;\n    }\n    return num1 < num2 ? lst1 :\
    \ lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8xodxoi3.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmp8xodxoi3.__unittest_L37_C1() [0x428460]

    ??:? void tmp8xodxoi3.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    string[] result;\n    if (lst1.length == 0) return lst1;\n  \
    \  if (lst2.length == 0) return lst2;\n    int tot1 = 0;\n    int tot2 = 0;\n\
    \    foreach (str; lst1) {\n        tot1 += str.length;\n    }\n    foreach (str;\
    \ lst2) {\n        tot2 += str.length;\n    }\n    if (tot1 > tot2) {\n      \
    \  result = lst2;\n    } else {\n        result = lst1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length == 0 && lst2.length == 0) return lst1;\n    int\
    \ lst1Length = 0;\n    int lst2Length = 0;\n    for(int i = 0; i < lst1.length;\
    \ i++)\n    {\n        lst1Length += lst1[i].length;\n    }\n    for(int i = 0;\
    \ i < lst2.length; i++)\n    {\n        lst2Length += lst2[i].length;\n    }\n\
    \    if(lst1Length == lst2Length) return lst1;\n    if(lst1Length < lst2Length)\
    \ return lst1;\n    return lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length == 0 && lst2.length == 0) \n    {\n        return\
    \ [];\n    }\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string x; lst1)\
    \ \n    {\n        sum1 += x.length;\n    }\n    foreach(string x; lst2) \n  \
    \  {\n        sum2 += x.length;\n    }\n    if(sum1 == sum2) \n    {\n       \
    \ return lst1;\n    }\n    else if(sum1 < sum2) \n    {\n        return lst1;\n\
    \    }\n    else \n    {\n        return lst2;\n    }\n}\n// test\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string\
    \ str; lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string\
    \ str; lst2)\n    {\n        lst2_total += str.length;\n    }\n    return lst1_total\
    \ > lst2_total ? lst2 : lst1;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    /*\n    int cnt1 = 0;\n    int cnt2 = 0;\n    foreach(string\
    \ x; lst1)\n    {\n        cnt1 += x.length;\n    }\n    foreach(string x; lst2)\n\
    \    {\n        cnt2 += x.length;\n    }\n    if(cnt1 > cnt2)\n    {\n       \
    \ return lst2;\n    }\n    return lst1;\n    */\n    int cnt1 = map!((x) => x.length)(lst1).reduce!((a,b)\
    \ => a+b)();\n    int cnt2 = map!((x) => x.length)(lst2).reduce!((a,b) => a+b)();\n\
    \    return cnt1 > cnt2 ? lst2 : lst1;\n}\nunittest\n{\n    alias candidate =\
    \ total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpybndzzyo.d(42): Error: template instance `map!((x) => x.length)`
    template `map` is not defined

    /tmp/tmpybndzzyo.d(43): Error: template instance `map!((x) => x.length)` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybndzzyo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0) return [];\n    if\
    \ (lst1.length == 0 && lst2.length != 0) return lst2;\n    if (lst1.length !=\
    \ 0 && lst2.length == 0) return lst1;\n    if (lst1.length != 0 && lst2.length\
    \ != 0) \n    {\n        alias DiffCount = Tuple!(int, int);\n        auto diffCount\
    \ = DiffCount(0, 0);\n        foreach (i, val; lst1)\n        {\n            diffCount[0]\
    \ += val.length;\n        }\n        foreach (i, val; lst2)\n        {\n     \
    \       diffCount[1] += val.length;\n        }\n        if (diffCount[0] > diffCount[1])\
    \ return lst2;\n        if (diffCount[0] < diffCount[1]) return lst1;\n      \
    \  if (diffCount[0] == diffCount[1]) return lst1;\n    }\n}\nunittest\n{\n   \
    \ alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n   \
    \ assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0u4eo3or.d(23): Error: function `tmp0u4eo3or.total_match` no `return
    exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0u4eo3or.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    return sum(map!(a => a.length)(lst1)) > sum(map!(a => a.length)(lst2))\
    \ ? lst2 : lst1;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp59itp33u.d(25): Error: undefined identifier `sum`

    /tmp/tmp59itp33u.d(25): Error: undefined identifier `sum`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp59itp33u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{ \n    size_t a = 0;\n    size_t b = 0;\n    for(auto s : lst1)\n \
    \       a += s.length;\n    for(auto s : lst2)\n        b += s.length;\n    return\
    \ a < b ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzcp0k46f.d(27): Error: no identifier for declarator `s`

    /tmp/tmpzcp0k46f.d(27): Error: expression expected, not `:`

    /tmp/tmpzcp0k46f.d(27): Error: found `lst1` when expecting `;` following `for`
    condition

    /tmp/tmpzcp0k46f.d(29): Error: no identifier for declarator `s`

    /tmp/tmpzcp0k46f.d(29): Error: expression expected, not `:`

    /tmp/tmpzcp0k46f.d(29): Error: found `lst2` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzcp0k46f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length < lst2.length)\n        return lst1;\n    if\
    \ (lst1.length > lst2.length)\n        return lst2;\n    else\n        return\
    \ lst1;\n}\n \nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4wyreu42.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x429405]

    ??:? void tmp4wyreu42.__unittest_L33_C1() [0x427d87]

    ??:? void tmp4wyreu42.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcdf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42915e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ac1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ab19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429135]

    ??:? runModuleUnitTests [0x42dab5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429854]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n  \
    \  for (int i = 0; i < lst1.length; i++) \n    {\n        total_chars_lst1 +=\
    \ lst1[i].length;\n    }\n    for (int i = 0; i < lst2.length; i++) \n    {\n\
    \        total_chars_lst2 += lst2[i].length;\n    }\n    return total_chars_lst1\
    \ > total_chars_lst2 ? lst2 : lst1;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    int[] lst1leng = new int[lst1.length];\n\
    \    int[] lst2leng = new int[lst2.length];\n    int min1 = lst1leng[0];\n   \
    \ int min2 = lst2leng[0];\n    foreach(int i; 0..lst1.length)\n    {\n       \
    \ lst1leng[i] = lst1[i].length;\n        if(lst1leng[i] < min1)\n        {\n \
    \           min1 = lst1leng[i];\n        }\n    }\n    foreach(int i; 0..lst2.length)\n\
    \    {\n        lst2leng[i] = lst2[i].length;\n        if(lst2leng[i] < min2)\n\
    \        {\n            min2 = lst2leng[i];\n        }\n    }\n    foreach(int\
    \ i; 0..lst1.length)\n    {\n        sum1 += lst1leng[i];\n    }\n    foreach(int\
    \ i; 0..lst2.length)\n    {\n        sum2 += lst2leng[i];\n    }\n    if(sum1\
    \ <= sum2)\n    {\n        return lst1;\n    }\n    else if(sum2 < sum1)\n   \
    \ {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n    }\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvn0a0y6h.d(31): Error: cannot implicitly convert expression `lst1.length`
    of type `ulong` to `int`

    /tmp/tmpvn0a0y6h.d(39): Error: cannot implicitly convert expression `lst2.length`
    of type `ulong` to `int`

    /tmp/tmpvn0a0y6h.d(47): Error: cannot implicitly convert expression `lst1.length`
    of type `ulong` to `int`

    /tmp/tmpvn0a0y6h.d(51): Error: cannot implicitly convert expression `lst2.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvn0a0y6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    //write your code here\n    int lst1Total = 0;\n    int lst2Total\
    \ = 0;\n    foreach(string word; lst1)\n    {\n        lst1Total += word.length;\n\
    \    }\n    foreach(string word; lst2)\n    {\n        lst2Total += word.length;\n\
    \    }\n    if(lst1Total < lst2Total)\n    {\n        return lst1;\n    }\n  \
    \  else if(lst1Total > lst2Total)\n    {\n        return lst2;\n    }\n    else\n\
    \    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    /*\n    //Dummb solution\n    size_t len1 = 0;\n    foreach(string\
    \ i; lst1)\n    {\n        len1 += i.length;\n    }\n    size_t len2 = 0;\n  \
    \  foreach(string i; lst2)\n    {\n        len2 += i.length;\n    }\n    if(len1\
    \ < len2)\n    {\n        return lst1;\n    }\n    else if(len1 > len2)\n    {\n\
    \        return lst2;\n    }\n    else\n    {\n        return lst1;\n    }\n \
    \   */\n    size_t len1 = reduce!((a, b) => a + b.length)(0, lst1);\n    size_t\
    \ len2 = reduce!((a, b) => a + b.length)(0, lst2);\n    if(len1 < len2)\n    {\n\
    \        return lst1;\n    }\n    else if(len1 > len2)\n    {\n        return\
    \ lst2;\n    }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6hidl4r5.d(50): Error: template instance `reduce!((a, b) => a +
    b.length)` template `reduce` is not defined

    /tmp/tmp6hidl4r5.d(51): Error: template instance `reduce!((a, b) => a + b.length)`
    template `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6hidl4r5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length < lst2.length)\n        return lst1;\n    if\
    \ (lst1.length > lst2.length)\n        return lst2;\n    if (lst1.length == lst2.length)\n\
    \    {\n        int total1 = 0;\n        int total2 = 0;\n        foreach (string\
    \ item; lst1)\n            total1 += item.length;\n        foreach (string item;\
    \ lst2)\n            total2 += item.length;\n        if (total1 < total2)\n  \
    \          return lst1;\n        else\n            return lst2;\n    }\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj0sg2l_i.d(23): Error: function `tmpj0sg2l_i.total_match` no `return
    exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj0sg2l_i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{ \n   // Your code here\n    int sum1 = 0;\n    int sum2 = 0;\n   \
    \ int sum = 0;\n    foreach(element; lst1)\n    {\n        sum1 += element.length;\n\
    \    }\n    foreach(element; lst2)\n    {\n        sum2 += element.length;\n \
    \   }\n    if(sum1 <= sum2)\n    {\n        return lst1;\n    }\n    else\n  \
    \  {\n        return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    immutable size_t lst1Size = 0;\n    immutable size_t lst2Size\
    \ = 0;\n    foreach(i; lst1)\n    {\n        lst1Size += i.length;\n    }\n  \
    \  foreach(i; lst2)\n    {\n        lst2Size += i.length;\n    }\n    return lst1Size\
    \ <= lst2Size ? lst1 : lst2;\n}\n/*\n    Write a function that accepts an array\
    \ of integers and return an array of non-even numbers.\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqz1qjodg.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqz1qjodg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0) \n    {\n        return\
    \ typeof(lst1).init;\n    }\n    else if (lst1.length == 0 && lst2.length != 0)\
    \ \n    {\n        return lst2;\n    }\n    else if (lst1.length != 0 && lst2.length\
    \ == 0) \n    {\n        return lst1;\n    }\n    else if (lst1.length == lst2.length)\
    \ \n    {\n        return lst1;\n    }\n    else \n    {\n        string[] tmp\
    \ = new string[];\n        string[] tmp2 = new string[];\n        int length_lst1\
    \ = 0;\n        int length_lst2 = 0;\n        foreach (string str; lst1)\n   \
    \     {\n            length_lst1 += str.length;\n        }\n        foreach (string\
    \ str; lst2)\n        {\n            length_lst2 += str.length;\n        }\n \
    \       if (length_lst1 < length_lst2) \n        {\n            return lst1;\n\
    \        }\n        else \n        {\n            return lst2;\n        }\n  \
    \  }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj_9oj6vd.d(43): Error: new can only create structs, dynamic arrays
    or class objects, not `string[]`''s

    /tmp/tmpj_9oj6vd.d(44): Error: new can only create structs, dynamic arrays or
    class objects, not `string[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_9oj6vd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1Sum = 0;\n    int lst2Sum = 0;\n    lst1Sum = lst1.reduce!((a,b)\
    \ => a.length + b.length)(0);\n    lst2Sum = lst2.reduce!((a,b) => a.length +\
    \ b.length)(0);\n    return lst1Sum > lst2Sum ? lst2 : lst1;\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1hoq1_ij.d(27): Error: no property `reduce` for type `string[]`

    /tmp/tmp1hoq1_ij.d(28): Error: no property `reduce` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1hoq1_ij.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length == 0 && lst2.length == 0)\n        return lst1;\n\
    \    int sum1 = 0;\n    int sum2 = 0;\n    foreach(element; lst1)\n        sum1\
    \ += element.length;\n    foreach(element; lst2)\n        sum2 += element.length;\n\
    \    if(sum1 == sum2)\n        return lst1;\n    else if(sum1 < sum2)\n      \
    \  return lst1;\n    else\n        return lst2;\n}\n/*\n    Write a function that\
    \ accepts a 2d array of strings and returns the index of the first \n    longest\
    \ string. If there are 2 strings with the same length, return the index of the\
    \ \n    first occurrence.\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiajxadq1.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiajxadq1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    string[] result;\n    if(lst1.length==0) return lst1;\n    if(lst2.length==0)\
    \ return lst2;\n    int total = 0;\n    foreach(item; lst1) total += item.length;\n\
    \    result = lst1;\n    int temp = 0;\n    foreach(item; lst2) temp += item.length;\n\
    \    if(temp < total) result = lst2;\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n   \
    \ assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{ \n    if (lst1.length == 0 && lst2.length == 0) return new string[0];\n\
    \    if (lst1.length == 0) return lst2;\n    if (lst2.length == 0) return lst1;\n\
    \    int counter1 = 0;\n    int counter2 = 0;\n    foreach (char c; lst1)\n  \
    \  {\n        counter1 += c.length;\n    }\n    foreach (char c; lst2)\n    {\n\
    \        counter2 += c.length;\n    }\n    if (counter1 == counter2) return lst1;\n\
    \    if (counter1 < counter2) return lst1;\n    return lst2;\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxp_idb4x.d(30): Error: cannot implicitly convert expression `__r73[__key74]`
    of type `string` to `char`

    /tmp/tmpxp_idb4x.d(32): Error: no property `length` for type `char`

    /tmp/tmpxp_idb4x.d(34): Error: cannot implicitly convert expression `__r75[__key76]`
    of type `string` to `char`

    /tmp/tmpxp_idb4x.d(36): Error: no property `length` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxp_idb4x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    \n}\nstatic class Assert\n{\n    public static void AreEqual(object\
    \ a, object b)\n    {\n        if (a != b) throw new Exception(\"Test fail\");\n\
    \    }\n    public static void AreNotEqual(object a, object b)\n    {\n      \
    \  if (a == b) throw new Exception(\"Test fail\");\n    }\n}\nunittest\n{\n  \
    \  alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvgc1wiry.d(29): Error: import `object.object` is used as a type

    /tmp/tmpvgc1wiry.d(29): Error: import `object.object` is used as a type

    /tmp/tmpvgc1wiry.d(33): Error: import `object.object` is used as a type

    /tmp/tmpvgc1wiry.d(33): Error: import `object.object` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvgc1wiry.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n  string[] result = [];\n  int count1 = 0;\n  int count2 = 0;\n \
    \ foreach(s; lst1)\n    count1 += s.length;\n  foreach(s; lst2)\n    count2 +=\
    \ s.length;\n  \n  if(count1 < count2)\n    result = lst1;\n  else\n    result\
    \ = lst2;\n  return result;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt0x512ae.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x42951d]

    ??:? void tmpt0x512ae.__unittest_L39_C1() [0x4284a8]

    ??:? void tmpt0x512ae.__modtest() [0x428788]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddf7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429276]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42aca5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac31]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42924d]

    ??:? runModuleUnitTests [0x42dbcd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42996c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int totalLst1 = 0;\n    int totalLst2 = 0;\n    foreach(string\
    \ i; lst1)\n    {\n        totalLst1 += i.length;\n    }\n    foreach(string j;\
    \ lst2)\n    {\n        totalLst2 += j.length;\n    }\n    if(totalLst1 > totalLst2)\n\
    \    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    enum str_cmp = (string a, string b)\n    {\n        return a.length\
    \ - b.length;\n    };\n    lst1.sort!str_cmp;\n    lst2.sort!str_cmp;\n    return\
    \ lst1.length == lst2.length ? lst1 : (lst1.length < lst2.length ? lst1 : lst2);\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp67n1_u87.d(29): Error: no property `sort` for type `string[]`

    /tmp/tmp67n1_u87.d(30): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp67n1_u87.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int len1 = 0;\n    int len2 = 0;\n    foreach(str; lst1) len1\
    \ += str.length;\n    foreach(str; lst2) len2 += str.length;\n    return len1\
    \ < len2 ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1k7c1ayr.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmp1k7c1ayr.__unittest_L31_C1() [0x428460]

    ??:? void tmp1k7c1ayr.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    // int total_lst1 = 0;\n    // int total_lst2 = 0;\n    // foreach(e;\
    \ lst1)\n    // {\n    //     total_lst1 += e.length;\n    // }\n    // foreach(e;\
    \ lst2)\n    // {\n    //     total_lst2 += e.length;\n    // }\n    // return\
    \ total_lst1 < total_lst2 ? lst1 : lst2;\n    import std.algorithm : count;\n\
    \    import std.range : sum;\n    return count(lst1.sum!(a => a.length)) < count(lst2.sum!(a\
    \ => a.length)) ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2t7zh6bn.d(37): Error: module `std.range` import `sum` not found

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2t7zh6bn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    return lst1.length < lst2.length ? lst1 : lst2;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp25xpba6r.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293fd]

    ??:? void tmp25xpba6r.__unittest_L27_C1() [0x42826b]

    ??:? void tmp25xpba6r.__modtest() [0x428664]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcd7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429156]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ac14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ab11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42912d]

    ??:? runModuleUnitTests [0x42daad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42984c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length == 0 && lst2.length == 0)\n        return lst1;\n\
    \    int sum1 = 0;\n    foreach(string s; lst1)\n        sum1 += s.length;\n \
    \   int sum2 = 0;\n    foreach(string s; lst2)\n        sum2 += s.length;\n  \
    \  if(sum1 <= sum2)\n        return lst1;\n    else\n        return lst2;\n}\n\
    /*\n    Write a function that accepts an int n and returns a 2D array with n rows\
    \ and n cols.\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7mm1jves.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7mm1jves.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    string[] match = [];\n    if(lst1.length != 0) \n    {\n    \
    \    if(lst2.length != 0) \n        {\n            bool equal = false;\n     \
    \       int lst1length = 0;\n            int lst2length = 0;\n            foreach(a;\
    \ lst1) \n            {\n                lst1length += a.length;\n           \
    \ }\n            foreach(b; lst2) \n            {\n                lst2length\
    \ += b.length;\n            }\n            if(lst1length < lst2length) \n    \
    \        {\n                match = lst1;\n            }\n            else if(lst1length\
    \ > lst2length) \n            {\n                match = lst2;\n            }\n\
    \            else \n            {\n                if(lst1length == lst2length)\
    \ \n                {\n                    match = lst1;\n                }\n\
    \            }\n        }\n        else \n        {\n            match = lst1;\n\
    \        }\n    }\n    else \n    {\n        if(lst2.length != 0) \n        {\n\
    \            match = lst2;\n        }\n    }\n    return match;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqhq589bl.d(82): unittest failure

    ----------------

    ??:? _d_unittestp [0x4295a5]

    ??:? void tmpqhq589bl.__unittest_L71_C1() [0x4285d3]

    ??:? void tmpqhq589bl.__modtest() [0x42880c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42de7f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4292fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ad2d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42adbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42acb9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4292d5]

    ??:? runModuleUnitTests [0x42dc55]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4299f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n  if (lst1.length == 0)\n  {\n    return [];\n  }\n  else if (lst2.length\
    \ == 0)\n  {\n    return [];\n  }\n  else\n  {\n    int total_str1 = 0;\n    int\
    \ total_str2 = 0;\n    int[] num_of_str1 = new int[lst1.length];\n    int[] num_of_str2\
    \ = new int[lst2.length];\n    for (int i = 0; i < lst1.length; i++)\n    {\n\
    \      num_of_str1[i] = 0;\n      for (int j = 0; j < lst1[i].length; j++)\n \
    \     {\n        num_of_str1[i] += 1;\n      }\n      total_str1 += num_of_str1[i];\n\
    \    }\n    for (int i = 0; i < lst2.length; i++)\n    {\n      num_of_str2[i]\
    \ = 0;\n      for (int j = 0; j < lst2[i].length; j++)\n      {\n        num_of_str2[i]\
    \ += 1;\n      }\n      total_str2 += num_of_str2[i];\n    }\n    if (total_str1\
    \ < total_str2)\n    {\n      return lst1;\n    }\n    else if (total_str1 > total_str2)\n\
    \    {\n      return lst2;\n    }\n    else\n    {\n      return lst1;\n    }\n\
    \  }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length == 0)\n        return lst1;\n    if(lst2.length\
    \ == 0)\n        return lst2;\n    \n    int total1 = 0;\n    int total2 = 0;\n\
    \    \n    foreach(string s; lst1)\n        total1 += s.length;\n    \n    foreach(string\
    \ s; lst2)\n        total2 += s.length;\n    \n    if(total1 == total2)\n    \
    \    return lst1;\n    \n    if(total1 < total2)\n        return lst1;\n    \n\
    \    return lst2;\n}\n/*\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmt0pnjkd.d(47): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmt0pnjkd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int count1 = 0;\n    int count2 = 0;\n    foreach(element; lst1)\n\
    \    {\n        count1 += element.length;\n    }\n    foreach(element; lst2)\n\
    \    {\n        count2 += element.length;\n    }\n    return count1 > count2 ?\
    \ lst2 : lst1;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    return (lst1.length < lst2.length) ? lst1 : lst2;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphz95n3et.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293fd]

    ??:? void tmphz95n3et.__unittest_L27_C1() [0x42826b]

    ??:? void tmphz95n3et.__modtest() [0x428664]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcd7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429156]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ac14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ab11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42912d]

    ??:? runModuleUnitTests [0x42daad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42984c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(s; lst2)\n\
    \    {\n        lst2_total += s.length;\n    }\n    return lst1_total > lst2_total\
    \ ? lst2 : lst1;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    foreach(var elm; lst1)\n    {\n    \
    \    lst1_total += elm.length;\n    }\n    int lst2_total = 0;\n    foreach(var\
    \ elm; lst2)\n    {\n        lst2_total += elm.length;\n    }\n    if(lst1_total\
    \ == lst2_total)\n    {\n        return lst1;\n    }\n    else if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_il6onun.d(26): Error: undefined identifier `var`

    /tmp/tmp_il6onun.d(31): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_il6onun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int i = 0;\n    int j = 0;\n    int len = 0;\n    foreach(w;\
    \ lst1)\n    {\n        len += w.length;\n    }\n    int len2 = 0;\n    foreach(w;\
    \ lst2)\n    {\n        len2 += w.length;\n    }\n    if(len <= len2)\n    {\n\
    \        return lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n  if (lst1.length == 0 && lst2.length == 0) return lst1;\n  if (lst1.length\
    \ > lst2.length) return lst2;\n  int lst1_length = 0;\n  int lst2_length = 0;\n\
    \  foreach (element; lst1)\n  {\n    lst1_length += element.length;\n  }\n  foreach\
    \ (element; lst2)\n  {\n    lst2_length += element.length;\n  }\n  if (lst1_length\
    \ == lst2_length) return lst1;\n  if (lst1_length < lst2_length) return lst1;\n\
    \  return lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    uint total1 = 0;\n    uint total2 = 0;\n    for (string str :\
    \ lst1) {\n        total1 += str.length;\n    }\n    for (string str : lst2) {\n\
    \        total2 += str.length;\n    }\n    return total1 <= total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbux5b20y.d(27): Error: found `str` when expecting `;` following
    statement

    /tmp/tmpbux5b20y.d(27): Error: expression expected, not `:`

    /tmp/tmpbux5b20y.d(27): Error: found `lst1` when expecting `;` following `for`
    condition

    /tmp/tmpbux5b20y.d(30): Error: found `str` when expecting `;` following statement

    /tmp/tmpbux5b20y.d(30): Error: expression expected, not `:`

    /tmp/tmpbux5b20y.d(30): Error: found `lst2` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbux5b20y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length < lst2.length) \n    {\n        return lst1;\n\
    \    } \n    else if(lst1.length > lst2.length) \n    {\n        return lst2;\n\
    \    }\n    int total_chars_lst1 = 0;\n    foreach(string i; lst1) \n    {\n \
    \       total_chars_lst1 += i.length;\n    }\n    int total_chars_lst2 = 0;\n\
    \    foreach(string i; lst2) \n    {\n        total_chars_lst2 += i.length;\n\
    \    }\n    if(total_chars_lst1 < total_chars_lst2) \n    {\n        return lst1;\n\
    \    } \n    else if(total_chars_lst1 > total_chars_lst2) \n    {\n        return\
    \ lst2;\n    }\n    return lst1;\n}\n/*\n    Write a function that accepts two\
    \ arrays and returns a new array that has all the \n    elements common to both\
    \ arrays, except for any duplicates. For example, \n    if the two arrays are:\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphb_e8ix7.d(53): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphb_e8ix7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum_lst1 = 0;\n    int sum_lst2 = 0;\n    foreach(l; lst1)\n\
    \    {\n        sum_lst1 += l.length;\n    }\n    foreach(l; lst2)\n    {\n  \
    \      sum_lst2 += l.length;\n    }\n    if(sum_lst1 > sum_lst2)\n    {\n    \
    \    return lst2;\n    }\n    else if(sum_lst1 < sum_lst2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    //complete the function\n    int a = 0;\n    int b = 0;\n   \
    \ foreach(string value; lst1)\n    {\n        a += value.length;\n    }\n    foreach(string\
    \ value; lst2)\n    {\n        b += value.length;\n    }\n    if(a < b)\n    {\n\
    \        return lst1;\n    }\n    else if(a > b)\n    {\n        return lst2;\n\
    \    }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    return lst1.sum!((a)=>a.length) > lst2.sum!((a)=>a.length) ?\
    \ lst2 : lst1;\n}\n/*\nunittest\n{\n    alias candidate = total_match;\n\n   \
    \ assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"],\
    \ [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpohi6lj56.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpohi6lj56.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    auto lst1_total = 0;\n    foreach(item; lst1)\n    {\n      \
    \  lst1_total += item.length;\n    }\n    auto lst2_total = 0;\n    foreach(item;\
    \ lst2)\n    {\n        lst2_total += item.length;\n    }\n    if(lst1_total >\
    \ lst2_total)\n    {\n        return lst2;\n    }\n    else\n    {\n        return\
    \ lst1;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < lst1.length;\
    \ i++)\n    {\n        sum1 += lst1[i].length;\n    }\n    for (int i = 0; i <\
    \ lst2.length; i++)\n    {\n        sum2 += lst2[i].length;\n    }\n    if (sum1\
    \ > sum2)\n    {\n        return lst2;\n    }\n    return lst1;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    // type cons makes the struct that the container for the return\
    \ value\n    auto container = tuple(array(lst1), array(lst2));\n    // maps the\
    \ strings \n    int sum1 = lst1.map!(a => a.length).reduce!(\"a + b\");\n    int\
    \ sum2 = lst2.map!(a => a.length).reduce!(\"a + b\");\n    if (sum1 == sum2) \n\
    \    {\n        return container[0];\n    }\n    else if (sum1 > sum2) \n    {\n\
    \        return container[1];\n    }\n    else \n    {\n        return container[0];\n\
    \    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_98cgsnt.d(26): Error: undefined identifier `array`

    /tmp/tmp_98cgsnt.d(26): Error: undefined identifier `array`

    /tmp/tmp_98cgsnt.d(28): Error: no property `map` for type `string[]`

    /tmp/tmp_98cgsnt.d(29): Error: no property `map` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_98cgsnt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{ \n    return (sum(map!(to!int)(lst1))<sum(map!(to!int)(lst2))) ? lst1\
    \ : ((sum(map!(to!int)(lst1))>sum(map!(to!int)(lst2))) ? lst2 : lst1);\n}\n//\
    \ --------------- TEST ---------------\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe5ullgz9.d(25): Error: undefined identifier `sum`

    /tmp/tmpe5ullgz9.d(25): Error: undefined identifier `sum`

    /tmp/tmpe5ullgz9.d(25): Error: undefined identifier `sum`

    /tmp/tmpe5ullgz9.d(25): Error: undefined identifier `sum`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5ullgz9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    auto sum_size = (int value, string[] xs) => \n        xs.map!(a\
    \ => a.length).reduce!(a => a + value).sum;\n    if (sum_size(0, lst1) < sum_size(0,\
    \ lst2))\n        return lst1;\n    return lst2;\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2a2kso7l.d(26): Error: no property `map` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2a2kso7l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length == 0 && lst2.length == 0)\n        return lst1;\n\
    \    else if(lst1.length == 0)\n        return lst2;\n    else if(lst2.length\
    \ == 0)\n        return lst1;\n    else\n    {\n        int sum1 = 0;\n      \
    \  foreach(var word; lst1)\n            sum1 += word.length;\n        int sum2\
    \ = 0;\n        foreach(var word; lst2)\n            sum2 += word.length;\n  \
    \      if(sum1 < sum2)\n            return lst1;\n        else if(sum2 < sum1)\n\
    \            return lst2;\n        else\n            return lst1;\n    }\n}\n\
    /*\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm27rhl71.d(47): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm27rhl71.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n  if (lst1.length < lst2.length) \n  {\n    return lst1;\n  }\n \
    \ else if (lst1.length > lst2.length) \n  {\n    return lst2;\n  }\n  else \n\
    \  {\n    return lst1;\n  }\n  return lst1;\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1g2if714.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x429405]

    ??:? void tmp1g2if714.__unittest_L39_C1() [0x427d87]

    ??:? void tmp1g2if714.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcdf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42915e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ac1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ab19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429135]

    ??:? runModuleUnitTests [0x42dab5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429854]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int totalChars1 = 0;\n    foreach(word; lst1)\n    {\n      \
    \  totalChars1 += word.length;\n    }\n    int totalChars2 = 0;\n    foreach(word;\
    \ lst2)\n    {\n        totalChars2 += word.length;\n    }\n    if(totalChars1\
    \ > totalChars2)\n    {\n        return lst2;\n    }\n    else\n    {\n      \
    \  return lst1;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length > lst2.length)\n        return lst2;\n    else\
    \ if (lst1.length < lst2.length)\n        return lst1;\n    else \n    {\n   \
    \     int total1 = 0;\n        foreach (var str1; lst1)\n            total1 +=\
    \ str1.length;\n        int total2 = 0;\n        foreach (var str2; lst2)\n  \
    \          total2 += str2.length;\n        if (total1 == total2)\n           \
    \ return lst1;\n        else if (total1 > total2)\n            return lst2;\n\
    \        else\n            return lst1;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqagotvsh.d(32): Error: undefined identifier `var`

    /tmp/tmpqagotvsh.d(35): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqagotvsh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0)\n        return lst1;\n    if (lst2.length\
    \ == 0)\n        return lst2;\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach\
    \ (element; lst1)\n        sum1 += element.length;\n    foreach (element; lst2)\n\
    \        sum2 += element.length;\n    if (sum1 < sum2)\n        return lst1;\n\
    \    else\n        return lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvh64shlm.d(50): unittest failure

    ----------------

    ??:? _d_unittestp [0x429505]

    ??:? void tmpvh64shlm.__unittest_L40_C1() [0x428490]

    ??:? void tmpvh64shlm.__modtest() [0x428770]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dddf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42925e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429235]

    ??:? runModuleUnitTests [0x42dbb5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429954]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    int maxLength = 0;\n\
    \    if (lst1.length > lst2.length)\n    {\n        maxLength = lst1.length;\n\
    \    }\n    else\n    {\n        maxLength = lst2.length;\n    }\n    for (int\
    \ i = 0; i < maxLength; i++)\n    {\n        if (i < lst1.length)\n        {\n\
    \            total1 += lst1[i].length;\n        }\n        if (i < lst2.length)\n\
    \        {\n            total2 += lst2[i].length;\n        }\n    }\n    if (total1\
    \ > total2)\n    {\n        return lst2;\n    }\n    else\n    {\n        return\
    \ lst1;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpygubwfff.d(30): Error: cannot implicitly convert expression `lst1.length`
    of type `ulong` to `int`

    /tmp/tmpygubwfff.d(34): Error: cannot implicitly convert expression `lst2.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygubwfff.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164327
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int totalChars1 = 0;\n    int totalChars2 = 0;\n    for (int\
    \ i = 0; i < lst1.length; i++)\n    {\n        totalChars1 += lst1[i].length;\n\
    \    }\n    for (int i = 0; i < lst2.length; i++)\n    {\n        totalChars2\
    \ += lst2[i].length;\n    }\n    if (totalChars1 < totalChars2)\n    {\n     \
    \   return lst1;\n    }\n    return lst2;\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpogngooom.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294ad]

    ??:? void tmpogngooom.__unittest_L41_C1() [0x428434]

    ??:? void tmpogngooom.__modtest() [0x428714]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddfb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429206]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42aca9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad38]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4291dd]

    ??:? runModuleUnitTests [0x42dbd1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429970]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0)\n        return lst1;\n    if (lst2.length\
    \ == 0)\n        return lst2;\n    return lst1.sum() < lst2.sum() ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjjg0hkt4.d(29): Error: no property `sum` for type `string[]`

    /tmp/tmpjjg0hkt4.d(29): Error: no property `sum` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjjg0hkt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{ \n    if(lst1.length < lst2.length)\n        return lst1;\n    else\n\
    \        return lst2;\n} \nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi0pitt9v.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293fd]

    ??:? void tmpi0pitt9v.__unittest_L30_C1() [0x42826b]

    ??:? void tmpi0pitt9v.__modtest() [0x428664]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcd7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429156]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ac14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ab11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42912d]

    ??:? runModuleUnitTests [0x42daad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42984c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    return lst1.length > lst2.length \n        ? lst2.zip!(x => x.length).reduce!((a,\
    \ b) => a + b).empty\n            ? lst1\n            : lst2\n        : lst1.zip!(x\
    \ => x.length).reduce!((a, b) => a + b).empty\n            ? lst2\n          \
    \  : lst1;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0r6049gl.d(26): Error: no property `zip` for type `string[]`

    /tmp/tmp0r6049gl.d(29): Error: no property `zip` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0r6049gl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length == 0) return lst1;\n    if(lst2.length == 0) return\
    \ lst2;\n    int t1 = 0;\n    int t2 = 0;\n    lst1.walk!(e => t1 += e.length);\n\
    \    lst2.walk!(e => t2 += e.length);\n    return t1 < t2 ? lst1 : lst2;\n}\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzxpkp5uk.d(29): Error: no property `walk` for type `string[]`

    /tmp/tmpzxpkp5uk.d(30): Error: no property `walk` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzxpkp5uk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length == 0 && lst2.length == 0)\n        return lst1;\n\
    \    \n    int count1 = 0;\n    foreach(string s; lst1)\n        count1 += s.length;\n\
    \    int count2 = 0;\n    foreach(string s; lst2)\n        count2 += s.length;\n\
    \    \n    if(count1 == count2)\n        return lst1;\n    else if(count1 < count2)\n\
    \        return lst1;\n    else\n        return lst2;\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n  return lst1.joiner.joiner.length < lst2.joiner.joiner.length ?\
    \ lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2zein0ja.d(25): Error: no property `joiner` for type `string[]`

    /tmp/tmp2zein0ja.d(25): Error: no property `joiner` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2zein0ja.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int s1 = 0;\n    foreach(element; lst1)\n    {\n        s1 +=\
    \ element.length;\n    }\n    int s2 = 0;\n    foreach(element; lst2)\n    {\n\
    \        s2 += element.length;\n    }\n    if(s1 <= s2) return lst1;\n    else\
    \ return lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n\tint len1 = 0;\n\tint len2 = 0;\n\tforeach(string str; lst1)\n\t\
    {\n\t\tlen1 += str.length;\n\t}\n\tforeach(string str; lst2)\n\t{\n\t\tlen2 +=\
    \ str.length;\n\t}\n\treturn len1 < len2 ? lst1 : lst2;\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjafwy4pg.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpjafwy4pg.__unittest_L37_C1() [0x428460]

    ??:? void tmpjafwy4pg.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length < lst2.length)\n    {\n        return lst1;\n\
    \    }\n    else if(lst1.length > lst2.length)\n    {\n        return lst2;\n\
    \    }\n    else\n    {\n        if(lst1.length == 0)\n        {\n           \
    \ return lst1;\n        }\n        else\n        {\n            foreach(a;0..lst1.length)\n\
    \            {\n                if(lst1[a].length > lst2[a].length)\n        \
    \        {\n                    return lst2;\n                }\n            \
    \    else if(lst1[a].length < lst2[a].length)\n                {\n           \
    \         return lst1;\n                }\n            }\n            return lst1;\n\
    \        }\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpobxoqrop.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x429535]

    ??:? void tmpobxoqrop.__unittest_L56_C1() [0x4283a7]

    ??:? void tmpobxoqrop.__modtest() [0x4287a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42de83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42928e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ad31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42adc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42acbd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429265]

    ??:? runModuleUnitTests [0x42dc59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4299f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(value; lst1)\
    \ {\n        total1 += value.length;\n    }\n    foreach(value; lst2) {\n    \
    \    total2 += value.length;\n    }\n    return total1 > total2 ? lst2 : total1\
    \ < total2 ? lst1 : lst1;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{ \n    int size1 = 0;\n    int size2 = 0;\n    int i;\n    foreach(e;\
    \ lst1)\n    {\n        size1 += e.length;\n    }\n    foreach(e; lst2)\n    {\n\
    \        size2 += e.length;\n    }\n    return size1 < size2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr0jqot2b.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpr0jqot2b.__unittest_L38_C1() [0x428460]

    ??:? void tmpr0jqot2b.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return [];\n\
    \    else if (lst1.length == 0 && lst2.length != 0)\n        return lst2;\n  \
    \  else if (lst1.length != 0 && lst2.length == 0)\n        return lst1;\n    else\n\
    \    {\n        int lst1total = 0;\n        int lst2total = 0;\n        foreach\
    \ (string i; lst1)\n            lst1total += i.length;\n        foreach (string\
    \ i; lst2)\n            lst2total += i.length;\n        if (lst1total < lst2total)\n\
    \            return lst1;\n        else if (lst1total > lst2total)\n         \
    \   return lst2;\n        else\n            return lst1;\n    }\n}\n/*\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkpwwsj_y.d(47): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpwwsj_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    // your code here\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpble54ypl.d(23): Error: function `tmpble54ypl.total_match` has no
    `return` statement, but is expected to return a value of type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpble54ypl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(e; lst1) \n\
    \    {\n        total1 += e.length;\n    }\n    foreach(e; lst2) \n    {\n   \
    \     total2 += e.length;\n    }\n    return total1 == total2 ? lst1 : (total1\
    \ < total2 ? lst1 : lst2);\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n\tint lst1count = 0;\n\tint lst2count = 0;\n\tforeach(string i; lst1)\n\
    \t{\n\t\tlst1count += i.length;\n\t}\n\tforeach(string i; lst2)\n\t{\n\t\tlst2count\
    \ += i.length;\n\t}\n\tif(lst1count <= lst2count)\n\t{\n\t\treturn lst1;\n\t}\n\
    \telse\n\t{\n\t\treturn lst2;\n\t}\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length == 0 && lst2.length == 0) return [];\n    // sum\
    \ the length of the arrays\n    int lst1_length = lst1.reduce!(a => a.length)(0);\n\
    \    int lst2_length = lst2.reduce!(a => a.length)(0);\n    // return the array\
    \ with the lowest sum\n    return lst1_length <= lst2_length ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk7oqiez6.d(27): Error: no property `reduce` for type `string[]`

    /tmp/tmpk7oqiez6.d(28): Error: no property `reduce` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7oqiez6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int counter1 = 0;\n    int counter2 = 0;\n    int count = 0;\n\
    \    foreach(x; lst1)\n    {\n        counter1 += x.length;\n    }\n    foreach(x;\
    \ lst2)\n    {\n        counter2 += x.length;\n    }\n    if(counter1 < counter2)\n\
    \    {\n        return lst1;\n    }\n    if(counter1 > counter2)\n    {\n    \
    \    return lst2;\n    }\n    if(counter1 == counter2)\n    {\n        return\
    \ lst1;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4h8wca1m.d(23): Error: function `tmp4h8wca1m.total_match` no `return
    exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4h8wca1m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return [];\n\
    \    if (lst1.length == 0 && lst2.length != 0)\n        return lst2;\n    if (lst1.length\
    \ != 0 && lst2.length == 0)\n        return lst1;\n    // if (lst1.length == lst2.length)\n\
    \    //     return lst1;\n    if (lst1.sum(&to!int).length < lst2.sum(&to!int).length)\n\
    \        return lst1;\n    else\n        return lst2;\n}\n/*\n    Write a function\
    \ that accepts a string of characters and a string of unique, valid \n    characters.\
    \ Write a function to return true if the input string is a permutation \n    of\
    \ the second string.\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1yy75eee.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1yy75eee.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int len1 = lst1.length;\n    int len2 = lst2.length;\n    int\
    \ len = min(len1, len2);\n    int i;\n    int total1 = 0;\n    int total2 = 0;\n\
    \    for (i = 0; i < len; i++)\n    {\n        total1 += lst1[i].length;\n   \
    \     total2 += lst2[i].length;\n    }\n    if (total1 == total2)\n    {\n   \
    \     return lst1;\n    }\n    else if (total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptrhbdp6p.d(25): Error: cannot implicitly convert expression `lst1.length`
    of type `ulong` to `int`

    /tmp/tmptrhbdp6p.d(26): Error: cannot implicitly convert expression `lst2.length`
    of type `ulong` to `int`

    /tmp/tmptrhbdp6p.d(27): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrhbdp6p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total_length = 0;\n    int lst2_total_length = 0;\n\
    \    foreach(i; lst1)\n    {\n        lst1_total_length += i.length;\n    }\n\
    \    foreach(i; lst2)\n    {\n        lst2_total_length += i.length;\n    }\n\
    \    if(lst1_total_length <= lst2_total_length)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\n/*\n    Write a function\
    \ that accepts a number and returns a \n    string that corresponds to the number.\n\
    \    If the number is not valid, return the string \"NaN\".\nunittest\n{\n   \
    \ alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n   \
    \ assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprnx41op5.d(44): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprnx41op5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n     if(lst1.length == 0)\n     {\n        return lst1;\n     }\n\
    \     if(lst2.length == 0)\n     {\n        return lst2;\n     }\n    \n     int\
    \ value1 = 0;\n     int value2 = 0;\n    \n     foreach(string item; lst1)\n \
    \    {\n        value1 += item.length;\n     }\n    \n     foreach(string item;\
    \ lst2)\n     {\n        value2 += item.length;\n     }\n    \n     if(value1\
    \ == value2)\n     {\n        return lst1;\n     }\n     else if(value1 < value2)\n\
    \     {\n        return lst1;\n     }\n     else\n     {\n        return lst2;\n\
    \     }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    /*\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string\
    \ i; lst1) \n    {\n        sum1 += i.length;\n    }\n    foreach(string j; lst2)\
    \ \n    {\n        sum2 += j.length;\n    }\n    if(sum1 <= sum2) \n    {\n  \
    \      return lst1;\n    }\n    else \n    {\n        return lst2;\n    }\n  \
    \  */\n    /*\n    int sum1 = lst1.length.sum;\n    int sum2 = lst2.length.sum;\n\
    \    if(sum1 <= sum2) \n    {\n        return lst1;\n    }\n    else \n    {\n\
    \        return lst2;\n    }\n    */\n    return lst1.length.sum <= lst2.length.sum\
    \ ? lst1 : lst2;\n}\n// unittest {\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ve6tofk.d(57): Error: no property `sum` for type `ulong`

    /tmp/tmp3ve6tofk.d(57): Error: no property `sum` for type `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ve6tofk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    //  <your code goes here>\n    return lst1;\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz86azy0q.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293e5]

    ??:? void tmpz86azy0q.__unittest_L28_C1() [0x427d63]

    ??:? void tmpz86azy0q.__modtest() [0x42864c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcbf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42913e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab6d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42abfc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42aaf9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429115]

    ??:? runModuleUnitTests [0x42da95]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429834]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int n1 = size(lst1);\n    int n2 = size(lst2);\n    int size1\
    \ = 0;\n    int size2 = 0;\n    for (int i = 0; i < n1; i++)\n    {\n        size1\
    \ += size(lst1[i]);\n    }\n    for (int i = 0; i < n2; i++)\n    {\n        size2\
    \ += size(lst2[i]);\n    }\n    if (size1 == size2)\n    {\n        return lst1;\n\
    \    }\n    else if (size1 < size2)\n    {\n        return lst1;\n    }\n    else\n\
    \    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp290hbd5z.d(25): Error: undefined identifier `size`, did you mean
    function `sin`?

    /tmp/tmp290hbd5z.d(26): Error: undefined identifier `size`, did you mean function
    `sin`?

    /tmp/tmp290hbd5z.d(31): Error: undefined identifier `size`, did you mean variable
    `size1`?

    /tmp/tmp290hbd5z.d(35): Error: undefined identifier `size`, did you mean variable
    `size1`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp290hbd5z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total_chars = 0;\n    int lst2_total_chars = 0;\n  \
    \  if(lst1.length==0 && lst2.length==0)\n    {\n        return [];\n    }\n  \
    \  else\n    {\n        foreach(i; lst1)\n        {\n            lst1_total_chars\
    \ += i.length;\n        }\n        foreach(i; lst2)\n        {\n            lst2_total_chars\
    \ += i.length;\n        }\n        if(lst1_total_chars < lst2_total_chars)\n \
    \       {\n            return lst1;\n        }\n        else if(lst1_total_chars\
    \ > lst2_total_chars)\n        {\n            return lst2;\n        }\n      \
    \  else\n        {\n            return lst1;\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(value;\
    \ lst1)\n    {\n        total_lst1 += value.length;\n    }\n    foreach(value;\
    \ lst2)\n    {\n        total_lst2 += value.length;\n    }\n    return total_lst1\
    \ < total_lst2 ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzztwifqp.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpzztwifqp.__unittest_L37_C1() [0x428460]

    ??:? void tmpzztwifqp.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int totalCharsLst1 = 0;\n    int totalCharsLst2 = 0;\n    foreach(string\
    \ item; lst1)\n    {\n        totalCharsLst1 += item.length;\n    }\n    foreach(string\
    \ item; lst2)\n    {\n        totalCharsLst2 += item.length;\n    }\n    if(totalCharsLst1\
    \ == totalCharsLst2)\n    {\n        return lst1;\n    }\n    else if(totalCharsLst1\
    \ < totalCharsLst2)\n    {\n        return lst1;\n    }\n    else\n    {\n   \
    \     return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    string[] r;\n    int l1 = 0;\n    int l2 = 0;\n    foreach(e;\
    \ lst1)\n    {\n        l1 += e.length;\n    }\n    foreach(e; lst2)\n    {\n\
    \        l2 += e.length;\n    }\n    if(l1 == l2)\n    {\n        r = lst1;\n\
    \    }\n    else if(l1 < l2)\n    {\n        r = lst1;\n    }\n    else\n    {\n\
    \        r = lst2;\n    }\n    return r;\n}\n/*\n    Write a function that accepts\
    \ a list of string and a search string, it returns all strings \n    in the list\
    \ that contains the search string.\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpar48yimd.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpar48yimd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{ \n    import std.array : map;\n    int totalCharsLst1 = lst1.map!(x\
    \ => x.length).sum;\n    int totalCharsLst2 = lst2.map!(x => x.length).sum;\n\
    \    return (totalCharsLst1 < totalCharsLst2 ? lst1 : lst2);\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbivrvtyx.d(25): Error: module `std.array` import `map` not found

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbivrvtyx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    // write your code here\n    return lst1;\n}\nunittest\n{\n \
    \   alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n \
    \   assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoqbts49j.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293e5]

    ??:? void tmpoqbts49j.__unittest_L28_C1() [0x427d63]

    ??:? void tmpoqbts49j.__modtest() [0x42864c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcbf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42913e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab6d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42abfc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42aaf9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429115]

    ??:? runModuleUnitTests [0x42da95]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429834]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{ \n    int len1 = 0;\n    foreach(string x; lst1) \n    {\n       \
    \ len1 += x.length;\n    }\n    int len2 = 0;\n    foreach(string x; lst2) \n\
    \    {\n        len2 += x.length;\n    }\n    return len1 < len2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfnprmizm.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpfnprmizm.__unittest_L37_C1() [0x428468]

    ??:? void tmpfnprmizm.__modtest() [0x428748]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    auto total1 = 0;\n    auto total2 = 0;\n    foreach(element;\
    \ lst1)\n    {\n        total1 += element.length;\n    }\n    foreach(element;\
    \ lst2)\n    {\n        total2 += element.length;\n    }\n    if(total1 < total2)\n\
    \    {\n        return lst1;\n    }\n    else if(total2 < total1)\n    {\n   \
    \     return lst2;\n    }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n\tint l1 = lst1.length;\n\tint l2 = lst2.length;\n\tint sum = 0;\n\
    \tint sum2 = 0;\n\tforeach(int i, string s; lst1)\n\t{\n\t\tsum = sum + s.length;\n\
    \t}\n\tforeach(int i, string s; lst2)\n\t{\n\t\tsum2 = sum2 + s.length;\n\t}\n\
    \tif(sum > sum2)\n\t{\n\t\treturn lst2;\n\t}\n\tif(sum2 > sum)\n\t{\n\t\treturn\
    \ lst1;\n\t}\n\telse\n\t{\n\t\treturn lst1;\n\t}\n}\n/*\n    Write a function\
    \ that accepts a string and returns a string with the first char \n    duplicated\
    \ in all following chars if the following char is a consonant.\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb6joacy7.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6joacy7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    lst1 = lst1.sort();\n    lst2 = lst2.sort();\n    int total_chars_lst1\
    \ = 0;\n    int total_chars_lst2 = 0;\n    foreach(item; lst1)\n    {\n      \
    \  total_chars_lst1 += item.length;\n    }\n    foreach(item; lst2)\n    {\n \
    \       total_chars_lst2 += item.length;\n    }\n    if(total_chars_lst1 < total_chars_lst2)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6y1r4si3.d(25): Error: no property `sort` for type `string[]`

    /tmp/tmp6y1r4si3.d(26): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6y1r4si3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    // // \u044D\u0442\u043E \u0432\u044B\u0447\u0438\u0441\u043B\
    \u0435\u043D\u0438\u0435 \u0434\u043B\u0438\u043D\u044B \u0441\u0442\u0440\u043E\
    \u043A\u0438 string.length\n    // int len1 = 0;\n    // foreach(elem; lst1)\n\
    \    // {\n    //     len1 += elem.length;\n    // }\n    // int len2 = 0;\n \
    \   // foreach(elem; lst2)\n    // {\n    //     len2 += elem.length;\n    //\
    \ }\n    // if(len1 > len2)\n    // {\n    //     return lst2;\n    // }\n   \
    \ // else if(len1 < len2)\n    // {\n    //     return lst1;\n    // }\n    //\
    \ else\n    // {\n    //     return lst1;\n    // }\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpigf65pci.d(48): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpigf65pci.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int l1 = 0;\n    foreach(i; lst1) l1 += i.length;\n    int l2\
    \ = 0;\n    foreach(i; lst2) l2 += i.length;\n    return l1 < l2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxyxt4l45.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpxyxt4l45.__unittest_L31_C1() [0x428468]

    ??:? void tmpxyxt4l45.__modtest() [0x428748]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n     int count1 = 0;\n     int count2 = 0;\n     for(int i = 0; i\
    \ < lst1.length; i++)\n        count1 += lst1[i].length;\n     for(int i = 0;\
    \ i < lst2.length; i++)\n        count2 += lst2[i].length;\n     if(count1 ==\
    \ count2) return lst1;\n     else if(count1 < count2) return lst1;\n     else\
    \ return lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    size_t total1 = lst1.length;\n    size_t total2 = lst2.length;\n\
    \    size_t sum1 = 0;\n    size_t sum2 = 0;\n    // Sum the chars in all strings\
    \ of the first array\n    foreach(el; lst1)\n    {\n        sum1 += el.length;\n\
    \    }\n    // Sum the chars in all strings of the second array\n    foreach(el;\
    \ lst2)\n    {\n        sum2 += el.length;\n    }\n    if(sum1 < sum2)\n    {\n\
    \        return lst1;\n    }\n    else if(sum2 < sum1)\n    {\n        return\
    \ lst2;\n    }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    size_t len1 = 0;\n    size_t len2 = 0;\n    foreach(s; lst1)\n\
    \        len1 += s.length;\n    foreach(s; lst2)\n        len2 += s.length;\n\
    \    return len1 < len2 ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate =\
    \ total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp331hj7jb.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294cd]

    ??:? void tmp331hj7jb.__unittest_L33_C1() [0x428454]

    ??:? void tmp331hj7jb.__modtest() [0x428734]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dda7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac55]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ace4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4291fd]

    ??:? runModuleUnitTests [0x42db7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42991c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int a = 0;\n    int b = 0;\n    foreach(string a; lst1)\n   \
    \ {\n        a += a.length;\n    }\n    foreach(string b; lst2)\n    {\n     \
    \   b += b.length;\n    }\n    if(a == b)\n    {\n        return lst1;\n    }\n\
    \    else if(a > b)\n    {\n        return lst2;\n    }\n    else if(a < b)\n\
    \    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx0jtcuqv.d(27): Error: variable `a` is shadowing variable `tmpx0jtcuqv.total_match.a`

    /tmp/tmpx0jtcuqv.d(29): Error: incompatible types for `(a) += (a.length)`: `string`
    and `ulong`

    /tmp/tmpx0jtcuqv.d(31): Error: variable `b` is shadowing variable `tmpx0jtcuqv.total_match.b`

    /tmp/tmpx0jtcuqv.d(33): Error: incompatible types for `(b) += (b.length)`: `string`
    and `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx0jtcuqv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    string[] result = [];\n\
    \    foreach(elem; lst1)\n    {\n        sum1 += elem.length;\n    }\n    foreach(elem;\
    \ lst2)\n    {\n        sum2 += elem.length;\n    }\n    if(sum1 == sum2)\n  \
    \  {\n        return lst1;\n    }\n    else if(sum1 > sum2)\n    {\n        return\
    \ lst2;\n    }\n    else if(sum1 < sum2)\n    {\n        return lst1;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = total_match;\n\n  \
    \  assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"],\
    \ [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int l1 = 0;\n    int l2 = 0;\n    foreach(a; lst1)\n    {\n \
    \       l1 += a.length;\n    }\n    foreach(a; lst2)\n    {\n        l2 += a.length;\n\
    \    }\n    if(l1 < l2)\n    {\n        return lst1;\n    }\n    else\n    {\n\
    \        return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvhe41_tg.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpvhe41_tg.__unittest_L44_C1() [0x428464]

    ??:? void tmpvhe41_tg.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_lst1 = total(lst1);\n    int total_lst2 = total(lst2);\n\
    \    if (total_lst1 < total_lst2)\n        return lst1;\n    else if (total_lst1\
    \ > total_lst2)\n        return lst2;\n    else \n        return lst1;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkdmevhi9.d(25): Error: undefined identifier `total`

    /tmp/tmpkdmevhi9.d(26): Error: undefined identifier `total`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdmevhi9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    string[] the_list\
    \ = [];\n    foreach(value; lst1)\n    {\n        lst1_total += value.length;\n\
    \    }\n    foreach(value; lst2)\n    {\n        lst2_total += value.length;\n\
    \    }\n    if(lst1_total == lst2_total)\n    {\n        the_list = lst1;\n  \
    \  }\n    else if(lst1_total < lst2_total)\n    {\n        the_list = lst1;\n\
    \    }\n    else if(lst1_total > lst2_total)\n    {\n        the_list = lst2;\n\
    \    }\n    return the_list;\n}\n/*\n    Write a function that accepts an array\
    \ of strings. \n    The function should return the array of strings\n    with\
    \ all the characters inverted from lower case to upper case and vice versa.\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3cuj4477.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3cuj4477.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    if (lst1.length < lst2.length)\
    \ \n    {\n        return lst1;\n    }\n    else if (lst1.length > lst2.length)\
    \ \n    {\n        return lst2;\n    }\n    else \n    {\n        foreach (x;\
    \ lst1) \n        {\n            sum1 += x.length;\n        }\n        foreach\
    \ (x; lst2) \n        {\n            sum2 += x.length;\n        }\n        if\
    \ (sum1 > sum2) \n        {\n            return lst2;\n        }\n        else\
    \ if (sum1 < sum2) \n        {\n            return lst1;\n        }\n        else\
    \ \n        {\n            return lst1;\n        }\n    }\n}\nunittest\n{\n  \
    \  alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxo3kua9a.d(68): unittest failure

    ----------------

    ??:? _d_unittestp [0x429525]

    ??:? void tmpxo3kua9a.__unittest_L59_C1() [0x428397]

    ??:? void tmpxo3kua9a.__modtest() [0x428790]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddff]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42927e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42acad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad3c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429255]

    ??:? runModuleUnitTests [0x42dbd5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429974]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    auto len1 = lst1.length;\n    auto len2 = lst2.length;\n    auto\
    \ sum1 = 0;\n    auto sum2 = 0;\n    foreach(s; lst1)\n    {\n        sum1 +=\
    \ s.length;\n    }\n    foreach(s; lst2)\n    {\n        sum2 += s.length;\n \
    \   }\n    return sum1 < sum2 ? lst1 : (sum1 > sum2 ? lst2 : lst1);\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    \n    int count1 = 0;\n    int count2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        count1 += s.length;\n    }\n    foreach(string s; lst2)\n\
    \    {\n        count2 += s.length;\n    }\n    if(count1 < count2)\n    {\n \
    \       return lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5swqfvk9.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp5swqfvk9.__unittest_L45_C1() [0x428464]

    ??:? void tmp5swqfvk9.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int a1 = lst1.reduce!((acc, x) => acc + x.length)(0);\n    int\
    \ a2 = lst2.reduce!((acc, x) => acc + x.length)(0);\n    return a1 <= a2 ? lst1\
    \ : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_gul57su.d(25): Error: no property `reduce` for type `string[]`

    /tmp/tmp_gul57su.d(26): Error: no property `reduce` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_gul57su.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n\tstatic assert(lst1.length == lst2.length, \"Error, the length of\
    \ the lists should be the same.\");\n\t\n\t// number of chars in all strings of\
    \ lst1 \n\tint lst1_total = 0;\n\t// number of chars in all strings of lst2\n\t\
    int lst2_total = 0;\n\t\n\tforeach(i; 0 .. lst1.length)\n\t{\n\t\tlst1_total +=\
    \ lst1[i].length;\n\t\tlst2_total += lst2[i].length;\n\t}\n\t\n\tif(lst1_total\
    \ < lst2_total)\n\t{\n\t\treturn lst1;\n\t}\n\telse\n\t{\n\t\treturn lst2;\n\t\
    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzt84xgxx.d(25): Error: variable `lst1` cannot be read at compile
    time

    /tmp/tmpzt84xgxx.d(25):        while evaluating: `static assert(lst1.length ==
    lst2.length)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzt84xgxx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1Count = 0;\n    int lst2Count = 0;\n    foreach(string\
    \ str; lst1)\n    {\n        lst1Count += str.length;\n    }\n    foreach(string\
    \ str; lst2)\n    {\n        lst2Count += str.length;\n    }\n    return lst1Count\
    \ < lst2Count ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk61gt35i.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpk61gt35i.__unittest_L37_C1() [0x428460]

    ??:? void tmpk61gt35i.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n  bool len_lst1 = true;\n  int sum1 = 0;\n  int sum2 = 0;\n  foreach(string\
    \ str; lst1)\n  {\n    sum1 += str.length;\n  }\n  foreach(string str; lst2)\n\
    \  {\n    sum2 += str.length;\n  }\n  if(sum1 > sum2)\n  {\n    len_lst1 = false;\n\
    \  }\n  if(len_lst1)\n  {\n    return lst1;\n  }\n  else\n  {\n    return lst2;\n\
    \  }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length <= lst2.length)\n    {\n        foreach(i; lst1)\n\
    \        {\n            if(!lst2.canFind(i))\n            {\n                lst1\
    \ = lst1.remove(i);\n            }\n        }\n        return lst1;\n    }\n \
    \   else\n    {\n        foreach(i; lst2)\n        {\n            if(!lst1.canFind(i))\n\
    \            {\n                lst2 = lst2.remove(i);\n            }\n      \
    \  }\n        return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8te4qnfa.d(29): Error: no property `canFind` for type `string[]`

    /tmp/tmp8te4qnfa.d(31): Error: no property `remove` for type `string[]`

    /tmp/tmp8te4qnfa.d(40): Error: no property `canFind` for type `string[]`

    /tmp/tmp8te4qnfa.d(42): Error: no property `remove` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8te4qnfa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return [];\n\
    \    if (totalChars(lst1) < totalChars(lst2))\n        return lst1;\n    else\n\
    \        return lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6efyz0p.d(27): Error: undefined identifier `totalChars`

    /tmp/tmpr6efyz0p.d(27): Error: undefined identifier `totalChars`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6efyz0p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_char_lst1 = 0;\n    int total_char_lst2 = 0;\n    foreach(char\
    \ i; lst1)\n    {\n        total_char_lst1 += i.length;\n    }\n    foreach(char\
    \ j; lst2)\n    {\n        total_char_lst2 += j.length;\n    }\n    return (total_char_lst1\
    \ < total_char_lst2) ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpygchdo_g.d(27): Error: cannot implicitly convert expression `__r73[__key74]`
    of type `string` to `char`

    /tmp/tmpygchdo_g.d(29): Error: no property `length` for type `char`

    /tmp/tmpygchdo_g.d(31): Error: cannot implicitly convert expression `__r75[__key76]`
    of type `string` to `char`

    /tmp/tmpygchdo_g.d(33): Error: no property `length` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygchdo_g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int t1 = 0;\n    foreach(string s; lst1)\n    {\n        t1 +=\
    \ s.length;\n    }\n    int t2 = 0;\n    foreach(string s; lst2)\n    {\n    \
    \    t2 += s.length;\n    }\n    return t1 > t2 ? lst2 : t1 < t2 ? lst1 : lst1;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n  int lst1_total = 0;\n  int lst2_total = 0;\n  foreach(string str;\
    \ lst1)\n    lst1_total += str.length;\n  foreach(string str; lst2)\n    lst2_total\
    \ += str.length;\n  return lst1_total < lst2_total ? lst1 : lst2;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpunnbpgoa.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpunnbpgoa.__unittest_L33_C1() [0x428460]

    ??:? void tmpunnbpgoa.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    // the actual length of string in a list, and not the actual\
    \ length of the list.\n    // it is a total of all the chars\n    int length1\
    \ = 0;\n    int length2 = 0;\n    foreach(i; lst1)\n    {\n        length1 +=\
    \ i.length;\n    }\n    foreach(i; lst2)\n    {\n        length2 += i.length;\n\
    \    }\n    if(length1 < length2)\n    {\n        return lst1;\n    }\n    else\
    \ if(length1 > length2)\n    {\n        return lst2;\n    }\n    else\n    {\n\
    \        return lst1;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_count = 0;\n    int lst2_count = 0;\n    for (int i\
    \ = 0; i < lst1.length; i++)\n    {\n        lst1_count += lst1[i].length;\n \
    \   }\n    for (int i = 0; i < lst2.length; i++)\n    {\n        lst2_count +=\
    \ lst2[i].length;\n    }\n    return lst1_count < lst2_count ? lst1 : lst2;\n\
    }\n/*\n    Write a function that accepts two strings and returns their concatenation\
    \ except\n    the first char of each.\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpupqkt9n2.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpupqkt9n2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int len1 = 0;\n    int len2 = 0;\n    foreach(str; lst1) len1\
    \ += str.length;\n    foreach(str; lst2) len2 += str.length;\n    return len1\
    \ == len2 ? lst1 : len1 < len2 ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    string[] temp = lst1.dup;\n    int total1 = 0;\n    int total2\
    \ = 0;\n    foreach(string s; lst1)\n    {\n        total1 += s.length;\n    }\n\
    \    foreach(string s; lst2)\n    {\n        total2 += s.length;\n    }\n    return\
    \ (total1 < total2) ? temp : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvz1fu9_5.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x429abd]

    ??:? void tmpvz1fu9_5.__unittest_L38_C1() [0x428654]

    ??:? void tmpvz1fu9_5.__modtest() [0x428ab0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3ff]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4297c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b391]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42b420]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42b31d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429799]

    ??:? runModuleUnitTests [0x42e1d5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429f60]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    // Write your code here...\n    string[] res;\n    int sum1 =\
    \ 0;\n    int sum2 = 0;\n    foreach(element; lst1)\n    {\n        sum1 += element.length;\n\
    \    }\n    foreach(element; lst2)\n    {\n        sum2 += element.length;\n \
    \   }\n    if(sum1 > sum2)\n    {\n        res = lst2;\n    }\n    else if(sum1\
    \ < sum2)\n    {\n        res = lst1;\n    }\n    else\n    {\n        res = lst1;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{ \n    if (lst1.length == 0 && lst2.length == 0)\n        return [];\n\
    \    int tot1 = 0;\n    foreach (i; 0 .. lst1.length)\n        tot1 += lst1[i].length;\n\
    \    int tot2 = 0;\n    foreach (i; 0 .. lst2.length)\n        tot2 += lst2[i].length;\n\
    \    if (tot1 == tot2)\n        return lst1;\n    if (tot1 < tot2)\n        return\
    \ lst1;\n    else\n        return lst2;\n}\nunittest\n{\n    alias candidate =\
    \ total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int len_lst1 = 0;\n    int len_lst2 = 0;\n    foreach(string\
    \ i; lst1)\n    {\n        len_lst1 += i.length;\n    }\n    foreach(string i;\
    \ lst2)\n    {\n        len_lst2 += i.length;\n    }\n    return len_lst1 < len_lst2\
    \ ? lst1 : lst2;\n}\n/*\nunittest\n{\n    alias candidate = total_match;\n\n \
    \   assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps1vvwf8_.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps1vvwf8_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    // code here...\n    bool a = lst1.reduce!(a => a.length) < lst2.reduce!(a\
    \ => a.length);\n    return a ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe_t9l7hw.d(26): Error: no property `reduce` for type `string[]`

    /tmp/tmpe_t9l7hw.d(26): Error: no property `reduce` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_t9l7hw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1Len=0;\n    int lst2Len=0;\n    int minLen=0;\n    foreach(i;\
    \ lst1)\n    {\n        lst1Len += i.length;\n    }\n    foreach(i; lst2)\n  \
    \  {\n        lst2Len += i.length;\n    }\n    if(lst1Len<lst2Len)\n    {\n  \
    \      return lst1;\n    }\n    else if(lst1Len>lst2Len)\n    {\n        return\
    \ lst2;\n    }\n    else if(lst1Len==lst2Len)\n    {\n        return lst1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp01tqqq0u.d(23): Error: function `tmp01tqqq0u.total_match` no `return
    exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp01tqqq0u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int l1 = 0;\n    int l2 = 0;\n    for (int i = 0; i < lst1.length;\
    \ i++)\n    {\n        l1 += lst1[i].length;\n    }\n    for (int i = 0; i < lst2.length;\
    \ i++)\n    {\n        l2 += lst2[i].length;\n    }\n    if (l1 == l2)\n    {\n\
    \        return lst1;\n    }\n    else if (l1 < l2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int count1 = 0;\n    int count2 = 0;\n    foreach(string i; lst1)\n\
    \    {\n        count1 += i.length;\n    }\n    foreach(string j; lst2)\n    {\n\
    \        count2 += j.length;\n    }\n    if(count1 <= count2)\n    {\n       \
    \ return lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    static string[] match(string[] lst1, string[] lst2)\n    {\n\
    \        if (lst1.length < lst2.length)\n            return lst1;\n        else\
    \ if (lst1.length > lst2.length)\n            return lst2;\n        else\n   \
    \         return lst1;\n    }\n    string[] result;\n    int lst1_total = reduce!(\"\
    a + b.length\")(0, lst1);\n    int lst2_total = reduce!(\"a + b.length\")(0, lst2);\n\
    \    if (lst1_total < lst2_total)\n        result = lst1;\n    else if (lst1_total\
    \ > lst2_total)\n        result = lst2;\n    else\n        result = match(lst1,\
    \ lst2);\n    return result;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp75ulwyrs.d(35): Error: template instance `reduce!"a + b.length"`
    template `reduce` is not defined

    /tmp/tmp75ulwyrs.d(36): Error: template instance `reduce!"a + b.length"` template
    `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp75ulwyrs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return lst1;\n\
    \    else if (lst1.length == 0)\n        return lst2;\n    else if (lst2.length\
    \ == 0)\n        return lst1;\n    else\n    {\n        int tot1 = 0;\n      \
    \  int tot2 = 0;\n        for (int i = 0; i < lst1.length; i++)\n            tot1\
    \ += lst1[i].length;\n        for (int i = 0; i < lst2.length; i++)\n        \
    \    tot2 += lst2[i].length;\n        if (tot1 < tot2)\n            return lst1;\n\
    \        else if (tot2 < tot1)\n            return lst2;\n        else\n     \
    \       return lst1;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6i3ywi7n.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x42950d]

    ??:? void tmp6i3ywi7n.__unittest_L47_C1() [0x42853f]

    ??:? void tmp6i3ywi7n.__modtest() [0x428778]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42de5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429266]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ad09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42923d]

    ??:? runModuleUnitTests [0x42dc31]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4299d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n\tint sum_lst1 = 0;\n\tint sum_lst2 = 0;\n\tforeach(string lst1_ele;\
    \ lst1)\n\t{\n\t\tsum_lst1 += lst1_ele.length;\n\t}\n\tforeach(string lst2_ele;\
    \ lst2)\n\t{\n\t\tsum_lst2 += lst2_ele.length;\n\t}\n\t\n\tif(sum_lst1 > sum_lst2)\n\
    \t{\n\t\treturn lst2;\n\t}\n\telse if(sum_lst1 < sum_lst2)\n\t{\n\t\treturn lst1;\n\
    \t}\n\telse\n\t{\n\t\treturn lst1;\n\t}\n}\nunittest\n{\n    alias candidate =\
    \ total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int l1 = lst1.length;\n    int l2 = lst2.length;\n    int s1\
    \ = lst1.sum!(x => x.length);\n    int s2 = lst2.sum!(x => x.length);\n    if\
    \ (s1 > s2)\n        return lst2;\n    if (s2 > s1)\n        return lst1;\n  \
    \  return lst1;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpneuaogrc.d(25): Error: cannot implicitly convert expression `lst1.length`
    of type `ulong` to `int`

    /tmp/tmpneuaogrc.d(26): Error: cannot implicitly convert expression `lst2.length`
    of type `ulong` to `int`

    /tmp/tmpneuaogrc.d(27): Error: no property `sum` for type `string[]`

    /tmp/tmpneuaogrc.d(28): Error: no property `sum` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpneuaogrc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164328
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int length = 0;\n    foreach(string i; lst1) length += i.length;\n\
    \    int length2 = 0;\n    foreach(string i; lst2) length2 += i.length;\n    if(length\
    \ <= length2) return lst1;\n    else return lst2;\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total_len = 0;\n    foreach(elem; lst1) \n    {\n  \
    \      lst1_total_len += elem.length;\n    }\n    int lst2_total_len = 0;\n  \
    \  foreach(elem; lst2) \n    {\n        lst2_total_len += elem.length;\n    }\n\
    \    if(lst1_total_len < lst2_total_len) \n    {\n        return lst1;\n    }\
    \ \n    else if(lst1_total_len > lst2_total_len) \n    {\n        return lst2;\n\
    \    } \n    else \n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    // if the two arrays have the same number of chars, return the\
    \ first array.\n    if (lst1.length == lst2.length) \n    {\n        return lst1;\n\
    \    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzywsjg3q.d(30): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzywsjg3q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length > lst2.length)\n        return lst2;\n    if\
    \ (lst1.length < lst2.length)\n        return lst1;\n    return lst1;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp13a7mohm.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429405]

    ??:? void tmp13a7mohm.__unittest_L31_C1() [0x427d87]

    ??:? void tmp13a7mohm.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcdf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42915e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ac1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ab19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429135]

    ??:? runModuleUnitTests [0x42dab5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429854]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    return [];\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp68d_jk3s.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293e5]

    ??:? void tmp68d_jk3s.__unittest_L27_C1() [0x427d63]

    ??:? void tmp68d_jk3s.__modtest() [0x42864c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcbf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42913e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab6d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42abfc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42aaf9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429115]

    ??:? runModuleUnitTests [0x42da95]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429834]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n  static int total_string_count(in string[] a)\n  {\n    int total\
    \ = 0;\n    foreach(in string s; a)\n    {\n      total += s.length;\n    }\n\
    \    return total;\n  }\n  enum a = total_string_count(lst1);\n  enum b = total_string_count(lst2);\n\
    \  if(a < b) return lst1;\n  if(a > b) return lst2;\n  return lst1;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp68tnhmd4.d(28): Error: basic type expected, not `in`

    /tmp/tmp68tnhmd4.d(28): Error: no identifier for declarator `_error_`

    /tmp/tmp68tnhmd4.d(28): Error: found `in` when expecting `;`

    /tmp/tmp68tnhmd4.d(28): Error: found `s` when expecting `)`

    /tmp/tmp68tnhmd4.d(28): Error: use `{ }` for an empty statement, not `;`

    /tmp/tmp68tnhmd4.d(28): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68tnhmd4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length == 0)\n        return lst1;\n    else if(lst2.length\
    \ == 0)\n        return lst2;\n    else if(lst1.length > lst2.length)\n      \
    \  return lst2;\n    else if(lst1.length < lst2.length)\n        return lst1;\n\
    \    else\n    {\n        int sum_lst1 = 0;\n        int sum_lst2 = 0;\n     \
    \   foreach(i; lst1)\n            sum_lst1 += i.length;\n        foreach(i; lst2)\n\
    \            sum_lst2 += i.length;\n        if(sum_lst1 == sum_lst2)\n       \
    \     return lst1;\n        else if(sum_lst1 > sum_lst2)\n            return lst2;\n\
    \        else\n            return lst1;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq30kd6r5.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x42955d]

    ??:? void tmpq30kd6r5.__unittest_L49_C1() [0x4283cf]

    ??:? void tmpq30kd6r5.__modtest() [0x4287c8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42de37]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4292b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ace5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac71]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42928d]

    ??:? runModuleUnitTests [0x42dc0d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4299ac]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    size_t l1 = lst1.length;\n    size_t l2 = lst2.length;\n    if\
    \ (l1 == 0 && l2 == 0) \n    {\n        return [];\n    }\n    if (l1 == 0 &&\
    \ l2 != 0) \n    {\n        return lst2;\n    }\n    if (l1 != 0 && l2 == 0) \n\
    \    {\n        return lst1;\n    }\n    size_t total_chars_1 = 0;\n    foreach\
    \ (str; lst1) \n    {\n        total_chars_1 += str.length;\n    }\n    size_t\
    \ total_chars_2 = 0;\n    foreach (str; lst2) \n    {\n        total_chars_2 +=\
    \ str.length;\n    }\n    return total_chars_1 < total_chars_2 ? lst1 : lst2;\n\
    }\n/*\n    Write a function that accepts a string and a char, then returns the\
    \ index of the \n    first found char in the string.\n    \n    Example\n    >>>\
    \ find_char(\"hello\", 'e')\n    1\n    >>> find_char(\"hello\", 'l')\n    2\n\
    \    >>> find_char(\"hello\", 'h')\n    0\n    >>> find_char(\"hello\", 'z')\n\
    \    -1\n    >>> find_char(\"hello\", 'o')\n    4\n    >>> find_char(\"hello\"\
    , 'l')\n    2\n*/\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4te6payz.d(79): unittest failure

    ----------------

    ??:? _d_unittestp [0x42954d]

    ??:? void tmp4te6payz.__unittest_L69_C1() [0x4284d4]

    ??:? void tmp4te6payz.__modtest() [0x4287b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42de27]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4292a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42acd5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac61]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42927d]

    ??:? runModuleUnitTests [0x42dbfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42999c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int x = 0;\n    int y = 0;\n    for (int i = 0; i < lst1.length;\
    \ i++) \n    {\n        x += lst1[i].length;\n    }\n    for (int i = 0; i < lst2.length;\
    \ i++) \n    {\n        y += lst2[i].length;\n    }\n    if (x < y) \n    {\n\
    \        return lst1;\n    }\n    else \n    {\n        return lst2;\n    }\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2ebd1ssi.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294ad]

    ??:? void tmp2ebd1ssi.__unittest_L44_C1() [0x428434]

    ??:? void tmp2ebd1ssi.__modtest() [0x428714]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddfb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429206]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42aca9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad38]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4291dd]

    ??:? runModuleUnitTests [0x42dbd1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429970]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n  if (lst1.length == 0 && lst2.length == 0)\n  {\n    return lst1;\n\
    \  }\n  else\n  {\n    int lst1Sum = 0;\n    int lst2Sum = 0;\n    foreach(item;\
    \ lst1)\n    {\n      lst1Sum += item.length;\n    }\n    foreach(item; lst2)\n\
    \    {\n      lst2Sum += item.length;\n    }\n    if (lst1Sum < lst2Sum)\n   \
    \ {\n      return lst1;\n    }\n    else\n    {\n      return lst2;\n    }\n \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0bzikxc4.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294f5]

    ??:? void tmp0bzikxc4.__unittest_L51_C1() [0x428480]

    ??:? void tmp0bzikxc4.__modtest() [0x428760]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddcf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42924e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429225]

    ??:? runModuleUnitTests [0x42dba5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    // your code here\n    return null;\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoiun1b0r.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293d5]

    ??:? void tmpoiun1b0r.__unittest_L28_C1() [0x427d53]

    ??:? void tmpoiun1b0r.__modtest() [0x42863c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42912e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42abec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42aae9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429105]

    ??:? runModuleUnitTests [0x42da85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429824]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total_length = 0;\n    int lst2_total_length = 0;\n\
    \    foreach(elem; lst1)\n    {\n        lst1_total_length += elem.length;\n \
    \   }\n    foreach(elem; lst2)\n    {\n        lst2_total_length += elem.length;\n\
    \    }\n    if(lst1_total_length > lst2_total_length)\n    {\n        return lst2;\n\
    \    }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string x; lst1)\n\
    \    {\n        sum1 += x.length;\n    }\n    foreach(string x; lst2)\n    {\n\
    \        sum2 += x.length;\n    }\n    if(sum1 < sum2)\n    {\n        return\
    \ lst1;\n    }\n    else if(sum1 > sum2)\n    {\n        return lst2;\n    }\n\
    \    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1Total = lst1.map!(a => a.length).reduce!(a => a + b)(0);\n\
    \    int lst2Total = lst2.map!(a => a.length).reduce!(a => a + b)(0);\n    return\
    \  lst1Total < lst2Total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate =\
    \ total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwqftpjlr.d(25): Error: no property `map` for type `string[]`

    /tmp/tmpwqftpjlr.d(26): Error: no property `map` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqftpjlr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    string[] res = new string[];\n    int sum1 = 0;\n    int sum2\
    \ = 0;\n    int temp1 = 0;\n    int temp2 = 0;\n    for(int i = 0; i < lst1.length;\
    \ i++)\n    {\n        temp1 = lst1[i].length;\n        sum1 += temp1;\n    }\n\
    \    for(int k = 0; k < lst2.length; k++)\n    {\n        temp2 = lst2[k].length;\n\
    \        sum2 += temp2;\n    }\n    if(sum1 > sum2)\n    {\n        res = lst2;\n\
    \    }\n    else if(sum1 < sum2)\n    {\n        res = lst1;\n    }\n    else\
    \ if(sum1 == sum2)\n    {\n        res = lst1;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg4n3d656.d(25): Error: new can only create structs, dynamic arrays
    or class objects, not `string[]`''s

    /tmp/tmpg4n3d656.d(32): Error: cannot implicitly convert expression `lst1[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpg4n3d656.d(37): Error: cannot implicitly convert expression `lst2[cast(ulong)k].length`
    of type `ulong` to `int`

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = foldl!(a => a + sum, lst1);\n    int sum2 = foldl!(a\
    \ => a + sum, lst2);\n    if (sum1 > sum2)\n        return lst2;\n    else\n \
    \       return lst1;\n}\nunittest\n{\n    alias candidate = total_match;\n\n \
    \   assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr1fhwhxd.d(25): Error: template instance `foldl!((a) => a + sum,
    lst1)` template `foldl` is not defined

    /tmp/tmpr1fhwhxd.d(26): Error: template instance `foldl!((a) => a + sum, lst2)`
    template `foldl` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr1fhwhxd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{ \n    if (lst1.length == 0 && lst2.length == 0)\n        return [];\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpepnaxvtr.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpepnaxvtr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n\tint char_count1 = 0;\n\tint char_count2 = 0;\n\tforeach(string\
    \ str; lst1)\n\t{\n\t\tchar_count1 += str.length;\n\t}\n\tforeach(string str;\
    \ lst2)\n\t{\n\t\tchar_count2 += str.length;\n\t}\n\tif(char_count1 == char_count2)\n\
    \t{\n\t\treturn lst1;\n\t}\n\telse if(char_count1 < char_count2)\n\t{\n\t\treturn\
    \ lst1;\n\t}\n\telse\n\t{\n\t\treturn lst2;\n\t}\n}\n// write a function that\
    \ accepts two string arrays, \n// it should return true if all the strings in\
    \ the first array occur in the second array,\n// false otherwise.\n// Examples\n\
    // >>> is_subset([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\", \"d\"])\n// true\n\
    // >>> is_subset([\"a\", \"d\", \"c\"], [\"a\", \"b\", \"c\", \"d\"])\n// false\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string str; lst1)\n\
    \    {\n        sum1 += str.length;\n    }\n    foreach(string str; lst2)\n  \
    \  {\n        sum2 += str.length;\n    }\n    if(sum1 > sum2)\n    {\n       \
    \ return lst2;\n    }\n    return lst1;\n}\n/*\n    Write a function that accepts\
    \ a string and returns a string array of \n    3 strings where the first string\
    \ is the first part of the word, \n    the second string is the last part of the\
    \ word, and the third string \n    is the middle part of the word.\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg77oewpy.d(41): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg77oewpy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length > lst2.length) \n    {\n        return lst2;\n\
    \    }\n    else if (lst1.length < lst2.length) \n    {\n        return lst1;\n\
    \    }\n    else \n    {\n        int total_chars_in_lst1 = 0;\n        int total_chars_in_lst2\
    \ = 0;\n        foreach (string s; lst1) \n        {\n            total_chars_in_lst1\
    \ += s.length;\n        }\n        foreach (string s; lst2) \n        {\n    \
    \        total_chars_in_lst2 += s.length;\n        }\n        if (total_chars_in_lst1\
    \ > total_chars_in_lst2) \n        {\n            return lst2;\n        }\n  \
    \      else if (total_chars_in_lst1 < total_chars_in_lst2) \n        {\n     \
    \       return lst1;\n        }\n        else \n        {\n            return\
    \ lst1;\n        }\n    }\n}\n/*\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0067o9hp.d(59): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0067o9hp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    //TODO\n    string[] result = new string[0];\n    if (lst1.length\
    \ != 0 && lst2.length != 0)\n    {\n        int lst1_charCount = 0;\n        int\
    \ lst2_charCount = 0;\n        foreach (string elem in lst1)\n        {\n    \
    \        lst1_charCount += elem.length;\n        }\n        foreach (string elem\
    \ in lst2)\n        {\n            lst2_charCount += elem.length;\n        }\n\
    \        if (lst1_charCount < lst2_charCount)\n        {\n            result =\
    \ lst1;\n        }\n        else if (lst1_charCount > lst2_charCount)\n      \
    \  {\n            result = lst2;\n        }\n        else\n        {\n       \
    \     result = lst1;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n \
    \   assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvraw3jci.d(31): Error: found `in` when expecting `;`

    /tmp/tmpvraw3jci.d(35): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvraw3jci.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{ \n    int sum1 = 0;\n    int sum2 = 0;\n    int diff = 0;\n    foreach(i;\
    \ lst1)\n    {\n        sum1 += i.length;\n    }\n    foreach(i; lst2)\n    {\n\
    \        sum2 += i.length;\n    }\n    if(sum1 == sum2)\n    {\n        return\
    \ lst1;\n    }\n    if(sum1 < sum2)\n    {\n        return lst1;\n    }\n    else\
    \ if(sum1 > sum2)\n    {\n        return lst2;\n    }\n    else\n    {\n     \
    \   return lst1;\n    }\n} \n \nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int size1 = 0;\n    foreach(string s; lst1)\n    {\n        size1\
    \ += s.length;\n    }\n    int size2 = 0;\n    foreach(string s; lst2)\n    {\n\
    \        size2 += s.length;\n    }\n    return size1 <= size2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    alias std.algorithm.iteration.each;\n    auto sum1 = (lst1.each!(a\
    \ => a.length)).reduce!((a, b) => a + b)(0);\n    auto sum2 = (lst2.each!(a =>\
    \ a.length)).reduce!((a, b) => a + b)(0);\n    if (sum1 < sum2)\n        return\
    \ lst1;\n    else if (sum1 > sum2)\n        return lst2;\n    else\n        return\
    \ lst1;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoqhtn9ea.d(25): Error: no identifier for declarator `std.algorithm.iteration.each`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoqhtn9ea.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{ \n    auto lst = lst1.length > lst2.length ? lst1 : lst2;\n    string[]\
    \ result = [];\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwjkdmvs7.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwjkdmvs7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n\tint a = 0;\n\tint b = 0;\n\tint i = 0;\n\tforeach(string s; lst1)\
    \ \n\t{\n\t\ta += s.length;\n\t}\n\tforeach(string s; lst2) \n\t{\n\t\tb += s.length;\n\
    \t}\n\t\n\tif(a < b) \n\t{\n\t\treturn lst1;\n\t}\n\telse \n\t{\n\t\treturn lst2;\n\
    \t}\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptvz6cl1_.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmptvz6cl1_.__unittest_L46_C1() [0x428464]

    ??:? void tmptvz6cl1_.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int str1 = 0;\n    int str2 = 0;\n    string[] result = {};\n\
    \    foreach(string s1; lst1) \n    {\n        str1 += s1.length;\n    }\n   \
    \ foreach(string s2; lst2) \n    {\n        str2 += s2.length;\n    }\n    if(str1\
    \ < str2) \n    {\n        result = lst1;\n    }\n    else if(str1 > str2) \n\
    \    {\n        result = lst2;\n    }\n    else if(str1 == str2) \n    {\n   \
    \     result = lst1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp25e0nmjw.d(27): Error: a struct is not a valid initializer for
    a `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp25e0nmjw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    lst1_total\
    \ = lst1.map!(a => a.length).reduce!(a => a + b).array()[0];\n    lst2_total =\
    \ lst2.map!(a => a.length).reduce!(a => a + b).array()[0];\n    if (lst1_total\
    \ < lst2_total) \n    {\n        return lst1;\n    }\n    return lst2;\n}\n//\
    \ import std.stdio;\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnq2ixixq.d(27): Error: no property `map` for type `string[]`

    /tmp/tmpnq2ixixq.d(28): Error: no property `map` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnq2ixixq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n\t//TODO: Put your solution here\n\t\treturn lst1;\n}\n/*\n    You\
    \ are given the name of a city, a starting year number (e.g. 1992),\n    and an\
    \ ending year number (e.g. 2013)\n    For every year between those two years,\n\
    \    return the name of the city, and the year separated by a colon, e.g.\n  \
    \  \"Athens:1992\"\n    If the starting year is later than the ending year,\n\
    \    swap the two years. \n    If the starting year is the same as the ending\
    \ year,\n    return an empty array.\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy7325i4n.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy7325i4n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length > lst2.length)\n        return lst2;\n    else\
    \ if (lst1.length < lst2.length)\n        return lst1;\n    else\n        return\
    \ lst1;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbxejf5nf.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429405]

    ??:? void tmpbxejf5nf.__unittest_L32_C1() [0x427d87]

    ??:? void tmpbxejf5nf.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcdf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42915e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ac1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ab19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429135]

    ??:? runModuleUnitTests [0x42dab5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429854]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    // write your code here\n    return lst1;\n}\nunittest\n{\n \
    \   alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n \
    \   assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoqbts49j.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293e5]

    ??:? void tmpoqbts49j.__unittest_L28_C1() [0x427d63]

    ??:? void tmpoqbts49j.__modtest() [0x42864c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcbf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42913e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab6d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42abfc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42aaf9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429115]

    ??:? runModuleUnitTests [0x42da95]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429834]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164328
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    /*\n        Do not use a built-in function.\n        Do not use\
    \ a for loop.\n        Do not use a while loop.\n        Do not use a do-while\
    \ loop.\n        Do not use an if statement.\n        Do not use a switch statement.\n\
    \        Do not use a goto statement.\n        Do not use a break statement.\n\
    \        Do not use a continue statement.\n        Do not use a return statement.\n\
    \        Do not use a ternary operator.\n        Do not use a try-catch block.\n\
    \        Do not use a else statement.\n        Do not use a standard input/output\
    \ library.\n        Do not use an array.\n        Do not use an object.\n    \
    \    Do not use a struct.\n        Do not use a class.\n        Do not use a typedef.\n\
    \        Do not use a static assertion.\n        Do not use a static if.\n   \
    \     Do not use a static foreach.\n        Do not use a static switch.\n    \
    \    Do not use a static while.\n        Do not use a static for.\n        Do\
    \ not use a static do-while.\n        Do not use a foreach statement.\n      \
    \  Do not use a switch statement.\n        Do not use a goto statement.\n    \
    \    Do not use a break statement.\n        Do not use a continue statement.\n\
    \        Do not use a return statement.\n        Do not use a ternary operator.\n\
    \        Do not use a try-catch block.\n        Do not use a else statement.\n\
    \        Do not use a standard input/output library.\n        Do not use an array.\n\
    \        Do not use an object.\n        Do not use a struct.\n        Do not use\
    \ a class.\n        Do not use a typedef.\n        Do not use a static assertion.\n\
    \        Do not use a static if.\n        Do not use a static foreach.\n     \
    \   Do not use a static switch.\n        Do not use a static while.\n        Do\
    \ not use a static for.\n        Do not use a static do-while.\n        Do not\
    \ use a foreach statement.\n        Do not use a switch statement.\n        Do\
    \ not use a goto statement.\n        Do not use a break statement.\n        Do\
    \ not use a continue statement.\n        Do not use a return statement.\n    \
    \    Do\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpstpru0da.d(25): Error: unterminated /* */ comment

    /tmp/tmpstpru0da.d(95): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpstpru0da.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int num1 = 0;\n    int num2 = 0;\n    foreach(string element;\
    \ lst1)\n    {\n        num1 += element.length;\n    }\n    foreach(string element;\
    \ lst2)\n    {\n        num2 += element.length;\n    }\n    return (num1 < num2)\
    \ ? lst1 : lst2;\n}\n/*\n \n    Write a function that accepts a list of integers\
    \ as input and returns a list \n    of the cubes of each of those integers. \n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp73yhqxno.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp73yhqxno.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{ \n    int a = 0; \n    int b = 0; \n    foreach(i; lst1) \n    { \n\
    \        a += i.length; \n    } \n    foreach(i; lst2) \n    { \n        b +=\
    \ i.length; \n    } \n    if(a < b) \n    { \n        return lst1; \n    } \n\
    \    else \n    { \n        return lst2; \n    } \n} \n \nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9c55y6tt.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp9c55y6tt.__unittest_L45_C1() [0x428464]

    ??:? void tmp9c55y6tt.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_chars1 = 0;\n    int total_chars2 = 0;\n    foreach(str;\
    \ lst1)\n    {\n        total_chars1 += str.length;\n    }\n    foreach(str; lst2)\n\
    \    {\n        total_chars2 += str.length;\n    }\n    return (total_chars1 <=\
    \ total_chars2) ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    string lst = [];\n    int ctr1 = 0;\n    int ctr2 = 0;\n    foreach(s;\
    \ lst1)\n    {\n        ctr1 += s.length;\n    }\n    foreach(s; lst2)\n    {\n\
    \        ctr2 += s.length;\n    }\n    return ctr1 <= ctr2 ? lst1 : lst2;\n}\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return lst1;\n\
    \    \n    int num1 = 0;\n    foreach (i; lst1)\n        num1 += i.length;\n \
    \   \n    int num2 = 0;\n    foreach (i; lst2)\n        num2 += i.length;\n  \
    \  \n    if (num1 < num2)\n        return lst1;\n    else\n        return lst2;\n\
    }\n/*\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpubgxusxh.d(41): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpubgxusxh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    immutable uint len1 = lst1.length;\n    immutable uint len2 =\
    \ lst2.length;\n    immutable uint tot1 = 0;\n    immutable uint tot2 = 0;\n \
    \   foreach( i; 0 .. len1 )\n    {\n        tot1 += lst1[i].length;\n    }\n \
    \   foreach( i; 0 .. len2 )\n    {\n        tot2 += lst2[i].length;\n    }\n \
    \   if( tot1 < tot2 )\n    {\n        return lst1;\n    }\n    else if( tot2 <\
    \ tot1 )\n    {\n        return lst2;\n    }\n    else if( tot1 == tot2 )\n  \
    \  {\n        return lst1;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkv909pqs.d(25): Error: cannot implicitly convert expression `lst1.length`
    of type `ulong` to `immutable(uint)`

    /tmp/tmpkv909pqs.d(26): Error: cannot implicitly convert expression `lst2.length`
    of type `ulong` to `immutable(uint)`

    /tmp/tmpkv909pqs.d(31): Error: cannot modify `immutable` expression `0u`

    /tmp/tmpkv909pqs.d(35): Error: cannot modify `immutable` expression `0u`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkv909pqs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(int i, string\
    \ in lst1) {\n        total1 += i.length;\n    }\n    foreach(int i, string in\
    \ lst2) {\n        total2 += i.length;\n    }\n    if(total1 < total2) {\n   \
    \     return lst1;\n    }\n    else if(total2 < total1) {\n        return lst2;\n\
    \    }\n    else {\n        return lst1;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxrtfjfyb.d(27): Error: no identifier for declarator `string`

    /tmp/tmpxrtfjfyb.d(27): Error: found `in` when expecting `;`

    /tmp/tmpxrtfjfyb.d(30): Error: no identifier for declarator `string`

    /tmp/tmpxrtfjfyb.d(30): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxrtfjfyb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total_lst1 = reduce!((a, b) => a + b.length)(0, lst1);\n\
    \    int total_lst2 = reduce!((a, b) => a + b.length)(0, lst2);\n    return total_lst1\
    \ <= total_lst2 ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eswrfkg.d(25): Error: template instance `reduce!((a, b) => a +
    b.length)` template `reduce` is not defined

    /tmp/tmp3eswrfkg.d(26): Error: template instance `reduce!((a, b) => a + b.length)`
    template `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eswrfkg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    string[] str1 = lst1.dup;\n    string[] str2 = lst2.dup;\n  \
    \  int tot1 = 0;\n    int tot2 = 0;\n    int len1 = str1.length;\n    int len2\
    \ = str2.length;\n    for (int i = 0; i < len1; i++) {\n        tot1 += str1[i].length;\n\
    \    }\n    for (int i = 0; i < len2; i++) {\n        tot2 += str2[i].length;\n\
    \    }\n    if (tot1 < tot2) {\n        return str1;\n    }\n    else if (tot1\
    \ > tot2) {\n        return str2;\n    }\n    else {\n        return str1;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqgw3qd_y.d(29): Error: cannot implicitly convert expression `str1.length`
    of type `ulong` to `int`

    /tmp/tmpqgw3qd_y.d(30): Error: cannot implicitly convert expression `str2.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqgw3qd_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int total1 = 0;\n    foreach(v; lst1)\n    {\n        total1\
    \ += v.length;\n    }\n    int total2 = 0;\n    foreach(v; lst2)\n    {\n    \
    \    total2 += v.length;\n    }\n    if(total1 == total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n  \
    \  }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    //int total_chars = to!int(total_chars_in_array(lst1));\n   \
    \ //int total_chars2 = to!int(total_chars_in_array(lst2));\n    if (lst1.length\
    \ == 0)\n    {\n        return lst1;\n    }\n    else if (lst2.length == 0)\n\
    \    {\n        return lst2;\n    }\n    else if (lst1.length == lst2.length)\n\
    \    {\n        return lst1;\n    }\n    else if (lst1.length < lst2.length)\n\
    \    {\n        return lst1;\n    }\n    else if (lst1.length > lst2.length)\n\
    \    {\n        return lst2;\n    }\n    else \n    {\n        return null;\n\
    \    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3djx3m5j.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42945d]

    ??:? void tmp3djx3m5j.__unittest_L52_C1() [0x427ddf]

    ??:? void tmp3djx3m5j.__modtest() [0x4286c8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dd37]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4291b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42abe5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ac74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ab71]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42918d]

    ??:? runModuleUnitTests [0x42db0d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4298ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164330
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n  import std.typecons;\n  import std.math;\n  \n  if(lst1.length\
    \ == 0) return lst1;\n  if(lst2.length == 0) return lst2;\n  \n  int total1 =\
    \ 0;\n  int total2 = 0;\n  \n  foreach(el; lst1) \n  {\n    total1 += el.length;\n\
    \  }\n  \n  foreach(el; lst2) \n  {\n    total2 += el.length;\n  }\n  \n  if(total1\
    \ <= total2) \n  {\n    return lst1;\n  }\n  else \n  {\n    return lst2;\n  }\n\
    \  \n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0)\n        return lst1;\n    \n    if (lst2.length\
    \ == 0)\n        return lst2;\n    \n    int sum1 = 0;\n    foreach (x; lst1)\n\
    \        sum1 += x.length;\n    \n    int sum2 = 0;\n    foreach (x; lst2)\n \
    \       sum2 += x.length;\n    \n    if (sum1 == sum2)\n        return lst1;\n\
    \    \n    return (sum1 < sum2) ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    bool b = (total_chars(lst1) < total_chars(lst2));\n    if (b)\n\
    \        return lst1;\n    else\n        return lst2;\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxtwx9akz.d(25): Error: undefined identifier `total_chars`

    /tmp/tmpxtwx9akz.d(25): Error: undefined identifier `total_chars`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtwx9akz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length > lst2.length) \n    {\n        return lst2;\n\
    \    }\n    else if (lst1.length < lst2.length) \n    {\n        return lst1;\n\
    \    }\n    else \n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7nv0jbq4.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x429405]

    ??:? void tmp7nv0jbq4.__unittest_L38_C1() [0x427d87]

    ??:? void tmp7nv0jbq4.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcdf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42915e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ab8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ac1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ab19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429135]

    ??:? runModuleUnitTests [0x42dab5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429854]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if(lst1.length == 0 && lst2.length == 0) return new string[0];\n\
    \    int n1 = 0;\n    int n2 = 0;\n    foreach(inout e; lst1) n1 += e.length;\n\
    \    foreach(inout e; lst2) n2 += e.length;\n    return n1 > n2 ? lst2 : lst1;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv54oj9s8.d(28): Error: variable `tmpv54oj9s8.total_match.e` `inout`
    variables can only be declared inside `inout` functions

    /tmp/tmpv54oj9s8.d(29): Error: variable `tmpv54oj9s8.total_match.e` `inout` variables
    can only be declared inside `inout` functions

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv54oj9s8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    // write your code here\n}\nunittest\n{\n    alias candidate\
    \ = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp04yeaggj.d(23): Error: function `tmp04yeaggj.total_match` has no
    `return` statement, but is expected to return a value of type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp04yeaggj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int t1 = 0;\n    int t2 = 0;\n    foreach(s; lst1) t1 += s.length;\n\
    \    foreach(s; lst2) t2 += s.length;\n    return t1 < t2 ? lst1 : lst2;\n}\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp05dja4e7.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmp05dja4e7.__unittest_L31_C1() [0x428460]

    ??:? void tmp05dja4e7.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164330
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(n; lst1)\n    {\n\
    \        sum1 += n.length;\n    }\n    foreach(n; lst2)\n    {\n        sum2 +=\
    \ n.length;\n    }\n    if(sum1 < sum2) return lst1;\n    else return lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxmtay5e1.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpxmtay5e1.__unittest_L38_C1() [0x428464]

    ??:? void tmpxmtay5e1.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164330
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0) return lst1;\n    else\
    \ if (lst1.length == 0) return lst2;\n    else if (lst2.length == 0) return lst1;\n\
    \    else \n    {\n        int result = 0;\n        foreach (var item; lst1) \n\
    \        {\n            result += item.length;\n        }\n        int result2\
    \ = 0;\n        foreach (var item; lst2) \n        {\n            result2 += item.length;\n\
    \        }\n        if (result > result2) return lst2;\n        else if (result\
    \ == result2) return lst1;\n        else return lst1;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwmpyd1ab.d(31): Error: undefined identifier `var`

    /tmp/tmpwmpyd1ab.d(36): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwmpyd1ab.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int num1 = 0;\n    int num2 = 0;\n    foreach(a; lst1)\n    {\n\
    \        num1 += a.length;\n    }\n    foreach(b; lst2)\n    {\n        num2 +=\
    \ b.length;\n    }\n    if(num1 < num2)\n    {\n        return lst1;\n    }\n\
    \    else\n    {\n        return lst2;\n    }\n    \n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7gjujedz.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp7gjujedz.__unittest_L45_C1() [0x428464]

    ??:? void tmp7gjujedz.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164330
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return new\
    \ string[0];\n    return lst1.total_match(lst2) ? lst1 : lst2;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0 && lst2.length == 0)\n        return [];\n\
    \    auto sum1 = sum(map!(x => x.length)(lst1));\n    auto sum2 = sum(map!(x =>\
    \ x.length)(lst2));\n    if (sum1 > sum2)\n        return lst2;\n    else\n  \
    \      return lst1;\n}\nunittest\n{\n    alias candidate = total_match;\n\n  \
    \  assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"],\
    \ [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgiq8p62r.d(27): Error: undefined identifier `sum`

    /tmp/tmpgiq8p62r.d(28): Error: undefined identifier `sum`, did you mean variable
    `sum1`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgiq8p62r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{ \n    if(lst1.length == 0 && lst2.length == 0)\n        return lst1;\n\
    \    \n    int sumLst1 = 0;\n    int sumLst2 = 0;\n    \n    foreach(l; lst1)\n\
    \        sumLst1 += l.length;\n    foreach(l; lst2)\n        sumLst2 += l.length;\n\
    \    \n    if(sumLst1 == sumLst2)\n        return lst1;\n    else if(sumLst1 <\
    \ sumLst2)\n        return lst1;\n    else \n        return lst2;\n} \n \nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164330
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    // do not modify this function\n    // auto-generated code  \
    \ \n    int len1 = lst1.length;\n    int len2 = lst2.length;\n    // auto-generated\
    \ code   \n    int len = len1 > len2 ? len1 : len2;\n    string[] a = new string[len];\n\
    \    string[] b = new string[len];\n    int i = 0;\n    for (; i < len1; i++)\n\
    \    {\n        a[i] = lst1[i];\n    }\n    i = 0;\n    for (; i < len2; i++)\n\
    \    {\n        b[i] = lst2[i];\n    }\n    return a.length > b.length ? b : a;\n\
    }\n/*\n    Write a function that accepts a string and returns an array of the\
    \ characters of the string.\n    if the string is empty, return empty array.\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7b7v9c92.d(45): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7b7v9c92.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int lst1Total = 0;\n    int lst2Total = 0;\n    foreach(string\
    \ a; lst1) {\n        lst1Total += a.length;\n    }\n    foreach(string b; lst2)\
    \ {\n        lst2Total += b.length;\n    }\n    if(lst1Total == lst2Total) {\n\
    \        return lst1;\n    }\n    else if(lst1Total < lst2Total) {\n        return\
    \ lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164330
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int x = lst1.length;\n    int y = lst2.length;\n    string[]\
    \ temp1 = lst1.dup;\n    string[] temp2 = lst2.dup;\n    int[] x1 = temp1.length;\n\
    \    int[] y1 = temp2.length;\n    if (x1 < y1)\n    {\n        return temp1;\n\
    \    }\n    else\n    {\n        return temp2;\n    }\n    \n}\n// \n// int[]\
    \ total_match(int[] lst1, int[] lst2) \n// {\n//     int x = lst1.length;\n//\
    \     int y = lst2.length;\n//     int[] temp1 = lst1.dup;\n//     int[] temp2\
    \ = lst2.dup;\n//     int[] x1 = temp1.length;\n//     int[] y1 = temp2.length;\n\
    //     if (x1 < y1)\n//     {\n//         return temp1;\n//     }\n//     else\n\
    //     {\n//         return temp2;\n//     }\n    \n// }\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo9l0orug.d(25): Error: cannot implicitly convert expression `lst1.length`
    of type `ulong` to `int`

    /tmp/tmpo9l0orug.d(26): Error: cannot implicitly convert expression `lst2.length`
    of type `ulong` to `int`

    /tmp/tmpo9l0orug.d(29): Error: cannot implicitly convert expression `temp1.length`
    of type `ulong` to `int[]`

    /tmp/tmpo9l0orug.d(30): Error: cannot implicitly convert expression `temp2.length`
    of type `ulong` to `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo9l0orug.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    int charsInLst1 = 0;\n    foreach(string str; lst1)\n    {\n\
    \        charsInLst1 += str.length;\n    }\n    int charsInLst2 = 0;\n    foreach(string\
    \ str; lst2)\n    {\n        charsInLst2 += str.length;\n    }\n    if(charsInLst1\
    \ < charsInLst2)\n    {\n        return lst1;\n    }\n    else\n    {\n      \
    \  return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpotnoych9.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294e5]

    ??:? void tmpotnoych9.__unittest_L44_C1() [0x428470]

    ??:? void tmpotnoych9.__modtest() [0x428750]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddbf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42923e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac6d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acfc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429215]

    ??:? runModuleUnitTests [0x42db95]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429934]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164330
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ accepts two arrays of strings and returns the array that has \n    total number\
    \ of chars in the all strings of the array less than the other array.\n\n    if\
    \ the two arrays have the same number of chars, return the first array.\n\n  \
    \  Examples\n    >>> total_match([], [])\n    []\n    >>> total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"]\n    >>> total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n    [\"hi\", \"admin\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n    [\"\
    hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"\
    , \"5\"])\n    [\"4\"]\n    \n*/\nstring[] total_match(string[] lst1, string[]\
    \ lst2) \n{\n    if (lst1.length == 0) return lst1;\n    if (lst2.length == 0)\
    \ return lst2;\n    auto total1 = lst1.map!(x => x.length).reduce!(a, b => a +\
    \ b);\n    auto total2 = lst2.map!(x => x.length).reduce!(a, b => a + b);\n  \
    \  if (total1 == total2) return lst1;\n    if (total1 < total2) return lst1;\n\
    \    return lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphfbo9u5f.d(27): Error: no property `map` for type `string[]`

    /tmp/tmphfbo9u5f.d(28): Error: no property `map` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphfbo9u5f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164329
