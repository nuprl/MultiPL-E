language: d
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n  string\
    \ result = \"\";\n  string str_x = to!string(x);\n  int len = str_x.length;\n\
    \  if (shift >= len)\n  {\n    for (int i = len-1; i >= 0; i--)\n    {\n     \
    \ result ~= str_x[i];\n    }\n  }\n  else\n  {\n    string prefix = str_x[len-shift..$];\n\
    \    string suffix = str_x[0..len-shift-1];\n    result = prefix ~ suffix;\n \
    \ }\n  return result;\n}\n/*\n    Helper function: checks if the ith place of\
    \ the number x is odd. \n    Positions are numbered right to left.\n    >>> is_odd(12L,\
    \ 1L)\n    false\n    >>> is_odd(12L, 2L)\n    true\n    >>> is_odd(12L, 3L)\n\
    \    false\n    >>> is_odd(12345L, 5L)\n    true\n*/\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg6khnap_.d(16): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmpg6khnap_.d(17): Error: cannot implicitly
    convert expression `str_x.length` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpg6khnap_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n\tconst long\
    \ number_of_digits = log10(x);\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpybynuag1.d(16): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybynuag1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result;\n    string tmp = to!string(x);\n    int length = tmp.length;\n    if\
    \ (shift > length) \n    {\n        tmp = tmp.dup.reverse;\n        return tmp;\n\
    \    } \n    else\n    {\n        for (int i = 0; i < length; i++) \n        {\n\
    \            if (i + shift > length) \n            {\n                int index\
    \ = i + shift - length;\n                result ~= tmp[index];\n            }\
    \ \n            else\n            {\n                result ~= tmp[i + shift];\n\
    \            }\n        }\n        return result;\n    }\n}\nunittest\n{\n   \
    \ alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\"\
    );\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) ==\
    \ \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphi07a5qo.d(16): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmphi07a5qo.d(17): Error: cannot implicitly
    convert expression `tmp.length` of type `ulong` to `int`\n/tmp/tmphi07a5qo.d(20):
    Error: template `std.typecons.reverse` cannot deduce function from argument types
    `!()(char[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\n/tmp/tmphi07a5qo.d(29): Error: cannot implicitly convert expression
    `cast(long)i + shift - cast(long)length` of type `long` to `int`\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphi07a5qo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    assert(shift\
    \ >= 0);\n    auto digits = to!string(x);\n    if (shift >= digits.length) {\n\
    \        return digits.reversed;\n    }\n    return digits[shift .. $].idup ~\
    \ digits[0 .. shift].idup;\n}\n/*\nTake the string str, split on spaces and sort\
    \ lexicographically.\nReturn a tuple of the sorted version, str, and the sorted\
    \ version joined\n    by spaces.\n*/\nstatic Tuple!(string, string, string) sort_with_original(string\
    \ str) \n{\n    string[] sort_str = str.split.sort;\n    return tuple(sort_str.joined(\"\
    \ \"), str, sort_str.joined(\" \"));\n}\n/*\nTake the integer x and return its\
    \ prime factors as a tuple.\nFactorization is returned as a tuple of tuples with\
    \ the prime number and\n    its power.\n>>> prime_factors(18L)\n((2L, 1L), (3L,\
    \ 2L))\n*/\nTuple!(Tuple!(long, long)) prime_factors(long x) \n{\n    long denom\
    \ = 2L;\n    long idx = 0L;\n    Tuple!(Tuple!(long, long)) factors = new Tuple!(Tuple!(long,\
    \ long))();\n    while (x > 1L) {\n        if (x % denom == 0L) {\n          \
    \  x /= denom;\n            if (idx > 0L && factors[idx-1].field[0] == denom)\
    \ {\n                auto temp = new Tuple!(long, long)(denom, factors[idx-1].field[1]\
    \ + 1L);\n                factors[idx-1] = temp;\n            } else {\n     \
    \           auto temp = new Tuple!(long, long)(denom, 1L);\n                factors[idx]\
    \ = temp;\n                idx++;\n            }\n        } else {\n         \
    \   denom++;\n        }\n    }\n    return factors;\n}\n/*\nReturn the harmonic\
    \ mean of the sequence seq.\n>>> harmonic_mean([1L, 2L, 3L])\n1.6363636363636365\n\
    \nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdrzoye_3.d(61): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdrzoye_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    import\
    \ std.algorithm;\n    import std.conv;\n    import std.range;\n    auto str =\
    \ x.to!string;\n    if (shift > str.length)\n        return str.retro;\n    return\
    \ (str[shift .. $] ~ str[0 .. shift]).idup;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzf4f07yw.d(20): Error: cannot implicitly convert expression
    `retro(str)` of type `Result!()` to `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzf4f07yw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    shift %= s.length;\n    if (shift == 0) return s;\n \
    \   s = s[shift .. $] ~ s[0 .. shift];\n    return s;\n}\nunittest\n{\n    alias\
    \ candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n\
    \    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"\
    79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L)\
    \ == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp40ffjpot.d(15): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp40ffjpot.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ result = to!string(x);\n    if (shift < result.length) \n    {\n        result\
    \ = result[$-shift .. $] ~ result[0 .. $-shift];\n    } \n    else \n    {\n \
    \       result = result[$ .. 0];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeo4pakbd.d(15): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpeo4pakbd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    enum\
    \ x_digits = max(1, log10(abs(x)) + 1);\n    long x_shifted = x;\n    shift %=\
    \ x_digits;\n    if (shift != 0)\n    {\n        x_shifted = ((long) x / (long)\
    \ pow(10, shift))\n                + (x % (long) pow(10, shift)) * (long) pow(10,\
    \ x_digits - shift);\n    }\n    return format(\"%s\", x_shifted);\n}\n/*\n  \
    \  Do all the steps to get the solution.\n    The tricky part is finding the first\
    \ number that works.\n    Since the digits of the sequence will get smaller we\
    \ start from the\n    largest possible number and work our way down.\n    It is\
    \ not hard to show that the first number should be the number of\n    digits squared.\n\
    \    The second number should be one less than the first number.\n    >>> solve(12L)\n\
    \    1234526\n*/\nstring solve(long digits)\n{\n    enum first_number = pow(digits,\
    \ 2);\n    for (long second_number = first_number - 1;\n            second_number\
    \ >= digits;\n            second_number--)\n    {\n        long number = first_number;\n\
    \        string sequence = circular_shift(number, second_number);\n        long\
    \ next_number = to!long(sequence);\n        while (next_number != first_number)\n\
    \        {\n            if (next_number < number)\n            {\n           \
    \     break;\n            }\n            number = next_number;\n            sequence\
    \ ~= circular_shift(number, second_number);\n            next_number = to!long(sequence);\n\
    \        }\n        if (next_number == first_number)\n        {\n            return\
    \ sequence;\n        }\n    }\n    return \"\";\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplrwom1s2.d(20): Error: C style cast illegal, use `cast(long)x`\n/tmp/tmplrwom1s2.d(20):
    Error: C style cast illegal, use `cast(long)pow(10, shift)`\n/tmp/tmplrwom1s2.d(21):
    Error: C style cast illegal, use `cast(long)pow(10, shift)`\n/tmp/tmplrwom1s2.d(21):
    Error: C style cast illegal, use `cast(long)pow(10, x_digits - shift)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplrwom1s2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ digits = to!string(x);\n    if (shift >= digits.length) {\n        return digits.reverse;\n\
    \    }\n    auto suffix = digits[$ - shift .. $];\n    return format(\"%s%s\"\
    , suffix, digits[0 .. $ - shift]);\n}\n/*\nReturn the element i of sequence s.\n\
    \    If i is out of range, return a none.\n    >>> at(iota(1L, 10L), 4L)\n   \
    \ Some(5L)\n    >>> at(iota(1L, 10L), 10L)\n    None\n*/\nauto at(T)(T s, long\
    \ i)\nif (isInputRange!T && is(typeof(front(s)) == long))\n{\n    if (i < 0)\n\
    \        return none;\n    auto result = front(s);\n    for (i -= 1; i >= 0; i\
    \ -= 1) {\n        if (!empty(s)) {\n            result = front(s);\n        \
    \    popFront(s);\n        } else {\n            return none;\n        }\n   \
    \ }\n    return some(result);\n}\n/*\nMultiply the given 2*2 matrix a by the given\
    \ 2*2 matrix b\n    >>> matrix_multiply([[1L, 2L], [3L, 4L]], [[5L, 6L], [7L,\
    \ 8L]])\n    [[19L, 22L], [43L, 50L]]\n*/\nlong[][] matrix_multiply(long[][] a,\
    \ long[][] b) \n{\n    return [a[0][0] * b[0][0] + a[0][1] * b[1][0],\n      \
    \      a[0][0] * b[0][1] + a[0][1] * b[1][1],\n            a[1][0] * b[0][0] +\
    \ a[1][1] * b[1][0],\n            a[1][0] * b[0][1] + a[1][1] * b[1][1]];\n}\n\
    /*\nConvert the given integer x to a string in any base\n    >>> to_base(123L,\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2nb2ykw7.d(58): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2nb2ykw7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    long n = s.length;\n    if (shift > n) \n    {\n    \
    \    char[] result = to!(char[])(s);\n        result.reverse;\n        return\
    \ to!string(result);\n    }\n    return s[shift..n] ~ s[0..shift];\n}\n/*\nDecode\
    \ a circular shift.\n    >>> circular_shift_decode(12L, \"21\")\n    1L\n    >>>\
    \ circular_shift_decode(12L, \"12\")\n    2L\n*/\nlong circular_shift_decode(long\
    \ x, string s) \n{\n    return to!long(circular_shift(x, s.length - to!long(s)));\n\
    }\n/*\nEncode a message using a code.\n    >>> code = [10L, 11L, 12L, 13L, 14L,\
    \ 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L,\
    \ 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L,\
    \ 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L, 60L, 61L, 62L,\
    \ 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L, 71L, 72L, 73L, 74L, 75L, 76L, 77L, 78L,\
    \ 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L, 89L, 90L, 91L, 92L, 93L, 94L,\
    \ 95L, 96L, 97L, 98L, 99L, 100L, 101L, 102L, 103L, 104L, 105L, 106L, 107L, 108L,\
    \ 109L, 110L, 111L, 112L, 113L, 114L,\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8r_u_3wt.d(36): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8r_u_3wt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \npure nothrow\
    \ @safe @nogc { \n    alias Digits = Tuple!(char, \"0\", \"1\", \"2\", \"3\",\
    \ \"4\", \"5\", \"6\", \"7\", \"8\", \"9\");\n    if (shift == 0)\n        return\
    \ x.text;\n    string s = x.text;\n    if (shift > s.length) {\n        reverse(s);\n\
    \        return s;\n    }\n    auto first = s[0 .. $ - shift];\n    auto last\
    \ = s[$ - shift .. $];\n    return last ~ first;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(490):
    Error: static assert:  "Attempted to instantiate Tuple with an invalid argument:
    "1""\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(479):        instantiated
    from here: `parseSpecs!("1", "2", "3", "4", "5", "6", "7", "8", "9")`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):        instantiated
    from here: `parseSpecs!(char, "0", "1", "2", "3", "4", "5", "6", "7", "8", "9")`\n/tmp/tmpi4id7f8d.d(15):        instantiated
    from here: `Tuple!(char, "0", "1", "2", "3", "4", "5", "6", "7", "8", "9")`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi4id7f8d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ digits = to!string(x);\n    long len = digits.length;\n    shift %= len;\n \
    \   if (shift == 0) \n    {\n        return digits;\n    }\n    if (shift > len)\
    \ \n    {\n        return digits[$ - 1 .. $];\n    }\n    return digits[shift\
    \ .. $] ~ digits[0 .. shift - 1];\n}\n/*\nPowers of 10 returned as strings rather\
    \ than longs.\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphr2w2oz9.d(28): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphr2w2oz9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    // Shift\
    \ value must be positive.\n    shift = shift % digits(x);\n    long n_reversed\
    \ = reverse(x);\n    long n_shifted = n_reversed / pow(10L, shift);\n    return\
    \ to!string(n_shifted);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmpzp_9hp.d(16): Error: undefined identifier `digits`\n/tmp/tmpmpzp_9hp.d(17):
    Error: template `std.typecons.reverse` cannot deduce function from argument types
    `!()(long)`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\n/tmp/tmpmpzp_9hp.d(19): Error: template instance `to!string`
    template `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpmpzp_9hp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (x\
    \ < 0L)\n    {\n        x = -x;\n    }\n    long len = 1L;\n    long x1 = x;\n\
    \    while (x1 >= 10L)\n    {\n        x1 /= 10L;\n        len *= 10L;\n    }\n\
    \    long y = x;\n    long z = 0L;\n    long pow10 = 1L;\n    for (long i = 0L;\
    \ i < shift; i++)\n    {\n        long mod = y % 10L;\n        y /= 10L;\n   \
    \     z += mod * len;\n        len /= 10L;\n    }\n    z += y;\n    return to!string(z);\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1khxieb1.d(37): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp1khxieb1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    // calculate\
    \ the number of digits\n    long number_of_digits = cast(long) x.stringof.length;\n\
    \    return x.rotateRight(shift).format(\"%0\" ~ number_of_digits.stringof ~ \"\
    d\");\n}\n/*\nGiven an array of strings return a map of the strings to the\n \
    \   number of times they occur.\n    >>> count_occurrences([\"a\", \"b\", \"a\"\
    , \"c\", \"b\"])\n    [\"a\": 2, \"b\": 2, \"c\": 1]\n    \n*/\nMap!(string,long)\
    \ count_occurrences(string[] arr) \n{\n    Map!(string,long) map = [];\n    for\
    \ (string s ; arr) \n    {\n        map[s] = (map[s] is null) ? 1 : map[s] + 1;\n\
    \    }\n    return map;\n}\n/*\nGiven a string return true if it is composed only\
    \ of digits.\n    >>> only_digits(\"123\")\n    true\n    >>> only_digits(\"123a\"\
    )\n    false\n    \n*/\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfcxkqlkw.d(29): Error: found `)` when expecting `;` following
    `for` condition\n/tmp/tmpfcxkqlkw.d(33): Error: found `return` when expecting
    `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfcxkqlkw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    int length\
    \ = to!string(x).length;\n    if (shift > length)\n    {\n        return to!string(x)[$-1:-1:-1];\n\
    \    }\n    else\n    {\n        auto a = to!string(x)[$-1:-1:-length+shift];\n\
    \        auto b = to!string(x)[$-1:-1-length+shift:-1];\n        return a ~ b;\n\
    \    }\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl81zrv1_.d(18): Error: found `:` when expecting `,`\n/tmp/tmpl81zrv1_.d(18):
    Error: found `:` when expecting `,`\n/tmp/tmpl81zrv1_.d(22): Error: found `:`
    when expecting `,`\n/tmp/tmpl81zrv1_.d(22): Error: found `:` when expecting `,`\n/tmp/tmpl81zrv1_.d(23):
    Error: found `:` when expecting `,`\n/tmp/tmpl81zrv1_.d(23): Error: found `:`
    when expecting `,`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl81zrv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    string cur = to!string(x);\n    int length = cur.length;\n\
    \    int pos = shift % length;\n    if (pos != 0)\n    {\n        result = cur[pos..$];\n\
    \        result ~= cur[0..pos];\n    }\n    else\n    {\n        result = cur;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptwtc97i1.d(16): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmptwtc97i1.d(17): Error: cannot implicitly
    convert expression `cur.length` of type `ulong` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmptwtc97i1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long\
    \ l = x.length;\n    int s = shift.to!int;\n    auto result = new string[l];\n\
    \    if (s < l) \n    {\n        result = x.to!string.dup[0..s].dup;\n       \
    \ result ~= x.to!string.dup[s..$];\n    }\n    else \n    {\n        result =\
    \ x.to!string.dup.dup;\n        result.reverse;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyiixvu65.d(15): Error: no property `length` for type `long`\n/tmp/tmpyiixvu65.d(16):
    Error: no property `to` for type `long`\n/tmp/tmpyiixvu65.d(20): Error: no property
    `to` for type `long`\n/tmp/tmpyiixvu65.d(21): Error: no property `to` for type
    `long`\n/tmp/tmpyiixvu65.d(25): Error: no property `to` for type `long`\n/tmp/tmpyiixvu65.d(26):
    Error: template `std.typecons.reverse` cannot deduce function from argument types
    `!()(string[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\n/tmp/tmpyiixvu65.d(28): Error: cannot implicitly convert expression
    `result` of type `string[]` to `string`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpyiixvu65.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    enum\
    \ shift_type = shift > numDigits(x);\n    return to!string(shift_type ? iota(shift).map!(a\
    \ => x[a]).reverse : iota(shift).map!(a => x[a]));\n}\n/*\nReturn the reversal\
    \ of the digits of the integer x.\n    >>> reverse(123L)\n    \"321\"\n*/\nstring\
    \ reverse(long x) \n{\n    return to!string(iota(numDigits(x)).map!(a => x[a]).reverse);\n\
    }\n/*\nReturn the value of the digits of the integer x rotated left by the number\n\
    \    of digits of x.\n    >>> rotate_left(123L)\n    \"2341\"\n    >>> rotate_left(321L)\n\
    \    \"1234\"\n*/\nstring rotate_left(long x) \n{\n    return to!string(iota(numDigits(x)).map!(a\
    \ => x[a]).rotateLeft);\n}\n/*\nReturn the value of the digits of the integer\
    \ x rotated right by the number\n    of digits of x.\n    >>> rotate_right(123L)\n\
    \    \"4321\"\n    >>> rotate_right(321L)\n    \"4321\"\n*/\nstring rotate_right(long\
    \ x) \n{\n    return to!string(iota(numDigits(x)).map!(a => x[a]).rotateRight);\n\
    }\n/*\nReturn True if the integer x is a prime number, False otherwise.\n    >>>\
    \ isprime(17L)\n    True\n    >>> isprime(18L)\n    False\n*/\nunittest\n{\n \
    \   alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjuyh1ivu.d(15): Error: undefined identifier `numDigits`\n/tmp/tmpjuyh1ivu.d(16):
    Error: template instance `to!string` template `to` is not defined, did you mean
    No?\n/tmp/tmpjuyh1ivu.d(25): Error: template instance `to!string` template `to`
    is not defined, did you mean No?\n/tmp/tmpjuyh1ivu.d(37): Error: template instance
    `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpjuyh1ivu.d(49):
    Error: template instance `to!string` template `to` is not defined, did you mean
    No?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjuyh1ivu.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    assert(x\
    \ >= 0L);\n    assert(shift >= 0L);\n    long n = number_of_digits(x);\n    shift\
    \ %= n;\n    string s = to!string(x);\n    return s[$-shift..$] ~ s[0..$-shift-1];\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvlchthcp.d(17): Error: undefined identifier `number_of_digits`\n/tmp/tmpvlchthcp.d(19):
    Error: template instance `to!string` template `to` is not defined, did you mean
    No?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvlchthcp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n\treturn\
    \ circular_shift_tuple(split(to!string(x), \"\")[], shift);\n}\n/*\nCircular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a tuple.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12L, 1L)\n    (\"2\", \"1\")\n    >>> circular_shift(12L,\
    \ 2L)\n    (\"1\", \"2\")\n    \n*/\nTuple!(string, string) circular_shift_tuple(string[]\
    \ digits, long shift) \n{\n\tif (shift < 0L)\n\t{\n\t\tthrow new Exception(\"\
    Shift cannot be negative.\");\n\t}\n\tauto i = shift % cast(size_t)digits.length;\n\
    \treturn Tuple!(string, string)(digits[$ - i .. $], digits[0 .. $ - i]);\n}\n\
    /*\nReturn the palindromic prime factorizations of the number x.\n    >>> palindromic_factorizations(12L)\n\
    \    [[11L, 1L], [7L, 2L], [5L, 3L], [3L, 4L], [2L, 6L]]\n    >>> palindromic_factorizations(15L)\n\
    \    [[11L, 1L], [7L, 2L], [5L, 3L], [3L, 5L], [2L, 7L]]\n    \n*/\nlong[][] palindromic_factorizations(long\
    \ x) \n{\n\treturn palindromic_factorizations(x, 7L);\n}\n/*\nReturn the palindromic\
    \ prime factorizations of the number x, using at most\n    the first max_bits_of_x\
    \ bits of x.\n    >>> palindromic_factorizations(12L, 2L)\n    [[11L, 1L], [7L,\
    \ 2L], [5L, 3L], [3L, 4L], [2L, 6L]]\n    >>> palindromic_factorizations(15L,\
    \ 2L)\n    [[11L, 1L], [7L, 2L], [5L, 3L], [3L, 5\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp61f8lk1s.d(48): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp61f8lk1s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n     // Longest\
    \ representation possible is \"1<<63\" = \"9223372036854775808\"\n     static\
    \ const size_t max_digits = 19;\n     static const long max_shift = max_digits\
    \ - 1;\n     static string digits = \"0123456789\";\n     \n     if (x == 0L)\n\
    \     {\n         return \"0\";\n     }\n     \n     if (shift <= 0L)\n     {\n\
    \         return x.to!string;\n     }\n     \n     if (shift > max_shift)\n  \
    \   {\n         return circular_shift(x, shift % max_shift);\n     }\n     \n\
    \     auto neg = (x < 0L);\n     x = abs(x);\n     \n     int num_digits = log10(x)\
    \ + 1;\n     if (shift > num_digits)\n     {\n         return circular_shift(x,\
    \ shift % num_digits);\n     }\n     \n     string result;\n     auto str_x =\
    \ x.to!string;\n     for (size_t i = 0; i < shift; i++)\n     {\n         char\
    \ c = str_x[0];\n         str_x = str_x[1..$];\n         str_x ~= c;\n     }\n\
    \     \n     if (neg)\n     {\n         str_x = \"-\" ~ str_x;\n     }\n     \n\
    \     return str_x;\n}\n \n \n \n/*\n    Divide the string s into length-n substrings\
    \ (all but the last substrings are length n)\n    >>> chunk_string(\"abcdefg\"\
    , 3)\n    [\"abc\", \"def\", \"g\"]\n    >>> chunk_string(\"abcdefg\", 3, 1)\n\
    \    [\"bcd\", \"efg\"]\n    >>> chunk_string(\"abcdefg\", 3, 2)\n    [\"cde\"\
    , \"fg\"]\n*/\nstring[] chunk_string(string s, int n, int k = 0) \n{\n    if (n\
    \ <= 0)\n    {\n        return [];\n    }\n    \n    if (k < 0)\n    {\n     \
    \   k = 0;\n    }\n    \n    auto k\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprly6utgb.d(85): Error: no identifier for declarator k\n/tmp/tmprly6utgb.d(85):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmprly6utgb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ digits = toString(x);\n    shift %= digits.length;\n    return digits[$-shift\
    \ .. $] ~ digits[0 .. $-shift];\n}\n/*\nGenerate a list of all circular shift\
    \ strings for the given number.\n    Strings are sorted in alphabetic order.\n\
    \    A circular shift of a string of digits is formed by dropping the first\n\
    \    digit and appending it to the end of the string.\n    >>> circular_shifts(1234L)\n\
    \    [\"1234\", \"2341\", \"3412\", \"4123\"]\n    >>> circular_shifts(12L)\n\
    \    [\"12\", \"21\"]\n*/\nstring[] circular_shifts(long x)\n{\n    auto digits\
    \ = toString(x);\n    return map!circular_shift(iota(digits.length))\n       \
    \ .map!(a => circular_shift(x, a))\n        .sort()\n        .array;\n}\n/*\n\
    Calculate totient function value for given n.\n    The totient function (phi)\
    \ counts the positive integers up to a given\n    integer n that are relatively\
    \ prime to n.\n    >>> totient(20L)\n    8\n    >>> totient(100L)\n    40\n*/\n\
    long totient(long n)\n{\n    long result = 0;\n    foreach (i; iota(n))\n    \
    \    if (gcd(i, n) == 1)\n            result++;\n    return result;\n}\n/*\nCalculate\
    \ the amicable pair sums within the given range.\n    An amicable pair is a pair\
    \ of positive integers such that the sum of\n    the proper divisors of one number\
    \ equals the other.\n    >>> amicable_pairs(1L, 100L)\n    [220, 284]\n    >>>\
    \ amicable_pairs(1L, 1000L)\n    [220, 284, 1184, 1210]\n*/\nlong[] amicable_pairs(long\
    \ x, long y)\n{\n    alias F = map!(k => (k, sum_divisors(k)));\n    long[] result;\n\
    \    auto factorization = F(iota(x, y));\n    for (size_t i =\nunittest\n{\n \
    \   alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4xwloy_z.d(69): Error: expression expected, not \''unittest\''\n/tmp/tmp4xwloy_z.d(70):
    Error: semicolon expected, not \''{\''\n/tmp/tmp4xwloy_z.d(79): Error: found \''void\''
    when expecting \'';\'' following for condition\n/tmp/tmp4xwloy_z.d(79): Error:
    found \''{\'' when expecting \'')\''\n/tmp/tmp4xwloy_z.d(79): Error: found \''}\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4xwloy_z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (x\
    \ < 0L) {\n\t\treturn \"-\" ~ circular_shift(-x, shift);\n    }\n    import std.string;\n\
    \    auto xstr = x.to!string;\n    if (shift > xstr.length) {\n\t\treturn xstr.dup.reverse;\n\
    \    }\n    return xstr[shift .. xstr.length] ~ xstr[0 .. shift];\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_evm3tce.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    alias\
    \ Digits = Tuple!(long, \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\");\n    string res = \"\";\n    Digits d = to!Digits(x);\n    if\
    \ (shift > x.length) return d.reversed.join();\n    for (size_t i = 0; i < d.length;\
    \ i++)\n    {\n        res ~= d[(i + shift) % d.length];\n    }\n    return res;\n\
    }\n/*\n    The circular primes below 10 are 2, 3, 5, 7.\n    The circular primes\
    \ below 100 are 13, 17, 31, 37, 71, 73, 79, 97.\n*/\nunittest\n{\n    writeln(circular_shift(12L,\
    \ 1L));\n    writeln(circular_shift(12L, 2L));\n    writeln(circular_shift(12L,\
    \ 4L));\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0381g87o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    //your\
    \ code here\n    string str = to!string(x);\n    string ret = str;\n    if (shift\
    \ > str.length)\n    {\n        ret = \"\";\n        for (size_t i = 0; i < str.length;\
    \ i++)\n        {\n            ret ~= str[str.length - i - 1];\n        }\n  \
    \  }\n    else\n    {\n        ret = str[shift..$] ~ str[0..shift-1];\n    }\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n  \
    \  assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"\
    12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L)\
    \ == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxltfco_t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result;\n    if (shift <= 0L) \n    {\n        return to!string(x);\n    }\n\
    \    while (x > 0L) \n    {\n        shift %= (x % 10L);\n        result = to!string(x\
    \ % 10L) ~ result;\n        x /= 10L;\n    }\n    return result[0 .. $ - shift]\
    \ ~ result[$ - shift .. $];\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxlmsnmp9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n\tstring\
    \ digits = to!string(x);\n\tlong length = digits.length;\n\tif (shift > length)\
    \ \n\t{\n\t\treturn reverse(digits);\n\t}\n\treturn digits[shift .. length] ~\
    \ digits[0 .. shift];\n}\n/*\nChecks if n is prime.\n    >>> is_prime(10L)\n \
    \   false\n    >>> is_prime(29L)\n    true\n*/\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8gnus5ca.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift\
    \ == 0L) return to!string(x);\n    string s = to!string(x);\n    shift %= s.length;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n// Convenience functions for generating\
    \ the blocks of shift encoded integers.\n// Given an integer length x and a positive\
    \ integer m, this will generate\n//     the length m chunks of length x, shifting\
    \ each block by 1 digit.\n//     If x > m, will repeat this process to generate\
    \ all possible combinations\n//     of m length chunks of x length integers\n\
    //     >>> circular_shifts(1L, 2L)\n//     [[\"1\", \"2\"], [\"2\", \"1\"]]\n\
    //     >>> circular_shifts(2L, 2L)\n//     [[\"12\", \"21\"], [\"21\", \"12\"\
    ]]\n//     >>> circular_shifts(3L, 2L)\n//     [[\"123\", \"321\"], [\"231\",\
    \ \"132\"], [\"312\", \"213\"]]\n//     >>> circular_shifts(4L, 2L)\n//     [[\"\
    1234\", \"4123\"], [\"2134\", \"1423\"], [\"3124\", \"2413\"], [\"4123\", \"3142\"\
    ]]\n//     >>> circular_shifts(4L, 3L)\n//     [[\"123\", \"231\", \"312\"], [\"\
    231\", \"312\", \"123\"], [\"312\", \"123\", \"231\"]]\n//     >>> circular_shifts(5L,\
    \ 3L)\n//     [[\"1234\", \"2341\", \"3412\"], [\"2341\", \"3412\", \"4123\"],\
    \ [\"3412\", \"4123\", \"1234\"]]\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvdcdypt9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift\
    \ == 0L)\n    {\n        return to!string(x);\n    }\n    else if (shift > 0L)\n\
    \    {\n        string result = to!string(x);\n        if (shift > result.length)\n\
    \        {\n            return to!string(reversed(result));\n        }\n     \
    \   else\n        {\n            return result[$-shift .. $] ~ result[0 .. $ -\
    \ shift - 1];\n        }\n    }\n    else\n    {\n        return circular_shift(x,\
    \ -shift);\n    }\n}\n/*\nConvert an integer x to a string with the digits reversed.\n\
    \    >>> reverse_int(12345L)\n    \"54321\"\n*/\nstring reverse_int(long x)\n\
    {\n    return to!string(reversed(to!string(x)));\n}\n/*\nReturn the sum of the\
    \ digits of x.\n    >>> sum_digits(12345L)\n    15\n*/\nlong sum_digits(long x)\n\
    {\n    return reduce!q{a + b}(map!q{to!long(a)}(to!string(x)));\n}\n/*\nReturn\
    \ the sum of the squares of the digits of x.\n    >>> sum_squares(1234L)\n   \
    \ 30\n*/\nlong sum_squares(long x)\n{\n    return reduce!q{a + b}(map!q{pow(to!long(a),\
    \ 2L)}(to!string(x)));\n}\n/*\nReturn the number of occurences of the digit d\
    \ in the integer x.\n    >>> num_digit(1234L, 1L)\n    1\n    >>> num_digit(1234L,\
    \ 2L)\n    1\n    >>> num_digit(1234L, 9L)\n    0\n*/\nlong num_digit(long x,\
    \ long d)\n{\n    return reduce!q{a + b}(map!q{(a == d) ? 1L : 0L}(to!string(x)));\n\
    }\n/*\nReturn whether the integer x is palindromic.\n    >>> is_palindrome(1234321L)\n\
    \   \nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpffggvar5.d(76): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpffggvar5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result;\n    const int Base = 10;\n    // Get each digit\n    while (x > 0)\
    \ \n    {\n        result ~= std.string.to!string(x % Base);\n        x /= Base;\n\
    \    }\n    if (shift > result.length) \n    {\n        // Reverse it\n      \
    \  string temp;\n        temp.length = result.length;\n        for (int i = 0;\
    \ i < result.length; i++) \n        {\n            temp[i] = result[result.length\
    \ - i - 1];\n        }\n        result = temp;\n    }\n    else \n    {\n    \
    \    // Rotate the digits\n        string temp;\n        temp.length = result.length;\n\
    \        for (int i = 0; i < result.length; i++) \n        {\n            temp[i]\
    \ = result[(result.length - shift + i) % result.length];\n        }\n        result\
    \ = temp;\n    }\n    return result;\n}\n/*\nApproximate the fraction s by a ratio\
    \ of simple fractions.\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpszomghjp.d(47): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpszomghjp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    size_t\
    \ len = std.string.format(\"%d\", x).length;\n    int s;\n    if (shift > len)\
    \ {\n        s = len;\n    } else {\n        s = cast(int)shift;\n    }\n    int\
    \ c = cast(int)std.string.count(std.string.format(\"%d\", x), '0');\n    if (c\
    \ == len) {\n        return std.string.format(\"%d\", x);\n    }\n    //string\
    \ r = std.string.format(\"%d\", x);\n    //string r = \"%d\" % x;\n    string\
    \ r = x.to!string;\n    for (int i = 0; i < s; i++) {\n        // Get the last\
    \ digit of the number\n        long digits = x % 10;\n        // Remove the last\
    \ digit from the number\n        //x /= 10;\n        x /= 10L;\n        // Append\
    \ the last digit to the first digit\n        //x = (x * 10) + digits;\n      \
    \  x = (x * 10L) + digits;\n    }\n    return x.to!string;\n}\n/*\nQueries the\
    \ input list of strings to check whether it contains the target string.\n    If\
    \ the query is successful, it returns the distance of the target string from the\n\
    \    first string in the list, otherwise it returns -1.\n    >>> binary_search([\"\
    ab\", \"cd\", \"ef\", \"gh\", \"ij\"], \"cd\")\n    1\n    >>> binary_search([\"\
    ab\", \"cd\", \"ef\", \"gh\", \"ij\"], \"mno\")\n    -1\n    >>> binary_search([\"\
    ab\", \"cd\", \"ef\", \"gh\", \"ij\"], \"gh\")\n    3\n*/\nunittest\n{\n    alias\
    \ candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n\
    \    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"\
    79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L)\
    \ == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpourjmvmm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ y = to!string(x);\n    long n = y.length;\n    return y[shift % n .. n] ~ y[0\
    \ .. shift % n];\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n  \
    \  assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"\
    12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L)\
    \ == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtjlledu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ sx = to!string(x);\n    if (shift >= sx.length)\n        return sx[$-1..$];\n\
    \    return sx[shift..$] ~ sx[0..shift-1];\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq4hlhjqp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    \n  \
    \  string result = \"\";\n    while (x != 0) {\n        long digit = x % 10;\n\
    \        x /= 10;\n        result = std.conv.chr(digit + '0') ~ result;\n    }\n\
    \    if (shift < result.length) {\n        result = result[shift .. $] ~ result[0\
    \ .. shift - 1];\n    } else {\n        result = result[$ - 1 .. 0];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgqrzmf8x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    return\
    \ circular_shift_init(to!string(x), shift);\n}\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(int x, int shift) \n{\n    return\
    \ circular_shift_init(to!string(x), shift);\n}\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    return\
    \ circular_shift_init(to!string(x), shift);\n}\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(int x, int shift) \n{\n    return\
    \ circular_shift_init(to!string(x), shift);\n}\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    return\
    \ circular_shift_init(to!string(x), shift);\n}\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe5vzo9xu.d(73): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpe5vzo9xu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    assert(shift\
    \ >= 0L);\n    assert(x >= 0L);\n    if (x == 0L)\n    {\n        return \"0\"\
    ;\n    }\n    auto digits = digits_from_uint(x);\n    auto digits_num = digits.length;\n\
    \    auto shift_mod = shift % digits_num;\n    auto shifted_digits = digits[shift_mod\
    \ .. $];\n    shifted_digits ~= digits[0 .. shift_mod];\n    return to!string(shifted_digits);\n\
    }\n/*\n   >>> list_to_string([], ' ')\n   \"\"\n   >>> list_to_string([1], ' ')\n\
    \   \"1\"\n   >>> list_to_string([1, 2], ' ')\n   \"1 2\"\n*/\nstring list_to_string(T)(T[]\
    \ ints, string sep = \"\") if (isIntegral!T)\n{\n    static if (is (T == byte))\n\
    \    {\n        alias uint_type = ubyte;\n    }\n    else if (is (T == short))\n\
    \    {\n        alias uint_type = ushort;\n    }\n    else if (is (T == int))\n\
    \    {\n        alias uint_type = uint;\n    }\n    else if (is (T == long))\n\
    \    {\n        alias uint_type = ulong;\n    }\n    else\n    {\n        static\
    \ assert(false, \"T must be byte, short, int or long\");\n    }\n    return list_to_string!uint_type(ints,\
    \ sep);\n}\n/*\n   >>> list_to_string([], ' ')\n   \"\"\n   >>> list_to_string([1],\
    \ ' ')\n   \"1\"\n   >>> list_to_string([1, 2], ' ')\n   \"1 2\"\n*/\nstring list_to_string(T)(T[]\
    \ ints, string sep = \"\") if (isUnsigned!T)\n{\n    static if (ints.length ==\
    \ 0)\n    {\n        return \"\";\n    }\n    auto s = to!string(ints[0]);\n \
    \   static foreach (i; 1 .. ints.length)\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp94omuzci.d(75): Error: basic type expected, not foreach\n/tmp/tmp94omuzci.d(75):
    Error: no identifier for declarator int\n/tmp/tmp94omuzci.d(76): Error: found
    \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp94omuzci.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n    /*\n   \
    \ if shift >= digits(x):\n        return reverse(x)\n    if shift == 0:\n    \
    \    return x\n    */\n{\n    // digits = digits(x)\n    int digits = (int)log10(x)\
    \ + 1;\n    if (shift >= digits)\n        return reverse(x);\n    if (shift ==\
    \ 0)\n        return to!string(x);\n    \n    // return reverse(circular_shift(reverse(x),\
    \ digits - shift))\n    int rev_x = reverse(x);\n    return reverse(circular_shift(rev_x,\
    \ digits - shift));\n}\n/*\n//Circular Shift\n*/\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbfxy1c82.d(22): Error: C style cast illegal, use cast(int)log10(x)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbfxy1c82.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    return\
    \ to!string(x).rotate(shift);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5dx4wp6c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ digits = to!string(x);\n    return shift > digits.length ? digits.dup.reverse\
    \ : digits[shift .. $] ~\n        digits[0 .. shift];\n}\nunittest\n{\n    alias\
    \ candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n\
    \    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"\
    79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L)\
    \ == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhdo8vl8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n  immutable\
    \ long numDigits = log10(x) + 1;\n  if (shift > numDigits)\n    return reverse(to!string(x));\n\
    \  else\n  {\n    immutable long divisor = pow(10L, numDigits - shift);\n    return\
    \ to!string(x % divisor) ~ to!string(x / divisor);\n  }\n}\nunittest\n{\n    alias\
    \ candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n\
    \    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"\
    79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L)\
    \ == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq66qnt1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    const\
    \ ulong n = log10(x);\n    if (shift > n) return reverse(to!string(x));\n    const\
    \ ulong[] power = new ulong[cast(size_t)n];\n    power[0] = 1;\n    foreach (i;\
    \ 1 .. n)\n        power[i] = power[i - 1] * 10;\n    string result = to!string(x);\n\
    \    uint[] digits = result.map!(c => cast(uint)c - '0');\n    foreach (i; 0 ..\
    \ digits.length) \n    {\n        const uint digit = digits[i];\n        const\
    \ size_t j = (i + shift) % power.length;\n        const ulong n = digit * power[j];\n\
    \        result ~= to!string(n);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfjjrx3b_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ digits = to!string(x);\n    shift %= digits.length;\n    return digits[shift..$]\
    \ ~ digits[0..shift];\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbbzr_8ic.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n\tstring\
    \ str = to!string(x);\n\tauto xLen = str.length;\n\tif (shift > xLen)\n\t{\n\t\
    \treturn str.reverse;\n\t}\n\treturn str[shift..xLen-1] ~ str[0..shift-1];\n}\n\
    /*\n  Return a list of permutations of a given length. \n  >>> permutations([1,\
    \ 2, 3], 1)\n  [[1], [2], [3]]\n  >>> permutations([1, 2, 3], 2)\n  [[1, 2], [1,\
    \ 3], [2, 1], [2, 3], [3, 1], [3, 2]]\n  >>> permutations([1, 2, 3], 3)\n  [[1,\
    \ 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n*/\nT[] permutations(T)(T[]\
    \ list, size_t length)\n{\n\timport std.math : pow;\n\timport std.algorithm.comparison\
    \ : equal;\n\timport std.range : cycle, iota, popFrontN, take;\n\timport std.algorithm.searching\
    \ : contains;\n\timport std.algorithm.iteration : map;\n\t\n\tif (length == 1)\
    \ \n\t{\n\t\treturn list.map!(e => T[1])(e => [e]);\n\t}\n\telse \n\t{\n\t\tT[][]\
    \ result;\n\t\tforeach (index, l; list) \n\t\t{\n\t\t\tauto listWithoutL = list[0..index]\
    \ ~ list[index+1..$];\n\t\t\tforeach (perm; permutations(listWithoutL, length-1))\
    \ \n\t\t\t{\n\t\t\t\tresult ~= [l] ~ perm;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\
    \t}\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptt2oscpr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n  //static\
    \ assert(std.string == typeof(string.init));\n  string s = to!string(x);\n  if\
    \ (shift > s.length) \n  {\n    s = s[s.length - 1L .. 0L];\n  }\n  else \n  {\n\
    \    s = s[shift .. $] ~ s[0L .. shift - 1L];\n  }\n  return s;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2begj0t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n    {\n        return s[$ - s.length..$].reverse;\n\
    \    }\n    return s[$ - shift..$] ~ s[$ - shift - 1..$];\n}\n/*\nCalculate the\
    \ digits of x modulo r.\n    >>> modulo_digits(12L, 10L)\n    \"2\"\n    >>> modulo_digits(2L\
    \ ** 1000000L, 123456789L)\n    \"10000010\"\n*/\nstring modulo_digits(long x,\
    \ long r)\n{\n    enum modulo_digits = new string[4];\n    if (r == 1)\n    {\n\
    \        return \"0\";\n    }\n    if (r == 2)\n    {\n        return \"0\" ~\
    \ \"1\"[x % 2];\n    }\n    if (r == 10)\n    {\n        return to!string(x %\
    \ 10);\n    }\n    modulo_digits[0] = \"0\";\n    modulo_digits[1] = \"1\";\n\
    \    modulo_digits[2] = \"10\";\n    modulo_digits[3] = \"11\";\n    long m =\
    \ log10(r);\n    long d = floor(log10(x));\n    long x_mod = x % r;\n    string\
    \ ret;\n    for (; d >= m; d -= m)\n    {\n        long index = x_mod * (10 **\
    \ (d - m));\n        ret ~= modulo_digits[index];\n        x_mod = (x % (10 **\
    \ d)) / (10 ** (d - m));\n    }\n    long index = x_mod * (10 ** (d + 1));\n \
    \   ret ~= modulo_digits[index];\n    return ret;\n}\n/*\nSort the positive decimal\
    \ integers by the sum of their digits.\n    First order by the length of their\
    \ digits, in descending order, and then,\n    within lengths, in ascending order.\n\
    \    >>> sort_digits([5L, 3L, 111L, 11L, 2222L, 22L, 1L])\n   \nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph1te2rdr.d(62): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmph1te2rdr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    char[]\
    \ buffer = to!string(x).dup;\n    string shifted_str;\n    if (shift >= buffer.length)\n\
    \    {\n        for (int i = 0; i < buffer.length / 2; i++)\n        {\n     \
    \       char temp = buffer[i];\n            buffer[i] = buffer[buffer.length -\
    \ i - 1];\n            buffer[buffer.length - i - 1] = temp;\n        }\n    \
    \    shifted_str = buffer.idup;\n    }\n    else\n    {\n        rotate(buffer,\
    \ shift);\n        shifted_str = buffer.idup;\n    }\n    return shifted_str;\n\
    }\n/*\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3s9n1mfy.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3s9n1mfy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ digits = to!string(x);\n    if (digits.length < shift) {\n        return reverse(digits);\n\
    \    }\n    return digits[shift..digits.length] ~ digits[0..shift-1];\n}\n/*\n\
    Convert integer x to a string, padding it with zeros until it has length n.\n\
    \    If n is negative, just return the digits of x reversed.\n    >>> padded_integer(4L,\
    \ 4L)\n    \"0004\"\n    >>> padded_integer(4L, 2L)\n    \"04\"\n    >>> padded_integer(4L,\
    \ -2L)\n    \"40\"\n*/\nstring padded_integer(long x, long n) \n{\n    string\
    \ digits = to!string(x);\n    if (n < 0) {\n        return reverse(digits);\n\
    \    }\n    if (digits.length > n) {\n        return digits;\n    }\n    return\
    \ repeat(\"0\", n - digits.length) ~ digits;\n}\n/*\nCombine the digits of the\
    \ integer x into a single integer.\n    >>> combine_digits(123L)\n    123\n  \
    \  >>> combine_digits(12L)\n    12\n    >>> combine_digits(1L)\n    1\n    >>>\
    \ combine_digits(2L)\n    2\n    >>> combine_digits(123456789L)\n    123456789\n\
    */\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxjuac90q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    import\
    \ std.stdio;\n    import std.conv;\n    import std.array;\n    import std.string;\n\
    \    auto s = to!string(x);\n    long len = s.length;\n    long y = cast(long)shift\
    \ % len;\n    if (y == 0) return s;\n    char[] t = s.dup;\n    t.swap(0, y);\n\
    \    //swap(t[0], t[y]);\n    t.reverse;\n    return cast(string)t;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgkyybqjl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ digits = x.to!string;\n    long last_digit = digits.length;\n    if (last_digit\
    \ < shift) {\n        return digits.dup.reverse();\n    }\n    string result =\
    \ digits[shift..last_digit] ~ digits[0..shift];\n    return result;\n}\n/*\nFind\
    \ the largest circular prime below the integer upper_bound.\n    Return the largest\
    \ such prime found.\n*/\nlong largest_circular_prime(long upper_bound) \n{\n \
    \   long max = 0L;\n    foreach (long prime; get_primes(upper_bound)) {\n    \
    \    string prime_str = prime.to!string;\n        long last_digit = prime_str.length;\n\
    \        bool is_circular = true;\n        for (long shift = 0L; shift < last_digit;\
    \ shift++) {\n            string shifted = circular_shift(prime, shift);\n   \
    \         if (!shifted.to!long.isPrime) {\n                is_circular = false;\n\
    \                break;\n            }\n        }\n        if (is_circular) {\n\
    \            max = max(max, prime);\n        }\n    }\n    return max;\n}\n/*\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1f729a0b.d(47): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1f729a0b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    shift\
    \ = shift % numDigits(x);\n    string ret = to!string(x);\n    if (shift == 0)\
    \ \n    {\n        return ret;\n    }\n    else \n    {\n        size_t len =\
    \ ret.length;\n        char[] temp = ret.dup;\n        for (size_t i = 0; i <\
    \ len; i++) \n        {\n            ret[i] = temp[(len + i - shift) % len];\n\
    \        }\n        return ret;\n    }\n}\n/*\nCreate the list of all circular\
    \ shifts of the integer x. \n    >>> circular_shifts(12L)\n    [\"21\", \"12\"\
    ]\n    >>> circular_shifts(123L)\n    [\"321\", \"231\", \"123\"]\n*/\nstring[]\
    \ circular_shifts(long x) \n{\n    string[] res = new string[numDigits(x)];\n\
    \    for (size_t i = 0; i < res.length; i++) \n    {\n        res[i] = circular_shift(x,\
    \ i);\n    }\n    return res;\n}\n/*\nFaster version of circular_shifts that uses\
    \ rotation_array instead of circular_shift.\n*/\nstring[] circular_shifts2(long\
    \ x) \n{\n    string[] res = new string[numDigits(x)];\n    // NB: rotation_array\
    \ requires a C-style array, so we have to do some work\n    ubyte[] temp = to!string(x).dup;\n\
    \    foreach (i; 0 .. res.length) \n    {\n        rotation_array(temp);\n   \
    \     res[i] = to!string(temp);\n    }\n    return res;\n}\n/*\nRotate the elements\
    \ of the array forward one element.\n    >>> a = [1, 2, 3]\n    >>> rotation_array(a)\n\
    \    >>> a\n    [2, 3, 1]\n    >>> rotation_array(a)\n    >>> a\n    [3, 1, 2]\n\
    */\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp55p1mebr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    // Split\
    \ the input number into a string of digits\n    string digits = format(\"%Ld\"\
    , x);\n    // The length of the string\n    long len = digits.length;\n    //\
    \ Reverse the digits\n    digits = digits.dup.reverse;\n    // If shift is larger\
    \ than the number of digits, reverse\n    // the digits and return.\n    if (shift\
    \ >= len) {\n        return digits;\n    }\n    // Shift the digits\n    string\
    \ shifted = (digits[shift..$]).idup ~ digits[0..shift];\n    // Return the shifted\
    \ digits reversed\n    return shifted.reverse;\n}\n/*\nRotate the digits of the\
    \ integer x, rotate the digits right by shift\n    and return the result as a\
    \ string.\n    If shift > number of digits, return digits rotated.\n    >>> rotate_right(12L,\
    \ 1L)\n    \"21\"\n    >>> rotate_right(12L, 2L)\n    \"21\"\n    \n*/\nstring\
    \ rotate_right(long x, long shift) \n{\n    // Split the input number into a string\
    \ of digits\n    string digits = format(\"%Ld\", x);\n    // The length of the\
    \ string\n    long len = digits.length;\n    // If shift is larger than the number\
    \ of digits, rotate\n    // the digits and return.\n    if (shift >= len) {\n\
    \        return rotate(digits, shift % len);\n    }\n    // Shift the digits\n\
    \    string shifted = (digits[shift..$]).idup ~ digits[0..shift];\n    // Return\
    \ the shifted digits\n    return shifted;\n}\n/*\nTest if x is a circular prime\n\
    \    >>> is_circular_prime(11L)\n    True\n    >>> is_circular_prime(13L)\n  \
    \  True\n    >>> is_circular_prime(197L)\n    True\n    \n*/\nunittest\n{\n  \
    \  alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\"\
    );\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) ==\
    \ \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3t0uub9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    int num_digits\
    \ = ceil(log10(x));\n    int i = 0;\n    string list = [];\n    while (x > 0)\
    \ \n    {\n        list ~= x % 10;\n        x /= 10;\n    }\n    list = list[$-num_digits..$];\n\
    \    std.algorithm.rotate(list, shift % num_digits);\n    return list.text();\n\
    }\n/*\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzk0oc496.d(27): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpzk0oc496.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \nin \n{\n   \
    \ assert(x >= 0L);\n    assert(shift >= 0L);\n}\nbody \n{\n    int digits = 0;\n\
    \    int trailing = 0;\n    long y = x;\n    long z = 0L;\n    int t = 0;\n  \
    \  string result = \"\";\n    while (y > 0L) \n    {\n        y = y / 10L;\n \
    \       digits += 1;\n    }\n    trailing = shift % digits;\n    for (int i =\
    \ 0; i < digits; i += 1) \n    {\n        t = x % 10L;\n        z = z * 10L +\
    \ t;\n        x = x / 10L;\n    }\n    for (int i = 0; i < digits; i += 1) \n\
    \    {\n        t = z % 10L;\n        result = result + intToString(t);\n    \
    \    z = z / 10L;\n    }\n    for (int i = 0; i < trailing; i += 1) \n    {\n\
    \        t = result[i];\n        result[i] = result[trailing + i];\n        result[trailing\
    \ + i] = t;\n    }\n    return result;\n}\n/*\nCompute the sum of the digits in\
    \ the integer x.\n    >>> sum_digits(0L)\n    0\n    >>> sum_digits(9L)\n    9\n\
    \    >>> sum_digits(12345L)\n    15\n    \n*/\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7667z8rl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ res = to!string(x);\n    shift %= x.length;\n    if (shift == 0)\n        return\
    \ res;\n    res = res[x.length - shift .. x.length] ~ res[0 .. x.length - shift\
    \ - 1];\n    return res;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp266lpv_r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    assert(x\
    \ >= 0L);\n    assert(shift >= 0L);\n    auto result = \"\";\n    while (x > 0L)\
    \ {\n        result = format(\"%s%s\", x % 10L, result);\n        x /= 10L;\n\
    \    }\n    auto size = result.length;\n    shift %= size;\n    if (shift == 0L)\
    \ {\n        return result;\n    }\n    return format(\"%s%s\", result[$ - shift\
    \ .. $], result[0 .. $ - shift - 1]);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqmh2is0c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    //Shift\
    \ the digits right by shift and return the result as a string.\n    if (x < 0)\n\
    \        throw new Error(\"Negative x passed to circular_shift\");\n    if (shift\
    \ < 0)\n        throw new Error(\"Negative shift passed to circular_shift\");\n\
    \    if (x == 0)\n        return \"0\";\n    string digits = to!string(x);\n \
    \   shift %= digits.length;\n    if (shift == 0)\n        return digits;\n   \
    \ string parts = to!string(digits[digits.length - shift .. $]) ~ digits[0 .. digits.length\
    \ - shift - 1];\n    return parts;\n}\n/*\nunittest\n{\n    alias candidate =\
    \ circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3x4la9zk.d(29): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3x4la9zk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift\
    \ > 0)\n    {\n        string res = \"\" ~ to!string(x);\n        while (shift\
    \ > 0)\n        {\n            string last = res[$-1..$];\n            res = res[0..$-1];\n\
    \            res = last ~ res;\n            shift -= 1;\n        }\n        return\
    \ res;\n    }\n    else\n    {\n        return \"\";\n    }\n}\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppz4ccnky.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    return shift > s.length ? s.dup.reverse : s[shift ..\
    \ $] ~ s[0 .. shift-1];\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpys7yn3x1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    // split\
    \ the number into digits\n    string digits = to!string(x);\n    // if shift is\
    \ 0, return digits\n    if( shift == 0L ) return digits;\n    // if shift greater\
    \ than number of digits, return reversed digits\n    if( shift > digits.length\
    \ ) return to!string(x).reverse;\n    // return shifted digits\n    return to!string(digits[shift..$])\
    \ ~ to!string(digits[0..shift]);\n}\n/*\n    Given a long integer, return a new\
    \ long integer with the digits\n    circularly shifted k times.\n    >>> circular_shift(1234L,\
    \ 1L)\n    4123L\n    >>> circular_shift(1234L, 2L)\n    3412L\n    >>> circular_shift(1234L,\
    \ 3L)\n    2341L\n    >>> circular_shift(1234L, 4L)\n    1234L\n    >>> circular_shift(1234L,\
    \ 0L)\n    1234L\n    >>> circular_shift(1234L, 5L)\n    4321L\n*/\nlong circular_shift(long\
    \ x, long shift) \n{\n    string digits = to!string(x);\n    if( shift == 0L )\
    \ return x;\n    if( shift > digits.length ) return to!long(digits.reverse);\n\
    \    return to!long(digits[shift..$]) * pow(10L, shift) + to!long(digits[0..shift]);\n\
    }\n/*\n    Compute the area of a triangle.\n    >>> triangle_area(3.0, 4.0, 5.0)\n\
    \    6.0\n    >>> triangle_area(10.0, 10.0, 10.0)\n    43.30127018922193\n*/\n\
    double triangle_area(double a, double b, double c) \n{\n    // compute the semi-perimeter\n\
    \    double s = (a + b + c) / 2.0;\n    // compute the area\n    return sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n}\n/*\n    Solve the quadratic equation. Returns\
    \ a tuple with zero, one or two solutions.\nunittest\n{\n    alias candidate =\
    \ circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6u5pl6a7.d(61): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp6u5pl6a7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s;\n    s = to!string(x);\n    char[char[]] t;\n    long size = s.length;\n\
    \    long rshift = shift % size;\n    t = s.split;\n    t = t[0..size-rshift]\
    \ ~ t[size-rshift..$];\n    s = t.join;\n    return s;\n}\n/*\nCircular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n\
    \    \"12\"\n    \n*/\nstring circular_shift(string x, long shift) \n{\n    char[char[]]\
    \ t;\n    long size = x.length;\n    long rshift = shift % size;\n    t = x.split;\n\
    \    t = t[0..size-rshift] ~ t[size-rshift..$];\n    x = t.join;\n    return x;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsn8b96pn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = to!string(x);\n    long num_digits = result.length;\n    if (shift\
    \ > num_digits) {\n        return reverse(result);\n    } else {\n        return\
    \ result[num_digits - shift .. $] ~ result[0 .. num_digits - shift - 1];\n   \
    \ }\n}\n/*\n    Returns the nth n-digit circular prime number, 1-indexed.\n  \
    \  >>> get_circular_prime(1L)\n    2L\n    >>> get_circular_prime(2L)\n    3L\n\
    \    >>> get_circular_prime(3L)\n    5L\n    >>> get_circular_prime(4L)\n    7L\n\
    \    >>> get_circular_prime(5L)\n    11L\n    >>> get_circular_prime(6L)\n   \
    \ 13L\n    >>> get_circular_prime(7L)\n    17L\n    >>> get_circular_prime(8L)\n\
    \    31L\n    >>> get_circular_prime(9L)\n    37L\n    >>> get_circular_prime(10L)\n\
    \    71L\n    >>> get_circular_prime(11L)\n    73L\n    >>> get_circular_prime(12L)\n\
    \    79L\n    >>> get_circular_prime(13L)\n    97L\n*/\nlong get_circular_prime(long\
    \ n) \n{\n    long prime_count = 0;\n    long num = 2;\n    while (prime_count\
    \ < n) {\n        long p = num;\n        while (!prime(p)) {\n            p =\
    \ cast(long)circular_shift(p, 1);\n        }\n        num = p + 1;\n        prime_count++;\n\
    \    }\n    return num - 1;\n}\n/*\n    Returns true if the n-digit number num\
    \ is circularly prime, false otherwise.\n    >>> is_circular_prime(2L)\n    true\n\
    \    >>> is_circular_prime(3L)\n    true\n    >>> is_circular_prime(5L)\n    true\n\
    \    >>> is_circular_prime(7L)\n\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw0x3yhip.d(66): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpw0x3yhip.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long\
    \ sign = x < 0 ? -1 : 1;\n    auto str = to!string(abs(x));\n    if (str.length\
    \ == 1) return str;\n    shift %= str.length;\n    if (shift == 0) return str;\n\
    \    str = str[shift..$] ~ str[0..shift];\n    return sign < 0 ? \"-\" ~ str :\
    \ str;\n}\n/*\n    Calculate floor(sqrt(x)) without using floating point arithmetic.\n\
    \    Return a tuple (r, p, k) where r is floor(sqrt(x)), p is the integer part\n\
    \    of x and k is the fractional part of x.\n    If x is negative, return (r,\
    \ -p, k).\n    >>> integer_sqrt(10L)\n    (3L, 9L, 1L)\n    >>> integer_sqrt(5L)\n\
    \    (2L, 4L, 1L)\n*/\ntuple!(long, long, long) integer_sqrt(long x) \n{\n   \
    \ if (x < 0) \n    {\n        long r, p, k;\n        auto tuple = integer_sqrt(-x);\n\
    \        return tuple(tuple[0], -tuple[1], tuple[2]);\n    }\n    if (x < 10)\
    \ \n    {\n        long r = 0L;\n        while (r * r <= x) \n        {\n    \
    \        r += 1L;\n        }\n        return tuple(r - 1L, (r - 1L) * (r - 1L),\
    \ x - (r - 1L) * (r - 1L));\n    }\n    // x >= 10\n    long l = 0L;\n    while\
    \ (l * l <= x) \n    {\n        l *= 10L;\n    }\n    l /= 10L;\n    long u =\
    \ 2L * l;\n    long r = l;\n    while (u - l > 1L) \n    {\n        long m = (u\
    \ + l) / 2L;\n        if (m * m <= x) \n        {\n            r = m;\n      \
    \      l = m;\n        }\n        else \n        {\n\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfii7ckvf.d(70): Error: found \''unittest\'' instead of statement\n/tmp/tmpfii7ckvf.d(80):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpfii7ckvf.d(80):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfii7ckvf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n    if (is(typeof(std.conv.to!string(x))))\
    \ \n{\n    return (shift < x.length) ? x[shift .. $] ~ x[0 .. shift] : x.reverse;\n\
    }\n/*\nConvert a string into a vector of lines. The\n    newline character is\
    \ not included in the returned lines.\n    >>> lines(\"\")\n    []\n    >>> lines(\"\
    asdf\\n\")\n    [\"asdf\"]\n    >>> lines(\"\\n\")\n    []\n    >>> lines(\"\\\
    n\\n\")\n    []\n    >>> lines(\"asdf\\nfdsa\")\n    [\"asdf\", \"fdsa\"]\n  \
    \  >>> lines(\"asdf\\nfdsa\\n\")\n    [\"asdf\", \"fdsa\"]\n    >>> lines(\"asdf\\\
    nfdsa\\n\\n\")\n    [\"asdf\", \"fdsa\"]\n    >>> lines(\"\\nasdf\\nfdsa\\n\\\
    n\")\n    [\"asdf\", \"fdsa\"]\n    >>> lines(\"asdf\")\n    [\"asdf\"]\n    >>>\
    \ lines(\"asdf\\n\\n\\nfdsa\")\n    [\"asdf\", \"fdsa\"]\n    >>> lines(\"asdf\\\
    n\\n\\nfdsa\\n\")\n    [\"asdf\", \"fdsa\"]\n*/\nTuple!(dchar[], dchar[]) findEmptyLine(dchar[]\
    \ line) {\n    auto start = line.indexOf('\\n');\n    if (start == -1)\n     \
    \   return tuple(line, \"\");\n    if (start == 0)\n        return tuple(\"\"\
    , line[1 .. $]);\n    return tuple(line[0 .. start], line[start + 1 .. $]);\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2n_7kswg.d(14): Error: semicolon expected following function
    declaration\n/tmp/tmp2n_7kswg.d(14): Error: Declaration expected, not \''if\''\n/tmp/tmp2n_7kswg.d(17):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2n_7kswg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    enum\
    \ length = uniform(x, 10L, 0L).size;\n    if (shift == 0L) \n    {\n        return\
    \ to!string(x);\n    }\n    if (shift > length) \n    {\n        return to!string(reverse(x));\n\
    \    }\n    return to!string(reverse(to!(long[]) split(reverse(to!string(x)),\
    \ to!string(shift))[1])) ~ to!string(split(to!string(x), to!string(shift))[0]);\n\
    }\n/*\n    Takes the number x and generates a random number of the same number\
    \ of digits,\n    with the same least significant digit. If a circle shift of\
    \ the input number\n    is smaller than the generated number, the function is\
    \ recursively called again\n    with the new generated number as input until a\
    \ number is generated which is\n    greater than the circle shifted number.\n\
    \    >>> next_number(12)\n    13\n    >>> next_number(95)\n    96\n    >>> next_number(91)\n\
    \    92\n*/\nlong next_number(long x) \n{\n    int length = to!string(x).size;\n\
    \    long next = circular_shift(uniform(x, 10L ^^ length, 10L ^^ (length - 1L)),\
    \ uniform(0L, length));\n    if (next > x) \n    {\n        return next;\n   \
    \ }\n    return next_number(next);\n}\n/*\n    Takes the number x and generates\
    \ a random number of the same number of digits,\n    with the same least significant\
    \ digit. If a circle shift of the input number\n    is greater than the generated\
    \ number, the function is recursively called again\n    with the new generated\
    \ number as input until a number is generated which is\n    less than the circle\
    \ shifted number.\n    >>> previous_number(12)\n    11\n    >>> previous_number(98)\n\
    \    97\n    >>> previous_number(92)\n    91\n*/\nlong previous_number(long x)\
    \ \n{\n    int length = to!string(x).size;\n    long previous = circular_shift(uniform(x,\
    \ 10L ^^ length, 10L ^^ (length - 1L)), uniform\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnjkigqc9.d(24): Error: found \''split\'' when expecting \'',\''\n/tmp/tmpnjkigqc9.d(66):
    Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpnjkigqc9.d(76): Error:
    found \''void\'' when expecting \'',\''\n/tmp/tmpnjkigqc9.d(76): Error: found
    \''{\'' when expecting \'',\''\n/tmp/tmpnjkigqc9.d(76): Error: expression expected,
    not \''}\''\n/tmp/tmpnjkigqc9.d(76): Error: found \''EOF\'' when expecting \'',\''\n/tmp/tmpnjkigqc9.d(76):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpnjkigqc9.d(76): Error:
    semicolon expected, not \''EOF\''\n/tmp/tmpnjkigqc9.d(76): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnjkigqc9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    enum\
    \ numdigits = log10(x) + 1;\n    shift %= numdigits;\n    return to!string(div(x,\
    \ 10L ^ shift) + mod(x, 10L ^ shift) * 10L ^ (numdigits - shift));\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb8zg92ea.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n\tstring\
    \ result;\n\tint count;\n\tstring digits;\n\tint i;\n\tint j;\n\tint len;\n\t\
    int first;\n\tint last;\n\t\n\tcount = 0;\n\tdigits = \"\";\n\tlen = string.length(x.to!string());\n\
    \t/*\n\t\t\t\tif x < 10:\n\t\t\t\t    count = 1\n\t\t\t\telif x < 100:\n\t\t\t\
    \t    count = 2\n\t\t\t\telif x < 1000:\n\t\t\t\t    count = 3\n\t\t\t\telif x\
    \ < 10000:\n\t\t\t\t    count = 4\n\t\t\t\telif x < 100000:\n\t\t\t\t    count\
    \ = 5\n\t\t\t\telif x < 1000000:\n\t\t\t\t    count = 6\n\t\t\t\telif x < 10000000:\n\
    \t\t\t\t    count = 7\n\t\t\t\telif x < 100000000:\n\t\t\t\t    count = 8\n\t\t\
    \t\telif x < 1000000000:\n\t\t\t\t    count = 9\n\t\t\t\telif x < 10000000000:\n\
    \t\t\t\t    count = 10\n\t\t\t\telif x < 100000000000:\n\t\t\t\t    count = 11\n\
    \t\t\t\telif x < 1000000000000:\n\t\t\t\t    count = 12\n\t\t\t\telif x < 10000000000000:\n\
    \t\t\t\t    count = 13\n\t\t\t\telif x < 100000000000000:\n\t\t\t\t    count =\
    \ 14\n\t\t\t\telif x < 1000000000000000:\n\t\t\t\t    count = 15\n\t\t\t\telif\
    \ x < 10000000000000000:\n\t\t\t\t    count = 16\n\t\t\t\telif x < 100000000000000000:\n\
    \t\t\t\t    count = 17\n\t\t\t\telif x < 1000000000000000000:\n\t\t\t\t    count\
    \ = 18\n\t\t\t\telif x < 10000000000000000000:\n\t\t\t\t    count = 19\n\t\t\t\
    \telse:\n\t\t\t\t    count = 20\n\t\t\t\t*/\n\tswitch(x) {\n\t\tcase 1..\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe4fo47c6.d(70): Error: found \''..\'' when expecting \'':\''\n/tmp/tmpe4fo47c6.d(71):
    Error: found \''unittest\'' instead of statement\n/tmp/tmpe4fo47c6.d(81): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpe4fo47c6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    auto n = s.length;\n    return s[n - shift ..] ~ s[0\
    \ .. n - shift];\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n  \
    \  assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"\
    12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L)\
    \ == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpknbn6p74.d(17): Error: expression expected, not \'']\''\n/tmp/tmpknbn6p74.d(17):
    Error: found \'';\'' when expecting \'']\''\n/tmp/tmpknbn6p74.d(18): Error: found
    \''}\'' when expecting \'';\'' following return statement\n/tmp/tmpknbn6p74.d(19):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpknbn6p74.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    int dig\
    \ = log10(x).floor;\n    if (shift > dig)\n    {\n        string str = to!string(x);\n\
    \        reverse(str.begin, str.end);\n        return str;\n    }\n    long right\
    \ = pow(10, shift).floor;\n    long left = x - right;\n    string str_left = to!string(left);\n\
    \    string str_right = to!string(right);\n    string str_left_reversed = str_left.dup;\n\
    \    reverse(str_left_reversed.begin, str_left_reversed.end);\n    return format(\"\
    %s%s\", str_left_reversed, str_right);\n}\n/*\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp364c8jmo.d(30): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp364c8jmo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    //Get\
    \ the length of the integer\n    long length = digits(x).length;\n    //Get the\
    \ digits of the integer\n    string digits = digits(x);\n    string ans = \"\"\
    ;\n    //Check if the shift is less than the length\n    if(shift < length)\n\
    \    {\n        //Append the shifted value to the answer\n        foreach(i; 0\
    \ .. length)\n        {\n            ans ~= digits[(i + shift) % length];\n  \
    \      }\n    }\n    else\n    {\n        //Append the reversed value to the answer\n\
    \        foreach(i; 0 .. length)\n        {\n            ans ~= digits[length\
    \ - i - 1];\n        }\n    }\n    return ans;\n}\n/*\nFunction that checks the\
    \ number of the permutations in a string that are circularly shifted versions\
    \ of the same integer.\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4m8do7i2.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp4m8do7i2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ ds = x.digits;\n    auto reversed = ds.dup.reverse;\n    auto shifted = reversed[shift..$].concat(reversed[0..shift]);\n\
    \    auto result = typeof(return)();\n    for (dchar c; shifted.popFront(c))\n\
    \        result ~= c;\n    return result;\n}\n/*\n    Separate the digits of the\
    \ integer x into groups with size equal to shift\n    and return the result as\
    \ a string. The last group may be shorter.\n    >>> separate_groups(12345L, 2L)\n\
    \    \"12 34 5\"\n    >>> separate_groups(12345L, 3L)\n    \"123 45\"\n*/\nstring\
    \ separate_groups(long x, long shift)\n{\n    enum sep = ' ';\n    auto ds = x.digits;\n\
    \    auto s = typeof(return)();\n    long i = 0;\n    for (dchar c; ds.popFront(c))\n\
    \    {\n        s ~= c;\n        if (++i % shift == 0)\n            s ~= sep;\n\
    \    }\n    return s;\n}\n/*\n    Pad the integer x with n leading zeros.\n  \
    \  >>> pad_leading_zeros(123L, 5L)\n    \"00123\"\n*/\nstring pad_leading_zeros(long\
    \ x, long n)\n{\n    return (('0'*n) ~ x.digits).dup;\n}\n/*\n    Pad the integer\
    \ x with n trailing zeros.\n    >>> pad_trailing_zeros(123L, 5L)\n    \"12300\"\
    \n*/\nstring pad_trailing_zeros(long x, long n)\n{\n    return (x.digits ~ ('0'*n)).dup;\n\
    }\n/*\n    Separate the digits of the integer x, pad with leading zeros to fill\
    \ out \n    shifts groups, and return the result as a string.\n    >>> separate_zeros(12345L,\
    \ 2L)\n    \"12 34 5\"\n    >>> separate_zeros(12345L, 3L)\n    \"012 345\"\n\
    */\nstring separate_zeros(\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx0_kh5a8.d(19): Error: found \'')\'' when expecting \'';\''
    following for condition\n/tmp/tmpx0_kh5a8.d(20): Error: found \'';\'' when expecting
    \'')\''\n/tmp/tmpx0_kh5a8.d(37): Error: found \'')\'' when expecting \'';\'' following
    for condition\n/tmp/tmpx0_kh5a8.d(43): Error: found \''return\'' when expecting
    \'')\''\n/tmp/tmpx0_kh5a8.d(72): Error: basic type expected, not unittest\n/tmp/tmpx0_kh5a8.d(72):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpx0_kh5a8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ temp = to!string(x);\n    if (shift >= temp.length) \n    {\n        return\
    \ temp[$ - shift .. $].reverse;\n    } \n    else \n    {\n        return temp[shift\
    \ .. $] ~ temp[0 .. shift - 1];\n    }\n}\n/*\nCreate a hash for the integer x.\n\
    >>> create_hash(12L)\n19L\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3h53xlkt.d(25): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3h53xlkt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    static\
    \ string digits = \"0123456789\";\n    string num = to!string(x);\n    if (shift\
    \ > num.length) \n    {\n        num = num[$ - 1 .. $];\n    } \n    else \n \
    \   {\n        num = num[shift .. $] ~ num[0 .. shift - 1];\n    }\n    return\
    \ num;\n}\n/*\nFind the maximum digit of a number.\n    >>> max_digit(12L)\n \
    \   2L\n*/\nlong max_digit(long x) \n{\n    static string digits = \"0123456789\"\
    ;\n    string num = to!string(x);\n    if (num.length == 1) \n    {\n        return\
    \ x;\n    }\n    long max = 0L;\n    for (i, d; i < num.length; i++) \n    {\n\
    \        d = num[i];\n        if (digits.indexOf(d) > max) \n        {\n     \
    \       max = digits.indexOf(d);\n        }\n    }\n    return max;\n}\n/*\nCompute\
    \ the number of digits in the integer x.\n    >>> number_of_digits(12L)\n    2L\n\
    */\nlong number_of_digits(long x) \n{\n    static string digits = \"0123456789\"\
    ;\n    string num = to!string(x);\n    return num.length;\n}\n/*\nReturn the number\
    \ of digits which are equal to d in the integer x.\n    >>> number_of_digits_equal_to(12L,\
    \ 1L)\n    1L\n*/\nlong number_of_digits_equal_to(long x, long d) \n{\n    static\
    \ string digits = \"0123456789\";\n    string num = to!string(x);\n    long count\
    \ = 0L;\n    foreach (i, d2; num) \n    {\n        if (d2 == d) \n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\nCompute the\
    \ position of the first digit of the integer x, starting from the\n    least significant\
    \ digit.\n    >>> position_of\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpovy3jz3i.d(81): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpovy3jz3i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long\
    \ xlen = x.length;\n    // shift by more than length\n    if (shift > xlen)\n\
    \    {\n        string s = to!string(x);\n        //s = s.reversed;\n        return\
    \ s;\n    }\n    auto data = to!string(x);\n    string s = data[shift..$];\n \
    \   s ~= data[0..shift];\n    return s;\n}\nunittest\n{\n    alias candidate =\
    \ circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbtaokw3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    assert(x\
    \ >= 0);\n    assert(shift >= 0);\n    string digits = to!string(x);\n    return\
    \ shift >= digits.length ? reverse(digits) :\n        digits[shift .. $] ~ digits[0\
    \ .. shift - 1];\n}\n/*\n    Return the position of the max element of xs.\n \
    \   xs is a slice of integers.\n    >>> argmax([1, 2, 3])\n    2\n*/\nsize_t argmax(int[]\
    \ xs) \n{\n    size_t result = 0;\n    for (size_t i = 1; i < xs.length; i++)\
    \ \n    {\n        if (xs[i] > xs[result])\n            result = i;\n    }\n \
    \   return result;\n}\n/*\n    Return a tuple of arrays whose i-th element is\
    \ a slice of xs \n    whose i-th digit is equal to digit.\n    xs is a slice of\
    \ integers.\n    digit is an integer.\n    >>> partition([12, 21, 13], 1)\n  \
    \  ([21], [12, 13])\n*/\nTuple!(int[], int[]) partition(int[] xs, int digit) \n\
    {\n    int[] left, right;\n    foreach (x; xs) \n    {\n        if (x[digit] ==\
    \ '0')\n            left ~= x;\n        else\n            right ~= x;\n    }\n\
    \    return tuple(left, right);\n}\n/*\n    Return a list of tuples (x, i) where\
    \ x is an integer and\n    i is the position of the digit x[digit] in the radix\
    \ representation.\n    xs is a slice of integers.\n    digit is an integer.\n\
    \    >>> radix_sort_indices([12, 13, 21], 1)\n    [(21, 0), (12, 1), (13, 2)]\n\
    */\nTuple!(long, long)[] radix_sort_indices(long[] xs, long digit) \n{\n    //\
    \ Return a tuple of arrays whose i-th element is a slice of xs \n    // whose\
    \ i-th digit is equal to digit.\n    auto p = partition(xs\nunittest\n{\n    alias\
    \ candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n\
    \    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"\
    79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L)\
    \ == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6l4ub4fc.d(70): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmp6l4ub4fc.d(80):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmp6l4ub4fc.d(80): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmp6l4ub4fc.d(80): Error: expression
    expected, not \''}\''\n/tmp/tmp6l4ub4fc.d(80): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmp6l4ub4fc.d(80): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmp6l4ub4fc.d(80):
    Error: semicolon expected following auto declaration, not \''EOF\''\n/tmp/tmp6l4ub4fc.d(80):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6l4ub4fc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    int shift_digits\
    \ = (int)log(x, 10L) + 1;\n    if (shift >= shift_digits) \n    {\n        return\
    \ to!string(x).dup.reverse;\n    }\n    else \n    {\n        auto y = x / 10L\
    \ ^^ shift;\n        auto z = x % 10L ^^ shift;\n        return to!string(z) ~\
    \ to!string(y);\n    }\n}\n/*\nFind the sequence of circularly shifted integers\
    \ such that sum of squares\n    of the numbers is maximized.\n    >>>  best_shifted_square(10)\n\
    \    [1, 4, 9]\n*/\nlong[] best_shifted_square(long limit) \n{\n    auto x = square_sums_shifted_to_squares(limit);\n\
    \    return max_sum_shifted_to_squares(x);\n}\n/*\n    >>> square_sums_shifted_to_squares(10)\n\
    \    [0, 0, 0, 1, 10, 26, 51, 85, 120, 153]\n*/\nlong[] square_sums_shifted_to_squares(long\
    \ limit) \n{\n    long[][] mem = new long[][](limit, limit);\n    foreach (i;\
    \ 1L .. limit) \n    {\n        foreach (j; 1L .. limit) \n        {\n       \
    \     auto x = i * j;\n            if (x >= limit) \n            {\n         \
    \       break;\n            }\n            mem[x][j] = mem[x][j - 1] + square(i)\
    \ * square(j);\n        }\n    }\n    return mem.map!(x => x.back);\n}\n/*\n \
    \   >>>  max_sum_shifted_to_squares([0, 0, 0, 1, 10, 26, 51, 85, 120, 153])\n\
    \    [1, 4, 9]\n*/\nlong[] max_sum_shifted_to_squares(long[] sums) \n{\n    long\
    \ max_index = 0;\n    long max_sum = 0;\n    for (int i = 0; i < sums.length;\
    \ i++)\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpouhdqv1b.d(15): Error: C style cast illegal, use cast(int)log(x,
    10L)\n/tmp/tmpouhdqv1b.d(68): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpouhdqv1b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ d = to!string(x);\n    if (shift > d.length)\n    {\n        auto r = new string[d.length];\n\
    \        foreach(i, ref c; d)\n        {\n            r[i] = c;\n        }\n \
    \       d = r.reversed.join;\n    }\n    else\n    {\n        d = d[d.length -\
    \ shift .. $] ~ d[0 .. d.length - shift - 1];\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv_cftyth.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ digits = to!string(x);\n    long num_digits = digits.length;\n    if (shift\
    \ > num_digits)\n    {\n        digits = digits.dup.reverse;\n    }\n    else\n\
    \    {\n        digits = digits[$-shift..$] ~ digits[0..$-shift-1];\n    }\n \
    \   return digits;\n}\n/*\n    Given two strings x and y, return a string of the\
    \ form xyxyxy...xyxy (that is,\n    x followed by y followed by x followed by\
    \ y and so on).\n    \n    >>> strin\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiw789wke.d(27): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpiw789wke.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    string ret;\n    uint n = s.length;\n    if (shift >\
    \ n)\n    {\n        ret = s[n-1..0];\n    }\n    else\n    {\n        ret = s[shift..n-1]\
    \ ~ s[0..shift-1];\n    }\n    return ret;\n}\n/*\nCalculate the greatest common\
    \ divisor of a and b.\n    >>> greatest_common_divisor(12L, 15L)\n    3L\n   \
    \ >>> greatest_common_divisor(3L, 7L)\n    1L\n    >>> greatest_common_divisor(6L,\
    \ 10L)\n    2L\n    >>> greatest_common_divisor(28851538L, 1183019L)\n    17657L\n\
    */\nlong greatest_common_divisor(long a, long b) \n{\n    return b == 0 ? a :\
    \ greatest_common_divisor(b, a % b);\n}\n/*\nReturn the sum of all primes less\
    \ than n.\n    >>> sum_primes(10L)\n    17L\n    >>> sum_primes(10L)\n    17L\n\
    \    >>> sum_primes(1L)\n    0L\n    >>> sum_primes(1000L)\n    76127L\n    >>>\
    \ sum_primes(10L**6L)\n    37550402023L\n*/\nlong sum_primes(long n) \n{\n   \
    \ return sum(filter!((x) {return isPrime(x);})(iota(n)));\n}\n/*\nCalculate the\
    \ sum of all digits of a number.\n    >>> sum_digits(10L)\n    1L\n    >>> sum_digits(99L)\n\
    \    18L\n    >>> sum_digits(12345L)\n    15L\n*/\nlong sum_digits(long x) \n\
    {\n    string s = to!string(x);\n    uint n = s.length;\n    long ret = 0;\n \
    \   for (int i = 0; i < n; i++)\n    {\n        ret += s[i].to\nunittest\n{\n\
    \    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp6z4uytc.d(77): Error: found \''unittest\'' when expecting \'';\''
    following statement\n/tmp/tmpp6z4uytc.d(87): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\n/tmp/tmpp6z4uytc.d(87): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpp6z4uytc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    assert(shift\
    \ >= 0L);\n    // The number of digits in the number x.\n    long num_digits =\
    \ (long)log10(x) + 1L;\n    // If the shift is greater than the number of digits,\n\
    \    // reverse the digits and return.\n    if (shift >= num_digits) \n    {\n\
    \        return reverse(to!string(x));\n    }\n    // Convert the number x to\
    \ a string.\n    string s = to!string(x);\n    // The first part of the string.\n\
    \    string a = s[0..$ - shift];\n    // The second part of the string.\n    string\
    \ b = s[$ - shift..$];\n    // Return the concatenation of the two parts.\n  \
    \  return b ~ a;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n  \
    \  assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"\
    12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L)\
    \ == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnxvdgbcp.d(17): Error: C style cast illegal, use cast(long)log10(x)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxvdgbcp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n\tstring\
    \ s = to!string(x);\n\tif (shift > s.length)\n\t{\n\t\treturn s[$-1..$];\n\t}\n\
    \treturn s[shift..$] ~ s[0..shift-1];\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvdmvqbn9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    int digits\
    \ = (int)log10(x) + 1;\n    string buf = format(\"%.*s\", digits, to!string(x));\n\
    \    if (shift > digits) return reverse(buf);\n    auto p = buf.find(\".\");\n\
    \    if (p != -1) {\n        // have a decimal point, get rid of it.\n       \
    \ buf = buf[0..p] ~ buf[p+1..$];\n    }\n    auto buf2 = buf[$-shift..$] ~ buf[0..$-shift];\n\
    \    return buf2;\n}\n/*\nSplit the string x into a vector of strings.\n    The\
    \ split is based on one or more delimiter characters.\n    The delimiter characters\
    \ are discarded from the result.\n    >>> split(\"foo,bar,baz\", \",\")\n    [\"\
    foo\", \"bar\", \"baz\"]\n    >>> split(\"foo bar baz\", \" \")\n    [\"foo\"\
    , \"bar\", \"baz\"]\n    >>> split(\"foo,bar,baz\", \" \")\n    [\"foo,bar,baz\"\
    ]\n    >>> split(\"foo,bar,baz\", \"., \")\n    [\"foo\", \"bar\", \"baz\"]\n\
    */\nTuple!(string[],string[]) split(string x, string delimiters) \n{\n    string\
    \ split_chars = to!string(delimiters);\n    // if delimiters string is empty,\
    \ return original string.\n    if (split_chars.length == 0) return tuple(string[](x),string[](split_chars));\n\
    \    auto set_chars = split_chars.representation[1];\n    auto words = x.split(set_chars);\n\
    \    auto splits = x.split(!set_chars);\n    return tuple(words, splits);\n}\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp24hppny3.d(15): Error: C style cast illegal, use cast(int)log10(x)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp24hppny3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n  long digits\
    \ = 0;\n  long x_rev = x;\n  while (x_rev != 0) {\n    x_rev /= 10;\n    digits++;\n\
    \  }\n  if (shift > digits) \n    return numtoa(x);\n  long digits_shifted = shift\
    \ % digits;\n  return numtoa(x / exp10(digits_shifted) + (x % exp10(digits_shifted))\
    \ * exp10(digits - digits_shifted));\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5anwgi82.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long\
    \ s = shift % num_digits(x);\n    string result = to!string(x);\n    rotate(result.dup,\
    \ s);\n    return result;\n}\n/*\n    Compute a basis for the divisibility of\
    \ x by the divisor, div.\n    The basis is returned as a tuple of the number of\
    \ full cycles of\n    division and the remainder after division.\n    >>> divisibility_basis(12L,\
    \ 3L)\n    (4L, 0L)\n    >>> divisibility_basis(12L, 4L)\n    (3L, 0L)\n    >>>\
    \ divisibility_basis(19L, 3L)\n    (6L, 1L)\n*/\ntuple!(long,long) divisibility_basis(long\
    \ x, long div) \n{\n    long cycles = x / div;\n    long remainder = x % div;\n\
    \    return tuple(cycles, remainder);\n}\n/*\nGenerate a polynomial tuple for\
    \ the divisibility basis\n    >>> divisibility_basis_to_poly(3L, 0L)\n    (3L,\
    \ 0L)\n    >>> divisibility_basis_to_poly(6L, 1L)\n    (6L, -1L)\n*/\ntuple!(long,long)\
    \ divisibility_basis_to_poly(long c, long r) \n{\n    return tuple(c, -r);\n}\n\
    /*\nGenerate the polynomial representing the divisibility of x by div\n    >>>\
    \ divisibility_poly(12L, 3L)\n    (4L, 0L)\n    >>> divisibility_poly(12L, 4L)\n\
    \    (3L, 0L)\n    >>> divisibility_poly(19L, 3L)\n    (6L, -1L)\n*/\ntuple!(long,long)\
    \ divisibility_poly(long x, long div) \n{\n    auto basis = divisibility_basis(x,\
    \ div);\n    return divisibility_basis_to_poly(basis[0], basis[1]);\n}\n/*\nMultiply\
    \ the two polynomials\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmws5twt_.d(62): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmws5twt_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n  static\
    \ immutable ushort[] table = [\n      0x0000, 0x8000, 0xC000, 0xE000, 0xF000,\
    \ 0xF800,\n      0xFC00, 0xFE00, 0xFF00, 0xFF80, 0xFFC0, 0xFFE0,\n      0xFFF0,\
    \ 0xFFF8, 0xFFFC, 0xFFFE, 0xFFFF];\n  static immutable ubyte[] nibble_lookup =\
    \ [\n      '0', '1', '2', '3', '4', '5', '6', '7',\n      '8', '9', 'A', 'B',\
    \ 'C', 'D', 'E', 'F'];\n  long i;\n  const uint shift_digits = shift / 4;\n  const\
    \ uint shift_bits = shift % 4;\n  ubyte[] nibbles = new ubyte[8];\n  uint x_digits;\n\
    \  if (x < 0)\n  {\n    x_digits = 4;\n  }\n  else\n  {\n    x_digits = 7;\n \
    \ }\n  if (shift >= x_digits * 4)\n  {\n    return circular_shift(-x, shift);\n\
    \  }\n  for (i = 0; i < 8; i++)\n  {\n    nibbles[i] = nibble_lookup[(x >> (i\
    \ * 4)) & 0xF];\n  }\n  uint bit_mask = table[shift_bits];\n  uint bit_mask_n\
    \ = ~bit_mask;\n  uint i_h, i_l;\n  uint r_h, r_l;\n  uint carry;\n  for (i =\
    \ 0; i < 8; i++)\n  {\n    i_h = i + shift_digits;\n    i_l = i_h + 1;\n    r_h\
    \ = i_h % 8;\n    r_l = i_l % 8;\n    nibbles[r_h] |= (nibbles[r_l] & bit_mask);\n\
    \    nibbles[r_l] &= bit_mask_n;\n    nibbles[r_l\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp4f22v9m.d(57): Error: found \''unittest\'' when expecting \'']\''\n/tmp/tmpp4f22v9m.d(58):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmpp4f22v9m.d(67):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp4f22v9m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    assert(x>=0L);\n\
    \    if (x == 0L)\n    {\n        return \"0\";\n    }\n    //int numDigits =\
    \ (int) log10(x) + 1;\n    string s = to!string(x);\n    shift = shift % s.length;\n\
    \    if (shift == 0L)\n    {\n        return s;\n    }\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\nGiven a list of n positive integers, and an integer\
    \ k, find if the digits of\n    the integers can be rearranged so that all numbers\
    \ in the list have the\n    same minimum k digit cyclic shift.\n    >>> same_cyclic_shift([1L,\
    \ 2L, 12L, 120L], 1L)\n    true\n    >>> same_cyclic_shift([1L, 2L, 12L, 120L],\
    \ 2L)\n    false\n*/\nunittest\n{\n    alias candidate = circular_shift;\n\n \
    \   assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoiksz2ip.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n    {\n        return s[$-1..$];\n\
    \    }\n    return s[$-shift..$] ~ s[0..$-shift-1];\n}\n/*\n    Given a collection\
    \ of intervals, determine the minimal number of intervals\n    that cover all\
    \ the points in the original collection.\n    \n    Example:\n        >>> (1L,\
    \ 2L), (2L, 3L), (3L, 4L) => (1L, 4L)\n        >>> (1L, 2L), (3L, 4L), (2L, 3L)\
    \ => (1L, 4L)\n        >>> (1L, 4L), (3L, 4L), (2L, 3L) => (1L, 4L)\n        >>>\
    \ (1L, 3L), (2L, 3L), (3L, 4L) => (1L, 4L)\n    \n    It is guaranteed that the\
    \ input set will never be empty and will always\n    contain at least one interval.\n\
    */\nTuple!(long, long) find_interval(Tuple!(long, long)[] set) \n{\n    long min\
    \ = set[0][0];\n    long max = set[0][1];\n    foreach (interval; set)\n    {\n\
    \        if (interval[0] < min)\n        {\n            min = interval[0];\n \
    \       }\n        if (interval[1] > max)\n        {\n            max = interval[1];\n\
    \        }\n    }\n    return tuple(min, max);\n}\n/*\n    Given a collection\
    \ of intervals, determine the minimal number of intervals\n    that cover all\
    \ the points in the original collection.\n    \n    Example:\n        >>> (1L,\
    \ 2L), (2L, 3L), (3L, 4L) => (1L, 4L)\n        >>> (1L, 2L), (3L, 4L), (2L, 3L)\
    \ => (1L, 4L)\n        >>> (1L, 4L), (3L, 4L), (2L, 3L) => (1L, 4L\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwj188wbi.d(52): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwj188wbi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n    {\n\treturn s[s.length..0];\n\
    \    }\n    return (s[shift..$] ~ s[0..shift-1]);\n}\n/*\nGiven array of integers,\
    \ for each integer i, compute the next higher number\nwith the same number of\
    \ bits set. If x is the highest such number with the\nnumber of bits set, then\
    \ returns 0.\n*/\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg_3r3zjt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n  auto result\
    \ = to!string(x);\n  if (shift >= result.length) {\n    return result.reversed;\n\
    \  }\n  else {\n    return result[shift..$] ~ result[0..shift];\n  }\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6n9x5zgs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift\
    \ == 0L) return to!string(x);\n    if (shift > floor(log10(abs(x))))\n    {\n\
    \        return to!string(x);\n    }\n    int num_digits = floor(log10(abs(x)))\
    \ + 1;\n    int[] digits = new int[num_digits];\n    int i = 0;\n    long abs_x\
    \ = abs(x);\n    while (abs_x > 0)\n    {\n        digits[i] = abs_x % 10;\n \
    \       abs_x /= 10;\n        i++;\n    }\n    shift %= num_digits;\n    auto\
    \ shifted_digits = tuple(digits[shift..$], digits[0..shift]);\n    string s =\
    \ appender!string();\n    for (auto digit : shifted_digits)\n    {\n        s\
    \ ~= to!string(digit);\n    }\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo0ng5dhl.d(33): Error: no identifier for declarator digit\n/tmp/tmpo0ng5dhl.d(33):
    Error: expression expected, not \'':\''\n/tmp/tmpo0ng5dhl.d(33): Error: found
    \''shifted_digits\'' when expecting \'';\'' following for condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpo0ng5dhl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ res = to!string(x);\n    ulong len = res.length;\n    if (shift > len)\n   \
    \ {\n        shift = len;\n    }\n    ulong n = len - shift;\n    res[0 .. n]\
    \ = res[shift .. $];\n    res[n .. $] = res[0 .. shift];\n    return res;\n}\n\
    /*\nCreate a matrix\nunittest\n{\n    alias candidate = circular_shift;\n\n  \
    \  assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"\
    12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L)\
    \ == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5gs25elm.d(26): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5gs25elm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long\
    \ num_digits = cast(long)log10(x);\n    if (shift > num_digits)\n        return\
    \ std.conv.to!string(x).reverse;\n    else\n        return std.conv.to!string(x)\
    \ ~= std.conv.to!string(x)[0..shift].reverse;\n}\n/*\nCount the occurances of\
    \ the integer x in the array a.\n    >>> count(1L, [1L, 2L, 1L, 3L])\n    2\n\
    \    >>> count(0L, [])\n    0\n    \n*/\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeb0agulx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift\
    \ > to!string(x).length)\n    {\n        return \"\";\n    }\n    long n = x;\n\
    \    long num;\n    long firstDigit;\n    long rem;\n    long temp = 0;\n    string\
    \ result = \"\";\n    num = n;\n    firstDigit = num / (long)(pow(10, to!string(num).length\
    \ - 1));\n    rem = num % (long)(pow(10, to!string(num).length - 1));\n    while\
    \ (shift > 0)\n    {\n        firstDigit = num / (long)(pow(10, to!string(num).length\
    \ - 1));\n        rem = num % (long)(pow(10, to!string(num).length - 1));\n  \
    \      temp = (rem * 10) + firstDigit;\n        num = temp;\n        shift -=\
    \ 1;\n    }\n    result = to!string(num);\n    return result;\n}\n/*\nSum of the\
    \ first n prime numbers\n    >>> sum_of_primes(1L)\n    2L\n    >>> sum_of_primes(4L)\n\
    \    17L\n*/\nlong sum_of_primes(long n) \n{\n    long sum = 0;\n    long i =\
    \ 2;\n    long count = 0;\n    while (count < n)\n    {\n        if (is_prime(i))\n\
    \        {\n            sum += i;\n            count += 1;\n        }\n      \
    \  i += 1;\n    }\n    return sum;\n}\n/*\nReturn True if n is prime, false otherwise\n\
    \    >>> is_prime(1L)\n    False\n    >>> is_prime(4L)\n    False\n    >>> is_prime(5L)\n\
    \    True\n*/\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpathdirjt.d(26): Error: C style cast illegal, use cast(long)pow(10,
    to!string(num).length - 1)\n/tmp/tmpathdirjt.d(27): Error: C style cast illegal,
    use cast(long)pow(10, to!string(num).length - 1)\n/tmp/tmpathdirjt.d(30): Error:
    C style cast illegal, use cast(long)pow(10, to!string(num).length - 1)\n/tmp/tmpathdirjt.d(31):
    Error: C style cast illegal, use cast(long)pow(10, to!string(num).length - 1)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpathdirjt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    return\
    \ \"\";\n}\n/*\n    Count the number of bits set to one in the binary representation\
    \ of x.\n    >>> count_bits(0xFFFFL)\n    12\n*/\nlong count_bits(long x) \n{\n\
    \    return x;\n}\n/*\n    Sum of the squares of the two least significant digits\
    \ of the integer x.\n    >>> digit_sum_squares(13L)\n    10\n    >>> digit_sum_squares(22L)\n\
    \    8\n*/\nlong digit_sum_squares(long x) \n{\n    return x;\n}\n/*\n    For\
    \ integer x, return the number of distinct factors.\n    >>> num_factors(12L)\n\
    \    6\n    >>> num_factors(100L)\n    9\n*/\nlong num_factors(long x) \n{\n \
    \   return x;\n}\n/*\n    Return True if x is a palindrome, False otherwise.\n\
    \    >>> is_palindrome(12L)\n    False\n    >>> is_palindrome(12321L)\n    True\n\
    */\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgs6k51kr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long\
    \ num = x;\n    long num2 = 0L;\n    long digit = 0L;\n    long count = 0L;\n\
    \    long power = 0L;\n    long power2 = 0L;\n    long arr = 0L;\n    long index\
    \ = 0L;\n    string str = newTypeName.string;\n    long shift2 = shift;\n    long\
    \ x2 = x;\n    long tmp = 0L;\n    while (x2 != 0L)\n    {\n        digit = x2\
    \ % 10L;\n        x2 = x2 / 10L;\n        num2 = (num2 * 10L) + digit;\n     \
    \   count = count + 1L;\n    }\n    if (shift2 > count)\n    {\n        shift2\
    \ = shift2 % count;\n    }\n    power = count - shift2;\n    power2 = power;\n\
    \    for (long i = 0L; i < count; i++)\n    {\n        digit = num2 % 10L;\n \
    \       num2 = num2 / 10L;\n        tmp = power;\n        arr = arr + (digit *\
    \ power(10L, tmp));\n        power = power - 1L;\n    }\n    while (arr != 0L)\n\
    \    {\n        digit = arr % 10L;\n        arr = arr / 10L;\n        index =\
    \ (power2 - 1L) - index;\n        tmp = index;\n        str ~= std.string.from(digit\
    \ * power(10L, tmp));\n        index = index + 1L;\n    }\n    return str;\n}\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5q7jwxi5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    int nDigits;\n\
    \    string a;\n    nDigits = cast(int)log10(x);\n    a = to!string(x);\n    if\
    \ (shift > nDigits)\n    {\n        reverse(a);\n        return a;\n    }\n  \
    \  else\n    {\n        return a[nDigits - shift .. $] ~ a[0 .. nDigits - shift\
    \ - 1];\n    }\n}\n/*\nInsert the element x into the second array in the first\
    \ place where it is less than or equal to the next element,\n    and shift the\
    \ remaining elements down.\n    Return the number of shifts.\n    >>> c = [5,\
    \ 8, 6, 7, 4]\n    >>> insert(c, 2)\n    2\n    >>> c\n    [5, 6, 8, 7, 4]\n*/\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp925rxbmt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n\tif (shift\
    \ == 0) \n\t{\n\t\treturn to!string(x);\n\t}\n\telse \n\t{\n\t\tauto n = log10(x);\n\
    \t\tauto shift_by = shift % (n + 1);\n\t\tauto shifted = x / 10^shift_by + x %\
    \ 10^shift_by * 10^(n + 1 - shift_by);\n\t\treturn to!string(shifted);\n\t}\n\
    }\n/*\n    >>> count_combinations(123L, 1L)\n    6\n    >>> count_combinations(123L,\
    \ 2L)\n    6\n    >>> count_combinations(123L, 3L)\n    3\n    >>> count_combinations(123L,\
    \ 4L)\n    1\n*/\nulong count_combinations(long x, long shift)\n{\n\tstring digits\
    \ = circular_shift(x, shift);\n\tulong comb = 1;\n\tint len = digits.length;\n\
    \tif (len > 1)\n\t{\n\t\tchar prev_digit = digits[0];\n\t\tint run_length = 1;\n\
    \t\tfor (int i = 1; i < len; i++)\n\t\t{\n\t\t\tchar digit = digits[i];\n\t\t\t\
    if (digit == prev_digit)\n\t\t\t{\n\t\t\t\trun_length++;\n\t\t\t}\n\t\t\telse\n\
    \t\t\t{\n\t\t\t\tcomb *= run_length + 1;\n\t\t\t\trun_length = 1;\n\t\t\t}\n\t\
    \t\tprev_digit = digit;\n\t\t}\n\t\tcomb *= run_length + 1;\n\t}\n\treturn comb;\n\
    }\n/*\n    >>> circular_count_combinations(123L)\n    (1, 6)\n    >>> circular_count_combinations(1234L)\n\
    \    (4, 3)\n    >>> circular_count_combinations(12345L)\n    (3, 6)\n    >>>\
    \ circular_count_combinations(123456L)\n    (6, 6)\n    >>> circular_count_combinations(1234567L)\n\
    \    (1, 12)\n    >>> circular_count_\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpseb8y6ij.d(64): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpseb8y6ij.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n  if (shift\
    \ > to!string(x).length) \n  {\n    return to!string(x)[$-1 .. $].reversed;\n\
    \  }\n  else \n  {\n    auto x_str = to!string(x);\n    return x_str[shift ..\
    \ $] ~ x_str[0 .. shift - 1];\n  }\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5mlph4fd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ ret = \"\";\n    ret = to!string(x);\n    return ret[shift..$] ~ ret[0..shift-1];\n\
    }\n/*\nCheck if the integer is a circular prime.\n    >>> is_circular_prime(197L)\n\
    \    true\n    >>> is_circular_prime(981L)\n    false\n    >>> is_circular_prime(123L)\n\
    \    false\n*/\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4c17ig4r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    while (shift > s.length)\n        shift -= s.length;\n\
    \    if (shift == 0)\n        return s;\n    return s[shift..$] ~ s[0..shift -\
    \ 1];\n}\n/*\nRead the data from a file and return as a list of integers.\n*/\n\
    long[] readData(string filename) \n{\n    return readData!(Array)(filename);\n\
    }\n/*\nRead the data from a file and store it in the array xs.\n*/\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_pk__b1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n\t// Turn\
    \ the number into a string\n\tstring s = to!string(x);\n\t\n\t// If the shift\
    \ is greater than the length of the string\n\t// then reverse the string\n\tif\
    \ (shift > s.length) \n\t{\n\t\treturn s.reverse;\n\t}\n\t\n\t// Otherwise we\
    \ split the string at the shift point\n\t// and put it back together\n\treturn\
    \ s[shift..$] ~ s[0..shift-1];\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppbynv78r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long\
    \ n = log10(float(x));\n    long div = pow(10L, n);\n    long digit = x % 10L;\n\
    \    x /= 10L;\n    return ((div == 1L) ? \"\" : circular_shift(x, shift - 1L))\
    \ + circular_shift_digit(digit, shift);\n}\n/*\n    \n*/\nstring circular_shift_digit(long\
    \ x, long shift) \n{\n    if (shift <= 0L) \n    {\n        return \"\";\n   \
    \ }\n    else \n    {\n        return circular_shift_digit(x / 10L, shift - 1L)\
    \ + to!string(x % 10L);\n    }\n}\n/*\nCheck if the circular shift of the digits\
    \ of x is a permutation of the digits of y.\n    >>> circular_shift_permutation(12L,\
    \ 21L)\n    true\n    >>> circular_shift_permutation(12L, 22L)\n    false\n  \
    \  \n*/\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgcucohok.d(15): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpgcucohok.d(15): Error: semicolon expected, not \'')\''\n/tmp/tmpgcucohok.d(15):
    Error: found \'')\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpgcucohok.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long\
    \ n = 0;\n    string str = to!string(x);\n    string result = \"\";\n    auto\
    \ length = str.length;\n    if (shift > length) \n    {\n        while (shift\
    \ > length) \n        {\n            auto result = to!string(x % 10) ~ result;\n\
    \            x /= 10;\n            length++;\n        }\n        return result;\n\
    \    }\n    else \n    {\n        while (n < shift) \n        {\n            result\
    \ = to!string(x % 10) ~ result;\n            x /= 10;\n            n++;\n    \
    \    }\n        return str[$ - length + shift .. $] ~ result;\n    }\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8t32wp4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n     long\
    \ n = 2L;\n     long y = x / pow(10L, shift);\n     long z = x % pow(10L, shift);\n\
    \     string ys = to!string(y);\n     string zs = to!string(z);\n     return zs\
    \ ~ ys;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyj5aexz5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ x_str = to!string(x);\n    if (shift > x_str.length)\n    {\n        return\
    \ x_str.dup.reverse;\n    }\n    else\n    {\n        string y_str = x_str[shift..$];\n\
    \        return y_str ~ x_str[0..shift-1];\n    }\n}\n/*\nDigits of string s sorted\
    \ in ascending order.\n    >>> circular_sort(\"321\")\n    \"123\"\n    >>> circular_sort(\"\
    456\")\n    \"456\"\n*/\nstring circular_sort(string s) \n{\n    import std.algorithm\
    \ : sort;\n    //string s_dup = s.dup;\n    // sort returns nothing.\n    s.sort;\n\
    \    return s;\n}\n/*\nReturn a tuple of all permutations of the digits of integer\
    \ x\n    in circular sort order.\n    >>> circular_sort_permutations(12L)\n  \
    \  (12L, 21L)\n    >>> circular_sort_permutations(321L)\n    (123L, 132L, 213L,\
    \ 231L, 312L, 321L)\n*/\nalias circular_sort_permutations = std.algorithm.combinatorics.permutations!(circular_sort);\n\
    /*\nReturn the number of integers x where the number of circular shifts is\n \
    \   a prime number for all digits of x, 1 <= x <= n.\n*/\nlong prime_permutations(long\
    \ n)\n{\n    long prime_permutations = 0;\n    foreach (x; circular_sort_permutations(iota(1L,\
    \ n)))\n    {\n        if (all!(circular_shift)(x, _ > 0).map!(circular_sort_permutations).map!(x\
    \ => x.length).all!(isPrime))\n        {\n            ++prime_permutations;\n\
    \        }\n    }\n    return prime_permutations;\n}\nunittest\n{\n    assert(circular_shift(12L,\
    \ 1L) == \"21\");\n    assert(circular_shift(12L, 2L) == \"12\");\n    assert(circular_sort(\"\
    321\") == \"123\");\n    assert(\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp70vqto9r.d(72): Error: expression expected, not \''unittest\''\n/tmp/tmp70vqto9r.d(73):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmp70vqto9r.d(74): Error: found
    \''alias\'' when expecting \'';\'' following statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp70vqto9r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ s = to!string(x);\n    if (shift > s.length) \n    {\n        s = s[$-1 .. 0].joiner;\n\
    \    }\n    else \n    {\n        s = s[$ - shift .. $] ~ s[$ - (shift - 1) ..\
    \ $ - shift];\n    }\n    return s;\n}\n/*\n    Convert a decimal number represented\
    \ as a string to the integer it\n    represents, and return the result.\n    >>>\
    \ decimal_string_to_integer(\"3\")\n    3\n    >>> decimal_string_to_integer(\"\
    345\")\n    345\n    >>> decimal_string_to_integer(\"12345\")\n    12345\n*/\n\
    long decimal_string_to_integer(string s) \n{\n    long v = 0;\n    long n = s.length;\n\
    \    foreach (i, c; s) \n    {\n        v += cast(long)(c - '0') * pow(10, n -\
    \ i - 1);\n    }\n    return v;\n}\n/*\n    Convert an integer to a decimal number\
    \ string and return the result.\n    >>> integer_to_decimal_string(3)\n    \"\
    3\"\n    >>> integer_to_decimal_string(345)\n    \"345\"\n    >>> integer_to_decimal_string(12345)\n\
    \    \"12345\"\n*/\nstring integer_to_decimal_string(long x) \n{\n    // take\
    \ advantage of the fact that to!string(x) already does the conversion\n    return\
    \ to!string(x);\n}\n/*\n    A tuple for representing rational numbers.\n    >>>\
    \ auto r = Tuple!(long, long)(1L, 2L);\n    >>> r[0]\n    1\n    >>> r[1]\n  \
    \  2\n*/\nalias Rational = Tuple!(long, long);\n/*\n    Construct a rational number\
    \ from its numerator and denominator and return\n    the result.\n    >>> rational(1L,\
    \ 2L)\n    (1, 2)\n    >>> rational(1L, 10L)\n    (1, 10)\n    >>> rational(123L,\
    \ 321L)\n    (123, 321\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm8o34kbq.d(69): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpm8o34kbq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift\
    \ == 0L) \n    {\n        return to!string(x);\n    }\n    return circular_shift(cast(ulong)(x)\
    \ << shift | x >> (cast(ulong)(x).digits - shift), shift);\n}\n/*\n    Calculate\
    \ the x^y, mod m.\n    >>> powmod(5L, 3L, 7L)\n    6L\n    >>> powmod(3L, 5L,\
    \ 7L)\n    3L\n*/\nlong powmod(long x, long y, long m) \n{\n    if (y == 0L) \n\
    \    {\n        return 1L;\n    }\n    long result = powmod(x, y / 2L, m);\n \
    \   result = (result * result) % m;\n    if (y % 2L != 0L) \n    {\n        result\
    \ = (result * x) % m;\n    }\n    return result;\n}\n/*\n    Calculate the group\
    \ order of a group G.\n    >>> group_order(8L)\n    4L\n    >>> group_order(18L)\n\
    \    2L\n*/\nlong group_order(long x) \n{\n    return 2L ^ ((1L << (cast(ulong)(x).digits\
    \ / 2L)) - 1L);\n}\n/*\n    Calculate the generator for a group G.\n    >>> g_generator(8L)\n\
    \    3L\n    >>> g_generator(18L)\n    5L\n*/\nlong g_generator(long x) \n{\n\
    \    long order = group_order(x);\n    long a = 2L;\n    while (true) \n    {\n\
    \        if (powmod(a, order, x) == 1L) \n        {\n            break;\n    \
    \    }\n        a += 1L;\n    }\n    return a;\n}\nlong[] random_sequence(long\
    \ start, long count) \n{\n    int seed = time(null).year + time(null).month +\
    \ time(null).day + time(null).hour + time(null).minute + time(null).second + start;\n\
    \    Random rand = new Random(seed);\n\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1u93jljy.d(79): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1u93jljy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ digits;\n    foreach(c; to!string(x))\n        digits ~= c;\n    uint len =\
    \ digits.length;\n    shift %= len;\n    return digits[shift..$] ~ digits[0..shift-1];\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7h7r7vd_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n  // Write\
    \ your code here\n  return std.to!string(x);\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqb3ht6mc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ digits = to!string(x);\n    if (shift > digits.length)\n    {\n        return\
    \ digits.dup.reverse;\n    }\n    auto left = digits[0..digits.length - shift];\n\
    \    auto right = digits[digits.length - shift..digits.length];\n    return right\
    \ ~ left;\n}\n/*\n    Return a string that contains digits of the integer x shifted\
    \ right\n    by shift digits.\n    >>> shift_digits(12L, 2L)\n    \"0012\"\n \
    \   >>> shift_digits(12L, 4L)\n    \"000012\"\n*/\nstring shift_digits(long x,\
    \ long shift) \n{\n    auto digits = to!string(x);\n    return \"0\" * shift ~\
    \ digits;\n}\n/*\n    Return the integer resulting from shifting the digits of\
    \ x right by\n    shift digits.\n    >>> shift_digits_right(12L, 2L)\n    1200L\n\
    \    >>> shift_digits_right(12L, 4L)\n    120000L\n*/\nlong shift_digits_right(long\
    \ x, long shift) \n{\n    auto digits = to!string(x);\n    return to!long(digits\
    \ ~ \"0\" * shift);\n}\n/*\n    Return a string that contains digits of the integer\
    \ x shifted left\n    by shift digits.\n    >>> shift_digits_left(12L, 2L)\n \
    \   \"1200\"\n    >>> shift_digits_left(12L, 4L)\n    \"120000\"\n*/\nstring shift_digits_left(long\
    \ x, long shift) \n{\n    auto digits = to!string(x);\n    return digits ~ \"\
    0\" * shift;\n}\n/*\n    Return the integer resulting from shifting the digits\
    \ of x left by\n    shift digits.\n    >>> shift_digits_left(12L, 2L)\n    1200L\n\
    \    >>> shift_digits_left(12L, 4L)\n    120000L\n*/\nlong shift_digits_left(long\
    \ x, long shift) \n{\n    auto digits = to!string(x);\n    return to!long(digits\
    \ ~ \"0\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8t_rj8j7.d(79): Error: found \''1\'' when expecting \'',\''\n/tmp/tmp8t_rj8j7.d(80):
    Error: found \''12\'' when expecting \'',\''\n/tmp/tmp8t_rj8j7.d(81): Error: found
    \''79\'' when expecting \'',\''\n/tmp/tmp8t_rj8j7.d(82): Error: found \''21\''
    when expecting \'',\''\n/tmp/tmp8t_rj8j7.d(83): Error: found \''11\'' when expecting
    \'',\''\n/tmp/tmp8t_rj8j7.d(83): Error: unterminated string constant starting
    at /tmp/tmp8t_rj8j7.d(83)\n/tmp/tmp8t_rj8j7.d(85): Error: found \''EOF\'' when
    expecting \'',\''\n/tmp/tmp8t_rj8j7.d(85): Error: found \''EOF\'' when expecting
    \'')\''\n/tmp/tmp8t_rj8j7.d(85): Error: found \''EOF\'' when expecting \'';\''
    following return statement\n/tmp/tmp8t_rj8j7.d(85): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp8t_rj8j7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    foreach(immutable i; 0 .. shift)\n    {\n        immutable\
    \ c = s[0];\n        s = s[1 .. $];\n        s ~= c;\n    }\n    return s;\n}\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnjb1954.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \nin {\n    assert(x\
    \ >= 0L);\n    assert(shift >= 0L);\n}\nout(result) {\n    assert(result.length\
    \ == x.to!string.length);\n}\nbody {\n    string digits = x.to!string;\n    if\
    \ (shift >= digits.length) {\n        return digits.dup.reverse;\n    }\n    else\
    \ {\n        return digits[shift..$].idup ~ digits[0..shift];\n    }\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_kv3x3l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s;\n    s = to!string(x);\n    if (shift > s.length)\n    {\n        string\
    \ temp;\n        for (int i = s.length - 1; i >= 0; i--)\n        {\n        \
    \    temp ~= s[i];\n        }\n        return temp;\n    }\n    int start = s.length\
    \ - shift;\n    return s[start .. $] ~ s[0 .. start - 1];\n}\n/*\nCircular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n\
    \    \"12\"\n    \n*/\nstring circular_shift2(long x, long shift) \n{\n    string\
    \ s;\n    s = to!string(x);\n    if (shift > s.length)\n    {\n        reverse(s);\n\
    \        return s;\n    }\n    int start = s.length - shift;\n    return s[start\
    \ .. $] ~ s[0 .. start - 1];\n}\n/*\nCircular shift the digits of the integer\
    \ x, shift the digits right by shift\n    and return the result as a string.\n\
    \    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L,\
    \ 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring\
    \ circular_shift3(long x, long shift) \n{\n    string s;\n    s = to!string(x);\n\
    \    if (shift > s.length)\n    {\n        return s[$ .. 0];\n    }\n    int start\
    \ = s.length - shift;\n    return s[start .. $] ~ s[0 .. start - 1];\n}\n/*\n\
    Circular shift the digits of the integer x, shift the digits right by shift\n\
    \    and return the result as a string.\n    If shift > number of digits, return\
    \ digits reversed.\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>>\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph2okl582.d(72): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmph2okl582.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    long len = s.length;\n    if (shift > len)\n    {\n \
    \       s = s[$-1..$];\n    }\n    else\n    {\n        s = s[shift..len-1] ~\
    \ s[0..shift-1];\n    }\n    return s;\n}\n/*\nReturn a sequence of length n of\
    \ circular shifts of the integer x\n    >>> circular_shifts(12L, 2L)\n    [\"\
    21\", \"12\"]\n    >>> circular_shifts(12L, 3L)\n    [\"21\", \"12\"]\n    >>>\
    \ circular_shifts(123L, 2L)\n    [\"321\", \"123\", \"231\"]\n*/\nstring[] circular_shifts(long\
    \ x, long n) \n{\n    string[] res;\n    string s = to!string(x);\n    long len\
    \ = s.length;\n    foreach (i; 0..min(n, len))\n    {\n        res ~= circular_shift(x,\
    \ i);\n    }\n    return res;\n}\n/*\n    >>> binary_search(0, 3, 1)\n    0\n\
    \    >>> binary_search(0, 3, 4)\n    3\n    >>> binary_search(0, 3, 2)\n    1\n\
    \    >>> binary_search(0, 3, 3)\n    2\n    >>> binary_search(0, 3, 5)\n    3\n\
    \    >>> binary_search(0, 3, 0)\n    0\n*/\nlong binary_search(long first, long\
    \ last, long value) \n{\n    long len = last - first;\n    if (len <= 0)\n   \
    \ {\n        return first;\n    }\n    long mid = first + (len / 2);\n    if (value\
    \ <= mid)\n    {\n        return binary_search(first, mid, value);\n    }\n  \
    \  else\n    {\n        return binary_search(mid + 1, last, value);\n    }\n}\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg_wavoo4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n    in(long,\
    \ long) out(string)\n{\n    auto s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].dup.reverse;\n    s ~= s[0..shift-1];\n    return s[shift..$];\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw_mj9quq.d(14): Error: statement expected to be { }, not (\n/tmp/tmpw_mj9quq.d(14):
    Error: found \'',\'' when expecting \''.\'' following long\n/tmp/tmpw_mj9quq.d(14):
    Error: found \''long\'' when expecting identifier following \''long.\''\n/tmp/tmpw_mj9quq.d(14):
    Error: found \''out\'' when expecting \'';\'' following statement\n/tmp/tmpw_mj9quq.d(14):
    Error: Declaration expected, not \''(\''\n/tmp/tmpw_mj9quq.d(17): Error: Declaration
    expected, not \''if\''\n/tmp/tmpw_mj9quq.d(19): Error: no identifier for declarator
    s\n/tmp/tmpw_mj9quq.d(19): Error: Declaration expected, not \''~=\''\n/tmp/tmpw_mj9quq.d(20):
    Error: Declaration expected, not \''return\''\n/tmp/tmpw_mj9quq.d(21): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_mj9quq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift\
    \ > to!string(x).length)\n    {\n        return std.string.reverse(to!string(x));\n\
    \    }\n    else \n    {\n        string result;\n        int l = to!string(x).length;\n\
    \        foreach (i; shift..shift+l) \n        {\n            result ~= to!string(x)[i\
    \ % l];\n        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxbe7x_n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long\
    \ i = 0L;\n    string result = \"\";\n    while (i < shift)\n    {\n        //if\
    \ (shift >= 0L)\n        //    result += to!string(x%10L);\n        if (shift\
    \ < 0L)\n            result = to!string(x%10L) ~ result;\n        x /= 10L;\n\
    \        i++;\n    }\n    if (shift >= 0L)\n        result = to!string(x) ~ result;\n\
    \    else\n        result = result ~ to!string(x);\n    return result;\n}\n/*\n\
    \    *  Common factors of x, y\n    *  >>> common_factors(2L, 4L)\n    *  [2L]\n\
    \    *  >>> common_factors(2L, 6L)\n    *  [2L]\n    *  >>> common_factors(2L,\
    \ 3L)\n    *  []\n    *\n*/\nauto common_factors(long x, long y) \n{\n    long\
    \ i = 2L;\n    long xf = x;\n    long yf = y;\n    long[] result = [];\n    while\
    \ (i <= min(xf, yf))\n    {\n        if (xf%i == 0L && yf%i == 0L)\n        {\n\
    \            result ~= i;\n            xf /= i;\n            yf /= i;\n      \
    \  }\n        else\n        {\n            i++;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3esvq7g4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    int n\
    \ = to!string(x).length;\n    if (shift > n) \n    {\n        auto s = to!string(x);\n\
    \        std.algorithm.reverse(s);\n        return s;\n    }\n    else \n    {\n\
    \        return to!string(x / pow(10, n - shift)) ~ to!string(x % pow(10, n -\
    \ shift));\n    }\n}\n/*\nReturn a string where each digit of the integer x is\
    \ repeated n times.\n    If a digit is 0, return a string of zeros of length n.\n\
    \    >>> x_times_digits(12L, 3L)\n    \"111112222233333\"\n    >>> x_times_digits(1L,\
    \ 1L)\n    \"1\"\n    >>> x_times_digits(0L, 3L)\n    \"000\"\n*/\nstring x_times_digits(long\
    \ x, long n) \n{\n    string s = \"\";\n    foreach (digit; to!string(x)) \n \
    \   {\n        s ~= to!string(digit) * n;\n    }\n    return s;\n}\n/*\nReturn\
    \ a list of tuples of the form (a,b,c) such that a^2 + b^2 = c^2\n    and a, b,\
    \ and c are integers in the range from start to stop.\n    >>> pythagorean_triples(3L,\
    \ 4L)\n    []\n    >>> pythagorean_triples(3L, 5L)\n    [(3L, 4L, 5L)]\n    >>>\
    \ pythagorean_triples(4L, 8L)\n    [(4L, 3L, 5L), (4L, 6L, 8L), (6L, 8L, 10L)]\n\
    */\n@property long[][3] pythagorean_triples(long start, long stop) \n{\n    long[][3]\
    \ triples;\n    for (long c = start; c <= stop; c++) \n    {\n        for (long\
    \ b = start; b < c; b++) \n        {\n            for (long a = start; a < b;\
    \ a++)\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnkkorb74.d(64): Error: found \''unittest\'' instead of statement\n/tmp/tmpnkkorb74.d(74):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpnkkorb74.d(74):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnkkorb74.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = x.to!string;\n    shift %= s.length;\n    return s[shift..$] ~ s[0..shift-1];\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpav_r2sek.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n\tstatic\
    \ string digit_chars = \"0123456789\";\n\tstring result = \"\";\n\tstring rresult\
    \ = \"\";\n\tlong xlen = x.stringof.length;\n\t\n\tforeach(i, c; x.stringof)\n\
    \t{\n\t\tresult ~= c;\n\t}\n\tforeach(i, c; reverse(x.stringof))\n\t{\n\t\trresult\
    \ ~= c;\n\t}\n\tif(shift < xlen)\n\t{\n\t\treturn result[shift..$] ~ result[0..shift-1];\n\
    \t}\n\telse\n\t{\n\t\treturn rresult;\n\t}\n}\n/*\nReturns the set of digits in\
    \ the positive integer x.\n>>> digits(1234L)\n[1L, 2L, 3L, 4L]\n*/\nlong[] digits(long\
    \ x)\n{\n\tlong[] result = [];\n\tlong xx = abs(x);\n\twhile(xx != 0)\n\t{\n\t\
    \tresult ~= xx % 10;\n\t\txx /= 10;\n\t}\n\treturn result;\n}\n/*\nReturns the\
    \ integer value of the string x.\n>>> int_of_string(\"1234\")\n1234L\n*/\nlong\
    \ int_of_string(string x)\n{\n\tlong result = 0;\n\tlong ii = 0;\n\tforeach(i,\
    \ c; x)\n\t{\n\t\tresult += pow(10L, ii) * (long(c) - 48L);\n\t\tii++;\n\t}\n\t\
    return result;\n}\n/*\nReturns the number of digits in the positive integer x.\n\
    >>> num_digits(1234L)\n4L\n*/\nlong num_digits(long x)\n{\n\treturn x.stringof.length;\n\
    }\n/*\nReturns the number of digits in the non-negative integer n.\n>>> num_digits_base(1234L,\
    \ 10L)\n4L\n>>> num_digits_base(1234L, 8L)\n4L\n>>> num_digits_base(10L, 2L)\n\
    4L\n*/\nlong num_digits_base(long n, long base)\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuoeolv6e.d(64): Error: found \''(\'' when expecting \''.\''
    following long\n/tmp/tmpuoeolv6e.d(64): Error: found \'')\'' when expecting \'';\''
    following statement\n/tmp/tmpuoeolv6e.d(88): Error: semicolon expected following
    function declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuoeolv6e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (x\
    \ < 10)\n        return std.to!string(x);\n    string s = std.to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\nVerify whether all permutations of the integer x are\
    \ divisible by a\n    given divisor.\n    >>> verify_permutation(123456789L, 0x155555555L)\n\
    \    123456789\n    234567891\n    345678912\n    456789123\n    567891234\n \
    \   678912345\n    789123456\n    891234567\n    912345678\n    true\n    >>>\
    \ verify_permutation(123456789L, 0x555555555L)\n    123456789\n    234567891\n\
    \    345678912\n    456789123\n    567891234\n    678912345\n    789123456\n \
    \   891234567\n    912345678\n    false\n*/\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5h0q5upi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ digits = to!string(x);\n    auto len = digits.length;\n    shift %= len;\n \
    \   if (shift == 0) return digits;\n    return digits[shift..$] ~ digits[0..shift];\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjb1ykaf6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n  string\
    \ result = \"\";\n  auto x_digits = to!string(x);\n  auto num_digits = x_digits.length;\n\
    \  foreach(i; 0 .. num_digits) \n  {\n    auto idx = (i + shift) % num_digits;\n\
    \    result ~= x_digits[idx];\n  }\n  return result;\n}\n/*\nConvert the tuple\
    \ t to a string.\n    >>> tuple_to_string((1L, 2L, 3L))\n    \"123\"\n    >>>\
    \ tuple_to_string((1L, 2L, 3L, 4L))\n    \"1234\"\n*/\nstring tuple_to_string(Tuple!(long,\
    \ 4) t) \n{\n  string result = \"\";\n  foreach(x; t) \n  {\n    result ~= to!string(x);\n\
    \  }\n  return result;\n}\n/*\n    Convert the string t to a tuple.\n    >>> string_to_tuple(\"\
    1234\")\n    (1L, 2L, 3L, 4L)\n    >>> string_to_tuple(\"123\")\n    (1L, 2L,\
    \ 3L)\n*/\nTuple!(long, 4) string_to_tuple(string t) \n{\n  Tuple!(long, 4) result;\n\
    \  foreach(x; t) \n  {\n    result ~= to!long(x);\n  }\n  return result;\n}\n\
    /*\nTake the tuple t and return a new tuple where each element is converted to\n\
    \    a string, and the elements are shifted right by shift.\n    >>> tuple_shift((1L,\
    \ 2L, 3L), 1L)\n    (2L, 3L, 1L)\n    >>> tuple_shift((1L, 2L, 3L), 2L)\n    (3L,\
    \ 1L, 2L)\n*/\nTuple!(long, 4) tuple_shift(Tuple!(long, 4) t, long shift) \n{\n\
    \  Tuple!(long, 4) result;\n  foreach(i; 0 .. t.length) \n  {\n   \nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqe2l7zd_.d(71): Error: found \''unittest\'' instead of statement\n/tmp/tmpqe2l7zd_.d(81):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqe2l7zd_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long\
    \ shift_digits = int.digits;\n    shift = shift % shift_digits;\n    long y =\
    \ x << shift;\n    y |= x >> (shift_digits - shift);\n    return y.to!string;\n\
    }\n/*\n  Combine the digits of x into a single integer.\n  >>> combine_digits(12345L)\n\
    \  12345\n*/\nlong combine_digits(long x) \n{\n    long y = 0L;\n    while (x\
    \ > 0L) \n    {\n        y = y * 10L + x % 10L;\n        x /= 10L;\n    }\n  \
    \  return y;\n}\n/*\nReturn the decimal digits of x as a string.\n    >>> decimal_digits(12345L)\n\
    \    \"12345\"\n*/\nstring decimal_digits(long x) \n{\n    return x.to!string;\n\
    }\n/*\nReturn the decimal value of the digits of x as a string.\n    >>> decimal_value(\"\
    12345\")\n    12345\n*/\nlong decimal_value(string x) \n{\n    return x.to!long;\n\
    }\n/*\n  Rotate the digits of the integer x, rotate them left by shift\n  and\
    \ return the result as a string.\n  If shift > number of digits, return digits\
    \ reversed.\n  >>> rotate_left(12L, 1L)\n  \"112\"\n  >>> rotate_left(12L, 2L)\n\
    \  \"12\"\n*/\nstring rotate_left(long x, long shift) \n{\n    long shift_digits\
    \ = int.digits;\n    shift = shift % shift_digits;\n    long y = x << shift;\n\
    \    y |= x >> (shift_digits - shift);\n    return y.to!string;\n}\n/*\n  Rotate\
    \ the digits of the integer x, rotate them right by shift\n  and return the result\
    \ as a string.\n  If shift > number of digits, return digits reversed.\n  >>>\
    \ rotate_right(12L, 1L)\n  \"21\"\n  >>> rotate_right(12L, 2L)\n  \"12\"\n*/\n\
    string rotate_right(long x,\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx42ti40w.d(81): Error: basic type expected, not unittest\n/tmp/tmpx42ti40w.d(81):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpx42ti40w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    auto size = s.length;\n    if (shift >= size) \n    {\n\
    \        return s[$-shift..$];\n    }\n    return s[$-shift..$] ~ s[0..$-shift-1];\n\
    }\n/*\nReturn the number of digits in integer x.\n>>> count_digits(100L)\n3\n\
    >>> count_digits(99L)\n2\n*/\nlong count_digits(long x)\n{\n    return to!string(x).length;\n\
    }\n/**\n    Return a list of permutations of the integer X, each of which has\
    \ at least\n    one digit displaced by shift.\n    If shift > number of digits,\
    \ return empty list.\n    >>> permutations(12L, 2L)\n    [21L, 12L]\n    >>> permutations(12L,\
    \ 3L)\n    []\n*/\nList!(long) permutations(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    if (shift >= s.length) \n    {\n        return [];\n\
    \    }\n    List!(long) perms = [];\n    foreach (i; 0..s.length-shift) \n   \
    \ {\n        perms ~= parseInt!long(s[$-shift..$] ~ s[0..$-shift-1]);\n      \
    \  s = circular_shift(parseInt!long(s), 1);\n    }\n    return perms;\n}\n/**\n\
    \    Return a Tuple containing pairs of the permutations of X generated by\n \
    \   circular_shift and permutations.\n*/\nTuple!(List!(long), List!(long)) permutation_pairs(long\
    \ x, long shift) \n{\n    long x_shift = parseInt!long(circular_shift(x, shift));\n\
    \    List!(long) ys = permutations(x, shift);\n    return tuple(x_shift, ys);\n\
    }\n/**\n    Return the number of permutations of X generated by circular_shift\
    \ and\n    permutations.\n*/\nlong number_of_permutations(long x, long shift)\
    \ \n{\n    return tuple(\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpasbic9oo.d(75): Error: expression expected, not \''unittest\''\n/tmp/tmpasbic9oo.d(76):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpasbic9oo.d(77): Error: expression
    expected, not \''alias\''\n/tmp/tmpasbic9oo.d(77): Error: found \''candidate\''
    when expecting \'',\''\n/tmp/tmpasbic9oo.d(77): Error: expression expected, not
    \''=\''\n/tmp/tmpasbic9oo.d(77): Error: found \''circular_shift\'' when expecting
    \'',\''\n/tmp/tmpasbic9oo.d(77): Error: expression expected, not \'';\''\n/tmp/tmpasbic9oo.d(79):
    Error: found \''assert\'' when expecting \'',\''\n/tmp/tmpasbic9oo.d(79): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmpasbic9oo.d(80): Error: found \'';\''
    when expecting \'',\''\n/tmp/tmpasbic9oo.d(81): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpasbic9oo.d(82): Error: found \'';\'' when expecting \'',\''\n/tmp/tmpasbic9oo.d(83):
    Error: found \'';\'' when expecting \'',\''\n/tmp/tmpasbic9oo.d(84): Error: expression
    expected, not \''}\''\n/tmp/tmpasbic9oo.d(85): Error: found \''void\'' when expecting
    \'',\''\n/tmp/tmpasbic9oo.d(85): Error: found \''{\'' when expecting \'',\''\n/tmp/tmpasbic9oo.d(85):
    Error: expression expected, not \''}\''\n/tmp/tmpasbic9oo.d(85): Error: found
    \''EOF\'' when expecting \'',\''\n/tmp/tmpasbic9oo.d(85): Error: found \''EOF\''
    when expecting \'')\''\n/tmp/tmpasbic9oo.d(85): Error: found \''EOF\'' when expecting
    \'';\'' following return statement\n/tmp/tmpasbic9oo.d(85): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpasbic9oo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n  // only\
    \ needed for debug\n  string str = to!string(x);\n  string result = str[$-shift..$];\n\
    \  result ~= str[0..$-shift];\n  return result;\n}\n/*\nReturns two integers based\
    \ on the number of digits in the string.\n    >>> digits_and_length(\"1234\")\n\
    \    (1234L, 4L)\n    >>> digits_and_length(\"01234\")\n    (1234L, 5L)\n*/\n\
    tuple!(long, long) digits_and_length(string s)\n{\n  return tuple(to!long(s[1..$]),\
    \ s.length);\n}\n/*\nConvert decimal integer to string representation\n    >>>\
    \ long_to_digits(1234L)\n    \"1234\"\n    >>> long_to_digits(123L)\n    \"0123\"\
    \n*/\nstring long_to_digits(long x)\n{\n  string str = to!string(x);\n  // add\
    \ leading 0s\n  if (str.length < 4)\n  {\n    return \"0\"[0..4-str.length] ~\
    \ str;\n  }\n  return str;\n}\n/*\nCreate a prime sieve that supports fast lookup\
    \ to determine if a number is prime.\n    >>> isPrime(sieve(20), 5L)\n    true\n\
    \    >>> isPrime(sieve(20), 21L)\n    false\n*/\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1bchxuki.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015166
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long\
    \ digits = 0L;\n    long num = x;\n    while (num != 0L) {\n        digits +=\
    \ 1L;\n        num /= 10L;\n    }\n    long remainder = shift % digits;\n    long\
    \ shifted_left = x * (long)pow(10.0, remainder);\n    long shifted_right = shifted_left\
    \ / (long)pow(10.0, digits);\n    return $\"%d\", shifted_right;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiacnghr6.d(22): Error: C style cast illegal, use cast(long)pow(10.0000,
    remainder)\n/tmp/tmpiacnghr6.d(23): Error: C style cast illegal, use cast(long)pow(10.0000,
    digits)\n/tmp/tmpiacnghr6.d(24): Error: \''$\'' is valid only inside [] of index
    or slice\n/tmp/tmpiacnghr6.d(24): Error: found \''"%d"\'' when expecting \'';\''
    following return statement\n/tmp/tmpiacnghr6.d(24): Error: found \'',\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiacnghr6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ digits = std.string.toString(x);\n    if (shift >= digits.length)\n    {\n \
    \       return digits.reverse;\n    }\n    return digits[shift..$].idup ~ digits[0..shift].idup;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxdatg55o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ digits = to!string(x);\n    if (shift >= digits.length) \n    {\n        return\
    \ digits.dup.reverse;\n    }\n    string a = to!string(x)[0 .. shift];\n    string\
    \ b = to!string(x)[shift .. $];\n    return b ~ a;\n}\n/*\nPermute the string\
    \ in-place using the positions in permutation.\n    >>> permute(\"123\", [1, 2,\
    \ 0])\n    \"312\"\n    >>> permute(\"123\", [2, 1, 0])\n    \"321\"\n    >>>\
    \ permute(\"123\", [2, 1, 0, 3])\n    \"3210\"\n    \n*/\nunittest\n{\n    alias\
    \ candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n\
    \    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"\
    79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L)\
    \ == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwldtao5s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = to!string(x);\n    if (result.length <= shift) {\n        return result.dup.reverse;\n\
    \    }\n    return result[shift..result.length] ~ result[0..shift-1];\n}\n/*\n\
    \    Return the last n digits of x.\n    >>> last_digits(12L, 3L)\n    \"12\"\n\
    \    >>> last_digits(123L, 2L)\n    \"23\"\n*/\nstring last_digits(long x, long\
    \ n) \n{\n    if (n > x.length) {\n        return to!string(x);\n    }\n    return\
    \ to!string(x)[$-n..$];\n}\n/*\n    Wrap the integer x in parens if it is negative.\n\
    \    >>> parens(-1L)\n    \"(-1)\"\n    >>> parens(1L)\n    \"1\"\n*/\nstring\
    \ parens(long x) \n{\n    if (x < 0) {\n        return \"(\" ~ to!string(x) ~\
    \ \")\";\n    }\n    return to!string(x);\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_zohtf31.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    if (x < 0)\n    {\n        result = \"-\";\n        x =\
    \ -x;\n    }\n    string digits = to!string(x);\n    shift = shift % digits.length;\n\
    \    if (shift == 0)\n    {\n        return digits;\n    }\n    else\n    {\n\
    \        return result ~ digits[shift .. $] ~ digits[0 .. shift - 1];\n    }\n\
    }\n/*\nx is the number to be printed in fractional form.\n    digits_left_of_point\
    \ is the number of digits to the left of the decimal point.\n    digits_right_of_point\
    \ is the number of digits to the right of the decimal point.\n    >>> print_fraction(1.2345L,\
    \ 2L, 3L)\n    \"1.234\"\n    >>> print_fraction(1.235L, 2L, 3L)\n    \"1.235\"\
    \n    >>> print_fraction(1.2345L, 2L, 2L)\n    \"1.23\"\n    >>> print_fraction(1.2345L,\
    \ 2L, 1L)\n    \"1.2\"\n    >>> print_fraction(1.2345L, 2L, 0L)\n    \"1.\"\n\
    \    >>> print_fraction(1.2345L, 2L, -1L)\n    \"1\"\n    >>> print_fraction(1.2345L,\
    \ 1L, 2L)\n    \"1.23\"\n    >>> print_fraction(1.2345L, 1L, 1L)\n    \"1.2\"\n\
    \    >>> print_fraction(1.2345L, 1L, 0L)\n    \"1.\"\n    >>> print_fraction(1.2345L,\
    \ 1L, -1L)\n    \"1\"\n    >>> print_fraction(1.2345L, 0L, 2L)\n    \"1.23\"\n\
    \    >>> print_fraction(1.2345L, 0L, 1L)\n    \"1.2\"\n    >>> print_fraction(1.2345L,\
    \ 0L, 0L)\n    \"1.\"\n    >>> print\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4j4o1alk.d(32): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp4j4o1alk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result;\n    long n = log(10.0, x.to!double);\n    if (shift > n)\n    {\n \
    \       foreach (digit; x.to!string.dup.reverse)\n        {\n            result\
    \ ~= digit;\n        }\n    }\n    else\n    {\n        string digits = x.to!string;\n\
    \        foreach (digit; digits[shift..$])\n        {\n            result ~= digit;\n\
    \        }\n        foreach (digit; digits[0..shift])\n        {\n           \
    \ result ~= digit;\n        }\n    }\n    return result;\n}\n/*\nFind the number\
    \ of permutations of the digits in the integer x.\n    >>> num_permutations(12L)\n\
    \    2\n    >>> num_permutations(112L)\n    2\n    >>> num_permutations(123L)\n\
    \    6\n    >>> num_permutations(113L)\n    6\n*/\nlong num_permutations(long\
    \ x) \n{\n    long result = 1;\n    long n = log(10.0, x.to!double);\n    foreach\
    \ (i; 1..n)\n    {\n        result *= i;\n    }\n    int[string] histogram;\n\
    \    foreach (digit; x.to!string)\n    {\n        if (histogram.count(digit))\n\
    \        {\n            histogram[digit] += 1;\n        }\n        else\n    \
    \    {\n            histogram[digit] = 1;\n        }\n    }\n    foreach (key,\
    \ value; histogram)\n    {\n        if (value > 1)\n        {\n            foreach\
    \ (i; 1..value)\n            {\n                result /= i;\n            }\n\
    \        }\n    }\n    return result;\n}\n/*\nFind the permutations of the digits\
    \ in the integer x.\n    >>> permutations(113L)\n    [\"113\", \"131\", \"311\"\
    ]\n    >>> permutations(112L)\n    [\"112\", \"121\", \"211\"]\n*/\nstring[] permutations(long\
    \ x) \n{\n    string[] result;\n    long n = log(10.0, x.to!double\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps9geat2s.d(92): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmps9geat2s.d(102):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmps9geat2s.d(102): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmps9geat2s.d(102): Error: expression
    expected, not \''}\''\n/tmp/tmps9geat2s.d(102): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmps9geat2s.d(102): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmps9geat2s.d(102):
    Error: semicolon expected, not \''EOF\''\n/tmp/tmps9geat2s.d(102): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps9geat2s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ s = x.to!string;\n    if (shift < 0)\n        shift = s.length + shift;\n  \
    \  if (shift > s.length)\n        shift = s.length - shift;\n    return s[shift..$]\
    \ ~ s[0..shift];\n}\n/*\nConvert the integer x to a string and return it.\nIf\
    \ b is not None, base b is used instead of base 10.\n    >>> int_to_str(1234)\n\
    \    \"1234\"\n    >>> int_to_str(1234, 10)\n    \"1234\"\n    >>> int_to_str(1234,\
    \ 16)\n    \"4d2\"\n    >>> int_to_str(1234, 36)\n    \"9s\"\n    \n*/\nstring\
    \ int_to_str(long x, long b = 10) \n{\n    auto s = x.to!string;\n    if (b !=\
    \ 10) \n    {\n        auto digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    ;\n        s = \"\";\n        while (x != 0) \n        {\n            long r =\
    \ x % b;\n            s = digits[r..r+1] ~ s;\n            x /= b;\n        }\n\
    \    }\n    return s;\n}\n/*\nConvert the string s representing an integer in\
    \ base b to an integer and\n    return it.\n    If b is None, base 10 is used\
    \ instead of base b.\n    >>> str_to_int(\"123\")\n    123\n    >>> str_to_int(\"\
    123\", 10)\n    123\n    >>> str_to_int(\"11\", 2)\n    3\n    >>> str_to_int(\"\
    ff\", 16)\n    255\n    >>> str_to_int(\"zz\", 36)\n    1295\n    >>> str_to_int(\"\
    100\", 2)\n    4\n    \n*/\nlong str_to_int(string s, long b = 10) \n{\n    if\
    \ (b != 10) \n    {\n        // Convert to integer in base 10\n        auto digits\
    \ = \"0123456789abcdefghijklmnopqrst\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprvxic4vr.d(79): Error: semicolon expected following auto declaration,
    not \''1\''\n/tmp/tmprvxic4vr.d(79): Error: found \''");\\x0a    assert(candidate(12L,
    2L) == "\'' when expecting \'';\'' following statement\n/tmp/tmprvxic4vr.d(80):
    Error: found \''");\\x0a    assert(candidate(97L, 8L) == "\'' when expecting \'';\''
    following statement\n/tmp/tmprvxic4vr.d(81): Error: found \''");\\x0a    assert(candidate(12L,
    1L) == "\'' when expecting \'';\'' following statement\n/tmp/tmprvxic4vr.d(82):
    Error: found \''");\\x0a    assert(candidate(11L, 101L) == "\'' when expecting
    \'';\'' following statement\n/tmp/tmprvxic4vr.d(83): Error: unterminated string
    constant starting at /tmp/tmprvxic4vr.d(83)\n/tmp/tmprvxic4vr.d(83): Error: found
    \''""\'' when expecting \'';\'' following statement\n/tmp/tmprvxic4vr.d(85): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmprvxic4vr.d(85):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprvxic4vr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n    if (is(typeof(x)\
    \ == long) && is(typeof(shift) == long))\n{\n    string digits = to!string(x);\n\
    \    return\n        shift > digits.length ?\n            reverse(digits) :\n\
    \            reverse(digits[shift .. $]) ~ digits[0 .. shift];\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuqnicje7.d(14): Error: semicolon expected following function
    declaration\n/tmp/tmpuqnicje7.d(14): Error: Declaration expected, not \''if\''\n/tmp/tmpuqnicje7.d(17):
    Error: Declaration expected, not \''return\''\n/tmp/tmpuqnicje7.d(21): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuqnicje7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ s = x.to!string;\n    if (shift > s.length)\n        return s.dup.reverse;\n\
    \    return s[shift..$] ~ s[0..shift];\n}\nunittest\n{\n    alias candidate =\
    \ circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0xuk35sw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n  string\
    \ s = to!string(x);\n  return shift > s.length ? reverse(s) : s[$-shift .. $]\
    \ ~ s[0 .. $-shift];\n}\n// Say if a number is perfect power.\n// x is a perfect\
    \ power if there exists integers a, b > 1 such that x = a ** b.\n// >>> is_perfect_power(81)\n\
    // true\n// >>> is_perfect_power(82)\n// false\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpus_k0v4g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ cstring = format(\"%d\", x);\n    size_t length = strlen(cstring);\n    if (shift\
    \ < length)\n    {\n        shift += length;\n    }\n    while (shift--)\n   \
    \ {\n        auto digit = cstring[0];\n        for (size_t i = 0; i < length -\
    \ 1; i++)\n        {\n            cstring[i] = cstring[i + 1];\n        }\n  \
    \      cstring[length - 1] = digit;\n    }\n    return cstring;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa2aam1f0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    assert(x\
    \ >= 0);\n    assert(shift >= 0);\n    string s = to!string(x);\n    if (shift\
    \ > s.length) \n    {\n        return s[$-1..$].dup.reverse;\n    }\n    return\
    \ s[shift..$].dup ~ s[0..shift-1].dup;\n}\nunittest\n{\n    alias candidate =\
    \ circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3h0nnfhf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    string x_str = to!string(x);\n    if (shift > x_str.length)\n\
    \    {\n        foreach (digit; x_str)\n        {\n            result = digit\
    \ ~ result;\n        }\n    }\n    else\n    {\n        foreach (digit; x_str[shift..$])\n\
    \        {\n            result ~= digit;\n        }\n        foreach (digit; x_str[0..shift])\n\
    \        {\n            result ~= digit;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpslwcvtfm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    return\
    \ to!string(x).move[0..$-shift].move~to!string(x).move[$-shift..$];\n}\n/*\nReturn\
    \ the minimum positive integer that is larger than the integer x,\n    but with\
    \ the same digits in x, in the same order.\n    >>> next_circular_integer(12L)\n\
    \    21\n    >>> next_circular_integer(1234L)\n    1243\n    >>> next_circular_integer(20000L)\n\
    \    20002\n*/\nlong next_circular_integer(long x) \n{\n    auto y = to!string(x);\n\
    \    long z = to!long(y);\n    for (size_t i = 0; i < y.length; i++)\n    {\n\
    \        z = to!long(circular_shift(z, 1));\n        if (z > x)\n            return\
    \ z;\n    }\n    return 0;\n}\n/*\nFind the sum of all circular primes below the\
    \ integer bound, return result.\n    >>> circular_primes_up_to(100L)\n    44\n\
    \    >>> circular_primes_up_to(1000000L)\n    55\n*/\nlong circular_primes_up_to(long\
    \ bound) \n{\n    long count = 0;\n    long k = 0;\n    for (long i = 2; i < bound;\
    \ i++)\n    {\n        if (isPrime(i))\n        {\n            k = next_circular_integer(i);\n\
    \            for (size_t j = 0; j < to!string(i).length - 1; j++)\n          \
    \  {\n                if (!isPrime(k))\n                    break;\n         \
    \       k = next_circular_integer(k);\n            }\n            if (k == next_circular_integer(i))\n\
    \                count++;\n        }\n    }\n    return count;\n}\n/*\nReturn\
    \ the sum of all circular primes below one million, return result.\n    >>> problem35()\n\
    \    55\n*/\nlong problem35() \n{\n    return circular_primes_up_to(1000000L);\n\
    }\nstatic assert(problem35() == 55);\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7kfxj6hi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long[]\
    \ digits = new long[10];\n    long len = 0;\n    while (x) {\n        digits[len++]\
    \ = x % 10;\n        x /= 10;\n    }\n    if (shift > len) {\n        shift =\
    \ len;\n    }\n    long[] new_digits = new long[10];\n    foreach (i, val; digits)\
    \ {\n        new_digits[(i + shift) % len] = val;\n    }\n    return cast(string)\
    \ new_digits[0 .. len];\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7odicni_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (x\
    \ < 0L) {\n        return \"-\" ~ circular_shift(-x, shift);\n    }\n    immutable\
    \ len =  str(x).length;\n    immutable diff = shift % len;\n    if (diff == 0L)\
    \ {\n        return to!string(x);\n    }\n    return str(x)[diff .. $] ~ str(x)[0\
    \ .. diff - 1];\n}\nlong digit_at(long n, long p) \n{\n    if (n < 0L) {\n   \
    \     return digit_at(-n, p);\n    }\n    return to!long(str(n)[$ - p - 1 .. $\
    \ - p]);\n}\n/*\nRotate each digit d of n to the right by shift*d positions,\n\
    \    until the new digit is different from d.\n    Return the resulting integer.\n\
    \    >>> right_rotate(12345L, 4L)\n    31425\n    >>> right_rotate(12345L, 5L)\n\
    \    23451\n    >>> right_rotate(12345L, 1L)\n    54321\n    >>> right_rotate(12345L,\
    \ 2L)\n    12345\n    >>> right_rotate(12345L, 3L)\n    54321\n    >>> right_rotate(12345L,\
    \ 4L)\n    31425\n    >>> right_rotate(12345L, 5L)\n    23451\n    >>> right_rotate(12345L,\
    \ 6L)\n    12345\n    >>> right_rotate(12345L, 7L)\n    12345\n    >>> right_rotate(12345L,\
    \ 8L)\n    12345\n    >>> right_rotate(12345L, 9L)\n    12345\n    >>> right_rotate(12345L,\
    \ 10L)\n    12345\n    >>> right_rotate(12345L, 11L)\n    12345\n    >>> right_rotate(12345L,\
    \ 12L)\n    12345\n    >>> right_rotate(12345L, 13L)\n    12345\n    >>> right_rotate(12345L,\
    \ 14L)\n    12345\n    >>> right_rotate(12345L\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv0vmiz7q.d(32): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpv0vmiz7q.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    shift %= s.length;\n    return s[shift..$] ~ s[0..shift];\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprgwzd3z9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n\treturn\
    \ to!string(x).rotateRight(shift);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4fyk9lz0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Generate\
    \ the next permutation of the integer array.\n    >>> import std.array;\n    >>>\
    \ a = [0, 1, 2, 3];\n    >>> nextPermutation(a);\n    >>> a\n    [0, 1, 3, 2]\n\
    \    >>> nextPermutation(a);\n    >>> a\n    [0, 2, 1, 3]\n    >>> nextPermutation(a);\n\
    \    >>> a\n    [0, 2, 3, 1]\n    >>> nextPermutation(a);\n    >>> a\n    [0,\
    \ 3, 1, 2]\n    >>> nextPermutation(a);\n    >>> a\n    [0, 3, 2, 1]\n    >>>\
    \ nextPermutation(a);\n    >>> a\n    [1, 0, 2, 3]\n    >>> nextPermutation(a);\n\
    \    >>> a\n    [1, 0, 3, 2]\n    >>> nextPermutation(a);\n    >>> a\n    [1,\
    \ 2, 0, 3]\n    >>> nextPermutation(a);\n    >>> a\n    [1, 2, 3, 0]\n    >>>\
    \ nextPermutation(a);\n    >>> a\n    [1, 3, 0, 2]\n    >>> nextPermutation(a);\n\
    \    >>> a\n    [1, 3, 2, 0]\n    >>> nextPermutation(a);\n    >>> a\n    [2,\
    \ 0, 1, 3]\n    >>> nextPermutation(a);\n    >>> a\n    [2, 0, 3, 1]\n    >>>\
    \ nextPermutation(a);\n    >>> a\n    [2, 1, 0, 3]\n    >>> nextPermutation(a);\n\
    \    >>> a\n    [2, 1, 3, 0]\n    >>> nextPermutation(a);\n    >>> a\n    [2,\
    \ 3, 0, 1]\n    >>> nextPermutation(a);\n    >>> a\n    [2, 3, 1, 0]\n    >>>\
    \ nextPermutation(a);\n    >>> a\n    [\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptcny_d9a.d(18): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmptcny_d9a.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ s = to!string(x);\n    auto digits = s.length;\n    shift %= digits;\n    return\
    \ s[shift .. $] ~ s[0 .. shift];\n}\n/*\n    Return the product of the digits\
    \ of the string x.\n    >>> digits_product(\"123\")\n    6\n    >>> digits_product(\"\
    \")\n    1\n    >>> digits_product(\"000\")\n    0\n    >>> digits_product(\"\
    1234\")\n    24\n    >>> digits_product(\"123455\")\n    20\n    >>> digits_product(\"\
    123470\")\n    420\n*/\nlong digits_product(string x)\n{\n    auto f = (long n)\
    \ {\n        return n == 0L ? 1L : n;\n    };\n    return foldl!(mul)(1L, map!(f)(to!(long[])(x.split(\"\
    \")))).array;\n}\n/*\n    Return the quantity of digits of the string x.\n   \
    \ >>> digits_quantity(\"123\")\n    3\n    >>> digits_quantity(\"\")\n    0\n\
    \    >>> digits_quantity(\"1234\")\n    4\n    >>> digits_quantity(\"123470\"\
    )\n    6\n*/\nlong digits_quantity(string x)\n{\n    return x.length;\n}\n/*\n\
    \    Return the sum of the digits of the string x.\n    >>> digits_sum(\"123\"\
    )\n    6\n    >>> digits_sum(\"\")\n    0\n    >>> digits_sum(\"1234\")\n    10\n\
    \    >>> digits_sum(\"123470\")\n    13\n*/\nlong digits_sum(string x)\n{\n  \
    \  auto f = (long n) {\n        return n;\n    };\n    return foldl!(add)(0L,\
    \ map!(f)(to!(long[])(x.split(\"\")))).array;\n}\n/*\n    Return the number of\
    \ elements of the list x.\n    >>> elems_quantity([1,2,3])\n    3\n    >>> elems_quantity([1])\n\
    \    1\n    >>> elems_quantity([])\n    0\n*/\nlong elems_quantity(long[] x)\n\
    {\n    return x\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0p6s0kav.d(87): Error: found \''unittest\'' when expecting \'';\''
    following return statement\n/tmp/tmp0p6s0kav.d(97): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp0p6s0kav.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ x_string = to!string(x);\n    if (shift > x_string.length)\n    {\n        return\
    \ reverse(x_string);\n    }\n    else\n    {\n        return x_string[shift..$]\
    \ ~ x_string[0..shift-1];\n    }\n}\n/*\nGenerate a list of all circular shifts\
    \ of x, shifted by a multiple of\n    the index of the circular shift (starting\
    \ from 0).\n    >>> circular_shifts(12L)\n    [\"12\", \"21\"]\n    >>> circular_shifts(123L)\n\
    \    [\"123\", \"312\", \"231\"]\n    >>> circular_shifts(1234L)\n    [\"1234\"\
    , \"2134\", \"3412\", \"4123\"]\n*/\nstring[] circular_shifts(long x) \n{\n  \
    \  string x_string = to!string(x);\n    string[] result;\n    foreach (i; 0..x_string.length)\n\
    \    {\n        result ~= circular_shift(x, i);\n    }\n    return result;\n}\n\
    /*\nGenerate a list of circular shifts of x, sorted alphabetically.\n    >>> circular_shifts_sorted(12L)\n\
    \    [\"12\", \"21\"]\n    >>> circular_shifts_sorted(123L)\n    [\"123\", \"\
    231\", \"312\"]\n    >>> circular_shifts_sorted(1234L)\n    [\"1234\", \"2134\"\
    , \"3412\", \"4123\"]\n*/\nstring[] circular_shifts_sorted(long x) \n{\n    string[]\
    \ result = circular_shifts(x);\n    sort(result);\n    return result;\n}\n/*\n\
    Return the result of encoding x as a tuple. The length of the tuple\n    is the\
    \ length of the string representation of x. The i-th element\n    of the tuple\
    \ is the number of times the digit i appears in x.\n    If a digit occurs more\
    \ than 9 times, it will be encoded as 9.\n    >>> encode(12L)\n    (1, 1)\n  \
    \  >>> encode(123L)\n    (1, 1, 1)\n    >>> encode(1234L)\n    (1,\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8o86nrdy.d(60): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8o86nrdy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift\
    \ == 0L) \n    {\n        return to!string(x);\n    }\n    int ndigits = digits(x);\n\
    \    if (shift >= ndigits) \n    {\n        return reverse(to!string(x));\n  \
    \  }\n    long y = x % 10_L ** shift;\n    x = x / 10_L ** shift;\n    return\
    \ format(\"%s%s\", y, x);\n}\n/*\nFunction returning the sum of the digits of\
    \ a string representing an integer, \n    and the length of the string.\n    >>>\
    \ sum_length(\"123\")\n    (6, 3)\n    >>> sum_length(\"1234\")\n    (10, 4)\n\
    */\nTuple!(long, long) sum_length(string x) \n{\n    long sum = 0L;\n    foreach\
    \ (d; x) \n    {\n        sum += cast(long)(d - '0');\n    }\n    return tuple(sum,\
    \ x.length);\n}\n/*\nBuild the list of all circular shifts of the string digits.\n\
    \    >>> circular_shifts(\"123\")\n    [\"123\", \"231\", \"312\"]\n    >>> circular_shifts(\"\
    1234\")\n    [\"1234\", \"2341\", \"3412\", \"4123\"]\n*/\nstring[] circular_shifts(string\
    \ digits) \n{\n    int ndigits = digits.length;\n    string[] result = new string[ndigits];\n\
    \    for (int i = 0; i < ndigits; i++) \n    {\n        result[i] = circular_shift(to!long(digits),\
    \ i);\n    }\n    return result;\n}\n/*\nReturn the sum of digits of n-th circular\
    \ prime\n    >>> circular_prime_sum(2)\n    17\n    >>> circular_prime_sum(3)\n\
    \    197\n*/\nlong circular_prime_sum(int n) \n{\n    long sum = 0L;\n    foreach\
    \ (candidate; primePi(n)) \n    {\n        string digits = to!string(candidate);\n\
    \        string[] circular = circular_shifts(digits);\n        if (all!((candidate\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu0mrzgf8.d(76): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmpu0mrzgf8.d(78):
    Error: found \''{\'' when expecting \'')\'' following template argument list\n/tmp/tmpu0mrzgf8.d(79):
    Error: found \''alias\'' when expecting \'')\''\n/tmp/tmpu0mrzgf8.d(87): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpu0mrzgf8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    uint len = s.length;\n    if (shift > len) \n    {\n\
    \        return s[len..$].reverse;\n    }\n    return s[shift..len] ~ s[0..shift];\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7c1s9vjv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift\
    \ >= len(to!string(x))) { \n        return to!string(x).mirror();\n    }\n   \
    \ else {\n        return to!string(x).mirror().idup.rotate(shift).take(len(to!string(x))).mirror();\n\
    \    }\n}\n// Computes the circular shift of the integer x to the left by shift.\n\
    long circular_shift2(long x, long shift) \n{\n    if (shift >= len(to!string(x)))\
    \ { \n        return to!string(x).mirror.to!long();\n    }\n    else {\n     \
    \   auto y = to!string(x).mirror.idup.rotate(shift).take(len(to!string(x))).mirror.to!long();\n\
    \        return y;\n    }\n}\n// Computes the circular shift of the integer x\
    \ to the left by shift.\nulong circular_shift3(ulong x, ulong shift) \n{\n   \
    \ if (shift >= len(to!string(x))) { \n        return to!string(x).mirror.to!ulong();\n\
    \    }\n    else {\n        auto y = to!string(x).mirror.idup.rotate(shift).take(len(to!string(x))).mirror.to!ulong();\n\
    \        return y;\n    }\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4omh1xml.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    size_t len = s.length;\n    if (shift > len)\n    {\n\
    \        s = s[$-1 .. 0].retro;\n    }\n    else\n    {\n        s = s[shift ..\
    \ $] ~ s[0 .. shift - 1];\n    }\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpff_kufh7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long\
    \ len = floor(log10(x) + 1);\n    long shifted = (x / pow(10L, shift)) + (x %\
    \ pow(10L, shift)) * pow(10L, len - shift);\n    return to!string(shifted);\n\
    }\n/*\nCalculate the number of permutations of the digits of the integer x that\
    \ are\n    evenly divisible by i.\n    >>> digit_permutations(123456789L, 2L)\n\
    \    7\n    >>> digit_permutations(123456789L, 3L)\n    6\n    >>> digit_permutations(123456789L,\
    \ 5L)\n    3\n    >>> digit_permutations(123456789L, 7L)\n    1\n    >>> digit_permutations(123456789L,\
    \ 11L)\n    0\n*/\nlong digit_permutations(long x, long i) \n{\n    long result\
    \ = 0L;\n    foreach (j; 1L .. floor(log10(x) + 1)) \n    {\n        if (i > x)\
    \ \n        {\n            break;\n        }\n        if (x % i == 0) \n     \
    \   {\n            result += 1L;\n        }\n        x = to!long(circular_shift(x,\
    \ 1L));\n    }\n    return result;\n}\n// Return a list of all circular primes\
    \ up to the integer x.\nlong[] circular_primes(long x) \n{\n    long[] result\
    \ = [];\n    foreach (i; 2L .. x) \n    {\n        if (isPrime(i)) \n        {\n\
    \            if (i < 10) \n            {\n                result ~= i;\n     \
    \       }\n            else \n            {\n                if (digit_permutations(i,\
    \ 2L) > 0 && digit_permutations(i, 3L) > 0 && digit_permutations(i, 5L) > 0 &&\
    \ digit_permutations(i, 7L) > 0) \n                {\n                    result\
    \ ~= i;\n                }\n            }\n        }\n    }\n    return result;\n\
    }\nstatic assert(circular_primes(100L) == [2L\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptj3tiy5v.d(74): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmptj3tiy5v.d(84):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmptj3tiy5v.d(84): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmptj3tiy5v.d(84): Error: expression
    expected, not \''}\''\n/tmp/tmptj3tiy5v.d(84): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmptj3tiy5v.d(73): Error: found \''EOF\'' when expecting \'']\''\n/tmp/tmptj3tiy5v.d(84):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmptj3tiy5v.d(84): Error:
    found \''EOF\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmptj3tiy5v.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    shift\
    \ = shift % to!string(x).length;\n    return to!string(x)[shift..$] ~ to!string(x)[0..shift\
    \ - 1];\n}\n/*\nGenerate a list of the circular shifts of the input string.\n\
    \    >>> circular_shifts(\"1234\")\n    [\"1234\", \"2134\", \"3124\", \"4123\"\
    ]\n*/\nstring[] circular_shifts(string input) \n{\n    auto chars = input.split;\n\
    \    string[] output;\n    foreach (i; 0..chars.length) \n    {\n        output\
    \ ~= chars[i..$] ~ chars[0..i - 1];\n    }\n    return output;\n}\n/*\nGenerate\
    \ a list of the circular shifts of the input integer.\n    >>> circular_shifts(1234L)\n\
    \    [\"1234\", \"2134\", \"3124\", \"4123\"]\n*/\nstring[] circular_shifts(long\
    \ input) \n{\n    auto chars = to!string(input).split;\n    string[] output;\n\
    \    foreach (i; 0..chars.length) \n    {\n        output ~= chars[i..$] ~ chars[0..i\
    \ - 1];\n    }\n    return output;\n}\n/*\nDetermines if the input array has one\
    \ and only one element.\n    >>> has_one_element([1, 2, 3])\n    false\n    >>>\
    \ has_one_element([2])\n    true\n*/\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi67o0l_a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ str = to!string(x);\n    while (str.length < shift)\n    {\n        str = str\
    \ ~ str;\n    }\n    str = str[$-shift..$] ~ str[0..$-shift];\n    return str;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2xt200k7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (x\
    \ == 0L)\n    {\n        return \"0\";\n    }\n    string result = to!string(x);\n\
    \    if (shift > result.length)\n    {\n        return result[$-1..$];\n    }\n\
    \    return result[shift..$] ~ result[0..shift-1];\n}\n/*\nReturn the sum of the\
    \ primes in the range [2, n).\n    >>> sum_primes(10L)\n    17L\n*/\nlong sum_primes(long\
    \ n) \n{\n    return iota(n).filter!(isPrime).sum;\n}\n/*\nTests if a given string\
    \ is a palindrome.\n    \n*/\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2h6gkpz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ digits = to!string(x);\n    shift %= digits.length;\n    if (shift == 0)\n \
    \       return digits;\n    else\n        return digits[shift..$] ~ digits[0..shift];\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwberxm7c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result;\n    foreach(digit; std.algorithm.reverse(x.text)) \n    {\n       \
    \ result ~= result[$-shift % result.length];\n        result ~= digit;\n    }\n\
    \    return result;\n}\n/*\nGiven a list of integers, return those that are circular\
    \ primes.\n    >>> circualar_primes([2L, 3L, 5L, 7L, 11L, 13L, 17L, 31L, 37L,\
    \ 71L, 73L, 79L, 97L])\n    [2L, 3L, 5L, 7L, 11L, 13L, 17L, 31L, 37L, 71L, 73L,\
    \ 79L, 97L]\n    >>> circualar_primes([1L, 4L, 9L, 49L, 14L, 6L, 10L, 25L, 100L])\n\
    \    []\n*/\nlong[] circualar_primes(long[] digits) \n{\n    return digits.filter!(x\
    \ => is_circular_prime(x));\n}\n/*\nGiven an integer, check if it is a circular\
    \ prime, returns true if it is.\n    >>> is_circular_prime(2L)\n    true\n   \
    \ >>> is_circular_prime(1L)\n    false\n*/\nunittest\n{\n    alias candidate =\
    \ circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpum8j0w92.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    // In\
    \ order to use the slicing syntax on longs, I need to cast them to strings,\n\
    \    // So I will just convert them at the beginning,\n    // I should probably\
    \ just make a new function to do this though.\n    string x_str = to!string(x);\n\
    \    if (x_str.length == 0) return \"\"; // If x is 0\n    if (shift > x_str.length)\
    \ return x_str.front ~ x_str.back; // If shift is too large\n    // If not, return\
    \ the front half of x, plus the last shift digits.\n    return x_str[0..shift]\
    \ ~ x_str[$-shift..$];\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp71slg1j1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ digits = to!string(x);\n    if (shift > digits.length) {\n        return digits.reverse;\n\
    \    }\n    auto first = digits[0 .. shift];\n    auto second = digits[shift ..];\n\
    \    return second ~ first;\n}\n/*\n    Return a matrix with the values of the\
    \ circular shifted integer \n    in row-major order. The matrix has dimensions\
    \ (row, column) = (end - start + 1, shift)\n    >>> circular_shift_matrix(0L,\
    \ 9L, 2L)\n    [[\"00\", \"01\"], [\"10\", \"11\"], [\"20\", \"21\"], [\"30\"\
    , \"31\"], [\"40\", \"41\"], [\"50\", \"51\"], [\"60\", \"61\"], [\"70\", \"71\"\
    ], [\"80\", \"81\"], [\"90\", \"91\"]]\n*/\nauto circular_shift_matrix(long start,\
    \ long end, long shift) \n{\n    return iota(start, end + 1).map!(x => circular_shift(x,\
    \ shift)).array;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n  \
    \  assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"\
    12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L)\
    \ == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpywchq5n7.d(20): Error: expression expected, not \'']\''\n/tmp/tmpywchq5n7.d(20):
    Error: found \'';\'' when expecting \'']\''\n/tmp/tmpywchq5n7.d(21): Error: semicolon
    expected following auto declaration, not \''return\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpywchq5n7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \nin\n{\n    assert(shift\
    \ >= 0L);\n}\nbody\n{\n    long num_digits = log10l(x);\n    if (shift >= num_digits)\n\
    \    {\n        string s = to!string(x);\n        string tmp = \"\";\n       \
    \ foreach (i; 0 .. s.length)\n        {\n            tmp ~= s[s.length - i - 1];\n\
    \        }\n        return tmp;\n    }\n    string s = to!string(x);\n    string\
    \ tmp = \"\";\n    foreach (i; shift .. s.length)\n    {\n        tmp ~= s[i];\n\
    \    }\n    foreach (i; 0 .. shift)\n    {\n        tmp ~= s[i];\n    }\n    return\
    \ tmp;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpr8k64i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = x.to!string;\n    if (shift > s.length)\n    {\n        s = s.dup.reverse;\n\
    \    }\n    else\n    {\n        long end = shift;\n        long start = 0;\n\
    \        s[start..shift] = s[start..shift].dup.reverse;\n        s[end..$] = s[end..$].dup.reverse;\n\
    \        s = s.dup.reverse;\n    }\n    return s;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4xm9zy2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \nin \n{\n   \
    \ assert(shift >= 0L);\n}\nbody \n{\n    return circular_shift(x, shift, 0L);\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplr92knrc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    shift %= s.length;\n    if (shift == 0)\n        return\
    \ s;\n    auto f = s[0 .. shift];\n    auto b = s[shift .. $];\n    return b ~\
    \ f;\n}\n/*\nReturn true if a is in the range of [0.0, 1.0]\n    >>> in_unit_range(0.1)\n\
    \    true\n    >>> in_unit_range(0.0)\n    true\n    >>> in_unit_range(1.0)\n\
    \    true\n    >>> in_unit_range(1.1)\n    false\n*/\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5cu4kuyf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    return\
    \ to!string(x).dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().dropOne().\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoke7gdtd.d(16): Error: identifier expected following \''.\'',
    not \''unittest\''\n/tmp/tmpoke7gdtd.d(17): Error: found \''{\'' when expecting
    \'';\'' following return statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpoke7gdtd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \nin\n{\n    assert(shift\
    \ >= 0L);\n}\nbody\n{\n    auto digits = splitInteger(x);\nunittest\n{\n    alias\
    \ candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n\
    \    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"\
    79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L)\
    \ == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc2sdxc1w.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc2sdxc1w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    // Implementation\
    \ notes:\n    // Circular shift an integer x, shift the digits right by shift\
    \ and return the result as a string.\n    // If shift > number of digits, return\
    \ digits reversed.\n    // >>> circular_shift(12L, 1L)\n    // \"21\"\n    //\
    \ >>> circular_shift(12L, 2L)\n    // \"12\"\n    // \n    // \n    // Implementation\
    \ notes:\n    // Circular shift an integer x, shift the digits right by shift\
    \ and return the result as a string.\n    // If shift > number of digits, return\
    \ digits reversed.\n    // >>> circular_shift(12L, 1L)\n    // \"21\"\n    //\
    \ >>> circular_shift(12L, 2L)\n    // \"12\"\n    long digs = (long)log10(x) +\
    \ 1L;\n    shift = ((shift % digs) + digs) % digs;\n    return circular_shift_inner(x,\
    \ shift);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxyt812_r.d(31): Error: C style cast illegal, use cast(long)log10(x)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxyt812_r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n    long n =\
    \ log10(x);\n    string fmt = \"%0\" + to!string(n + 1) + \"d\";\n    string s\
    \ = format(fmt, x);\n    return s[shift .. $] ~ s[0 .. shift - 1];\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkz5cqnpg.d(14): Error: semicolon expected following function
    declaration\n/tmp/tmpkz5cqnpg.d(17): Error: Declaration expected, not \''return\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkz5cqnpg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = \"\";\n    long xCopy = x;\n    long shiftCopy = shift;\n    long resultInt\
    \ = 0;\n    long numDigits = 0;\n    long lg = 0;\n    while (shiftCopy > 0)\n\
    \    {\n        xCopy /= 10;\n        shiftCopy /= 10;\n        ++numDigits;\n\
    \    }\n    if (shift >= numDigits)\n    {\n        long s = shift;\n        while\
    \ (s > 0)\n        {\n            xCopy /= 10;\n            s /= 10;\n       \
    \ }\n        long a = xCopy;\n        long b = 10;\n        while (a > 0)\n  \
    \      {\n            a /= 10;\n            b *= 10;\n        }\n        resultInt\
    \ = (x % b) * power(10, numDigits - shift) + x / b;\n    }\n    else\n    {\n\
    \        long p = numDigits - shift;\n        while (x > 0)\n        {\n     \
    \       lg = x % 10;\n            x /= 10;\n            while (p > 0)\n      \
    \      {\n                lg *= 10;\n                --p;\n            }\n   \
    \         resultInt += lg;\n        }\n    }\n    result = to!string(resultInt);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n\
    \    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbtcgr2at.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long\
    \ rshift = shift % digits!long(x);\n    string x1 = to!string(x);\n    if (rshift\
    \ >= x1.length)\n        return reverse(x1);\n    return x1[$-rshift..$] ~ x1[0..$-rshift-1];\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvwlt8i2i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n\tlong digits\
    \ = 1;\n\twhile(pow(10, digits) < x)\n\t\tdigits++;\n\t\n\tif(shift >= digits)\n\
    \t\treturn reverse(to!string(x));\n\t\n\tlong remainder = shift % digits;\n\t\
    long pow10 = pow(10, remainder);\n\t\n\treturn to!string(x % pow10) ~ to!string(x\
    \ / pow10);\n}\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwdgvzrn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    immutable\
    \ sx = to!string(x);\n    immutable shift %= sx.length;\n    if (shift) \n   \
    \ {\n        return sx[shift..sx.length] ~ sx[0..shift];\n    }\n    return sx;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5w3nnn61.d(16): Error: no identifier for declarator shift\n/tmp/tmp5w3nnn61.d(16):
    Error: found \''%=\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5w3nnn61.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result = format(x);\n    if (result.length == 1)\n        return result;\n \
    \   shift %= result.length;\n    if (shift < 0)\n        shift += result.length;\n\
    \    if (shift == 0)\n        return result;\n    string n = result[$ - shift\
    \ .. $];\n    string p = result[0 .. $ - shift - 1];\n    return n ~ p;\n}\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_478yuf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    int shift_norm;\n\
    \    string digits;\n    int i;\n    shift_norm = shift % to!string(x).length;\n\
    \    digits = to!string(x);\n    return digits[shift_norm..digits.length] ~ digits[0..shift_norm];\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpir2j81tf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n     auto\
    \ xs = to!string(x);\n     if (shift > xs.length) \n     {\n         return std.algorithm.reverse(xs).idup;\n\
    \     } \n     else \n     {\n        return xs[shift..$].idup ~ xs[0..shift].idup;\n\
    \     }\n}\n/*\n    Return the maximun number of consecutive digits of x that\
    \ are identical.\n    >>> number_of_consecutive_digits(12L)\n    1L\n    >>> number_of_consecutive_digits(1112L)\n\
    \    2L\n    >>> number_of_consecutive_digits(1113L)\n    1L\n    >>> number_of_consecutive_digits(11311L)\n\
    \    2L\n    >>> number_of_consecutive_digits(113233311L)\n    3L\n*/\nlong number_of_consecutive_digits(long\
    \ x)\n{\n    auto count = 1L;\n    auto prev = x % 10;\n    while (x >= 10)\n\
    \    {\n        x /= 10;\n        auto curr = x % 10;\n        if (curr == prev)\n\
    \        {\n            count++;\n        }\n        else\n        {\n       \
    \     count = 1;\n        }\n        prev = curr;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdoyqw06l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    shift %= s.length;\n    s = s[shift .. s.length] ~ s[0\
    \ .. shift];\n    return s;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppqc6wtqq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ res = to!string(x);\n    return res[$-shift..$] ~ res[0..$-shift];\n}\n//Circular\
    \ shift the digits of the integer x, shift the digits right by shift\n//and return\
    \ the result as a string.\n//If shift > number of digits, return digits reversed.\n\
    //>>> circular_shift(12L, 1L)\n//\"21\"\n//>>> circular_shift(12L, 2L)\n//\"12\"\
    \nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2viggq_9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    // Shift\
    \ the numbers right by shift and put them in a vector\n    auto shifted_digits\
    \ = new Vector!(dchar)();\n    // Shift the numbers right by shift and put them\
    \ in a vector\n    while (x != 0) {\n        shifted_digits.length = shifted_digits.length\
    \ + 1;\n        shifted_digits[$ - 1] = dchar('0' + x % 10);\n        x = x /\
    \ 10;\n    }\n    return shifted_digits.join(\"\").idup.rotateRight(shift);\n\
    }\n/*\nBrute force method for finding pandigital multiples.\n*/\nlong brute_force_pandigital(long\
    \ start, long min_concatenated_product_length) \n{\n    // Find the max and min\
    \ possible values for the concatenated product\n    auto max_possible_concatenated_product\
    \ = start.to!(string).dup.length + min_concatenated_product_length * (9L).to!(string).dup.length;\n\
    \    auto min_possible_concatenated_product = start.to!(string).dup.length + min_concatenated_product_length\
    \ * (1L).to!(string).dup.length;\n    // Check if the concatenated product is\
    \ pandigital\n    if (max_possible_concatenated_product > 987654321L) {\n    \
    \    return 0L;\n    }\n    for (auto i = 0L; i < 100000L; i++) {\n        auto\
    \ n = start + i;\n        auto concatenated_product = n.to!(string).dup;\n   \
    \     for (auto j = 2L; j <= min_concatenated_product_length; j++) {\n       \
    \     concatenated_product ~= (n * j).to!(string).dup;\n        }\n        //\
    \ Check if the concatenated product is pandigital\n        if (max_possible_concatenated_product\
    \ < concatenated_product.length && min_possible_concatenated_product > concatenated_product.length)\
    \ {\n            return 0L;\n        }\n        if\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo68s42ch.d(20): Error: found \''(\'' when expecting \''.\''
    following dchar\n/tmp/tmpo68s42ch.d(20): Error: found \''48U\'' when expecting
    identifier following \''dchar.\''\n/tmp/tmpo68s42ch.d(20): Error: found \'')\''
    when expecting \'';\'' following statement\n/tmp/tmpo68s42ch.d(48): Error: found
    \''unittest\'' when expecting \''(\''\n/tmp/tmpo68s42ch.d(58): Error: found \''void\''
    when expecting \'')\''\n/tmp/tmpo68s42ch.d(58): Error: found \''{\'' when expecting
    \'';\'' following statement\n/tmp/tmpo68s42ch.d(58): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpo68s42ch.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n\tstring\
    \ s = to!string(x);\n\tlong l = s.length;\n\tif (shift > l) {\n\t\treturn reverse(s);\n\
    \t}\n\t\n\treturn s[shift..$] ~ s[0..shift - 1];\n}\n// /*\n// Do number to string\
    \ conversion if base > 10, otherwise use letters\n//     >>> as_base(10L, 3L)\n\
    //     \"12\"\n//     >>> as_base(11L, 3L)\n//     \"20\"\n//     >>> as_base(12L,\
    \ 3L)\n//     \"21\"\n//     >>> as_base(13L, 3L)\n//     \"22\"\n//     >>> as_base(10L,\
    \ 20L)\n//     \"A\"\n//     >>> as_base(11L, 20L)\n//     \"B\"\n//     >>> as_base(12L,\
    \ 20L)\n//     \"C\"\n//     >>> as_base(13L, 20L)\n//     \"D\"\n//     >>> as_base(14L,\
    \ 20L)\n//     \"E\"\n//     >>> as_base(15L, 20L)\n//     \"F\"\n//     >>> as_base(16L,\
    \ 20L)\n//     \"G\"\n//     >>> as_base(17L, 20L)\n//     \"H\"\n//     >>> as_base(18L,\
    \ 20L)\n//     \"I\"\n//     >>> as_base(19L, 20L)\n//     \"J\"\n//     >>> as_base(20L,\
    \ 20L)\n//     \"K\"\n//     >>> as_base(21L, 20L)\n//     \"L\"\n//     >>> as_base(22L,\
    \ 20L)\n//     \"M\"\n//     >>> as_base(23L, 20L)\n//     \"N\"\n//     >>> as_base(24L,\
    \ 20L)\n//     \"O\"\n//     >>> as_base(25L, 20L)\n//     \"P\"\n//     >>> as_base(26L,\
    \ 20L)\n//     \"Q\"\n//     >>> as_base(27L\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_6w1czhb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    int numDigits\
    \ = string(x).length;\n    if (shift > numDigits) {\n        return string(x).reverse;\n\
    \    }\n    else {\n        return string(x)[shift..$] ~ string(x)[0..shift-1];\n\
    \    }\n}\n/*\n    Two ints are called circular primes if all rotations of the\
    \ digits are prime.\n    >>> is_circular_prime(197L)\n    true\n    >>> is_circular_prime(31L)\n\
    \    true\n    >>> is_circular_prime(31L)\n    true\n    >>> is_circular_prime(31L)\n\
    \    true\n*/\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdit7mc13.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ xs = to!string(x);\n    return xs[$ - shift .. $] ~ xs[0 .. $ - shift - 1];\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_8qx9c1d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    immutable\
    \ rx = to!string(x);\n    immutable len = rx.length;\n    immutable rShift = (shift\
    \ % len);\n    return rx[rShift..] ~ rx[0..rShift];\n}\nunittest\n{\n    alias\
    \ candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n\
    \    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"\
    79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L)\
    \ == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy1k1ulla.d(18): Error: expression expected, not \'']\''\n/tmp/tmpy1k1ulla.d(18):
    Error: found \'';\'' when expecting \'']\''\n/tmp/tmpy1k1ulla.d(19): Error: found
    \''}\'' when expecting \'';\'' following return statement\n/tmp/tmpy1k1ulla.d(20):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpy1k1ulla.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ x_str = format(\"%d\", x);\n    long len = x_str.length;\n    if (shift > len)\
    \ {\n        return x_str[len .. $].reverse;\n    }\n    return x_str[shift ..\
    \ $] ~ x_str[0 .. shift - 1L];\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk3l7b0mb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    int n\
    \ = x.length;\n    if (shift >= n) {\n        return x.reverse;\n    }\n    return\
    \ (x[(shift + 1)..$] ~ x[0..shift]).text;\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2gk9m2at.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long\
    \ idx = 0L;\n    string result = \"\";\n    while (x > 0L) \n    {\n        result\
    \ = (string)((x % 10L)) + result;\n        x /= 10L;\n        idx += 1L;\n   \
    \ }\n    shift %= idx;\n    if (shift > 0L) \n    {\n        string t = result[$-shift..$];\n\
    \        result = result[0..$-shift-1L] + t;\n    }\n    return result;\n}\n/*\n\
    Equivalent of the PHP array_pad() function.\n    https://secure.php.net/manual/en/function.array-pad.php\n\
    \    It pads array in first argument to the size specified by the\n    second\
    \ argument with the value specified in the third argument.\n    Padding can be\
    \ applied to the left, the right or to both sides\n    of array. Negative padding\
    \ size will result in an error.\n    >>> array_pad([1, 2, 3], 5, 0)\n    [1, 2,\
    \ 3, 0, 0]\n    >>> array_pad([1, 2, 3], -5, 0)\n    Traceback (most recent call\
    \ last):\n        ...\n    AssertionError: negative padding size\n    >>> array_pad([1,\
    \ 2, 3], 5, 0, PadLeft)\n    [0, 0, 1, 2, 3]\n    >>> array_pad([1, 2, 3], 5,\
    \ 0, PadRight)\n    [1, 2, 3, 0, 0]\n    >>> array_pad([1, 2, 3], 5, 0, PadBoth)\n\
    \    [0, 1, 2, 3, 0]\n*/\nT[long] array_pad(T)(T[] arr, long size, T pad, PadDirection\
    \ dir = PadRight) if (isIntegral!T) \n{\n    assert(size >= 0L);\n    if (size\
    \ <= arr.length) \n    {\n        return arr[0L..size];\n    }\n    auto diff\
    \ = size - arr.length;\n    T[] result;\n    switch (dir) \n    {\n        case\
    \ PadRight:\n            result = new T[size];\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps4y0u3c2.d(19): Error: C style cast illegal, use cast(string)(x
    % 10L)\n/tmp/tmps4y0u3c2.d(64): Error: found \''unittest\'' instead of statement\n/tmp/tmps4y0u3c2.d(74):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps4y0u3c2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    int length\
    \ = (int)log10(abs(x)) + 1;\n    string s = to!string(x);\n    int start = (length\
    \ - (shift % length)) % length;\n    return s[start..$] ~ s[0..start-1];\n}\n\
    /*\nSplit the integer x into groups of k digits and return them as a string.\n\
    \    If x is an exact multiple of k, the last group will be empty.\n    >>> split_digits(12345678L,\
    \ 2L)\n    \"12 34 56 78 \"\n*/\nstring split_digits(long x, long k)\n{\n    long[]\
    \ groups = new long[];\n    int i = 0;\n    for (long d; x != 0; x /= pow(10,\
    \ k)) {\n        d = x % pow(10, k);\n        groups[i] = d;\n        i++;\n \
    \   }\n    return groups.array.text;\n}\n/*\nReturn the result of calculating\
    \ the radix digit for the first position\n    of the given number x.\n    >>>\
    \ first_digit(123456789L, 10L)\n    9L\n    >>> first_digit(123456789L, 3L)\n\
    \    2L\n*/\nlong first_digit(long x, long radix)\n{\n    return x % radix;\n\
    }\n/*\nReturn the result of calculating the radix digit for the last position\n\
    \    of the given number x.\n    >>> last_digit(123456789L, 10L)\n    1L\n   \
    \ >>> last_digit(123456789L, 3L)\n    0L\n*/\nlong last_digit(long x, long radix)\n\
    {\n    return x / pow(radix, (long)log10(x));\n}\n/*\nPerform a step of the radix\
    \ sort algorithm on the given digit of the array.\n    This step is called by\
    \ the sort_numbers function.\n    >>> numbers = [1L, 3L, 10L, 2L, 5L, 8L];\n \
    \   >>> buckets = [0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L];\n    >>>\nunittest\n\
    {\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) ==\
    \ \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy9sqsw6x.d(15): Error: C style cast illegal, use cast(int)log10(abs(x))\n/tmp/tmpy9sqsw6x.d(59):
    Error: C style cast illegal, use cast(long)log10(x)\n/tmp/tmpy9sqsw6x.d(61): Error:
    unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy9sqsw6x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    auto len = s.length;\n    if (shift >= len)\n    {\n\
    \        reverse(s);\n        return s;\n    }\n    auto shiftString = s[0 ..\
    \ shift];\n    reverse(shiftString);\n    auto result = shiftString ~ s[shift\
    \ .. $];\n    return result;\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5sxpp32i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ xx = to!string(x);\n    if (shift > xx.length) \n    {\n        xx = std.algorithm.reverse(xx);\n\
    \    } \n    else \n    {\n        shift %= xx.length;\n        xx = xx[xx.length\
    \ - shift .. $] ~ xx[0 .. xx.length - shift - 1];\n    }\n    return xx;\n}\n\
    /*\nGenerate all the circular shifts of x.\n    This is a generator function.\n\
    \    >>> circular_shifts(12L)\n    [12L, 21L]\n    >>> circular_shifts(123L)\n\
    \    [123L, 231L, 312L]\n    >>> circular_shifts(100L)\n    [100L, 1L]\n    >>>\
    \ circular_shifts(12345L)\n    [12345L, 23451L, 34512L, 45123L, 51234L]\n*/\n\
    auto circular_shifts(long x)\n{\n    return generate!((i) => circular_shift(x,\
    \ i + 1).to!long)(x.stringof.length);\n}\n/*\nReturn (digits reversed, digit count,\
    \ digit sum) for the long x.\n    >>> sorted_digits(1234L)\n    (4321L, 4L, 10L)\n\
    \    >>> sorted_digits(12345L)\n    (54321L, 5L, 15L)\n    >>> sorted_digits(100L)\n\
    \    (1L, 1L, 1L)\n*/\ntuple!(long, long, long) sorted_digits(long x)\n{\n   \
    \ string xx = x.stringof;\n    long digits = xx.length;\n    long sum = 0;\n \
    \   for (char c; xx)\n    {\n        c = xx.popFront;\n        sum += c.to!long;\n\
    \    }\n    return tuple(xx.to!long, digits, sum);\n}\n/*\nReturn (digits reversed,\
    \ digit count, digit sum) for the long x sorted\n    using circular shifts as\
    \ the sort keys.\n    >>> sorted_digits_with_circular_shifts(1234L)\n    (4321L,\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcrs2_fdc.d(57): Error: found \'')\'' when expecting \'';\''
    following for condition\n/tmp/tmpcrs2_fdc.d(62): Error: found \''return\'' when
    expecting \'')\''\n/tmp/tmpcrs2_fdc.d(64): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcrs2_fdc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ str = to!string(x);\n    shift %= str.length;\n    return str[str.length - shift\
    \ .. str.length] ~ str[0 .. str.length - shift - 1];\n}\n/*\nReturn a list of\
    \ all circular shifts of x.\n    >>> circular_shifts(12L)\n    [\"21\", \"12\"\
    ]\n    >>> circular_shifts(12345L)\n    [\"54321\", \"34521\", \"23451\", \"12345\"\
    ]\n    >>> circular_shifts(1L)\n    [\"1\"]\n*/\nstring[] circular_shifts(long\
    \ x)\n{\n    string str = to!string(x);\n    string[] ret;\n    ret.length = str.length;\n\
    \    for (long i = 0L; i < str.length; i++)\n    {\n        ret[i] = circular_shift(x,\
    \ i);\n    }\n    return ret;\n}\n/*\nReturn the largest circular shift of a number\
    \ that's smaller than k\n    >>> largest_circular_shift_smaller_than(12L, 20L)\n\
    \    12\n    >>> largest_circular_shift_smaller_than(12345L, 1235L)\n    2345\n\
    \    >>> largest_circular_shift_smaller_than(12345L, 987654L)\n    23451\n   \
    \ >>> largest_circular_shift_smaller_than(12345L, 1234L)\n    0\n*/\nlong largest_circular_shift_smaller_than(long\
    \ x, long k)\n{\n    string[] shifts = circular_shifts(x);\n    long largest =\
    \ 0L;\n    foreach (string shift; shifts)\n    {\n        long val = to!long(shift);\n\
    \        if (val >= k)\n        {\n            continue;\n        }\n        if\
    \ (val > largest)\n        {\n            largest = val;\n        }\n    }\n \
    \   return largest;\n}\n/*\nReturn a tuple of the first n elements of the radix\
    \ sort.\n    >>> radix_sort(12L, [12L, 1L, 2L])\n    [12L, 1L, 2L]\n    >>> radix\n\
    unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4kcw6rll.d(68): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp4kcw6rll.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    auto\
    \ s = x.to!string;\n    return s[$-shift..$] ~ s[0..$-shift];\n}\n/*\nSince we\
    \ can not do the rotate inplace directly, \nwe need to rotate digits in groups\
    \ of 3.\n*/\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptc545fq9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    long\
    \ j = shift;\n    string temp = to!string(x);\n    while (j-- > 0) \n    {\n \
    \       temp = temp ~ temp[0..$-1];\n    }\n    temp = temp[$-shift..$];\n   \
    \ return temp;\n}\n/*\nShift the integer x by shift digits to the right, \n  \
    \  and return the result as a long.\n    >>> shift_right(12L, 1L)\n    2L\n  \
    \  >>> shift_right(12L, 2L)\n    1L\n    >>> shift_right(12L, 3L)\n    0L\n*/\n\
    long shift_right(long x, long shift) \n{\n    string temp = circular_shift(x,\
    \ shift);\n    return to!long(temp);\n}\n/*\nCreate the infinite circular array\
    \ of numbers \n    of the form a * 10^n + b, where a and b are integers\n    and\
    \ n an non-negative integer.\n    >>> circular_array(1L, 2L)\n    [12L, 21L, 12L,\
    \ 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L,\
    \ 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L,\
    \ 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L,\
    \ 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L,\
    \ 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L, 21L, 12L,\
    \ 21L, 12L, 21L, 12L, 21L, 12L, 21L,\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwqwn65g.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpqwqwn65g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    enum\
    \ digits = static_cast(long)(log10(x)) + 1; // number of digits in x\n    enum\
    \ digits2 = shift >= digits ? digits : shift;\n    return std.string.to!string(x,\
    \ 10L).dup[digits - digits2 .. $];\n}\n/*\n    Get the c-th digit in the integer\
    \ x.\n    >>> digit(12L, 0L)\n    2\n    >>> digit(12L, 1L)\n    1\n*/\nlong digit(long\
    \ x, long c) \n{\n    return static_cast(long)(x / pow(10L, c)) % 10L;\n}\n/*\n\
    \    Return the number of digits in integer x.\n    >>> ndigits(0L)\n    1\n \
    \   >>> ndigits(12L)\n    2\n*/\nlong ndigits(long x) \n{\n    if (x < 0L) \n\
    \    {\n        x = -x;\n    }\n    if (x == 0L) \n    {\n        return 1L;\n\
    \    }\n    return static_cast(long)(log10(x)) + 1L;\n}\n/*\n    Return the integer\
    \ of the string s containing only digits.\n    >>> to_int(\"12\")\n    12\n  \
    \  >>> to_int(\"012\")\n    12\n*/\nlong to_int(string s) \n{\n    long result\
    \ = 0L;\n    for (size_t i = 0; i < s.length; i++) \n    {\n        result = result\
    \ * 10L + s[i] - '0';\n    }\n    return result;\n}\n/*\n    Return the number\
    \ that is the reverse of the integer x.\n    >>> reverse(12L)\n    21\n*/\nlong\
    \ reverse(long x) \n{\n    long result = 0L;\n    while (x > 0L) \n    {\n   \
    \     result = result * 10L + x % 10L;\n        x /= 10L;\n    }\n    return result;\n\
    }\n/*\n    Return an array of primes in the range [2..n].\n    >>> primes(12L)\n\
    \    [2L, 3L, 5L,\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8cu60vbu.d(15): Error: found \'')\'' when expecting \''.\''
    following long\n/tmp/tmp8cu60vbu.d(15): Error: found \''(\'' when expecting identifier
    following \''long.\''\n/tmp/tmp8cu60vbu.d(15): Error: found \''log10\'' when expecting
    \'',\''\n/tmp/tmp8cu60vbu.d(28): Error: found \'')\'' when expecting \''.\'' following
    long\n/tmp/tmp8cu60vbu.d(28): Error: found \''(\'' when expecting identifier following
    \''long.\''\n/tmp/tmp8cu60vbu.d(28): Error: found \''x\'' when expecting \'',\''\n/tmp/tmp8cu60vbu.d(28):
    Error: expression expected, not \''/\''\n/tmp/tmp8cu60vbu.d(28): Error: found
    \''pow\'' when expecting \'',\''\n/tmp/tmp8cu60vbu.d(47): Error: found \'')\''
    when expecting \''.\'' following long\n/tmp/tmp8cu60vbu.d(47): Error: found \''(\''
    when expecting identifier following \''long.\''\n/tmp/tmp8cu60vbu.d(47): Error:
    found \''log10\'' when expecting \'',\''\n/tmp/tmp8cu60vbu.d(80): Error: unterminated
    /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8cu60vbu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ digits = format(\"%s\",x);\n    uint len = digits.length;\n    ulong cshift\
    \ = cast(ulong)shift % len;\n    string right = digits[len-cshift..$];\n    string\
    \ left = digits[0..len-cshift-1];\n    return right ~ left;\n}\n/*\n    set up\
    \ an array of indices (0 to N-1) to shuffle\n    Then find the next permutation\
    \ in sorted order (lexicographically)\n    Return false if no next permutation\
    \ exists.\n    >>> in_order = iota(0L, 5L);\n    >>> next_permutation(in_order)\n\
    \    true\n    >>> in_order\n    [0L, 1L, 2L, 3L, 4L]\n    >>> next_permutation(in_order)\n\
    \    true\n    >>> in_order\n    [0L, 1L, 2L, 4L, 3L]\n    >>> next_permutation(in_order)\n\
    \    true\n    >>> in_order\n    [0L, 1L, 3L, 2L, 4L]\n    >>> next_permutation(in_order)\n\
    \    true\n    >>> in_order\n    [0L, 1L, 3L, 4L, 2L]\n    >>> next_permutation(in_order)\n\
    \    true\n    >>> in_order\n    [0L, 1L, 4L, 2L, 3L]\n    >>> next_permutation(in_order)\n\
    \    true\n    >>> in_order\n    [0L, 1L, 4L, 3L, 2L]\n    >>> next_permutation(in_order)\n\
    \    true\n    >>> in_order\n    [0L, 2L, 1L, 3L, 4L]\n    >>> next_permutation(in_order)\n\
    \    true\n    >>> in_order\n    [0L, 2L, 1L, 4L, 3L]\n    >>> next_permutation(in_order)\n\
    \    true\n    >>> in_order\n    [0L, 2L, 3L, 1L, 4L]\n    >>> next_permutation(in_order)\n\
    \    true\n    >>> in_order\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptpic8ay4.d(22): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmptpic8ay4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ digits = to!string(x);\n    long i = shift % digits.length;\n    return digits[i\
    \ .. $] ~ digits[0 .. i];\n}\nunittest\n{\n    alias candidate = circular_shift;\n\
    \n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) ==\
    \ \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ezyp9p5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ result;\n    long ndigits = floor(log10(x)) + 1;\n    long nshift = shift %\
    \ ndigits;\n    long n = ndigits - nshift;\n    result ~= (x / pow(10, n));\n\
    \    result ~= (x % pow(10, n));\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n\
    \    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"\
    79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L)\
    \ == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpma0vvx5u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    size_t\
    \ digits = floor(log10(x)) + 1;\n    if (shift > digits)\n        return reversed(x);\n\
    \    return concatenate_integer(x, shift);\n}\nunittest\n{\n    alias candidate\
    \ = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L,\
    \ 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L,\
    \ 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqdqdmel4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    int length\
    \ = to!string(x).length;\n    while (shift > length) {\n        shift -= length;\n\
    \    }\n    string temp = to!string(x);\n    temp = temp.rightAt(shift) ~ temp.leftAt(shift);\n\
    \    return temp;\n}\n/*\nCheck if the integer x is divisible by y.\n    >>> is_divisible(12L,\
    \ 2L)\n    true\n    >>> is_divisible(12L, 7L)\n    false\n*/\nunittest\n{\n \
    \   alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"\
    001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpigg80sut.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ x_digits = to!string(x);\n    if (shift < x_digits.length) \n    {\n       \
    \ return x_digits[shift .. $] ~ x_digits[0 .. shift];\n    } \n    else \n   \
    \ {\n        return x_digits[$ .. 0 .. -1];\n    }\n}\n/*\nReturn a list of all\
    \ possible circular shifts of digits of the integer x.\n>>> circular_shifts(12L)\n\
    [\"21\", \"12\"]\n>>> circular_shifts(123L)\n[\"321\", \"231\", \"123\"]\n*/\n\
    string[] circular_shifts(long x) \n{\n    string x_digits = to!string(x);\n  \
    \  string[] result = new string[x_digits.length];\n    foreach (i; 0 .. x_digits.length)\
    \ \n    {\n        result[i] = circular_shift(x, i);\n    }\n    return result;\n\
    }\n/*\nReturn a list of all possible circular shifts of the digits of a given\
    \ integer\nx as integers.\n>>> circular_shifts_as_int(12L)\n[21L, 12L]\n>>> circular_shifts_as_int(123L)\n\
    [321L, 231L, 123L]\n*/\nlong[] circular_shifts_as_int(long x) \n{\n    string[]\
    \ shifts = circular_shifts(x);\n    return map!(to!long)(shifts);\n}\n/*\nReturn\
    \ a list of all possible circular shifts of the digits of a given integer\nx as\
    \ integers ordered by their value.\n>>> circular_shifts_as_int_sorted(12L)\n[12L,\
    \ 21L]\n>>> circular_shifts_as_int_sorted(123L)\n[123L, 231L, 321L]\n*/\nlong[]\
    \ circular_shifts_as_int_sorted(long x) \n{\n    long[] shifts = circular_shifts_as_int(x);\n\
    \    return sort(shifts);\n}\n/*\nReturn the length of the next circular shift\
    \ of the integer x.\n>>> next_circular_shift_length(12L)\n2\nunittest\n{\n   \
    \ alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\"\
    );\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) ==\
    \ \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnfjtch6w.d(22): Error: found \''..\'' when expecting \'']\''\n/tmp/tmpnfjtch6w.d(22):
    Error: found \'']\'' when expecting \'';\'' following return statement\n/tmp/tmpnfjtch6w.d(68):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnfjtch6w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    static\
    \ assert(isUnsigned(x));\n    static assert(isSigned(shift));\n    static assert(shift\
    \ >= 0);\n    const(char)[] digits = map!(\"std.conv.emit\")(x).array;\n    const(char)[]\
    \ end = shift > 0 ? digits[0 .. shift].dup : null;\n    const(char)[] front =\
    \ shift > 0 ? digits[shift .. $].dup : digits.dup;\n    return(end ~ front).idup;\n\
    }\nunittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
    \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
    \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
    \ 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphz3b1kqp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    if (shift\
    \ >= length(to!string(x)))\n    {\n        return x.to!string.reverse();\n   \
    \ }\n    else\n    {\n        Tuple!(string,string) split = to!string(x).splitAt(shift);\n\
    \        return split[1] ~ split[0];\n    }\n}\n/*\nComputes a^2 % m with the\
    \ Montgomery algorithm\n    >>> montgomery_exponentiation(123L, 456L, 789L)\n\
    \    738L\n    >>> montgomery_exponentiation(123L, 456L, 123L)\n    1L\n*/\nlong\
    \ montgomery_exponentiation(long a, long b, long m) \n{\n    long[] a_in_A = new\
    \ long[1];\n    a_in_A[0] = a % m;\n    long[] z = new long[1];\n    z[0] = 0L;\n\
    \    long[] A = new long[1];\n    A[0] = (a_in_A[0] * a_in_A[0]) % m;\n    long[]\
    \ M = new long[1];\n    M[0] = m;\n    long[] r = new long[1];\n    r[0] = 2L;\n\
    \    long[] R = new long[1];\n    R[0] = 1L;\n    long[] q = new long[1];\n  \
    \  q[0] = m / 2L;\n    return montgomery_exponentiation_recursive(b, a_in_A, z,\
    \ A, M, r, R, q);\n}\n/*\nComputes a^2 % m with the Montgomery algorithm\n   \
    \ >>> montgomery_exponentiation_recursive(123L, [4L], [0L], [16L], [789L], [2L],\
    \ [1L], [394L])\n    738L\n    >>> montgomery_exponentiation_recursive(123L, [4L],\
    \ [0L], [16L], [123L], [2L], [1L], [61L])\n    1L\n*/\nlong montgomery_exponentiation_recursive(long\
    \ b, long[] a_in_A,\nunittest\n{\n    alias candidate = circular_shift;\n\n  \
    \  assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"\
    12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L)\
    \ == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprxhbxp1x.d(58): Error: basic type expected, not unittest\n/tmp/tmprxhbxp1x.d(58):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmprxhbxp1x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n    \n*/\nstring circular_shift(long x, long shift) \n{\n    return\
    \ to!string(x).rotateRight(shift);\n}\n/*\n    Format the integer x as a string\
    \ containing the digits, group\n    each groupSize digits by the separator sep\
    \ and append the\n    the sign (if any) to the beginning.\n    >>> group_digits(12345678L,\
    \ 3, ',')\n    \"12,345,678\"\n    >>> group_digits(-12345678L, 3, ',')\n    \"\
    -12,345,678\"\n*/\nstring group_digits(long x, long groupSize, char sep) \n{\n\
    \    string result = to!string(x);\n    if (x < 0)\n        result = \"-\" ~ result[1\
    \ .. $];\n    string sepS = new string(1, sep);\n    while (result.length > groupSize)\
    \ \n    {\n        result = result[0 .. $ - groupSize] ~ sepS ~ result[$ - groupSize\
    \ .. $];\n    }\n    return result;\n}\n/*\n    Return x rounded to the nearest\
    \ multiple of m\n    >>> round(16L, 10L)\n    20L\n    >>> round(15L, 10L)\n \
    \   20L\n    >>> round(14L, 10L)\n    10L\n    >>> round(11L, 10L)\n    10L\n\
    \    >>> round(10L, 10L)\n    10L\n    >>> round(6L, 10L)\n    0L\n    >>> round(5L,\
    \ 10L)\n    0L\n    >>> round(4L, 10L)\n    0L\n    >>> round(1L, 10L)\n    0L\n\
    \    >>> round(0L, 10L)\n    0L\n    >>> round(-1L, 10L)\n    0L\n    >>> round(-4L,\
    \ 10L)\n    0L\n    >>> round(-5L, 10L)\n    0L\n    >>> round(-6L, 10L)\n   \
    \ 0L\n    >>> round(-10L, 10L)\n    -10L\n    >>> round(-11L, 10L)\n    -10L\n\
    \    >>> round(-14L, 10L)\n    -10L\n    >>> round(-15L,\nunittest\n{\n    alias\
    \ candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n\
    \    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"\
    79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L)\
    \ == \"11\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2frw_o14.d(38): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2frw_o14.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015167
