name: HumanEval_121_solution
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of integers,\
  \ return the sum of all of the odd elements that are in even positions.\n    \n\n\
  \    Examples\n    >>> solution([5L, 8L, 7L, 1L])\n    12L\n    >>> solution([3L,\
  \ 3L, 3L, 3L, 3L])\n    9L\n    >>> solution([30L, 13L, 24L, 321L])\n    0L\n  \
  \  \n*/\nlong solution(long[] lst) \n"
tests: "unittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
  \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n  \
  \  assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L])\
  \ == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
  \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n}\n\
  void main(){}"
completions: ["{\n    long total = 0;\n    for(int i = 0; i < lst.length; i += 2)\n\
    \    {\n        if(lst[i] % 2 == 1)\n        {\n            total += lst[i];\n\
    \        }\n    }\n    return total;\n}", "{\n    long sum = 0;\n    long temp;\n\
    \    long i;\n    foreach( i; 0..lst.length)\n    {\n        temp = lst[i];\n\
    \        if(i % 2 == 0)\n        {\n            if(temp % 2 != 0)\n          \
    \  {\n                sum += temp;\n            }\n        }\n    }\n    return\
    \ sum;\n}", "{\n  //  Your code here.\n   long sum = 0;\n   for(int i = 0; i <\
    \ lst.length; i++) {\n       if(i % 2 == 0 && lst[i] % 2 != 0) {\n           sum\
    \ += lst[i];\n       }\n   }\n   return sum;\n}", "{\n    long sum=0;\n    for(int\
    \ i=0;i<lst.length;i++)\n    {\n      if(i%2==0 && lst[i]%2!=0)\n      {\n   \
    \     sum+=lst[i];\n      }\n    }\n    return sum;\n}", "{\n    size_t len =\
    \ lst.length;\n    size_t i = 0;\n    size_t j = 0;\n    long[] lst2 = new long[len];\n\
    \    for(i; i < len; i+=2)\n    {\n        lst2[j] = lst[i];\n        j++;\n \
    \   }\n    len = j;\n    j = 0;\n    i = 0;\n    long[] lst3 = new long[len];\n\
    \    for(i; i < len; i++)\n    {\n        if(lst2[i]%2 == 1)\n        {\n    \
    \        lst3[j] = lst2[i];\n            j++;\n        }\n    }\n    len = j;\n\
    \    i = 0;\n    long sum = 0;\n    for(i; i < len; i++)\n    {\n        sum +=\
    \ lst3[i];\n    }\n    return sum;\n}", "{\n    long sum = 0;\n    if(lst.empty)\
    \ return sum;\n    for(int i = 0; i < lst.length; i += 2)\n    {\n        if(lst[i]\
    \ % 2 != 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "{\n    long result = 0;\n    foreach(i, l; lst)\n    {\n        if\
    \ (i % 2 != 0 && i != lst.length - 1)\n        {\n            result += l;\n \
    \       }\n    }\n    return result;\n}", "{\n    long[uint] oddEven;\n    foreach(i,\
    \ v; lst)\n    {\n        if(v % 2 == 0)\n        {\n            if(i % 2 == 0)\n\
    \            {\n                oddEven ~= v;\n            }\n        }\n    }\n\
    \    return reduce!\"a + b\"(oddEven);\n}", "{\n    int cnt = 0;\n    long res\
    \ = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if (i % 2 ==\
    \ 0 && lst[i] % 2 != 0)\n        {\n            res += lst[i];\n        }\n  \
    \  }\n    return res;\n}", "{\n    return lst.filter!((x, i) => i % 2 == 0 &&\
    \ x % 2 == 1).sum;\n}", "{\n    long sum = 0;\n    foreach(a; lst)\n    {\n  \
    \      if (a%2 == 1 && lst.indexOf(a)%2 == 0)\n        {\n            sum += a;\n\
    \        }\n    }\n    return sum;\n}", "{\n    long res = 0;\n    for(int i =\
    \ 0; i < lst.length; i+=2)\n    {\n        if (lst[i] % 2 != 0)\n        {\n \
    \           res += lst[i];\n        }\n    }\n    return res;\n}", "{\n    \n\
    \    long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 != 0 && v\
    \ % 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }", "{\n    \n    long sum = 0;\n    for(auto i = 0; i < lst.length; i++)\n  \
    \  {\n        if(i % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum +=\
    \ lst[i];\n        }\n    }\n    return sum;\n}", "{\n    return lst.indexedMap!(a\
    \ => a[0] * a[1] % 2 == 0 ? a[0] : 0).sum;\n}", "{\n  int count = 0;\n  long sum\
    \ = 0;\n  foreach(int n; lst)\n  {\n    if(n%2 != 0 && count%2 == 0)\n    {\n\
    \      sum += n;\n    }\n    count++;\n  }\n  return sum;\n}", "{\n    long n\
    \ = 2;\n    long solution = 0;\n    foreach(i; lst)\n    {\n        if (n % 2\
    \ == 0)\n        {\n            if (i % 2 != 0)\n            {\n             \
    \   solution += i;\n            }\n        }\n        n++;\n    }\n    return\
    \ solution;\n}", "{\n    auto sum = 0L;\n    auto index = 0L;\n    auto odd =\
    \ false;\n    foreach(i; lst)\n    {\n        odd = (i % 2) != 0;\n        if(index\
    \ % 2 == 0 && odd)\n        {\n            sum += i;\n        }\n        index++;\n\
    \    }\n    return sum;\n}", "{\n    long result = 0;\n    foreach(i, v; lst)\n\
    \    {\n        if(i % 2 == 0 && v % 2 != 0)\n        {\n            result +=\
    \ v;\n        }\n    }\n    return result;\n}", "{\n    long sum = 0;\n    foreach(int\
    \ i, long e; lst)\n    {\n        if(i % 2 == 0 && e % 2 != 0)\n        {\n  \
    \          sum += e;\n        }\n    }\n    return sum;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
