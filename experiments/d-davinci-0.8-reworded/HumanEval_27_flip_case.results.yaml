name: HumanEval_27_flip_case
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  char[]\
    \ res = string.dup;\n  foreach(i,c; res)\n    if(c.isUpper)\n      res[i] = toLower(c);\n\
    \    else if(c.isLower)\n      res[i] = toUpper(c);\n  return res.idup;\n}\n/*\n\
    \ Return the average of two or more numbers.\n    >>> mean(42, 69)\n    55.5\n\
    */\nauto mean(T...)(T numbers) \n{\n  return sum(numbers) / numbers.length;\n\
    }\n/*\nCapitalize the first letter of a string.\n    >>> capitalize(\"hello\"\
    )\n    \"Hello\"\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2nnr4veq.d(28): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2nnr4veq.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    \n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgcvhocsr.d(9): Error: function `tmpgcvhocsr.flip_case` has no\
    \ `return` statement, but is expected to return a value of type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgcvhocsr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n    if (string.length\
    \ == 0)\n        return \"\";\n    else if (string[0].is_lower)\n        return\
    \ string[0].to_upper ~ flip_case(string[1..$]);\n    else if (string[0].is_upper)\n\
    \        return string[0].to_lower ~ flip_case(string[1..$]);\n    else\n    \
    \    return string[0] ~ flip_case(string[1..$]);\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppie_h01o.d(10): Error: cannot use function constraints for non-template\
    \ functions. Use `static if` instead\\n/tmp/tmppie_h01o.d(10): Error: declaration\
    \ expected, not `if`\\n/tmp/tmppie_h01o.d(12): Error: declaration expected, not\
    \ `else`\\n/tmp/tmppie_h01o.d(14): Error: declaration expected, not `else`\\n/tmp/tmppie_h01o.d(16):\
    \ Error: declaration expected, not `else`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmppie_h01o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    for (size_t i=0; i<string.length; i++)\n    {\n        if (isalpha(string[i]))\n\
    \        {\n            if (islower(string[i]))\n            {\n             \
    \   result~=toupper(string[i]);\n            }\n            else\n           \
    \ {\n                result~=tolower(string[i]);\n            }\n        }\n \
    \       else\n        {\n            result~=string[i];\n        }\n    }\n  \
    \  return result;\n}\n/*\nFor a given string, reverse its characters.\n    >>>\
    \ reverse(\"Hello\")\n    \"olleH\"\n*/\nstring reverse(string string) \n{\n \
    \   string result;\n    for (size_t i=string.length; i>0; i--)\n    {\n      \
    \  result~=string[i-1];\n    }\n    return result;\n}\n/*\nFor a given string,\
    \ return the first half and the second half. If the length is odd, the extra character\
    \ should go in the first half.\n    >>> halves(\"Hello\")\n    [\"Hel\", \"lo\"\
    ]\n    >>> halves(\"Hi\")\n    [\"H\", \"i\"]\n*/\nstring[] halves(string string)\
    \ \n{\n    //TODO: Figure out how to make this work with toSplit\n    string[]\
    \ result;\n    string firstHalf;\n    string secondHalf;\n    if (string.length\
    \ % 2 == 0)\n    {\n        firstHalf=string[0..string.length/2];\n        secondHalf=string[string.length/2..$];\n\
    \    }\n    else\n    {\n        firstHalf=string[0..string.length/2+1];\n   \
    \     secondHalf=string[string.length/2+1..$];\n    }\n    result~=firstHalf;\n\
    \    result~=secondHalf;\n    return result;\n}\n/*\nFor a given string, find\
    \ the first non-repeating character.\n    >>> first_non_repeating_letter(\"Hello\
    \ World\")\n    \"W\"\n    >>> first_non_repeating_letter(\"H\")\n    \"H\"\n\
    \    >>> first_non_repeating_letter(\"\")\n    null\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_j598fq4.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_j598fq4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = string.dup;\n    for (size_t i = 0; i < result.length; i++) \n    {\n\
    \        //result[i] = result[i].toLower;\n        if (result[i].isLower)\n  \
    \          result[i] = result[i].toUpper;\n        else if (result[i].isUpper)\n\
    \            result[i] = result[i].toLower;\n    }\n    return result;\n}\n/*\n\
    \    Give a list of numbers in a string, return the sum of numbers that are\n\
    \    greater than or equal to 10.\n    >>> sum_of_bigger_numbers([\"5\", \"14\"\
    , \"5\", \"2\", \"0\"])\n    29\n*/\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7bdsgs08.d(11): Error: `string` is used as a type\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7bdsgs08.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flipped_string = \"\";\n    foreach(character; string) \n    {\n        if (character.isUpper)\
    \ \n        {\n            flipped_string ~= character.toLower;\n        }\n \
    \       else \n        {\n            flipped_string ~= character.toUpper;\n \
    \       }\n    }\n    return flipped_string;\n}\n/*\n * A palindrome is a word\
    \ that is the same written backwards, e.g. \"radar\".\n * Write a function that\
    \ tests if a string is a palindrome.\n */\nunittest\n{\n    alias candidate =\
    \ flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkntgn3lb.d(11): Error: `string` is used as a type\\n/tmp/tmpkntgn3lb.d(14):\
    \ Error: no property `isUpper` for type `immutable(char)`\\n/tmp/tmpkntgn3lb.d(16):\
    \ Error: no property `toLower` for type `immutable(char)`\\n/tmp/tmpkntgn3lb.d(20):\
    \ Error: no property `toUpper` for type `immutable(char)`\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkntgn3lb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ result;\n\tforeach(char c; string)\n\t{\n\t\tif (c.isUpper)\n\t\t\tresult ~=\
    \ c.toLower;\n\t\telse if (c.isLower)\n\t\t\tresult ~= c.toUpper;\n\t\telse\n\t\
    \t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate =\
    \ flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4a8f6yrb.d(11): Error: `string` is used as a type\\n/tmp/tmp4a8f6yrb.d(14):\
    \ Error: no property `isUpper` for type `char`\\n/tmp/tmp4a8f6yrb.d(15): Error:\
    \ no property `toLower` for type `char`\\n/tmp/tmp4a8f6yrb.d(16): Error: no property\
    \ `isLower` for type `char`\\n/tmp/tmp4a8f6yrb.d(17): Error: no property `toUpper`\
    \ for type `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4a8f6yrb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ str=\"\";\n    for(int i=0;i<string.length;i++)\n    {\n        char c=string[i];\n\
    \        if (isLower(c))\n            c=toUpper(c);\n        else if (isUpper(c))\n\
    \            c=toLower(c);\n        str+=c;\n    }\n    return str;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoa_czm6t.d(11): Error: `string` is used as a type\\n/tmp/tmpoa_czm6t.d(15):\
    \ Error: undefined identifier `isLower`\\n/tmp/tmpoa_czm6t.d(16): Error: undefined\
    \ identifier `toUpper`\\n/tmp/tmpoa_czm6t.d(17): Error: undefined identifier `isUpper`\\\
    n/tmp/tmpoa_czm6t.d(18): Error: undefined identifier `toLower`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoa_czm6t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    auto\
    \ result = string.dup;\n    foreach(i, result) \n    {\n        if(result[i].isUpper)\
    \ \n        {\n            result[i] = result[i].toLower;\n        }\n       \
    \ else if(result[i].isLower) \n        {\n            result[i] = result[i].toUpper;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpox_onfmj.d(12): Error: no identifier for declarator `result`\\\
    n/tmp/tmpox_onfmj.d(12): Error: found `)` when expecting `;`\\n/tmp/tmpox_onfmj.d(23):\
    \ Error: found `return` when expecting `)`\\nFailed: [\"dmd\", \"-unittest\",\
    \ \"-v\", \"-o-\", \"/tmp/tmpox_onfmj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ std.typecons.Tuple!(string)(\n        string.map!(toUpper)(),\n        string.map!(toLower)()\n\
    \    ).\n    map!((chars) => chars.join).\n    rotateLeft();\n}\n \n/*\nReturn\
    \ the number of words in a string.\n    >>> num_words(\"Hello world\")\n    2\n\
    \    >>> num_words(\"This is a sentence\")\n    4\n    >>> num_words(\"\")\n \
    \   0\n*/\nsize_t num_words(string string) \n{\n    return std.algorithm.count!(string,\
    \ (e) => e == ' ');\n}\n \n/*\nReturn the nth character in a string.\n    >>>\
    \ nth_char(\"hello\", 0)\n    'h'\n    >>> nth_char(\"hello\", 4)\n    'o'\n*/\n\
    char nth_char(string string, size_t n) \n{\n    return string[n];\n}\n \n/*\n\
    Return the character code of a character.\n    >>> char_code('a')\n    97\n  \
    \  >>> char_code('A')\n    65\n*/\nsize_t char_code(char character) \n{\n    return\
    \ cast(size_t)character;\n}\n \n/*\nReturn the character for a given character\
    \ code.\n    >>> code_char(97)\n    'a'\n    >>> code_char(65)\n    'A'\n*/\n\
    char code_char(size_t character_code) \n{\n    return cast(char)character_code;\n\
    }\n \n/*\nReturn the difference between two characters.\n    >>> diff_char('a',\
    \ 'A')\n    32\n    >>> diff_char('a', 'a')\n    0\n*/\nsize_t diff_char(char\
    \ char1, char char2) \n{\n    return char_code(char1) - char_code(char2);\n}\n\
    \ \n/*\nReturn the result of dividing the length of a string by n.\n    >>> len_divide(\"\
    test\", 2)\n    2\n    >>> len_divide(\"test\", 3)\n    1\n*/\nsize_t len_divide\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoehrurhy.d(89): Error: semicolon expected, not `unittest`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoehrurhy.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ out;\n    foreach(char c; string)\n    {\n        if(c.isLower)\n          \
    \  out ~= c.toUpper;\n        else\n            out ~= c.toLower;\n    }\n   \
    \ return out;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp29ayvu9h.d(11): Error: found `out` when expecting `;` following\
    \ statement\\n/tmp/tmp29ayvu9h.d(11): Deprecation: use `{ }` for an empty statement,\
    \ not `;`\\n/tmp/tmp29ayvu9h.d(15): Error: found `out` instead of statement\\\
    n/tmp/tmp29ayvu9h.d(17): Error: found `out` instead of statement\\n/tmp/tmp29ayvu9h.d(19):\
    \ Error: expression expected, not `out`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp29ayvu9h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    foreach(i,\
    \ char c; string)\n    {\n        if(c.isLower)\n            string[i] = c.toUpper;\n\
    \        else if(c.isUpper)\n            string[i] = c.toLower;\n    }\n    return\
    \ string;\n}\n/*\n For a given string, remove all duplicates.\n    >>> remove_duplicates(\"\
    aabbccddee\")\n    \"abcde\"\n    >>> remove_duplicates(\"abcde\")\n    \"abcde\"\
    \n*/\nstring remove_duplicates(string str)\n{\n    bool is_there[256];\n    foreach(i,\
    \ char c; str)\n    {\n        is_there[c] = true;\n    }\n    string new_str;\n\
    \    foreach(i, char c; str)\n    {\n        if(is_there[c])\n        {\n    \
    \        new_str ~= c;\n            is_there[c] = false;\n        }\n    }\n \
    \   return new_str;\n}\n/*\n Given an array of integers and an integer n, find\
    \ the number of times \n that n occurs in the array. Do not use a for loop.\n\
    \    >>> number_of_times(3, [1, 3, 3, 2, 3, 4, 3])\n    4\n    >>> number_of_times(4,\
    \ [1, 3, 3, 2, 3, 4, 3])\n    1\n*/\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnrg02z58.d(29): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `bool[256] is_there`\\n/tmp/tmpnrg02z58.d(13): Error: no property `isLower`\
    \ for type `char`\\n/tmp/tmpnrg02z58.d(14): Error: no property `toUpper` for type\
    \ `char`\\n/tmp/tmpnrg02z58.d(15): Error: no property `isUpper` for type `char`\\\
    n/tmp/tmpnrg02z58.d(16): Error: no property `toLower` for type `char`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrg02z58.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ res = \"\";\n    foreach(c; string)\n    {\n        if(isUpper(c))\n       \
    \     c = toLower(c);\n        else if(isLower(c))\n            c = toUpper(c);\n\
    \        res ~= c;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfncq9bvm.d(11): Error: `string` is used as a type\\n/tmp/tmpfncq9bvm.d(14):\
    \ Error: undefined identifier `isUpper`\\n/tmp/tmpfncq9bvm.d(15): Error: undefined\
    \ identifier `toLower`\\n/tmp/tmpfncq9bvm.d(16): Error: undefined identifier `isLower`\\\
    n/tmp/tmpfncq9bvm.d(17): Error: undefined identifier `toUpper`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfncq9bvm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flipped = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            flipped ~= toLower(c);\n        else if(isLower(c))\n           \
    \ flipped ~= toUpper(c);\n        else\n            flipped ~= c;\n    }\n   \
    \ return flipped;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpay7ytvtn.d(11): Error: `string` is used as a type\\n/tmp/tmpay7ytvtn.d(14):\
    \ Error: undefined identifier `isUpper`\\n/tmp/tmpay7ytvtn.d(15): Error: undefined\
    \ identifier `toLower`\\n/tmp/tmpay7ytvtn.d(16): Error: undefined identifier `isLower`\\\
    n/tmp/tmpay7ytvtn.d(17): Error: undefined identifier `toUpper`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpay7ytvtn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ str = \"\";\n    foreach(ch; string)\n    {\n        if(isAlpha(ch))\n     \
    \   {\n            str ~= (isUpper(ch) ? toLower(ch) : toUpper(ch));\n       \
    \ }\n        else\n        {\n            str ~= ch;\n        }\n    }\n    return\
    \ str;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5i4rlygy.d(11): Error: `string` is used as a type\\n/tmp/tmp5i4rlygy.d(14):\
    \ Error: undefined identifier `isAlpha`\\n/tmp/tmp5i4rlygy.d(16): Error: undefined\
    \ identifier `isUpper`\\n/tmp/tmp5i4rlygy.d(16): Error: undefined identifier `toLower`\\\
    n/tmp/tmp5i4rlygy.d(16): Error: undefined identifier `toUpper`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5i4rlygy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ new_string;\n\tforeach(c; string)\n\t{\n\t\tnew_string ~= (c.isUpper ? toLower(c)\
    \ : toUpper(c));\n\t}\n\treturn new_string;\n}\n/*\n Find the most frequently\
    \ occurring character in a string.\n If a string has a sequence of repeated characters,\
    \ only the first character counts.\n \n    >>> most_frequent_char(\"abcabcabc\"\
    )\n    ('a', 3)\n    \n*/\ntuple!(char, int) most_frequent_char(string string)\
    \ \n{\n\tint[] occurences;\n\tforeach(c; string)\n\t{\n\t\toccurences[c]++;\n\t\
    }\n\treturn max!((a, b) => a[1] > b[1])(occurences.byKeyValue.keys);\n}\n/*\n\
    \ Remove all white spaces in a string.\n    \n    >>> remove_whitespace(\"abcabcabc\"\
    )\n    \"abcabcabc\"\n    \n*/\nstring remove_whitespace(string string) \n{\n\t\
    return join(filter!(c => !c.isWhite)(string));\n}\n/*\n    Write a function that\
    \ takes a list and returns a\n    new list that contains all the elements of the\
    \ first list minus all the duplicates.\n*/\nT[] remove_duplicates(T)(T[] array)\
    \ \n{\n\tT[] result;\n\tforeach(a; array)\n\t{\n\t\tif(!a in result)\n\t\t{\n\t\
    \t\tresult ~= a;\n\t\t}\n\t}\n\treturn result;\n}\n/*\n For a given list of integers,\
    \ remove all the duplicates from the list.\n \n    >>> remove_duplicates([1, 2,\
    \ 3, 3, 4, 5, 5, 1])\n    [1, 2, 3, 4, 5]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfqy6e73u.d(26): Error: `tuple!(char, int)` is used as a type\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfqy6e73u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.toLowerCase.toUpperCase;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphej5ve8x.d(11): Error: no property `toLowerCase` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphej5ve8x.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ to!string(map!(c => c.isAlpha ? c ^ 0x20 : c)(to!(dchar[])(string)));\n}\n/*\n\
    Compare a string against a mask. The mask can be either a string of equal length\
    \ or a single character.\nunittest\n{\n    alias candidate = flip_case;\n\n  \
    \  assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\"\
    );\n    assert(candidate(\"These violent delights have violent ends\") == \"tHESE\
    \ VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo38_covu.d(13): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo38_covu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n    in\n\
    \    {\n        assert(string.length() > 0);\n    }\n    out (result)\n    {\n\
    \        assert(result.length() == string.length());\n    }\n{\n    ubyte[] ret\
    \ = string.dup;\n    foreach (immutable i, ref dchar c; ret)\n    {\n        if\
    \ (c.isLetter)\n        {\n            c = (c.isUpper ? toLower(c) : toUpper(c));\n\
    \        }\n    }\n    return ret.idup;\n}\n/*\n Given a string, return a version\
    \ without the first and last char, so \"Hello\" yields \"ell\". The string length\
    \ will be at least 2.\n    >>> trim_both(\"Hello\")\n    \"ell\"\n    >>> trim_both(\"\
    python\")\n    \"ytho\"\n    >>> trim_both(\"coding\")\n    \"odin\"\n*/\nstring\
    \ trim_both(string string) \n    in\n    {\n        assert(string.length() > 2);\n\
    \    }\n    out (result)\n    {\n        assert(result.length() == string.length()\
    \ - 2);\n    }\n{\n    auto ret = string[1..string.length - 1];\n    return ret;\n\
    }\n/*\n Given 2 strings, return their concatenation, except omit the first char\
    \ of each. The strings will be at least length 1.\n    >>> mix_strings(\"Hello\"\
    , \"there\")\n    \"ellhere\"\n    >>> mix_strings(\"java\", \"code\")\n    \"\
    avaode\"\n    >>> mix_strings(\"shotl\", \"java\")\n    \"hotlava\"\n*/\nstring\
    \ mix_strings(string a, string b) \n    in\n    {\n        assert(a.length() >\
    \ 0);\n        assert(b.length() > 0);\n    }\n    out (result)\n    {\n     \
    \   assert(result.length() == a.length() + b.length() - 2);\n    }\n{\n    return\
    \ a[1..$] ~ b[1..$];\n}\n/*\n We'll say that a String is xy-balanced if for all\
    \ the 'x' chars in the string, there exists a 'y' char somewhere later\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe44jk3_p.d(18): Error: missing `do { ... }` after `in` or `out`\\\
    n/tmp/tmpe44jk3_p.d(47): Error: missing `do { ... }` after `in` or `out`\\n/tmp/tmpe44jk3_p.d(70):\
    \ Error: missing `do { ... }` after `in` or `out`\\n/tmp/tmpe44jk3_p.d(73): Error:\
    \ unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpe44jk3_p.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  string\
    \ flipped;\n  foreach(immutable c; string) {\n    flipped ~= isUpper(c) ? toLower(c)\
    \ : toUpper(c);\n  }\n  return flipped;\n}\nunittest\n{\n    alias candidate =\
    \ flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmlxaskt3.d(11): Error: `string` is used as a type\\n/tmp/tmpmlxaskt3.d(13):\
    \ Error: undefined identifier `isUpper`\\n/tmp/tmpmlxaskt3.d(13): Error: undefined\
    \ identifier `toLower`\\n/tmp/tmpmlxaskt3.d(13): Error: undefined identifier `toUpper`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmlxaskt3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
