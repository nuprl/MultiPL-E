language: d
name: HumanEval_27_flip_case
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  char[]\
    \ res = string.dup;\n  foreach(i,c; res)\n    if(c.isUpper)\n      res[i] = toLower(c);\n\
    \    else if(c.isLower)\n      res[i] = toUpper(c);\n  return res.idup;\n}\n/*\n\
    \ Return the average of two or more numbers.\n    >>> mean(42, 69)\n    55.5\n\
    */\nauto mean(T...)(T numbers) \n{\n  return sum(numbers) / numbers.length;\n\
    }\n/*\nCapitalize the first letter of a string.\n    >>> capitalize(\"hello\"\
    )\n    \"Hello\"\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpygyupu3r.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygyupu3r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    \n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0gmibu0t.d(9): Error: function `tmp0gmibu0t.flip_case` has no `return`
    statement, but is expected to return a value of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0gmibu0t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n    if (string.length\
    \ == 0)\n        return \"\";\n    else if (string[0].is_lower)\n        return\
    \ string[0].to_upper ~ flip_case(string[1..$]);\n    else if (string[0].is_upper)\n\
    \        return string[0].to_lower ~ flip_case(string[1..$]);\n    else\n    \
    \    return string[0] ~ flip_case(string[1..$]);\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8k2qjevk.d(10): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmp8k2qjevk.d(10): Error: declaration expected, not `if`

    /tmp/tmp8k2qjevk.d(12): Error: declaration expected, not `else`

    /tmp/tmp8k2qjevk.d(14): Error: declaration expected, not `else`

    /tmp/tmp8k2qjevk.d(16): Error: declaration expected, not `else`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8k2qjevk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    for (size_t i=0; i<string.length; i++)\n    {\n        if (isalpha(string[i]))\n\
    \        {\n            if (islower(string[i]))\n            {\n             \
    \   result~=toupper(string[i]);\n            }\n            else\n           \
    \ {\n                result~=tolower(string[i]);\n            }\n        }\n \
    \       else\n        {\n            result~=string[i];\n        }\n    }\n  \
    \  return result;\n}\n/*\nFor a given string, reverse its characters.\n    >>>\
    \ reverse(\"Hello\")\n    \"olleH\"\n*/\nstring reverse(string string) \n{\n \
    \   string result;\n    for (size_t i=string.length; i>0; i--)\n    {\n      \
    \  result~=string[i-1];\n    }\n    return result;\n}\n/*\nFor a given string,\
    \ return the first half and the second half. If the length is odd, the extra character\
    \ should go in the first half.\n    >>> halves(\"Hello\")\n    [\"Hel\", \"lo\"\
    ]\n    >>> halves(\"Hi\")\n    [\"H\", \"i\"]\n*/\nstring[] halves(string string)\
    \ \n{\n    //TODO: Figure out how to make this work with toSplit\n    string[]\
    \ result;\n    string firstHalf;\n    string secondHalf;\n    if (string.length\
    \ % 2 == 0)\n    {\n        firstHalf=string[0..string.length/2];\n        secondHalf=string[string.length/2..$];\n\
    \    }\n    else\n    {\n        firstHalf=string[0..string.length/2+1];\n   \
    \     secondHalf=string[string.length/2+1..$];\n    }\n    result~=firstHalf;\n\
    \    result~=secondHalf;\n    return result;\n}\n/*\nFor a given string, find\
    \ the first non-repeating character.\n    >>> first_non_repeating_letter(\"Hello\
    \ World\")\n    \"W\"\n    >>> first_non_repeating_letter(\"H\")\n    \"H\"\n\
    \    >>> first_non_repeating_letter(\"\")\n    null\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7e72gt_0.d(73): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7e72gt_0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = string.dup;\n    for (size_t i = 0; i < result.length; i++) \n    {\n\
    \        //result[i] = result[i].toLower;\n        if (result[i].isLower)\n  \
    \          result[i] = result[i].toUpper;\n        else if (result[i].isUpper)\n\
    \            result[i] = result[i].toLower;\n    }\n    return result;\n}\n/*\n\
    \    Give a list of numbers in a string, return the sum of numbers that are\n\
    \    greater than or equal to 10.\n    >>> sum_of_bigger_numbers([\"5\", \"14\"\
    , \"5\", \"2\", \"0\"])\n    29\n*/\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxz75ot0p.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxz75ot0p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flipped_string = \"\";\n    foreach(character; string) \n    {\n        if (character.isUpper)\
    \ \n        {\n            flipped_string ~= character.toLower;\n        }\n \
    \       else \n        {\n            flipped_string ~= character.toUpper;\n \
    \       }\n    }\n    return flipped_string;\n}\n/*\n * A palindrome is a word\
    \ that is the same written backwards, e.g. \"radar\".\n * Write a function that\
    \ tests if a string is a palindrome.\n */\nunittest\n{\n    alias candidate =\
    \ flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppc4d5bxc.d(11): Error: `string` is used as a type

    /tmp/tmppc4d5bxc.d(14): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmppc4d5bxc.d(16): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmppc4d5bxc.d(20): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppc4d5bxc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ result;\n\tforeach(char c; string)\n\t{\n\t\tif (c.isUpper)\n\t\t\tresult ~=\
    \ c.toLower;\n\t\telse if (c.isLower)\n\t\t\tresult ~= c.toUpper;\n\t\telse\n\t\
    \t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate =\
    \ flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfmki3e3.d(11): Error: `string` is used as a type

    /tmp/tmplfmki3e3.d(14): Error: no property `isUpper` for type `char`

    /tmp/tmplfmki3e3.d(15): Error: no property `toLower` for type `char`

    /tmp/tmplfmki3e3.d(16): Error: no property `isLower` for type `char`

    /tmp/tmplfmki3e3.d(17): Error: no property `toUpper` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfmki3e3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ str=\"\";\n    for(int i=0;i<string.length;i++)\n    {\n        char c=string[i];\n\
    \        if (isLower(c))\n            c=toUpper(c);\n        else if (isUpper(c))\n\
    \            c=toLower(c);\n        str+=c;\n    }\n    return str;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0t7vavxt.d(11): Error: `string` is used as a type

    /tmp/tmp0t7vavxt.d(15): Error: undefined identifier `isLower`

    /tmp/tmp0t7vavxt.d(16): Error: undefined identifier `toUpper`

    /tmp/tmp0t7vavxt.d(17): Error: undefined identifier `isUpper`

    /tmp/tmp0t7vavxt.d(18): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0t7vavxt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    auto\
    \ result = string.dup;\n    foreach(i, result) \n    {\n        if(result[i].isUpper)\
    \ \n        {\n            result[i] = result[i].toLower;\n        }\n       \
    \ else if(result[i].isLower) \n        {\n            result[i] = result[i].toUpper;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpphdpdi3v.d(12): Error: no identifier for declarator `result`

    /tmp/tmpphdpdi3v.d(12): Error: found `)` when expecting `;`

    /tmp/tmpphdpdi3v.d(23): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpphdpdi3v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ std.typecons.Tuple!(string)(\n        string.map!(toUpper)(),\n        string.map!(toLower)()\n\
    \    ).\n    map!((chars) => chars.join).\n    rotateLeft();\n}\n \n/*\nReturn\
    \ the number of words in a string.\n    >>> num_words(\"Hello world\")\n    2\n\
    \    >>> num_words(\"This is a sentence\")\n    4\n    >>> num_words(\"\")\n \
    \   0\n*/\nsize_t num_words(string string) \n{\n    return std.algorithm.count!(string,\
    \ (e) => e == ' ');\n}\n \n/*\nReturn the nth character in a string.\n    >>>\
    \ nth_char(\"hello\", 0)\n    'h'\n    >>> nth_char(\"hello\", 4)\n    'o'\n*/\n\
    char nth_char(string string, size_t n) \n{\n    return string[n];\n}\n \n/*\n\
    Return the character code of a character.\n    >>> char_code('a')\n    97\n  \
    \  >>> char_code('A')\n    65\n*/\nsize_t char_code(char character) \n{\n    return\
    \ cast(size_t)character;\n}\n \n/*\nReturn the character for a given character\
    \ code.\n    >>> code_char(97)\n    'a'\n    >>> code_char(65)\n    'A'\n*/\n\
    char code_char(size_t character_code) \n{\n    return cast(char)character_code;\n\
    }\n \n/*\nReturn the difference between two characters.\n    >>> diff_char('a',\
    \ 'A')\n    32\n    >>> diff_char('a', 'a')\n    0\n*/\nsize_t diff_char(char\
    \ char1, char char2) \n{\n    return char_code(char1) - char_code(char2);\n}\n\
    \ \n/*\nReturn the result of dividing the length of a string by n.\n    >>> len_divide(\"\
    test\", 2)\n    2\n    >>> len_divide(\"test\", 3)\n    1\n*/\nsize_t len_divide\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprw6oogcb.d(89): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprw6oogcb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ out;\n    foreach(char c; string)\n    {\n        if(c.isLower)\n          \
    \  out ~= c.toUpper;\n        else\n            out ~= c.toLower;\n    }\n   \
    \ return out;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk7swb2yc.d(11): Error: found `out` when expecting `;` following
    statement

    /tmp/tmpk7swb2yc.d(11): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpk7swb2yc.d(15): Error: found `out` instead of statement

    /tmp/tmpk7swb2yc.d(17): Error: found `out` instead of statement

    /tmp/tmpk7swb2yc.d(19): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7swb2yc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    foreach(i,\
    \ char c; string)\n    {\n        if(c.isLower)\n            string[i] = c.toUpper;\n\
    \        else if(c.isUpper)\n            string[i] = c.toLower;\n    }\n    return\
    \ string;\n}\n/*\n For a given string, remove all duplicates.\n    >>> remove_duplicates(\"\
    aabbccddee\")\n    \"abcde\"\n    >>> remove_duplicates(\"abcde\")\n    \"abcde\"\
    \n*/\nstring remove_duplicates(string str)\n{\n    bool is_there[256];\n    foreach(i,\
    \ char c; str)\n    {\n        is_there[c] = true;\n    }\n    string new_str;\n\
    \    foreach(i, char c; str)\n    {\n        if(is_there[c])\n        {\n    \
    \        new_str ~= c;\n            is_there[c] = false;\n        }\n    }\n \
    \   return new_str;\n}\n/*\n Given an array of integers and an integer n, find\
    \ the number of times \n that n occurs in the array. Do not use a for loop.\n\
    \    >>> number_of_times(3, [1, 3, 3, 2, 3, 4, 3])\n    4\n    >>> number_of_times(4,\
    \ [1, 3, 3, 2, 3, 4, 3])\n    1\n*/\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp57slvmql.d(29): Deprecation: instead of C-style syntax, use D-style
    syntax `bool[256] is_there`

    /tmp/tmp57slvmql.d(13): Error: no property `isLower` for type `char`

    /tmp/tmp57slvmql.d(14): Error: no property `toUpper` for type `char`

    /tmp/tmp57slvmql.d(15): Error: no property `isUpper` for type `char`

    /tmp/tmp57slvmql.d(16): Error: no property `toLower` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp57slvmql.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ res = \"\";\n    foreach(c; string)\n    {\n        if(isUpper(c))\n       \
    \     c = toLower(c);\n        else if(isLower(c))\n            c = toUpper(c);\n\
    \        res ~= c;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj64_e3tq.d(11): Error: `string` is used as a type

    /tmp/tmpj64_e3tq.d(14): Error: undefined identifier `isUpper`

    /tmp/tmpj64_e3tq.d(15): Error: undefined identifier `toLower`

    /tmp/tmpj64_e3tq.d(16): Error: undefined identifier `isLower`

    /tmp/tmpj64_e3tq.d(17): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj64_e3tq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flipped = \"\";\n    foreach(char c; string)\n    {\n        if(isUpper(c))\n\
    \            flipped ~= toLower(c);\n        else if(isLower(c))\n           \
    \ flipped ~= toUpper(c);\n        else\n            flipped ~= c;\n    }\n   \
    \ return flipped;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxxgcsuba.d(11): Error: `string` is used as a type

    /tmp/tmpxxgcsuba.d(14): Error: undefined identifier `isUpper`

    /tmp/tmpxxgcsuba.d(15): Error: undefined identifier `toLower`

    /tmp/tmpxxgcsuba.d(16): Error: undefined identifier `isLower`

    /tmp/tmpxxgcsuba.d(17): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxxgcsuba.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ str = \"\";\n    foreach(ch; string)\n    {\n        if(isAlpha(ch))\n     \
    \   {\n            str ~= (isUpper(ch) ? toLower(ch) : toUpper(ch));\n       \
    \ }\n        else\n        {\n            str ~= ch;\n        }\n    }\n    return\
    \ str;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsdltserz.d(11): Error: `string` is used as a type

    /tmp/tmpsdltserz.d(14): Error: undefined identifier `isAlpha`

    /tmp/tmpsdltserz.d(16): Error: undefined identifier `isUpper`

    /tmp/tmpsdltserz.d(16): Error: undefined identifier `toLower`

    /tmp/tmpsdltserz.d(16): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsdltserz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ new_string;\n\tforeach(c; string)\n\t{\n\t\tnew_string ~= (c.isUpper ? toLower(c)\
    \ : toUpper(c));\n\t}\n\treturn new_string;\n}\n/*\n Find the most frequently\
    \ occurring character in a string.\n If a string has a sequence of repeated characters,\
    \ only the first character counts.\n \n    >>> most_frequent_char(\"abcabcabc\"\
    )\n    ('a', 3)\n    \n*/\ntuple!(char, int) most_frequent_char(string string)\
    \ \n{\n\tint[] occurences;\n\tforeach(c; string)\n\t{\n\t\toccurences[c]++;\n\t\
    }\n\treturn max!((a, b) => a[1] > b[1])(occurences.byKeyValue.keys);\n}\n/*\n\
    \ Remove all white spaces in a string.\n    \n    >>> remove_whitespace(\"abcabcabc\"\
    )\n    \"abcabcabc\"\n    \n*/\nstring remove_whitespace(string string) \n{\n\t\
    return join(filter!(c => !c.isWhite)(string));\n}\n/*\n    Write a function that\
    \ takes a list and returns a\n    new list that contains all the elements of the\
    \ first list minus all the duplicates.\n*/\nT[] remove_duplicates(T)(T[] array)\
    \ \n{\n\tT[] result;\n\tforeach(a; array)\n\t{\n\t\tif(!a in result)\n\t\t{\n\t\
    \t\tresult ~= a;\n\t\t}\n\t}\n\treturn result;\n}\n/*\n For a given list of integers,\
    \ remove all the duplicates from the list.\n \n    >>> remove_duplicates([1, 2,\
    \ 3, 3, 4, 5, 5, 1])\n    [1, 2, 3, 4, 5]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppgqa02mf.d(26): Error: `tuple!(char, int)` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppgqa02mf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.toLowerCase.toUpperCase;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpraebvhs7.d(11): Error: no property `toLowerCase` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpraebvhs7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ to!string(map!(c => c.isAlpha ? c ^ 0x20 : c)(to!(dchar[])(string)));\n}\n/*\n\
    Compare a string against a mask. The mask can be either a string of equal length\
    \ or a single character.\nunittest\n{\n    alias candidate = flip_case;\n\n  \
    \  assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\"\
    );\n    assert(candidate(\"These violent delights have violent ends\") == \"tHESE\
    \ VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpludgvxot.d(13): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpludgvxot.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n    in\n\
    \    {\n        assert(string.length() > 0);\n    }\n    out (result)\n    {\n\
    \        assert(result.length() == string.length());\n    }\n{\n    ubyte[] ret\
    \ = string.dup;\n    foreach (immutable i, ref dchar c; ret)\n    {\n        if\
    \ (c.isLetter)\n        {\n            c = (c.isUpper ? toLower(c) : toUpper(c));\n\
    \        }\n    }\n    return ret.idup;\n}\n/*\n Given a string, return a version\
    \ without the first and last char, so \"Hello\" yields \"ell\". The string length\
    \ will be at least 2.\n    >>> trim_both(\"Hello\")\n    \"ell\"\n    >>> trim_both(\"\
    python\")\n    \"ytho\"\n    >>> trim_both(\"coding\")\n    \"odin\"\n*/\nstring\
    \ trim_both(string string) \n    in\n    {\n        assert(string.length() > 2);\n\
    \    }\n    out (result)\n    {\n        assert(result.length() == string.length()\
    \ - 2);\n    }\n{\n    auto ret = string[1..string.length - 1];\n    return ret;\n\
    }\n/*\n Given 2 strings, return their concatenation, except omit the first char\
    \ of each. The strings will be at least length 1.\n    >>> mix_strings(\"Hello\"\
    , \"there\")\n    \"ellhere\"\n    >>> mix_strings(\"java\", \"code\")\n    \"\
    avaode\"\n    >>> mix_strings(\"shotl\", \"java\")\n    \"hotlava\"\n*/\nstring\
    \ mix_strings(string a, string b) \n    in\n    {\n        assert(a.length() >\
    \ 0);\n        assert(b.length() > 0);\n    }\n    out (result)\n    {\n     \
    \   assert(result.length() == a.length() + b.length() - 2);\n    }\n{\n    return\
    \ a[1..$] ~ b[1..$];\n}\n/*\n We'll say that a String is xy-balanced if for all\
    \ the 'x' chars in the string, there exists a 'y' char somewhere later\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmaevgz3z.d(18): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpmaevgz3z.d(47): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpmaevgz3z.d(70): Error: missing `do { ... }` after `in` or `out`

    /tmp/tmpmaevgz3z.d(73): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmaevgz3z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  string\
    \ flipped;\n  foreach(immutable c; string) {\n    flipped ~= isUpper(c) ? toLower(c)\
    \ : toUpper(c);\n  }\n  return flipped;\n}\nunittest\n{\n    alias candidate =\
    \ flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp8l1k91y.d(11): Error: `string` is used as a type

    /tmp/tmpp8l1k91y.d(13): Error: undefined identifier `isUpper`

    /tmp/tmpp8l1k91y.d(13): Error: undefined identifier `toLower`

    /tmp/tmpp8l1k91y.d(13): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp8l1k91y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    immutable(char)[]\
    \ result;\n    foreach(immutable(char) elem; string)\n    {\n        if (isLower(elem))\n\
    \        {\n            result ~= toUpper(elem);\n        }\n        else\n  \
    \      {\n            result ~= toLower(elem);\n        }\n    }\n    return result.idup;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kuec_jg.d(14): Error: undefined identifier `isLower`

    /tmp/tmp9kuec_jg.d(16): Error: undefined identifier `toUpper`

    /tmp/tmp9kuec_jg.d(20): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kuec_jg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(char c; string)\n    {\n        if(isupper(c))\n      \
    \      result ~= tolower(c);\n        else if(islower(c))\n            result\
    \ ~= toupper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4ajhnas6.d(11): Error: `string` is used as a type

    /tmp/tmp4ajhnas6.d(14): Error: undefined identifier `isupper`

    /tmp/tmp4ajhnas6.d(15): Error: undefined identifier `tolower`

    /tmp/tmp4ajhnas6.d(16): Error: undefined identifier `islower`

    /tmp/tmp4ajhnas6.d(17): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ajhnas6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flippedString = string;\n    foreach(i, char c; flippedString)\n    {\n    \
    \    if(c.isUpper)\n        {\n            c = toLower(c);\n        }\n      \
    \  else if(c.isLower)\n        {\n            c = toUpper(c);\n        }\n   \
    \     flippedString[i] = c;\n    }\n    return flippedString;\n}\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnlrl7al0.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnlrl7al0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ result;\n\tresult.reserve(string.length);\n\tforeach(c; string)\n\t{\n\t\tif(c.isUpper)\n\
    \t\t\tresult ~= c.toLower;\n\t\telse if(c.isLower)\n\t\t\tresult ~= c.toUpper;\n\
    \t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoo7c1tbg.d(11): Error: `string` is used as a type

    /tmp/tmpoo7c1tbg.d(15): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpoo7c1tbg.d(16): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpoo7c1tbg.d(17): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmpoo7c1tbg.d(18): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoo7c1tbg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    auto\
    \ result = \"\";\n    foreach(index, c; string)\n    {\n        if (isUpper(c))\
    \ \n        {\n            result ~= toLower(c);\n        }\n        else \n \
    \       {\n            result ~= toUpper(c);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7x2d81z4.d(14): Error: undefined identifier `isUpper`

    /tmp/tmp7x2d81z4.d(16): Error: undefined identifier `toLower`

    /tmp/tmp7x2d81z4.d(20): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7x2d81z4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\treturn\
    \ std.string.toLower(string);\n}\n/*\n For a given string, return a new string\
    \ with identical characters that are all uppercase.\n    \n    >>> to_upper(\"\
    Hello\")\n    \"HELLO\"\n*/\nstring to_upper(string string) \n{\n\treturn std.string.toUpper(string);\n\
    }\n/*\nFor a given string, return a new string with identical characters that\
    \ are all lowercase.\n    \n    >>> to_lower(\"Hello\")\n    \"hello\"\n    \n\
    \ */\nstring to_lower(string string) \n{\n\treturn std.string.toLower(string);\n\
    }\n/*\n For a given string, return a new string in reverse.\n \n    >>> reverse(\"\
    Hello\")\n    \"olleH\"\n    \n */\nstring reverse(string string) \n{\n\treturn\
    \ std.string.toUpper(string);\n}\n/*\nFor a given string, return a new string\
    \ with the first and last characters swapped.\n    \n    >>> swap_first_last(\"\
    Hello\")\n    \"oellH\"\n    \n */\nstring swap_first_last(string string) \n{\n\
    \treturn std.string.toUpper(string);\n}\n/*\n For a given string, return a new\
    \ string with the first character of every word capitalized and all other characters\
    \ lowercase.\n \n    >>> capitalized(\"hello world\")\n    \"Hello World\"\n \
    \   \n */\nstring capitalized(string string) \n{\n\treturn std.string.toUpper(string);\n\
    }\n/*\n For a given string, return a tuple with the first and last characters.\n\
    \ \n    >>> first_last(\"Hello\")\n    ('H', 'o')\n    \n */\ntuple!(char, char)\
    \ first_last(string string) \n{\n\treturn tuple!(char, char)(string[0], string[$-1]);\n\
    }\n/*\n For a given string, return a tuple with the first four and last four characters.\
    \ If the string is less than eight characters long, return None.\n \n    >>> first_last_four(\"\
    Hello\")\n    ('H', 'o')\n    \n    >>> first_last_four(\"Hello World\")\n   \n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8wihx57e.d(78): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8wihx57e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ ret = to!string(string);\n    for (int i = 0; i < ret.length; i++) \n    {\n\
    \        ret[i] = isupper(ret[i]) ? tolower(ret[i]) : toupper(ret[i]);\n    }\n\
    \    return ret;\n}\n/*\n For a given string and index, return the char.\n   \
    \ >>> char_at(\"Hello\", 1)\n    'e'\n*/\nchar char_at(string string, int index)\
    \ \n{\n    return string[index];\n}\n/*\n Given a string, return the amount of\
    \ characters.\n    >>> len(\"Hello\")\n    5\n*/\nsize_t len(string string) \n\
    {\n    return string.length;\n}\n/*\n Given a string, return the index of the\
    \ character.\n    >>> find(\"Hello\", 'e')\n    1\n*/\nsize_t find(string string,\
    \ char character) \n{\n    size_t idx = string.find(character);\n    return idx;\n\
    }\n/*\n Given a string, return the index of the last character.\n    >>> rfind(\"\
    Hello\", 'l')\n    3\n*/\nsize_t rfind(string string, char character) \n{\n  \
    \  size_t idx = string.rfind(character);\n    return idx;\n}\n/*\n Given a string,\
    \ return a slice of the string.\n    >>> slice(\"Hello\", 0, 1)\n    \"He\"\n\
    */\nstring slice(string string, size_t left_index, size_t right_index) \n{\n \
    \   string ret = to!string(string);\n    return ret[left_index..right_index];\n\
    }\n/*\n Given a string, return a slice of the string.\n    >>> slice(\"Hello\"\
    , 1)\n    \"ello\"\n*/\nstring slice(string string, size_t left_index) \n{\n \
    \   string ret = to!string(string);\n    return ret[left_index..ret.length];\n\
    }\n/*\n Given a string, return the first char.\n    >>> head(\"Hello\")\n    'H'\n\
    */\nchar head(string string) \n{\n    return string[0];\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdbu5biwn.d(11): Error: `string` is used as a type

    /tmp/tmpdbu5biwn.d(11): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpdbu5biwn.d(63): Error: `string` is used as a type

    /tmp/tmpdbu5biwn.d(63): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpdbu5biwn.d(73): Error: `string` is used as a type

    /tmp/tmpdbu5biwn.d(73): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdbu5biwn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\treturn\
    \ string.map!(a => isAlpha(a) ? toLower(a) : toUpper(a));\n}\nunittest\n{\n  \
    \  alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvd8qyk51.d(11): Error: no property `map` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvd8qyk51.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string.transform!q{\
    \ to!string(q{ to!char(q{ isLetter(q{ to!int(q{}); }) ? to!int(q{ to!char(q{})\
    \ ^ ' '; }) : to!int(q{}); }) }); }.idup;\n    return string;\n}\n/*\n For a given\
    \ positive number, return the sum of all positive numbers less than or equal to\
    \ the number.\n    >>> sum_numbers(3)\n    6\n    >>> sum_numbers(5)\n    15\n\
    */\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjm9m41pq.d(11): Error: no property `transform` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjm9m41pq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    foreach(dchar c; string)\n    {\n        if(c.isLower)\n\
    \            result ~= toUpper(c);\n        else if(c.isUpper)\n            result\
    \ ~= toLower(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\n/*\nGiven a string, return the number of characters that are repeated consecutively.\n\
    \    >>> count_repeated_chars(\"aaabbbccc\")\n    3\n    >>> count_repeated_chars(\"\
    abcd\")\n    0\n    >>> count_repeated_chars(\"aabb\")\n    2\n    >>> count_repeated_chars(\"\
    aaabbbbcc\")\n    6\n    >>> count_repeated_chars(\"aa\")\n    2\n    >>> count_repeated_chars(\"\
    \")\n    0\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpit9ew4a8.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpit9ew4a8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ map!to!char(string, c => isLower(c) ? toUpper(c) : toLower(c));\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnp3ol2vc.d(11): Error: multiple ! arguments are not allowed

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnp3ol2vc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  return\
    \ to!string(map!( (c) => to!char(c.tolower).toupper)(string));\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5hnw41w2.d(11): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5hnw41w2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  string\
    \ result = \"\";\n  for (auto i = 0; i < string.length; i++) \n  {\n    if (is_lower(string[i]))\
    \ \n    {\n      result ~= to_upper(string[i]);\n    } \n    else \n    {\n  \
    \    result ~= to_lower(string[i]);\n    }\n  }\n  return result;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2f3d_nr2.d(11): Error: `string` is used as a type

    /tmp/tmp2f3d_nr2.d(14): Error: undefined identifier `is_lower`

    /tmp/tmp2f3d_nr2.d(16): Error: undefined identifier `to_upper`

    /tmp/tmp2f3d_nr2.d(20): Error: undefined identifier `to_lower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2f3d_nr2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tint\
    \ len = string.length;\n\tstring temp;\n\ttemp.length = len;\n\t\n\tforeach(i,\
    \ c; string)\n\t{\n\t\tif (c.isAlpha)\n\t\t{\n\t\t\tif (c.isUpper)\n\t\t\t{\n\t\
    \t\t\ttemp[i] = c.toLower;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttemp[i] = c.toUpper;\n\
    \t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp[i] = c;\n\t\t}\n\t}\n\treturn temp;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5t1ey095.d(11): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmp5t1ey095.d(12): Error: `string` is used as a type

    /tmp/tmp5t1ey095.d(17): Error: no property `isAlpha` for type `immutable(char)`

    /tmp/tmp5t1ey095.d(19): Error: no property `isUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5t1ey095.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.transformed!(\n        (a => isUpper(a) ? toLower(a) : toUpper(a))\n\
    \    );\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbfhqam54.d(11): Error: no property `transformed` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbfhqam54.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(c; string)\n    {\n        result ~= isUpper(c) ? toLower(c)\
    \ : toUpper(c);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_0fqvdsn.d(11): Error: `string` is used as a type

    /tmp/tmp_0fqvdsn.d(14): Error: undefined identifier `isUpper`

    /tmp/tmp_0fqvdsn.d(14): Error: undefined identifier `toLower`

    /tmp/tmp_0fqvdsn.d(14): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_0fqvdsn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    char[]\
    \ result = new char[string.length];\n    for (size_t i = 0; i < string.length;\
    \ i++) \n    {\n        if (char.isUpper(string[i]))\n            result[i] =\
    \ char.toLower(string[i]);\n        else\n            result[i] = char.toUpper(string[i]);\n\
    \    }\n    return string(result);\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp69ncxc7l.d(14): Error: no property `isUpper` for type `char`

    /tmp/tmp69ncxc7l.d(15): Error: no property `toLower` for type `char`

    /tmp/tmp69ncxc7l.d(17): Error: no property `toUpper` for type `char`

    /tmp/tmp69ncxc7l.d(19): Error: function expected before `()`, not `string` of
    type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp69ncxc7l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ temp;\n    foreach(inout c; string)\n    {\n        if (isAlpha(c))\n      \
    \  {\n            if (isUpper(c))\n            {\n                c = toLower(c);\n\
    \            }\n            else\n            {\n                c = toUpper(c);\n\
    \            }\n        }\n    }\n    return string;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpadw63_ws.d(11): Error: `string` is used as a type

    /tmp/tmpadw63_ws.d(14): Error: undefined identifier `isAlpha`

    /tmp/tmpadw63_ws.d(16): Error: undefined identifier `isUpper`

    /tmp/tmpadw63_ws.d(18): Error: undefined identifier `toLower`

    /tmp/tmpadw63_ws.d(22): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpadw63_ws.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.map!(\"a\" ~ \"z\" ? to!string(to!int(toupper(ch))): \"A\" ~ \"Z\" ?\
    \ to!string(to!int(tolower(ch))): ch.to!string)();\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpej85at4m.d(11): Error: no property `map` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpej85at4m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(c; string) \n    {\n        if (isUpper(c)) \n        {\n\
    \            result ~= toLower(c);\n        } \n        else if (isLower(c)) \n\
    \        {\n            result ~= toUpper(c);\n        } \n        else \n   \
    \     {\n            result ~= c;\n        }\n    }\n    return result;\n}\n/*\n\
    \ For a given string, keep only the characters in the given `keep` string.\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw6dr0noa.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6dr0noa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    for (char c : string)\n    {\n        auto lower = toLower(c);\n\
    \        if (lower != c)\n            result ~= lower;\n        else\n       \
    \     result ~= toUpper(c);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpucya089i.d(12): Error: semicolon expected, not `:`

    /tmp/tmpucya089i.d(12): Error: expression expected, not `:`

    /tmp/tmpucya089i.d(12): Error: found `string` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpucya089i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    int string_len = string.length;\n    for (int i = 0; i <\
    \ string_len; i++)\n    {\n        if (isupper(string[i]))\n        {\n      \
    \      result ~= tolower(string[i]);\n        }\n        else if (islower(string[i]))\n\
    \        {\n            result ~= toupper(string[i]);\n        }\n        else\
    \ \n        {\n            result ~= string[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Check to see if a string is a permutation of a palindrome.\n\
    \    >>> is_palindrome_permutation(\"civic\")\n    True\n    >>> is_palindrome_permutation(\"\
    ivicc\")\n    True\n    >>> is_palindrome_permutation(\"civil\")\n    False\n\
    \    >>> is_palindrome_permutation(\"livci\")\n    False\n*/\nunittest\n{\n  \
    \  alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0jt7i5d0.d(11): Error: `string` is used as a type

    /tmp/tmp0jt7i5d0.d(12): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmp0jt7i5d0.d(15): Error: undefined identifier `isupper`

    /tmp/tmp0jt7i5d0.d(17): Error: undefined identifier `tolower`

    /tmp/tmp0jt7i5d0.d(19): Error: undefined identifier `islower`

    /tmp/tmp0jt7i5d0.d(21): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jt7i5d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tforeach(c;string)\n\
    \t{\n\t\tif (c.isUpper)\n\t\t\tc = c.toLower;\n\t\telse if (c.isLower)\n\t\t\t\
    c = c.toUpper;\n\t}\n\treturn string;\n}\n/*\nReturns sorted tuple of character\
    \ frequencies of given string.\n >>> sort_char_freq(\"abbccc\")\n ('c', 3, 'b',\
    \ 2, 'a', 1)\n*/\nauto sort_char_freq(string string)\n{\n\tint[string] counts;\n\
    \tforeach(c;string)\n\t\tcounts[c]++;\n\treturn counts.byPair.sort!((x,y)=>x.value>y.value);\n\
    }\n/*\nRotate given list by n number of times.\n>>> rotate_list([1,2,3,4,5],2)\n\
    [3, 4, 5, 1, 2]\n*/\nauto rotate_list(T)(T[] list,int n)\n{\n\tif (n>0)\n\t\t\
    return list[n..$].array ~ list[0..n].array;\n\telse if (n<0)\n\t\treturn list[$+n..$].array\
    \ ~ list[0..$+n].array;\n\telse\n\t\treturn list;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgte3yp8s.d(13): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpgte3yp8s.d(14): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpgte3yp8s.d(15): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmpgte3yp8s.d(16): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmpgte3yp8s.d(27): Error: variable `string` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgte3yp8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\treturn\
    \ map!(toLower)(string);\n}\n// Test function\nunittest \n{\n\tassert(flip_case(\"\
    Hello\") == \"hELLO\");\n}\nunittest\n{\n    alias candidate = flip_case;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpawffgng0.d(11): Error: template instance `map!toLower` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpawffgng0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(c; string) \n    {\n        auto flipped = to!char(c -\
    \ ('a' - 'A') * islower(c) + ('a' - 'A') * isupper(c));\n        result ~= flipped;\n\
    \    }\n    return result;\n}\n \n \n/*\n    Given a set of words, flip the first\
    \ character of each word to lowercase.\n    >>> flip_first_char([\"Hello\", \"\
    World\"])\n    [\"hello\", \"world\"]\n*/\nstring[] flip_first_char(string[] words)\
    \ \n{\n    string[] result;\n    foreach(word; words) \n    {\n        result\
    \ ~= to!string(word[0] + 32) ~ word[1 .. $];\n    }\n    return result;\n}\n \n\
    /*\n    Given a set of words, flip the first character of each word to uppercase.\n\
    \    >>> flip_first_char([\"hello\", \"world\"])\n    [\"Hello\", \"World\"]\n\
    */\nstring[] flip_first_char_to_upper(string[] words) \n{\n    string[] result;\n\
    \    foreach(word; words) \n    {\n        result ~= to!string(word[0] - 32) ~\
    \ word[1 .. $];\n    }\n    return result;\n}\n \nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkh4icst.d(11): Error: `string` is used as a type

    /tmp/tmpfkh4icst.d(14): Error: template instance `to!char` template `to` is not
    defined, did you mean No?

    /tmp/tmpfkh4icst.d(31): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpfkh4icst.d(46): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkh4icst.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    enum\
    \ char[] res = new char[string.length];\n    foreach(ch;string)\n    {\n     \
    \   if (isLower(ch)) res ~= ch.toUpper;\n        else res ~= ch.toLower;\n   \
    \ }\n    return string(res);\n}\n/*\n Given a list of tuples representing student\
    \ names and grades,\n return a list of tuples sorted by the student's grade, highest\
    \ to lowest.\n    >>> sort_grades([(\"Steve\", 88), (\"Amy\", 75), (\"Carol\"\
    , 95)])\n    [(\"Carol\", 95), (\"Steve\", 88), (\"Amy\", 75)]\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcg9b0r4j.d(19): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcg9b0r4j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ std.algorithm.map!((c) {\n        import std.ascii;\n        return isLower(c)\
    \ ? toupper(c) : tolower(c);\n    })(string);\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg43hjjo8.d(11): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg43hjjo8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ temp;\n    foreach(int i,char c; string)\n    {\n        if (isLower(c)) {\n\
    \            temp ~= toupper(c);\n        } else {\n            temp ~= tolower(c);\n\
    \        }\n    }\n    return temp;\n}\n// \"BONUS\"\n/*\n For a given string,\
    \ do the above and also reverse the order of the characters.\n    >>> flip_case_reverse(\"\
    Hello\")\n    \"OLLEh\"\n    >>> flip_case_reverse(\"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\"\
    )\n    \"Z,Y,X,W,V,U,T,S,R,Q,P,O,N,M,L,K,J,I,H,G,F,E,D,C,B,A\"\n*/\nstring flip_case_reverse(string\
    \ string) \n{\n    string temp;\n    foreach(int i,char c; string)\n    {\n  \
    \      if (isLower(c)) {\n            temp = toupper(c) ~ temp;\n        } else\
    \ {\n            temp = tolower(c) ~ temp;\n        }\n    }\n    return temp;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvfvbdryb.d(11): Error: `string` is used as a type

    /tmp/tmpvfvbdryb.d(14): Error: undefined identifier `isLower`

    /tmp/tmpvfvbdryb.d(15): Error: undefined identifier `toupper`

    /tmp/tmpvfvbdryb.d(17): Error: undefined identifier `tolower`

    /tmp/tmpvfvbdryb.d(32): Error: `string` is used as a type

    /tmp/tmpvfvbdryb.d(35): Error: undefined identifier `isLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvfvbdryb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ str = \"\";\n    foreach(char ch; string) \n    {\n        str ~= isUpper(ch)\
    \ ? toLower(ch) : toUpper(ch);\n    }\n    return str;\n}\n/*\n2) A robot moves\
    \ in a plane starting from the original point (0,0). The robot can move toward\
    \ UP, DOWN, LEFT and RIGHT with a given steps. The trace of robot movement is\
    \ shown as the following:\nUP 5\nDOWN 3\nLEFT 3\nRIGHT 2\n?\nThe numbers after\
    \ the direction are steps. Please write a program to compute the distance from\
    \ current position after a sequence of movement and original point. If the distance\
    \ is a float, then just print the nearest integer.\nExample:\nIf the following\
    \ tuples are given as input to the program:\nUP 5\nDOWN 3\nLEFT 3\nRIGHT 2\nThen,\
    \ the output of the program should be:\n2\n*/\nfloat trace_robot(string[] directions)\
    \ \n{\n    float x = 0, y = 0;\n    foreach(string direction; directions) \n \
    \   {\n        string[] dirs = direction.split;\n        string dir = dirs[0];\n\
    \        int steps = to!int(dirs[1]);\n        if(dir == \"UP\") \n        {\n\
    \            y += steps;\n        }\n        else if(dir == \"DOWN\") \n     \
    \   {\n            y -= steps;\n        }\n        else if(dir == \"LEFT\") \n\
    \        {\n            x -= steps;\n        }\n        else if(dir == \"RIGHT\"\
    ) \n        {\n            x += steps;\n        }\n    }\n    return cast(int)\
    \ round(sqrt(x * x + y * y));\n}\n/*\n3) Write a program to compute the frequency\
    \ of the words from the input. The output should output after sorting the key\
    \ alphanumerically. \nSuppose the following input is supplied to the program:\n\
    New to Python or choosing between Python 2 and Python 3? Read Python 2 or Python\
    \ 3.\nThen, the output should be:\n2:2\n3.:1\n3?:1\nNew:1\nPython:5\nRead:1\n\
    and:1\nbetween:1\nchoosing\nunittest\n{\n    alias candidate = flip_case;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpca5b_4gm.d(62): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpca5b_4gm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(c; string) \n    {\n        result ~= isUpper(c) ? toLower(c)\
    \ : toUpper(c);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpahgzyrkn.d(11): Error: `string` is used as a type

    /tmp/tmpahgzyrkn.d(14): Error: undefined identifier `isUpper`

    /tmp/tmpahgzyrkn.d(14): Error: undefined identifier `toLower`

    /tmp/tmpahgzyrkn.d(14): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpahgzyrkn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ ret;\n    foreach(c; string)\n    {\n        if (c.isLower)\n            ret\
    \ ~= c.toUpper;\n        else\n            ret ~= c.toLower;\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmgasc65i.d(11): Error: `string` is used as a type

    /tmp/tmpmgasc65i.d(14): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmpmgasc65i.d(15): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmpmgasc65i.d(17): Error: no property `toLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmgasc65i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ str = to!string(Unqual!(typeof(string))(string));\n    return string(str[0..str.length].map!char(a\
    \ =>\n    {\n        if (isLower(a))\n            return toUpper(a);\n       \
    \ else if (isUpper(a))\n            return toLower(a);\n        else\n       \
    \     return a;\n    }));\n}\nunittest\n{\n    alias candidate = flip_case;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj0qjp7w5.d(11): Error: `string` is used as a type

    /tmp/tmpj0qjp7w5.d(11): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj0qjp7w5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tchar[]\
    \ out;\n\tout.length = string.length;\n\tforeach(i, c; string)\n\t{\n\t\tif(c.isLower())\n\
    \t\t\tout[i] = c.toUpper();\n\t\telse if(c.isUpper())\n\t\t\tout[i] = c.toLower();\n\
    \t\telse\n\t\t\tout[i] = c;\n\t}\n\treturn out.idup;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_aclmdak.d(11): Error: no identifier for declarator `char[]`

    /tmp/tmp_aclmdak.d(11): Error: found `out` instead of statement

    /tmp/tmp_aclmdak.d(12): Error: found `out` instead of statement

    /tmp/tmp_aclmdak.d(16): Error: found `out` instead of statement

    /tmp/tmp_aclmdak.d(18): Error: found `out` instead of statement

    /tmp/tmp_aclmdak.d(20): Error: found `out` instead of statement

    /tmp/tmp_aclmdak.d(22): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_aclmdak.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(c; string) \n    {\n        result ~= isupper(c) ? tolower(c)\
    \ : toupper(c);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyz5p1uq0.d(11): Error: `string` is used as a type

    /tmp/tmpyz5p1uq0.d(14): Error: undefined identifier `isupper`

    /tmp/tmpyz5p1uq0.d(14): Error: undefined identifier `tolower`

    /tmp/tmpyz5p1uq0.d(14): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyz5p1uq0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flipped;\n    foreach(char c; string)\n    {\n        flipped ~= c.isUpper ?\
    \ toLower(c) : toUpper(c);\n    }\n    return flipped;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw85ck0a2.d(11): Error: `string` is used as a type

    /tmp/tmpw85ck0a2.d(14): Error: no property `isUpper` for type `char`

    /tmp/tmpw85ck0a2.d(14): Error: undefined identifier `toLower`

    /tmp/tmpw85ck0a2.d(14): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw85ck0a2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n    return\
    \ string.translate(string(zip(['a'..'z'],['A'..'Z'])));\n\t\t\nunittest\n{\n \
    \   assert(flip_case(\"Hello\") == \"hELLO\");\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpahxpxenp.d(10): Error: semicolon expected following function declaration

    /tmp/tmpahxpxenp.d(10): Error: unexpected `(` in declarator

    /tmp/tmpahxpxenp.d(10): Error: unexpected `(` in declarator

    /tmp/tmpahxpxenp.d(10): Error: unexpected `(` in declarator

    /tmp/tmpahxpxenp.d(10): Error: basic type expected, not `[`

    /tmp/tmpahxpxenp.d(10): Error: basic type expected, not `[`

    /tmp/tmpahxpxenp.d(10): Error: no identifier for declarator `string.translate(string(zip(_error_[''a''
    .. ''z''], _error_[''A'' .. ''Z''])))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpahxpxenp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.map!(toLower).join;\n}\n/*\n Multiply every element in a list by a number\
    \ (using the `*` operator).\n    >>> mult_by([1, 2, 3], 2)\n    [2, 4, 6]\n*/\n\
    template map(alias fun)\n{\n    auto map(alias fun, Range)(Range r)\n    {\n \
    \       return zip(r, r.map!fun);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpquod7jfn.d(11): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpquod7jfn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ to!string(map!((c) => c.isUpper ? toLower(c) : toUpper(c))(string));\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjdtic_5_.d(11): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjdtic_5_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ new_string;\n\tfor (in inout char character; string)\n\t{\n\t\tif (is_alphabetic(character))\n\
    \t\t{\n\t\t\tif (is_lower(character))\n\t\t\t{\n\t\t\t\tcharacter = to_upper(character);\n\
    \t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcharacter = to_lower(character);\n\t\t\t\
    }\n\t\t}\n\t\tnew_string ~= character;\n\t}\n\treturn new_string;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf663dnxq.d(12): Error: found `in` instead of statement

    /tmp/tmpf663dnxq.d(12): Error: found `)` when expecting `;` following `for` condition

    /tmp/tmpf663dnxq.d(27): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf663dnxq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ s = \"\";\n    foreach(c; string)\n    {\n        if(c.isUpper)\n          \
    \  s ~= c.toLower;\n        else if(c.isLower)\n            s ~= c.toUpper;\n\
    \        else\n            s ~= c;\n    }\n    return s;\n}\nassert(flip_case(\"\
    Hello\") == \"hELLO\");\n/*\nGiven a string, return true if the string is \"palindrome\"\
    \ or false if it is not.\n    >>> is_palindrome(\"abcde\")\n    False\n*/\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp67sd3nl6.d(23): Error: declaration expected, not `assert`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp67sd3nl6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.replace(`a` .. `z`, upcase).replace(`A` .. `Z`, downcase);\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeal36rfz.d(11): Error: found `..` when expecting `,`

    /tmp/tmpeal36rfz.d(11): Error: found `..` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeal36rfz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    char[]\
    \ new_string = new char[string.length];\n    foreach(char c; string)\n    {\n\
    \        if(c.isUpper)\n        {\n            new_string ~= c.toLower;\n    \
    \    }\n        else\n        {\n            new_string ~= c.toUpper;\n      \
    \  }\n    }\n    return to!string(new_string);\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkvnv_zpr.d(14): Error: no property `isUpper` for type `char`

    /tmp/tmpkvnv_zpr.d(16): Error: no property `toLower` for type `char`

    /tmp/tmpkvnv_zpr.d(20): Error: no property `toUpper` for type `char`

    /tmp/tmpkvnv_zpr.d(23): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkvnv_zpr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.map!((char c) => (char)tolower(c)).idup;\n}\n/*\n Function to determine\
    \ if a string is a palindrome\n    >>> is_palindrome(\"racecar\")\n    true\n\
    \    >>> is_palindrome(\"hello\")\n    false\n*/\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp02j4q129.d(11): Error: C style cast illegal, use `cast(char)tolower(c)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp02j4q129.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(c; string)\n    {\n        result ~= isUpper(c) ? toLower(c)\
    \ : toUpper(c);\n    }\n    return result;\n}\n/*\n Given a string that doesn't\
    \ contain spaces, take the last n characters of the string and insert a space\
    \ in between them.\n    >>> reverse_word(\"hello\", 2)\n    \"hll eo\"\n    >>>\
    \ reverse_word(\"world\", 1)\n    \"wold r\"\n    >>> reverse_word(\"world\",\
    \ 5)\n    \"world\"\n*/\nstring reverse_word(string string, size_t n) \n{\n  \
    \  if (n >= string.length)\n        return string;\n    \n    auto result = string[$-n..$];\n\
    \    result ~= \" \";\n    result ~= string[0..$-n];\n    return result;\n}\n\
    /*\nGiven a string, insert a space between each word.\n    >>> separate_words(\"\
    everything is going to be okay\")\n    \"everything is going to be okay\"\n  \
    \  >>> separate_words(\"everythingisgoingtobeokay\")\n    \"everything is going\
    \ to be okay\"\n*/\nstring separate_words(string string) \n{\n    // bool is_letter(dchar\
    \ c) {\n    //    return ranges.isDigit(c) || ranges.isLetter(c);\n    // }\n\
    \    string result;\n    foreach(c; string)\n    {\n        if (ranges.isDigit(c)\
    \ || ranges.isLetter(c))\n            result ~= c;\n        else\n           \
    \ result ~= \" \";\n    }\n    return result;\n}\n/*\nFor a given string, sum\
    \ the ASCII value of all characters.\n    >>> sum_ascii(\"Hello, World!\")\n \
    \   1168\n*/\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp025o_a5b.d(11): Error: `string` is used as a type

    /tmp/tmp025o_a5b.d(14): Error: undefined identifier `isUpper`

    /tmp/tmp025o_a5b.d(14): Error: undefined identifier `toLower`

    /tmp/tmp025o_a5b.d(14): Error: undefined identifier `toUpper`

    /tmp/tmp025o_a5b.d(49): Error: `string` is used as a type

    /tmp/tmp025o_a5b.d(52): Error: undefined identifier `ranges`

    /tmp/tmp025o_a5b.d(52): Error: undefined identifier `ranges`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp025o_a5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.map!(x => x.isUpper ? toLower(x) : toUpper(x));\n}\n/*\nReturn the length\
    \ of the longest word in a sentence.\n    >>> long_word(\"Create a list of the\
    \ longest word in this phrase\")\n    7\n*/\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2o4hvfx9.d(11): Error: no property `map` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2o4hvfx9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ r;\n    foreach(c; string)\n    {\n        if (isUpper(c))\n            r ~=\
    \ toLower(c);\n        else\n            r ~= toUpper(c);\n    }\n    return r;\n\
    }\nunittest \n{\n    assert(flip_case(\"Hello\") == \"hELLO\");\n}\n//    \n//\n\
    /*\n Given an array of integers, return true if the array contains an odd number\
    \ of elements, or false if not.\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz_lyz4bv.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_lyz4bv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ str = \"\";\n    foreach(c; string) \n    {\n        if (c.isUpper) \n     \
    \   {\n            str ~= c.toLower;\n        } \n        else if (c.isLower)\
    \ \n        {\n            str ~= c.toUpper;\n        } \n        else \n    \
    \    {\n            str ~= c;\n        }\n    }\n    return str;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzi_ttnlp.d(11): Error: `string` is used as a type

    /tmp/tmpzi_ttnlp.d(14): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpzi_ttnlp.d(16): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpzi_ttnlp.d(18): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmpzi_ttnlp.d(20): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzi_ttnlp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ dchar.toLower(string);\n}\n/*\n Given two strings, check if they are one edit\
    \ away (or zero edits away).\n One edit away:\n   - Insert a character\n   - Remove\
    \ a character\n   - Replace a character\n   \n    >>> one_away(\"pale\", \"ple\"\
    )\n    True\n    >>> one_away(\"pales\", \"pale\")\n    True\n    >>> one_away(\"\
    pale\", \"bale\")\n    True\n    >>> one_away(\"pale\", \"bake\")\n    False\n\
    */\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwy98ozjh.d(11): Error: no property `toLower` for type `dchar`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwy98ozjh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    size_t\
    \  length = string.length;\n    char[] c_string = to!(char[])(string);\n    foreach(int\
    \ i; 0 .. length) \n    {\n        if(c_string[i] <= 'Z' && c_string[i] >= 'A')\
    \ \n        {\n            c_string[i] = 'a' + (c_string[i] - 'A');\n        }\
    \ \n        else if(c_string[i] <= 'z' && c_string[i] >= 'a') \n        {\n  \
    \          c_string[i] = 'A' + (c_string[i] - 'a');\n        }\n    }\n    return\
    \ from(c_string);\n}\n// std.algorithm.sort()\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp05uam2go.d(12): Error: template instance `to!(char[])` template
    `to` is not defined, did you mean No?

    /tmp/tmp05uam2go.d(13): Error: cannot implicitly convert expression `length` of
    type `ulong` to `int`

    /tmp/tmp05uam2go.d(24): Error: undefined identifier `from`, did you mean function
    `fdim`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05uam2go.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    //Your\
    \ code goes here\n    string[] array = string.split();\n    string result = \"\
    \";\n    foreach(var letter; array) {\n        if(letter.isUpper()) {\n      \
    \      result ~= letter.toLower();\n        } else {\n            result ~= letter.toUpper();\n\
    \        }\n    }\n    return result;\n}\n/*\n    For a given string, return the\
    \ number of times the character 'o' occurs in the string.\n    >>> count_o(\"\
    Hello World\")\n    2\n*/\nunittest\n{\n    alias candidate = flip_case;\n\n \
    \   assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\"\
    );\n    assert(candidate(\"These violent delights have violent ends\") == \"tHESE\
    \ VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6f1geyaa.d(12): Error: `string` is used as a type

    /tmp/tmp6f1geyaa.d(12): Error: no property `split` for type `string`

    /tmp/tmp6f1geyaa.d(13): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6f1geyaa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    foreach(character; string)\n    {\n        if(character.isUpper)\n\
    \        {\n            result ~= character.toLower;\n        }\n        else\
    \ if(character.isLower)\n        {\n            result ~= character.toUpper;\n\
    \        }\n        else\n        {\n            result ~= character;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvqhsxpmg.d(11): Error: `string` is used as a type

    /tmp/tmpvqhsxpmg.d(14): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpvqhsxpmg.d(16): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpvqhsxpmg.d(18): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmpvqhsxpmg.d(20): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvqhsxpmg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    foreach(char char; string)\n    {\n        result ~= (isUpper(char)\
    \ ? toLower(char) : toUpper(char));\n    }\n    return result;\n}\n/*\n Given\
    \ an input string and a word, find the first instance of that word in the string.\n\
    \    >>> index_word(\"Hello World\", \"World\")\n    6\n    >>> index_word(\"\
    A wolf in sheep's clothing\", \"wolf\")\n    2\n*/\nsize_t index_word(string input,\
    \ string word) \n{\n    return input.indexOf(word);\n}\n/*\nFor a given string,\
    \ count the number of words.\n    >>> count_words(\"One two three\")\n    3\n\
    \    >>> count_words(\"Jules says hi\")\n    3\n    >>> count_words(\"\")\n  \
    \  0\n*/\nsize_t count_words(string input) \n{\n    // TODO: add counting logic\n\
    \    size_t count = 0;\n    foreach(char char; input)\n    {\n        count +=\
    \ (char == ' ' ? 1 : 0);\n    }\n    return count + 1;\n}\n/*\nFor a given string,\
    \ remove all exclamation marks.\n    >>> remove_exclamation_marks(\"Hello World!\"\
    )\n    \"Hello World\"\n    >>> remove_exclamation_marks(\"Hello World!!!\")\n\
    \    \"Hello World\"\n*/\nstring remove_exclamation_marks(string input) \n{\n\
    \    string result = \"\";\n    foreach(char char; input)\n    {\n        result\
    \ ~= (char == '!' ? ' ' : char);\n    }\n    return result;\n}\n/*\nFor a given\
    \ string, remove all repeated letters.\n    >>> remove_repeated_letters(\"aab\"\
    )\n    \"ab\"\n    >>> remove_repeated_letters(\"mississippi\")\n    \"misp\"\n\
    */\nstring remove_repeated_letters(string input) \n{\n    string result = \"\"\
    ;\n    foreach(char char; input)\n    {\n        if(result.indexOf(char) == -1)\n\
    \        {\n            result ~= char;\n        }\n    }\n   \nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_mylg653.d(12): Error: no identifier for declarator `char`

    /tmp/tmp_mylg653.d(12): Error: found `char` when expecting `;`

    /tmp/tmp_mylg653.d(12): Error: expression expected, not `;`

    /tmp/tmp_mylg653.d(12): Error: found `string` when expecting `)`

    /tmp/tmp_mylg653.d(12): Error: found `)` instead of statement

    /tmp/tmp_mylg653.d(16): Error: declaration expected, not `return`

    /tmp/tmp_mylg653.d(17): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_mylg653.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ ret;\n    foreach(c; string) \n    {\n        if (c.isUpper)\n            ret\
    \ ~= c.toLower;\n        else\n            ret ~= c.toUpper;\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph3nqvb52.d(11): Error: `string` is used as a type

    /tmp/tmph3nqvb52.d(14): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmph3nqvb52.d(15): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmph3nqvb52.d(17): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph3nqvb52.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    \n\
    \    string string_flipped = \"\";\n    foreach(i, c; string)\n    {\n       \
    \ if (c.is_lower())\n        {\n            string_flipped ~= c.to_upper();\n\
    \        }\n        else if (c.is_upper())\n        {\n            string_flipped\
    \ ~= c.to_lower();\n        }\n        else\n        {\n            string_flipped\
    \ ~= c;\n        }\n    }\n    return string_flipped;\n    \n}\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp74rp8lue.d(12): Error: `string` is used as a type

    /tmp/tmp74rp8lue.d(15): Error: no property `is_lower` for type `immutable(char)`

    /tmp/tmp74rp8lue.d(17): Error: no property `to_upper` for type `immutable(char)`

    /tmp/tmp74rp8lue.d(19): Error: no property `is_upper` for type `immutable(char)`

    /tmp/tmp74rp8lue.d(21): Error: no property `to_lower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp74rp8lue.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    import\
    \ std.conv;\n    import std.utf;\n    import std.algorithm;\n    char[] result;\n\
    \    foreach(c; string)\n    {\n        if(c.isUpper)\n        {\n           \
    \ result ~= c.toLower;\n        }\n        else if(c.isLower)\n        {\n   \
    \         result ~= c.toUpper;\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result.to!string;\n}\nunittest\n\
    {\n    assert(flip_case(\"Hello\") == \"hELLO\");\n}\n/*\n For a given string,\
    \ how many words are in the string?\n    >>> word_count(\"Hello\")\n    1\n  \
    \  >>> word_count(\"Hello, world!\")\n    2\n*/\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfw018col.d(17): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpfw018col.d(19): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpfw018col.d(21): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmpfw018col.d(23): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmpfw018col.d(30): Error: template instance `to!(string)` does not match
    template declaration `to(T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfw018col.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.transform(toupper);\n}\n \n/*\n For a given string, return a string of\
    \ all the numbers that are present.\n    >>> extract_numbers(\"Phone number: 503-555-1212\"\
    )\n    \"5035551212\"\n*/\nstring extract_numbers(string string) \n{\n    // TODO\n\
    \    return \"\";\n}\n \n/*\n Similar to extract_numbers, but include a minus\
    \ sign prefix if a number is negative.\n     >>> extract_numbers(\"I have -2 oranges\"\
    )\n     \"-2\"\n*/\nstring extract_signed_numbers(string string) \n{\n    // TODO\n\
    \    return \"\";\n}\n \n/*\n Similar to extract_numbers, but exclude negative\
    \ numbers.\n     >>> extract_positive_numbers(\"I have -2 oranges\")\n     \"\"\
    \n*/\nstring extract_positive_numbers(string string) \n{\n    // TODO\n    return\
    \ \"\";\n}\n \n/*\n For a given string, return true if it's a palindrome and false\
    \ otherwise.\n*/\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy0a7qhtl.d(11): Error: no property `transform` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0a7qhtl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ ret = new string;\n    ret.length = string.length;\n    foreach(index, character;\
    \ string) \n    {\n        ret[index] = uppercase(character) ? tolower(character)\
    \ : toupper(character);\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfy_0z7br.d(11): Error: `string` is used as a type

    /tmp/tmpfy_0z7br.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfy_0z7br.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ result = \"\";\n\tforeach(character; string) \n\t{\n\t\tif (character.isUpper)\
    \ \n\t\t{\n\t\t\tresult ~= character.toLower;\n\t\t} \n\t\telse if (character.isLower)\
    \ \n\t\t{\n\t\t\tresult ~= character.toUpper;\n\t\t} \n\t\telse \n\t\t{\n\t\t\t\
    result ~= character;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1jrbwpq.d(11): Error: `string` is used as a type

    /tmp/tmpc1jrbwpq.d(14): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpc1jrbwpq.d(16): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpc1jrbwpq.d(18): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmpc1jrbwpq.d(20): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1jrbwpq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    size_t length = string.length;\n    for (size_t i = 0; i < length;\
    \ i++) \n    {\n        auto character = string[i];\n        if (is_upper(character))\
    \ \n        {\n            result ~= to_lower(character);\n        }\n       \
    \ else if (is_lower(character)) \n        {\n            result ~= to_upper(character);\n\
    \        }\n        else \n        {\n            result ~= character;\n     \
    \   }\n    }\n    return result;\n}\n// flip_case(\"abC\")\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4oy_xbm4.d(11): Error: `string` is used as a type

    /tmp/tmp4oy_xbm4.d(16): Error: undefined identifier `is_upper`

    /tmp/tmp4oy_xbm4.d(18): Error: undefined identifier `to_lower`

    /tmp/tmp4oy_xbm4.d(20): Error: undefined identifier `is_lower`

    /tmp/tmp4oy_xbm4.d(22): Error: undefined identifier `to_upper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4oy_xbm4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ out;\n    foreach(char c; string)\n    {\n        if(isLower(c))\n         \
    \   out ~= toUpper(c);\n        else if(isUpper(c))\n            out ~= toLower(c);\n\
    \        else\n            out ~= c;\n    }\n    return out;\n}\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp67krdxus.d(11): Error: found `out` when expecting `;` following
    statement

    /tmp/tmp67krdxus.d(11): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp67krdxus.d(15): Error: found `out` instead of statement

    /tmp/tmp67krdxus.d(17): Error: found `out` instead of statement

    /tmp/tmp67krdxus.d(19): Error: found `out` instead of statement

    /tmp/tmp67krdxus.d(21): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp67krdxus.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ map!(toUpper)(string).zip(map!(toLower)(string)).map!join.array();\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiryiiijz.d(11): Error: template instance `map!toUpper` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiryiiijz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n    {\n \
    \       return string.map!((char c) \n        {\n            return isUpper(c)\
    \ ? toLower(c) : isLower(c) ? toUpper(c) : c;\n        })();\n    }\n/*\nConvert\
    \ a string to its integer value, if valid.\n    >>> string_to_int(\"10\")\n  \
    \  10\n    >>> string_to_int(\"Me\")\n    0\n*/\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjv17nhdq.d(11): Error: no property `map` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjv17nhdq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(i, c; string) \n    {\n        result ~= isUpper(c) ? toLower(c)\
    \ : toUpper(c);\n    }\n    return result;\n}\n/*\n    For a given string, return\
    \ its length.\n    >>> length(\"cat\")\n    3\n*/\nsize_t length(string string)\
    \ \n{\n    return string.length;\n}\n/*\n    Given a string, remove its vowels.\n\
    \    >>> remove_vowels(\"Hello\")\n    \"Hll\"\n*/\nstring remove_vowels(string\
    \ string) \n{\n    string vowels = \"aeiouAEIOU\";\n    foreach(c; vowels) \n\
    \    {\n        string = string.replace(c, \"\");\n    }\n    return string;\n\
    }\n/*\n    Given a string, return the concatenation of its first and last 2 characters.\n\
    \    >>> first_last_2(\"Hello\")\n    \"Helo\"\n*/\nstring first_last_2(string\
    \ string) \n{\n    return string[0 .. 2] ~ string[$ - 2 .. $];\n}\n/*\n    Given\
    \ a string, return a new string made of 3 copies of the last 2 characters of the\
    \ original string.\n    >>> three_times_last_2(\"Hello\")\n    \"lololo\"\n*/\n\
    string three_times_last_2(string string) \n{\n    return (string[$ - 2 .. $] ~\
    \ string[$ - 2 .. $] ~ string[$ - 2 .. $]).dup;\n}\n/*\n    Given a string, return\
    \ a new string replacing all occurrences of the substring \"World\" with \"There\"\
    .\n    >>> replace_world(\"Hello World\")\n    \"Hello There\"\n*/\nstring replace_world(string\
    \ string) \n{\n    return string.replace(\"World\", \"There\");\n}\n/*\n    Given\
    \ a string, return a new string that is the reverse of the original string.\n\
    \    >>> reverse(\"Cat\")\n    \"taC\"\n*/\nstring reverse(string string) \n{\n\
    \    return string[$ .. 0];\n}\n/*\n    Given a string, return a new string containing\
    \ the first\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf32_grrp.d(77): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf32_grrp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n     string\
    \ new_string = \"\";\n     foreach(char, c; string)\n     {\n         if(isUpper(c))\n\
    \         {\n             new_string ~= toLower(c);\n         }\n         else\n\
    \         {\n             new_string ~= toUpper(c);\n         }\n     }\n    \
    \ return new_string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n   \
    \ assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\"\
    );\n    assert(candidate(\"These violent delights have violent ends\") == \"tHESE\
    \ VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj5451ig2.d(12): Error: no identifier for declarator `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj5451ig2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.map!((c) { return tolower(c) == c ? toupper(c) : tolower(c); }).join;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_o8r_6fj.d(11): Error: no property `map` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o8r_6fj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ join(map!\"a.isAlpha ? (to!char(a.isUpper ? to!int(a.toLower) : to!int(a.toUpper)))(a)\
    \ : a\"(string));\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpupxfbzti.d(11): Error: undefined identifier `join`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpupxfbzti.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ result = \"\";\n\tforeach(i, ch; string) \n\t{\n\t\tif(ch.isLower) \n\t\t{\n\
    \t\t\tresult ~= ch.toUpper;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= ch.toLower;\n\
    \t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp78tcmlfj.d(11): Error: `string` is used as a type

    /tmp/tmp78tcmlfj.d(14): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmp78tcmlfj.d(16): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmp78tcmlfj.d(20): Error: no property `toLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp78tcmlfj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    char[]\
    \ result;\n    foreach(c; string) \n    {\n        if (isAlpha(c)) \n        {\n\
    \            result ~= isUpper(c) ? toLower(c) : toUpper(c);\n        } \n   \
    \     else \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result.idup;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1w895528.d(14): Error: undefined identifier `isAlpha`

    /tmp/tmp1w895528.d(16): Error: undefined identifier `isUpper`

    /tmp/tmp1w895528.d(16): Error: undefined identifier `toLower`

    /tmp/tmp1w895528.d(16): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1w895528.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    foreach(c; string)\n    {\n        result ~=  isUpper(c)\
    \ ?  toLower(c) : toUpper(c);\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplez699f6.d(11): Error: `string` is used as a type

    /tmp/tmplez699f6.d(14): Error: undefined identifier `isUpper`

    /tmp/tmplez699f6.d(14): Error: undefined identifier `toLower`

    /tmp/tmplez699f6.d(14): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplez699f6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ output;\n    foreach(char c; string)\n    {\n        if(c.isAlpha())\n     \
    \   {\n            if(c.isUpper())\n            {\n                output ~= c.toLower();\n\
    \            }\n            else\n            {\n                output ~= c.toUpper();\n\
    \            }\n        }\n        else\n        {\n            output ~= c;\n\
    \        }\n    }\n    return output;\n}\n/*\n Given a string, return a new string\
    \ with all the vowels removed\n    >>> remove_vowels(\"Hello\")\n    \"Hll\"\n\
    \    >>> remove_vowels(\"Why\")\n    \"Wh\"\n*/\nstring remove_vowels(string string)\
    \ \n{\n    string output;\n    foreach(char c; string)\n    {\n        if(!c.isVowel())\n\
    \        {\n            output ~= c;\n        }\n    }\n    return output;\n}\n\
    /*\n Given two strings, return a new string that is the result of \n putting the\
    \ first string on top of the second string\n    >>> string_interleave(\"Hello\"\
    , \"World\")\n    \"HWeolrllod\"\n    >>> string_interleave(\"aaaa\", \"bbbb\"\
    )\n    \"abababab\"\n*/\nstring string_interleave(string string1, string string2)\
    \ \n{\n    string output;\n    foreach(i; 0..max(string1.length, string2.length))\n\
    \    {\n        if(i < string1.length)\n        {\n            output ~= string1[i];\n\
    \        }\n        if(i < string2.length)\n        {\n            output ~= string2[i];\n\
    \        }\n    }\n    return output;\n}\n/*\n Given a string, return true if\
    \ the sum of the digits is divisible by 3\n    >>> is_divisible_by_3(\"123\")\n\
    \    true\n    >>> is_divisible_by_3(\"19254\")\n    true\n    >>> is_divisible_by_3(\"\
    88\")\n    false\n    >>> is_divisible_by_3(\"1\")\n    false\n*/\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgd_dq1xf.d(11): Error: `string` is used as a type

    /tmp/tmpgd_dq1xf.d(14): Error: no property `isAlpha` for type `char`

    /tmp/tmpgd_dq1xf.d(16): Error: no property `isUpper` for type `char`

    /tmp/tmpgd_dq1xf.d(18): Error: no property `toLower` for type `char`

    /tmp/tmpgd_dq1xf.d(22): Error: no property `toUpper` for type `char`

    /tmp/tmpgd_dq1xf.d(41): Error: `string` is used as a type

    /tmp/tmpgd_dq1xf.d(44): Error: no property `isVowel` for type `char`

    /tmp/tmpgd_dq1xf.d(62): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgd_dq1xf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    result.reserve(string.length);\n    for (dchar ch; string.popFront(ch))\n\
    \    {\n        result ~= ch.isAlpha ? ch.toLowerCase.toUpperCase : ch;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyx_lcl4c.d(13): Error: found `)` when expecting `;` following `for`
    condition

    /tmp/tmpyx_lcl4c.d(17): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyx_lcl4c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tchar[]\
    \ c = to!char[](string);\n\tforeach(i, c1; c)\n\t{\n\t\tif(c1.isUpper())\n\t\t\
    \tc[i] = to!char(to!int(c1) + 32);\n\t\telse if(c1.isLower())\n\t\t\tc[i] = to!char(to!int(c1)\
    \ - 32);\n\t}\n\treturn to!string(c);\n}\n/*\n \n    >>> contains_digit(123456789,\
    \ 5)\n    True\n    >>> contains_digit(123456789, 0)\n    True\n    >>> contains_digit(123456789,\
    \ 10)\n    False\n    >>> contains_digit(123456789, -1)\n    False\n    >>> contains_digit(123456789,\
    \ 1.1)\n    False\n*/\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqdbn7kq5.d(11): Error: template instance `to!char` template `to`
    is not defined, did you mean No?

    /tmp/tmpqdbn7kq5.d(14): Error: no property `isUpper` for type `char`

    /tmp/tmpqdbn7kq5.d(15): Error: template instance `to!char` template `to` is not
    defined, did you mean No?

    /tmp/tmpqdbn7kq5.d(16): Error: no property `isLower` for type `char`

    /tmp/tmpqdbn7kq5.d(17): Error: template instance `to!char` template `to` is not
    defined, did you mean No?

    /tmp/tmpqdbn7kq5.d(19): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqdbn7kq5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flipped;\n    flipped.reserve(string.length);\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq4ma3lik.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq4ma3lik.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(ch; string)\n    {\n        result ~= isAlpha(ch) && isLower(ch)\
    \ ? ch.toUpper : \n                                              ch.toLower;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2125ez6t.d(11): Error: `string` is used as a type

    /tmp/tmp2125ez6t.d(14): Error: undefined identifier `isAlpha`

    /tmp/tmp2125ez6t.d(14): Error: undefined identifier `isLower`

    /tmp/tmp2125ez6t.d(14): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmp2125ez6t.d(15): Error: no property `toLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2125ez6t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ mixin(map!(\n      //Get the corresponding case.\n      //Ternary operator is\
    \ used to assign the corresponding case based on the boolean result of isUpper\n\
    \      //For a, b, c, d, ... isUpper(letter) is False so letter.toUpper is returned\n\
    \      //For A, B, C, D, ... isUpper(letter) is True so letter.toLower is returned\n\
    \      (letter => isUpper(letter) ? letter.toLower : letter.toUpper)\n    )(string));\n\
    }\n/*\n  Write a function that counts the number of occurrences of each letter\
    \ in a string.\n    >>> let counts = count_letters(\"hello\");\n    >>> counts['h']\n\
    \    1\n    >>> counts['e']\n    1\n    >>> counts['l']\n    2\n    >>> counts['o']\n\
    \    1\n    >>> counts.length\n    5\n    >>> counts['z']\n    0\n*/\n//This function\
    \ returns a map of the given string with the number of occurrences of a letter\
    \ as the value\nMap!char count_letters(string s) \n{\n    return mixin(map!(\n\
    \      //Count the number of occurrences of letter by getting the last index of\
    \ the letter in the string.\n      //s.lastIndexOf(letter) return -1 if the letter\
    \ does not exist in the string.\n      //s.lastIndexOf(letter) returns the last\
    \ position of the letter in the string if it exists in the string.\n      //The\
    \ number of occurrences of a letter is therefore 1 more than the last position\
    \ of the letter in the string\n      //if it exists in the string, else it is\
    \ 0.\n      (letter => 1 + s.lastIndexOf(letter))\n    )(s));\n}\n/*\n  Write\
    \ a function that counts the number of occurrences of each character in a string.\n\
    \    >>> let counts = count_chars(\"hello\");\n    >>> counts['h']\n    1\n  \
    \  >>> counts['e']\n    1\n    >>> counts['l']\n    2\n    >>> counts['o']\n \
    \   1\n    >>> counts.length\n    5\n    >>> counts['z']\n    0\n*/\nMap!char\
    \ count_chars(string s) \n\nunittest\n{\n    alias candidate = flip_case;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqs0zz3ff.d(65): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqs0zz3ff.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  string\
    \ result = \"\";\n  foreach(char c; string)\n  {\n    if (std.ascii.isLower(c))\
    \ \n      result ~= std.ascii.toUpper(c);\n    else if (std.ascii.isUpper(c))\
    \ \n      result ~= std.ascii.toLower(c);\n    else\n      result ~= c;\n  }\n\
    \  return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpba2whv_5.d(11): Error: `string` is used as a type

    /tmp/tmpba2whv_5.d(14): Error: undefined identifier `ascii` in package `std`

    /tmp/tmpba2whv_5.d(15): Error: undefined identifier `ascii` in package `std`

    /tmp/tmpba2whv_5.d(16): Error: undefined identifier `ascii` in package `std`

    /tmp/tmpba2whv_5.d(17): Error: undefined identifier `ascii` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpba2whv_5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    import\
    \ std.ascii : toUpper, toLower;\n    string str;\n    foreach(c; string)\n   \
    \ {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n         \
    \       str ~= toLower(c);\n            else\n                str ~= toUpper(c);\n\
    \        }\n        else\n            str ~= c;\n    }\n    return str;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg3tqae69.d(12): Error: `string` is used as a type

    /tmp/tmpg3tqae69.d(15): Error: undefined identifier `isAlpha`

    /tmp/tmpg3tqae69.d(17): Error: undefined identifier `isUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3tqae69.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    import\
    \ std.algorithm : map;\n    string[] result = string.map!(c => c ^ 32).array;\n\
    \    return result.join;\n}\n/*\n Given an integer, return a string representation\
    \ of that integer, with commas inserted at the appropriate point in the number.\n\
    \    >>> comma_int(1234567)\n    \"1,234,567\"\n    >>> comma_int(1500)\n    \"\
    1,500\"\n*/\nstring comma_int(int integer)\n{\n    string result = integer.to!string;\n\
    \    return result.split('-').map!(x => x.insert(-3, \",\"))[$-1];\n}\n/*\n Given\
    \ a string, return whether it represents a number. Here are the different kinds\
    \ of numbers:\n    >>> is_number(\"42\")\n    True\n    >>> is_number(\"   -42\"\
    )\n    True\n    >>> is_number(\"42-\")\n    False\n    >>> is_number(\"42.3\"\
    )\n    True\n    >>> is_number(\"-42.3\")\n    True\n    >>> is_number(\"4.2.3\"\
    )\n    False\n    >>> is_number(\"42 3\")\n    False\n*/\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq_gjb8dd.d(12): Error: `string` is used as a type

    /tmp/tmpq_gjb8dd.d(12): Error: no property `array` for type `MapResult!(__lambda2,
    string)`

    /tmp/tmpq_gjb8dd.d(24): Error: no property `to` for type `int`

    /tmp/tmpq_gjb8dd.d(25): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_gjb8dd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ map!(\"a\".toUpper()==>\"A\", \"A\".toLower()==>\"a\")(string);\n}\n/*\n Sum\
    \ the digits of a given number\n >>> add_digits(234)\n 9\n*/\nunittest\n{\n  \
    \  alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp970e183y.d(11): Error: expression expected, not `>`

    /tmp/tmp970e183y.d(11): Error: found `"A"` when expecting `)` following template
    argument list

    /tmp/tmp970e183y.d(11): Error: expression expected, not `>`

    /tmp/tmp970e183y.d(11): Error: found `"a"` when expecting `;` following `return`
    statement

    /tmp/tmp970e183y.d(11): Error: found `)` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp970e183y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163944
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  return\
    \ std.string.map(string,\n    (immutable c) => !isUpper(c) ? toUpper(c) : toLower(c)\n\
    \  );\n}\n \nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjq3eygbh.d(11): Error: undefined identifier `string` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjq3eygbh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\treturn\
    \ string.map!((a) => (a.isUpper ? a.toLower : a.toUpper)).join;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9tysnzt4.d(11): Error: no property `map` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9tysnzt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ res;\n    auto n = string.length;\n    foreach(i; 0..n)\n    {\n        if (string[i]==string[i].toUpper)\n\
    \        {\n            res ~= string[i].toLower;\n        }\n        else\n \
    \       {\n            res ~= string[i].toUpper;\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3shvfp3g.d(11): Error: `string` is used as a type

    /tmp/tmp3shvfp3g.d(15): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmp3shvfp3g.d(17): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmp3shvfp3g.d(21): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3shvfp3g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ flipped;\n\tfor (int i = 0; i < string.length; i++)\n\t{\n\t\tif (string[i]\
    \ >= 'a' && string[i] <= 'z')\n\t\t{\n\t\t\tflipped ~= (char)(string[i] + 'A'\
    \ - 'a');\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i] <= 'Z')\n\t\t{\n\t\
    \t\tflipped ~= (char)(string[i] + 'a' - 'A');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\
    flipped ~= string[i];\n\t\t}\n\t}\n\treturn flipped;\n}\n/*\n    Implement the\
    \ Vigenere cipher.\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgwfls5cq.d(16): Error: C style cast illegal, use `cast(char)(string[i]
    + ''A'' - ''a'')`

    /tmp/tmpgwfls5cq.d(20): Error: C style cast illegal, use `cast(char)(string[i]
    + ''a'' - ''A'')`

    /tmp/tmpgwfls5cq.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgwfls5cq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  string\
    \ flipped_string;\n  foreach(char c; string)\n  {\n    if(c.isUpper)\n      flipped_string\
    \ ~= c.toLower;\n    else if(c.isLower)\n      flipped_string ~= c.toUpper;\n\
    \    else\n      flipped_string ~= c;\n  }\n  return flipped_string;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqaggzdqd.d(11): Error: `string` is used as a type

    /tmp/tmpqaggzdqd.d(14): Error: no property `isUpper` for type `char`

    /tmp/tmpqaggzdqd.d(15): Error: no property `toLower` for type `char`

    /tmp/tmpqaggzdqd.d(16): Error: no property `isLower` for type `char`

    /tmp/tmpqaggzdqd.d(17): Error: no property `toUpper` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqaggzdqd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flippedString = \"\";\n    for (int index = 0; index < string.length; index++)\n\
    \    {\n        if (isupper(string[index]))\n        {\n            flippedString\
    \ += tolower(string[index]);\n        }\n        else\n        {\n           \
    \ flippedString += toupper(string[index]);\n        }\n    }\n    return flippedString;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5aiuv_i9.d(11): Error: `string` is used as a type

    /tmp/tmp5aiuv_i9.d(14): Error: undefined identifier `isupper`

    /tmp/tmp5aiuv_i9.d(16): Error: undefined identifier `tolower`

    /tmp/tmp5aiuv_i9.d(20): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5aiuv_i9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.map!((c) => (c >= 'a' && c <= 'z') ? toupper(c) : tolower(c));\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb5jz_1ed.d(11): Error: no property `map` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb5jz_1ed.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    foreach(char c; string)\n    {\n        if (isalpha(c))\n\
    \        {\n            c = islower(c) ? toupper(c) : tolower(c);\n        }\n\
    \        result ~= c;\n    }\n    return result;\n}\n/*\nAnagrams are words with\
    \ the same number of characters.\nA palindrome is a word that has the same characters\
    \ forward and backward.\n    >>> anagram_palindrome(\"top spot\")\n    True\n\
    */\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwv_5mu2e.d(11): Error: `string` is used as a type

    /tmp/tmpwv_5mu2e.d(14): Error: undefined identifier `isalpha`

    /tmp/tmpwv_5mu2e.d(16): Error: undefined identifier `islower`

    /tmp/tmpwv_5mu2e.d(16): Error: undefined identifier `toupper`

    /tmp/tmpwv_5mu2e.d(16): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwv_5mu2e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ newstring = \"\";\n    foreach(character; string)\n    {\n        if (character.isLetter)\n\
    \        {\n            // if this is a letter\n            if (character.isUpper)\n\
    \            {\n                // turn it to lowercase\n                newstring\
    \ ~= character.toLower;\n            }\n            else\n            {\n    \
    \            // turn it to uppercase\n                newstring ~= character.toUpper;\n\
    \            }\n        }\n        else\n        {\n            // otherwise just\
    \ append the character\n            newstring ~= character;\n        }\n    }\n\
    \    return newstring;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n \
    \   assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\"\
    );\n    assert(candidate(\"These violent delights have violent ends\") == \"tHESE\
    \ VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4ul46lvf.d(11): Error: `string` is used as a type

    /tmp/tmp4ul46lvf.d(14): Error: no property `isLetter` for type `immutable(char)`

    /tmp/tmp4ul46lvf.d(17): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmp4ul46lvf.d(20): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmp4ul46lvf.d(25): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ul46lvf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.transform!q{ if(isLower(q)) return toUpper(q); if(isUpper(q)) return\
    \ toLower(q); return q; }();\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3s6a3v3.d(11): Error: no property `transform` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3s6a3v3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\treturn\
    \ std.string.join(map!(std.ascii.toLower)(string));\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd_ad_o24.d(11): Error: undefined identifier `string` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd_ad_o24.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n     return\
    \ string.map!(x => \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".indexOf(x)\
    \ > -1 ? \n     \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"[abs(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".indexOf(x) - 26)] : x);\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgye8a6a8.d(11): Error: no property `map` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgye8a6a8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tint[]\
    \ a = string.dup;\n\tint[] b = [ 'A'.ord, 'Z'.ord, 'a'.ord, 'z'.ord ];\n\tforeach(i;\
    \ 0 .. a.length)\n\t{\n\t\tforeach(j; 0 .. b.length)\n\t\t{\n\t\t\tif(a[i] ==\
    \ b[j])\n\t\t\t{\n\t\t\t\ta[i] = b[b.length - 1 - j];\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn to!string(a);\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpop24rx37.d(11): Error: cannot implicitly convert expression `dup(cast(const(char)[])string)`
    of type `char[]` to `int[]`

    /tmp/tmpop24rx37.d(12): Error: no property `ord` for type `char`

    /tmp/tmpop24rx37.d(12): Error: no property `ord` for type `char`

    /tmp/tmpop24rx37.d(12): Error: no property `ord` for type `char`

    /tmp/tmpop24rx37.d(12): Error: no property `ord` for type `char`

    /tmp/tmpop24rx37.d(24): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpop24rx37.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ ret;\n    foreach(ch; string) \n    {\n        if(isAlpha(ch)) \n        {\n\
    \            ret ~= isUpper(ch) ? toLower(ch) : toUpper(ch);\n        }\n    \
    \    else\n        {\n            ret ~= ch;\n        }\n    }\n    return ret;\n\
    }\n/*\n Return a sorted list of unique values in `values` without duplicates.\n\
    \    \n    >>> unique_sorted([1,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5gvfjbaj.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5gvfjbaj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(i, char c; string) \n    {\n        if (c.isUpper) \n \
    \       {\n            c = c.toLower;\n        } \n        else if (c.isLower)\
    \ \n        {\n            c = c.toUpper;\n        }\n        result ~= c;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0xvqr2hw.d(11): Error: `string` is used as a type

    /tmp/tmp0xvqr2hw.d(14): Error: no property `isUpper` for type `char`

    /tmp/tmp0xvqr2hw.d(16): Error: no property `toLower` for type `char`

    /tmp/tmp0xvqr2hw.d(18): Error: no property `isLower` for type `char`

    /tmp/tmp0xvqr2hw.d(20): Error: no property `toUpper` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0xvqr2hw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ lower_characters = \"abcdefghijklmnopqrstuvwxyz\";\n    string upper_characters\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    string final_string = \"\";\n    foreach(c;\
    \ string)\n    {\n        if(c in lower_characters)\n        {\n            final_string\
    \ ~= upper_characters[lower_characters.indexOf(c)];\n        }\n        else if(c\
    \ in upper_characters)\n        {\n            final_string ~= lower_characters[upper_characters.indexOf(c)];\n\
    \        }\n        else\n        {\n            final_string ~= c;\n        }\n\
    \    }\n    return final_string;\n}\n/*\nGiven a string of characters, return\
    \ the characters after every Nth one.\n    >>> every_nth(\"abcdefg\", 2)\n   \
    \ \"aceg\"\n*/\nstring every_nth(string string, int N) \n{\n    string result_string\
    \ = \"\";\n    foreach(i,c; string)\n    {\n        if(i % N == 0)\n        {\n\
    \            result_string ~= c;\n        }\n    }\n    return result_string;\n\
    }\n/*\nGiven a string, check if it is a palindrome.\n    >>> is_palindrome(\"\
    radar\")\n    True\n*/\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn_oxb6ze.d(11): Error: `string` is used as a type

    /tmp/tmpn_oxb6ze.d(12): Error: `string` is used as a type

    /tmp/tmpn_oxb6ze.d(13): Error: `string` is used as a type

    /tmp/tmpn_oxb6ze.d(38): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn_oxb6ze.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = new string;\n    foreach(char c; string)\n    {\n\tif(c.isLower) result\
    \ ~= c.toUpper;\n\telse if(c.isUpper) result ~= c.toLower;\n\telse result ~= c;\n\
    \    }\n    return result;\n}\n/*\nA basic system check will return the operating\
    \ system and version, and the architecture.\n    >>> system_check()\n    \"OS:\
    \ GNU/Linux, Linux v5.2.1-arch1-1-ARCH, Architecture: x86_64\"\n*/\nstring system_check()\
    \ \n{\n    string OS = \"OS: \" ~ std.file.read(\"/proc/sys/kernel/ostype\").strip\
    \ ~ \", \";\n    string release = \"Linux \" ~ std.file.read(\"/proc/sys/kernel/osrelease\"\
    ).strip ~ \", \";\n    string arch = \"Architecture: \" ~ std.file.read(\"/proc/sys/kernel/arch\"\
    ).strip;\n    return OS ~ release ~ arch;\n}\n/*\nCount the number of words in\
    \ a string.\n    >>> word_count(\"Hello there! How is it going?\")\n    5\n*/\n\
    size_t word_count(string string) \n{\n    size_t count = 0;\n    bool has_word\
    \ = false;\n    foreach(char c; string)\n    {\n\tif(c.isAlpha || c.isDigit)\n\
    \t{\n\t    if(!has_word)\n\t    {\n\t\tcount += 1;\n\t\thas_word = true;\n\t \
    \   }\n\t}\n\telse\n\t{\n\t    has_word = false;\n\t}\n    }\n    return count;\n\
    }\n/*\nCheck if a number is odd.\n    >>> is_odd(2)\n    false\n    >>> is_odd(3)\n\
    \    true\n*/\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbnnznybx.d(11): Error: `string` is used as a type

    /tmp/tmpbnnznybx.d(11): Error: `string` is used as a type

    /tmp/tmpbnnznybx.d(14): Error: no property `isLower` for type `char`

    /tmp/tmpbnnznybx.d(14): Error: no property `toUpper` for type `char`

    /tmp/tmpbnnznybx.d(15): Error: no property `isUpper` for type `char`

    /tmp/tmpbnnznybx.d(15): Error: no property `toLower` for type `char`

    /tmp/tmpbnnznybx.d(27): Error: undefined identifier `file` in package `std`

    /tmp/tmpbnnznybx.d(28): Error: undefined identifier `file` in package `std`

    /tmp/tmpbnnznybx.d(29): Error: undefined identifier `file` in package `std`

    /tmp/tmpbnnznybx.d(43): Error: no property `isAlpha` for type `char`

    /tmp/tmpbnnznybx.d(43): Error: no property `isDigit` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbnnznybx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(element; string)\n    {\n        if(element.isUpper)\n\
    \        {\n            result ~= element.toLower;\n        }\n        else if(element.isLower)\n\
    \        {\n            result ~= element.toUpper;\n        }\n        else\n\
    \        {\n            result ~= element;\n        }\n    }\n    return result;\n\
    }\n/*\n     Re-implement \"round\" to take two arguments - the second one is a\
    \ default parameter\n     so it can be called with only one argument.\n    \n\
    \    >>> round(45.7)\n    46\n    >>> round(45.7,1)\n    45.7\n*/\ndouble round(double\
    \ val, int precision = 0) \n{\n    return val.round(precision);\n}\n/*\n     Write\
    \ a function that takes a list of the following structure and returns a string\
    \ in column format.\n     \n     struct Person\n     {\n         string first_name;\n\
    \         string last_name;\n         string age;\n     }\n     \n     Returns:\n\
    \        First Last     Age\n        John Smith    20\n        Jane Doe      34\n\
    \        \n    >>> format_data([Person(\"John\", \"Smith\", \"20\"), Person(\"\
    Jane\", \"Doe\", \"34\")])\n    \"First Last     Age\\nJohn Smith    20\\nJane\
    \ Doe      34\"\n*/\nPerson parseLine(string line)\n{\n    auto tokens = split(line);\n\
    \    assert(tokens.length == 3);\n    Person p;\n    p.first_name = tokens[0];\n\
    \    p.last_name = tokens[1];\n    p.age = tokens[2];\n    return p;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzoblgph7.d(60): Error: undefined identifier `Person`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzoblgph7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n    {\n \
    \       string temp = \"\";\n        foreach(int i, char c; string) \n       \
    \     {\n                if(isUpper(c))\n                    temp ~= toLower(c);\n\
    \                else if(isLower(c))\n                    temp ~= toUpper(c);\n\
    \                else\n                    temp ~= c;\n            }\n       \
    \     return temp;\n    }\nunittest\n{\n    alias candidate = flip_case;\n\n \
    \   assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\"\
    );\n    assert(candidate(\"These violent delights have violent ends\") == \"tHESE\
    \ VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi1_9khkg.d(11): Error: `string` is used as a type

    /tmp/tmpi1_9khkg.d(14): Error: undefined identifier `isUpper`

    /tmp/tmpi1_9khkg.d(15): Error: undefined identifier `toLower`

    /tmp/tmpi1_9khkg.d(16): Error: undefined identifier `isLower`

    /tmp/tmpi1_9khkg.d(17): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi1_9khkg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  string\
    \ result = string;\n  foreach(i, c; string)\n  {\n    switch(c)\n    {\n     \
    \ case 'a':\n      case 'b':\n      case 'c':\n      case 'd':\n      case 'e':\n\
    \      case 'f':\n      case 'g':\n      case 'h':\n      case 'i':\n      case\
    \ 'j':\n      case 'k':\n      case 'l':\n      case 'm':\n      case 'n':\n \
    \     case 'o':\n      case 'p':\n      case 'q':\n      case 'r':\n      case\
    \ 's':\n      case 't':\n      case 'u':\n      case 'v':\n      case 'w':\n \
    \     case 'x':\n      case 'y':\n      case 'z':\n        result[i] = result[i].toUpper;\n\
    \        break;\n      case 'A':\n      case 'B':\n      case 'C':\n      case\
    \ 'D':\n      case 'E':\n      case 'F':\n      case 'G':\n      case 'H':\n \
    \     case 'I':\n      case 'J':\n      case 'K':\n      case 'L':\n      case\
    \ 'M':\n      case 'N':\n      case 'O':\n      case 'P':\n      case 'Q':\n \
    \     case 'R':\n      case 'S':\n      case 'T':\n      case 'U':\n      case\
    \ 'V':\n      case 'W':\n      case 'X':\n      case 'Y':\n      case 'Z':\n \
    \       result[i] = result[i].toLower;\n        break;\n    }\n  }\n  return result;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmxfbh88_.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxfbh88_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ c;\n    c.reserve(string.length);\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy1asqbs6.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy1asqbs6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ newString;\n    foreach(char c; string) \n    {\n        if(c.isUpper) \n  \
    \      {\n            newString ~= c.toLower;\n        }\n        else \n    \
    \    {\n            newString ~= c.toUpper;\n        }\n    }\n    return newString;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpubl24nt1.d(11): Error: `string` is used as a type

    /tmp/tmpubl24nt1.d(14): Error: no property `isUpper` for type `char`

    /tmp/tmpubl24nt1.d(16): Error: no property `toLower` for type `char`

    /tmp/tmpubl24nt1.d(20): Error: no property `toUpper` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpubl24nt1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    foreach(char\
    \ c; string) \n    {\n        switch(c) \n        {\n            case 'a': case\
    \ 'b': case 'c': case 'd': case 'e': case 'f': case 'g': case 'h': case 'i':\n\
    \            case 'j': case 'k': case 'l': case 'm': case 'n': case 'o': case\
    \ 'p': case 'q': case 'r':\n            case 's': case 't': case 'u': case 'v':\
    \ case 'w': case 'x': case 'y': case 'z':\n                c = toUpper(c);\n \
    \               break;\n            case 'A': case 'B': case 'C': case 'D': case\
    \ 'E': case 'F': case 'G': case 'H': case 'I':\n            case 'J': case 'K':\
    \ case 'L': case 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':\n    \
    \        case 'S': case 'T': case 'U': case 'V': case 'W': case 'X': case 'Y':\
    \ case 'Z':\n                c = toLower(c);\n                break;\n       \
    \ }\n    }\n    return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkn3aqav.d(18): Error: undefined identifier `toUpper`

    /tmp/tmpzkn3aqav.d(23): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkn3aqav.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    auto\
    \ result = \"\";\n    string.each!((char ch) => result ~= (ch.isUpper ? ch.toLower\
    \ : ch.toUpper) );\n    return result;\n}\n/*\n For a given string, replace every\
    \ blank space with a dash (\"-\").\n    >>> replace_space(\"Hello World\")\n \
    \   \"Hello-World\"\n*/\nstring replace_space(string string) \n{\n    return string.replace(\"\
    \ \", \"-\");\n}\n/*\n For a given string, return the string with each word capitalized.\n\
    \    >>> capitalize_words(\"how can mirrors be real if our eyes aren't real\"\
    )\n    \"How Can Mirrors Be Real If Our Eyes Aren't Real\"\n*/\nstring capitalize_words(string\
    \ string) \n{\n    auto result = \"\";\n    import std.string;\n    string.split(\"\
    \ \").each!((word) => {\n        result ~= word.capitalize;\n        result ~=\
    \ \" \";\n    });\n    return result.trim;\n}\n/*\n For a given string, return\
    \ the string with each word capitalized.\n    >>> capitalize_words(\"how can mirrors\
    \ be real if our eyes aren't real\")\n    \"How Can Mirrors Be Real If Our Eyes\
    \ Aren't Real\"\n*/\nstring capitalize_words(string string) \n{\n    auto result\
    \ = \"\";\n    import std.string;\n    string.split(\" \").each!((word) => {\n\
    \        result ~= word.capitalize;\n        result ~= \" \";\n    });\n    return\
    \ result.trim;\n}\n/*\n Given a string, return true if it is a palindrome.\n \
    \   >>> is_palindrome(\"testing\")\n    false\n    >>> is_palindrome(\"tacocat\"\
    )\n    true\n*/\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsd7378s8.d(12): Error: no property `each` for type `string`

    /tmp/tmpsd7378s8.d(22): Error: no property `replace` for type `string`

    /tmp/tmpsd7378s8.d(33): Error: no property `each` for type `string[]`

    /tmp/tmpsd7378s8.d(37): Error: no property `trim` for type `string`

    /tmp/tmpsd7378s8.d(48): Error: no property `each` for type `string[]`

    /tmp/tmpsd7378s8.d(52): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsd7378s8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163946
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    foreach(character; string) \n    {\n        if(character.isLower)\
    \ \n        {\n            result ~= character.toUpper;\n        }\n        else\
    \ if(character.isUpper) \n        {\n            result ~= character.toLower;\n\
    \        }\n        else \n        {\n            result ~= character;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdke9e_vu.d(11): Error: `string` is used as a type

    /tmp/tmpdke9e_vu.d(14): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmpdke9e_vu.d(16): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmpdke9e_vu.d(18): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpdke9e_vu.d(20): Error: no property `toLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdke9e_vu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ ret;\n    foreach(c; string)\n    {\n        ret ~= isUpper(c) ? toLower(c)\
    \ : toUpper(c);\n    }\n    return ret;\n}\n/*\nRemove all duplicates from a string.\n\
    \    >>> remove_duplicates(\"aaabbbccc\")\n    \"abc\"\n*/\nstring remove_duplicates(string\
    \ string) \n{\n    string ret;\n    foreach(c; string)\n    {\n        if(ret.find(c)\
    \ == -1)\n        {\n            ret ~= c;\n        }\n    }\n    return ret;\n\
    }\n/*\n    Given a string and a substring, find the substring, and if it exists,\
    \ return the index of the first character in the substring. \n    The function\
    \ should return -1 if the substring is not found.\n    >>> find_substring(\"hello\
    \ world!\", \"world\")\n    6\n    >>> find_substring(\"hello world!\", \"foo\"\
    )\n    -1\n*/\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_yq2b2s3.d(11): Error: `string` is used as a type

    /tmp/tmp_yq2b2s3.d(14): Error: undefined identifier `isUpper`

    /tmp/tmp_yq2b2s3.d(14): Error: undefined identifier `toLower`

    /tmp/tmp_yq2b2s3.d(14): Error: undefined identifier `toUpper`

    /tmp/tmp_yq2b2s3.d(25): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_yq2b2s3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.map!(c => isAlpha(c) && isLower(c) ? toUpper(c) : toLower(c));\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpogg9r3l4.d(11): Error: no property `map` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpogg9r3l4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flippedCase = \"\";\n    foreach(immutable char c; string) \n    {\n       \
    \ flippedCase ~= c.isUpper ? c.toLower : c.toUpper;\n    }\n    return flippedCase;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpak0kmwtt.d(11): Error: `string` is used as a type

    /tmp/tmpak0kmwtt.d(14): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpak0kmwtt.d(14): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpak0kmwtt.d(14): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpak0kmwtt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    for (size_t i = 0; i < string.length; i++)\n    {\n    \
    \    char c = string[i];\n        if (isUpper(c))\n        {\n            result\
    \ ~= toLower(c);\n        }\n        else\n        {\n            result ~= toUpper(c);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp02inu4h0.d(11): Error: `string` is used as a type

    /tmp/tmp02inu4h0.d(15): Error: undefined identifier `isUpper`

    /tmp/tmp02inu4h0.d(17): Error: undefined identifier `toLower`

    /tmp/tmp02inu4h0.d(21): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp02inu4h0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ s = string.toUpper;\n    return s;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvgqq0d78.d(11): Error: `string` is used as a type

    /tmp/tmpvgqq0d78.d(11): Error: no property `toUpper` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvgqq0d78.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  return\
    \ string.transformed!(\"a\" ~ \"z\" ? toupper : tolower)();\n}\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkzjhwuuf.d(11): Error: no property `transformed` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkzjhwuuf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    auto\
    \ chars = string.chars;\n    foreach(index, ch; chars) \n    {\n        if(ch.isLower)\
    \ \n        {\n            chars[index] = ch.toUpper;\n        } \n        else\
    \ if(ch.isUpper) \n        {\n            chars[index] = ch.toLower;\n       \
    \ }\n    }\n    return chars.join;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt7agu_3a.d(11): Error: no property `chars` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt7agu_3a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ tmp = \"\";\n\t\n\t// foreach\n\tforeach(char ch; string) {\n\t\tif (ch.isLower)\n\
    \t\t\ttmp ~= ch.toUpper;\n\t\telse\n\t\t\ttmp ~= ch.toLower;\n\t}\n\t\n\treturn\
    \ tmp;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuha988a0.d(11): Error: `string` is used as a type

    /tmp/tmpuha988a0.d(15): Error: no property `isLower` for type `char`

    /tmp/tmpuha988a0.d(16): Error: no property `toUpper` for type `char`

    /tmp/tmpuha988a0.d(18): Error: no property `toLower` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuha988a0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ result;\n\tforeach(c; string)\n\t{\n\t\tif(c.isLower)\n\t\t\tresult ~= c.toUpper;\n\
    \t\telse if(c.isUpper)\n\t\t\tresult ~= c.toLower;\n\t\telse\n\t\t\tresult ~=\
    \ c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4r30h4sh.d(11): Error: `string` is used as a type

    /tmp/tmp4r30h4sh.d(14): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmp4r30h4sh.d(15): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmp4r30h4sh.d(16): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmp4r30h4sh.d(17): Error: no property `toLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4r30h4sh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ to!string(map!(c => c.isUpper ? to!char(c.toLower) : to!char(c.toUpper))(string));\n\
    }\n/*\n Return a set of strings, where each string is all the words that occur\
    \ in the given string, separated by a space.\n    >>> get_words(\"This is a test\"\
    )\n    set(\"this\", \"is\", \"a\", \"test\")\n    \n*/\nstring[] get_words(string\
    \ string) \n{\n    return strings.split(string, \" \");\n}\n/*\n For a given string,\
    \ return a set of characters that occur in the string.\n    >>> get_chars(\"Hello\"\
    )\n    set(\"H\", \"e\", \"l\", \"o\")\n    \n*/\nchar[] get_chars(string string)\
    \ \n{\n    return to!char[](to!string(set(string)));\n}\n/*\n Retrieve the unique\
    \ words in a given list of strings.\n    >>> unique_words([\"this\", \"is\", \"\
    a\", \"test\", \"of\", \"is\"])\n    set(\"this\", \"is\", \"a\", \"test\", \"\
    of\")\n    \n*/\nstring[] unique_words(string[] strings) \n{\n    return to!string[](set(strings));\n\
    }\n/*\n For a given string, return a tuple where the first element is the lowercase\
    \ version of the string, and the second element is the uppercase version of the\
    \ string.\n    >>> split_case(\"Hello\")\n    (\"hello\", \"HELLO\")\n    \n*/\n\
    tuple!(string, string) split_case(string string) \n{\n    return tuple(\"hello\"\
    , \"HELLO\");\n}\n/*\n For a given string, return a new string where all characters\
    \ appear in the same order, but any lowercase letters that were adjacent to a\
    \ space become uppercase.\n    >>> camel_case(\"This is a test\")\n    \"ThisIsATest\"\
    \n    \n*/\nstring camel_case(string string) \n{\n    return to!string(map!(c\
    \ => c.isUpper ? c : to!char(c.toUpper))(string));\n}\n/*\n For a given string\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnwmcqblt.d(63): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnwmcqblt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    //\
    \ Make a char[]\n    char[] out;\n    out.length = string.length;\n    foreach(i,\
    \ ch; string) {\n        if(isUpper(ch))\n            out[i] = toLower(ch);\n\
    \        else if(isLower(ch))\n            out[i] = toUpper(ch);\n        else\n\
    \            out[i] = ch;\n    }\n    return to!string(out);\n}\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcsh0pw1m.d(12): Error: no identifier for declarator `char[]`

    /tmp/tmpcsh0pw1m.d(12): Error: found `out` instead of statement

    /tmp/tmpcsh0pw1m.d(13): Error: found `out` instead of statement

    /tmp/tmpcsh0pw1m.d(16): Error: found `out` instead of statement

    /tmp/tmpcsh0pw1m.d(18): Error: found `out` instead of statement

    /tmp/tmpcsh0pw1m.d(20): Error: found `out` instead of statement

    /tmp/tmpcsh0pw1m.d(22): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcsh0pw1m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ ret = \"\";\n\tforeach(wchar_t c; string)\n\t{\n\t\tif(c.isLower)\n\t\t\tret\
    \ ~= c.toUpper;\n\t\telse if(c.isUpper)\n\t\t\tret ~= c.toLower;\n\t\telse\n\t\
    \t\tret ~= c;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmjwp8x0i.d(11): Error: `string` is used as a type

    /tmp/tmpmjwp8x0i.d(12): Error: undefined identifier `wchar_t`, did you mean `dchar`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmjwp8x0i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  string\
    \ result = \"\";\n  foreach(c; string) \n  {\n    if (c.isUpper)\n    {\n    \
    \  result ~= c.toLower;\n    }\n    else\n    {\n      result ~= c.toUpper;\n\
    \    }\n  }\n  return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfwq2531k.d(11): Error: `string` is used as a type

    /tmp/tmpfwq2531k.d(14): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpfwq2531k.d(16): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpfwq2531k.d(20): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfwq2531k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    auto\
    \ s = to!string(std.algorithm.map!(toUpperCase(i),string));\n    return to!string(std.algorithm.map!(toLowerCase(i),s));\n\
    }\n/*\n \n For a given string, return a new string that swaps each character's\
    \ case.\n    >>> swap_case(\"Hello\")\n    \"hELLO\"\n    >>> swap_case(\"Bye\"\
    )\n    \"bYE\"\n*/\nstring swap_case(string string) \n{\n    return to!string(std.algorithm.map!(i\
    \ =>\n        (isUpper(i) ? toLowerCase(i) : toUpperCase(i))\n    ,string));\n\
    }\n/*\n \n For a given string, return a new string that capitalize each letter.\n\
    \    >>> capitalize(\"Hello\")\n    \"Hello\"\n    >>> capitalize(\"bye\")\n \
    \   \"Bye\"\n*/\nstring capitalize(string string) \n{\n    auto s = to!string(std.algorithm.map!(toLowerCase(i),string));\n\
    \    return to!string(std.algorithm.map!(toUpperCase(i),s[0..1]) ~ s[1..$]);\n\
    }\n/*\n \n For a given string, return a new string that apply a title format.\n\
    \    >>> title_case(\"a clash of KINGS\", \"a an the of\")\n    \"A Clash of Kings\"\
    \n    >>> title_case(\"THE WIND IN THE WILLOWS\", \"The In\")\n    \"The Wind\
    \ in the Willows\"\n    >>> title_case(\"the quick brown fox\")\n    \"The Quick\
    \ Brown Fox\"\n*/\nstring title_case(string string, string minor_words = \"\"\
    ) \n{\n    string[] s = split(to!string(std.algorithm.map!(toLowerCase(i),string)),\"\
    \ \");\n    string[] m = split(to!string(std.algorithm.map!(toLowerCase(i),minor_words)),\"\
    \ \");\n    return to!string(std.algorithm.map!(i =>\n        (indexOf(m,i)>=0\
    \ ? i : to!string(std.algorithm.map!\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptr_1z_gc.d(57): Error: template argument expected following `!`

    /tmp/tmptr_1z_gc.d(57): Error: found `unittest` when expecting `,`

    /tmp/tmptr_1z_gc.d(65): Error: found `void` when expecting `,`

    /tmp/tmptr_1z_gc.d(65): Error: found `{` when expecting `,`

    /tmp/tmptr_1z_gc.d(65): Error: expression expected, not `}`

    /tmp/tmptr_1z_gc.d(65): Error: found `End of File` when expecting `,`

    /tmp/tmptr_1z_gc.d(65): Error: found `End of File` when expecting `)`

    /tmp/tmptr_1z_gc.d(56): Error: found `End of File` when expecting `)`

    /tmp/tmptr_1z_gc.d(65): Error: found `End of File` when expecting `)` following
    template argument list

    /tmp/tmptr_1z_gc.d(65): Error: found `End of File` when expecting `,`

    /tmp/tmptr_1z_gc.d(65): Error: found `End of File` when expecting `)`

    /tmp/tmptr_1z_gc.d(65): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmptr_1z_gc.d(65): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp'
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flippedString = \"\";\n    for (int i = 0; i < string.length; i++)\n    {\n\
    \        if (isupper(string[i])) { flippedString ~= tolower(string[i]); }\n  \
    \      else { flippedString ~= toupper(string[i]); }\n    }\n    return flippedString;\n\
    }\n/*\nIgnoring case, count the number of times a substring is present in a string.\n\
    \    >>> count_substring(\"Hello, world\", \"Hello\")\n    1\n*/\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi5aitvbp.d(11): Error: `string` is used as a type

    /tmp/tmpi5aitvbp.d(14): Error: undefined identifier `isupper`

    /tmp/tmpi5aitvbp.d(14): Error: undefined identifier `tolower`

    /tmp/tmpi5aitvbp.d(15): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5aitvbp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    /*\n\
    \     * I've been looking for a good excuse to use the new swap function.\n  \
    \   * It looks like this is it.\n     */\n    foreach(c; string)\n    {\n    \
    \    auto upper = to!char(to!int(c) - to!int('a') + to!int('A'));\n        auto\
    \ lower = to!char(to!int(c) - to!int('A') + to!int('a'));\n        if(c.isUpper)\n\
    \            swap(c, upper);\n        else if(c.isLower)\n            swap(c,\
    \ lower);\n    }\n    return string;\n}\n/*\n    Return the string with the middle\
    \ character removed.\n    >>> remove_middle(\"abc\")\n    \"ab\"\n    >>> remove_middle(\"\
    abcd\")\n    \"acd\"\n*/\nstring remove_middle(string string) \n{\n    return\
    \ string[0..$/2] ~ string[$/2 + 1..$];\n}\n/*\n    Return a new string with the\
    \ same characters but in reverse order.\n    >>> reverse_string(\"python\")\n\
    \    \"nohtyp\"\n*/\nstring reverse_string(string string) \n{\n    auto result\
    \ = string[];\n    foreach(index, c; string)\n        result[index] = string[$\
    \ - index - 1];\n    return result;\n}\n/*\n    Return True if the input string\
    \ begins with 'py' and False otherwise.\n    >>> starts_with_py(\"python\")\n\
    \    True\n    >>> starts_with_py(\"py\")\n    True\n    >>> starts_with_py(\"\
    p\")\n    False\n    >>> starts_with_py(\"\")\n    False\n*/\nunittest\n{\n  \
    \  alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6q8whc_o.d(17): Error: template instance `to!char` template `to`
    is not defined, did you mean No?

    /tmp/tmp6q8whc_o.d(18): Error: template instance `to!char` template `to` is not
    defined, did you mean No?

    /tmp/tmp6q8whc_o.d(19): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmp6q8whc_o.d(20): Error: undefined identifier `swap`, did you mean template
    `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?

    /tmp/tmp6q8whc_o.d(21): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmp6q8whc_o.d(22): Error: undefined identifier `swap`, did you mean template
    `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?

    /tmp/tmp6q8whc_o.d(46): Error: cannot modify `immutable` expression `result[index]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6q8whc_o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flipped = \"\";\n    foreach(ch; string) \n    {\n        if(ch.isUpper) flipped\
    \ ~= ch.toLower;\n        else if(ch.isLower) flipped ~= ch.toUpper;\n       \
    \ else flipped ~= ch;\n    }\n    return flipped;\n}\n/*\nEncode a string using\
    \ ROT13 cipher. \nThe encoding is done by shifting the string's alphabetical characters\
    \ by 13 places, \nwith 'A' shifting to 'N', 'B' shifting to 'O', 'Z' shifting\
    \ to 'M', and so on.\n*/\nstring encode(string input)\n{\n    import std.ascii;\n\
    \    const string AtoM = \"ABCDEFGHIJKLM\";\n    const string NtoZ = \"NOPQRSTUVWXYZ\"\
    ;\n    string output = \"\";\n    foreach(char ch; input)\n    {\n        if(ch.isUpper)\n\
    \        {\n            auto index = AtoM.indexOf(ch);\n            if(index !=\
    \ -1) output ~= NtoZ[index];\n            else output ~= ch;\n        }\n    \
    \    else if(ch.isLower)\n        {\n            auto index = AtoM.indexOf(ch.toUpper);\n\
    \            if(index != -1) output ~= NtoZ[index].toLower;\n            else\
    \ output ~= ch;\n        }\n        else\n        {\n            output ~= ch;\n\
    \        }\n    }\n    return output;\n}\n/*\nThe sum of the squares of the first\
    \ ten natural numbers is,\n1\xB2 + 2\xB2 + ... + 10\xB2 = 385\nThe square of the\
    \ sum of the first ten natural numbers is,\n(1 + 2 + ... + 10)\xB2 = 55\xB2 =\
    \ 3025\nHence the difference between the sum of the squares of the first ten natural\
    \ numbers and the square of the sum is 3025 \u2212 385 = 2640.\nFind the difference\
    \ between the sum of the squares of the first one hundred natural numbers and\
    \ the square of the sum.\n*/\nunittest\n{\n    alias candidate = flip_case;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoazt0djb.d(11): Error: `string` is used as a type

    /tmp/tmpoazt0djb.d(14): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpoazt0djb.d(14): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpoazt0djb.d(15): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmpoazt0djb.d(15): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmpoazt0djb.d(35): Error: no property `indexOf` for type `const(string)`

    /tmp/tmpoazt0djb.d(41): Error: no property `indexOf` for type `const(string)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoazt0djb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ new_string = \"\";\n    foreach(char c; string)\n    {\n        if(isAlpha(c))\
    \ \n        {\n            new_string ~= toLower(c);\n        }\n        else\
    \ \n        {\n            new_string ~= toUpper(c);\n        }\n    }\n    return\
    \ new_string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkaef1b_v.d(11): Error: `string` is used as a type

    /tmp/tmpkaef1b_v.d(14): Error: undefined identifier `isAlpha`

    /tmp/tmpkaef1b_v.d(16): Error: undefined identifier `toLower`

    /tmp/tmpkaef1b_v.d(20): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkaef1b_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  return\
    \ map!((c) => isupper(c) ? tolower(c) : toupper(c))(string);\n}\n/*\nCreate a\
    \ tuple, tup, that contains two elements. The first element should be a tuple,\
    \ and its elements should\nbe 2, 3, and 4. The second element of tup should be\
    \ a tuple, and its elements should be \"python\", \"physics\",\n\"chemistry\"\
    , and \"math\". Display tup.\n*/\nauto tup = tuple(tuple(2, 3, 4), tuple(\"python\"\
    , \"physics\", \"chemistry\", \"math\"));\n/*\n Given the tuple tup = (1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10), produce the list [5, 7, 9].\n */\nauto lst = tup.dropExactly(4).takeExactly(3);\n\
    /*\n Build a list L of integers so that L equals [0, 1, 2, ..., 19].\n */\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnlr82nxe.d(22): Error: no property `dropExactly` for type `Tuple!(Tuple!(int,
    int, int), Tuple!(string, string, string, string))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnlr82nxe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    foreach(character; string) \n    {\n        if(character.isUpper)\
    \ \n        {\n            result ~= character.toLower;\n        } \n        else\
    \ \n        {\n            result ~= character.toUpper;\n        }\n    }\n  \
    \  return result;\n}\n/*\n Write a function called find_minimum_in_rotated_array\
    \ that finds the minimum in a rotated array.\n    >>> find_minimum_in_rotated_array([4,5,6,1,2,3])\n\
    \    1\n*/\nconst(int)[] find_minimum_in_rotated_array(const(int)[] array) \n\
    {\n    if(array.length == 0) \n    {\n        return array;\n    }\n    int min_index\
    \ = 0;\n    for(int index = 1; index < array.length; index++) \n    {\n      \
    \  if(array[index] < array[min_index]) \n        {\n            min_index = index;\n\
    \        }\n    }\n    return array[min_index .. array.length] ~ array[0 .. min_index];\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpip7vm941.d(11): Error: `string` is used as a type

    /tmp/tmpip7vm941.d(14): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpip7vm941.d(16): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpip7vm941.d(20): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpip7vm941.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ flipped = \"\";\n\tforeach(char c; string)\n\t{\n\t\tflipped ~= islower(c) ?\
    \ toupper(c) : tolower(c);\n\t}\n\treturn flipped;\n}\n/*\n For a given string,\
    \ perform an XOR of each character with a given key. \n The key is repeated as\
    \ many times as necessary, so that the string can be represented by an xor_string.\
    \ \n    >>> xor_string(\"Hello\", \"ABCDE\")\n    xor_string(\"Hello\", \"ABCDE\"\
    )\n    >>> xor_string(\"Hello\", \"ABCDE\").to_string()\n    \"Jgnnq\"\n*/\nstruct\
    \ xor_string(T : string)\n{\n\tstring _chars;\n\tthis(string str, string key)\n\
    \t{\n\t\tauto mod = str.length % key.length;\n\t\tauto key_str = key.dup;\n\t\t\
    if(mod != 0)\n\t\t{\n\t\t\tkey_str ~= key[0..mod];\n\t\t}\n\t\tassert(str.length\
    \ == key_str.length);\n\t\t\n\t\tforeach(char c, int i; str)\n\t\t{\n\t\t\t_chars\
    \ ~= c ^ key_str[i];\n\t\t}\n\t}\n\t\n\tsize_t length()\n\t{\n\t\treturn _chars.length;\n\
    \t}\n\t\n\tT to_string()\n\t{\n\t\tT ret;\n\t\tforeach(char c; _chars)\n\t\t{\n\
    \t\t\tret ~= c;\n\t\t}\n\t\treturn ret;\n\t}\n}\n/*\n For a given string, add\
    \ spaces every 3 characters. \n If the number of characters is not divisible by\
    \ 3, add the remainder. \n    >>> string_with_spaces(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    \"abc def ghi jkl mno pqr stu vwx yz\"\n*/\nstring string_with_spaces(string\
    \ string)\n{\n\tstring with_spaces = \"\";\n\tint count = 0;\n\tforeach(char\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdvp7w3vo.d(71): Error: no identifier for declarator `char`

    /tmp/tmpdvp7w3vo.d(71): Error: found `unittest` when expecting `;`

    /tmp/tmpdvp7w3vo.d(79): Error: found `void` when expecting `)`

    /tmp/tmpdvp7w3vo.d(79): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdvp7w3vo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ result = \"\";\n\tforeach(letter; string)\n\t{\n\t\tif(isUpper(letter))\n\t\t\
    {\n\t\t\tresult ~= toLower(letter);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= toUpper(letter);\n\
    \t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeeqhd0tk.d(11): Error: `string` is used as a type

    /tmp/tmpeeqhd0tk.d(14): Error: undefined identifier `isUpper`

    /tmp/tmpeeqhd0tk.d(16): Error: undefined identifier `toLower`

    /tmp/tmpeeqhd0tk.d(20): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeeqhd0tk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    for (char i : string) \n    {\n        if (is_lower(i)) \n    \
    \    {\n            result ~= to_upper(i);\n        } \n        else \n      \
    \  {\n            result ~= to_lower(i);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp19fwrxrb.d(12): Error: semicolon expected, not `:`

    /tmp/tmp19fwrxrb.d(12): Error: expression expected, not `:`

    /tmp/tmp19fwrxrb.d(12): Error: found `string` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp19fwrxrb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.transform!(a => isUpper(a) ? toLower(a) : toUpper(a));\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpduos7fb0.d(11): Error: no property `transform` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpduos7fb0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ map!(({ c: char { c.isLower ? to!char(c.toUpper) : to!char(c.toLower); } }))(string);\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfhquwdut.d(11): Error: no identifier for declarator `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfhquwdut.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  auto\
    \ result = \"\";\n  foreach(c; string)\n  {\n    if(isUpper(c))\n      result\
    \ ~= toLower(c);\n    else\n      result ~= toUpper(c);\n  }\n  return result;\n\
    }\n/*\n Given a string and a length, split the string at the given length and\
    \ return an array of the individual parts.\n    >>> split_at(\"Hello\", 2)\n \
    \   [\"He\", \"ll\", \"o\"]\n    \n*/\nstring[] split_at(string s, size_t n)\n\
    {\n  if(s.length < n)\n    return [s];\n  return [s[0..n], s[n..$]];\n}\n/*\n\
    \ Given a string and a length, split the string at the given length, reverse it,\
    \ and return an array of the individual parts.\n    >>> split_at_reverse(\"Hello\"\
    , 2)\n    [\"l\", \"l\", \"oH\"]\n*/\nstring[] split_at_reverse(string s, size_t\
    \ n)\n{\n  if(s.length < n)\n    return [s];\n  return [s[$-n..$], s[0..$-n]];\n\
    }\n/*\n Given a string, determine if it is a palindrome.\n    >>> is_palindrome(\"\
    hello\")\n    false\n    >>> is_palindrome(\"racecar\")\n    true\n*/\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg7trub_p.d(14): Error: undefined identifier `isUpper`

    /tmp/tmpg7trub_p.d(15): Error: undefined identifier `toLower`

    /tmp/tmpg7trub_p.d(17): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7trub_p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ new_string;\n    new_string.length = string.length;\n    foreach(index, character;\
    \ string) \n    {\n        if(character.isUpper)\n        {\n            new_string[index]\
    \ = toLower(character);\n        }\n        else\n        {\n            new_string[index]\
    \ = toUpper(character);\n        }\n    }\n    return new_string;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpei4u397f.d(11): Error: `string` is used as a type

    /tmp/tmpei4u397f.d(15): Error: no property `isUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpei4u397f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ result;\n\tforeach(c; string)\n\t{\n\t\tif(isUpper(c))\n\t\t\tresult ~= toLower(c);\n\
    \t\telse\n\t\t\tresult ~= toUpper(c);\n\t}\n\treturn result;\n}\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr02ru6xa.d(11): Error: `string` is used as a type

    /tmp/tmpr02ru6xa.d(14): Error: undefined identifier `isUpper`

    /tmp/tmpr02ru6xa.d(15): Error: undefined identifier `toLower`

    /tmp/tmpr02ru6xa.d(17): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr02ru6xa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ result;\n\tfor (int i = 0; i < string.length; i++)\n\t{\n\t\tif (isUpper(string[i]))\n\
    \t\t{\n\t\t\tresult ~= toLower(string[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult\
    \ ~= toUpper(string[i]);\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu9d_o88i.d(11): Error: `string` is used as a type

    /tmp/tmpu9d_o88i.d(14): Error: undefined identifier `isUpper`

    /tmp/tmpu9d_o88i.d(16): Error: undefined identifier `toLower`

    /tmp/tmpu9d_o88i.d(20): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu9d_o88i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ to!string(map!((char c) { return c.isUpper ? toLower(c) : toUpper(c); })(string));\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5xydqag_.d(11): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5xydqag_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    foreach(c; string) \n    {\n        result ~= (c.isAlpha\
    \ && c.isLower) ? c.toUpper : c.toLower;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpime3lvgy.d(11): Error: `string` is used as a type

    /tmp/tmpime3lvgy.d(14): Error: no property `isAlpha` for type `immutable(char)`

    /tmp/tmpime3lvgy.d(14): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmpime3lvgy.d(14): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmpime3lvgy.d(14): Error: no property `toLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpime3lvgy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ string2 = to!string(chomp(string));\n    return to!string(map!(toUpper)(string2));\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9czh9ltt.d(11): Error: `string` is used as a type

    /tmp/tmp9czh9ltt.d(11): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmp9czh9ltt.d(12): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9czh9ltt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flippedString = \"\";\n    foreach(immutable char character; string)\n    {\n\
    \        immutable isUpper = isUpperCase(character);\n        flippedString ~=\
    \ isUpper ? toLowerCase(character) : toUpperCase(character);\n    }\n    return\
    \ flippedString;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppcdnm5ey.d(11): Error: `string` is used as a type

    /tmp/tmppcdnm5ey.d(14): Error: undefined identifier `isUpperCase`

    /tmp/tmppcdnm5ey.d(15): Error: undefined identifier `toLowerCase`

    /tmp/tmppcdnm5ey.d(15): Error: undefined identifier `toUpperCase`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppcdnm5ey.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    result.reserve(string.length);\n    foreach(c; string) \n    {\n\
    \        if (isupper(c)) \n        {\n            c = tolower(c);\n        }\n\
    \        else if (islower(c)) \n        {\n            c = toupper(c);\n     \
    \   }\n        result ~= c;\n    }\n    return result;\n}\n/*\n For a given string,\
    \ count the number of words in it. Words are separated by whitespace.\n    >>>\
    \ word_count(\"A big red fox.\")\n    3\n    \n*/\nsize_t word_count(string string)\
    \ \n{\n    auto words = splitter(string);\n    size_t count = 0;\n    foreach(word;\
    \ words) \n    {\n        count++;\n    }\n    return count;\n}\n/*\n For a given\
    \ string, return a new string that has removed all the vowels.\n    >>> remove_vowels(\"\
    Hello, world!\")\n    \"Hll, wrld!\"\n    \n*/\nstring remove_vowels(string string)\
    \ \n{\n    string result;\n    result.reserve(string.length);\n    foreach(c;\
    \ string) \n    {\n        switch(c) \n        {\n            case 'a':\n    \
    \        case 'e':\n            case 'i':\n            case 'o':\n           \
    \ case 'u':\n            case 'A':\n            case 'E':\n            case 'I':\n\
    \            case 'O':\n            case 'U':\n                break;\n      \
    \      default:\n                result ~= c;\n        }\n    }\n    return result;\n\
    }\n/*\n For a given string, count the number of lowercase and uppercase letters.\n\
    \    >>> case_count(\"Hello, world!\")\n    (8, 3)\n    \n*/\nTuple!(size_t, size_t)\
    \ case_count(string string) \n{\n    size_t upper = 0;\n    size_t lower = 0;\n\
    \    foreach(c; string) \n    {\n        if (isupper(c)) \n        {\n       \
    \     upper++;\n        }\n        else if (isl\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqf54h6sa.d(91): Error: found `unittest` when expecting `)`

    /tmp/tmpqf54h6sa.d(99): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpqf54h6sa.d(99): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqf54h6sa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flipped_case;\n    foreach(char c; string)\n    {\n        if(c.isLower)\n \
    \       {\n            flipped_case ~= c.toUpper;\n        }\n        else if(c.isUpper)\n\
    \        {\n            flipped_case ~= c.toLower;\n        }\n        else\n\
    \        {\n            flipped_case ~= c;\n        }\n    }\n    return flipped_case;\n\
    }\n \n \n/*\n Given a string and a slice of delimiters, return a slice of strings\
    \ (with all the delimiters removed) in the original order.\n    >>> split(\"This\
    \ is a test\", ' ')\n    [\"This\", \"is\", \"a\", \"test\"]\n    >>> split(\"\
    This is a test\", 'aeiou')\n    [\"Th\", \"s \", \"s \", \" t\", \"st\"]\n*/\n\
    string[] split(string string, char[] delimiters) \n{\n    import std.algorithm.searching\
    \ : all, startsWith;\n    auto lower_delimiters = delimiters.map!curry!\"toLower\"\
    (&) | \"\".joiner;\n    auto upper_delimiters = delimiters.map!curry!\"toUpper\"\
    (&) | \"\".joiner;\n    string[] split_string;\n    size_t starting_index = 0;\n\
    \    for(size_t i = 0; i < string.length; i++)\n    {\n        if(string[i].startsWith(lower_delimiters)\
    \ || string[i].startsWith(upper_delimiters))\n        {\n            if(i == starting_index)\n\
    \            {\n                starting_index++;\n            }\n           \
    \ else\n            {\n                split_string ~= string[starting_index..i];\n\
    \                starting_index = i + 1;\n            }\n        }\n    }\n  \
    \  if(starting_index < string.length)\n    {\n        split_string ~= string[starting_index..$];\n\
    \    }\n    return split_string;\n}\n \n \n/*\n Given a string, return a slice\
    \ of strings (with all the delimiters removed) in the original\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6igdtcw9.d(41): Error: multiple ! arguments are not allowed

    /tmp/tmp6igdtcw9.d(41): Error: expression expected, not `)`

    /tmp/tmp6igdtcw9.d(41): Error: found `;` when expecting `,`

    /tmp/tmp6igdtcw9.d(42): Error: expression expected, not `auto`

    /tmp/tmp6igdtcw9.d(42): Error: found `upper_delimiters` when expecting `,`

    /tmp/tmp6igdtcw9.d(42): Error: expression expected, not `=`

    /tmp/tmp6igdtcw9.d(42): Error: found `delimiters` when expecting `,`

    /tmp/tmp6igdtcw9.d(42): Error: multiple ! arguments are not allowed

    /tmp/tmp6igdtcw9.d(42): Error: expression expected, not `)`

    /tmp/tmp6igdtcw9.d(42): Error: found `;` when expecting `,`

    /tmp/tmp6igdtcw9.d(43): Error: found `split_string` when expecting `,`

    /tmp/tmp6igdtcw9.d(43): Error: expression expected, not `;`

    /tmp/tmp6igdtcw9.d(44): Error: found `size_t` when expecting `,`

    /tmp/tmp6igdtcw9.d(44): Error: found `;` when expecting `,`

    /tmp/tmp6igdtcw9.d(45): Error: expression expected, not `for`

    /tmp/tmp6igdtcw9.d(45): Error: found `i` when expecting `,`

    /tm'
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ ret;\n\tforeach(c; string)\n\t{\n\t\tif(isLower(c))\n\t\t\tret ~= toUpper(c);\n\
    \t\telse if(isUpper(c))\n\t\t\tret ~= toLower(c);\n\t\telse\n\t\t\tret ~= c;\n\
    \t}\n\treturn ret;\n}\n/*\nRun a function on each character in a string.\n*/\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd5qx544n.d(11): Error: `string` is used as a type

    /tmp/tmpd5qx544n.d(14): Error: undefined identifier `isLower`

    /tmp/tmpd5qx544n.d(15): Error: undefined identifier `toUpper`

    /tmp/tmpd5qx544n.d(16): Error: undefined identifier `isUpper`

    /tmp/tmpd5qx544n.d(17): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd5qx544n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(character; string) \n    {\n        if(isupper(character))\
    \ \n        {\n            result ~= tolower(character);\n        } \n       \
    \ else \n        {\n            result ~= toupper(character);\n        }\n   \
    \ }\n    return result;\n}\n/*\n    >>> reverse_string(\"Hello\")\n    \"olleH\"\
    \n*/\nstring reverse_string(string string) \n{\n    return string.dup.reverse;\n\
    }\n/*\n    >>> reverse_words(\"Hello World\")\n    \"olleH dlroW\"\n*/\nstring\
    \ reverse_words(string string) \n{\n    return string.splitter.map!(reverse_string).joiner(\"\
    \ \");\n}\n/*\n    >>> capitalize_words(\"hello world\")\n    \"Hello World\"\n\
    */\nstring capitalize_words(string string) \n{\n    string result;\n    auto words\
    \ = string.splitter;\n    bool capitalize = true;\n    foreach(word; words) \n\
    \    {\n        if(capitalize) \n        {\n            word = word.uppercase;\n\
    \            capitalize = false;\n        }\n        if(word == \" \") \n    \
    \    {\n            capitalize = true;\n        }\n        result ~= word;\n \
    \   }\n    return result;\n}\n/*\n    >>> title_case(\"a clash of KINGS\", \"\
    a an the of\")\n    \"A Clash of Kings\"\n*/\nstring title_case(string string,\
    \ string minor_words = \"\") \n{\n    string result;\n    auto words = string.splitter;\n\
    \    auto minor_words_set = minor_words.tolower.splitter.tupleof;\n    bool capitalize\
    \ = true;\n    foreach(word; words) \n    {\n        if(capitalize) \n       \
    \ {\n            word = word.uppercase;\n            capitalize = false;\n   \
    \     } \n        else if(word == \" \") \n        {\n            capitalize =\
    \ true;\n        } \n        else if(minor_words_set.canFind(word.tolower)) \n\
    \        {\n            word = word.t\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzk_95d1a.d(89): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpzk_95d1a.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpzk_95d1a.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpzk_95d1a.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzk_95d1a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    char[]\
    \ flipped;\n    foreach(c; string) {\n        if (isUpper(c)) {\n            flipped\
    \ ~= c.toLower;\n        } else {\n            flipped ~= c.toUpper;\n       \
    \ }\n    }\n    return flipped.idup;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdu6s23z2.d(13): Error: undefined identifier `isUpper`

    /tmp/tmpdu6s23z2.d(14): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpdu6s23z2.d(16): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdu6s23z2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ new_string = \"\";\n\tforeach(s; string)\n\t{\n\t\tif (s.isLower)\n\t\t{\n\t\
    \t\tnew_string ~= s.toUpper;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnew_string ~= s.toLower;\n\
    \t\t}\n\t}\n\treturn new_string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaatai8n9.d(11): Error: `string` is used as a type

    /tmp/tmpaatai8n9.d(14): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmpaatai8n9.d(16): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmpaatai8n9.d(20): Error: no property `toLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaatai8n9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    import\
    \ std.algorithm;\n    import std.ascii;\n    import std.range;\n    import std.string;\n\
    \    import std.traits;\n    import std.typecons;\n    /*\n     * ## Solution\n\
    \     * \n     * Use `std.ascii.isAlpha` to determine if character is alphabetic.\n\
    \     * If so, flip it by using `unaryFun!toupper` or `unaryFun!tolower` on `filter!isAlpha`.\n\
    \     * \n     * Use [`std.ascii.isAlpha`](http://dlang.org/phobos/std_ascii.html#.isAlpha)\
    \ to determine if character is alphabetic.\n     * If so, flip it by using [`unaryFun!toupper`](http://dlang.org/phobos/std_functional.html#.unaryFun)\
    \ or [`unaryFun!tolower`](http://dlang.org/phobos/std_functional.html#.unaryFun)\
    \ on [`filter!isAlpha`](http://dlang.org/phobos/std_algorithm.html#.filter).\n\
    \     * \n     * Note: In `D2`, `std.ascii.isAlpha` is [deprecated](http://dlang.org/phobos/std_ascii.html#.isAlpha)\n\
    \     * and [`std.string.isAlpha`](http://dlang.org/phobos/std_string.html#.isAlpha)\
    \ should be used instead.\n     * \n     * ### Discussion\n     * \n     * `D`\
    \ has two built-in functions `toupper` and `tolower` that operate on a single\
    \ character.\n     * They are restricted to `char` (not `dchar`) and they return\
    \ the uppercase or lowercase form of their argument.\n     * If their argument\
    \ is not a letter, their return value is the same as their argument.\n     * \n\
    \     * Note: `D` is case sensitive so functions like `toupper` and `tolower`\
    \ are in the context of the English alphabet.\n     * \n     *     >>> auto c\
    \ = '\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmuzoifaj.d(17): Error: unterminated /* */ comment

    /tmp/tmpmuzoifaj.d(46): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmuzoifaj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ copy = string.dup;\n    return to!string(copy.map!((char c) { return (isLower(c)\
    \ ? toUpper(c) : toLower(c)); }));\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0lf4f_jx.d(11): Error: `string` is used as a type

    /tmp/tmp0lf4f_jx.d(12): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0lf4f_jx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(character; string)\n    {\n        if (character.isUpper)\n\
    \        {\n            result ~= character.toLower;\n        }\n        else\n\
    \        {\n            result ~= character.toUpper;\n        }\n    }\n    return\
    \ result;\n}\n/*\n For a given string and a sentence, replace the sentence with\
    \ the string.\n    >>> replace_string(\"Hello\", \"World\")\n    \"World\"\n \
    \   \n*/\nstring replace_string(string string, string sentence) \n{\n    return\
    \ string;\n}\n/*\n For a given string, return the number of characters.\n    >>>\
    \ num_chars(\"Hello\")\n    5\n    \n*/\nsize_t num_chars(string string) \n{\n\
    \    return string.length;\n}\n/*\n For a given string, return the first character.\n\
    \    >>> first_char(\"Hello\")\n    \"H\"\n    \n*/\nchar first_char(string string)\
    \ \n{\n    return string[0];\n}\n/*\n For a given string, return the last character.\n\
    \    >>> last_char(\"Hello\")\n    \"o\"\n    \n*/\nchar last_char(string string)\
    \ \n{\n    return string[$-1];\n}\n/*\n For a given string, return the first and\
    \ last character concatenated together.\n    >>> first_and_last(\"Hello\")\n \
    \   \"Ho\"\n    \n*/\nstring first_and_last(string string) \n{\n    return string[0..1];\n\
    }\n/*\n For a given string, return the opposite of the first and last character\
    \ concatenated together.\n    >>> first_and_last_opposite(\"Hello\")\n    \"ol\"\
    \n    \n*/\nstring first_and_last_opposite(string string) \n{\n    return string[$-2..$-1];\n\
    }\n/*\n For a given string, return the middle character.\n    >>> middle_char(\"\
    Hello\")\n    \"l\"\n    \n*/\nchar middle_char(string string) \n{\n    return\
    \ string[1];\n}\n/*\n For a given string, return the opposite of the middle character.\n\
    \    >>> middle_char\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe2b723x5.d(95): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe2b723x5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.map!(s => islower(s) ? toupper(s) : tolower(s)).join;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4kvc64mg.d(11): Error: no property `map` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4kvc64mg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    foreach(immutable\
    \ uchar c; string) \n    {\n        if(isLower(c)) \n        {\n            append(string,\
    \ toUpper(c));\n        } \n        else \n        {\n            append(string,\
    \ toLower(c));\n        }\n    }\n    return string;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy5ictala.d(11): Error: undefined identifier `uchar`

    /tmp/tmpy5ictala.d(13): Error: undefined identifier `isLower`

    /tmp/tmpy5ictala.d(15): Error: undefined identifier `append`

    /tmp/tmpy5ictala.d(19): Error: undefined identifier `append`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy5ictala.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\treturn\
    \ string.map!(\n\t\t(x) {\n\t\t\tif (is_upper(x)) return to_lower(x);\n\t\t\t\
    else return to_upper(x);\n\t\t}\n\t);\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjz2rwb1f.d(11): Error: no property `map` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjz2rwb1f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flipped_case = \"\";\n    foreach(c; string)\n    {\n        flipped_case ~=\
    \ (isUpper(c) ? toLower(c) : toUpper(c));\n    }\n    return flipped_case;\n}\n\
    /*\nReturn a boolean indicating whether or not string is a palindrome.\n    >>>\
    \ is_palindrome(\"Hannah\")\n    True\n    >>> is_palindrome(\"racecar\")\n  \
    \  True\n    >>> is_palindrome(\"hello\")\n    False\n*/\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjp6l8kdi.d(11): Error: `string` is used as a type

    /tmp/tmpjp6l8kdi.d(14): Error: undefined identifier `isUpper`

    /tmp/tmpjp6l8kdi.d(14): Error: undefined identifier `toLower`

    /tmp/tmpjp6l8kdi.d(14): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjp6l8kdi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ ret = \"\";\n    for (int i = 0; i < string.length; i++) \n    {\n        if\
    \ (is_lower(string[i])) \n        {\n            ret ~= to_upper(string[i]);\n\
    \        }\n        else if (is_upper(string[i])) \n        {\n            ret\
    \ ~= to_lower(string[i]);\n        }\n        else \n        {\n            ret\
    \ ~= string[i];\n        }\n    }\n    return ret;\n}\n/*\nFor a given positive\
    \ integer, return the next bigger integer whose digits are a permutation of the\
    \ given integer.\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8kg1wrl.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8kg1wrl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tforeach(x;zip(string,string.toupper))\n\
    \t\tif(x[0].isupper)\n\t\t\tstring[x[1].idup] = tolower(x[0]);\n\t\telse if(x[0].islower)\n\
    \t\t\tstring[x[1].idup] = toupper(x[0]);\n\treturn string;\n}\nunittest\n{\n \
    \   alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n   \
    \ assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent\
    \ delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2scqj4_q.d(11): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2scqj4_q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\t\n\t\
    auto result = string;\n\tfor (size_t i = 0; i < string.length; i++) \n\t{\n\t\t\
    char c = result[i];\n\t\tif (c.isLetter) \n\t\t{\n\t\t\tif (c.isUpper)\n\t\t\t\
    \tresult[i] = c.toLower;\n\t\t\telse\n\t\t\t\tresult[i] = c.toUpper;\n\t\t}\n\t\
    }\n\treturn result;\n}\n/*\n    For a given string, check if it is a palindrome.\n\
    \    A palindrome is a string that reads the same in both directions.\n    >>>\
    \ is_palindrome(\"radar\")\n    True\n    >>> is_palindrome(\"books\")\n    False\n\
    */\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkzt715j.d(16): Error: no property `isLetter` for type `char`

    /tmp/tmpwkzt715j.d(18): Error: no property `isUpper` for type `char`

    /tmp/tmpwkzt715j.d(19): Error: no property `toLower` for type `char`

    /tmp/tmpwkzt715j.d(21): Error: no property `toUpper` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkzt715j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = new string();\n    result.length = string.length;\n    foreach(index,\
    \ character; string)\n    {\n        //Check if the character is uppercase\n \
    \       if (isLower(character))\n        {\n            result[index] = toUpper(character);\n\
    \        }\n        else\n        {\n            result[index] = toLower(character);\n\
    \        }\n    }\n    return result;\n}\n \n \n \n \n/*\n For a given string\
    \ and a defined character width,\n justify the text by inserting newline characters\
    \ to produce a left and right justified string.\n A newline is considered to be\
    \ the '\\n' character.\n    >>> rjustify(5, \"Hello\")\n    \"Hello\\n\"\n   \
    \ >>> rjustify(2, \"Hello\")\n    \"Hello\"\n    >>> rjustify(5, \"Hello\\n\"\
    )\n    \"Hello\\n\"\n    >>> rjustify(6, \"Hello\\n\")\n    \"Hello\\n\"\n*/\n\
    string rjustify(size_t width, string string)\n{\n    size_t line_length = 0;\n\
    \    size_t line_count = 0;\n    size_t index = 0;\n    while (line_length < string.length)\n\
    \    {\n        if (string[index] == '\\n')\n        {\n            line_count++;\n\
    \            line_length++;\n            index++;\n        }\n        else\n \
    \       {\n            if (line_length + width >= string.length)\n           \
    \ {\n                line_count++;\n                break;\n            }\n  \
    \          else\n            {\n                line_length += width;\n      \
    \          line_count++;\n                index += width;\n            }\n   \
    \     }\n    }\n    string result = new string();\n    result.length = string.length\
    \ + line_count;\n    size_t position = 0;\n    line_length = 0;\n    index = 0;\n\
    \    foreach(char; string)\n    {\n        if (char == '\\n')\n        {\n   \
    \         result[position] = char;\n            position++;\n            line_length\
    \ = 0;\n        }\n        else\n        {\n            if (line_\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7kltqd55.d(77): Error: no identifier for declarator `char`

    /tmp/tmp7kltqd55.d(79): Error: found `==` when expecting `.` following char

    /tmp/tmp7kltqd55.d(79): Error: found `10U` when expecting identifier following
    `char`.

    /tmp/tmp7kltqd55.d(81): Error: found `;` when expecting `.` following char

    /tmp/tmp7kltqd55.d(88): Error: found `unittest` when expecting `)`

    /tmp/tmp7kltqd55.d(96): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp7kltqd55.d(96): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp7kltqd55.d(96): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7kltqd55.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ ret=\"\";\n\tforeach(index, c; string)\n\t{\n\t\tif(c.isUpper())\n\t\t\tret\
    \ ~= c.toLower();\n\t\telse if(c.isLower())\n\t\t\tret ~= c.toUpper();\n\t\telse\n\
    \t\t\tret ~= c;\n\t}\n\treturn ret;\n}\n/*\nReturn the amount of times needle\
    \ appears in the haystack.\n    >>> count_substring(\"This is a test string\"\
    , \"is\")\n    2\n*/\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9sejj9nt.d(11): Error: `string` is used as a type

    /tmp/tmp9sejj9nt.d(14): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmp9sejj9nt.d(15): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmp9sejj9nt.d(16): Error: no property `isLower` for type `immutable(char)`

    /tmp/tmp9sejj9nt.d(17): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9sejj9nt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    foreach(index, char c; string)\n    {\n        char newC\
    \ = c;\n        if(std.string.isLower(c))\n        {\n            newC = toupper(c);\n\
    \        }\n        else if(std.string.isUpper(c))\n        {\n            newC\
    \ = tolower(c);\n        }\n        result ~= newC;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppirhp5lg.d(11): Error: `string` is used as a type

    /tmp/tmppirhp5lg.d(15): Error: undefined identifier `string` in package `std`

    /tmp/tmppirhp5lg.d(17): Error: undefined identifier `toupper`

    /tmp/tmppirhp5lg.d(19): Error: undefined identifier `string` in package `std`

    /tmp/tmppirhp5lg.d(21): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppirhp5lg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.translate(['a':'A', 'A':'a', 'b':'B', 'B':'b', 'c':'C', 'C':'c', 'd':'D',\
    \ 'D':'d',\n    'e':'E', 'E':'e', 'f':'F', 'F':'f', 'g':'G', 'G':'g', 'h':'H',\
    \ 'H':'h', 'i':'I', 'I':'i',\n    'j':'J', 'J':'j', 'k':'K', 'K':'k', 'l':'L',\
    \ 'L':'l', 'm':'M', 'M':'m', 'n':'N', 'N':'n',\n    'o':'O', 'O':'o', 'p':'P',\
    \ 'P':'p', 'q':'Q', 'Q':'q', 'r':'R', 'R':'r', 's':'S', 'S':'s',\n    't':'T',\
    \ 'T':'t', 'u':'U', 'U':'u', 'v':'V', 'V':'v', 'w':'W', 'W':'w', 'x':'X', 'X':'x',\n\
    \    'y':'Y', 'Y':'y', 'z':'Z', 'Z':'z']);\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6eifgocw.d(11): Error: no property `translate` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6eifgocw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ map!((char ch) => isLower(ch) ? toUpper(ch) : toLower(ch))(string);\n}\n/*\n\
    \ For a given string, remove all vowels.\n    >>> remove_vowels(\"Hello\")\n \
    \   \"Hll\"\n    \n*/\nstring remove_vowels(string string) \n{\n    return filter!((char\
    \ ch) => !isVowel(ch))(string);\n}\n/*\n For a given string, reverse the characters.\n\
    \    >>> reverse(\"Hello\")\n    \"olleH\"\n    \n*/\nstring reverse(string string)\
    \ \n{\n    return string.dup.reverse;\n}\n/*\n For a given string, convert first\
    \ word to uppercase.\n    >>> capitalize(\"hello world\")\n    \"Hello world\"\
    \n    \n*/\nstring capitalize(string string) \n{\n    return string.split(' ')[0].toUpper()\
    \ ~ ' ' ~ string.split(' ')[1];\n}\n/*\n For a given string, return a string where\
    \ for every char in the original, there are two chars.\n    >>> double_char(\"\
    The\")\n    \"TThhee\"\n    \n*/\nstring double_char(string string) \n{\n    return\
    \ join(map!((char ch) => ch ~ ch)(string));\n}\n/*\n For a given string, return\
    \ true if it ends in \"ly\".\n    >>> ends_ly(\"oddly\")\n    true\n    >>> ends_ly(\"\
    y\")\n    false\n    >>> ends_ly(\"oddy\")\n    false\n    \n*/\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy6rqc8bp.d(11): Error: template instance `map!((char ch) => isLower(ch)
    ? toUpper(ch) : toLower(ch))` template `map` is not defined

    /tmp/tmpy6rqc8bp.d(21): Error: template instance `filter!((char ch) => !isVowel(ch))`
    template `filter` is not defined

    /tmp/tmpy6rqc8bp.d(41): Error: no property `split` for type `string`

    /tmp/tmpy6rqc8bp.d(41): Error: no property `split` for type `string`

    /tmp/tmpy6rqc8bp.d(51): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy6rqc8bp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string.transform!(c\
    \ => to!(char)(c ^ ' '));\n    return string;\n}\n/*\n    \n    For a given string\
    \ and key, create a Caesar cypher.\n        >>> encode(\"Hello\", 4)\n       \
    \ \"Lipps\"\n        >>> encode(\"Hello\", -4)\n        \"Ebiil\"\n    Hint: You\
    \ can store the characters in a string and index it.\n*/\nstring encode(string\
    \ string, int key) \n{\n    string.transform!(c => to!(char)(c + key));\n    return\
    \ string;\n}\n/*\n    You are given a list of words. Any word in words that is\
    \ an anagram of a word in abbr is replaced with the abbreviation.\n    Hint: A\
    \ word is an anagram of another word if they have the same letters but in a different\
    \ order.\n        >>> abbreviation([\"Nope!\", \"No\", \"Nah\"], [\"n.\", \"o.\"\
    , \"h.\"])\n        [\"Nope!\", \"o.\", \"h.\"]\n        >>> abbreviation([\"\
    Hip\", \"Hop\", \"Hooray\"], [\"h.\", \"o.\", \"y.\"])\n        [\"h.\", \"o.\"\
    , \"y.\"]\n*/\nstring[] abbreviation(string[] words, string[] abbr) \n{\n    import\
    \ std.algorithm : map;\n    import std.array : array;\n    auto lookup = abbr.map!(s\
    \ => s.idup).array;\n    for (int i = 0; i < words.length; i++)\n    {\n     \
    \   auto word = words[i].idup;\n        sort(word);\n        if (lookup.indexOf(word)\
    \ != -1)\n        {\n            words[i] = abbr[lookup.indexOf(word)];\n    \
    \    }\n    }\n    return words;\n}\n/*\n    Given a list of lists and an integer,\
    \ return all the combinations of elements that sum to that integer.\n    >>> combinations([[2,\
    \ 3, 1], [2, 4], [5, 1]], 5)\n    [[2, 3], [2, 4], [5, 1]]\n    >>> combinations([[3,\
    \ 2, 4], [2, 5, 1], [\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoxkraiiu.d(52): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoxkraiiu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    foreach(x;\
    \ string)\n    {\n        import std.uni;\n        if(isAlpha(x))\n        {\n\
    \            x = toLower(x);\n        }\n        else\n        {\n           \
    \ x = toUpper(x);\n        }\n    }\n    return string;\n}\n/*\n  \n  For a given\
    \ string, return all possible substrings.\n    >>> substrings(\"abc\")\n    [\"\
    a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    >>> substrings(\"aaa\")\n   \
    \ [\"a\", \"aa\", \"aaa\", \"aa\", \"a\"]\n    \n*/\nstring[] substrings(string\
    \ string)\n{\n    string[] substrings;\n    auto size = string.length;\n    for(int\
    \ i = 0; i < size; i++)\n    {\n        string temp = \"\";\n        for(int j\
    \ = i; j < size; j++)\n        {\n            temp ~= string[j];\n           \
    \ substrings ~= temp;\n        }\n    }\n    return substrings;\n}\n/*\n  Return\
    \ the intersection of two sets.\n    >>> intersection([1, 2, 3], [2, 3, 4])\n\
    \    [2, 3]\n*/\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwsw9tiih.d(16): Error: cannot modify `immutable` expression `x`

    /tmp/tmpwsw9tiih.d(20): Error: cannot modify `immutable` expression `x`

    /tmp/tmpwsw9tiih.d(36): Error: `string` is used as a type

    /tmp/tmpwsw9tiih.d(40): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwsw9tiih.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163946
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    /*\n\
    \    char flip(char c)\n    {\n        if (is_upper(c))\n            return to_lower(c);\n\
    \        else\n            return to_upper(c);\n    }\n    string flipped = map!\"\
    flip\"(string);\n    */\n    return flipped;\n}\n// flip_case(\"Hello\")\n \n\
    // flip_case(\"hELLO\")\n// flip_case(\"HeLlO\")\n \nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4uaz3kd4.d(21): Error: undefined identifier `flipped`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4uaz3kd4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flipped_string;\n    foreach(ch; string)\n    {\n        if(isupper(ch))\n \
    \       {\n            flipped_string ~= tolower(ch);\n        }\n        else\
    \ if(islower(ch))\n        {\n            flipped_string ~= toupper(ch);\n   \
    \     }\n        else\n        {\n            flipped_string ~= ch;\n        }\n\
    \    }\n    return flipped_string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8wgbc2j8.d(11): Error: `string` is used as a type

    /tmp/tmp8wgbc2j8.d(14): Error: undefined identifier `isupper`

    /tmp/tmp8wgbc2j8.d(16): Error: undefined identifier `tolower`

    /tmp/tmp8wgbc2j8.d(18): Error: undefined identifier `islower`

    /tmp/tmp8wgbc2j8.d(20): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8wgbc2j8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    foreach(char\
    \ c; string)\n    {\n        if(isUpper(c))\n            c = toLower(c);\n   \
    \     else if(isLower(c))\n            c = toUpper(c);\n    }\n    return string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeetcigvk.d(13): Error: undefined identifier `isUpper`

    /tmp/tmpeetcigvk.d(14): Error: undefined identifier `toLower`

    /tmp/tmpeetcigvk.d(15): Error: undefined identifier `isLower`

    /tmp/tmpeetcigvk.d(16): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeetcigvk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    import\
    \ std.string;\n    return to !string(map!(toUpperLower)(string));\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3brih52l.d(12): Error: template instance `to!string` template `to`
    is not defined, did you mean tr(C1, C2, C3, C4 = immutable(char))(C1[] str, const(C2)[]
    from, const(C3)[] to, const(C4)[] modifiers = null)?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3brih52l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163946
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ result = \"\";\n\tforeach(wchar c; string)\n\t{\n\t\tif (c.isUpper)\n\t\t\t\
    result ~= c.toLower;\n\t\telse\n\t\t\tresult ~= c.toUpper;\n\t}\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbn8b9u90.d(11): Error: `string` is used as a type

    /tmp/tmpbn8b9u90.d(14): Error: no property `isUpper` for type `wchar`

    /tmp/tmpbn8b9u90.d(15): Error: no property `toLower` for type `wchar`

    /tmp/tmpbn8b9u90.d(17): Error: no property `toUpper` for type `wchar`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbn8b9u90.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(c; string)\n    {\n        if(c.isUpper)\n            result\
    \ ~= c.toLower;\n        else\n            result ~= c.toUpper;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcn9redgl.d(11): Error: `string` is used as a type

    /tmp/tmpcn9redgl.d(14): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpcn9redgl.d(15): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpcn9redgl.d(17): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcn9redgl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    foreach(char; string) \n    {\n        if (isUpper(char))\
    \ \n        {\n            result ~= toLower(char);\n        }\n        else if\
    \ (isLower(char)) \n        {\n            result ~= toUpper(char);\n        }\n\
    \        else \n        {\n            result ~= char;\n        }\n    }\n   \
    \ return result;\n}\n/*\n Take a list of points and return the area of the polygon\
    \ they describe.\n    >>> area([(1,1), (2,1), (2,2), (1,2)])\n    1\n    \n*/\n\
    float area(Point[] points) \n{\n    float result = 0;\n    Point[] convex_hull\
    \ = graham_scan(points);\n    for (int i = 0; i < convex_hull.length; i++) \n\
    \    {\n        int next = (i + 1) % convex_hull.length;\n        result += cross(convex_hull[i],\
    \ convex_hull[next]);\n    }\n    return abs(result) / 2;\n}\n/*\n Return whether\
    \ two lines intersect.\n    >>> do_lines_intersect(((0,0), (1,1)), ((1,0), (0,1)))\n\
    \    true\n    >>> do_lines_intersect(((0,0), (1,1)), ((1,0), (2,1)))\n    false\n\
    \    \n*/\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz_zmvej_.d(12): Error: no identifier for declarator `char`

    /tmp/tmpz_zmvej_.d(14): Error: found `)` when expecting `.` following char

    /tmp/tmpz_zmvej_.d(14): Error: found `)` when expecting identifier following `char`.

    /tmp/tmpz_zmvej_.d(15): Error: found `{` when expecting `,`

    /tmp/tmpz_zmvej_.d(16): Error: found `)` when expecting `.` following char

    /tmp/tmpz_zmvej_.d(16): Error: found `;` when expecting identifier following `char`.

    /tmp/tmpz_zmvej_.d(17): Error: found `}` when expecting `,`

    /tmp/tmpz_zmvej_.d(18): Error: expression expected, not `else`

    /tmp/tmpz_zmvej_.d(18): Error: found `if` when expecting `,`

    /tmp/tmpz_zmvej_.d(18): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpz_zmvej_.d(20): Error: found `)` when expecting `.` following char

    /tmp/tmpz_zmvej_.d(20): Error: found `;` when expecting identifier following `char`.

    /tmp/tmpz_zmvej_.d(21): Error: found `}` when expecting `,`

    /tmp/tmpz_zmvej_.d(22): Error: expression expected,'
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tchar[]\
    \ str = to!(char[])(string);\n\tfor (int i = 0; i < str.length; i++)\n\t{\n\t\t\
    if (str[i] <= 90 && str[i] >= 65) \n\t\t{\n\t\t\tstr[i] = to!(char)(str[i] + 32);\n\
    \t\t}\n\t\telse if (str[i] <= 122 && str[i] >= 97)\n\t\t{\n\t\t\tstr[i] = to!(char)(str[i]\
    \ - 32);\n\t\t}\n\t}\n\treturn to!string(str);\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnjznkmki.d(11): Error: template instance `to!(char[])` template
    `to` is not defined, did you mean No?

    /tmp/tmpnjznkmki.d(16): Error: template instance `to!char` template `to` is not
    defined, did you mean No?

    /tmp/tmpnjznkmki.d(20): Error: template instance `to!char` template `to` is not
    defined, did you mean No?

    /tmp/tmpnjznkmki.d(23): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnjznkmki.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163946
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(c; string)\n    {\n        if(isUpper(c))\n           \
    \ result ~= toLower(c);\n        else\n            result ~= toUpper(c);\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7duvzfgz.d(11): Error: `string` is used as a type

    /tmp/tmp7duvzfgz.d(14): Error: undefined identifier `isUpper`

    /tmp/tmp7duvzfgz.d(15): Error: undefined identifier `toLower`

    /tmp/tmp7duvzfgz.d(17): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7duvzfgz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163946
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  ubyte[]\
    \ result = new ubyte[string.length];\n  foreach (i, ch; string)\n    result[i]\
    \ = (ch.isUpper ? ch.toLower : ch.toUpper);\n  return cast(string) result;\n}\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2zv2zpsg.d(13): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmp2zv2zpsg.d(13): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmp2zv2zpsg.d(13): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmp2zv2zpsg.d(14): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2zv2zpsg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tforeach(c;\
    \ string)\n\t{\n\t\tif (isUpper(c)) string.replace(c, toLower(c));\n\t\telse if\
    \ (isLower(c)) string.replace(c, toUpper(c));\n\t}\n\treturn string;\n}\n/*\n\
    \ For a given string, if the first or last chars are 'x', return the string without\
    \ those 'x' chars, and otherwise return the string unchanged.\n    >>> without_x(\"\
    xHix\")\n    \"Hi\"\n    >>> without_x(\"xHi\")\n    \"Hi\"\n    >>> without_x(\"\
    Hxix\")\n    \"Hxi\"\n*/\nstring without_x(string string) \n{\n\tif (string.length)\n\
    \t{\n\t\tif (string[0] == 'x') string = string[1..$];\n\t\tif (string.length &&\
    \ string[$-1] == 'x') string = string[0..$-2];\n\t}\n\treturn string;\n}\n/*\n\
    \ Given two strings, a and b, create a bigger string made of the first char of\
    \ a, the first char of b, the second char of a, the second char of b, and so on.\
    \ Any leftover chars go at the end of the result.\n    >>> mix_string(\"abc\"\
    , \"xyz\")\n    \"axbycz\"\n*/\nstring mix_string(string a, string b) \n{\n\t\
    string result;\n\tint max_length = max(a.length, b.length);\n\tforeach(i; 0..max_length)\n\
    \t{\n\t\tif (i < a.length) result ~= a[i];\n\t\tif (i < b.length) result ~= b[i];\n\
    \t}\n\treturn result;\n}\n/*\n Given a string and an int n, return a string made\
    \ of the first and last n chars from the string. The string length will be at\
    \ least n.\n    >>> first_last(\"Hello\", 2)\n    \"Helo\"\n    >>> first_last(\"\
    Chocolate\", 3)\n    \"Choate\"\n*/\nstring first_last(string string, int n) \n\
    {\n\tstring result;\n\tif (n <=\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8_56ulog.d(63): Error: expression expected, not `unittest`

    /tmp/tmp8_56ulog.d(64): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8_56ulog.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    foreach(i,\
    \ c; string)\n    {\n        string[i] = to!string(c).toupper == c ? to!string(c).tolower\
    \ : to!string(c).toupper;\n    }\n    return string;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvtmlfse3.d(13): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpvtmlfse3.d(13): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpvtmlfse3.d(13): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvtmlfse3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163946
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.transform!((char c)=>c>='a'&&c<='z'?toUpper(c):(c>='A'&&c<='Z'?toLower(c):c)).idup;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6_1r87qn.d(11): Error: no property `transform` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_1r87qn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    \n\
    \    string temp;\n    foreach(s; string)\n    {\n        if(!isAlpha(s))\n  \
    \      {\n            temp ~= s;\n        }\n        else if(isUpper(s))\n   \
    \     {\n            temp ~= lower(s);\n        }\n        else\n        {\n \
    \           temp ~= upper(s);\n        }\n    }\n    return temp;\n}\n/*\nGiven\
    \ a string, return the rotation of the string by n places.\nThe string \"abcd\"\
    \ is rotated to \"dabc\" when n is 3.\nNote:\nn is an integer.\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyoor5tzu.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyoor5tzu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  auto\
    \ n = string.length;\n  char[] array = new char[n];\n  for (uint i = 0; i < n;\
    \ i++)\n  {\n    //if(string[i] == ' ')\n    if(std.string.toupper(string[i])\
    \ == ' ')\n      array[i] = ' ';\n    else\n      array[i] = std.string.toupper(string[i]);\n\
    \  }\n  return array.idup;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnusx17tn.d(16): Error: undefined identifier `string` in package
    `std`

    /tmp/tmpnusx17tn.d(19): Error: undefined identifier `string` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnusx17tn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163946
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    foreach(c; string)\n    {\n        if(isUpper(c))\n    \
    \        result ~= toLower(c);\n        else if(isLower(c))\n            result\
    \ ~= toUpper(c);\n        else\n            result ~= c;\n    }\n    return result;\n\
    }\n/*\n Create a function that converts all strings in a list to lowercase.\n\
    \    >>> set_lowercase([\"Hello\", \"World\"])\n    [\"hello\", \"world\"]\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpst32kng4.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpst32kng4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    foreach(c; string) \n    {\n        if (c.isUpper) \n        {\n\
    \            result ~= c.toLower;\n        }\n        else \n        {\n     \
    \       result ~= c.toUpper;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmlvwcnen.d(11): Error: `string` is used as a type

    /tmp/tmpmlvwcnen.d(14): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpmlvwcnen.d(16): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpmlvwcnen.d(20): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmlvwcnen.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163946
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ new_string;\n    new_string.reserve(string.length);\n    for (immutable int\
    \ i = 0; i < string.length; i++)\n    {\n        if (string[i] >= 'a' && string[i]\
    \ <= 'z')\n        {\n            new_string ~= toupper(string[i]);\n        }\n\
    \        else if (string[i] >= 'A' && string[i] <= 'Z')\n        {\n         \
    \   new_string ~= tolower(string[i]);\n        }\n        else\n        {\n  \
    \          new_string ~= string[i];\n        }\n    }\n    return new_string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx7cwcufl.d(11): Error: `string` is used as a type

    /tmp/tmpx7cwcufl.d(13): Error: cannot modify `immutable` expression `0`

    /tmp/tmpx7cwcufl.d(17): Error: undefined identifier `toupper`

    /tmp/tmpx7cwcufl.d(21): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx7cwcufl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163946
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    auto\
    \ res = new string();\n    auto len = string.length;\n    foreach(idx, char; string)\n\
    \    {\n        if (char.isLower)\n            res ~= char.toUpper;\n        else\n\
    \            res ~= char.toLower;\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0trxuzu.d(13): Error: no identifier for declarator `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0trxuzu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163945
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flipped;\n    foreach(c; string)\n    {\n        if (isUpper(c))\n         \
    \   flipped ~= toLower(c);\n        else\n            flipped ~= toUpper(c);\n\
    \    }\n    return flipped;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu71sstjm.d(11): Error: `string` is used as a type

    /tmp/tmpu71sstjm.d(14): Error: undefined identifier `isUpper`

    /tmp/tmpu71sstjm.d(15): Error: undefined identifier `toLower`

    /tmp/tmpu71sstjm.d(17): Error: undefined identifier `toUpper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu71sstjm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163946
