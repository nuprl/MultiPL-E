name: HumanEval_64_vowels_count
language: d
prompt: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
  \ representing\n    a word as input and returns the number of vowels in the string.\n\
  \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel,\
  \ but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"\
  abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n    3L\n    \n*/\nlong vowels_count(string\
  \ s) \n"
tests: "unittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
  abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
  key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\"\
  ) == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\"\
  ) == 3L);\n}\nvoid main(){}"
completions: ["{\n    long c = 0;\n    for (size_t i = 0; i < s.length; i++) \n  \
    \  {\n        if (tolower(s[i]) == 'a' || tolower(s[i]) == 'e' || tolower(s[i])\
    \ == 'i' || tolower(s[i]) == 'o' || tolower(s[i]) == 'u') \n        {\n      \
    \      c += 1;\n        }\n    }\n    if (tolower(s[s.length - 1]) == 'y') \n\
    \    {\n        c += 1;\n    }\n    return c;\n}", "{\n    // TODO: implement\
    \ this function\n    long count=0;\n    foreach(c; s)\n    {\n        //cast(char)c\
    \ compiles but it does not work\n        if(tolower(c)=='a' || tolower(c)=='e'\
    \ || tolower(c)=='i' || tolower(c)=='o' || tolower(c)=='u')\n        {\n     \
    \       count++;\n        }\n    }\n    if(tolower(s[$-1])=='y')\n    {\n    \
    \    count++;\n    }\n    return count;\n}", "{\n    long i, count;\n    count\
    \ = 0;\n    for (i = 0; i < s.length; i++) \n    {\n        if ((s[i] == 'a')\
    \ || (s[i] == 'e') || (s[i] == 'i') ||\n        (s[i] == 'o') || (s[i] == 'u')\
    \ || (s[i] == 'y')) \n        {\n            count++;\n        }\n    }\n    if\
    \ ((s[s.length - 1] == 'y') && (s.length >= 2)) \n    {\n        count--;\n  \
    \  }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c; s)\n\
    \    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\
    \ c == 'y')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n\tlong vowelsCount = 0;\n\tforeach(dchar ch; s)\n\t{\n\t\tif((ch == 'a'\
    \ || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') || (ch == 'y' && s.length\
    \ == s.countUntil(ch)))\n\t\t{\n\t\t\tvowelsCount++;\n\t\t}\n\t}\n\treturn vowelsCount;\n\
    }", "{\n    long ret = 0;\n    foreach(char c; s)\n    {\n        switch(tolower(c))\n\
    \        {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n                ret += 1;\n   \
    \             break;\n            case 'y':\n                if(s[1] == 0)\n \
    \                   ret += 1;\n                break;\n        }\n    }\n    return\
    \ ret;\n}\n/*\nWrite a function com_vowels_count which takes two strings as input\n\
    \    and returns the number of common vowels in them.\n    A common vowel is a\
    \ vowel which is present in both the words.", "{\n\tlong result = 0;\n\tforeach(i,\
    \ ch; s)\n\t{\n\t\tif(i == s.length - 1)\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e'\
    \ || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'y')\n\t\t\t\tresult++;\n\t\t\
    }\n\t\telse\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o'\
    \ || ch == 'u')\n\t\t\t\tresult++;\n\t\t}\n\t}\n\treturn result;\n}", "{\n   \
    \ long count = 0;\n    foreach(char c; s)\n    {\n        switch(tolower(c))\n\
    \        {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n            case 'y':\n       \
    \         count++;\n                break;\n        }\n    }\n    return count;\n\
    }", "{\n\tlong n = 0;\n\tforeach(const char c; s) {\n\t\tif(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' ||\n\t\t   c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U')\n\t\t\tn++;\n\t}\n\treturn n;\n}\n/*\nWrite a function\
    \ sorted_string_list which takes a list of strings\n    as input and returns a\
    \ sorted version of the list. Sorting should\n    be done based on the length\
    \ of the strings, shorter strings should\n    come before longer strings. If two\
    \ strings have the same length,\n    they should be sorted in alphabetical order.",
  "{\n    long count = 0;\n    foreach(char c; s)\n    {\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n        {\n       \
    \     count += 1;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(ch; s)\n    {\n        switch(ch)\n        {\n           \
    \ case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n\
    \            case 'u':\n            case 'y':\n                count++;\n    \
    \            break;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(i, c; s)\n    {\n        switch(tolower(c))\n        {\n \
    \           case 'a': case 'e': case 'i': case 'o': case 'u': case 'y':\n    \
    \            count++;\n                break;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(c; s)\n    {\n        switch(c)\n   \
    \     {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n            case 'y':\n       \
    \         count++;\n                break;\n        }\n    }\n    return count;\n\
    }", "{\n     auto vowels = \"aeiouy\";", "{\n    long num = 0;\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' ||\n           c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        {\n            num += 1;\n        }\n    }\n    if(s[$-1] == 'y' || s[$-1]\
    \ == 'Y')\n    {\n        num += 1;\n    }\n    return num;\n}", "{\n    s = toLower(s);\n\
    \    long count = 0;\n    foreach(char c; s) \n    {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            count++;\n    }\n\
    \    return count;\n}", "{\n    long result = 0;\n    for (long i = 0; i < s.length;\
    \ i++)\n    {\n        char c = tolower(s[i]);\n        if ((c == 'a')||(c ==\
    \ 'e')||(c == 'i')||(c == 'o')||(c == 'u'))\n        {\n            result +=\
    \ 1;\n        }\n    }\n    return result;\n}", "{\n    \n    long vowels = 0;\n\
    \    for (int i = 0; i < length(s); i++) \n    {\n        if (tolower(s[i]) ==\
    \ 'a' || tolower(s[i]) == 'e' || tolower(s[i]) == 'i' || tolower(s[i]) == 'o'\
    \ || tolower(s[i]) == 'u')\n        {\n            vowels++;\n        }\n    \
    \    else if (tolower(s[i]) == 'y' && i == length(s) - 1)\n        {\n       \
    \     vowels++;\n        }\n    }\n    return vowels;\n}", "{\n    long count\
    \ = 0;\n    for (long i = 0; i < s.length; i++)\n    {\n        if (s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n  \
    \          count++;\n        }\n        else if (s[i] == 'y' && i == s.length\
    \ - 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    // transform string to lowercase.\n    s = s.toLower();\n    // initialize\
    \ a counter, and set it to 0.\n    long counter = 0;\n    // loop through all\
    \ the characters in the string.\n    foreach(char c; s)\n    {\n        // check\
    \ if character is a vowel.\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' || c == 'y')\n        {\n            // add one to the counter.\n\
    \            counter++;\n        }\n    }\n    // return the number of vowels\
    \ in the string.\n    return counter;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
