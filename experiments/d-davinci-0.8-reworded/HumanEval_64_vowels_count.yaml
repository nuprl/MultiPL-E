name: HumanEval_64_vowels_count
language: d
prompt: "import std.math;\n/*\nWrite a function vowels_count which takes a string\
  \ representing\n    a word as input and returns the number of vowels in the string.\n\
  \    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel,\
  \ but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"\
  abcde\")\n    2L\n    >>> vowels_count(\"ACEDY\")\n    3L\n    \n*/\nlong vowels_count(string\
  \ s) \n"
tests: "unittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"\
  abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"\
  key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\"\
  ) == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\"\
  ) == 3L);\n}\nvoid main(){}"
completions: ["{\n    long c = 0;\n    for (size_t i = 0; i < s.length; i++) \n  \
    \  {\n        if (tolower(s[i]) == 'a' || tolower(s[i]) == 'e' || tolower(s[i])\
    \ == 'i' || tolower(s[i]) == 'o' || tolower(s[i]) == 'u') \n        {\n      \
    \      c += 1;\n        }\n    }\n    if (tolower(s[s.length - 1]) == 'y') \n\
    \    {\n        c += 1;\n    }\n    return c;\n}", "{\n    // TODO: implement\
    \ this function\n    long count=0;\n    foreach(c; s)\n    {\n        //cast(char)c\
    \ compiles but it does not work\n        if(tolower(c)=='a' || tolower(c)=='e'\
    \ || tolower(c)=='i' || tolower(c)=='o' || tolower(c)=='u')\n        {\n     \
    \       count++;\n        }\n    }\n    if(tolower(s[$-1])=='y')\n    {\n    \
    \    count++;\n    }\n    return count;\n}", "{\n    long i, count;\n    count\
    \ = 0;\n    for (i = 0; i < s.length; i++) \n    {\n        if ((s[i] == 'a')\
    \ || (s[i] == 'e') || (s[i] == 'i') ||\n        (s[i] == 'o') || (s[i] == 'u')\
    \ || (s[i] == 'y')) \n        {\n            count++;\n        }\n    }\n    if\
    \ ((s[s.length - 1] == 'y') && (s.length >= 2)) \n    {\n        count--;\n  \
    \  }\n    return count;\n}", "{\n    long count = 0;\n    foreach(char c; s)\n\
    \    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\
    \ c == 'y')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n\tlong vowelsCount = 0;\n\tforeach(dchar ch; s)\n\t{\n\t\tif((ch == 'a'\
    \ || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') || (ch == 'y' && s.length\
    \ == s.countUntil(ch)))\n\t\t{\n\t\t\tvowelsCount++;\n\t\t}\n\t}\n\treturn vowelsCount;\n\
    }", "{\n    long ret = 0;\n    foreach(char c; s)\n    {\n        switch(tolower(c))\n\
    \        {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n                ret += 1;\n   \
    \             break;\n            case 'y':\n                if(s[1] == 0)\n \
    \                   ret += 1;\n                break;\n        }\n    }\n    return\
    \ ret;\n}\n/*\nWrite a function com_vowels_count which takes two strings as input\n\
    \    and returns the number of common vowels in them.\n    A common vowel is a\
    \ vowel which is present in both the words.", "{\n\tlong result = 0;\n\tforeach(i,\
    \ ch; s)\n\t{\n\t\tif(i == s.length - 1)\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e'\
    \ || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'y')\n\t\t\t\tresult++;\n\t\t\
    }\n\t\telse\n\t\t{\n\t\t\tif(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o'\
    \ || ch == 'u')\n\t\t\t\tresult++;\n\t\t}\n\t}\n\treturn result;\n}", "{\n   \
    \ long count = 0;\n    foreach(char c; s)\n    {\n        switch(tolower(c))\n\
    \        {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n            case 'y':\n       \
    \         count++;\n                break;\n        }\n    }\n    return count;\n\
    }", "{\n\tlong n = 0;\n\tforeach(const char c; s) {\n\t\tif(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' ||\n\t\t   c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U')\n\t\t\tn++;\n\t}\n\treturn n;\n}\n/*\nWrite a function\
    \ sorted_string_list which takes a list of strings\n    as input and returns a\
    \ sorted version of the list. Sorting should\n    be done based on the length\
    \ of the strings, shorter strings should\n    come before longer strings. If two\
    \ strings have the same length,\n    they should be sorted in alphabetical order.",
  "{\n    long count = 0;\n    foreach(char c; s)\n    {\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n        {\n       \
    \     count += 1;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(ch; s)\n    {\n        switch(ch)\n        {\n           \
    \ case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n\
    \            case 'u':\n            case 'y':\n                count++;\n    \
    \            break;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(i, c; s)\n    {\n        switch(tolower(c))\n        {\n \
    \           case 'a': case 'e': case 'i': case 'o': case 'u': case 'y':\n    \
    \            count++;\n                break;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(c; s)\n    {\n        switch(c)\n   \
    \     {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n            case 'y':\n       \
    \         count++;\n                break;\n        }\n    }\n    return count;\n\
    }", "{\n     auto vowels = \"aeiouy\";", "{\n    long num = 0;\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' ||\n           c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        {\n            num += 1;\n        }\n    }\n    if(s[$-1] == 'y' || s[$-1]\
    \ == 'Y')\n    {\n        num += 1;\n    }\n    return num;\n}", "{\n    s = toLower(s);\n\
    \    long count = 0;\n    foreach(char c; s) \n    {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            count++;\n    }\n\
    \    return count;\n}", "{\n    long result = 0;\n    for (long i = 0; i < s.length;\
    \ i++)\n    {\n        char c = tolower(s[i]);\n        if ((c == 'a')||(c ==\
    \ 'e')||(c == 'i')||(c == 'o')||(c == 'u'))\n        {\n            result +=\
    \ 1;\n        }\n    }\n    return result;\n}", "{\n    \n    long vowels = 0;\n\
    \    for (int i = 0; i < length(s); i++) \n    {\n        if (tolower(s[i]) ==\
    \ 'a' || tolower(s[i]) == 'e' || tolower(s[i]) == 'i' || tolower(s[i]) == 'o'\
    \ || tolower(s[i]) == 'u')\n        {\n            vowels++;\n        }\n    \
    \    else if (tolower(s[i]) == 'y' && i == length(s) - 1)\n        {\n       \
    \     vowels++;\n        }\n    }\n    return vowels;\n}", "{\n    long count\
    \ = 0;\n    for (long i = 0; i < s.length; i++)\n    {\n        if (s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n  \
    \          count++;\n        }\n        else if (s[i] == 'y' && i == s.length\
    \ - 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    // transform string to lowercase.\n    s = s.toLower();\n    // initialize\
    \ a counter, and set it to 0.\n    long counter = 0;\n    // loop through all\
    \ the characters in the string.\n    foreach(char c; s)\n    {\n        // check\
    \ if character is a vowel.\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' || c == 'y')\n        {\n            // add one to the counter.\n\
    \            counter++;\n        }\n    }\n    // return the number of vowels\
    \ in the string.\n    return counter;\n}", "{\n    long count=0;\n    int n=s.length;\n\
    \    foreach(char c; s)\n    {\n        if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||(c=='y'&&\
    \ (n-1)==n))\n        {\n            count++;\n        }\n        n--;\n    }\n\
    \    return count;\n}", "{\n    long count = 0;\n    foreach(ch; s) \n    {\n\
    \        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch\
    \ == 'y')\n            count++;\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    for (size_t i = 0; i < s.length; i++) \n    {\n        if (s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') \n        {\n\
    \            count++;\n        }\n        else if ((s[i] == 'y' && i == s.length\
    \ - 1)) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long n = 0;\n    foreach(ch; s)\n    {\n        if(ch == 'a' || ch\
    \ == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ||\n            (ch == 'y' &&\
    \ s.length == 1))\n        {\n            n++;\n        }\n    }\n    return n;\n\
    }", "{\n    long count = 0;\n    for (size_t i = 0; i < s.length; i++) \n    {\n\
    \        switch (s[i]) \n        {\n            case 'a':\n            case 'e':\n\
    \            case 'i':\n            case 'o':\n            case 'u':\n       \
    \     case 'y':\n                count++;\n                break;\n        }\n\
    \    }\n    return count;\n}", "{\n\tlong v = 0;\n\tforeach(c; s)\n\t{\n\t\tif\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n\t\t\
    \tv++;\n\t}\n\treturn v;\n}", "{\n    long numVowels=0;\n    foreach(char c; s)\n\
    \    {\n        c = toLower(c);\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n        {\n            numVowels++;\n        }\n    }\n\
    \    //if last character is y and the length of s is greater than 2\n    if(s[$-1]\
    \ == 'y' && s.length>2)\n    {\n        numVowels++;\n    }\n    return numVowels;\n\
    }", "{\n    long counter = 0;\n    for (size_t i = 0; i < s.length; i++)\n   \
    \ {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u')\n        {\n            counter++;\n        }\n        else if (s[i]\
    \ == 'y' && i == s.length - 1)\n        {\n            counter++;\n        }\n\
    \    }\n    return counter;\n}\n/*\nWrite a function first_vowel_pos which takes\
    \ a string representing\n    a word as input and returns the position of the first\
    \ vowel in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here,\
    \ 'y' is also a\n    vowel, but only when it is at the end of the given word.",
  "{\n    long c = 0;\n    foreach(ch; s)\n    {\n        if (ch == 'a' || ch == 'e'\
    \ || ch == 'i' || ch == 'o' || ch == 'u'\n            || (ch == 'y' && s.length\
    \ == 1)) c++;\n    }\n    return c;\n}", "{\n    long c = 0;\n    foreach(char\
    \ ch; s)\n    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' ||\
    \ ch == 'u' || (ch == 'y' && ch == '\\0'))\n            c++;\n    }\n    return\
    \ c;\n}", "{\n    long cnt = 0;\n    if(s.length > 1)\n    {\n        foreach(immutable\
    \ c; s)\n        {\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n            {\n                cnt++;\n            }\n       \
    \ }\n        if(s[$-1] == 'y')\n        {\n            cnt++;\n        }\n   \
    \ }\n    else\n    {\n        if(s[0] == 'a' || s[0] == 'e' || s[0] == 'i' ||\
    \ s[0] == 'o' || s[0] == 'u')\n        {\n            cnt++;\n        }\n    }\n\
    \    return cnt;\n}", "{\n    long count = 0;\n    foreach(char c; s)\n    {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n    \
    \        (c == 'y' && index(s, c) == length(s) - 1))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        if((c == 'a') || (c == 'e') || (c == 'i') || (c == 'o') ||\
    \ (c == 'u') ||\n            ((c == 'y') && (c == s[$-1])))\n            count++;\n\
    \    }\n    return count;\n}\n/*\nWrite a function times_two which takes an input\
    \ n and returns 2n\n*/", "{\n    long num_vowels = 0;\n    foreach(ch; s)\n  \
    \  {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u'\
    \ || ch == 'y')\n        {\n            num_vowels++;\n        }\n    }\n    return\
    \ num_vowels;\n}", "{\n    long sum = 0;\n    long n = s.length;\n    foreach(c;\
    \ s)\n    {\n        if(c=='a' || c=='e' || c=='i' || c=='o' || c=='u')\n    \
    \    {\n            sum += 1;\n        }\n        else if(c=='y' && (n-1)==find(s,c))\n\
    \        {\n            sum += 1;\n        }\n    }\n    return sum;\n}\n/*\n\
    Write a function int reverse_bits(uint32_t n) which takes a\n    32-bit unsigned\
    \ integer as an input and returns the integer\n    formed by reversing the bits\
    \ of the input value.", "{\n    long cnt = 0;\n    foreach(const char c; s)\n\
    \    {\n        switch(tolower(c))\n        {\n            case 'a':\n       \
    \     case 'e':\n            case 'i':\n            case 'o':\n            case\
    \ 'u':\n                cnt++;\n                break;\n            case 'y':\n\
    \                if(c == s[$-1])\n                    cnt++;\n        }\n    }\n\
    \    return cnt;\n}", "{\n\tlong count = 0;\n\tfor (long i = 0; i < s.length;\
    \ i++)\n\t{\n\t\tif (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if (s[i] == 'y' && i\
    \ == s.length - 1)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}", "{\n\
    \    /*\n    long answer = 0;\n    char[] a = s.toLower().dup;\n    foreach(a;\
    \ ch) {\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch ==\
    \ 'u')\n            answer += 1;\n    }\n    if (a[$-1] == 'y') answer += 1;\n\
    \    return answer;\n    */\n    return s.length - s.replaceAll(new RegExp(r\"\
    [aeiouy]\", \"gi\"), \"\").length;\n}", "{\n    import std.conv;\n    // The toLower\
    \ function just makes the string all lowercase\n    s = s.toLower();\n    long\
    \ v = 0;\n    foreach(char c; s)\n    {\n        if(c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u')\n        {\n            v++;\n        }\n  \
    \  }\n    return v;\n}", "{\n    // TBD\n    long result = 0;\n    foreach(char\
    \ c; s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n            result++;\n    }\n    if (s[$-1] == 'y')\n        result++;\n\
    \    return result;\n}", "{\n    long c = 0;\n    foreach(ch; s) \n    {\n   \
    \     if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || (ch\
    \ == 'y' && indexOf(s, ch) == s.length - 1)) \n        {\n            c += 1;\n\
    \        }\n    }\n    return c;\n}", "{\n    long r = 0;\n    for (in i = 0;\
    \ i < s.length; i++)\n    {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n            r++;\n        }\n\
    \        else if (s[i] == 'y' && i != s.length - 1)\n        {\n            r++;\n\
    \        }\n    }\n    return r;\n}", "{\n    long n = 0;\n    auto l = s.length;\n\
    \    foreach(i, e; s)\n    {\n        if(e == 'a' || e == 'e' || e == 'i' || e\
    \ == 'o' || e == 'u' || (e == 'y' && i == l-1))\n            n++;\n    }\n   \
    \ return n;\n}", "{\n    long vowel_count = 0;\n    foreach(char c; s)\n    {\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n     \
    \   {\n            vowel_count++;\n        }\n    }\n    return vowel_count;\n\
    }", "{\n  long n = 0;\n  foreach(char c; s)\n  {\n    switch(c)\n    {\n     \
    \ case 'a':\n      case 'e':\n      case 'i':\n      case 'o':\n      case 'u':\n\
    \      case 'y':\n        n++;\n        break;\n    }\n  }\n  return n;\n}", "{\n\
    \    long i = 0;\n    long count = 0;\n    while (i < s.length)\n    {\n     \
    \   if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n\
    \        {\n            count++;\n        }\n        i++;\n    }\n    if (s[s.length\
    \ - 1] == 'y')\n    {\n        count++;\n    }\n    return count;\n}\n/*\nWrite\
    \ a function array_sum which takes a long[] representing an\n    array of numbers\
    \ and returns the sum of the elements in the array.", "{\n     long num_vowels=0;\n\
    \    int vv=0;\n    string vowels=\"aeiouy\";\n    char last_char=s[$-1];\n  \
    \  foreach(c;s)\n    {\n        if(c=='y'&&c==last_char)\n            num_vowels+=1;\n\
    \        else\n        {\n            vv=vowels.indexOf(c);\n            if(vv>=0)\n\
    \                num_vowels+=1;\n        }\n    }\n    return num_vowels;\n}",
  "{\n    long vowels = 0;\n    foreach(c; s)\n    {\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n        {\n          \
    \  vowels++;\n        }\n    }\n    return vowels;\n}", "{\n    auto vowel_count\
    \ = 0L;\n    auto count = 0L;\n    foreach(ch; s)\n    {\n        switch(ch)\n\
    \        {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n            case 'y':\n       \
    \         ++vowel_count;\n                break;\n            default:\n     \
    \           break;\n        }\n    }\n    count = vowel_count;\n    return count;\n\
    }", "{\n  long num_vowels = 0;\n  foreach(ch; s)\n  {\n    switch(ch)\n    {\n\
    \      case 'a':\n      case 'e':\n      case 'i':\n      case 'o':\n      case\
    \ 'u':\n      case 'y':\n        num_vowels++;\n        break;\n    }\n  }\n \
    \ return num_vowels;\n}", "{\n    long cnt = 0;\n    int ia = 'a';\n    int iy\
    \ = 'y';\n    foreach(a; s)\n    {\n        if (a == 'a' || a == 'e' || a == 'i'\
    \ || a == 'o' || a == 'u')\n            cnt++;\n        else if (a == 'y' && (ia\
    \ > ia || iy < s.length - 1))\n            cnt++;\n        ia++;\n        iy++;\n\
    \    }\n    return cnt;\n}", "{\n    long l = s.length;\n    long res = 0;\n \
    \   foreach(char c; s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n            res++;\n    }\n    if (s[l-1] == 'y')\n \
    \       res++;\n    return res;\n}", "{\n    auto n = s.length;\n    long cnt\
    \ = 0;\n    for (size_t i = 0; i < n; i++)\n    {\n        char c = tolower(s[i]);\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n     \
    \   {\n            cnt++;\n        }\n    }\n    if (cnt > 0 && tolower(s[n-1])\
    \ == 'y')\n    {\n        cnt++;\n    }\n    return cnt;\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; s) \n    {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u' || (c == 'y' && c == s[$-1]))\n            count++;\n\
    \    }\n    return count;\n}", "{\n    long res = 0;\n    foreach(c; s)\n    {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n    \
    \       (c == 'y' && c != s[$-1]))\n        {\n            res++;\n        }\n\
    \    }\n    return res;\n}\n//---------------------------------------------------------\n\
    /*\n    Write a function most_frequent_chars(s, n) which takes a string s\n  \
    \  and an int n as input and returns an array of type char of length n\n    containing\
    \ the n most frequently occurring characters in the string.\n    The function\
    \ is supposed to ignore case. If there are more than n\n    characters which have\
    \ an equal number of occurrences in the string,\n    return the characters in\
    \ alphabetical order.\n    Example:\n    >>> most_frequent_chars(\"The quick brown\
    \ fox jumped over the lazy dog\", 2)\n    ['o', 't']\n*/\nchar[] most_frequent_chars(string\
    \ s, int n)\n{\n    char[] ret;\n    auto ranks = new string[1];\n    auto charMap\
    \ = new int[char.max];\n    // auto charSet = new string[1];\n    foreach(c; s)\n\
    \    {\n        if(!charMap[c]) charMap[c] = 1;\n        else charMap[c]++;\n\
    \    }\n    foreach(c; charMap)\n    {\n        int val = c[1];\n        if(val\
    \ == 0) continue;\n        if(ranks.empty)\n        {\n            ranks ~= to!string(val);\n\
    \            ret ~= c[0];\n            continue;\n        }\n        int ind =\
    \ -1;\n        foreach(i, r; ranks)\n        {\n            if(val >= to!int(r))\n\
    \            {\n                ind = i;\n                break;\n           \
    \ }\n        }\n        if(ind == -1)\n        {\n            if(ret.length <\
    \ n)\n            {\n                ranks ~= to!string(val);\n              \
    \  ret ~= c[0];\n            }\n        }\n        else\n        {", "{\n    assert(s);\n\
    \    long r = 0;\n    foreach(c; s)\n    {\n        if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' ||\n           c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U')\n            r++;\n    }\n    if(r > 0 && (s[$-1]\
    \ == 'y' || s[$-1] == 'Y'))\n        r++;\n    return r;\n}", "{\n    long result\
    \ = 0;\n    foreach(c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || c == 'y')\n        {\n            result++;\n   \
    \     }\n    }\n    if(s[$-1] == 'y')\n    {\n        result++;\n    }\n    return\
    \ result;\n}\n/*\nWrite a function count_vowels which takes a string representing\n\
    \    a sentence as input and returns the number of vowels in the string.\n   \
    \ Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel,\
    \ but only when it is at the end of the given word.\n    Example:\n    >>> count_vowels(\"\
    My name is Zara\")\n    4L\n    >>> count_vowels(\"What is this?\")\n    4L\n\
    \    \n*/\nlong count_vowels(string s) \n{\n    long result = 0;\n    string s_convert\
    \ = \"\";\n    string word = \"\";\n    foreach(c; s)\n    {\n        if(c ==\
    \ ' ')\n        {\n            s_convert ~= word;\n            word = \"\";\n\
    \        }\n        else\n        {\n            word ~= c;\n        }\n    }\n\
    \    s_convert ~= word;\n    foreach(s_word; s_convert)\n    {\n        result\
    \ += vowels_count(s_word);\n    }\n    return result;\n}\n/*\nWrite a function\
    \ vowels_percentage which takes a string representing\n    a sentence as input\
    \ and returns the percentage of vowels as\n    compared to the total number of\
    \ characters in the sentence.\n    Vowels in this case are 'a', 'e', 'i', 'o',\
    \ 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given\
    \ word.\n    Example:\n    >>> vowels_percentage(\"I like python\")\n    16.666665L\n\
    \    \n*/\nlong vowels_percentage(string s)", "{\n    long res = 0;\n    foreach(c;\
    \ s) {\n        res += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ ||\n                (c == 'y' && s.indexOf(c) == s.length - 1));\n    }\n  \
    \  return res;\n}", "{\n\ts = lower(s);\n\tlong counter = 0;\n\tforeach(c; s)\n\
    \t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\t{\n\
    \t\t\tcounter++;\n\t\t}\n\t}\n\tif(s[$-1] == 'y')\n\t{\n\t\tcounter++;\n\t}\n\t\
    return counter;\n}", "{ \n    long num = 0;\n    foreach(c; s)\n    {\n      \
    \  if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n\
    \        {\n            num++;\n        }\n    }\n    return num;\n}", "{\n  \
    \  static char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y'};\n    long sum = 0;\n\
    \    foreach(c; s) \n    {\n        foreach(v; vowels) \n        {\n         \
    \   if(v == c) \n            {\n                ++sum;\n                break;\n\
    \            }\n        }\n    }\n    if(s.length > 1 && s[$-1] == 'y') \n   \
    \ {\n        return sum;\n    }\n    else \n    {\n        return max(sum - 1,\
    \ 0);\n    }\n}", "{\n    long count=0;\n    for(int i=0;i<s.length;i++)\n   \
    \ {\n      if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||(s[i]=='y'&&i==s.length-1))\n\
    \         count++;\n    }\n    return count;\n}", "{\n    auto vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    int count = 0;\n    foreach(char c; s) {\n       \
    \ auto lowerC = toLower(c);\n        if(vowels.canFind(lowerC)) {\n          \
    \  count++;\n        }\n    }\n    if(s.length && toLower(s[$-1]) == 'y') {\n\
    \        count++;\n    }\n    return count;\n}", "{\n    return count(s.begin(),\
    \ s.end(), 'a')\n        + count(s.begin(), s.end(), 'e')\n        + count(s.begin(),\
    \ s.end(), 'i')\n        + count(s.begin(), s.end(), 'o')\n        + count(s.begin(),\
    \ s.end(), 'u')\n        + (s.back == 'y' ? 1 : 0);\n}", "{ \n  long l=0;\n  for(auto\
    \ i : s)\n  {\n     if(i=='a'||i=='e'||i=='i'||i=='o'||i=='u'||i=='y')\n     {\
    \ \n       l++;\n     }\n  }\n  return l;\n}", "{\n    size_t n = s.length;\n\
    \    long count = 0;\n    for (size_t i = 0; i < n; i++) {\n        switch (tolower(s[i]))\
    \ {\n            case 'a':\n            case 'e':\n            case 'i':\n   \
    \         case 'o':\n            case 'u':\n                count++;\n       \
    \         break;\n            case 'y':\n                if (i == n - 1) {\n \
    \                   count++;\n                }\n                break;\n    \
    \    }\n    }\n    return count;\n}", "{ \n    /* your code here */ \n}", "{\n\
    \    long count = 0;\n    foreach(dchar c; s)\n    {\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n            count++;\n\
    \    }\n    return count;\n}", "{\n    long counter = 0;\n    foreach(inout c;\
    \ s)\n    {\n        switch(c)\n        {\n            case 'a': case 'e': case\
    \ 'i': case 'o': case 'u':\n            case 'A': case 'E': case 'I': case 'O':\
    \ case 'U':\n                counter++;\n                break;\n            case\
    \ 'y': case 'Y':\n                if (counter == s.length - 1)\n             \
    \       counter++;\n                break;\n        }\n    }\n    return counter;\n\
    }", "{\n    long len = s.length();\n    long count = 0;\n    long i = 0;\n   \
    \ foreach(c; s) \n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            count++;\n        }\n        else if\
    \ (c == 'y' && i == len - 1)\n        {\n            count++;\n        }\n   \
    \     i++;\n    }\n    return count;\n}", "{\n    long num = 0;\n    foreach(ch;\
    \ s)\n    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch\
    \ == 'u' || (ch == 'y' && index(s, ch) == s.length - 1))\n            num++;\n\
    \    }\n    return num;\n}", "{\n    auto vowel = \"aeiouy\";\n    auto cnt =\
    \ 0L;\n    foreach(index, ch; s)\n    {\n        if(vowel.canFind(lower(ch)))\n\
    \            cnt++;\n    }\n    return cnt;\n}\n/*\nWrite a function which takes\
    \ a string representing a word as\n    input and returns the longest consecutive\
    \ set of vowels\n    contained within the string. If there are multiple runs\n\
    \    of consecutive vowels of the same length, the function\n    should return\
    \ the last set of consecutive vowels.", "{\n    long count = 0;\n    foreach(ch;\
    \ s)\n    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch\
    \ == 'u' || (ch == 'y' && ch == s[$-1]))\n            count++;\n    }\n    return\
    \ count;\n}", "{\n    long counter = 0;\n    for (size_t i = 0; i < s.length;\
    \ i++) \n    {\n        switch (tolower(s[i])) \n        {\n            case 'a':\n\
    \            case 'e':\n            case 'i':\n            case 'o':\n       \
    \     case 'u':\n                counter++;\n                break;\n        \
    \    case 'y':\n                if(i == s.length - 1) \n                {\n  \
    \                  counter++;\n                }\n        }\n    }\n    return\
    \ counter;\n}", "{\n\tlong ret;\n\tlong i;\n\tret = 0;\n\ti = 0;\n\tfor (; i <\
    \ s.length; i++)\n\t{\n\t\ts[i] = tolower(s[i]);\n\t\tif (s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n\t\t{\n\t\t\tret = ret\
    \ + 1;\n\t\t}\n\t}\n\tif (s[s.length - 1] == 'y')\n\t{\n\t\tret = ret + 1;\n\t\
    }\n\treturn ret;\n}", "{\n    long vowelCount = 0;\n    foreach(char c; s)\n \
    \   {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n\
    \            c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n     \
    \   {\n            ++vowelCount;\n        }\n    }\n    if(s[$-1] == 'y' || s[$-1]\
    \ == 'Y')\n    {\n        ++vowelCount;\n    }\n    return vowelCount;\n}", "{\n\
    \    long r = 0;\n    foreach(c; s)\n    {\n        r += c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' ? 1 : 0;\n    }\n    return r;\n}\n/*\n\
    Write a function common_prefix which takes two strings as input\n    and returns\
    \ a string which represents the common prefix that the two\n    strings share.",
  "{\n    long count = 0;\n    foreach(char c; s) \n    {\n        // array of vowels\
    \ to test if current char is a vowel\n        char[] vowels = ['a', 'e', 'i',\
    \ 'o', 'u', 'y'];\n        foreach(char v; vowels) \n        {\n            if(c\
    \ == v)\n                count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long counter = 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n   \
    \     if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u')\n        {\n            counter++;\n        }\n        else if (s[i] ==\
    \ 'y' && i == s.length - 1)\n        {\n            counter++;\n        }\n  \
    \  }\n    return counter;\n}", "{\n    return count(s, \"aeiouyAEIOUY\");\n}\n\
    /*\nWrite a function which takes two strings, each representing a\n    word, and\
    \ returns a long representing the number of letters\n    the two words have in\
    \ common. The order of the letters doesn't\n    matter, and capitalization does\
    \ not matter.  So for instance,\n    if string1=\"abc\" and string2=\"bcd\", the\
    \ answer is 2L.", "{\n  assert(s.length);\n  \n  long count = 0;\n  foreach(char\
    \ c; s) \n  {\n    if (tolower(c) == 'a' || tolower(c) == 'e' || tolower(c) ==\
    \ 'i' || tolower(c) == 'o' || tolower(c) == 'u')\n      count++;\n  }\n  if (tolower(s[$-1])\
    \ == 'y')\n    count++;\n  return count;\n}", "{\n    \n    return std.algorithm.count_if!(a\
    \ => in(\"aeiou\", tolower(a)))(s);\n}", "{ \n    long count = 0; \n    int n\
    \ = s.length; \n    for (int i = 0; i < n; i++) \n    { \n        if (s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\
    \ \n            count++; \n    } \n    return count; \n} \n  \n/*\nWrite a function\
    \ vowels_count which takes a string representing\n    a word as input and returns\
    \ the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i',\
    \ 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of\
    \ the given word.", "{\n    assert(s!=null);\n    return count(s, ch => ch ==\
    \ 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'y');\n}",
  "{\n    long result = 0;\n    const char ch[] = \"aeiouy\";\n    for (size_t i =\
    \ 0; i < s.length; i++)\n    {\n        for (size_t j = 0; j < 6; j++)\n     \
    \   {\n            if (s[i] == ch[j])\n            {\n                result++;\n\
    \                break;\n            }\n        }\n    }\n    if (s[s.length -\
    \ 1] == 'y')\n    {\n        result++;\n    }\n    return result;\n}", "{\n  \
    \  long n = 0;\n    foreach(char c; s)\n    {\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' ||\n           c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U')\n            n++;\n    }\n    if(s[$-1] == 'y'\
    \ || s[$-1] == 'Y')\n        n++;\n    return n;\n}\n/*\n    Write a function\
    \ two_least which takes a string representing a word\n    as input and returns\
    \ the two lowest alphabetically occurring \n    characters in the string. Return\
    \ the characters in the order that \n    they appear in the string.", "{\n   \
    \ long n = 0;\n    foreach(e; s)\n    {\n        char c = toLower(e);\n      \
    \  if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            n\
    \ += 1;\n    }\n    return n;\n}", "{\n    long ret = 0;\n    foreach(c; s)\n\
    \    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\
    \ c == 'y')\n            ret++;\n    }\n    return ret;\n}", "{\n    long result;\n\
    \    foreach(char c; s)\n    {\n        if(c=='a' || c=='e' || c=='i' || c=='o'\
    \ || c=='u' || c=='y')\n        {\n            result++;\n        }\n    }\n \
    \   return result;\n}", "{\n    long c = 0;\n    foreach(x; s) {\n        if(x\
    \ == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u' || x == 'y') {\n    \
    \        c++;\n        }\n    }\n    return c;\n}", "{\n    long num = 0;\n  \
    \  for (int i = 0; i < s.length; i++)\n    {\n        if (tolower(s[i]) == 'a'\
    \ || tolower(s[i]) == 'e' || tolower(s[i]) == 'i' || tolower(s[i]) == 'o' || tolower(s[i])\
    \ == 'u')\n        {\n            if (tolower(s[i]) == 'y' && (i == 0 || i ==\
    \ s.length - 1))\n            {\n                num++;\n            }\n     \
    \       else\n            {\n                num++;\n            }\n        }\n\
    \    }\n    return num;\n}", "{\n\tlong vowels = 0;\n\tlong i;\n\tfor (i = 0;\
    \ i < s.length; i++) \n\t{\n\t\tif (s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u') \n\t\t{\n\t\t\tvowels++;\n\t\t}\n\t\telse if\
    \ (s[i] == 'y' && (i == s.length - 1)) \n\t\t{\n\t\t\tvowels++;\n\t\t}\n\t}\n\t\
    return vowels;\n}", "{\n    long result;\n    foreach(char c; s) \n    {\n   \
    \     c = toLower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') \n        {\n            result++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long vowel_count = 0;\n    long vowels[] = {'a', 'e', 'i',\
    \ 'o', 'u', 'y'};\n    foreach(ch; s) {\n        if(ch in vowels)\n          \
    \  vowel_count++;\n    }\n    return vowel_count;\n}", "{\n    int i;\n    long\
    \ count = 0;\n    for (i = 0; i < s.length; i++) \n    {\n        if ((s[i] ==\
    \ 'a') || (s[i] == 'e') || (s[i] == 'i') || (s[i] == 'o') || (s[i] == 'u')) \n\
    \        {\n            count++;\n        }\n        else if ((s[i] == 'y') &&\
    \ (i == s.length - 1)) \n        {\n            count++;\n        }\n    }\n \
    \   return count;\n}", "{ \n    long vowels = 0; \n    for (int i = 0; i < s.length;\
    \ i++) \n    { \n        // If current character is vowel \n        if ( \n  \
    \          s[i] == 'a' || \n            s[i] == 'e' || \n            s[i] == 'i'\
    \ || \n            s[i] == 'o' || \n            s[i] == 'u' || \n            s[i]\
    \ == 'y' ) \n            vowels++; \n    } \n    return vowels; \n}", "{\n   \
    \ long num = 0;\n    for (size_t i = 0; i < s.length; i++) \n    {\n        char\
    \ c = tolower(s[i]);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') \n        {\n            num += 1;\n        } \n        else if\
    \ (c == 'y' && i == s.length - 1) \n        {\n            num += 1;\n       \
    \ }\n    }\n    return num;\n}", "{\n    long res = 0;\n    foreach(c; s) {\n\
    \        res += toLower(c) in ['a', 'e', 'i', 'o', 'u'];\n    }\n    return res;\n\
    }", "{\n    long count = 0;\n    foreach(char c; s)\n    {\n        switch(tolower(c))\n\
    \        {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n                count++;\n    \
    \            break;\n            case 'y':\n                if(c == s[$-1])\n\
    \                    count++;\n                break;\n        }\n    }\n    return\
    \ count;\n}\n/*\n    Write a function max_vowels_word which takes a string representing\n\
    \    a sentence as input and returns the word with the most vowels. If there\n\
    \    are multiple words with the same number of vowels, the function returns\n\
    \    the first such word.", "{\n    static string vowels = \"aeiouy\";\n    return\
    \ count_if(s, (char c) => c != ' ' && vowel(c, vowels));\n}", "{ \n    long n=0;\n\
    \    long i=0;\n    for(;i<s.length;++i)\n    {\n        if(s[i]=='a' || s[i]=='e'\
    \ || s[i]=='i' || s[i]=='o' || s[i]=='u' || (s[i]=='y' && i==s.length-1))\n  \
    \          ++n;\n    }\n    return n;\n}", "{\n    long result = 0;\n    foreach(c;\
    \ s) \n    {\n        c = toLower(c);\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u')\n            result++;\n    }\n    if(s[$-1] ==\
    \ 'y')\n        result++;\n    return result;\n}", "{\n    long result = 0;\n\
    \    long size = s.length;\n    for (long i = 0; i < size; i++)\n    {\n     \
    \   if (tolower(s[i]) == 'a' || tolower(s[i]) == 'e' || tolower(s[i]) == 'i' ||\
    \ tolower(s[i]) == 'o' || tolower(s[i]) == 'u')\n        {\n            result++;\n\
    \        }\n    }\n    if (result > 0 && tolower(s[size - 1]) == 'y')\n    {\n\
    \        result++;\n    }\n    return result;\n}", "{\n    // First we convert\
    \ the whole string to lower case.\n    s = lower(s);\n    // Now we count all\
    \ the vowels in s.\n    long count = 0;\n    foreach(c; s) {\n        switch(c)\
    \ {\n            case 'a':\n            case 'e':\n            case 'i':\n   \
    \         case 'o':\n            case 'u':\n            case 'y':\n          \
    \      ++count;\n                break;\n        }\n    }\n    return count;\n\
    }", "{\n    long r = 0;\n    if(s.length > 0 && find(s, \"a\") != -1) r++;\n \
    \   if(s.length > 0 && find(s, \"e\") != -1) r++;\n    if(s.length > 0 && find(s,\
    \ \"i\") != -1) r++;\n    if(s.length > 0 && find(s, \"o\") != -1) r++;\n    if(s.length\
    \ > 0 && find(s, \"u\") != -1) r++;\n    if(s.length > 0 && find(s, \"y\") !=\
    \ -1) r++;\n    return r;\n}", "{\n    long count = 0;\n    for (size_t i = 0;\
    \ i < s.length; i++) \n    {\n        char c = tolower(s[i]);\n        if ((c\
    \ == 'a') || (c == 'e') || (c == 'i') || (c == 'o') || (c == 'u')) \n        {\n\
    \            count++;\n        } \n        else if ((c == 'y') && (i == s.length\
    \ - 1)) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{ \n    long c = 0;\n    for (long i = 0; i < s.length; i++) \n    { \n \
    \       if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u' || s[i] == 'y') \n            c++; \n    } \n    return c; \n}", "{\n  \
    \  \n    long count = 0;\n    for(int i = 0; i < s.length; i++)\n    {\n     \
    \   if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\
    \ || s[i] == 'y')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\nWrite a function num_consec_vowels which takes a string representing\n\
    \    a word as input and returns the number of consecutive vowels in\n    the\
    \ string. A consecutive vowel is a vowel that is followed by\n    another vowel.\
    \ You are given the vowels_count function which\n    takes a string representing\
    \ a word as input and returns the\n    number of vowels in the string. Vowels\
    \ in this case are 'a', 'e',\n    'i', 'o', 'u'. Here, 'y' is also a vowel, but\
    \ only when it is at\n    the end of the given word. The following example shows\
    \ the\n    vowels_count function in action:", "{\n    int i, j, count=0;\n   \
    \ s = toLower(s);\n    for(i=0; i<s.length; i++)\n    {\n        if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n  \
    \          count++;\n        }\n        else if(s[i] == 'y')\n        {\n    \
    \        if(i+1 == s.length)\n            {\n                count++;\n      \
    \      }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n \
    \   bool y_done = false;\n    for (size_t i = 0; i < s.length; i++)\n    {\n \
    \       switch (s[i])\n        {\n            case 'a':\n            case 'e':\n\
    \            case 'i':\n            case 'o':\n            case 'u':\n       \
    \         count++;\n                break;\n            case 'y':\n          \
    \      if (!y_done)\n                {\n                    count++;\n       \
    \             y_done = true;\n                }\n        }\n    }\n    return\
    \ count;\n}", "{\n    // TODO: Write your code here\n    long count = 0;\n   \
    \ for(size_t i = 0; i < s.length(); i++)\n    {\n        if(tolower(s[i]) == 'a'\
    \ || tolower(s[i]) == 'e' || tolower(s[i]) == 'i' || tolower(s[i]) == 'o' || tolower(s[i])\
    \ == 'u')\n        {\n            count++;\n        }\n    }\n    if(tolower(s[s.length()\
    \ - 1]) == 'y')\n    {\n        count++;\n    }\n    return count;\n}", "{ \n\
    \    long n = 0;\n    foreach(ch; s)\n    {\n        if (ch == 'a' || ch == 'e'\
    \ || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'y')\n            n++;\n   \
    \ }\n    return n;\n}", "{\n    // ToDo: Write code here\n    long cnt = 0;\n\
    \    foreach(char c; s)\n    {\n        c = toLower(c);\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            cnt++;\n    }\n \
    \   if(toLower(s[$-1]) == 'y')\n        cnt++;\n    return cnt;\n}", "{\n    long\
    \ vc = 0;\n    foreach(char c; s) \n    {\n        switch(tolower(c)) \n     \
    \   {\n            case 'a':\n            case 'e':\n            case 'i':\n \
    \           case 'o':\n            case 'u':\n            case 'y':\n        \
    \        vc += 1;\n        }\n    }\n    return vc;\n}\n/*\nWrite a function vowels_count_p\
    \ which takes a string representing\n    a word as input and returns the number\
    \ of vowels in the string\n    as in vowels_count but using pointers as indexing\
    \ mechanisms for \n    strings.\n*/\nlong vowels_count_p(string s) \n{\n    long\
    \ vc = 0;\n    const char* p = s.ptr;\n    while(*p) \n    {\n        switch(tolower(*p))\
    \ \n        {\n            case 'a':\n            case 'e':\n            case\
    \ 'i':\n            case 'o':\n            case 'u':\n            case 'y':\n\
    \                vc += 1;\n        }\n        p++;\n    }\n    return vc;\n}\n\
    /*\nWrite a function vowels_count_r which takes a string representing\n    a word\
    \ as input and returns the number of vowels in the string\n    as in vowels_count\
    \ but using recursion.\n*/\nlong vowels_count_r(string s) \n{\n    long vc = 0;\n\
    \    if(s.length == 0)\n        return 0;\n    else \n    {\n        switch(tolower(s[0]))\
    \ \n        {\n            case 'a':\n            case 'e':\n            case\
    \ 'i':\n            case 'o':\n            case 'u':\n            case 'y':\n\
    \                vc += 1;\n        }\n        return vc + vowels_count_r(s[1..$]);\n\
    \    }\n}\n/*\nWrite a function vowels_count_s which takes a string representing\n\
    \    a word as input and returns the number of vowels in the string\n    as in\
    \ vowels_count but using slicing.\n*/\nlong vowels_count_s(string s) \n{", "{\n\
    \    long count = 0;\n    foreach(char c; s) \n    {\n        switch(c) \n   \
    \     {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n            case 'y':\n       \
    \         count += 1;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    char[5] vowels = ['a', 'e', 'i', 'o', 'u'];\n    bool anyVowel = false;\n\
    \    char last_char = s[$-1];\n    foreach(char c; s)\n    {\n        foreach(char\
    \ v; vowels)\n        {\n            if(c == v)\n            {\n             \
    \   anyVowel = true;\n                break;\n            }\n        }\n     \
    \   if(anyVowel)\n        {\n            count++;\n            anyVowel = false;\n\
    \        }\n    }\n    if(last_char == 'y')\n    {\n        count++;\n    }\n\
    \    return count;\n}", "{\n    long count = 0;\n    foreach(c; s)\n    {\n  \
    \      if(tolower(c) == 'a' || tolower(c) == 'e' || tolower(c) == 'i' ||\n   \
    \         tolower(c) == 'o' || tolower(c) == 'u' || (c == 'y' && c == s[$-1]))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long vowels_count = 0;\n    if (s.length > 0)\n    {\n        s = s.tolower();\n\
    \        if (s[0] == 'a' || s[0] == 'e' || s[0] == 'i' || s[0] == 'o' || s[0]\
    \ == 'u')\n            vowels_count++;\n        if (s.length > 1)\n        {\n\
    \            if (s[1] == 'a' || s[1] == 'e' || s[1] == 'i' || s[1] == 'o' || s[1]\
    \ == 'u')\n                vowels_count++;\n            if (s.length > 2)\n  \
    \          {\n                if (s[2] == 'a' || s[2] == 'e' || s[2] == 'i' ||\
    \ s[2] == 'o' || s[2] == 'u')\n                    vowels_count++;\n         \
    \       if (s.length > 3)\n                {\n                    if (s[3] ==\
    \ 'a' || s[3] == 'e' || s[3] == 'i' || s[3] == 'o' || s[3] == 'u')\n         \
    \               vowels_count++;\n                    if (s.length > 4)\n     \
    \               {\n                        if (s[4] == 'a' || s[4] == 'e' || s[4]\
    \ == 'i' || s[4] == 'o' || s[4] == 'u')\n                            vowels_count++;\n\
    \                        if (s.length > 5)\n                        {\n      \
    \                      if (s[5] == 'a' || s[5] == 'e' || s[5] == 'i' || s[5] ==\
    \ 'o' || s[5] == 'u')\n                                vowels_count++;\n     \
    \                       if (s.length > 6)\n                            {\n   \
    \                             if (s[6] == 'a' || s[6] == 'e' || s[6] == 'i' ||\
    \ s[6] == 'o' || s[6] == 'u')\n                                    vowels_count++;\n\
    \                                if (s.", "{\n  int counter = 0;\n  \n  foreach(immutable\
    \ char c; s) \n  {\n    if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'y')\n    {\n      counter++;\n    }\n  }\n  return counter;\n}",
  "{\n    long i;\n    int len = s.length;\n    long count = 0;\n    char c;\n   \
    \ bool isLower;\n    for (i = 0; i < len; i++) {\n        c = s[i];\n        isLower\
    \ = s[i] >= 'a' && s[i] <= 'z';\n        if ((c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') ||\n            (isLower && (c == 'y' && i == len -\
    \ 1))) {\n            count += 1;\n        }\n    }\n    return count;\n}", "{\n\
    \    long vowels = 0;\n    foreach(index, c; s) \n    {\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') \n        {\n            ++vowels;\n\
    \        } \n        else if (c == 'y' && index == s.length - 1) \n        {\n\
    \            ++vowels;\n        }\n    }\n    return vowels;\n}", "{\n    // your\
    \ code here\n    return 0;\n}\n/*\n    Write a function is_palindrome which takes\
    \ a string representing a\n    word as input and returns true if the string is\
    \ a palindrome and\n    false otherwise. ", "{\n    long count=0;\n    foreach(char\
    \ c; s) \n    {\n        if(tolower(c)=='a' || tolower(c)=='e' || tolower(c)=='i'\
    \ || tolower(c)=='o' || tolower(c)=='u')\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}", "{\n    long total = 0;\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'y')\n        {\n            total += 1;\n        }\n    }\n   \
    \ return total;\n}\n/*\nWrite a function vowels_count_2 which takes a string representing\n\
    \    a word as input and returns the number of vowels in the string.\n    Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is never a\n    vowel.",
  "{\n    s = toLower(s);\n    long res = 0;\n    foreach(c; s)\n    {\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') res++;\n    }\n    return\
    \ res;\n}", "{\n    long num_vowels;\n    num_vowels = 0;\n    long len;\n   \
    \ len = s.length;\n    foreach(i; 0..len)\n    {\n        //std.conv.to!int('a');\n\
    \        if(((std.conv.to!int(s[i])==97)||(std.conv.to!int(s[i])==101)||(std.conv.to!int(s[i])==105)||(std.conv.to!int(s[i])==111)||(std.conv.to!int(s[i])==117))||((std.conv.to!int(s[i])==65)||(std.conv.to!int(s[i])==69)||(std.conv.to!int(s[i])==73)||(std.conv.to!int(s[i])==79)||(std.conv.to!int(s[i])==85)))\n\
    \        {\n            if((std.conv.to!int(s[i])==89)||(std.conv.to!int(s[i])==121))\n\
    \            {\n                if(i==len-1)\n                {\n            \
    \        num_vowels++;\n                }\n            }\n            else\n \
    \           {\n                num_vowels++;\n            }\n        }\n    }\n\
    \    return num_vowels;\n}", "{\n    long vowels = 0;\n    foreach(ch; s)\n  \
    \  {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u'\
    \ || ch == 'y')\n        {\n            vowels++;\n        }\n    }\n    return\
    \ vowels;\n}\n/*\nWrite a function cons_count which takes a string representing\n\
    \    a word as input and returns the number of consonants in the string.\n   \
    \ Consonants in this case are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\n \
    \   'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z', 'y'. 'y' is only\n\
    \    a consonant when it is not at the end of the given word.", "{\n    long count\
    \ = 0;\n    foreach(c; s) \n    {\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || (c == 'y' && c.indexof(s) == s.length-1))\n     \
    \       count++;\n    }\n    return count;\n}", "{\n    long r = 0;\n    foreach(c;\
    \ s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' ||\n            (c == 'y' && c == s[$-1]))\n            r++;\n    }\n  \
    \  return r;\n}", "{\n  int count = 0;\n  foreach(char c; s)\n  {\n    switch(c)\n\
    \    {\n      case 'a':\n      case 'e':\n      case 'i':\n      case 'o':\n \
    \     case 'u':\n      case 'y':\n        count++;\n    }\n  }\n  if(count > 0\
    \ && s[$-1] != 'y')\n    count--;\n  return count;\n}", "{\n  const string vowels\
    \ = \"aeiou\";\n  long count = 0;\n  foreach(const char c; s)\n  {\n    if (c\
    \ == 'y' && c == s[$-1]) continue;\n    if (vowels.canFind(c)) ++count;\n  }\n\
    \  return count;\n}", "{\n    long count = 0;\n    long sz = s.length;\n    foreach(c;\
    \ s)\n    {\n        if(tolower(c) == 'a' || tolower(c) == 'e' || tolower(c) ==\
    \ 'i' || tolower(c) == 'o' || tolower(c) == 'u')\n        {\n            count++;\n\
    \        }\n        else if(tolower(c) == 'y' && tolower(s[sz - 1]) == 'y')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long vcount = 0;\n    foreach(char c; s) \n    {\n        if (tolower(c)\
    \ == 'a' ||\n            tolower(c) == 'e' ||\n            tolower(c) == 'i' ||\n\
    \            tolower(c) == 'o' ||\n            tolower(c) == 'u') \n        {\n\
    \            vcount++;\n        }\n    }\n    return vcount;\n}\n/*\nWrite a function\
    \ words_count which takes a string\n    representing a phrase and an integer threshold.\
    \ The function returns\n    the number of words in the phrase whose length is\
    \ greater than or\n    equal to the threshold.", "{\n    auto count = 0L;\n  \
    \  foreach(c; s)\n    {\n        if(c=='a' || c=='e' || c=='i' || c=='o' || c=='u'\
    \ ||\n            (c=='y' && s.length()-1 == count))\n            count++;\n \
    \   }\n    return count;\n}", "{\n    enum { VOWELS = 5 };\n    static char[]\
    \ vowels = { 'a', 'e', 'i', 'o', 'u' };\n    long result = 0;\n    foreach (c;\
    \ s) {\n        c = toLower(c);\n        foreach (v; vowels) {\n            if\
    \ (c == v)\n                ++result;\n        }\n    }\n    if (result > 0 &&\
    \ s[$ - 1] == 'y')\n        ++result;\n    return result;\n}", "{\n    long vowel_count\
    \ = 0;\n    foreach(ch; s) \n    {\n        switch(ch) \n        {\n         \
    \   case 'a':\n            case 'e':\n            case 'i':\n            case\
    \ 'o':\n            case 'u':\n            case 'y':\n                vowel_count++;\n\
    \                break;\n        }\n    }\n    if(startsWith(s, \"y\"))\n    \
    \    vowel_count--;\n    if(endsWith(s, \"y\"))\n        vowel_count++;\n    return\
    \ vowel_count;\n}", "{\n    long count = 0;\n    foreach(char c; s)\n    {\n \
    \       if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long count=0;\n \
    \   foreach(i; s)\n    {\n        if(i=='a'||i=='e'||i=='i'||i=='o'||i=='u'||(i=='y'&&i==s[$-1]))\n\
    \            count++;\n    }\n    return count;\n}\n/*\n    Write a function largest_sum\
    \ which takes an array of ints as input\n    and returns the sum of the 3 largest\
    \ elements. If the input array\n    contains less than 3 elements, return the\
    \ sum of all of its elements.", "{\n    s = toLower(s);\n    long result = 0;\n\
    \    for (size_t i = 0; i < s.length; i++)\n    {\n        if (s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n     \
    \       result++;\n        }\n    }\n    if (s[s.length - 1] == 'y')\n    {\n\
    \        result++;\n    }\n    return result;\n}", "{\n    char[] vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    long result = 0;\n    foreach(char i; s)\n    {\n\
    \        foreach(char v; vowels)\n        {\n            if(i == v)\n        \
    \    {\n                result++;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    foreach(char c; s)\n    {\n      \
    \  if(c=='a' || c=='e' || c=='i' || c=='o' || c=='u' || c=='y')\n            count++;\n\
    \    }\n    return count;\n}", "{\n    int len = s.length();\n    int count =\
    \ 0;\n    int i = 0;\n    while(i<len)\n    {\n        char c = s[i];\n      \
    \  if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n \
    \           count++;\n        }\n        else if(c == 'y' && i == len-1)\n   \
    \     {\n            count++;\n        }\n        i++;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(c; s)\n    {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && c == s[$-1]))\n\
    \            count++;\n    }\n    return count;\n}\n/*\nWrite a function find_date\
    \ which takes a string representing a date\n    as input and returns a tuple representing\
    \ the date. The input date can be\n    represented in any of the following formats:\n\
    \    (1) 'Jan 31 2017'\n    (2) '31 Jan 2017'\n    (3) '1/31/2017'\n    (4) '2017-01-31'\n\
    \    The returned tuple should contain the following three fields\n    (1) year\
    \ (int)\n    (2) month (int)\n    (3) day (int)\n    If the given date is not\
    \ in any of the above formats, raise an AssertError\n    with a suitable message.",
  "{\n    long l;\n    l = s.length;\n    long i = 0;\n    long j = 0;\n    long c\
    \ = 0;\n    for (i = 0; i < l; i++) {\n        switch (s[i]) {\n            case\
    \ 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n\
    \            case 'u':\n            case 'y':\n                c++;\n        \
    \        break;\n            default:\n                break;\n        }\n   \
    \ }\n    if (s[l-1] == 'y')\n        c--;\n    return c;\n}\n/*\nWrite a function\
    \ str_to_int which takes a string representing a whole\n    number and returns\
    \ the number as an int. You must not use any\n    built-in conversion functions.\
    \ The string might be prefixed with a\n    '+' or '-' sign, in which case the\
    \ result should be correspondingly\n    negative or positive. Your function must\
    \ handle the case where the\n    input is not a valid whole number.", "{\n   \
    \ long count = 0;\n    foreach(char c; s)\n    {\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n            count++;\n\
    \    }\n    return count;\n}", "{\n\tlong i;\n\tlong count;\n\tcount = 0;\n\t\
    foreach(c; s)\n\t{\n\t\tif(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'y')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}", "{\n\
    \    long count = 0;\n    foreach(c; s)\n    {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && c == s[$-1])) count++;\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(c; s)\n  \
    \  {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c\
    \ == 'y' && s.length == 1))\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}", "{\n    long cnt = 0;\n    foreach(char ch; s) \n    {\n\
    \        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch\
    \ == 'y')\n            cnt++;\n    }\n    if(cnt > 0 && s[$-1] == 'y')\n     \
    \   cnt--;\n    return cnt;\n}\n/*\nWrite a function longest_word which takes\
    \ a string representing a\n    text as input and returns the longest word in the\
    \ text.", "{\n    long vowels = 0;\n    foreach(c; s)\n    {\n        if (c=='a'\
    \ || c=='e' || c=='i' || c=='o' || c=='u' || c=='y')\n            vowels++;\n\
    \    }\n    if (s[$-1]=='y')\n        vowels++;\n    return vowels;\n}", "{\n\
    \    long count = 0;\n    long i = 0;\n    for (i = 0; i < s.length; i++)\n  \
    \  {\n        if ((tolower(s[i]) == 'a') || (tolower(s[i]) == 'e') || (tolower(s[i])\
    \ == 'i') || (tolower(s[i]) == 'o') || (tolower(s[i]) == 'u'))\n        {\n  \
    \          count++;\n        }\n    }\n    if (tolower(s[i-1]) == 'y')\n    {\n\
    \        count++;\n    }\n    return count;\n}", "{\n    return std.algorithm.count_if(s,\
    \ c => \"aeiouAEIOUyY\".canFind(c));\n}\n/*\nWrite a function space_count which\
    \ takes a string representing\n    a word as input and returns the number of spaces\
    \ in the string.", "{\n    return std.algorithm.count_if(s, (char c) => \n\t\t\
    \t\t  'a' <= c && c <= 'z' &&\n\t\t\t\t  is_vowel(c));\n}", "{\n    long count\
    \ = 0;\n    foreach(char c; s)\n    {\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' || (c == 'y' && s.length == 1))\n            count++;\n\
    \    }\n    return count;\n}", "{\n  long i;\n  long v;\n  i = s.length;\n  v\
    \ = 0;\n  while (i--)\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u' || s[i] == 'y')\n      v++;\n  return v;\n}", "{\n   \
    \ long vowels = 0;\n    foreach(char c; s)\n    {\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n            vowels += 1;\n    }\n\
    \    return vowels;\n}", "{\n  return count(s, (c) {\n    import std.algorithm\
    \ : map;\n    return map!(toLower)(c)\n      .canFindIn(\"aeiou\");\n  });\n}",
  "{ \n    return count(s, ch => ch in ['a', 'e', 'i', 'o', 'u', 'y']);\n}", "{\n\
    \    long count = 0;\n    foreach(c; s) \n    {\n        char lower = toLower(c);\n\
    \        if (lower == 'a' || lower == 'e' || lower == 'i' || lower == 'o' || lower\
    \ == 'u') \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{ \n  long count = 0;\n  foreach(character; s)\n  {\n    if (character ==\
    \ 'a' || character == 'e' || character == 'i' || character == 'o' || character\
    \ == 'u' || character == 'y')\n    {\n      count = count + 1;\n    }\n  }\n \
    \ return count;\n}", "{\n    long cnt = 0;\n    foreach(c; s) \n    {\n      \
    \  if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n          \
    \  (c == 'y' && c == s[$-1]))\n        {\n            cnt += 1;\n        }\n \
    \   }\n    return cnt;\n}", "{\n    long vowels = 0;\n    for (int i = 0; i <\
    \ s.length; i++)\n    {\n        if (\n        s[i] == 'a' ||\n        s[i] ==\
    \ 'e' ||\n        s[i] == 'i' ||\n        s[i] == 'o' ||\n        s[i] == 'u'\
    \ ||\n        s[i] == 'y' && (i+1 == s.length)\n        )\n        {\n       \
    \     vowels++;\n        }\n    }\n    return vowels;\n}", "{\n    long vcnt=0;\n\
    \    foreach(c; s)\n    {\n        if ( c=='a' || c=='e' || c=='i' || c=='o' ||\
    \ c=='u' || (c=='y' && s.length()-1 == s.indexOf(c)))\n        {\n           \
    \ vcnt++;\n        }\n    }\n    return vcnt;\n}", "{\n    return filter!((a)\
    \ => ((a == 'a') || (a == 'e') || (a == 'i') || (a == 'o') || (a == 'u') || (a\
    \ == 'y')) )(s).length;\n}", "{\n    long count = 0;\n    foreach(c; s)\n    {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    bool isLastY = false;\n    foreach(c; s) {\n       \
    \ if(tolower(c) == 'a' || tolower(c) == 'e' || tolower(c) == 'i' || tolower(c)\
    \ == 'o' || tolower(c) == 'u') {\n            if(tolower(c) == 'y') {\n      \
    \          isLastY = true;\n            }\n            count++;\n        } else\
    \ {\n            isLastY = false;\n        }\n    }\n    return count + isLastY;\n\
    }", "{\n    /*\n    For a given word, call it s, there are four cases:\n    (1)\
    \ s ends in the consonant y.\n    (2) s ends in the vowel y.\n    (3) s does not\
    \ end in y.\n    (4) s is the empty string.\n    */\n    long n = s.length;\n\
    \    if (n == 0) return 0;\n    char last = s[n-1];\n    if (last == 'y') {\n\
    \        /*\n        If the last character of s is y, then there is one less vowel\
    \ in s\n        than in the substring formed by deleting the last character.\n\
    \        */\n        return vowels_count(s[0..n-2]) + (last in \"aeiou\");\n \
    \   } else {\n        /*\n        If the last character of s is not y, then there\
    \ is one more vowel in s\n        than in the substring formed by deleting the\
    \ last character.\n        */\n        return vowels_count(s[0..n-2]) + (last\
    \ in \"aeiouy\");\n    }\n}\n/*\n    Exercise 4.14", "{\n    long count = 0;\n\
    \    foreach(c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' || c == 'y')\n        {\n            ++count;\n        }\n \
    \   }\n    return count;\n}\n/*\nWrite a function non_vowels_count which takes\
    \ a string representing\n    a word as input and returns the number of non-vowels\
    \ in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y'\
    \ is also a\n    vowel, but only when it is at the end of the given word.", "{\n\
    \    long count = 0;\n    //for (int i = 0; i < s.length; i++) {\n    foreach(c;\
    \ s) {\n        char upperC = toupper(c);\n        if (upperC == 'A' || upperC\
    \ == 'E' || upperC == 'I' || upperC == 'O' || upperC == 'U') {\n            count\
    \ += 1;\n        }\n    }\n    return count;\n}", "{\n    long cnt = 0;\n    for\
    \ (int i = 0; i < s.length; i++)\n    {\n        if (s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n            cnt++;\n\
    \        }\n        else if (s[i] == 'y' && i == s.length - 1)\n        {\n  \
    \          cnt++;\n        }\n    }\n    return cnt;\n}", "{\n    long length\
    \ = s.length;\n    long result = 0;\n    for (int i = 0; i < length; i++)\n  \
    \  {\n        char c = tolower(s[i]);\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u')\n        {\n            result++;\n        }\n\
    \    }\n    if (s[length - 1] == 'y')\n    {\n        result++;\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    for (size_t i = 0; i < s.length; i++)\n\
    \    {\n        auto c = toLower(s[i]);\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u')\n        {\n            count++;\n        }\n\
    \    }\n    if (toLower(s[s.length - 1]) == 'y')\n    {\n        count++;\n  \
    \  }\n    return count;\n}", "{\n    long vowel_count = 0;\n    auto last = s.length\
    \ - 1;\n    if (s[last] == 'y')\n    {\n        vowel_count++;\n    }\n    foreach\
    \ (i, char c; s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n        {\n            vowel_count++;\n        }\n    }\n\
    \    return vowel_count;\n}\n/*\nWrite a function factorial which takes a positive\
    \ integer n and\n    returns n! (n factorial).\n    Example:\n    >>> factorial(5)\n\
    \    120L\n    >>> factorial(0)\n    1L\n*/\nlong factorial(long n)\n{\n    long\
    \ fac = 1;\n    if (n == 0)\n    {\n        return 1;\n    }\n    foreach (i;\
    \ 0 .. n)\n    {\n        fac *= i + 1;\n    }\n    return fac;\n}\n/*\nWrite\
    \ a function find_min_max which takes an array of integers and\n    returns a\
    \ tuple of two values (min, max) such that min is the smallest\n    and max is\
    \ the largest of the array elements. The array should not be\n    modified by\
    \ the function.\n    Example:\n    >>> find_min_max([1, 2, 4, 3])\n    (1L, 4L)\n\
    \    >>> find_min_max([])\n    ()\n*/\ntuple!(long, long) find_min_max(const(long[])\
    \ arr)\n{\n    if (arr.length == 0)\n    {\n        return tuple();\n    }\n \
    \   long min = arr[0];\n    long max = arr[0];\n    foreach (i, ref e; arr)\n\
    \    {\n        if (e < min)\n        {\n            min = e;\n        }\n   \
    \     if (e > max)\n        {\n            max = e;\n        }\n    }\n    return\
    \ tuple(min, max);\n}\n/*\nWrite a function reverse which takes an array of integers\
    \ as input and\n    returns a reversed array. The original array should not be\
    \ modified by\n", "{\n    // your code goes here\n}", "{\n    long vowels = 0;\n\
    \    foreach(char c; s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n            vowels++;\n    }\n    return vowels;\n}",
  "{\n    long counter = 0;\n    long last_index = length(s) - 1;\n    foreach(ch;\
    \ s)\n    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch\
    \ == 'u')\n        {\n            counter++;\n        }\n        else if(ch ==\
    \ 'y' && (last_index == -1 || s[last_index] == ch))\n        {\n            counter++;\n\
    \        }\n        last_index--;\n    }\n    return counter;\n}", "{\n    /*\
    \ magic goes here */\n    int count = 0;\n    for (int i = 0; i < s.length; i++)\n\
    \    {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u')\n        {\n            count++;\n        }\n        else if (s[i]\
    \ == 'y' && i == s.length - 1)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}", "{\n    // magic goes here \n    \n    long cnt\
    \ = 0;\n    foreach(c; s)\n    {\n        switch(c)\n        {\n            case\
    \ 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n\
    \            case 'u':\n            case 'y':\n                cnt++;\n      \
    \          break;\n            default:\n                break;\n        }\n \
    \   }\n    return cnt;\n}", "{\n    //write your code here\n    long vowels =\
    \ 0;\n    bool y_vowel = false;\n    foreach(char c; s) {\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ++vowels;\n\
    \        }\n        if (c == 'y') {\n            y_vowel = true;\n        }\n\
    \    }\n    if (y_vowel) {\n        return vowels + 1;\n    }\n    return vowels;\n\
    }", "{ \n    //TODO: Implement this function\n    long result = 0;\n    long len\
    \ = s.length;\n    for(long i = 0; i < len; i++)\n    {\n        if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n        {\n  \
    \          result++;\n        }\n        else if(i == len - 1 && s[i] == 'y')\n\
    \        {\n            result++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long count=0;\n    foreach(char c; s)\n    {\n        if(c=='a' || c=='e'\
    \ || c=='i' || c=='o' || c=='u' || c=='y')\n            count++;\n    }\n    return\
    \ count;\n}", "{\n\timmutable vowels = \"aeiouy\";\n\treturn s.filter!(a => a.tolower\
    \ ~ vowels).length;\n}", "{\n    long numVowels = 0;\n    foreach(char c; s)\n\
    \    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\
    \ c == 'y')\n        {\n            numVowels++;\n        }\n    }\n    return\
    \ numVowels;\n}", "{\n    static auto set = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"y\"];\n    size_t len = s.length;\n    size_t cnt = 0;\n    foreach(i, c;\
    \ s) {\n        if (lower(c) in set) {\n            cnt++;\n        }\n    }\n\
    \    return cnt;\n}", "{\n    return count((r) => member(r, ['a', 'e', 'i', 'o',\
    \ 'u', 'y']), s);\n}", "{\n    long count = 0;\n    //foreach (e; s) {\n    for\
    \ (size_t i = 0; i < s.length; i++) {\n        char e = s[i];\n        if (e ==\
    \ 'a' || e == 'e' || e == 'i' || e == 'o' || e == 'u') {\n            count++;\n\
    \        }\n        if (e == 'y' && i != s.length - 1) {\n            continue;\n\
    \        }\n        if (e == 'y' && i == s.length - 1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long sum = 0;\n    foreach(immutable\
    \ c; s) \n    {\n        if(tolower(c) == 'a' || tolower(c) == 'e' || tolower(c)\
    \ == 'i' || tolower(c) == 'o' || tolower(c) == 'u')\n        {\n            sum++;\n\
    \        }\n    }\n    return sum;\n}\n/*\nWrite a function fibonacci which takes\
    \ one argument n and generates\n    the first n Fibonacci numbers.\n    Fibonacci\
    \ numbers are numbers in the sequence 0, 1, 1, 2, 3, 5, 8, 13, 21, ...\n    where\
    \ each number after the first two is the sum of the previous two.", "{\n    long\
    \ count = 0;\n    int last = s.length - 1;\n    foreach(c; s)\n    {\n       \
    \ if(tolower(c) == 'a' || tolower(c) == 'e' || tolower(c) == 'i' || tolower(c)\
    \ == 'o' || tolower(c) == 'u')\n        {\n            if(tolower(c) == 'y' &&\
    \ s.indexOf(c) != last)\n            {\n                continue;\n          \
    \  }\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(c; s)\n    {\n        if((c == 'a') || (c == 'e') ||\
    \ (c == 'i') || (c == 'o') || (c == 'u') ||\n           (c == 'A') || (c == 'E')\
    \ || (c == 'I') || (c == 'O') || (c == 'U'))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(inout\
    \ char c; s)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' ||\n           (c == 'y' && s.length == count + 1))\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    bool end_y = (s[$-1] == 'y');\n    foreach(ch; s) {\n        if (ch\
    \ == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || (ch == 'y' &&\
    \ end_y))\n            count += 1;\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(ch; s)\n    {\n        if (ch == 'a' || ch == 'e' ||\
    \ ch == 'i' || ch == 'o' || ch == 'u' ||\n            ch == 'A' || ch == 'E' ||\
    \ ch == 'I' || ch == 'O' || ch == 'U')\n            count++;\n    }\n    if (count\
    \ > 0 && s[$-1] == 'y') count++;\n    return count;\n}", "{\n    long num = 0;\n\
    \    foreach(c; s) \n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' || c == 'y') \n        {\n            num++;\n        }\n\
    \    }\n    return num;\n}", "{ \n    long vowels = 0;\n    foreach(char c; s)\n\
    \    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n\
    \           c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n      \
    \  {\n            vowels++;\n        }\n    }\n    return vowels;\n}", "{\n  \
    \  long count = 0;\n    for (int i = 0; i < s.length; i++) \n    {\n        auto\
    \ c = toLower(s[i]);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') \n        {\n            count++;\n        }\n    }\n    if (toLower(s[$\
    \ - 1]) == 'y') \n    {\n        count++;\n    }\n    return count;\n}\n// ________________________________________________________________________________________\n\
    /*\nWrite a function multi_divide which takes an integer as input and returns\
    \ an integer.\n    The output integer is the result of multiplying all numbers\
    \ in the range of 0 to the\n    input integer (both inclusive) and then dividing\
    \ it by all numbers in the range of 1\n    to the input integer (both inclusive).\
    \ Return 0 if the input is invalid.", "{\n    long vowels = 0;\n    foreach(c;\
    \ s)\n    {\n        c = tolower(c);\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u')\n            vowels++;\n    }\n    if(s[$-1] ==\
    \ 'y')\n        vowels++;\n    return vowels;\n}", "{\n    long ans = 0;\n   \
    \ for (;s != \"\";s = s[1..$])\n    {\n        switch (s[0])\n        {\n    \
    \        case 'a':\n            case 'e':\n            case 'i':\n           \
    \ case 'o':\n            case 'u':\n            case 'y':\n                ++ans;\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return ans;\n}", "{\n    long nvowels=0;\n    foreach(char ch;\
    \ s) \n    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch\
    \ == 'u' || ch == 'y')\n            nvowels++;\n    }\n    return nvowels;\n}",
  "{\n    long result = 0;\n    bool at_end = false;\n    foreach(c; s)\n    {\n \
    \       switch(c)\n        {\n            case 'a':\n            case 'e':\n \
    \           case 'i':\n            case 'o':\n            case 'u':\n        \
    \        result += 1;\n                break;\n            case 'y':\n       \
    \         if(at_end)\n                    result += 1;\n                break;\n\
    \            default:\n                break;\n        }\n        at_end = c ==\
    \ 'y';\n    }\n    return result;\n}\n/*\nWrite a function vowels_from_end which\
    \ takes a string representing\n    a word as input and returns the number of vowels\
    \ in the string\n    at the end of the word. Vowels in this case are 'a', 'e',\
    \ 'i', 'o', 'u'.", "{\n    long count = 0;\n    foreach(s;i)\n    {\n        if(s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || (s[i]\
    \ == 'y' && i == s.length()-1))\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
