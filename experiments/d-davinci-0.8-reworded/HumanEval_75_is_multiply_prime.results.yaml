name: HumanEval_75_is_multiply_prime
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a<6 || a > 100)\n        return false;\n    \n    int[] primes = new\
    \ int[3];\n    primes[0] = 2;\n    primes[1] = 3;\n    primes[2] = 5;\n    \n\
    \    foreach(i; 0..3)\n    {\n        while(a%primes[i] == 0)\n        {\n   \
    \         a /= primes[i];\n        }\n    }\n    return a == 1;\n}\nassert(is_multiply_prime(30L));\n\
    assert(!is_multiply_prime(29L));\n \n/*\nWrite a function that accepts a string\
    \ and returns the number of unique characters in it.\n    Example:\n    >>> unique_characters(\"\
    aaabbbccc\")\n    3\n*/\n \nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1zedybbh.d(32): Error: declaration expected, not `assert`\\n/tmp/tmp1zedybbh.d(33):\
    \ Error: declaration expected, not `assert`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp1zedybbh.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    auto isPrime = (long n) {return n == 2 || n == 3 || n == 5 || n == 7 || n\
    \ == 11 || n == 13 || n == 17 || n == 19 || n == 23 || n == 29 || n == 31 || n\
    \ == 37 || n == 41 || n == 43 || n == 47 || n == 53 || n == 59 || n == 61 || n\
    \ == 67 || n == 71 || n == 73 || n == 79 || n == 83 || n == 89 || n == 97;};\n\
    \    foreach(x; 0 .. 100)\n    {\n        if(isPrime(x) && a % x == 0)\n     \
    \   {\n            a /= x;\n        }\n    }\n    return a == 1;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjd88v0dx.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427f75]\\n??:? void tmpjd88v0dx.__unittest_L25_C1()\
    \ [0x427bc6]\\n??:? void tmpjd88v0dx.__modtest() [0x427cf4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bc9b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42ab2e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fcc1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430170]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fc4d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42ab05]\\n??:? runModuleUnitTests [0x42ba71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4283c4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42834b]\\n??:? _d_run_main [0x4282b6]\\n??:? main [0x427d07]\\\
    n??:? __libc_start_main [0xfcd29554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    auto primes = [](long max) {\n        bool[] is_prime = new bool[max];\n\
    \        is_prime[] = true;\n        foreach (immutable i; 0 .. max)\n       \
    \     is_prime[i] = true;\n        is_prime[0] = false;\n        is_prime[1] =\
    \ false;\n        foreach (immutable i; 2 .. max)\n            if (is_prime[i])\n\
    \                foreach (immutable j; i*i .. max by i)\n                    is_prime[j]\
    \ = false;\n        return is_prime;\n    }(100);\n    if (a < 3)\n        return\
    \ false;\n    foreach (immutable prime; primes)\n        if (a % prime == 0) {\n\
    \            a /= prime;\n            if (a == 1) return true;\n            if\
    \ (primes[a]) return true;\n        }\n    return false;\n}\nunittest\n{\n   \
    \ alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuwz4ybpn.d(15): Error: found `max` when expecting `.` following\
    \ long\\n/tmp/tmpuwz4ybpn.d(15): Error: found `)` when expecting identifier following\
    \ `long`.\\n/tmp/tmpuwz4ybpn.d(15): Error: found `{` when expecting `,`\\n/tmp/tmpuwz4ybpn.d(16):\
    \ Error: found `[` when expecting `.` following bool\\n/tmp/tmpuwz4ybpn.d(16):\
    \ Error: found `]` when expecting identifier following `bool`.\\n/tmp/tmpuwz4ybpn.d(16):\
    \ Error: found `is_prime` when expecting `,`\\n/tmp/tmpuwz4ybpn.d(16): Error:\
    \ expression expected, not `=`\\n/tmp/tmpuwz4ybpn.d(16): Error: found `new` when\
    \ expecting `,`\\n/tmp/tmpuwz4ybpn.d(16): Error: found `[` when expecting `.`\
    \ following bool\\n/tmp/tmpuwz4ybpn.d(16): Error: found `]` when expecting `,`\\\
    n/tmp/tmpuwz4ybpn.d(16): Error: expression expected, not `;`\\n/tmp/tmpuwz4ybpn.d(17):\
    \ Error: found `is_prime` when expecting `,`\\n/tmp/tmpuwz4ybpn.d(17): Error:\
    \ found `;` when expecting `,`\\n/tmp/tmpuwz4ybpn.d(18): Error: expression expected,\
    \ not `foreach`\\n/tmp/tmpuwz4ybpn.d(18): Error: `(arguments)` expected following\
    \ `immutable(i)`\\n/tmp/tmpuwz4ybpn.d(18): Error: found `;` when expecting `,`\\\
    n/tmp/tmpuwz4ybpn.d(18): Error: found `..` when expecting `,`\\n/tmp/tmpuwz4ybpn.d(19):\
    \ Error: found `is_prime` when expecting `,`\\n/tmp/tmpuwz4ybpn.d(19): Error:\
    \ found `;` when expecting `,`\\n/tmp/tmpuwz4ybpn.d(20): Error: found `;` when\
    \ expecting `,`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwz4ybpn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool prime = false;\n    int count = 0;\n    static int arr[10];\n    for\
    \ (long i = 2; i < a; i++)\n    {\n        if (a % i == 0)\n        {\n      \
    \      for (long j = 2; j < i; j++)\n            {\n                if (i % j\
    \ == 0)\n                {\n                    prime = false;\n             \
    \       break;\n                }\n                else\n                {\n \
    \                   prime = true;\n                }\n            }\n        \
    \    if (prime)\n            {\n                arr[count] = i;\n            \
    \    count++;\n            }\n        }\n    }\n    if (count == 3)\n    {\n \
    \       return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9bq74_n8.d(17): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `int[10] arr`\\n/tmp/tmp9bq74_n8.d(36): Error: cannot implicitly convert\
    \ expression `i` of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp9bq74_n8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\t\
    auto primes = [](size_t n) {\n\t\tauto sieve = iota(2L, n).array;\n\t\tforeach\
    \ (i; sieve) {\n\t\t\tauto factor = sieve[i];\n\t\t\tif (factor > 0) {\n\t\t\t\
    \tauto index = cast(long) i + factor;\n\t\t\t\twhile (index < sieve.length) {\n\
    \t\t\t\t\tsieve[index] = 0;\n\t\t\t\t\tindex += factor;\n\t\t\t\t}\n\t\t\t}\n\t\
    \t}\n\t\treturn sieve.retro.array.filter!(x => x > 0).array;\n\t};\n\tauto is_prime\
    \ = (long n) {\n\t\treturn primes(cast(size_t) n).canFind(n);\n\t};\n\treturn\
    \ primes(cast(size_t) a).filter!(x => a % x == 0).array.length == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb0c9l4po.d(15): Error: found `n` when expecting `,`\\n/tmp/tmpb0c9l4po.d(15):\
    \ Error: semicolon expected following auto declaration, not `{`\\n/tmp/tmpb0c9l4po.d(28):\
    \ Deprecation: use `{ }` for an empty statement, not `;`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0c9l4po.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.bitmanip;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.math;\n    import std.array;\n    import std.conv;\n    import\
    \ std.bigint;\n    import std.range;\n    import std.typecons;\n    import std.string;\n\
    \    import std.traits;\n    //import std.conv;\n    import std.algorithm;\n \
    \   import std.bigint;\n    import std.math;\n    long [] primes = [2L, 3L, 5L,\
    \ 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L,\
    \ 71L, 73L, 79L, 83L, 89L, 97L];\n    if (a < 3) return false;\n    long limit\
    \ = sqrt(a);\n    foreach (n; primes)\n    {\n        if (n > limit) break;\n\
    \        while (a % n == 0)\n        {\n            a /= n;\n            if (a\
    \ == 1) return true;\n            limit = sqrt(a);\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_n8zpncl.d(32): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp_n8zpncl.d(40): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp_n8zpncl.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.stdio;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.algorithm;\n    import std.range;\n    import std.range : iota;\n    auto\
    \ is_prime = (long a) => a > 1 && all!(a % iota(2, a - 1))((a, b) => a % b !=\
    \ 0);\n    auto generate_primes = () => filter!(is_prime)(iota(2, a));\n    auto\
    \ prime_factors = () => map!(a % _)(iota(2, a - 1));\n    auto multiply_prime\
    \ = (a) => !all!(prime_factors)(!is_prime);\n    return multiply_prime(a);\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp0wwx14k.d(21): Error: incompatible types for `(a) % (iota(2,\
    \ a - 1L))`: `long` and `Result`\\n/tmp/tmpp0wwx14k.d(23): Error: undefined identifier\
    \ `_`\\n/tmp/tmpp0wwx14k.d(24): Error: variable `tmpp0wwx14k.is_multiply_prime.multiply_prime`\
    \ type `void` is inferred from initializer `(a) => !all!prime_factors(!is_prime)`,\
    \ and variables cannot be of type `void`\\n/tmp/tmpp0wwx14k.d(24): Error: template\
    \ lambda has no value\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0wwx14k.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    bool is_not_multiply_prime = false;\n    bool is_multiply_prime = true;\n\
    \    int counter = 0;\n    //prime numbers \n    foreach( i;2..a)\n    {\n   \
    \     bool is_prime = true;\n        foreach( j; 2..i)\n        {\n          \
    \  if (i % j == 0) \n            {\n                is_prime = false;\n      \
    \          break;\n            }\n        }\n        if (is_prime)\n        {\n\
    \            counter++;\n            if (counter == 3)\n            {\n      \
    \          break;\n            }\n        }\n    }\n    int number = 3;\n    int\
    \ three_prime_numbers_list[0..number];\n    int index = 0;\n    foreach(i; 2..a)\n\
    \    {\n        bool is_prime = true;\n        foreach(j; 2..i)\n        {\n \
    \           if (i % j == 0) \n            {\n                is_prime = false;\n\
    \                break;\n            }\n        }\n        if (is_prime)\n   \
    \     {\n            three_prime_numbers_list[index] = i;\n            index++;\n\
    \            if (index == 3)\n            {\n                break;\n        \
    \    }\n        }\n    }\n    int result = 1;\n    foreach(i; 0..number)\n   \
    \ {\n        result *= three_prime_numbers_list[i];\n    }\n    if (result ==\
    \ a)\n    {\n        return is_multiply_prime;\n    }\n    else\n    {\n     \
    \   return is_not_multiply_prime;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4zcevl0u.d(40): Error: found `..` when expecting `]`\\n/tmp/tmp4zcevl0u.d(40):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `int[0] three_prime_numbers_list`\\\
    n/tmp/tmp4zcevl0u.d(40): Error: semicolon expected, not `number`\\n/tmp/tmp4zcevl0u.d(40):\
    \ Error: found `]` when expecting `;` following statement\\n/tmp/tmp4zcevl0u.d(40):\
    \ Deprecation: use `{ }` for an empty statement, not `;`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zcevl0u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int j = 2;\n    long b = a;\n    if(isPrime(a))\n        return true;\n \
    \   while(j<=b)\n    {\n        if(a%j==0)\n        {\n            if(isPrime(j))\n\
    \            {\n                a/=j;\n                j=2;\n                if(isPrime(a))\n\
    \                    return true;\n            }\n            else\n         \
    \       j++;\n        }\n        else\n            j++;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8bbp0oro.d(17): Error: undefined identifier `isPrime`\\n/tmp/tmp8bbp0oro.d(23):\
    \ Error: undefined identifier `isPrime`\\n/tmp/tmp8bbp0oro.d(27): Error: undefined\
    \ identifier `isPrime`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmp8bbp0oro.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a == 1) return false;\n    auto primes = Tuple!bool(100);\n    foreach\
    \ (j; 0 .. 100)\n        primes[j] = true;\n    int prime_cnt = 0;\n    foreach\
    \ (j; 2 .. 100) \n    {\n        if (primes[j])\n        {\n            prime_cnt++;\n\
    \            int p = j;\n            while (p < 100)\n            {\n        \
    \        primes[p] = false;\n                p += j;\n            }\n        }\n\
    \    }\n    bool[] primes_arr = primes[2 .. $];\n    bool found = false;\n   \
    \ foreach (i; 0 .. prime_cnt)\n    {\n        foreach (j; i .. prime_cnt)\n  \
    \      {\n            foreach (k; j .. prime_cnt)\n            {\n           \
    \     if (primes_arr[i] * primes_arr[j] * primes_arr[k] == a)\n              \
    \  {\n                    found = true;\n                    break;\n        \
    \        }\n            }\n            if (found) break;\n        }\n        if\
    \ (found) break;\n    }\n    return found;\n}\n \n/*\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_qb_ioa_.d(54): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qb_ioa_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long primes = 0;\n    foreach(i; iota(2, a)) {\n        bool is_prime = true;\n\
    \        for(long j = 2; j <= i / 2; j++) {\n            if(i % j == 0) {\n  \
    \              is_prime = false;\n                break;\n            }\n    \
    \    }\n        if(is_prime) {\n            long tmp = a / i;\n            foreach(k;\
    \ iota(i, tmp)) {\n                bool is_prime = true;\n                for(long\
    \ j = 2; j <= k / 2; j++) {\n                    if(k % j == 0) {\n          \
    \              is_prime = false;\n                        break;\n           \
    \         }\n                }\n                if(is_prime) {\n             \
    \       if(i * k == tmp) {\n                        //primes ~= i;\n         \
    \               //primes ~= k;\n                        return true;\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\n/*\n    In-place merge sort\n    >>> inplace_merge_sort([1, 4, 2,\
    \ 3, 7, 6, 5, 8])\n    [1, 2, 3, 4, 5, 6, 7, 8]\n*/\nT[] inplace_merge_sort(T)(T[]\
    \ arr)\n{\n    auto len = arr.length;\n    if(len < 2)\n        return arr;\n\
    \    int mid = len / 2;\n    T[] arr1 = arr[0 .. mid];\n    T[] arr2 = arr[mid\
    \ .. $];\n    return merge(inplace_merge_sort(arr1), inplace_merge_sort(arr2));\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxxwby01k.d(16): Error: undefined identifier `iota`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxxwby01k.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.algorithm;\n    import std.conv;\n    import std.range;\n    import\
    \ std.stdio;\n    import std.string;\n    int[] primeNumbers;\n    primeNumbers.length\
    \ = 0;\n    int myCounter = 1;\n    while (myCounter < a)\n    {\n        if(\
    \ isPrime(myCounter) ) \n        {\n            primeNumbers ~= myCounter;\n \
    \       }\n        myCounter++;\n    }\n    myCounter = 0;\n    while (myCounter\
    \ < primeNumbers.length)\n    {\n        auto test = a % primeNumbers[myCounter];\n\
    \        if (test == 0) \n        {\n            if( a == primeNumbers[myCounter]\
    \ ) \n            {\n                return false;\n            }\n          \
    \  else \n            {\n                return true;\n            }\n       \
    \ }\n        myCounter++;\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp17jtdzfs.d(25): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp17jtdzfs.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    int nn = int(a);\n    int sum = 0;\n    foreach(i; range(1, nn + 1))\n  \
    \  {\n        if(a % i == 0)\n        {\n            sum += 1;\n        }\n  \
    \  }\n    if(sum == 2)\n    {\n        return true;\n    }\n    else\n    {\n\
    \        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr1a1u32m.d(15): Error: cannot implicitly convert expression `a`\
    \ of type `long` to `int`\\n/tmp/tmpr1a1u32m.d(17): Error: undefined identifier\
    \ `range`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr1a1u32m.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    //Tests for a prime number\n    auto is_prime = [](long x) -> bool {\n  \
    \      if (x < 2) {\n            return false;\n        }\n        for (long i\
    \ = 2; i < sqrt(x); i++) {\n            if (x % i == 0) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    };\n    //Gets the\
    \ prime numbers that divide the given number\n    auto get_primes = [is_prime](long\
    \ x) -> Tuple!(long, long, long) {\n        for (long i = 2; i < x; i++) {\n \
    \           if (is_prime(i) && x % i == 0) {\n                for (long j = 2;\
    \ j < x / i; j++) {\n                    if (is_prime(j) && x % j == 0) {\n  \
    \                      for (long k = 2; k < x / (i * j); k++) {\n            \
    \                if (is_prime(k) && x % k == 0) {\n                          \
    \      return tuple(i, j, k);\n                            }\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n        return tuple(0L, 0L, 0L);\n    };\n    //Checks if the three primes\
    \ are the same as the given number\n    auto is_same = [](long a, Tuple!(long,\
    \ long, long) tuple) -> bool {\n        return tuple[0] * tuple[1] * tuple[2]\
    \ == a;\n    };\n    return is_same(a, get_primes(a));\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4g348vhw.d(16): Error: found `x` when expecting `.` following\
    \ long\\n/tmp/tmp4g348vhw.d(16): Error: found `)` when expecting identifier following\
    \ `long`.\\n/tmp/tmp4g348vhw.d(16): Error: expression expected, not `>`\\n/tmp/tmp4g348vhw.d(16):\
    \ Error: found `bool` when expecting `,`\\n/tmp/tmp4g348vhw.d(26): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmp4g348vhw.d(28): Error: expression expected,\
    \ not `auto`\\n/tmp/tmp4g348vhw.d(28): Error: found `get_primes` when expecting\
    \ `,`\\n/tmp/tmp4g348vhw.d(28): Error: expression expected, not `=`\\n/tmp/tmp4g348vhw.d(28):\
    \ Error: found `x` when expecting `.` following long\\n/tmp/tmp4g348vhw.d(28):\
    \ Error: found `)` when expecting identifier following `long`.\\n/tmp/tmp4g348vhw.d(28):\
    \ Error: expression expected, not `>`\\n/tmp/tmp4g348vhw.d(28): Error: found `Tuple`\
    \ when expecting `,`\\n/tmp/tmp4g348vhw.d(43): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp4g348vhw.d(45): Error: expression expected, not `auto`\\n/tmp/tmp4g348vhw.d(45):\
    \ Error: found `is_same` when expecting `,`\\n/tmp/tmp4g348vhw.d(45): Error: expression\
    \ expected, not `=`\\n/tmp/tmp4g348vhw.d(45): Error: found `a` when expecting\
    \ `.` following long\\n/tmp/tmp4g348vhw.d(45): Error: found `,` when expecting\
    \ identifier following `long`.\\n/tmp/tmp4g348vhw.d(45): Error: found `Tuple`\
    \ when expecting `,`\\n/tmp/tmp4g348vhw.d(45): Error: found `,` when expecting\
    \ `.` following long\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4g348vhw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    import std.algorithm;\n    import std.stdio;\n    import std.math;\n    import\
    \ std.typecons;\n    import std.range;\n    auto is_prime = curry!(std.math.isPrime)(_);\n\
    \    auto prime_range = iota(1L, a+1).filter!is_prime();\n    foreach(a; prime_range)\
    \ {\n        foreach(b; prime_range) {\n            if(a*b >= a) break;\n    \
    \        foreach(c; prime_range) {\n                if(a*b*c == a) return true;\n\
    \            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm03znw_q.d(20): Error: template instance `curry!(std.math.isPrime)`\
    \ template `curry` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpm03znw_q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{ \n\
    \    if (a <= 1) \n        return false; \n    int counter = 0; \n    for (long\
    \ i = 2; i <= a / 2; i++) { \n        if (a % i == 0) { \n            if (is_prime(i))\
    \ \n                counter++; \n            if (counter == 3) \n            \
    \    return true; \n        } \n    } \n    return false; \n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwtre43s4.d(20): Error: undefined identifier `is_prime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwtre43s4.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    // TODO\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n   \
    \ assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L)\
    \ == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpil_88d6i.d(13): Error: function `tmpil_88d6i.is_multiply_prime`\
    \ has no `return` statement, but is expected to return a value of type `bool`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpil_88d6i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    if (a < 1) \n        return false;\n    int z = 0;\n    for (auto c = 1;\
    \ c <= a; c++) \n    {\n        if (a % c == 0) \n        {\n            if (isPrime(c))\n\
    \                z++;\n        }\n    }\n    if (z == 3)\n        return true;\n\
    \    else\n        return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptzmtvch5.d(22): Error: undefined identifier `isPrime`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptzmtvch5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    long [] list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    auto l = list.length;\n    for (long\
    \ i = 0; i < l; i++)\n    {\n        if (a % list[i] == 0)\n        {\n      \
    \      a /= list[i];\n            i--;\n        }\n    }\n    return a == 1;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpenxdyci9.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42825d]\\n??:? void tmpenxdyci9.__unittest_L27_C1()\
    \ [0x427eae]\\n??:? void tmpenxdyci9.__modtest() [0x427fdc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2bb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b14e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302e1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430790]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43026d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b125]\\n??:? runModuleUnitTests [0x42c091]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428720]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286a7]\\n??:? _d_run_main [0x428612]\\n??:? main [0x427fef]\\\
    n??:? __libc_start_main [0xc1354554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30L)\n\
    \    true\n    30 = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n\
    \    static long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    int last_prime_number\
    \ = prime_numbers.length;\n    int i = 0;\n    int temp = 0;\n    while (a > 1)\
    \ \n    {\n        if (a % prime_numbers[i] == 0) \n        {\n            temp++;\n\
    \            a /= prime_numbers[i];\n        }\n        else \n        {\n   \
    \         i++;\n        }\n    }\n    return temp == 3;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptru9ajjf.d(16): Error: cannot implicitly convert expression `prime_numbers.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmptru9ajjf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
