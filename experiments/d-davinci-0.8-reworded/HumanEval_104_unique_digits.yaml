name: HumanEval_104_unique_digits
language: d
prompt: "import std.math;\n/*\nGiven an array of positive integers x. return a sorted\
  \ array of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
  \ array should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15L,\
  \ 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L, 323L, 1422L,\
  \ 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n"
tests: "unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
  \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
  \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
  \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
completions: ["{ \n    return x.filter!((y) => \n                     y.toString().chars.filter!((z)\
    \ =>\n                                                z.toString().toInt() % 2\
    \ == 0)\n                                                .empty).sort();\n}",
  "{\n    long[] temp_arr=new long[x.length];\n    int count=0;\n    for(int i=0;i<x.length;i++)\n\
    \    {\n        bool is_no_even=true;\n        while(x[i]>0)\n        {\n    \
    \        long digit=x[i]%10;\n            if(digit%2==0)\n            {\n    \
    \            is_no_even=false;\n                break;\n            }\n      \
    \      x[i]/=10;\n        }\n        if(is_no_even)\n        {\n            temp_arr[count]=x[i];\n\
    \            count++;\n        }\n    }\n    long[] ret=new long[count];\n   \
    \ for(int i=0;i<count;i++)\n    {\n        ret[i]=temp_arr[i];\n    }\n    return\
    \ ret;\n}", "{\n\tauto res = [];\n\tforeach(n; x)\n\t{\n\t\tstring nstring = format(\"\
    %s\", n);\n\t\tbool haseven = false;\n\t\tforeach(ch; nstring)\n\t\t{\n\t\t\t\
    if(ch.isDigit)\n\t\t\t{\n\t\t\t\tif(!(ch == '0' || ch == '2' || ch == '4' || ch\
    \ == '6' || ch == '8'))\n\t\t\t\t{\n\t\t\t\t\thaseven = true;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(haseven)\n\t\t{\n\t\t\tres ~= n;\n\t\t}\n\t\
    }\n\treturn sort(res);\n}", "{\n\tauto even_digits = map!(a => cast(char)a)([2,4,6,8,0]);\n\
    \tauto y = [];\n\tforeach(i; x)\n\t{\n\t\tauto digits = to!string(i);\n\t\tbool\
    \ has_even = false;\n\t\tforeach(digit; digits)\n\t\t{\n\t\t\tif(even_digits.canFind(digit))\n\
    \t\t\t{\n\t\t\t\thas_even = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!has_even)\n\
    \t\t\ty ~= i;\n\t}\n\treturn sort(y);\n}", "{\n    int count = 0;\n    for (int\
    \ i = 0; i < x.length; i++)\n    {\n        int temp = x[i];\n        if (temp\
    \ < 0)\n        {\n            temp = abs(temp);\n        }\n        while (temp\
    \ > 0)\n        {\n            int rem = temp % 10;\n            if (rem % 2 ==\
    \ 0)\n            {\n                x[i] = -1;\n                break;\n    \
    \        }\n            temp /= 10;\n        }\n    }\n    for (int i = 0; i <\
    \ x.length; i++)\n    {\n        if (x[i] != -1)\n        {\n            count++;\n\
    \        }\n    }\n    long[] ans = new long[count];\n    int j = 0;\n    for\
    \ (int i = 0; i < x.length; i++)\n    {\n        if (x[i] != -1)\n        {\n\
    \            ans[j] = x[i];\n            j++;\n        }\n    }\n    return ans;\n\
    }", "{\n    long[] res = new long[x.length];\n    int count = 0;\n    foreach(e;\
    \ x)\n    {\n        //\n        bool flag = true;\n        int n = e;\n     \
    \   while(n > 0)\n        {\n            int r = n % 10;\n            if(r % 2\
    \ == 0)\n            {\n                flag = false;\n                break;\n\
    \            }\n            n /= 10;\n        }\n        if(flag)\n        {\n\
    \            res[count] = e;\n            count++;\n        }\n    }\n    return\
    \ res[0..count];\n}\n \n/* Test\nUncomment to test.\n*/\n ", "{\n    int temp;\n\
    \    int e=0;\n    for(int i=0;i<x.length;i++)\n    {\n        temp=x[i];\n  \
    \      for(int j=0;j<digitCount(temp);j++)\n        {\n            if(temp%10%2==0)\n\
    \            {\n                e=1;\n                break;\n            }\n\
    \            temp=temp/10;\n        }\n        if(e==0)\n        {\n         \
    \   x[i]=x[i];\n        }\n        else\n        {\n            x[i]=0;\n    \
    \    }\n        e=0;\n    }\n    sort(x);\n    return x;\n}\n/*\n    Given a list\
    \ of unique words, return a 2D array of letters and \n    the count of words that\
    \ have that letter.\n    \n    For example:\n    >>> letter_count([\"apple\",\
    \ \"banana\", \"cabbage\"])\n    [\n        ['a', 2],\n        ['b', 2],\n   \
    \     ['c', 1]\n    ]\n*/\nchar[][] letter_count(string[] words) \n{\n    char[]\
    \ s = to!char[](words);\n    sort(s);\n    int count=0;\n    char temp;\n    char[][]\
    \ m;\n    m = new char[][](s.length);\n    m[0] = new char[2];\n    m[0][0]=s[0];\n\
    \    m[0][1]=1;\n    int j=1;\n    for(int i=1;i<s.length;i++)\n    {\n      \
    \  if(s[i]==m[j-1][0])\n        {\n            m[j-1][1]++;\n        }\n     \
    \   else\n        {\n            m[j] = new char[2];\n            m[j][0]=s[i];\n\
    \            m[j][1]=1;\n            j++;\n        }\n    }\n    m = m[0..j];\n\
    \    return m;\n}", "{\n    if(x.length == 0)\n        return x;\n    int ind_even\
    \ = -1;\n    int len = 0;\n    while(ind_even < x.length)\n    {\n        ind_even++;\n\
    \        int temp = x[ind_even];\n        while(temp != 0)\n        {\n      \
    \      int digit = temp % 10;\n            if(digit % 2 == 0)\n              \
    \  break;\n            temp /= 10;\n        }\n        if(temp == 0)\n       \
    \     len++;\n    }\n    long[] y = new long[len];\n    int i = 0;\n    ind_even\
    \ = -1;\n    while(ind_even < x.length)\n    {\n        ind_even++;\n        int\
    \ temp = x[ind_even];\n        while(temp != 0)\n        {\n            int digit\
    \ = temp % 10;\n            if(digit % 2 == 0)\n                break;\n     \
    \       temp /= 10;\n        }\n        if(temp == 0)\n        {\n           \
    \ y[i] = x[ind_even];\n            i++;\n        }\n    }\n    sort(y);\n    return\
    \ y;\n}", "{\n    long[] result = [];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }", "{ \n    auto evens = [1, 3, 5, 7, 9];\n    auto res = [];\n    foreach(n;\
    \ x)\n    {\n        foreach(d; to!string(n))\n        {\n            // Stop\
    \ at first even digit\n            if(evens.canFind(to!int(d))) break;\n     \
    \   }\n        if(evens.canFind(to!int(d))) continue;\n        res ~= n;\n   \
    \ }\n    return res;\n}", "{\n    // Write your solution here\n    vector<long>\
    \ odd;\n    for(long a : x)\n    {\n        int dig = 0;\n        int orig = a;\n\
    \        while(a > 0)\n        {\n            dig = a % 10;\n            if(dig\
    \ % 2 == 0)\n                break;\n            a /= 10;\n        }\n       \
    \ if(a == 0)\n            odd ~= orig;\n    }\n    sort(odd);\n    return odd.data;\n\
    }", "{\n    long[] result;\n    int num;\n    int length = 0;\n    for (int i\
    \ = 0; i < x.length; i++)\n    {\n        num = cast(int)x[i];\n        while\
    \ (num > 0)\n        {\n            if ((num % 10) % 2 == 0)\n            {\n\
    \                break;\n            }\n            num /= 10;\n            if\
    \ (num == 0)\n            {\n                length++;\n            }\n      \
    \  }\n    }\n    result = new long[length];\n    int j = 0;\n    for (int i =\
    \ 0; i < x.length; i++)\n    {\n        num = cast(int)x[i];\n        while (num\
    \ > 0)\n        {\n            if ((num % 10) % 2 == 0)\n            {\n     \
    \           break;\n            }\n            num /= 10;\n            if (num\
    \ == 0)\n            {\n                result[j] = x[i];\n                j++;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    /*\n    if (x\
    \ is not an array)\n        return []\n    for each in x\n        if (each%2 ==\
    \ 0)\n            x.remove(each)\n            */\n    \n    long[] y = [];\n \
    \   for (long a in x)\n    {\n        if (a%2 != 0)\n            y ~= a;\n   \
    \ }\n    return y;\n}", "{\n    List<long> list = new List<long>();\n    foreach(long\
    \ i in x)\n    {\n        if(i.ToString().IndexOf('2') == -1 &&\n           i.ToString().IndexOf('4')\
    \ == -1 &&\n           i.ToString().IndexOf('6') == -1 &&\n           i.ToString().IndexOf('8')\
    \ == -1 &&\n           i.ToString().IndexOf('0') == -1)\n            list.Add(i);\n\
    \    }\n    list.Sort();\n    return list.ToArray();\n}", "{\n    return x.filter!(a\
    \ => a % 2 != 0 && a.toString().chars.every!(b => b % 2 != 0)).sort();\n}", "{\n\
    \    // Note: Correct answer is to convert input to String and loop through String.\n\
    \    // I did the math instead :)\n    long[] newArray = new long[0];\n    foreach(long\
    \ d; x) {\n        long val = d;\n        bool unique = true;\n        while(val\
    \ > 0) {\n            if (modulo(val, 10) % 2 == 0) {\n                unique\
    \ = false;\n                break;\n            }\n            val = val / 10;\n\
    \        }\n        if (unique) {\n            newArray ~= d;\n        }\n   \
    \ }\n    return newArray;\n}", "{\n    long[] result = [];\n    foreach(e; x)\n\
    \    {\n        if(cast(int)e == e)\n        {\n            result ~= e;\n   \
    \     }\n        else\n        {\n            bool even = false;\n           \
    \ long num = e;\n            while(num > 0)\n            {\n                if(num\
    \ % 2 == 0)\n                {\n                    even = true;\n           \
    \         break;\n                }\n                num /= 10;\n            }\n\
    \            if(!even)\n            {\n                result ~= e;\n        \
    \    }\n        }\n    }\n    return sort(result);\n}", "{\n    long even = 0;\n\
    \    long[] answer = [];\n    foreach(num; x)\n    {\n        // %2 is even.\n\
    \        if(num % 2 == 0) \n        {\n            even++;\n        }\n      \
    \  else \n        {\n            answer ~= num;\n        }\n    }\n    if(even\
    \ == 0) \n    {\n        return x;\n    }\n    return answer;\n}", "{\n    long[dchar]\
    \ pos = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57];\n    int count = 0;\n    foreach(long\
    \ l; x)\n    {\n        foreach(dchar c; l.to!string)\n        {\n           \
    \ if(pos.find(c) != -1)\n                count++;\n        }\n    }\n    long[]\
    \ arr = new long[count];\n    int index = 0;\n    foreach(long l; x)\n    {\n\
    \        foreach(dchar c; l.to!string)\n        {\n            if(pos.find(c)\
    \ != -1)\n            {\n                arr[index] = l;\n                index++;\n\
    \            }\n        }\n    }\n    return arr;\n}", "{\n    int counter = 0;\n\
    \    long[] sortedArr = new long[x.length];\n    for (int i = 0; i < x.length;\
    \ i++)\n    {\n        if (x[i]%2 != 0)\n        {\n            sortedArr[counter]\
    \ = x[i];\n            counter++;\n        }\n    }\n    long[] y = new long[counter];\n\
    \    for (int i = 0; i < counter; i++)\n    {\n        y[i] = sortedArr[i];\n\
    \    }\n    return y;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
