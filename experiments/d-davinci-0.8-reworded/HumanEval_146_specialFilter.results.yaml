name: HumanEval_146_specialFilter
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n\tint count = 0;\n\t\n\
    \tforeach(num; nums) \n\t{\n\t\tint first = num.to!string[0].to!int;\n\t\tint\
    \ last = num.to!string[$-1].to!int;\n\t\t\n\t\tif(num > 10 && first % 2 == 1 &&\
    \ last % 2 == 1)\n\t\t\tcount++;\n\t}\n\t\n\treturn count;\n}\nunittest\n{\n \
    \   alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L])\
    \ == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_6yyavnf.d(20): Error: no property `to` for type `long`\\n/tmp/tmp_6yyavnf.d(21):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp_6yyavnf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    auto count = 0L;\n\
    \    auto firstNumber;\n    auto lastNumber;\n    auto result;\n    foreach(num;\
    \ nums) \n    {\n        firstNumber = num / 10^(floor(log10(num)));\n       \
    \ lastNumber = num % 10;\n        if(num > 10 && firstNumber % 2 != 0 && lastNumber\
    \ % 2 != 0) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr7lftxa_.d(17): Error: no identifier for declarator `firstNumber`\\\
    n/tmp/tmpr7lftxa_.d(17): Deprecation: use `{ }` for an empty statement, not `;`\\\
    n/tmp/tmpr7lftxa_.d(18): Error: no identifier for declarator `lastNumber`\\n/tmp/tmpr7lftxa_.d(18):\
    \ Deprecation: use `{ }` for an empty statement, not `;`\\n/tmp/tmpr7lftxa_.d(19):\
    \ Error: no identifier for declarator `result`\\n/tmp/tmpr7lftxa_.d(19): Deprecation:\
    \ use `{ }` for an empty statement, not `;`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpr7lftxa_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long greaterThan10\
    \ = nums.filter!((e) => (e > 10L)).length;\n    long oddFirstLast = nums.filter!((e)\
    \ => (e.toString().length > 1)).\n        filter!((e) => (((e.toString()[0].toInt\
    \ - '0'.toInt) & 1) == 1)).\n        filter!((e) => (((e.toString()[$ - 1].toInt\
    \ - '0'.toInt) & 1) == 1)).\n        length;\n    return greaterThan10 + oddFirstLast;\n\
    }\n/*\nWrite a function that takes an array of integers and returns the sum of\
    \ \n    those integers.\n    For example:\n    >>> addIntegers([1L, 2L, 3L])\n\
    \    6L\n    >>> addIntegers([-1L, 0L, 1L])\n    0L\n    >>> addIntegers([1L,\
    \ 2L, 3L, 5L, 7L, 9L])\n    27L\n*/\nlong addIntegers(long[] nums) \n{\n    return\
    \ nums.fold!(a => b => a + b)(0L);\n}\n/*\nWrite a function that takes an array\
    \ of integers and returns the sum of \n    the values of the elements of the array\
    \ whose first digit is even.\n    For example:\n    >>> digitSum([11L, 12L, 13L,\
    \ 14L, 15L])\n    26L\n    >>> digitSum([15L, -73L, 14L, -15L])\n    0L\n    >>>\
    \ digitSum([33L, -2L, -3L, 45L, 21L, 109L])\n    0L\n*/\nlong digitSum(long[]\
    \ nums) \n{\n    return nums.filter!((e) => (e.toString().length > 0)).\n    \
    \    filter!((e) => (((e.toString()[0].toInt - '0'.toInt) & 1) == 0)).\n     \
    \   fold!(a => b => a + b)(0L);\n}\n/*\nWrite a function that takes an array of\
    \ integers and returns the sum of \n    the values of the elements of the array\
    \ whose first digit\nunittest\n{\n    alias candidate = specialFilter;\n\n   \
    \ assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L,\
    \ 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) ==\
    \ 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n   \
    \ assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8e8w93yt.d(55): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8e8w93yt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    int count = 0;\n \
    \   foreach(long num; nums) \n    {\n        if(num > 10) \n        {\n      \
    \      long firstDigit = num / (cast(long) pow(10, ceil(log10(num)))) % 10;\n\
    \            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 &&\
    \ lastDigit % 2 != 0) \n            {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqbnau870.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428ffd]\\n??:? void tmpqbnau870.__unittest_L31_C1()\
    \ [0x4282a2]\\n??:? void tmpqbnau870.__modtest() [0x428d80]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d1db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c06e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431201]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4316b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43118d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c045]\\n??:? runModuleUnitTests [0x42cfb1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42944c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4293d3]\\n??:? _d_run_main [0x42933e]\\n??:? main [0x428d93]\\\
    n??:? __libc_start_main [0x2a2d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long n = 0;\n    foreach(long\
    \ x; nums)\n    {\n        long f = x;\n        long last = f % 10;\n        while(f\
    \ > 0)\n        {\n            f /= 10;\n        }\n        if(abs(x) > 10 &&\
    \ (f % 2 != 0) && (last % 2 != 0))\n        {\n            n++;\n        }\n \
    \   }\n    return n;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n\
    \    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpkttvo3ch.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42831d]\\n??:? void tmpkttvo3ch.__unittest_L32_C1()\
    \ [0x427ebe]\\n??:? void tmpkttvo3ch.__modtest() [0x42809c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c307]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b19a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43032d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307dc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b171]\\n??:? runModuleUnitTests [0x42c0dd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42876c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286f3]\\n??:? _d_run_main [0x42865e]\\n??:? main [0x4280af]\\\
    n??:? __libc_start_main [0x5a36d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long counter = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            long\
    \ temp = n;\n            int first = temp.to!int() / 10.to!int();\n          \
    \  int last = temp.to!int() % 10;\n            if(first % 2 != 0 && last % 2 !=\
    \ 0)\n            {\n                counter++;\n            }\n        }\n  \
    \  }\n    return counter;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4mmr9ifj.d(22): Error: no property `to` for type `long`\\n/tmp/tmp4mmr9ifj.d(22):\
    \ Error: no property `to` for type `int`\\n/tmp/tmp4mmr9ifj.d(23): Error: no property\
    \ `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmp4mmr9ifj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    import std.algorithm\
    \ : filter, map;\n    //return nums.filter!(a => a % 2 != 0 && a > 10).length;\n\
    \    return nums.filter!(a => a % 2 != 0 && a > 10)\n        .map!(b => b.to!string())\n\
    \        .filter!(c => (c[0] == '1' || c[0] == '3' || c[0] == '5' || c[0] == '7'\
    \ || c[0] == '9') && (c[$-1] == '1' || c[$-1] == '3' || c[$-1] == '5' || c[$-1]\
    \ == '7' || c[$-1] == '9'))\n        .length;\n}\n \nstatic assert(specialFilter([15L,\
    \ -73L, 14L, -15L]) == 1L);\nstatic assert(specialFilter([33L, -2L, -3L, 45L,\
    \ 21L, 109L]) == 2L);\n/*\nWrite a function that takes an array of strings as\
    \ input and returns \nthe number of strings that start with a capital letter.\
    \ \nFor example:\n>>> capCounter([\"Apple\", \"Dubai\", \"A\", \"B\"])\n2\n*/\n\
    long capCounter(string[] strs) \n{\n    import std.algorithm : filter;\n    return\
    \ strs.filter!(a => a[0] >= 'A' && a[0] <= 'Z').length;\n}\nunittest\n{\n    alias\
    \ candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n\
    \    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt7nd1443.d(19): Error: no property `to` for type `long`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/algorithm/iteration.d(499):\
    \        instantiated from here: `MapResult!(__lambda3, FilterResult!(__lambda2,\
    \ long[]))`\\n/tmp/tmpt7nd1443.d(19):        instantiated from here: `map!(FilterResult!(__lambda2,\
    \ long[]))`\\n/tmp/tmpt7nd1443.d(24):        called from here: `specialFilter([15L,\
    \ -73L, 14L, -15L])`\\n/tmp/tmpt7nd1443.d(24):        while evaluating: `static\
    \ assert(specialFilter([15L, -73L, 14L, -15L]) == 1L)`\\n/tmp/tmpt7nd1443.d(25):\
    \ Error: CTFE failed because of previous errors in `specialFilter`\\n/tmp/tmpt7nd1443.d(25):\
    \        while evaluating: `static assert(specialFilter([33L, -2L, -3L, 45L, 21L,\
    \ 109L]) == 2L)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt7nd1443.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    return nums.filter!(n\
    \ => n>10 && (n/10)%2!=0 && n%2!=0)().length;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcdhjddwq.d(16): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcdhjddwq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(n; nums)\n    {\n        long i = n;\n        if(n > 10)\n      \
    \  {\n            while(i > 9) i /= 10;\n            if(n % 2 != 0 && i % 2 !=\
    \ 0)\n                result++;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long ret = 0;\n  \
    \  foreach(num; nums) \n    {\n        if (num > 10) \n        {\n           \
    \ auto digits = num.toString.length.to!long;\n            auto firstNum = num.toString[0..1].to!long;\n\
    \            auto lastNum = num.toString[$-1..$].to!long;\n            if (firstNum\
    \ % 2 != 0 && lastNum % 2 != 0) \n            {\n                ret++;\n    \
    \        }\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw48qo1n9.d(21): Error: no property `toString` for type `long`\\\
    n/tmp/tmpw48qo1n9.d(22): Error: no property `toString` for type `long`\\n/tmp/tmpw48qo1n9.d(23):\
    \ Error: no property `toString` for type `long`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpw48qo1n9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    return nums.filter!(x\
    \ => x > 10L && isOdd(x % 10L) && isOdd(x / 10L)).length;\n}\nunittest\n{\n  \
    \  alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L])\
    \ == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjm5i6dzw.d(16): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjm5i6dzw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n\treturn nums.filter!(a\
    \ => a > 10L && a.toString().front.to!int % 2 == 1 && a.toString().back.to!int\
    \ % 2 == 1).length;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n\
    \    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf52a_ig2.d(16): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf52a_ig2.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        string strnum = to!string(num);\n    \
    \    if(num > 10 && to!long(strnum[0..1])%2 != 0 && to!long(strnum[$-1..$])%2\
    \ != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n \n \n \nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzkvgpy4q.d(19): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpzkvgpy4q.d(20): Error: template\
    \ instance `to!long` template `to` is not defined, did you mean No?\\n/tmp/tmpzkvgpy4q.d(20):\
    \ Error: template instance `to!long` template `to` is not defined, did you mean\
    \ No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkvgpy4q.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            int\
    \ first = to!int(num).front;\n            int last = to!int(num).back;\n     \
    \       if((first % 2 == 1) && (last % 2 == 1)) result++;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n\
    \    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa2ijphyd.d(21): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\n/tmp/tmpa2ijphyd.d(22): Error: template instance\
    \ `to!int` template `to` is not defined, did you mean No?\\nFailed: [\"dmd\",\
    \ \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2ijphyd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    auto numOddDigits\
    \ = 0L;\n    foreach(num; nums) \n    {\n        auto digits = num;\n        if(digits\
    \ < 0)\n            digits = -digits;\n        auto first = num[0];\n        auto\
    \ last = num[$-1];\n        if((first.isOdd && last.isOdd) && num > 10)\n    \
    \        numOddDigits++;\n    }\n    return numOddDigits;\n}\n// void main() {\
    \ }\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
    \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
    \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
    \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L,\
    \ 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
    \ == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzpjhll6a.d(22): Error: only one index allowed to index `long`\\\
    n/tmp/tmpzpjhll6a.d(23): Error: only one index allowed to index `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpjhll6a.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    int counter = 0;\n\
    \    foreach(int num; nums)\n    {\n        if(num > 10)\n        {\n        \
    \    string num_string = num.to!string;\n            if(to!int(num_string[0])\
    \ % 2 == 1 && \n               to!int(num_string[num_string.length-1]) % 2 ==\
    \ 1)\n                counter++;\n        }\n    }\n    return counter;\n}\n//\
    \ Version 2\nlong specialFilter_v2(long[] nums) \n{\n    import std.stdio : writeln;\n\
    \    int counter = 0;\n    foreach(int num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            int first_digit = num % 10;\n            while(num >=\
    \ 10)\n                num /= 10;\n            if(num % 2 == 1 && first_digit\
    \ % 2 == 1)\n                counter++;\n        }\n    }\n    return counter;\n\
    }\n/*\n    Write a function that takes a string that represents a path to a file\
    \ and returns \n    the number of lines of code in the file (meaning: the number\
    \ of lines that are not empty).\n    For example:\n    >>> getNumberOfLinesOfCode(\"\
    /home/user/week1.d\")\n    49L\n    >>> getNumberOfLinesOfCode(\"/home/user/week2.d\"\
    )\n    83L\n    >>> getNumberOfLinesOfCode(\"/home/user/week3.d\")\n    12L\n\
    */\nlong getNumberOfLinesOfCode(string path) \n{\n    import std.stdio : writeln;\n\
    \    import std.file : readText;\n    import std.algorithm : map;\n    import\
    \ std.range : filter;\n    auto lines = readText(path).lines;\n    lines = lines.filter!(x\
    \ => x.length > 0).map!(x => x.trim()).filter!(x => x.length > 0);\n    return\
    \ lines.length;\n}\n/*\n    Write a function that takes an array of numbers and\
    \ returns the sum of the numbers \n    that are divisible by 3 and their first\
    \ digit is 3.\n    For\nunittest\n{\n    alias candidate = specialFilter;\n\n\
    \    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptre8p83i.d(68): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptre8p83i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long n = 0;\n    foreach(x;\
    \ nums) \n    {\n        if(x > 10) \n        {\n            auto f = to!string(x)[0];\n\
    \            auto l = to!string(x)[$-1];\n            if(to!int(f) % 2 == 1 &&\
    \ to!int(l) % 2 == 1) \n            {\n                n++;\n            }\n \
    \       }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd3zhrs3q.d(21): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpd3zhrs3q.d(22): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpd3zhrs3q.d(23):\
    \ Error: template instance `to!int` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmpd3zhrs3q.d(23): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpd3zhrs3q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    /*auto oddsOnly =\
    \ nums.filter!(a => a % 2 == 1);\n    return oddsOnly.filter!(a => a > 10).length;\n\
    \    */\n    long count = 0;\n    foreach(num; nums)\n    {\n        int firstDigit\
    \ = num / 10;\n        int lastDigit = num % 10;\n        if (num > 10 && firstDigit\
    \ % 2 == 1 && lastDigit % 2 == 1)\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe30l7eql.d(22): Error: cannot implicitly convert expression `num\
    \ / 10L` of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpe30l7eql.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if (num > 10 && num.popFront() % 2 !=\
    \ 0 && num.popBack() % 2 != 0)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\n// int main()\n// {\n//     long[] myList = [5L,\
    \ 6L, 7L, 8L, 9L, 9L, 10L, 11L, 1L, 3L, 5L, 7L, 9L, 9L, 10L, 12L, 13L, 14L, 15L,\
    \ 16L, 19L, 20L, 31L, -1L, -2L, -2L, -3L, -3L, -3L, -3L, -3L, -3L, -6L, -6L, -6L,\
    \ -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L,\
    \ -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L,\
    \ -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L,\
    \ -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L,\
    \ -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L,\nunittest\n\
    {\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L,\
    \ -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L,\
    \ -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L,\
    \ 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L])\
    \ == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkmrpyeby.d(19): Error: no property `popFront` for type `long`\\\
    n/tmp/tmpkmrpyeby.d(19): Error: no property `popBack` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkmrpyeby.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns \n    the number of elements in the\
    \ array that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L,\
    \ 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n\
    \    foreach(num; nums) \n    {\n        if (num > 10) \n        {\n         \
    \   long temp = num;\n            long numD = typeof(num).sizeof;\n          \
    \  while (temp > 0)\n            {\n                temp /= 10;\n            \
    \    numD *= 10;\n            }\n            if ((num % 10 == 1 || num % 10 ==\
    \ 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9) \n                && ((num\
    \ / numD) == 1 || (num / numD) == 3 || (num / numD) == 5 || (num / numD) == 7\
    \ || (num / numD) == 9))\n            {\n                count++;\n          \
    \  }\n        }\n    }\n    return count;\n}\n/*\nWrite a function that takes\
    \ an array of numbers as input and returns the \n    sum of the numbers whose\
    \ last digit is even.\n    For example:\n    >>> sumEvenLastDigit([15L, -73L,\
    \ 14L, -15L])\n    -73L\n    >>> sumEvenLastDigit([33L, -2L, -3L, 45L, 21L, 109L])\n\
    \    64L\n    >>> sumEvenLastDigit([17L, -11L, 27L, -15L, -7L, -13L, 17L, 35L,\
    \ -8L, -13L, -13L, 7L, 5L, -7L, -17L, 11L, 29L, -2L, -17L, -4L, -19L, 29L, -3L,\
    \ -2L, 13L, -18L, -13L, 17L, 11L, 9L, -17L, -3L, -2L, -13L, -16L, -13L, 17L, -16L,\
    \ 5L, -7L, 21L, -6L, 29L, -12L, -4L, -4L, 15L, -2L, -19L, -5L, -17L, -8L, -9L,\
    \ -19L, -5L, 17L, 15L, 23L, -11L, -\nunittest\n{\n    alias candidate = specialFilter;\n\
    \n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L,\
    \ -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L])\
    \ == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n\
    \    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L])\
    \ == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6k604c1s.d(37): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6k604c1s.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
