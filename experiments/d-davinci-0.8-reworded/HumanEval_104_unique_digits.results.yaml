name: HumanEval_104_unique_digits
language: d
results:
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    return x.filter!((y) => \n                     y.toString().chars.filter!((z)\
    \ =>\n                                                z.toString().toInt() % 2\
    \ == 0)\n                                                .empty).sort();\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsm63u_7n.d(17): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsm63u_7n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] temp_arr=new long[x.length];\n    int count=0;\n    for(int i=0;i<x.length;i++)\n\
    \    {\n        bool is_no_even=true;\n        while(x[i]>0)\n        {\n    \
    \        long digit=x[i]%10;\n            if(digit%2==0)\n            {\n    \
    \            is_no_even=false;\n                break;\n            }\n      \
    \      x[i]/=10;\n        }\n        if(is_no_even)\n        {\n            temp_arr[count]=x[i];\n\
    \            count++;\n        }\n    }\n    long[] ret=new long[count];\n   \
    \ for(int i=0;i<count;i++)\n    {\n        ret[i]=temp_arr[i];\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7ftpwnzn.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428585]\\n??:? void tmp7ftpwnzn.__unittest_L45_C1()\
    \ [0x4280a2]\\n??:? void tmp7ftpwnzn.__modtest() [0x428308]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c63f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b4d2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43075d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c0c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306e9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b4a9]\\n??:? runModuleUnitTests [0x42c415]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a48]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289cf]\\n??:? _d_run_main [0x42893a]\\n??:? main [0x42831b]\\\
    n??:? __libc_start_main [0xc76bb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n\t\
    auto res = [];\n\tforeach(n; x)\n\t{\n\t\tstring nstring = format(\"%s\", n);\n\
    \t\tbool haseven = false;\n\t\tforeach(ch; nstring)\n\t\t{\n\t\t\tif(ch.isDigit)\n\
    \t\t\t{\n\t\t\t\tif(!(ch == '0' || ch == '2' || ch == '4' || ch == '6' || ch ==\
    \ '8'))\n\t\t\t\t{\n\t\t\t\t\thaseven = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t\tif(haseven)\n\t\t{\n\t\t\tres ~= n;\n\t\t}\n\t}\n\treturn sort(res);\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6io0jau1.d(20): Error: undefined identifier `format`\\n/tmp/tmp6io0jau1.d(24):\
    \ Error: no property `isDigit` for type `immutable(char)`\\n/tmp/tmp6io0jau1.d(35):\
    \ Error: cannot append type `long` to type `void[]`\\n/tmp/tmp6io0jau1.d(38):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6io0jau1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n\t\
    auto even_digits = map!(a => cast(char)a)([2,4,6,8,0]);\n\tauto y = [];\n\tforeach(i;\
    \ x)\n\t{\n\t\tauto digits = to!string(i);\n\t\tbool has_even = false;\n\t\tforeach(digit;\
    \ digits)\n\t\t{\n\t\t\tif(even_digits.canFind(digit))\n\t\t\t{\n\t\t\t\thas_even\
    \ = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!has_even)\n\t\t\ty ~= i;\n\t\
    }\n\treturn sort(y);\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfwha5q2q.d(17): Error: template instance `map!((a) => cast(char)a)`\
    \ template `map` is not defined\\n/tmp/tmpfwha5q2q.d(21): Error: template instance\
    \ `to!string` template `to` is not defined\\n/tmp/tmpfwha5q2q.d(32): Error: cannot\
    \ append type `long` to type `void[]`\\n/tmp/tmpfwha5q2q.d(34): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpfwha5q2q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int count = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        int\
    \ temp = x[i];\n        if (temp < 0)\n        {\n            temp = abs(temp);\n\
    \        }\n        while (temp > 0)\n        {\n            int rem = temp %\
    \ 10;\n            if (rem % 2 == 0)\n            {\n                x[i] = -1;\n\
    \                break;\n            }\n            temp /= 10;\n        }\n \
    \   }\n    for (int i = 0; i < x.length; i++)\n    {\n        if (x[i] != -1)\n\
    \        {\n            count++;\n        }\n    }\n    long[] ans = new long[count];\n\
    \    int j = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        if (x[i]\
    \ != -1)\n        {\n            ans[j] = x[i];\n            j++;\n        }\n\
    \    }\n    return ans;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzzahyy4f.d(20): Error: cannot implicitly convert expression `x[cast(ulong)i]`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpzzahyy4f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[x.length];\n    int count = 0;\n    foreach(e; x)\n\
    \    {\n        //\n        bool flag = true;\n        int n = e;\n        while(n\
    \ > 0)\n        {\n            int r = n % 10;\n            if(r % 2 == 0)\n \
    \           {\n                flag = false;\n                break;\n       \
    \     }\n            n /= 10;\n        }\n        if(flag)\n        {\n      \
    \      res[count] = e;\n            count++;\n        }\n    }\n    return res[0..count];\n\
    }\n \n/* Test\nUncomment to test.\n*/\n \nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppjuwwrck.d(23): Error: cannot implicitly convert expression `e`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmppjuwwrck.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int temp;\n    int e=0;\n    for(int i=0;i<x.length;i++)\n    {\n        temp=x[i];\n\
    \        for(int j=0;j<digitCount(temp);j++)\n        {\n            if(temp%10%2==0)\n\
    \            {\n                e=1;\n                break;\n            }\n\
    \            temp=temp/10;\n        }\n        if(e==0)\n        {\n         \
    \   x[i]=x[i];\n        }\n        else\n        {\n            x[i]=0;\n    \
    \    }\n        e=0;\n    }\n    sort(x);\n    return x;\n}\n/*\n    Given a list\
    \ of unique words, return a 2D array of letters and \n    the count of words that\
    \ have that letter.\n    \n    For example:\n    >>> letter_count([\"apple\",\
    \ \"banana\", \"cabbage\"])\n    [\n        ['a', 2],\n        ['b', 2],\n   \
    \     ['c', 1]\n    ]\n*/\nchar[][] letter_count(string[] words) \n{\n    char[]\
    \ s = to!char[](words);\n    sort(s);\n    int count=0;\n    char temp;\n    char[][]\
    \ m;\n    m = new char[][](s.length);\n    m[0] = new char[2];\n    m[0][0]=s[0];\n\
    \    m[0][1]=1;\n    int j=1;\n    for(int i=1;i<s.length;i++)\n    {\n      \
    \  if(s[i]==m[j-1][0])\n        {\n            m[j-1][1]++;\n        }\n     \
    \   else\n        {\n            m[j] = new char[2];\n            m[j][0]=s[i];\n\
    \            m[j][1]=1;\n            j++;\n        }\n    }\n    m = m[0..j];\n\
    \    return m;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy0fue3r3.d(21): Error: cannot implicitly convert expression `x[cast(ulong)i]`\
    \ of type `long` to `int`\\n/tmp/tmpy0fue3r3.d(22): Error: undefined identifier\
    \ `digitCount`\\n/tmp/tmpy0fue3r3.d(41): Error: undefined identifier `sort`, did\
    \ you mean function `sqrt`?\\n/tmp/tmpy0fue3r3.d(58): Error: template instance\
    \ `to!char` template `to` is not defined\\n/tmp/tmpy0fue3r3.d(59): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpy0fue3r3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   if(x.length == 0)\n        return x;\n    int ind_even = -1;\n    int len\
    \ = 0;\n    while(ind_even < x.length)\n    {\n        ind_even++;\n        int\
    \ temp = x[ind_even];\n        while(temp != 0)\n        {\n            int digit\
    \ = temp % 10;\n            if(digit % 2 == 0)\n                break;\n     \
    \       temp /= 10;\n        }\n        if(temp == 0)\n            len++;\n  \
    \  }\n    long[] y = new long[len];\n    int i = 0;\n    ind_even = -1;\n    while(ind_even\
    \ < x.length)\n    {\n        ind_even++;\n        int temp = x[ind_even];\n \
    \       while(temp != 0)\n        {\n            int digit = temp % 10;\n    \
    \        if(digit % 2 == 0)\n                break;\n            temp /= 10;\n\
    \        }\n        if(temp == 0)\n        {\n            y[i] = x[ind_even];\n\
    \            i++;\n        }\n    }\n    sort(y);\n    return y;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph1tvapho.d(24): Error: cannot implicitly convert expression `x[cast(ulong)ind_even]`\
    \ of type `long` to `int`\\n/tmp/tmph1tvapho.d(41): Error: cannot implicitly convert\
    \ expression `x[cast(ulong)ind_even]` of type `long` to `int`\\n/tmp/tmph1tvapho.d(55):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1tvapho.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk_8n500q.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpk_8n500q.d(25): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk_8n500q.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    auto evens = [1, 3, 5, 7, 9];\n    auto res = [];\n    foreach(n; x)\n  \
    \  {\n        foreach(d; to!string(n))\n        {\n            // Stop at first\
    \ even digit\n            if(evens.canFind(to!int(d))) break;\n        }\n   \
    \     if(evens.canFind(to!int(d))) continue;\n        res ~= n;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk5bf6m1v.d(21): Error: template instance `to!string` template\
    \ `to` is not defined\\n/tmp/tmpk5bf6m1v.d(26): Error: no property `canFind` for\
    \ type `int[]`\\n/tmp/tmpk5bf6m1v.d(27): Error: cannot append type `long` to type\
    \ `void[]`\\n/tmp/tmpk5bf6m1v.d(29): Error: cannot implicitly convert expression\
    \ `res` of type `void[]` to `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpk5bf6m1v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   // Write your solution here\n    vector<long> odd;\n    for(long a : x)\n\
    \    {\n        int dig = 0;\n        int orig = a;\n        while(a > 0)\n  \
    \      {\n            dig = a % 10;\n            if(dig % 2 == 0)\n          \
    \      break;\n            a /= 10;\n        }\n        if(a == 0)\n         \
    \   odd ~= orig;\n    }\n    sort(odd);\n    return odd.data;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_gpk75ou.d(18): Error: found `>` when expecting `.` following\
    \ long\\n/tmp/tmp_gpk75ou.d(19): Error: semicolon expected, not `:`\\n/tmp/tmp_gpk75ou.d(19):\
    \ Error: expression expected, not `:`\\n/tmp/tmp_gpk75ou.d(19): Error: found `x`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_gpk75ou.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    int num;\n    int length = 0;\n    for (int i = 0; i <\
    \ x.length; i++)\n    {\n        num = cast(int)x[i];\n        while (num > 0)\n\
    \        {\n            if ((num % 10) % 2 == 0)\n            {\n            \
    \    break;\n            }\n            num /= 10;\n            if (num == 0)\n\
    \            {\n                length++;\n            }\n        }\n    }\n \
    \   result = new long[length];\n    int j = 0;\n    for (int i = 0; i < x.length;\
    \ i++)\n    {\n        num = cast(int)x[i];\n        while (num > 0)\n       \
    \ {\n            if ((num % 10) % 2 == 0)\n            {\n                break;\n\
    \            }\n            num /= 10;\n            if (num == 0)\n          \
    \  {\n                result[j] = x[i];\n                j++;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7kypxxcd.d(61): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42851d]\\n??:? void tmp7kypxxcd.__unittest_L57_C1()\
    \ [0x42803a]\\n??:? void tmp7kypxxcd.__modtest() [0x4282a0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5d7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b46a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306f5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430681]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b441]\\n??:? runModuleUnitTests [0x42c3ad]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289e0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428967]\\n??:? _d_run_main [0x4288d2]\\n??:? main [0x4282b3]\\\
    n??:? __libc_start_main [0xc268d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   /*\n    if (x is not an array)\n        return []\n    for each in x\n   \
    \     if (each%2 == 0)\n            x.remove(each)\n            */\n    \n   \
    \ long[] y = [];\n    for (long a in x)\n    {\n        if (a%2 != 0)\n      \
    \      y ~= a;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpezycm5sw.d(26): Error: semicolon expected, not `in`\\n/tmp/tmpezycm5sw.d(26):\
    \ Error: expression expected, not `in`\\n/tmp/tmpezycm5sw.d(26): Error: found\
    \ `x` when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpezycm5sw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   List<long> list = new List<long>();\n    foreach(long i in x)\n    {\n   \
    \     if(i.ToString().IndexOf('2') == -1 &&\n           i.ToString().IndexOf('4')\
    \ == -1 &&\n           i.ToString().IndexOf('6') == -1 &&\n           i.ToString().IndexOf('8')\
    \ == -1 &&\n           i.ToString().IndexOf('0') == -1)\n            list.Add(i);\n\
    \    }\n    list.Sort();\n    return list.ToArray();\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwg2b3dsg.d(17): Error: found `>` when expecting `.` following\
    \ long\\n/tmp/tmpwg2b3dsg.d(17): Error: found `>` when expecting `.` following\
    \ long\\n/tmp/tmpwg2b3dsg.d(17): Error: found `(` when expecting identifier following\
    \ `long`.\\n/tmp/tmpwg2b3dsg.d(17): Error: found `)` when expecting `;` following\
    \ statement\\n/tmp/tmpwg2b3dsg.d(17): Deprecation: use `{ }` for an empty statement,\
    \ not `;`\\n/tmp/tmpwg2b3dsg.d(18): Error: found `in` when expecting `;`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwg2b3dsg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.filter!(a => a % 2 != 0 && a.toString().chars.every!(b => b % 2 !=\
    \ 0)).sort();\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpve19xc0m.d(17): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpve19xc0m.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   // Note: Correct answer is to convert input to String and loop through String.\n\
    \    // I did the math instead :)\n    long[] newArray = new long[0];\n    foreach(long\
    \ d; x) {\n        long val = d;\n        bool unique = true;\n        while(val\
    \ > 0) {\n            if (modulo(val, 10) % 2 == 0) {\n                unique\
    \ = false;\n                break;\n            }\n            val = val / 10;\n\
    \        }\n        if (unique) {\n            newArray ~= d;\n        }\n   \
    \ }\n    return newArray;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw8_gz3fc.d(24): Error: undefined identifier `modulo`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw8_gz3fc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(e; x)\n    {\n        if(cast(int)e == e)\n\
    \        {\n            result ~= e;\n        }\n        else\n        {\n   \
    \         bool even = false;\n            long num = e;\n            while(num\
    \ > 0)\n            {\n                if(num % 2 == 0)\n                {\n \
    \                   even = true;\n                    break;\n               \
    \ }\n                num /= 10;\n            }\n            if(!even)\n      \
    \      {\n                result ~= e;\n            }\n        }\n    }\n    return\
    \ sort(result);\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph9rtzoxt.d(43): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph9rtzoxt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long even = 0;\n    long[] answer = [];\n    foreach(num; x)\n    {\n    \
    \    // %2 is even.\n        if(num % 2 == 0) \n        {\n            even++;\n\
    \        }\n        else \n        {\n            answer ~= num;\n        }\n\
    \    }\n    if(even == 0) \n    {\n        return x;\n    }\n    return answer;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3gydvp82.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmp3gydvp82.__unittest_L37_C1()\
    \ [0x427f82]\\n??:? void tmp3gydvp82.__modtest() [0x4281e8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce3b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430721]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bca5]\\n??:? runModuleUnitTests [0x42cc11]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4288b4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42883b]\\n??:? _d_run_main [0x4287a6]\\n??:? main [0x4281fb]\\\
    n??:? __libc_start_main [0xce2be554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[dchar] pos = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57];\n    int count\
    \ = 0;\n    foreach(long l; x)\n    {\n        foreach(dchar c; l.to!string)\n\
    \        {\n            if(pos.find(c) != -1)\n                count++;\n    \
    \    }\n    }\n    long[] arr = new long[count];\n    int index = 0;\n    foreach(long\
    \ l; x)\n    {\n        foreach(dchar c; l.to!string)\n        {\n           \
    \ if(pos.find(c) != -1)\n            {\n                arr[index] = l;\n    \
    \            index++;\n            }\n        }\n    }\n    return arr;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoknpbh5l.d(17): Error: not an associative array initializer\\\
    n/tmp/tmpoknpbh5l.d(21): Error: no property `to` for type `long`\\n/tmp/tmpoknpbh5l.d(31):\
    \ Error: no property `to` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpoknpbh5l.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int counter = 0;\n    long[] sortedArr = new long[x.length];\n    for (int\
    \ i = 0; i < x.length; i++)\n    {\n        if (x[i]%2 != 0)\n        {\n    \
    \        sortedArr[counter] = x[i];\n            counter++;\n        }\n    }\n\
    \    long[] y = new long[counter];\n    for (int i = 0; i < counter; i++)\n  \
    \  {\n        y[i] = sortedArr[i];\n    }\n    return y;\n}\nunittest\n{\n   \
    \ alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L])\
    \ == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n\
    \    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp3o30kz1.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpp3o30kz1.__unittest_L34_C1()\
    \ [0x42801a]\\n??:? void tmpp3o30kz1.__modtest() [0x428280]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x428293]\\\
    n??:? __libc_start_main [0xf1185554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
