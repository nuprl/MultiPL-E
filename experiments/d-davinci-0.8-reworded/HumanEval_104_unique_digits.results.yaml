language: d
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    return x.filter!((y) => \n                     y.toString().chars.filter!((z)\
    \ =>\n                                                z.toString().toInt() % 2\
    \ == 0)\n                                                .empty).sort();\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsm63u_7n.d(17): Error: no property `filter` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsm63u_7n.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] temp_arr=new long[x.length];\n    int count=0;\n    for(int i=0;i<x.length;i++)\n\
    \    {\n        bool is_no_even=true;\n        while(x[i]>0)\n        {\n    \
    \        long digit=x[i]%10;\n            if(digit%2==0)\n            {\n    \
    \            is_no_even=false;\n                break;\n            }\n      \
    \      x[i]/=10;\n        }\n        if(is_no_even)\n        {\n            temp_arr[count]=x[i];\n\
    \            count++;\n        }\n    }\n    long[] ret=new long[count];\n   \
    \ for(int i=0;i<count;i++)\n    {\n        ret[i]=temp_arr[i];\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7ftpwnzn.d(49): unittest failure\n----------------\n??:?
    _d_unittestp [0x428585]\n??:? void tmp7ftpwnzn.__unittest_L45_C1() [0x4280a2]\n??:?
    void tmp7ftpwnzn.__modtest() [0x428308]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c63f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b4d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43075d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c0c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4306e9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b4a9]\n??:? runModuleUnitTests [0x42c415]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4289cf]\n??:? _d_run_main [0x42893a]\n??:? main [0x42831b]\n??:?
    __libc_start_main [0xc76bb554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n\t\
    auto res = [];\n\tforeach(n; x)\n\t{\n\t\tstring nstring = format(\"%s\", n);\n\
    \t\tbool haseven = false;\n\t\tforeach(ch; nstring)\n\t\t{\n\t\t\tif(ch.isDigit)\n\
    \t\t\t{\n\t\t\t\tif(!(ch == '0' || ch == '2' || ch == '4' || ch == '6' || ch ==\
    \ '8'))\n\t\t\t\t{\n\t\t\t\t\thaseven = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t\tif(haseven)\n\t\t{\n\t\t\tres ~= n;\n\t\t}\n\t}\n\treturn sort(res);\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6io0jau1.d(20): Error: undefined identifier `format`\n/tmp/tmp6io0jau1.d(24):
    Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmp6io0jau1.d(35):
    Error: cannot append type `long` to type `void[]`\n/tmp/tmp6io0jau1.d(38): Error:
    undefined identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp6io0jau1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n\t\
    auto even_digits = map!(a => cast(char)a)([2,4,6,8,0]);\n\tauto y = [];\n\tforeach(i;\
    \ x)\n\t{\n\t\tauto digits = to!string(i);\n\t\tbool has_even = false;\n\t\tforeach(digit;\
    \ digits)\n\t\t{\n\t\t\tif(even_digits.canFind(digit))\n\t\t\t{\n\t\t\t\thas_even\
    \ = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!has_even)\n\t\t\ty ~= i;\n\t\
    }\n\treturn sort(y);\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfwha5q2q.d(17): Error: template instance `map!((a) => cast(char)a)`
    template `map` is not defined\n/tmp/tmpfwha5q2q.d(21): Error: template instance
    `to!string` template `to` is not defined\n/tmp/tmpfwha5q2q.d(32): Error: cannot
    append type `long` to type `void[]`\n/tmp/tmpfwha5q2q.d(34): Error: undefined
    identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpfwha5q2q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int count = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        int\
    \ temp = x[i];\n        if (temp < 0)\n        {\n            temp = abs(temp);\n\
    \        }\n        while (temp > 0)\n        {\n            int rem = temp %\
    \ 10;\n            if (rem % 2 == 0)\n            {\n                x[i] = -1;\n\
    \                break;\n            }\n            temp /= 10;\n        }\n \
    \   }\n    for (int i = 0; i < x.length; i++)\n    {\n        if (x[i] != -1)\n\
    \        {\n            count++;\n        }\n    }\n    long[] ans = new long[count];\n\
    \    int j = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        if (x[i]\
    \ != -1)\n        {\n            ans[j] = x[i];\n            j++;\n        }\n\
    \    }\n    return ans;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzzahyy4f.d(20): Error: cannot implicitly convert expression
    `x[cast(ulong)i]` of type `long` to `int`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzzahyy4f.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[x.length];\n    int count = 0;\n    foreach(e; x)\n\
    \    {\n        //\n        bool flag = true;\n        int n = e;\n        while(n\
    \ > 0)\n        {\n            int r = n % 10;\n            if(r % 2 == 0)\n \
    \           {\n                flag = false;\n                break;\n       \
    \     }\n            n /= 10;\n        }\n        if(flag)\n        {\n      \
    \      res[count] = e;\n            count++;\n        }\n    }\n    return res[0..count];\n\
    }\n \n/* Test\nUncomment to test.\n*/\n \nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppjuwwrck.d(23): Error: cannot implicitly convert expression
    `e` of type `long` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppjuwwrck.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int temp;\n    int e=0;\n    for(int i=0;i<x.length;i++)\n    {\n        temp=x[i];\n\
    \        for(int j=0;j<digitCount(temp);j++)\n        {\n            if(temp%10%2==0)\n\
    \            {\n                e=1;\n                break;\n            }\n\
    \            temp=temp/10;\n        }\n        if(e==0)\n        {\n         \
    \   x[i]=x[i];\n        }\n        else\n        {\n            x[i]=0;\n    \
    \    }\n        e=0;\n    }\n    sort(x);\n    return x;\n}\n/*\n    Given a list\
    \ of unique words, return a 2D array of letters and \n    the count of words that\
    \ have that letter.\n    \n    For example:\n    >>> letter_count([\"apple\",\
    \ \"banana\", \"cabbage\"])\n    [\n        ['a', 2],\n        ['b', 2],\n   \
    \     ['c', 1]\n    ]\n*/\nchar[][] letter_count(string[] words) \n{\n    char[]\
    \ s = to!char[](words);\n    sort(s);\n    int count=0;\n    char temp;\n    char[][]\
    \ m;\n    m = new char[][](s.length);\n    m[0] = new char[2];\n    m[0][0]=s[0];\n\
    \    m[0][1]=1;\n    int j=1;\n    for(int i=1;i<s.length;i++)\n    {\n      \
    \  if(s[i]==m[j-1][0])\n        {\n            m[j-1][1]++;\n        }\n     \
    \   else\n        {\n            m[j] = new char[2];\n            m[j][0]=s[i];\n\
    \            m[j][1]=1;\n            j++;\n        }\n    }\n    m = m[0..j];\n\
    \    return m;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy0fue3r3.d(21): Error: cannot implicitly convert expression
    `x[cast(ulong)i]` of type `long` to `int`\n/tmp/tmpy0fue3r3.d(22): Error: undefined
    identifier `digitCount`\n/tmp/tmpy0fue3r3.d(41): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\n/tmp/tmpy0fue3r3.d(58): Error: template instance
    `to!char` template `to` is not defined\n/tmp/tmpy0fue3r3.d(59): Error: undefined
    identifier `sort`, did you mean function `sqrt`?\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpy0fue3r3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   if(x.length == 0)\n        return x;\n    int ind_even = -1;\n    int len\
    \ = 0;\n    while(ind_even < x.length)\n    {\n        ind_even++;\n        int\
    \ temp = x[ind_even];\n        while(temp != 0)\n        {\n            int digit\
    \ = temp % 10;\n            if(digit % 2 == 0)\n                break;\n     \
    \       temp /= 10;\n        }\n        if(temp == 0)\n            len++;\n  \
    \  }\n    long[] y = new long[len];\n    int i = 0;\n    ind_even = -1;\n    while(ind_even\
    \ < x.length)\n    {\n        ind_even++;\n        int temp = x[ind_even];\n \
    \       while(temp != 0)\n        {\n            int digit = temp % 10;\n    \
    \        if(digit % 2 == 0)\n                break;\n            temp /= 10;\n\
    \        }\n        if(temp == 0)\n        {\n            y[i] = x[ind_even];\n\
    \            i++;\n        }\n    }\n    sort(y);\n    return y;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph1tvapho.d(24): Error: cannot implicitly convert expression
    `x[cast(ulong)ind_even]` of type `long` to `int`\n/tmp/tmph1tvapho.d(41): Error:
    cannot implicitly convert expression `x[cast(ulong)ind_even]` of type `long` to
    `int`\n/tmp/tmph1tvapho.d(55): Error: undefined identifier `sort`, did you mean
    function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph1tvapho.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_8n500q.d(20): Error: undefined identifier `hasEvenDigit`\n/tmp/tmpk_8n500q.d(25):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpk_8n500q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    auto evens = [1, 3, 5, 7, 9];\n    auto res = [];\n    foreach(n; x)\n  \
    \  {\n        foreach(d; to!string(n))\n        {\n            // Stop at first\
    \ even digit\n            if(evens.canFind(to!int(d))) break;\n        }\n   \
    \     if(evens.canFind(to!int(d))) continue;\n        res ~= n;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk5bf6m1v.d(21): Error: template instance `to!string` template
    `to` is not defined\n/tmp/tmpk5bf6m1v.d(26): Error: no property `canFind` for
    type `int[]`\n/tmp/tmpk5bf6m1v.d(27): Error: cannot append type `long` to type
    `void[]`\n/tmp/tmpk5bf6m1v.d(29): Error: cannot implicitly convert expression
    `res` of type `void[]` to `long[]`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpk5bf6m1v.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   // Write your solution here\n    vector<long> odd;\n    for(long a : x)\n\
    \    {\n        int dig = 0;\n        int orig = a;\n        while(a > 0)\n  \
    \      {\n            dig = a % 10;\n            if(dig % 2 == 0)\n          \
    \      break;\n            a /= 10;\n        }\n        if(a == 0)\n         \
    \   odd ~= orig;\n    }\n    sort(odd);\n    return odd.data;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_gpk75ou.d(18): Error: found `>` when expecting `.` following
    long\n/tmp/tmp_gpk75ou.d(19): Error: semicolon expected, not `:`\n/tmp/tmp_gpk75ou.d(19):
    Error: expression expected, not `:`\n/tmp/tmp_gpk75ou.d(19): Error: found `x`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_gpk75ou.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    int num;\n    int length = 0;\n    for (int i = 0; i <\
    \ x.length; i++)\n    {\n        num = cast(int)x[i];\n        while (num > 0)\n\
    \        {\n            if ((num % 10) % 2 == 0)\n            {\n            \
    \    break;\n            }\n            num /= 10;\n            if (num == 0)\n\
    \            {\n                length++;\n            }\n        }\n    }\n \
    \   result = new long[length];\n    int j = 0;\n    for (int i = 0; i < x.length;\
    \ i++)\n    {\n        num = cast(int)x[i];\n        while (num > 0)\n       \
    \ {\n            if ((num % 10) % 2 == 0)\n            {\n                break;\n\
    \            }\n            num /= 10;\n            if (num == 0)\n          \
    \  {\n                result[j] = x[i];\n                j++;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7kypxxcd.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x42851d]\n??:? void tmp7kypxxcd.__unittest_L57_C1() [0x42803a]\n??:?
    void tmp7kypxxcd.__modtest() [0x4282a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b46a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430681]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b441]\n??:? runModuleUnitTests [0x42c3ad]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289e0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428967]\n??:? _d_run_main [0x4288d2]\n??:? main [0x4282b3]\n??:?
    __libc_start_main [0xc268d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   /*\n    if (x is not an array)\n        return []\n    for each in x\n   \
    \     if (each%2 == 0)\n            x.remove(each)\n            */\n    \n   \
    \ long[] y = [];\n    for (long a in x)\n    {\n        if (a%2 != 0)\n      \
    \      y ~= a;\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpezycm5sw.d(26): Error: semicolon expected, not `in`\n/tmp/tmpezycm5sw.d(26):
    Error: expression expected, not `in`\n/tmp/tmpezycm5sw.d(26): Error: found `x`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpezycm5sw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   List<long> list = new List<long>();\n    foreach(long i in x)\n    {\n   \
    \     if(i.ToString().IndexOf('2') == -1 &&\n           i.ToString().IndexOf('4')\
    \ == -1 &&\n           i.ToString().IndexOf('6') == -1 &&\n           i.ToString().IndexOf('8')\
    \ == -1 &&\n           i.ToString().IndexOf('0') == -1)\n            list.Add(i);\n\
    \    }\n    list.Sort();\n    return list.ToArray();\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwg2b3dsg.d(17): Error: found `>` when expecting `.` following
    long\n/tmp/tmpwg2b3dsg.d(17): Error: found `>` when expecting `.` following long\n/tmp/tmpwg2b3dsg.d(17):
    Error: found `(` when expecting identifier following `long`.\n/tmp/tmpwg2b3dsg.d(17):
    Error: found `)` when expecting `;` following statement\n/tmp/tmpwg2b3dsg.d(17):
    Deprecation: use `{ }` for an empty statement, not `;`\n/tmp/tmpwg2b3dsg.d(18):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpwg2b3dsg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.filter!(a => a % 2 != 0 && a.toString().chars.every!(b => b % 2 !=\
    \ 0)).sort();\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpve19xc0m.d(17): Error: no property `filter` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpve19xc0m.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   // Note: Correct answer is to convert input to String and loop through String.\n\
    \    // I did the math instead :)\n    long[] newArray = new long[0];\n    foreach(long\
    \ d; x) {\n        long val = d;\n        bool unique = true;\n        while(val\
    \ > 0) {\n            if (modulo(val, 10) % 2 == 0) {\n                unique\
    \ = false;\n                break;\n            }\n            val = val / 10;\n\
    \        }\n        if (unique) {\n            newArray ~= d;\n        }\n   \
    \ }\n    return newArray;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw8_gz3fc.d(24): Error: undefined identifier `modulo`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw8_gz3fc.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(e; x)\n    {\n        if(cast(int)e == e)\n\
    \        {\n            result ~= e;\n        }\n        else\n        {\n   \
    \         bool even = false;\n            long num = e;\n            while(num\
    \ > 0)\n            {\n                if(num % 2 == 0)\n                {\n \
    \                   even = true;\n                    break;\n               \
    \ }\n                num /= 10;\n            }\n            if(!even)\n      \
    \      {\n                result ~= e;\n            }\n        }\n    }\n    return\
    \ sort(result);\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph9rtzoxt.d(43): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9rtzoxt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long even = 0;\n    long[] answer = [];\n    foreach(num; x)\n    {\n    \
    \    // %2 is even.\n        if(num % 2 == 0) \n        {\n            even++;\n\
    \        }\n        else \n        {\n            answer ~= num;\n        }\n\
    \    }\n    if(even == 0) \n    {\n        return x;\n    }\n    return answer;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp3gydvp82.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x428465]\n??:? void tmp3gydvp82.__unittest_L37_C1() [0x427f82]\n??:?
    void tmp3gydvp82.__modtest() [0x4281e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bcce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430721]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42bca5]\n??:? runModuleUnitTests [0x42cc11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288b4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42883b]\n??:? _d_run_main [0x4287a6]\n??:? main [0x4281fb]\n??:?
    __libc_start_main [0xce2be554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[dchar] pos = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57];\n    int count\
    \ = 0;\n    foreach(long l; x)\n    {\n        foreach(dchar c; l.to!string)\n\
    \        {\n            if(pos.find(c) != -1)\n                count++;\n    \
    \    }\n    }\n    long[] arr = new long[count];\n    int index = 0;\n    foreach(long\
    \ l; x)\n    {\n        foreach(dchar c; l.to!string)\n        {\n           \
    \ if(pos.find(c) != -1)\n            {\n                arr[index] = l;\n    \
    \            index++;\n            }\n        }\n    }\n    return arr;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoknpbh5l.d(17): Error: not an associative array initializer\n/tmp/tmpoknpbh5l.d(21):
    Error: no property `to` for type `long`\n/tmp/tmpoknpbh5l.d(31): Error: no property
    `to` for type `long`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoknpbh5l.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int counter = 0;\n    long[] sortedArr = new long[x.length];\n    for (int\
    \ i = 0; i < x.length; i++)\n    {\n        if (x[i]%2 != 0)\n        {\n    \
    \        sortedArr[counter] = x[i];\n            counter++;\n        }\n    }\n\
    \    long[] y = new long[counter];\n    for (int i = 0; i < counter; i++)\n  \
    \  {\n        y[i] = sortedArr[i];\n    }\n    return y;\n}\nunittest\n{\n   \
    \ alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L])\
    \ == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n\
    \    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpp3o30kz1.d(38): unittest failure\n----------------\n??:?
    _d_unittestp [0x4284fd]\n??:? void tmpp3o30kz1.__unittest_L34_C1() [0x42801a]\n??:?
    void tmpp3o30kz1.__modtest() [0x428280]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b44a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430661]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b421]\n??:? runModuleUnitTests [0x42c38d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289c0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428947]\n??:? _d_run_main [0x4288b2]\n??:? main [0x428293]\n??:?
    __libc_start_main [0xf1185554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    bool even_digit = false;\n    long num;\n    long[]\
    \ result = new long[n];\n    int j = 0;\n    for (int i = 0; i < n; i++)\n   \
    \ {\n        num = x[i];\n        even_digit = false;\n        while (num > 0)\n\
    \        {\n            if (num % 2 == 0)\n            {\n                even_digit\
    \ = true;\n                break;\n            }\n            num /= 10;\n   \
    \     }\n        if (!even_digit)\n        {\n            result[j] = x[i];\n\
    \            j++;\n        }\n    }\n    return sort(result[0..j]);\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw5bu4g4m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long i,j,num=0;\n    long[][] arr=new long[20][2];\n    for(i=0;i<x.length;i++)\n\
    \    {\n        num=x[i];\n        while(num!=0)\n        {\n            j=num%10;\n\
    \            num=num/10;\n            if(j%2==0)\n            {\n            \
    \    arr[i][0]=1;\n                break;\n            }\n        }\n        arr[i][1]=x[i];\n\
    \    }\n    long[] result=new long[20];\n    j=0;\n    for(i=0;i<x.length;i++)\n\
    \    {\n        if(arr[i][0]==0)\n        {\n            result[j]=arr[i][1];\n\
    \            j++;\n        }\n    }\n    for(i=0;i<x.length;i++)\n    {\n    \
    \    if(result[i]==0)\n        {\n            j=i;\n            break;\n     \
    \   }\n    }\n    long[] finalResult=new long[j];\n    for(i=0;i<j;i++)\n    {\n\
    \        finalResult[i]=result[i];\n    }\n    //sort(finalResult);\n    for(i=0;i<j;i++)\n\
    \    {\n        for(long k=i+1;k<j;k++)\n        {\n            if(finalResult[i]>finalResult[k])\n\
    \            {\n                long temp=finalResult[i];\n                finalResult[i]=finalResult[k];\n\
    \                finalResult[k]=temp;\n            }\n        }\n    }\n    return\
    \ finalResult;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgsxhcxhy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] unique_digits_array;\n    unique_digits_array = [];\n    foreach(long\
    \ xi; x)\n    {\n        foreach(char c; to!string(xi))\n        {\n         \
    \   if(c % 2 == 0)\n            {\n                break;\n            }\n   \
    \         else\n            {\n                unique_digits_array ~= xi;\n  \
    \          }\n        }\n    }\n    return unique_digits_array;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ajwzjwe.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   immutable elements = x.length;\n    long[] arr = new long[elements];\n   \
    \ long[] sorted_arr = new long[elements];\n    int k = 0;\n    foreach(long number;\
    \ x)\n    {\n        if(number % 2 != 0)\n        {\n            arr[k] = number;\n\
    \            k++;\n        }\n    }\n    foreach(i; 0..k)\n    {\n        sorted_arr[i]\
    \ = arr[i];\n    }\n    sorted_arr.sort;\n    return sorted_arr;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpywclapzf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y;\n    y.length = 0;\n    foreach( a; x)\n    {\n        string s\
    \ = to!string(a);\n        bool found = false;\n        foreach(b; s)\n      \
    \  {\n            b -= '0';\n            if(b%2 == 0)\n            {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if(!found)\n        {\n            y ~= a;\n        }\n    }\n    std.algorithm.sort(y);\n\
    \    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjo38kkfh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   List list = new List();\n    foreach(long num; x) {\n        if(!hasEvenDigit(num))\n\
    \            list ~= num;\n    }\n    list.sort;\n    return list.toArray;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvdm5nxow.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] even = [0, 2, 4, 6, 8];\n    long[] result = [];\n    foreach(l; x)\n\
    \    {\n        if (find(even, l % 10) && l / 10 == 0)\n        {\n          \
    \  result ~= l;\n        }\n        else if (find(even, l % 10) == false)\n  \
    \      {\n            result ~= l;\n        }\n        else\n        {\n     \
    \       while (l != 0)\n            {\n                l /= 10;\n            \
    \    if (find(even, l % 10) == false)\n                {\n                   \
    \ result ~= l;\n                    break;\n                }\n            }\n\
    \        }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L])\
    \ == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n\
    \    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp601fg40o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    for (uint i = 0; i < x.length; i++)\n    {\n\
    \        if (!x[i].hasEvenDigit())\n        {\n            res ~= x[i];\n    \
    \    }\n    }\n    sort(res);\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgmsgzu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y = [1];\n    foreach(long z; x)\n    {\n        bool n = true;\n \
    \       for(long i = 0; i < z.length; i++)\n        {\n            if(i % 2 ==\
    \ 0)\n            {\n                n = false;\n                break;\n    \
    \        }\n        }\n        if(n) y ~= z;\n    }\n    y.sort;\n    return y;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwgwaer2b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    int i, j;\n    long[] y = new long[x.length];\n    int counter = 0;\n   \
    \ foreach(long z; x)\n    {\n        int z1 = cast(int)z;\n        int result\
    \ = 1;\n        while(z1 > 0)\n        {\n            if(z1 % 2 == 0)\n      \
    \      {\n                result = 0;\n                break;\n            }\n\
    \            z1 /= 10;\n        }\n        if(result == 1)\n        {\n      \
    \      y[counter] = z;\n            counter++;\n        }\n    }\n    long[] y1\
    \ = new long[counter];\n    for(i = 0; i < counter; i++)\n    {\n        y1[i]\
    \ = y[i];\n    }\n    sort(y1);\n    return y1;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz6tf5ijy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.filter!(n => n.toString().all!(d => d % 2 != 0)).sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwm0kb294.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y;\n    int i,j;\n    bool skip;\n    y=new long[x.length];\n    i=0;\n\
    \    foreach(long n; x)\n    {\n        skip=false;\n        j=0;\n        while(n!=0)\n\
    \        {\n            if(n%10==0||n%10==2||n%10==4||n%10==6||n%10==8)\n    \
    \        {\n                skip=true;\n                break;\n            }\n\
    \            n/=10;\n        }\n        if(!skip)\n        {\n            y[i]=x[j];\n\
    \            i++;\n        }\n        j++;\n    }\n    y=y[0..i];\n    return\
    \ y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg43k0e4n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int idx = 0;\n    foreach(val; x)\n    {\n        if(val % 2 == 0)\n     \
    \   {\n            idx++;\n        }\n    }\n    long[] res = new long[idx];\n\
    \    int i = 0;\n    foreach(val; x)\n    {\n        if(val % 2 == 0)\n      \
    \  {\n            res[i] = val;\n            i++;\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj20h6w9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto even_digits = [\"0\", \"2\", \"4\", \"6\", \"8\"];\n    auto x_str =\
    \ x.map!(to!string);\n    auto arr = new long[];\n    foreach(el; x_str)\n   \
    \ {\n        if(el.count!(s => s in even_digits) == 0)\n        {\n          \
    \  arr ~= el.to!long;\n        }\n    }\n    arr.sort!(\"a < b\");\n    return\
    \ arr;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptri1q4sz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(i; x)\n    {\n        long j = i;\n\
    \        bool found = false;\n        while(j > 0)\n        {\n            if(j\
    \ % 2 == 0)\n            {\n                found = true;\n                break;\n\
    \            }\n            j /= 10;\n        }\n        if(!found)\n        {\n\
    \            res ~= i;\n        }\n    }\n    return sort(res);\n}\n \nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr047s31v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    long[] out;\n    long[] aux;\n    uint len;\n    uint i,j;\n    int res;\n\
    \    len = x.length;\n    aux = new long[len];\n    out = new long[len];\n   \
    \ j = 0;\n    // Compute unique digits.\n    for (i = 0; i < len; i++)\n    {\n\
    \        res = checkUniqueDigits(x[i]);\n        if (res == 1)\n        {\n  \
    \          aux[j] = x[i];\n            j++;\n        }\n    }\n    // Sort the\
    \ array.\n    out = sort(aux[0..j]);\n    return out;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9pmtc5t8.d(17): Error: no identifier for declarator long[]\n/tmp/tmp9pmtc5t8.d(17):
    Error: found \''out\'' instead of statement\n/tmp/tmp9pmtc5t8.d(24): Error: found
    \''out\'' instead of statement\n/tmp/tmp9pmtc5t8.d(37): Error: found \''out\''
    instead of statement\n/tmp/tmp9pmtc5t8.d(38): Error: expression expected, not
    \''out\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9pmtc5t8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   bool noEven = true;\n    bool allEven = true;\n    bool[] include = new bool[x.length];\n\
    \    foreach(int i, long n; x)\n    {\n        if(n%2 == 0)\n        {\n     \
    \       allEven = false;\n            include[i] = false;\n        }\n       \
    \ else\n        {\n            noEven = false;\n            include[i] = true;\n\
    \        }\n    }\n    if(noEven)\n        return x;\n    if(allEven)\n      \
    \  return new long[0];\n    long[] result = new long[x.length];\n    int resultIndex\
    \ = 0;\n    foreach(int i, long n; x)\n    {\n        if(include[i])\n       \
    \ {\n            result[resultIndex] = n;\n            resultIndex++;\n      \
    \  }\n    }\n    result = result[0..resultIndex];\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkv0zvsn_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(long d; x)\n    {\n        long n = d;\n        while(n>0)\n\
    \        {\n            if(!isOdd(n%10)) break;\n            n /= 10;\n      \
    \  }\n        if(n==0) res ~= d;\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L])\
    \ == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n\
    \    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj01ia4xl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   // Checking for invalid input\n    if(x.length == 0)\n        return new long[0];\n\
    \    \n    return x.filter!(i => !i.toString.canFind(\"[02468]\")).array();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9svdrkq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y = new long[x.length];\n    int len=0;\n    for(int i=0;i<x.length;i++)\n\
    \    {\n        long num=x[i];\n        bool flag=true;\n        while(num>0)\n\
    \        {\n            if(num%2==0)\n            {\n                flag=false;\n\
    \                break;\n            }\n            num/=10;\n        }\n    \
    \    if(flag)\n        {\n            y[len++]=x[i];\n        }\n    }\n    sort(y[0..len]);\n\
    \    return y[0..len];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhrc3glc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   // Create an array list of the results\n    auto results = new int[](x.length);\n\
    \    // Create a counter to iterate and add elements to the array list\n    int\
    \ count = 0;\n    // Iterate through the given array\n    foreach(value; x)\n\
    \    {\n        // If the given value is divisible by 2\n        if(value % 2\
    \ == 0)\n        {\n            // Skip this number\n            continue;\n \
    \       }\n        // If the given value is not divisible by 2\n        else\n\
    \        {\n            // Add it to the array list\n            results[count]\
    \ = value;\n            // Increment the counter\n            count++;\n     \
    \   }\n    }\n    // Create a new array of the same size as the number of odd\
    \ numbers\n    auto new_results = new int[](count);\n    // Copy the elements\
    \ to the new array\n    new_results[] = results[0..count];\n    // Return the\
    \ sorted array\n    return new_results.sort();\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpehy5ns0w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[x.length];\n    foreach(index, l; x) \n    {\n     \
    \   auto digits = l.to!string().split(\"\");\n        foreach(d; digits)\n   \
    \     {\n            if(d.to!long() % 2 == 0)\n            {\n               \
    \ l = 0;\n                break;\n            }\n        }\n        if(l != 0)\n\
    \        {\n            res[index] = l;\n        }\n    }\n    return res.filter!(a\
    \ => a != 0).sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n \
    \   assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpramuc88o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(value; x) \n    {\n        if(value.is_unique_digits)\
    \ \n        {\n            res ~= value;\n        }\n    }\n    res.sort();\n\
    \    return res;\n}\nstruct is_unique_digits(T) if(is(T == class)) \n{\n    @property\
    \ bool opCall(T x)\n    {\n        foreach(i; 0 .. x.length) \n        {\n   \
    \         foreach(j; i+1 .. x.length) \n            {\n                if(x[i]\
    \ == x[j]) \n                {\n                    return false;\n          \
    \      }\n            }\n        }\n        return true;\n    }\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphu7vgqzp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   bool flag;\n    foreach(auto i; x)\n    {\n        flag = false;\n       \
    \ for(i; i > 0; i /= 10)\n        {\n            if((i % 10) % 2 == 0)\n     \
    \       {\n                flag = true;\n                break;\n            }\n\
    \        }\n        if(flag)\n            i = 0;\n    }\n    std.algorithm.sort(x);\n\
    \    return x;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptc2qwcbj.d(18): Error: basic type expected, not auto\n/tmp/tmptc2qwcbj.d(18):
    Error: no identifier for declarator int\n/tmp/tmptc2qwcbj.d(18): Error: found
    \''auto\'' when expecting \'';\''\n/tmp/tmptc2qwcbj.d(18): Error: found \'';\''
    when expecting \'')\''\n/tmp/tmptc2qwcbj.d(18): Error: found \'')\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptc2qwcbj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] ret;\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp37wiv7b7.d(18): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37wiv7b7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int count = 0;\n    foreach(element; x)\n    {\n        foreach(digit; element.to!string())\n\
    \        {\n            if(digit % 2 == 0)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    if(count == x.length)\n\
    \    {\n        return [];\n    }\n    else\n    {\n        long[] y = new long[];\n\
    \        foreach(element; x)\n        {\n            foreach(digit; element.to!string())\n\
    \            {\n                if(digit % 2 == 0)\n                {\n      \
    \              break;\n                }\n                else\n             \
    \   {\n                    y ~= element;\n                    break;\n       \
    \         }\n            }\n        }\n        y.sort();\n        return y;\n\
    \    }\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1walcjwn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   if (x.length <= 0)\n        return x;\n    long[] nums = new long[x.length];\n\
    \    int index = 0;\n    foreach(item; x)\n    {\n        int flag = 0;\n    \
    \    string number = item.to!string;\n        foreach(digit; number)\n       \
    \ {\n            if (digit.to!int % 2 == 0)\n            {\n                flag\
    \ = 1;\n                break;\n            }\n        }\n        if (flag ==\
    \ 0)\n        {\n            nums[index] = item;\n            index++;\n     \
    \   }\n    }\n    return nums[0..index].dup.sort;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_dkhm95y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j;\n    long[] rv = new long[0];\n    foreach(long val; x) {\n    \
    \    bool has_even = false;\n        for(i = 0; i < strlen(to!string(val)); i++)\
    \ {\n            if(to!int(to!string(val)[i]) % 2 == 0)\n                has_even\
    \ = true;\n        }\n        if(!has_even) {\n            rv ~= val;\n      \
    \  }\n    }\n    return rv;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps6prkxe0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto y = x.filter!(a => a.to!string.all!(b => b.isOdd)).array();\n    y.sort;\n\
    \    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxpqn8bbb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   sort(x);\n    // check if any of the elements in the arr. have a remainder\
    \ of 0\n    for (int i = 0; i < x.length; i++)\n    {\n        //  if any of the\
    \ elements has a remainder of 0\n        if (x[i] % 2 == 0)\n        {\n     \
    \       return x[0..i];\n        }\n    }\n    return x;\n}\nunittest\n{\n   \
    \ alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L])\
    \ == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n\
    \    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuv_4skbz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    int count = 0;\n    int[] arr = new int[n];\n    int[]\
    \ res = new int[n];\n    foreach(int i; 0 .. n)\n    {\n        long number =\
    \ x[i];\n        long temp;\n        while(number != 0)\n        {\n         \
    \   temp = number % 10;\n            if(temp % 2 == 0)\n            {\n      \
    \          arr[i] = 0;\n                break;\n            }\n            else\n\
    \            {\n                arr[i] = x[i];\n            }\n            number\
    \ /= 10;\n        }\n    }\n    foreach(int i; 0 .. n)\n    {\n        if(arr[i]\
    \ != 0)\n        {\n            res[count] = arr[i];\n            count++;\n \
    \       }\n    }\n    sort(res);\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk3fmveyk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.filter!(i => i.toString().any!(j => j.toString() == \"1\" || j.toString()\
    \ == \"3\" || j.toString() == \"5\" || j.toString() == \"7\" || j.toString() ==\
    \ \"9\")).array;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpglcwvo_n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(num; x)\n    {\n        int even = 0;\n        while(num\
    \ != 0)\n        {\n            if(num % 2 == 0)\n            {\n            \
    \    even = 1;\n                break;\n            }\n            num /= 10;\n\
    \        }\n        if(even == 0)\n            res ~= num;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm2_b6hj6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   //no java8, so...\n    auto even = (x) -> {\n        foreach(n; x)\n     \
    \       if(n % 2 == 0)\n                return true;\n        return false;\n\
    \    };\n    auto evenDigits = (n) -> {\n        while(n > 0) {\n            if(n\
    \ % 2 == 0)\n                return true;\n            n /= 10;\n        }\n \
    \       return false;\n    };\n    auto add = (a, b) -> {\n        a ~= b;\n \
    \       return a;\n    };\n    auto tmp = x.filter!evenDigits().array;\n    auto\
    \ res = x.reduce!add(tmp);\n    return res.sort();\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0ps_hc_n.d(18): Error: expression expected, not \''>\''\n/tmp/tmp0ps_hc_n.d(18):
    Error: semicolon expected following auto declaration, not \''{\''\n/tmp/tmp0ps_hc_n.d(24):
    Error: expression expected, not \''>\''\n/tmp/tmp0ps_hc_n.d(24): Error: semicolon
    expected following auto declaration, not \''{\''\n/tmp/tmp0ps_hc_n.d(32): Error:
    expression expected, not \''>\''\n/tmp/tmp0ps_hc_n.d(32): Error: semicolon expected
    following auto declaration, not \''{\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0ps_hc_n.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] arr = new long[x.length];\n    int count = 0;\n    for (int i = 0;\
    \ i < x.length; i++)\n    {\n        if (!hasEvenDigit(x[i]))\n        {\n   \
    \         arr[count] = x[i];\n            count++;\n        }\n    }\n    sort(arr);\n\
    \    return arr[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfei82l5v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int size = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        int\
    \ num = (int)x[i];\n        bool not_unique = false;\n        while (num > 0)\n\
    \        {\n            if ((num % 10) % 2 == 0)\n            {\n            \
    \    not_unique = true;\n                break;\n            }\n            num\
    \ /= 10;\n        }\n        if (!not_unique)\n            size++;\n    }\n  \
    \  long[] unique = new long[size];\n    int index = 0;\n    for (int i = 0; i\
    \ < x.length; i++)\n    {\n        int num = (int)x[i];\n        bool not_unique\
    \ = false;\n        while (num > 0)\n        {\n            if ((num % 10) % 2\
    \ == 0)\n            {\n                not_unique = true;\n                break;\n\
    \            }\n            num /= 10;\n        }\n        if (!not_unique)\n\
    \        {\n            unique[index] = x[i];\n            index++;\n        }\n\
    \    }\n    sort(unique);\n    return unique;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4u8ugn3n.d(20): Error: C style cast illegal, use cast(int)x[i]\n/tmp/tmp4u8ugn3n.d(38):
    Error: C style cast illegal, use cast(int)x[i]\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4u8ugn3n.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    long[] result = [];\n    foreach(long a; x)\n    {\n        if(!anyEven(a))\n\
    \            result ~= a;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj9ukgqxg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y;\n    foreach(num; x)\n    {\n        if(is_unique(num))\n      \
    \  {\n            y ~= num;\n        }\n    }\n    return y;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp656s05o8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] a;\n    int j=0;\n    for(int i=0;i<x.length;i++)\n    {\n        if(x[i]%10!=0&&x[i]%10!=2&&x[i]%10!=4&&x[i]%10!=6&&x[i]%10!=8)\n\
    \        {\n            a[j]=x[i];\n            j++;\n        }\n    }\n    return\
    \ a;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps3zry_uo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return\n        x.filter!(e => e.toString().count!(c => '2468'.indexOf(c)\
    \ != -1) == 0).sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptz6c9pqj.d(18): Error: unterminated character constant\n/tmp/tmptz6c9pqj.d(18):
    Error: found \''468\'' when expecting \'')\'' following template argument list\n/tmp/tmptz6c9pqj.d(18):
    Error: unterminated character constant\n/tmp/tmptz6c9pqj.d(18): Error: found \''46U\''
    when expecting \'')\'' following template argument list\n/tmp/tmptz6c9pqj.d(18):
    Error: found \''indexOf\'' when expecting \'';\'' following return statement\n/tmp/tmptz6c9pqj.d(18):
    Error: found \'')\'' when expecting \'';\'' following statement\n/tmp/tmptz6c9pqj.d(18):
    Error: found \''==\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmptz6c9pqj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int oddCount = 0;\n    foreach(var item; x)\n    {\n        long i = item;\n\
    \        while(i > 0)\n        {\n            if(i % 2 == 0)\n            {\n\
    \                oddCount++;\n                break;\n            }\n        \
    \    i /= 10;\n        }\n    }\n    long[] _return = new long[x.length - oddCount];\n\
    \    oddCount = 0;\n    foreach(var item; x)\n    {\n        long i = item;\n\
    \        bool isOdd = true;\n        while(i > 0)\n        {\n            if(i\
    \ % 2 == 0)\n            {\n                isOdd = false;\n                break;\n\
    \            }\n            i /= 10;\n        }\n        if(isOdd)\n        {\n\
    \            _return[oddCount] = item;\n            oddCount++;\n        }\n \
    \   }\n    sort(_return);\n    return _return;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzr7jk53.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   uint g = 0;\n    auto len = x.length;\n    foreach(uint i; 0 .. len) {\n \
    \       uint v = cast(uint)x[i];\n        while(v > 0) {\n            if((v %\
    \ 10) % 2 == 0) {\n                swap(x[i], x[g]);\n                ++g;\n \
    \               break;\n            }\n            v /= 10;\n        }\n    }\n\
    \    return x[0 .. g];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmsu5tnxx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y = new long[0];\n    foreach(i; x)\n    {\n        string s = format(\"\
    %s\", i);\n        if(all!(i => i != '0' && i != '2' && i != '4' && i != '6' &&\
    \ i != '8')(s))\n            y ~= i;\n    }\n    return y;\n}\nunittest\n{\n \
    \   alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpix8nj4c7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   bool hasEvenDigit(long n)\n    {\n        long digit;\n        while(n>0)\n\
    \        {\n            digit = n%10;\n            if(digit%2==0)\n          \
    \      return true;\n            n /= 10;\n        }\n        return false;\n\
    \    }\n    long[] ret;\n    long i = 0;\n    foreach(n; x)\n    {\n        if(!hasEvenDigit(n))\n\
    \        {\n            ret ~= n;\n            i++;\n        }\n    }\n    ret[0..i]\
    \ = sort(ret[0..i]);\n    return ret[0..i];\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41ejrwpv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    int count = 0;\n    int[] arr = new int[n];\n    long[]\
    \ y = new long[n];\n    int j = 0;\n    foreach(i; x)\n    {\n        if(!i.even)\n\
    \        {\n            y[j] = i;\n            j++;\n        }\n    }\n    y.sort;\n\
    \    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7440lzg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto is_even = (long n) { return n % 2 == 0; };\n    auto result = x\n   \
    \                 .filter!(n => is_even(n.digits.sum))\n                    .array;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp5430j5j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    int[] res = new int[x.length];\n    int count = 0;\n    for (int i = 0; i\
    \ < x.length; i++) {\n        int temp = x[i];\n        bool isUniq = true;\n\
    \        while (temp > 0) {\n            if (temp % 2 == 0) {\n              \
    \  isUniq = false;\n                break;\n            }\n            temp /=\
    \ 10;\n        }\n        if (isUniq) {\n            res[count++] = x[i];\n  \
    \      }\n    }\n    long[] res2 = new long[count];\n    for (int i = 0; i < count;\
    \ i++) {\n        res2[i] = res[i];\n    }\n    sort(res2);\n    return res2;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg4sdq3e1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    bool found_even_digits = false;\n    bool found_odd_digits\
    \ = false;\n    foreach(digits; x)\n    {\n        found_even_digits = false;\n\
    \        found_odd_digits = false;\n        long temp_digits = digits;\n     \
    \   while(temp_digits != 0)\n        {\n            long digit = temp_digits %\
    \ 10;\n            if(digit % 2 == 0)\n            {\n                found_even_digits\
    \ = true;\n            }\n            else\n            {\n                found_odd_digits\
    \ = true;\n            }\n            temp_digits /= 10;\n        }\n        if(found_even_digits\
    \ == false && found_odd_digits == true)\n        {\n            result ~= digits;\n\
    \        }\n    }\n    std.algorithm.sort(result);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqse3n24.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   // TODO: Fill in the function and change the return value\n    long[] y =\
    \ new long[0];\n    foreach(long e; x)\n    {\n        long z = e;\n        bool\
    \ k = false;\n        while(z > 0)\n        {\n            if(modf(z, 10) % 2\
    \ == 0)\n            {\n                k = true;\n                break;\n  \
    \          }\n            z /= 10;\n        }\n        if(!k)\n        {\n   \
    \         y ~= e;\n        }\n    }\n    return sort(y);\n}\nunittest\n{\n   \
    \ alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L])\
    \ == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n\
    \    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg6nihaec.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto res = new long[];\n    foreach(elt; x)\n    {\n        long n = elt;\n\
    \        while(n)\n        {\n            if(n % 2 == 0)\n                break;\n\
    \            n /= 10;\n        }\n        if(n == 0)\n            res ~= elt;\n\
    \    }\n    std.algorithm.sort(res);\n    return res;\n}\n \nunittest\n{\n   \
    \ alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L])\
    \ == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n\
    \    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoat9cppw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = new long[0];\n    for (int i = 0; i < x.length; i++)\n    {\n\
    \        int j = x[i];\n        bool isUnique = true;\n        while (j > 0)\n\
    \        {\n            int digit = j % 10;\n            if (digit % 2 == 0)\n\
    \            {\n                isUnique = false;\n                break;\n  \
    \          }\n            j /= 10;\n        }\n        if (isUnique)\n       \
    \ {\n            result ~= x[i];\n        }\n    }\n    sort(result);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbrmtf2nw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto ret = new long[](0);\n    foreach(num; x)\n    {\n        if (digits_are_odd(num))\n\
    \        {\n            ret ~= num;\n        }\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp03ie4ep.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] unique_digits_numbers = new long[0];\n    if (x.length == 0)\n    \
    \    return unique_digits_numbers;\n    \n    int xSize = x.length;\n    long[]\
    \ array = new long[xSize];\n    long[] tempArray = new long[xSize];\n    int count\
    \ = 0;\n    for (int i = 0; i < xSize; i++)\n    {\n        array[i] = x[i];\n\
    \        tempArray[i] = x[i];\n    }\n    tempArray.sort();\n    for (int i =\
    \ 0; i < xSize; i++)\n    {\n        if (tempArray[i] % 2 != 0)\n        {\n \
    \           unique_digits_numbers.length = unique_digits_numbers.length + 1;\n\
    \            unique_digits_numbers[count] = tempArray[i];\n            count++;\n\
    \        }\n    }\n    return unique_digits_numbers;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe0hdvm5h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   //write your code here\n    return x.filter!((a) => all_digits(a, (b) => b\
    \ % 2)).sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn7vdt7z_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] ans;\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwewt0bur.d(18): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwewt0bur.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    return x.filter!(x => x.digits.filter!(x => x % 2 == 0).length == 0).sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zmg7eck.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    int n = x.length;\n    long[] ans = new long[n];\n    int i = 0;\n    for\
    \ (int k = 0; k < n; k++) {\n        if (x[k] % 2 == 1) {\n            ans[i]\
    \ = x[k];\n            i++;\n        }\n    }\n    ans = ans[0..i];\n    return\
    \ ans;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp28e03tz0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    long count = 0;\n    for (long i\
    \ = 0; i < x.length; i++) {\n        if (isDigitEven(x[i])) {\n            result[count]\
    \ = x[i];\n            count++;\n        }\n    }\n    long[] res = new long[count];\n\
    \    for (long i = 0; i < count; i++) {\n        res[i] = result[i];\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvxk9llb8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n\t\
    int count = 0;\n\tlong[] y = x.dup;\n\t\n\tint len = y.length;\n\tfor (int i =\
    \ 0; i < len; i++)\n\t{\n\t\tif (y[i] == 0)\n\t\t{\n\t\t\ty[i] = 1;\n\t\t}\n\t\
    \tint tmp = y[i];\n\t\twhile (tmp > 0)\n\t\t{\n\t\t\ttmp = tmp / 10;\n\t\t\tcount++;\n\
    \t\t}\n\t\t\n\t\tfor (int j = 0; j < count; j++)\n\t\t{\n\t\t\tif (y[i]%2 == 0)\n\
    \t\t\t{\n\t\t\t\ty[i] = 0;\n\t\t\t}\n\t\t\ty[i] = y[i] / 10;\n\t\t}\n\t\tcount\
    \ = 0;\n\t}\n\t\n\ty = y.filter!(a => a != 0);\n\ty.sort;\n\treturn y;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ifc632c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y;\n    foreach(long i; x)\n    {\n        foreach(dchar j; i.to!string)\n\
    \        {\n            if(j % 2 == 0)\n            {\n                y ~= i;\n\
    \            }\n        }\n    }\n    y.sort();\n    return y;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdcoko27v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] r;\n    foreach(a; x) \n    {\n        if (a.find('2') == -1 && a.find('4')\
    \ == -1 && a.find('6') == -1 && a.find('8') == -1) \n        {\n            r\
    \ ~= a;\n        }\n    }\n    return r.sort;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsy2z03qw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(el; x)\n    {\n        if(el.to!string.filter!(a\
    \ => a.to!int % 2).empty)\n            res ~= el;\n    }\n    res.sort;\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd8beyhbc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   immutable(long)[] evenDigits = [0L, 2L, 4L, 6L, 8L];\n    long[] result =\
    \ [];\n    foreach(l; x)\n    {\n        bool odd = true;\n        foreach(e;\
    \ evenDigits)\n        {\n            if(l.to!string.count(e.to!string))\n   \
    \         {\n                odd = false;\n                break;\n          \
    \  }\n        }\n        if(odd)\n        {\n            result ~= l;\n      \
    \  }\n    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphbky7lwm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n\t\
    int n = x.length;\n\tint k = 0;\n\tbool flag = true;\n\tlong[] y = new long[n];\n\
    \tfor (int i = 0; i < n; i++)\n\t{\n\t\tflag = true;\n\t\tfor (int j = 0; j <\
    \ 10; j++)\n\t\t{\n\t\t\tif (x[i] == j)\n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag)\n\t\t{\n\t\t\ty[k] = x[i];\n\t\t\tk++;\n\
    \t\t}\n\t}\n\tsort(y);\n\treturn y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiwtb3167.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.filter!(a => a.toString().all!(a => a % 2 != 0)).array();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp5agd2vf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] k = new long[x.length];\n    long[] res = new long[0];\n    int j =\
    \ 0;\n    for (int i = 0; i < x.length; i++) {\n        while (x[i] > 0) {\n \
    \           k[j] = x[i] % 10;\n            x[i] /= 10;\n            j++;\n   \
    \     }\n        j = 0;\n        sort(k);\n        for (int l = 0; l < k.length;\
    \ l++) {\n            if (k[l] % 2 == 0) {\n                break;\n         \
    \   }\n            if (l == k.length - 1) {\n                res ~= k[l];\n  \
    \          }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprynk0we9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(e; x) \n    {\n        bool flag = true;\n\
    \        foreach(i; to!string(e)) \n        {\n            if(i % 2 == 0) \n \
    \           {\n                flag = false;\n                break;\n       \
    \     }\n        }\n        if(flag) \n        {\n            result ~= e;\n \
    \       }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8s4389iq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i;\n    long[] y = new long[0];\n    int count = 0;\n    for (i = 0; i\
    \ < x.length; i++) {\n        if (x[i] % 2 != 0) {\n            y = y ~ x[i];\n\
    \            count++;\n        }\n    }\n    y = y[0..count];\n    return y;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnwzwr3jb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.filter!(y => !hasEvenDigit(y)).sort!(c => c);\n}\nunittest\n{\n \
    \   alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe0vlfvt3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int size = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        string\
    \ s = to!string(x[i]);\n        foreach (char c; s)\n        {\n            if\
    \ (c == '0' || c == '2' || c == '4' || c == '6' || c == '8')\n            {\n\
    \                size++;\n                break;\n            }\n        }\n \
    \   }\n    size = x.length - size;\n    long[] y = new long[size];\n    int x2\
    \ = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        string s = to!string(x[i]);\n\
    \        foreach (char c; s)\n        {\n            if (c == '0' || c == '2'\
    \ || c == '4' || c == '6' || c == '8')\n            {\n                break;\n\
    \            }\n            else if (c != '0' && c != '2' && c != '4' && c !=\
    \ '6' && c != '8' && i == s.length-1)\n            {\n                y[x2] =\
    \ x[i];\n                x2++;\n            }\n        }\n    }\n    sort(y);\n\
    \    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpchibao36.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   //write your code here!\n    auto result = new long[0];\n    foreach(e; x)\n\
    \    {\n        if(e % 2 == 1)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_t6awqt5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto retVal = x.dup;\n    for (int i = 0; i < retVal.length; i++) {\n    \
    \    if ( retVal[i] % 2 == 0) {\n            retVal[i] = -1;\n        }\n    }\n\
    \    retVal = retVal.dup.remove(l => l == -1);\n    retVal.sort;\n    return retVal;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptb30digc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    auto newArr = new long[];\n    bool hasEvenDigit = false;\n    foreach(item;\
    \ x)\n    {\n        foreach(digit; item.to!string().to!int)\n        {\n    \
    \        if(digit % 2 == 0)\n            {\n                hasEvenDigit = true;\n\
    \                break;\n            }\n        }\n        if(!hasEvenDigit)\n\
    \        {\n            newArr ~= item;\n        }\n        hasEvenDigit = false;\n\
    \    }\n    return newArr.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23ijdzfa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n\t\
    auto res=new long[];\n\tforeach(num;x)\n\t{\n\t\tauto tmp=num;\n\t\tbool f=true;\n\
    \t\twhile(tmp!=0)\n\t\t{\n\t\t\tif(tmp%2==0)\n\t\t\t{\n\t\t\t\tf=false;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t\ttmp/=10;\n\t\t}\n\t\tif(f)\n\t\t\tres~=num;\n\t}\n\t\
    std.algorithm.sort(res);\n\treturn res;\n}\nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi84gk2pv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] z = [];\n    foreach(i; x)\n    {\n        string sti = std.string.from(i);\n\
    \        bool even = false;\n        foreach(c; sti)\n        {\n            if((c\
    \ - '0') % 2 == 0)\n            {\n                even = true;\n            \
    \    break;\n            }\n        }\n        if(!even)\n            z ~= i;\n\
    \    }\n    std.algorithm.sort(z);\n    return z;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkngbiy_p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] newArr = new long[x.length];\n    long count = 0;\n    int j = 0;\n\
    \    foreach(i; x)\n    {\n        if(i % 2 != 0)\n        {\n            newArr[j]\
    \ = i;\n            j++;\n            count++;\n        }\n    }\n    long[] newArr2\
    \ = new long[count];\n    int k = 0;\n    foreach(i; x)\n    {\n        if(i %\
    \ 2 != 0)\n        {\n            newArr2[k] = i;\n            k++;\n        }\n\
    \    }\n    return newArr2;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv7cu9y2t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.filter!(i => to!string(i).all!(c => c.isOdd));\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyznkprkz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    int[] arr = new int[n];\n    for (int i = 0; i < n;\
    \ i++)\n    {\n        int m = x[i];\n        int p = 0;\n        while (m > 0)\n\
    \        {\n            if (m % 2 == 0)\n            {\n                p = 1;\n\
    \                break;\n            }\n            m /= 10;\n        }\n    \
    \    if (p == 0)\n            arr[i] = x[i];\n        else\n            arr[i]\
    \ = 0;\n    }\n    sort(arr);\n    int j = 0;\n    while (arr[j] == 0)\n     \
    \   j++;\n    long[] ret = new long[n - j];\n    for (int i = j; i < n; i++)\n\
    \        ret[i - j] = arr[i];\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0iky96g9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \ long i = 0;\n  long[] ret = new long[x.length];\n  long r = 0;\n  while (i <\
    \ x.length)\n  {\n    long k = x[i];\n    while (k > 0)\n    {\n      long z =\
    \ k % 10;\n      if (z % 2 == 0)\n      {\n        break;\n      }\n      k /=\
    \ 10;\n    }\n    if (k == 0)\n    {\n      ret[r] = x[i];\n      r++;\n    }\n\
    \    i++;\n  }\n  long[] dret = new long[r];\n  foreach (ref x; ret)\n  {\n  \
    \  if (x == 0)\n    {\n      break;\n    }\n    dret ~= x;\n  }\n  return dret;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphzuuza9k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto copy = x.dup;\n    foreach(i, ref item; copy)\n    {\n        foreach(j,\
    \ ref ch; item.to!string)\n        {\n            if(ch - '0' % 2 == 0)\n    \
    \        {\n                item = 0;\n                break;\n            }\n\
    \        }\n    }\n    copy = copy.filter!(a => a != 0).array();\n    copy.sort!(a\
    \ => a)();\n    return copy;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl225wpx7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i;\n    int j;\n    int a;\n    int size = x.length;\n    long[] s = new\
    \ long[size];\n    int counter = 0;\n    int pos;\n    int t;\n    int temp;\n\
    \    int dig;\n    for (i = 0; i < size; i++) {\n        a = x[i];\n        pos\
    \ = 0;\n        while (a > 0) {\n            if (a % 10 % 2 == 0) {\n        \
    \        break;\n            }\n            a /= 10;\n            pos++;\n   \
    \     }\n        if (a == 0) {\n            s[counter] = x[i];\n            counter++;\n\
    \        }\n    }\n    for (i = 0; i < counter; i++) {\n        for (j = 0; j\
    \ < counter; j++) {\n            if (s[i] < s[j]) {\n                temp = s[i];\n\
    \                s[i] = s[j];\n                s[j] = temp;\n            }\n \
    \       }\n    }\n    long[] ans = new long[counter];\n    for (i = 0; i < counter;\
    \ i++) {\n        ans[i] = s[i];\n    }\n    return ans;\n}\nunittest\n{\n   \
    \ alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L])\
    \ == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n\
    \    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2110m5zo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    // your code\n    auto result = x.filter!(x => to!string(x).all!(\"isOdd(x)\"\
    ));\n    return sort(result);\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp22_5zbag.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    //std.sort(x);\n    long[] res = new long[n];\n   \
    \ int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        string s = to!string(x[i]);\n\
    \        int flag = 0;\n        foreach (ch; s) {\n            if (ch % 2 == 0)\
    \ {\n                flag = 1;\n                break;\n            }\n      \
    \  }\n        if (flag == 0) {\n            res[cnt++] = x[i];\n        }\n  \
    \  }\n    return res[0..cnt];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpogqyxfwu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    int counter = 0;\n    for (int i = 0; i < x.length; i++)\
    \ {\n        if (x[i] < 10) {\n            counter++;\n        } else {\n    \
    \        while (x[i] > 0) {\n                if (x[i] % 2 == 0) {\n          \
    \          break;\n                }\n                x[i] /= 10;\n          \
    \  }\n            if (x[i] == 0) {\n                counter++;\n            }\n\
    \        }\n    }\n    res = new long[counter];\n    int index = 0;\n    for (int\
    \ i = 0; i < x.length; i++) {\n        if (x[i] < 10) {\n            res[index]\
    \ = x[i];\n            index++;\n        } else {\n            long tmp = x[i];\n\
    \            while (tmp > 0) {\n                if (tmp % 2 == 0) {\n        \
    \            break;\n                }\n                tmp /= 10;\n         \
    \   }\n            if (tmp == 0) {\n                res[index] = x[i];\n     \
    \           index++;\n            }\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8djz6ctw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   // Write your solution here.\n    long[] output = new long[0];\n    int count;\n\
    \    for (int i = 0; i < x.length; i++) {\n        count = 0;\n        for (int\
    \ j = 0; j < toString(x[i]).length(); j++) {\n            if (toString(x[i])[j]\
    \ % 2 == 0) {\n                count++;\n            }\n        }\n        if\
    \ (count == 0) {\n            output ~= x[i];\n        }\n    }\n    if (output.length\
    \ != 0) {\n        sort(output);\n    }\n    return output;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4dhobxsy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    int i,j,k;\n    int n = x.length;\n    int count;\n  \
    \  if(n==0) return new long[0];\n    result = new long[n];\n    for(i=0,j=0;i<n;i++)\n\
    \    {\n        count = 0;\n        while(x[i]>0)\n        {\n            if(x[i]%2==0)\
    \ count++;\n            x[i] /= 10;\n        }\n        if(count==0)\n       \
    \ {\n            result[j] = x[i];\n            j++;\n        }\n    }\n    result\
    \ = result[0..j];\n    sort(result);\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L])\
    \ == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n\
    \    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2x84h026.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   if (x.length == 0)\n        return x;\n    else if (x.length == 1)\n     \
    \   return x[0] % 2 != 0 ? x : new long[0];\n    \n    bool has_even = false;\n\
    \    foreach (num; x)\n        if (num % 2 == 0)\n            has_even = true;\n\
    \    if (!has_even)\n        return x;\n    \n    long[]  result = new long[];\n\
    \    foreach (num; x)\n        if (num % 2 != 0)\n            result ~= num;\n\
    \    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc4oobgjs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    int j = 0;\n    for (int i = 0; i < n; i++)\n    {\n\
    \        long temp = x[i];\n        while (temp != 0)\n        {\n           \
    \ if ((temp % 10) % 2 == 0)\n            {\n                x[i] = -1;\n     \
    \           break;\n            }\n            temp /= 10;\n        }\n    }\n\
    \    foreach (num; x)\n    {\n        if (num != -1)\n        {\n            x[j]\
    \ = num;\n            j++;\n        }\n    }\n    x = x[0..j];\n    sort(x);\n\
    \    return x;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7aqn5exk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i = 0;\n    int j = 0;\n    long [] array = new long[x.length];\n    bool\
    \ flag = true;\n    for (i = 0; i < x.length; i++)\n    {\n        flag = true;\n\
    \        for (j = 0; j < x[i].digits; j++)\n        {\n            if (x[i].digits\
    \ % 2 == 0)\n            {\n                flag = false;\n                break;\n\
    \            }\n        }\n        if (flag)\n        {\n            array ~=\
    \ x[i];\n        }\n    }\n    return array;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp10lg4vov.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto s = to!string(x);\n    int[] evenNumbers = [0, 2, 4, 6, 8];\n    s =\
    \ s.retain(c => !evenNumbers.canFind(c.to!int()));\n    s = s.sort();\n    return\
    \ to!long(s);\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpojp0dbev.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto xCopy = x[];\n    foreach(i; xCopy)\n    {\n        immutable isUnique\
    \ = true;\n        immutable digits = int.digits(i);\n        foreach(d; digits)\n\
    \        {\n            if(d % 2 == 0)\n            {\n                isUnique\
    \ = false;\n                break;\n            }\n        }\n        if(!isUnique)\n\
    \        {\n            xCopy = xCopy[0..$-1];\n        }\n    }\n    sort(xCopy);\n\
    \    return xCopy;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n \
    \   assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptztqor_7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    int i = 0;\n    while (i < x.length)\n    {\n   \
    \     bool flag = true;\n        while (x[i] != 0)\n        {\n            if\
    \ (x[i] % 2 == 0)\n            {\n                flag = false;\n            \
    \    break;\n            }\n            x[i] /= 10;\n        }\n        if (flag)\n\
    \            result ~= x[i];\n        i++;\n    }\n    sort(result);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp75zulgwd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto even = false;\n    for (int i = 0; i < x.length; i++)\n    {\n      \
    \  for (int j = 0; j < x[i].stringof.length; j++)\n        {\n            if (x[i].stringof[j]\
    \ == '0' \n                || x[i].stringof[j] == '2' \n                || x[i].stringof[j]\
    \ == '4' \n                || x[i].stringof[j] == '6' \n                || x[i].stringof[j]\
    \ == '8')\n            {\n                even = true;\n                break;\n\
    \            }\n        }\n        if (even)\n        {\n            x[i] = 0;\n\
    \            even = false;\n        }\n    }\n    x = x.filter!(n => n != 0);\n\
    \    sort(x);\n    return x;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphtsokwyr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto has_even_digit = (long num) {\n        foreach (d; num.digits())\n  \
    \          if (d % 2 == 0)\n                return true;\n        return false;\n\
    \    };\n    return x.filter!(has_even_digit).sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbmrpeu5p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   size_t uniqueDigitsLength;\n    uniqueDigitsLength = 0;\n    foreach(i; x)\n\
    \    {\n        int evenDigit = 0;\n        while(i > 0)\n        {\n        \
    \    if ( (i % 10) % 2 == 0)\n            {\n                evenDigit = 1;\n\
    \                break;\n            }\n            i /= 10;\n        }\n    \
    \    if (evenDigit == 0)\n        {\n            uniqueDigitsLength++;\n     \
    \   }\n    }\n    long[] uniqueDigits;\n    uniqueDigits = new long[uniqueDigitsLength];\n\
    \    foreach(i; x)\n    {\n        int evenDigit = 0;\n        while(i > 0)\n\
    \        {\n            if ( (i % 10) % 2 == 0)\n            {\n             \
    \   evenDigit = 1;\n                break;\n            }\n            i /= 10;\n\
    \        }\n        if (evenDigit == 0)\n        {\n            uniqueDigits ~=\
    \ i;\n        }\n    }\n    std.algorithm.sort(uniqueDigits);\n    return uniqueDigits;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx9uw7g9e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(long n; x)\n    {\n        if (n % 2 == 0)\n    \
    \    {\n            long tmp = n;\n            while (tmp != 0)\n            {\n\
    \                if (tmp % 10 % 2 == 0)\n                {\n                 \
    \   res ~= n;\n                    break;\n                }\n               \
    \ tmp /= 10;\n            }\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppyundr5y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   List!long arr = [];\n    foreach(i; x)\n    {\n        bool flag = true;\n\
    \        foreach(e; to!string(i))\n        {\n            if(stoi(e) % 2 == 0)\n\
    \            {\n                flag = false;\n                break;\n      \
    \      }\n        }\n        if(flag)\n            arr ~= i;\n    }\n    return\
    \ arr.sort;\n}\n/*\nYour task is to write a function which returns the sum of\
    \ following series upto nth term(parameter).\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpka54g33w.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpka54g33w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    int j = 0;\n    long[] result = new long[n];\n    foreach(i;\
    \ x)\n    {\n        if ( (i > 0) && (! isEven(getDigit(i, j))) )\n        {\n\
    \            result[j] = i;\n            j++;\n        }\n    }\n    return result[0..j];\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9wh0vjn3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    auto result = [];\n    foreach(num; x)\n    {\n        auto test = num;\n\
    \        bool isAll = true;\n        while(test > 0 && isAll)\n        {\n   \
    \         if(test % 2 == 0)\n                isAll = false;\n            test\
    \ /= 10;\n        }\n        if(isAll)\n            result ~= num;\n    }\n  \
    \  sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnh0ok4a3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   //set to store elements that doesn't have even digits\n    set!int st = new\
    \ set!int();\n    //for each element in x\n    foreach(e; x)\n    {\n        //convert\
    \ element to string and reverse\n        string el = to!string(e);\n        string\
    \ res = el.dup.idup.reverse;\n        //check if each character is odd\n     \
    \   bool allOdd = true;\n        foreach(c; res)\n        {\n            if(to!int(c)\
    \ % 2 == 0)\n            {\n                allOdd = false;\n                break;\n\
    \            }\n        }\n        //if so, add it to set\n        if(allOdd)\n\
    \            st.insert(e);\n    }\n    //return set as array and sort it\n   \
    \ long[] res = st.array;\n    sort(res);\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg73g5ipm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] unique = new long[0];\n    foreach(i; x)\n    {\n        if(check(i))\n\
    \        {\n            unique ~= i;\n        }\n    }\n    return sort(unique);\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbcis99_8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   // put your code here\n    int[] evenDigits = new int[10];\n    evenDigits[0]\
    \ = 2;\n    evenDigits[2] = 2;\n    evenDigits[4] = 2;\n    evenDigits[6] = 2;\n\
    \    evenDigits[8] = 2;\n    long[] result;\n    int count = 0;\n    int total\
    \ = 0;\n    foreach(i; x)\n    {\n        if(!(hasEvenDigit(i, evenDigits)))\n\
    \        {\n            count++;\n        }\n    }\n    result = new long[count];\n\
    \    foreach(i; x)\n    {\n        if(!(hasEvenDigit(i, evenDigits)))\n      \
    \  {\n            result[total] = i;\n            total++;\n        }\n    }\n\
    \    std.algorithm.sort(result);\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvvg1hat2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long n; x)\n    {\n        if (isOdd(n))\n   \
    \     {\n            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxdbmyehy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = x.dup;\n    int count = 0;\n    int i = 0;\n    foreach(long\
    \ number; x)\n    {\n        while(number > 0)\n        {\n            if(number\
    \ % 10 % 2 == 0)\n            {\n                res[i] = 0;\n               \
    \ count++;\n                break;\n            }\n            number /= 10;\n\
    \        }\n        i++;\n    }\n    res = res.remove(0, count);\n    res.sort();\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq49r9l9f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.dup.remove!(a => a.to!string.canFind(\"[02468]\")).sort();\n}\n/*\n\
    Given an array of positive integers x. return a sorted array of all \n    elements\
    \ that hasn't any even digit.\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjd9yyodm.d(19): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjd9yyodm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   // Your Code Here!\n    // -------------\n    int len = x.length;\n    int[]\
    \ digits = new int[len];\n    int index = 0;\n    int temp = 0;\n    long[] y\
    \ = new long[len];\n    for(int i = 0; i < len; i++)\n    {\n        temp = 0;\n\
    \        for(int j = 0; j < len; j++)\n        {\n            if((x[i]%10)%2 ==\
    \ 0)\n            {\n                temp = 1;\n                break;\n     \
    \       }\n            x[i] = x[i]/10;\n        }\n        if(temp == 0)\n   \
    \     {\n            digits[index] = i;\n            index++;\n        }\n   \
    \ }\n    long[] z = new long[index];\n    for(int i = 0; i < index; i++)\n   \
    \ {\n        z[i] = x[digits[i]];\n    }\n    z.sort();\n    return z;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2nfgrn5u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    long[] result = new long[x.length];\n    int pos = 0;\n    for (int i = 0;\
    \ i < x.length; i++) {\n        if (x[i] % 2 != 0) {\n            result[pos]\
    \ = x[i];\n            pos++;\n        }\n    }\n    long[] result2 = new long[pos];\n\
    \    for (int i = 0; i < pos; i++) {\n        result2[i] = result[i];\n    }\n\
    \    sort(result2);\n    return result2;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj210m05x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result=new long[x.length];\n    int count=0;\n    for(int i=0;i<x.length;i++)\n\
    \    {\n        string z=x[i].to!string;\n        int flag=0;\n        for(int\
    \ j=0;j<z.length;j++)\n        {\n            int digit=z[j]-'0';\n          \
    \  if(digit%2==0)\n            {\n                flag=1;\n                break;\n\
    \            }\n        }\n        if(flag==0)\n        {\n            result[count]=x[i];\n\
    \            count++;\n        }\n    }\n    long[] final_result;\n    if(count==0)\n\
    \    {\n        final_result=new long[0];\n    }\n    else\n    {\n        final_result=new\
    \ long[count];\n        for(int i=0;i<count;i++)\n        {\n            final_result[i]=result[i];\n\
    \        }\n    }\n    return final_result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuaapakul.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    long[] y=new long[0];\n    foreach(long i;x)\n    {\n        long i2=i;\n\
    \        long[] z=new long[0];\n        for(;i2!=0;i2/=10)\n        {\n      \
    \      if(i2%2==0)\n            {\n                break;\n            }\n   \
    \         else\n            {\n                z~=i2%10;\n            }\n    \
    \    }\n        if(i2==0&&z.length!=0)\n        {\n            y~=i;\n       \
    \ }\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7gmaor4w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.filter!(digits => digits.to!string.filter!(c => c.isEven).empty).sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprkcj_wmk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] oddArray = new long[x.length];\n    int counter = 0;\n    for (int\
    \ i = 0; i < x.length; i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n  \
    \          oddArray[counter] = x[i];\n            counter++;\n        }\n    }\n\
    \    long[] final = new long[counter];\n    for (int i = 0; i < counter; i++)\n\
    \    {\n        final[i] = oddArray[i];\n    }\n    sort(final);\n    return final;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprzmwhoyu.d(27): Error: no identifier for declarator long[]\n/tmp/tmprzmwhoyu.d(27):
    Error: basic type expected, not =\n/tmp/tmprzmwhoyu.d(27): Error: no identifier
    for declarator int\n/tmp/tmprzmwhoyu.d(27): Error: found \''=\'' instead of statement\n/tmp/tmprzmwhoyu.d(30):
    Error: basic type expected, not [\n/tmp/tmprzmwhoyu.d(30): Error: no identifier
    for declarator int[i]\n/tmp/tmprzmwhoyu.d(30): Error: found \''=\'' instead of
    statement\n/tmp/tmprzmwhoyu.d(32): Error: expression expected, not \''final\''\n/tmp/tmprzmwhoyu.d(33):
    Error: expression expected, not \''final\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmprzmwhoyu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    int[] c = new int[1];\n    foreach(e; x)\n    {\n        ulong t = cast(ulong)e;\n\
    \        while(t > 0)\n        {\n            ulong digit = t % 10;\n        \
    \    if(digit % 2 == 0)\n            {\n                c ~= 1;\n            \
    \    break;\n            }\n            t /= 10;\n        }\n    }\n    return\
    \ x[0..$-c.length];\n}\n/*\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgd80149x.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpgd80149x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   x = x.filter!(i => !i.canFind(\"2\") && !i.canFind(\"4\") && !i.canFind(\"\
    6\") && !i.canFind(\"8\") && !i.canFind(\"0\"));\n    x.sort();\n    return x;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqsanhmp9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int len = size(x);\n    long[] y = new long[0];\n    for (int i = 0; i < len;\
    \ i++)\n    {\n        long num = x[i];\n        if (num < 0)\n            num\
    \ = abs(num);\n        bool even = false;\n        while (num != 0)\n        {\n\
    \            if ((num % 10) % 2 == 0)\n            {\n                even = true;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (!even)\n            y ~= x[i];\n    }\n    return sort(y);\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3inp1m3i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y = x.dup;\n    long[] z = new long[y.length];\n    long[] result =\
    \ new long[y.length];\n    int count = 0;\n    foreach(ref long i; y)\n    {\n\
    \        if(i % 2 == 0)\n        {\n            z[count] = i;\n            count++;\n\
    \        }\n    }\n    if(count == y.length)\n    {\n        return new long[0];\n\
    \    }\n    else\n    {\n        sort(z[0..count]);\n        count = 0;\n    \
    \    foreach(ref long i; y)\n        {\n            if(z.find(i) < 0)\n      \
    \      {\n                result[count] = i;\n                count++;\n     \
    \       }\n        }\n        return result[0..count];\n    }\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplkr9cwl8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int index = 0;\n    long[] array = new long[x.length];\n    foreach(int elem;\
    \ x)\n    {\n        if(!hasEvenDigit(elem))\n        {\n            array[index]\
    \ = elem;\n            index++;\n        }\n    }\n    array = array[0..index];\n\
    \    sort(array);\n    return array;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjfmzi2oc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = x.filter!(\n        (long n) => \n        {\n            while\
    \ (n != 0) \n            {\n                int d = cast(int)(n % 10);\n     \
    \           if (d % 2 == 0)\n                    return false;\n             \
    \   n /= 10;\n            }\n            return true;\n        }\n    );\n   \
    \ result.sort;\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpusuvemib.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.filter!(a => (a % 2 != 0)).array();\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5tlmgep.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   foreach(i; x)\n    {\n        bool hasZero = false;\n        bool hasEven\
    \ = false;\n        int num = i;\n        while(num > 0)\n        {\n        \
    \    int dig = num % 10;\n            if(dig == 0)\n                hasZero =\
    \ true;\n            if(dig % 2 == 0)\n                hasEven = true;\n     \
    \       num /= 10;\n        }\n        if(hasZero || hasEven)\n            x.remove(i);\n\
    \    }\n    x.sort();\n    return x;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck16aiht.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto is_odd = (long n) => n % 2 == 1;\n    auto has_even_digit = (long n)\
    \ => n.to!string.any!is_odd;\n    return x.retain!has_even_digit.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphz_in_v6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n\t\
    int i, j, k;\n\tint len = x.length;\n\t//int[] result;\n\t//int[] even = {0, 2,\
    \ 4, 6, 8};\n\tlong[] result = new long[len];\n\t\n\tint count = 0;\n\tfor (i\
    \ = 0; i < len; i++)\n\t{\n\t\tint num = int(x[i]);\n\t\tint flag = 0;\n\t\tint\
    \ mod = 0;\n\t\t\n\t\twhile (num != 0)\n\t\t{\n\t\t\tmod = num % 10;\n\t\t\tnum\
    \ = num / 10;\n\t\t\tif (mod % 2 == 0)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (flag == 0)\n\t\t{\n\t\t\tresult[count] = x[i];\n\t\t\t\
    count++;\n\t\t}\n\t}\n\t\n\tif (count == 0)\n\t{\n\t\treturn null;\n\t}\n\t\n\t\
    for (i = 0; i < count; i++)\n\t{\n\t\tfor (j = i + 1; j < count; j++)\n\t\t{\n\
    \t\t\tif (result[i] > result[j])\n\t\t\t{\n\t\t\t\tint tmp = int(result[i]);\n\
    \t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\
    \t\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvnbaie16.d(26): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpvnbaie16.d(26): Error: semicolon expected, not \'')\''\n/tmp/tmpvnbaie16.d(26):
    Error: found \'')\'' instead of statement\n/tmp/tmpvnbaie16.d(58): Error: found
    \''(\'' when expecting \''.\'' following int\n/tmp/tmpvnbaie16.d(58): Error: semicolon
    expected, not \'')\''\n/tmp/tmpvnbaie16.d(58): Error: found \'')\'' instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvnbaie16.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    auto primes = [];\n    for (int i = 0; i < n; i++)\n\
    \    {\n        int temp = x[i];\n        bool prime = true;\n        while (temp\
    \ > 0)\n        {\n            int rem = temp % 10;\n            if (rem % 2 ==\
    \ 0)\n            {\n                prime = false;\n                break;\n\
    \            }\n            temp /= 10;\n        }\n        if (prime)\n     \
    \       primes ~= x[i];\n    }\n    return primes;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2cak4tqz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto tmp = [0];\n    foreach(e; x)\n    {\n        if (e % 2 != 0)\n     \
    \   {\n            tmp ~= e;\n        }\n    }\n    auto result = sort(tmp);\n\
    \    return result[1..$];\n}\n/*\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkzrw1dvf.d(28): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkzrw1dvf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \ int size = 0;\n  for (int i = 0; i < x.length; i++)\n  {\n    int num = x[i];\n\
    \    bool is_unique = true;\n    while (num > 0)\n    {\n      if (num % 2 ==\
    \ 0)\n      {\n        is_unique = false;\n        break;\n      }\n      num\
    \ /= 10;\n    }\n    if (is_unique)\n      size++;\n  }\n  long[] unique_array\
    \ = new long[size];\n  int unique_array_idx = 0;\n  for (int i = 0; i < x.length;\
    \ i++)\n  {\n    int num = x[i];\n    bool is_unique = true;\n    while (num >\
    \ 0)\n    {\n      if (num % 2 == 0)\n      {\n        is_unique = false;\n  \
    \      break;\n      }\n      num /= 10;\n    }\n    if (is_unique)\n    {\n \
    \     unique_array[unique_array_idx] = x[i];\n      unique_array_idx++;\n    }\n\
    \  }\n  sort(unique_array);\n  return unique_array;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkb3n6whv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n\t\
    int len = x.length;\n\tint i = 0;\n\tint j = 0;\n\tint c = 0;\n\tlong[] a = new\
    \ long[len];\n\tfor (;i < len; i++)\n\t{\n\t\tlong num = x[i];\n\t\tint flag =\
    \ 0;\n\t\twhile (num > 0)\n\t\t{\n\t\t\tint digit = (int)(num % 10);\n\t\t\tif\
    \ (digit % 2 == 0)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\
    num = num / 10;\n\t\t}\n\t\tif (flag == 0)\n\t\t{\n\t\t\ta[j] = x[i];\n\t\t\t\
    j++;\n\t\t}\n\t}\n\tlong[] r = new long[j];\n\ti = 0;\n\tfor (;i < j; i++)\n\t\
    {\n\t\tr[i] = a[i];\n\t}\n\tsort(r);\n\treturn r;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsh5jbhhq.d(28): Error: C style cast illegal, use cast(int)(num
    % 10)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsh5jbhhq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   immutable S = \"0123456789\";\n    int[] evens = [2,4,6,8,0];\n    long[]\
    \ ret;\n    foreach(e; x)\n    {\n        string s = to!string(e);\n        bool\
    \ allOdd = true;\n        foreach(c; s)\n        {\n            if(c in evens)\n\
    \            {\n                allOdd = false;\n                break;\n    \
    \        }\n        }\n        if(allOdd) ret ~= e;\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr99urwjj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int len = x.length;\n    long[] result = new long[len];\n    int count = 0;\n\
    \    for (int i = 0; i < len; i++)\n    {\n        bool tmp = true;\n        while\
    \ (x[i] > 0)\n        {\n            int r = x[i] % 10;\n            if (r % 2\
    \ == 0)\n            {\n                tmp = false;\n                break;\n\
    \            }\n            x[i] /= 10;\n        }\n        if (tmp)\n       \
    \ {\n            result[count] = x[i];\n            count++;\n        }\n    }\n\
    \    long[] res = new long[count];\n    for (int i = 0; i < count; i++)\n    {\n\
    \        res[i] = result[i];\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplotp2t9u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long num; x)\n    {\n        string\
    \ str = num.to!string;\n        bool ok = true;\n        foreach(c; str)\n   \
    \     {\n            if(c.to!int % 2 == 0)\n            {\n                ok\
    \ = false;\n                break;\n            }\n        }\n        if(ok)\n\
    \        {\n            result ~= num;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjc8nz9rh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   //Write code here\n    auto res = new long[0];\n    foreach(e; x) {\n    \
    \    if(all!(c => cast(ulong)(c - '0') % 2)) {\n            res ~= e;\n      \
    \  }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr8xye5g6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    bool ok;\n    foreach(long a; x)\n    {\n        ok = true;\n\
    \        foreach(long b; to!string(a))\n        {\n            if (b % 2 == 0)\n\
    \            {\n                ok = false;\n                break;\n        \
    \    }\n        }\n        if (ok)\n            res ~= a;\n    }\n    res.sort();\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3ucl61v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   vector<long> temp;\n    vector<long> res;\n    for(auto item : x)\n    {\n\
    \        temp.push_back(item);\n    }\n    for(int i = 0; i < temp.length; i++)\n\
    \    {\n        if(temp[i] == 0) continue;\n        bool flag = true;\n      \
    \  while(temp[i] > 0)\n        {\n            if(temp[i] % 2 == 0)\n         \
    \   {\n                flag = false;\n                break;\n            }\n\
    \            temp[i] /= 10;\n        }\n        if(flag) res.push_back(x[i]);\n\
    \    }\n    res.sort;\n    return res.array;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp5y8tldq.d(17): Error: found \''>\'' when expecting \''.\''
    following long\n/tmp/tmpp5y8tldq.d(18): Error: found \''>\'' when expecting \''.\''
    following long\n/tmp/tmpp5y8tldq.d(19): Error: no identifier for declarator item\n/tmp/tmpp5y8tldq.d(19):
    Error: expression expected, not \'':\''\n/tmp/tmpp5y8tldq.d(19): Error: found
    \''x\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpp5y8tldq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \ long[] y = new long[0];\n  for (int i = 0; i < x.length; i++) {\n    int temp\
    \ = x[i];\n    bool noEven = true;\n    for (int j = 0; j < 6; j++) {\n      if\
    \ (temp % 2 == 0) noEven = false;\n      temp /= 10;\n    }\n    if (noEven) {\n\
    \      y ~= x[i];\n    }\n  }\n  sort(y);\n  return y;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvt6z0k04.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] temp;\n    for(int i = 0; i < x.length; i++)\n    {\n        temp[i]\
    \ = x[i];\n    }\n    for(int i = 0; i < x.length; i++)\n    {\n        temp[i]\
    \ = temp[i]/10;\n        if(temp[i] == 0)\n        {\n            continue;\n\
    \        }\n        else if(temp[i]%2 == 0)\n        {\n            temp[i] =\
    \ 0;\n        }\n    }\n    sort(temp);\n    return temp;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzsgfikc7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] even_index = [0];\n    for (int i = 0; i < x.length; i++)\n    {\n\
    \        if (x[i] % 2 == 0)\n        {\n            even_index ~= i;\n       \
    \ }\n    }\n    return x[0..even_index[0]];\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp14ao4jic.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.filter!(a => !a.toString().contains('2') && !a.toString().contains('4')\
    \ && !a.toString().contains('6') && !a.toString().contains('8')).sort();\n}\n\
    \ \n/*\n    Imperative solution:\n    long[] unique_digits(long[] x) \n    {\n\
    \        import std.algorithm;\n        import std.array;\n        import std.range;\n\
    \        auto it = x.filter!(a => !a.toString().contains('2') && !a.toString().contains('4')\
    \ && !a.toString().contains('6') && !a.toString().contains('8')).sort().frontToBack;\n\
    \        long[] array = new long[it.length];\n        int i = 0;\n        foreach(num;\
    \ it) {\n            array[i] = num;\n            i++;\n        }\n        return\
    \ array;\n    }\n*/\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5l054m8_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   List!(long) y = new List!(long);\n    int i = 0;\n    while (i < x.length)\
    \ {\n        if (!containsEvenDigit(x[i])) {\n            y.insert(x[i]);\n  \
    \      }\n        i++;\n    }\n    y.sort();\n    return y.toArray();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgsum_3u1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.filter!(n => n.toString().count!(e => cast(int)e % 2 == 0) == 0).sort;\n\
    }\n \n/*\n    This function finds pair(s) of numbers from the array such that\
    \ their \n    sum is equal to the input number.\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgdmol3qz.d(20): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpgdmol3qz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n\t\
    auto unique = long[x.length];\n\tauto uniqueIndex = 0;\n\tforeach(element; x)\n\
    \t{\n\t\tif (std.algorithm.find(element.digits(), d => d%2 == 0) == null)\n\t\t\
    {\n\t\t\tunique[uniqueIndex] = element;\n\t\t\tuniqueIndex++;\n\t\t}\n\t}\n\t\
    return unique[0..uniqueIndex];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc69nvhs3.d(17): Error: found \''[\'' when expecting \''.\''
    following long\n/tmp/tmpc69nvhs3.d(17): Error: semicolon expected following auto
    declaration, not \'']\''\n/tmp/tmpc69nvhs3.d(17): Error: found \'']\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc69nvhs3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    return x.filter!(n => !n.toString.canFind(\"[02468]\")).sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7stq5q_n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    long[] res = new long[n];\n    int k = 0;\n    for\
    \ (int i = 0; i < n; i++)\n    {\n        int digit = 0;\n        long num = x[i];\n\
    \        while (num != 0)\n        {\n            digit = cast(int)(num % 10);\n\
    \            if (digit % 2 == 0)\n                break;\n            num /= 10;\n\
    \        }\n        if (num == 0)\n            res[k++] = x[i];\n    }\n    return\
    \ res[0..k];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzhz251re.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto array = new long[0];\n    foreach(l; x)\n    {\n        long temp = l;\n\
    \        while(temp != 0)\n        {\n            auto digit = temp % 10;\n  \
    \          if(digit % 2 == 0)\n            {\n                break;\n       \
    \     }\n            temp /= 10;\n        }\n        if(temp == 0)\n        {\n\
    \            array ~= l;\n        }\n    }\n    std.algorithm.sort(array);\n \
    \   return array;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uahb63n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(i; x)\n    {\n        auto number = i;\n  \
    \      bool hasEven = false;\n        while(number > 0)\n        {\n         \
    \   if(number % 2 == 0)\n            {\n                hasEven = true;\n    \
    \            break;\n            }\n            number /= 10;\n        }\n   \
    \     if(!hasEven)\n        {\n            result ~= i;\n        }\n    }\n  \
    \  return sort(result);\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwdzazzen.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    if (x.length > 0)\n    {\n        int n = 0;\n        for (long i : x)\n\
    \        {\n            if (((i / 10) == 0) ||\n                (((i / 10) % 10)\
    \ != 0 && ((i / 10) % 10) % 2 != 0 &&\n                 ((i / 100) % 10) != 0\
    \ && ((i / 100) % 10) % 2 != 0 &&\n                 ((i / 1000) % 10) != 0 &&\
    \ ((i / 1000) % 10) % 2 != 0 &&\n                 ((i / 10000) % 10) != 0 && ((i\
    \ / 10000) % 10) % 2 != 0 &&\n                 ((i / 100000) % 10) != 0 && ((i\
    \ / 100000) % 10) % 2 != 0 &&\n                 ((i / 1000000) % 10) != 0 && ((i\
    \ / 1000000) % 10) % 2 != 0 &&\n                 ((i / 10000000) % 10) != 0 &&\
    \ ((i / 10000000) % 10) % 2 != 0 &&\n                 ((i / 100000000) % 10) !=\
    \ 0 && ((i / 100000000) % 10) % 2 != 0 &&\n                 ((i / 1000000000)\
    \ % 10) != 0 && ((i / 1000000000) % 10) % 2 != 0 &&\n                 ((i / 10000000000)\
    \ % 10) != 0 && ((i / 10000000000) % 10) % 2 != 0 &&\n                 ((i / 100000000000)\
    \ % 10) != 0 && ((i / 100000000000) % 10) % 2 != 0 &&\n                 ((i /\
    \ 1000000000000) % 10) != 0 && ((i / 1000000000000) % 10) % 2 != 0 &&\n      \
    \           ((i / 10000000000000) % 10) != 0 && ((i / 10000000000000) % 10) %\
    \ 2 != 0 &&\n                 ((i / 100000000000000) % 10) != 0 && ((i / 100000000000000)\
    \ % 10) % 2 != 0 &&\n                 ((i / 1000000000000000) % 10) != 0 && ((i\
    \ / 1000000000000000) % 10) % 2 != 0 &&\n                 ((i / 10000000000000000)\
    \ % 10) != 0 && ((i / 10000000000000000) % 10) % 2 != 0 &&\n                 ((i\
    \ / 100000000000000000) % 10\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbxst285i.d(20): Error: semicolon expected, not \'':\''\n/tmp/tmpbxst285i.d(20):
    Error: expression expected, not \'':\''\n/tmp/tmpbxst285i.d(20): Error: found
    \''x\'' when expecting \'';\'' following for condition\n/tmp/tmpbxst285i.d(39):
    Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmpbxst285i.d(23): Error:
    found \''{\'' when expecting \'')\''\n/tmp/tmpbxst285i.d(42): Error: found \''alias\''
    when expecting \'')\''\n/tmp/tmpbxst285i.d(49): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\n/tmp/tmpbxst285i.d(49): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpbxst285i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto evenDigits = [](long _x)\n    {\n        auto even = false;\n       \
    \ foreach(i; 0 .. numDigits(_x))\n        {\n            auto d = _x % 10;\n \
    \           if (d % 2 == 0)\n            {\n                even = true;\n   \
    \             break;\n            }\n            _x /= 10;\n        }\n      \
    \  return even;\n    };\n    auto y = filter!evenDigits(x);\n    return y.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsv2f08lb.d(17): Error: found \''_x\'' when expecting \''.\''
    following long\n/tmp/tmpsv2f08lb.d(17): Error: found \'')\'' when expecting identifier
    following \''long.\''\n/tmp/tmpsv2f08lb.d(18): Error: found \''{\'' when expecting
    \'',\''\n/tmp/tmpsv2f08lb.d(19): Error: expression expected, not \''auto\''\n/tmp/tmpsv2f08lb.d(19):
    Error: found \''even\'' when expecting \'',\''\n/tmp/tmpsv2f08lb.d(19): Error:
    expression expected, not \''=\''\n/tmp/tmpsv2f08lb.d(19): Error: found \''false\''
    when expecting \'',\''\n/tmp/tmpsv2f08lb.d(19): Error: expression expected, not
    \'';\''\n/tmp/tmpsv2f08lb.d(20): Error: found \''foreach\'' when expecting \'',\''\n/tmp/tmpsv2f08lb.d(20):
    Error: found \'';\'' when expecting \'')\''\n/tmp/tmpsv2f08lb.d(20): Error: found
    \''0\'' when expecting \'',\''\n/tmp/tmpsv2f08lb.d(20): Error: expression expected,
    not \''..\''\n/tmp/tmpsv2f08lb.d(20): Error: found \''numDigits\'' when expecting
    \'',\''\n/tmp/tmpsv2f08lb.d(21): Error: semicolon expected following auto declaration,
    not \''{\''\n/tmp/tmpsv2f08lb.d(33): Error: Declaration expected, not \''return\''\n/tmp/tmpsv2f08lb.d(34):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsv2f08lb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int cnt = 0;\n    long[] temp = new long[x.length];\n    foreach(n; x)\n \
    \   {\n        if(!hasEvenDigit(n))\n        {\n            temp[cnt] = n;\n \
    \           cnt++;\n        }\n    }\n    long[] res = new long[cnt];\n    memcpy(res.ptr,\
    \ temp.ptr, cnt*sizeof(long));\n    sort(res);\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprjvzz8t6.d(28): Error: found \'')\'' when expecting \''.\''
    following long\n/tmp/tmprjvzz8t6.d(28): Error: found \'')\'' when expecting identifier
    following \''long.\''\n/tmp/tmprjvzz8t6.d(28): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmprjvzz8t6.d(29): Error: found \'';\'' when expecting \'',\''\n/tmp/tmprjvzz8t6.d(30):
    Error: expression expected, not \''return\''\n/tmp/tmprjvzz8t6.d(30): Error: found
    \''res\'' when expecting \'',\''\n/tmp/tmprjvzz8t6.d(30): Error: expression expected,
    not \'';\''\n/tmp/tmprjvzz8t6.d(31): Error: found \''}\'' when expecting \'',\''\n/tmp/tmprjvzz8t6.d(32):
    Error: expression expected, not \''unittest\''\n/tmp/tmprjvzz8t6.d(33): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmprjvzz8t6.d(34): Error: expression
    expected, not \''alias\''\n/tmp/tmprjvzz8t6.d(34): Error: found \''candidate\''
    when expecting \'',\''\n/tmp/tmprjvzz8t6.d(34): Error: expression expected, not
    \''=\''\n/tmp/tmprjvzz8t6.d(34): Error: found \''unique_digits\'' when expecting
    \'',\''\n/tmp/tmprjvzz8t6.d(34): Error: expression expected, not \'';\''\n/tmp/tmprjvzz8t6.d(36):
    Error: found \''assert\'' when expecting \'',\''\n/tmp/tmprjvzz8t6.d(36): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmprjvzz8t6.d(37): Error: found \'';\''
    when expecting \'',\''\n/tmp/tmprjvzz8t6.d(38): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmprjvzz8t6.d(39): Error: found \'';\'' when expecting \'',\''\n/tmp/tmprjvzz8t6.d(40):
    Error: expression expected, not \''}\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprjvzz8t6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   size_t i = 0;\n    for (; i < x.length; i++)\n    {\n        size_t j = 0;\n\
    \        for (; j < to!string(x[i]).length; j++)\n        {\n            if (to!string(x[i])[j]\
    \ % 2 == 0)\n            {\n                break;\n            }\n        }\n\
    \        if (j != to!string(x[i]).length)\n        {\n            x[i] = 0;\n\
    \        }\n    }\n    long[] y = x.dup;\n    std.algorithm.remove(y, 0);\n  \
    \  return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmj3n8ky5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i;\n    int len = x.length;\n    long[] y = new long[len];\n    int j\
    \ = 0;\n    for (i = 0; i < len; i++) {\n        if (!hasEvenDigit(x[i])) {\n\
    \            y[j] = x[i];\n            j++;\n        }\n    }\n    long[] z =\
    \ new long[j];\n    for (i = 0; i < j; i++) {\n        z[i] = y[i];\n    }\n \
    \   std.sort(z);\n    return z;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyu0vzvgn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] arr;\n    foreach(long i; x)\n    {\n        if (i%2==0)\n        {\n\
    \            x.length=0;\n        }\n        else\n        {\n            arr\
    \ = x;\n        }\n    }\n    sort(arr);\n    return arr;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy4qer3gy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(value; x)\n    {\n        int isEvenDigit =\
    \ 0;\n        for(long i = 0; i < value.length; i++)\n        {\n            if(value[i]\
    \ % 2 == 0)\n            {\n                isEvenDigit = 1;\n               \
    \ break;\n            }\n        }\n        if(isEvenDigit == 0)\n        {\n\
    \            result ~= value;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4qyt85v_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    if (x.length == 0)\n        return x;\n    int evens = 0;\n    foreach (value;\
    \ x) {\n        foreach (digit; to!string(value)) {\n            if (digit % 2\
    \ == 0) {\n                evens++;\n                break;\n            }\n \
    \       }\n    }\n    auto even = new long[evens];\n    auto no_even = new long[x.length\
    \ - evens];\n    int i = 0;\n    int j = 0;\n    foreach (value; x) {\n      \
    \  foreach (digit; to!string(value)) {\n            if (digit % 2 == 0) {\n  \
    \              even[i] = value;\n                i++;\n                break;\n\
    \            }\n        }\n        if (i == evens)\n            break;\n    }\n\
    \    foreach (value; x) {\n        foreach (digit; to!string(value)) {\n     \
    \       if (digit % 2 == 0) {\n                break;\n            }\n       \
    \ }\n        if (digit % 2 != 0) {\n            no_even[j] = value;\n        \
    \    j++;\n        }\n    }\n    return no_even;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppx_h53y4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    int sz = x.length;\n    long[] ans = new long[sz];\n    int idx = 0;\n  \
    \  for (int i = 0; i < sz; i++) {\n        if (x[i] % 2 != 0)\n            ans[idx++]\
    \ = x[i];\n    }\n    ans = ans[0..idx];\n    ans.sort();\n    return ans;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvnnqk1ab.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int ele;\n    int n = x.length;\n    long[] y = new long[n];\n    int i =\
    \ 0;\n    for (int j = 0; j < n; j++)\n    {\n        ele = to!int(x[j]);\n  \
    \      if (ele % 2 != 0)\n        {\n            y[i] = x[j];\n            i++;\n\
    \        }\n    }\n    y = y[0..i];\n    sort(y);\n    return y;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp0mqnsdj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j, even = 0;\n    long[] array = new long[x.length];\n    for (i =\
    \ 0; i < x.length; i++)\n    {\n        long tmp = x[i];\n        while (tmp !=\
    \ 0)\n        {\n            j = to!int(tmp % 10);\n            if (j % 2 == 0)\n\
    \            {\n                even = 1;\n                break;\n          \
    \  }\n            tmp /= 10;\n        }\n        if (even == 0)\n            array\
    \ ~= x[i];\n        even = 0;\n    }\n    array.sort;\n    return array;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2j4xriuu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.filter!((a) => !(a.toString().split(\"\").filter!((c) => c == \"\
    2\" || c == \"4\" || c == \"6\" || c == \"8\").length)).array;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmjmbbnca.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y;\n    foreach(l; x) \n    {\n        if(find(iota(l + 1), (n) =>\
    \ l % n == 0 && n % 2 == 0) == -1) \n        {\n            y ~= l;\n        }\n\
    \    }\n    return y.sort;\n}\n/*\n    Alternative Solution:\n    Took the minimum\
    \ number, and then found the largest number that is\n    divisible by it and has\
    \ no even divisors.\n    a -> [100, 31, 26, 10, 1, 15]\n    x -> [100, 31, 26,\
    \ 10, 1, 15]\n    x.sort -> [1, 10, 15, 26, 31, 100]\n    x[0] -> 1\n    minnum\
    \ -> 1\n    l -> 1\n    largest_number -> 15\n    y -> [1, 15]\n    Then, remove\
    \ the numbers that are less than or equal to the largest\n    number divisible\
    \ by the minimum number.\n    a -> [100, 31, 26, 10, 15]\n    x -> [100, 31, 26,\
    \ 10, 15]\n    x.sort -> [10, 15, 26, 31, 100]\n    x[0] -> 10\n    minnum ->\
    \ 10\n    l -> 10\n    largest_number -> 26\n    y -> [1, 15, 26]\n    Then, remove\
    \ the numbers that are less than or equal to the largest\n    number divisible\
    \ by the minimum number.\n    a -> [100, 31, 26, 15]\n    x -> [100, 31, 26, 15]\n\
    \    x.sort -> [15, 26, 31, 100]\n    x[0] -> 15\n    minnum -> 15\n    l -> 15\n\
    \    largest_number -> 26\n    y -> [1, 15, 26, 26]\n    Then, remove the numbers\
    \ that are less than or equal to the largest\n    number divisible by the minimum\
    \ number.\n    a -> [100, 31, 26]\n    x -> [100, 31, 26]\n    x.sort -> [26,\
    \ 31, 100]\n    x[0] -> 26\n    minnum -> 26\n    l -> 26\n    largest_number\
    \ -> 31\n    y ->\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprew3hf4s.d(27): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmprew3hf4s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int count = 0;\n    long[] a=new long[x.length];\n    for(int i=0;i<x.length;i++)\n\
    \    {\n        if(x[i]==0)\n        {\n            a[count]=x[i];\n         \
    \   count++;\n        }\n        while(x[i]!=0)\n        {\n            int n\
    \ = int(x[i]%10);\n            if(n%2==0)\n            {\n                break;\n\
    \            }\n            else\n            {\n                x[i] = int(x[i]/10);\n\
    \                if(x[i]==0)\n                {\n                    a[count]=x[i];\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    int[] b=new int[count];\n    for(int i=0;i<count;i++)\n    {\n    \
    \    b[i]=int(a[i]);\n    }\n    return b;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgrw6ifn3.d(28): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpgrw6ifn3.d(28): Error: semicolon expected, not \'')\''\n/tmp/tmpgrw6ifn3.d(28):
    Error: found \'')\'' instead of statement\n/tmp/tmpgrw6ifn3.d(35): Error: found
    \''(\'' when expecting \''.\'' following int\n/tmp/tmpgrw6ifn3.d(35): Error: found
    \'')\'' when expecting \'';\'' following statement\n/tmp/tmpgrw6ifn3.d(47): Error:
    found \''(\'' when expecting \''.\'' following int\n/tmp/tmpgrw6ifn3.d(47): Error:
    found \'')\'' when expecting \'';\'' following statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpgrw6ifn3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.filter!((e) => !e.toString().any!((e) => e.toString().length == 2)).sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhv5grls.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n\t\
    long[] a = new long[0];\n\tforeach(long i; x) {\n\t\tbool b = true;\n\t\tforeach(inout\
    \ char j; cast(char[])i) {\n\t\t\tif(j.isDigit() && j % 2 == 0) b = false;\n\t\
    \t}\n\t\tif(b) a ~= i;\n\t}\n\tsort(a);\n\treturn a;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkrs3fba3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y = new long[x.length];\n    int j = 0;\n    for (int i = 0; i < x.length;\
    \ i++)\n    {\n        if (x[i] < 10)\n        {\n            y[j] = x[i];\n \
    \           j++;\n        }\n        else if (x[i] < 100)\n        {\n       \
    \     if (x[i] % 2 != 0)\n            {\n                y[j] = x[i];\n      \
    \          j++;\n            }\n        }\n        else if (x[i] < 1000)\n   \
    \     {\n            if (x[i] % 2 != 0 && (x[i] / 10) % 2 != 0)\n            {\n\
    \                y[j] = x[i];\n                j++;\n            }\n        }\n\
    \        else if (x[i] < 10000)\n        {\n            if (x[i] % 2 != 0 && (x[i]\
    \ / 10) % 2 != 0 && (x[i] / 100) % 2 != 0)\n            {\n                y[j]\
    \ = x[i];\n                j++;\n            }\n        }\n        else if (x[i]\
    \ < 100000)\n        {\n            if (x[i] % 2 != 0 && (x[i] / 10) % 2 != 0\
    \ && (x[i] / 100) % 2 != 0 && (x[i] / 1000) % 2 != 0)\n            {\n       \
    \         y[j] = x[i];\n                j++;\n            }\n        }\n     \
    \   else if (x[i] < 1000000)\n        {\n            if (x[i] % 2 != 0 && (x[i]\
    \ / 10) % 2 != 0 && (x[i] / 100) % 2 != 0 && (x[i] / 1000) % 2 != 0 && (x[i] /\
    \ 10000) % 2 != 0)\n            {\n                y[j] = x[i];\n            \
    \    j++;\n            }\n        }\n        else if (x[i] < 10000000)\n     \
    \   {\n            if (x[i] % 2 != 0 && (x[i] / 10) % 2 != 0 && (x[i\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvboqdj4n.d(69): Error: found \''unittest\'' when expecting \'']\''\n/tmp/tmpvboqdj4n.d(68):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpvboqdj4n.d(71): Error: found
    \''alias\'' when expecting \'')\''\n/tmp/tmpvboqdj4n.d(78): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpvboqdj4n.d(78): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpvboqdj4n.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    if (n == 0)\n        return new long[0];\n    if (n\
    \ == 1)\n        return [x[0]];\n    long[] sort(long[] y) \n    {\n        if\
    \ (y.length <= 1)\n            return y;\n        int half = y.length / 2;\n \
    \       long[] left = y[0 .. half];\n        long[] right = y[half .. $];\n  \
    \      left = sort(left);\n        right = sort(right);\n        long[] result\
    \ = new long[y.length];\n        int i = 0, j = 0, k = 0;\n        while (i <\
    \ left.length && j < right.length) \n        {\n            if (left[i] < right[j])\
    \ \n            {\n                result[k] = left[i];\n                i++;\n\
    \            }\n            else \n            {\n                result[k] =\
    \ right[j];\n                j++;\n            }\n            k++;\n        }\n\
    \        if (i < left.length) \n        {\n            for (; i < left.length;\
    \ i++) \n            {\n                result[k] = left[i];\n               \
    \ k++;\n            }\n        }\n        else \n        {\n            for (;\
    \ j < right.length; j++) \n            {\n                result[k] = right[j];\n\
    \                k++;\n            }\n        }\n        return result;\n    }\n\
    \    long[] a = new long[n];\n    long[] b = new long[n];\n    int count = 0;\n\
    \    for (int i = 0; i < n; i++) \n    {\n        if (x[i] < 0)\n            a[i]\
    \ = -x[i];\n        else\n            a[i] = x[i];\n        if (a[i] < 10)\n \
    \           b[count++] = x[i];\n        else if (a[i] < 100) \n        {\n   \
    \         if (a[i] % 10 != 0)\n                b[count++] = x[i];\n        }\n\
    \        else if (a[i] < 1000) \n        {\nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpth46l03k.d(83): Error: found \''unittest\'' instead of statement\n/tmp/tmpth46l03k.d(92):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpth46l03k.d(92):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpth46l03k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   /*\n    // get the length of the array x\n    int len = x.length;\n    //\
    \ create an array to store the array with unique digits\n    int[] unique = new\
    \ int[len];\n    // iterate through the array x\n    for (int i = 0; i < len;\
    \ i++)\n    {\n        // get the current value at x[i]\n        int val = x[i];\n\
    \        // create a string to store the value as a string\n        string valStr\
    \ = to!string(val);\n        // get the length of the string\n        int lenStr\
    \ = valStr.length;\n        // create a bool to store if the digit is unique or\
    \ not\n        bool uniqueDigit = true;\n        // iterate through the string\
    \ to see if there are any even digits\n        for (int j = 0; j < lenStr; j++)\n\
    \        {\n            // create a char to store the current char in the string\n\
    \            char digit = valStr[j];\n            // create an int to store the\
    \ int value of the digit char\n            int digitInt = cast(int)digit;\n  \
    \          // create a bool to check if the digit is even\n            bool even\
    \ = digitInt % 2 == 0;\n            // check if the digit is even\n          \
    \  if (even)\n            {\n                // set uniqueDigit to false since\
    \ the digit is even\n                uniqueDigit = false;\n                //\
    \ break out of the loop, since there is no need to continue\n                break;\n\
    \            }\n        }\n        // check if the digit is unique\n        if\
    \ (uniqueDigit)\n        {\n            // set the current index to the digit\n\
    \            unique[i] = val;\n        }\n    }\n    // create an array that will\
    \ only have values that were unique\n    int[] uniqueOnly = unique.dup;\n    //\
    \ sort the unique array\n    uniqueOnly.sort;\n    // return the array\n    return\
    \ uniqueOnly;\n    */\n    // create a string to store the even digits\n    string\
    \ evenDigits = \"02468\";\n    // get the length of the array x\n    int len =\
    \ x.length;\n    // create an array to store the array with unique digits\n  \
    \  long[] unique = new long[len];\n    // iterate\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjb8110ka.d(72): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjb8110ka.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int temp, sum = 0;\n    List<long> lst = new List<long>();\n    for (int i\
    \ = 0; i < x.length; i++)\n    {\n        temp = x[i];\n        while (temp >\
    \ 0)\n        {\n            if (temp % 2 == 0)\n            {\n             \
    \   sum++;\n                break;\n            }\n            temp /= 10;\n \
    \       }\n        if (sum == 0)\n            lst.add(x[i]);\n        sum = 0;\n\
    \    }\n    lst.sort();\n    return lst.toArray();\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpefmxh13f.d(18): Error: found \''>\'' when expecting \''.\''
    following long\n/tmp/tmpefmxh13f.d(18): Error: found \''>\'' when expecting \''.\''
    following long\n/tmp/tmpefmxh13f.d(18): Error: found \''(\'' when expecting identifier
    following \''long.\''\n/tmp/tmpefmxh13f.d(18): Error: found \'')\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefmxh13f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   // O(n*m)\n    int len = x.length;\n    long[] results = new long[len];\n\
    \    int pos = 0;\n    int i = 0;\n    while (i < len) {\n        int temp = cast(int)x[i];\n\
    \        bool has_even = false;\n        while (temp > 0) {\n            if (temp\
    \ % 2 == 0) {\n                has_even = true;\n                break;\n    \
    \        }\n            temp /= 10;\n        }\n        if (!has_even) {\n   \
    \         results[pos] = x[i];\n            pos++;\n        }\n        i++;\n\
    \    }\n    long[] final_results = new long[pos];\n    for (int j = 0; j < pos;\
    \ j++) {\n        final_results[j] = results[j];\n    }\n    sort(final_results);\n\
    \    return final_results;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnwu2jd75.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n\t\
    int[] temp = [1,3,5,7,9];\n\tint i, j, num_dig, index;\n\tlong num;\n\tbool found;\n\
    \tint[] result;\n\t\n\tforeach(int k; temp)\n\t{\n\t\twritefln(\"%s\",k);\n\t\
    }\n\t\n\ti = 0;\n\twhile(i < x.length)\n\t{\n\t\tnum = x[i];\n\t\tfound = false;\n\
    \t\tj = 0;\n\t\twhile(j < temp.length)\n\t\t{\n\t\t\tnum_dig = num % 10;\n\t\t\
    \tif(num_dig == temp[j])\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t\tj++;\n\t\t}\n\t\tif(found == false)\n\t\t{\n\t\t\tresult ~= x[i];\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkgg6qp1d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int ind = 0;\n    long[] a = new long[x.length];\n    foreach(num; x)\n  \
    \  {\n        if(num % 2 == 1)\n        {\n            a[ind] = num;\n       \
    \     ind++;\n        }\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1a__o5q1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \ bool has_even = false;\n  long even_check;\n  bool only_unique = true;\n  long\
    \ holder;\n  long[] answer;\n  int even_size = 0;\n  int unique_size = 0;\n  foreach(long\
    \ value; x)\n  {\n    even_check = value;\n    has_even = false;\n    only_unique\
    \ = true;\n    while(even_check != 0)\n    {\n      holder = even_check % 10;\n\
    \      if(holder % 2 == 0)\n      {\n        has_even = true;\n        break;\n\
    \      }\n      even_check /= 10;\n    }\n    if(has_even == false)\n    {\n \
    \     answer ~= value;\n      even_size++;\n    }\n  }\n  foreach(long num; answer)\n\
    \  {\n    holder = num;\n    only_unique = true;\n    while(holder != 0)\n   \
    \ {\n      if(holder % 10 == 0)\n      {\n        only_unique = false;\n     \
    \   break;\n      }\n      holder /= 10;\n    }\n    if(only_unique == true)\n\
    \    {\n      answer ~= num;\n      unique_size++;\n    }\n  }\n  sort(answer);\n\
    \  return answer;\n}\n/*\nGiven an array of non-negative integers x. return a\
    \ sorted array of unique\n    integers in sorted order. \nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy4tip3v2.d(67): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpy4tip3v2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] l = to!(long[])(x);\n    l = l.filter!(a => !a.to!string.any!(b =>\
    \ '02468'.any!(c => b==c)))();\n    l.sort();\n    return l;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt_q8kats.d(18): Error: unterminated character constant\n/tmp/tmpt_q8kats.d(18):
    Error: found \''2468\'' when expecting \'')\'' following template argument list\n/tmp/tmpt_q8kats.d(18):
    Error: unterminated character constant\n/tmp/tmpt_q8kats.d(18): Error: found \''46U\''
    when expecting \'')\'' following template argument list\n/tmp/tmpt_q8kats.d(18):
    Error: found \''any\'' when expecting \'';\'' following statement\n/tmp/tmpt_q8kats.d(18):
    Error: found \'')\'' when expecting \'';\'' following statement\n/tmp/tmpt_q8kats.d(18):
    Error: found \'')\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpt_q8kats.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n\t\
    long[] unique = new long[x.length];\n\tint count = 0;\n\tforeach(long n; x)\n\t\
    {\n\t\tif (n % 2 == 1)\n\t\t{\n\t\t\tunique[count] = n;\n\t\t\tcount++;\n\t\t\
    }\n\t}\n\treturn unique[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfyj3p7pv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto odd = {\n        \"1\", \"3\", \"5\", \"7\", \"9\"\n    };\n    long[]\
    \ uniqueNumbers;\n    for (n in x)\n    {\n        if (count(filter!(a => n.to!string.canFind(a)\n\
    \            , odd)) == n.to!string.length)\n        {\n            uniqueNumbers\
    \ ~= n;\n        }\n    }\n    return uniqueNumbers.sort();\n}\n//Example\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnwtlfuky.d(21): Error: found \'')\'' when expecting \'';\''
    following statement\n/tmp/tmpnwtlfuky.d(29): Error: found \''return\'' when expecting
    \'';\'' following for condition\n/tmp/tmpnwtlfuky.d(29): Error: found \'';\''
    when expecting \'')\''\n/tmp/tmpnwtlfuky.d(30): Error: found \''}\'' instead of
    statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnwtlfuky.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    bool flag;\n    int count=0;\n    foreach(l; x)\n    {\n\
    \        flag=true;\n        while(l!=0)\n        {\n            if(l%2==0)\n\
    \            {\n                flag=false;\n                break;\n        \
    \    }\n            l/=10;\n        }\n        if(flag)\n            count++;\n\
    \    }\n    result=new long[count];\n    count=0;\n    foreach(l; x)\n    {\n\
    \        flag=true;\n        while(l!=0)\n        {\n            if(l%2==0)\n\
    \            {\n                flag=false;\n                break;\n        \
    \    }\n            l/=10;\n        }\n        if(flag)\n            result[count++]=l;\n\
    \    }\n    std.sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2q1sdfiu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int len = x.length;\n    int L_index = 0;\n    bool flag = true;\n    long[]\
    \ L = new long[len];\n    for (int i = 0; i < len; i++)\n    {\n        while\
    \ (x[i] != 0)\n        {\n            if (x[i] % 2 == 0)\n            {\n    \
    \            flag = false;\n                break;\n            }\n          \
    \  x[i] /= 10;\n        }\n        if (flag)\n        {\n            L[L_index]\
    \ = x[i];\n            L_index++;\n        }\n        flag = true;\n    }\n  \
    \  long[] answer = new long[L_index];\n    for (int i = 0; i < L_index; i++)\n\
    \    {\n        answer[i] = L[i];\n    }\n    return answer;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdqvmjbk2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto contains_even = true;\n    for (auto i : x)\n    {\n        contains_even\
    \ = false;\n        for (; i > 0; i /= 10)\n        {\n            if ((i % 10)\
    \ % 2 == 0)\n            {\n                contains_even = true;\n          \
    \      break;\n            }\n        }\n        if (!contains_even)\n       \
    \ {\n            x[x.length] = i;\n        }\n    }\n    sort(x);\n    return\
    \ x;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdj09w3pv.d(18): Error: no identifier for declarator i\n/tmp/tmpdj09w3pv.d(18):
    Error: expression expected, not \'':\''\n/tmp/tmpdj09w3pv.d(18): Error: found
    \''x\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpdj09w3pv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   // Write your code here\n    long[] y;\n    int count;\n    long i, j, k;\n\
    \    foreach(i; x)\n    {\n        j = i;\n        count = 0;\n        while(j\
    \ > 0)\n        {\n            k = j % 10;\n            if (k % 2 == 0) count++;\n\
    \            j = j / 10;\n        }\n        if (count == 0)\n        {\n    \
    \        y ~= i;\n        }\n    }\n    y.sort;\n    return y;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2mwnib5n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   //replace the next line with your code\n    int i,j,count=0;\n    long digit;\n\
    \    int[] digits=new int[100];\n    long[] ans=new long[100];\n    int k=0;\n\
    \    foreach(var a;x)\n    {\n        i=0;\n        j=0;\n        int flag=0;\n\
    \        while(a>0)\n        {\n            digit=a%10;\n            digits[i]=cast(int)digit;\n\
    \            a=a/10;\n            i++;\n        }\n        while(j<i)\n      \
    \  {\n            if(digits[j]%2==0)\n            {\n                flag=1;\n\
    \                break;\n            }\n            j++;\n        }\n        if(flag==0)\n\
    \        {\n            ans[k]=x[count];\n            k++;\n        }\n      \
    \  count++;\n    }\n    ans=ans[0..k];\n    return ans;\n}\n \nunittest\n{\n \
    \   alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkvd4nrhq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{ \n\
    \    long[] y = new long[0];\n    for(int i = 0; i < x.length; i++) {\n      \
    \  if (x[i] < 0)\n            continue;\n        if (!x[i].toString().contains(\"\
    2\") && !x[i].toString().contains(\"4\") && !x[i].toString().contains(\"6\") &&\
    \ !x[i].toString().contains(\"8\")) {\n            y ~= x[i];\n        }\n   \
    \ }\n    y.sort();\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpows9tutc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] unique_digits = [];\n    bool has_an_even_digit = false;\n    foreach(long\
    \ digit; x)\n    {\n        has_an_even_digit = false;\n        while(digit !=\
    \ 0)\n        {\n            long digit_to_check = digit % 10;\n            if(digit_to_check\
    \ % 2 == 0)\n            {\n                has_an_even_digit = true;\n      \
    \          break;\n            }\n            digit /= 10;\n        }\n      \
    \  if(!has_an_even_digit)\n        {\n            unique_digits ~= digit;\n  \
    \      }\n    }\n    return sort(unique_digits);\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa7mhg20t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto res = new long[];\n    foreach(val; x)\n    {\n        if(!hasEvenDigit(val))\n\
    \            res ~= val;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb05mifiv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   // Create a list to store the longs without even digits\n    List!(long) evenless\
    \ = new List!(long);\n    foreach(l; x)\n    {\n        // We take every long\
    \ and cast it to a string\n        string s = to!string(l);\n        ubyte even\
    \ = 1;\n        foreach(c; s)\n        {\n            // If we found an even char\
    \ in the string, we break\n            if((c == '0') || (c == '2') || (c == '4')\
    \ || (c == '6') || (c == '8'))\n            {\n                even = 0;\n   \
    \             break;\n            }\n        }\n        // If even is still 1,\
    \ that means that l is even-less\n        if(even == 1)\n        {\n         \
    \   evenless ~= l;\n        }\n    }\n    // We must sort the list\n    sort(evenless);\n\
    \    // And return it\n    return evenless.toArray();\n}\n/*\nWrite a function\
    \ that converts a given string into a hexidecimal string \n    that is space separated\
    \ and uppercase.\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvt1et21x.d(44): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpvt1et21x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n\t\
    // write your code here \n\t//return long[];\n\tlong[] result = [];\n\tforeach(long\
    \ elem; x)\n\t{\n\t\tstring check = to!string(elem);\n\t\tbool found = false;\n\
    \t\tforeach(char c; check)\n\t\t{\n\t\t\tif((c-'0')%2 == 0)\n\t\t\t{\n\t\t\t\t\
    found = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!found)\n\t\t\tresult ~=\
    \ elem;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpql32qoc6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
- exit_code: 1
  program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j, k;\n    long temp;\n    int p;\n    long[] a = new long[10];\n \
    \   int[] b = new int[x.length];\n    int[] c = new int[x.length];\n    long[]\
    \ d = new long[0];\n    if (x.length != 0)\n    {\n        for (i = 0; i < x.length;\
    \ i++)\n        {\n            p = 0;\n            for (j = 0; j < 10; j++)\n\
    \            {\n                a[j] = x[i] % 10;\n                x[i] = x[i]\
    \ / 10;\n            }\n            for (j = 0; j < 10; j++)\n            {\n\
    \                if (a[j] % 2 == 0)\n                {\n                    b[i]\
    \ = 1;\n                    break;\n                }\n            }\n       \
    \ }\n        for (i = 0; i < x.length; i++)\n        {\n            if (b[i] ==\
    \ 0)\n            {\n                p++;\n            }\n        }\n        if\
    \ (p != 0)\n        {\n            d = new long[p];\n            for (i = 0; i\
    \ < x.length; i++)\n            {\n                for (j = i + 1; j < x.length;\
    \ j++)\n                {\n                    if (x[i] > x[j])\n            \
    \        {\n                        temp = x[i];\n                        x[i]\
    \ = x[j];\n                        x[j] = temp;\n                    }\n     \
    \           }\n            }\n            k = 0;\n            for (i = 0; i <\
    \ x.length; i++)\n            {\n                if (b[i] == 0)\n            \
    \    {\n                    d[k] = x[i];\n                    k++;\n         \
    \       }\n            }\n        }\n    }\n    return d;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjyppo768.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977811
