name: HumanEval_92_any_int
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
  \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of\
  \ the other two, and all numbers are integers.\n    Returns false in any other cases.\n\
  \    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L,\
  \ 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6,\
  \ -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float\
  \ z) \n"
tests: "unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
  \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
  \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
  \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
  \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
  \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
completions: ["{\n    return ( is(typeof(x + y + z) == int) && \n            ( (x\
    \ + y == z) || \n              (x + z == y) || \n              (y + z == x) )\
    \ );\n}", "{\n    if (x == y+z || y == x+z || z == x+y) \n    {\n        return\
    \ true;\n    }\n    else \n    {\n        return false;\n    }\n}\n/*\n    Find\
    \ max and min values for a given array of integers.\n    Returns a tuple of two\
    \ values (max, min).\n    \n    Examples\n    >>> min_max([5L, 6L, 7L, 8L, 1L,\
    \ 0L])\n    tuple(8L, 0L)\n    \n    >>> min_max([-5L, 6L, 7L, 8L, 1L, 0L])\n\
    \    tuple(8L, -5L)\n    \n    >>> min_max([1L, 1L, 1L, 1L, 1L, 1L])\n    tuple(1L,\
    \ 1L)\n    \n    >>> min_max([])\n    tuple(0L, 0L)", "{\n    if (is(typeof(x)\
    \ == int) && is(typeof(y) == int) && is(typeof(z) == int))\n    {\n        if\
    \ (x + y == z || x + z == y || y + z == x)\n        {\n            return true;\n\
    \        }\n    }\n    return false;\n}", "{\n    if(x.isNaN || y.isNaN || z.isNaN\
    \ || x.isInfinity || y.isInfinity || z.isInfinity)\n    {\n        return false;\n\
    \    }\n    return (x == y + z || y == x + z || z == x + y);\n}", "{\n    if(is(typeof(x)\
    \ == int) && is(typeof(y) == int) && is(typeof(z) == int))\n    {\n        if(x\
    \ == y + z || x == y - z || x == z - y)\n        {\n            return true;\n\
    \        }\n        else if(y == x + z || y == x - z || y == z - x)\n        {\n\
    \            return true;\n        }\n        else if(z == x + y || z == x - y\
    \ || z == y - x)\n        {\n            return true;\n        }\n        else\n\
    \        {\n            return false;\n        }\n    }\n    else\n    {\n   \
    \     return false;\n    }\n}", "{\n    // return true if x + y == z or y + z\
    \ == x or x + z == y and all are integers\n    return is(typeof(x) == long) &&\
    \ is(typeof(y) == long) && is(typeof(z) == long)\n           && (x + y == z ||\
    \ y + z == x || x + z == y);\n}", "{\n    return (((int)x + (int)y == (int)z)\
    \ || ((int)x + (int)z == (int)y) || ((int)y + (int)z == (int)x)) && x.is_integer\
    \ && y.is_integer && z.is_integer;\n    \n}\n \n ", "{\n  \n  long one = x, two\
    \ = y, three = z;\n  return any_int(one, two, three);\n}", "{\n    \n    if (int(x)\
    \ == int(y) + int(z) || int(y) == int(x) + int(z) || int(z) == int(x) + int(y))\n\
    \        return true;\n    else\n        return false;\n}", "{\n    float sum\
    \ = x + y + z;\n    return cast(bool)sum % 1;\n}\n/*\n    \n    \n    \n    \n\
    */", "{\n    if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) ==\
    \ int))\n    {\n        return (z == x + y) || (y == x + z) || (x == y + z);\n\
    \    }\n    else\n    {\n        return false;\n    }\n}", "{\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    return x == y + z || x == y - z || x == z - y;\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "{\n    \n    if (is(typeof(x) == int) && is(typeof(y)\
    \ == int) && is(typeof(z) == int))\n    {\n        return  x == y + z || y ==\
    \ x + z || z == x + y;\n    }\n    else return false;\n}", "{\n    if (x + y ==\
    \ z) return true;\n    if (x + z == y) return true;\n    if (y + z == x) return\
    \ true;\n    return false;\n}", "{\n  if (is(typeof(x+y) == int) && is(typeof(x+z)\
    \ == int) && is(typeof(y+z) == int))\n    return true;\n  else\n    return false;\n\
    }", "{\n    if (((x + y) == z || (x + z) == y || (y + z) == x) &&\n    is(typeof(x)\
    \ == int) &&\n    is(typeof(y) == int) &&\n    is(typeof(z) == int))\n       \
    \ return true;\n    else\n        return false;\n}", "{\n    //return (x + y ==\
    \ z || x + z == y || y + z == x) && x == int(x) && y == int(y) && z == int(z);\n\
    \    auto t = tuple(x, y, z);\n    //std.algorithm.find!((tuple(float, float,\
    \ float) t) => (t[0] + t[1] == t[2] || t[0] + t[2] == t[1] || t[1] + t[2] == t[0])\
    \ && t[0] == int(t[0]) && t[1] == int(t[1]) && t[2] == int(t[2]))(t);\n    return\
    \ (x + y == z || x + z == y || y + z == x) && x == to!int(x) && y == to!int(y)\
    \ && z == to!int(z);\n}", "{\n    bool A = int(x) == int(y) + int(z);\n    bool\
    \ B = int(y) == int(x) + int(z);\n    bool C = int(z) == int(x) + int(y);\n  \
    \  return A || B || C;\n}", "    //@ requires true;\n    //@ ensures true;\n{\n\
    \    float f = x + y;\n    int i = (int) f;\n    if (f == i) {\n        return\
    \ true;\n    }\n    f = x + z;\n    i = (int) f;\n    if (f == i) {\n        return\
    \ true;\n    }\n    f = y + z;\n    i = (int) f;\n    if (f == i) {\n        return\
    \ true;\n    }\n    return false;\n}", "    if(is(typeof(x) == int) && is(typeof(y)\
    \ == int) && is(typeof(z) == int))\n        if((x == y + z) || (y == x + z) ||\
    \ (z == x + y))\n            return true;\n        else \n            return false;\n\
    \    else \n        return false;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
