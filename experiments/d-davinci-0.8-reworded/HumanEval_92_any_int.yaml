name: HumanEval_92_any_int
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
  \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of\
  \ the other two, and all numbers are integers.\n    Returns false in any other cases.\n\
  \    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L,\
  \ 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n    \n    >>> any_int(3.6,\
  \ -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float x, float y, float\
  \ z) \n"
tests: "unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
  \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
  \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
  \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
  \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
  \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
completions: ["{\n    return ( is(typeof(x + y + z) == int) && \n            ( (x\
    \ + y == z) || \n              (x + z == y) || \n              (y + z == x) )\
    \ );\n}", "{\n    if (x == y+z || y == x+z || z == x+y) \n    {\n        return\
    \ true;\n    }\n    else \n    {\n        return false;\n    }\n}\n/*\n    Find\
    \ max and min values for a given array of integers.\n    Returns a tuple of two\
    \ values (max, min).\n    \n    Examples\n    >>> min_max([5L, 6L, 7L, 8L, 1L,\
    \ 0L])\n    tuple(8L, 0L)\n    \n    >>> min_max([-5L, 6L, 7L, 8L, 1L, 0L])\n\
    \    tuple(8L, -5L)\n    \n    >>> min_max([1L, 1L, 1L, 1L, 1L, 1L])\n    tuple(1L,\
    \ 1L)\n    \n    >>> min_max([])\n    tuple(0L, 0L)", "{\n    if (is(typeof(x)\
    \ == int) && is(typeof(y) == int) && is(typeof(z) == int))\n    {\n        if\
    \ (x + y == z || x + z == y || y + z == x)\n        {\n            return true;\n\
    \        }\n    }\n    return false;\n}", "{\n    if(x.isNaN || y.isNaN || z.isNaN\
    \ || x.isInfinity || y.isInfinity || z.isInfinity)\n    {\n        return false;\n\
    \    }\n    return (x == y + z || y == x + z || z == x + y);\n}", "{\n    if(is(typeof(x)\
    \ == int) && is(typeof(y) == int) && is(typeof(z) == int))\n    {\n        if(x\
    \ == y + z || x == y - z || x == z - y)\n        {\n            return true;\n\
    \        }\n        else if(y == x + z || y == x - z || y == z - x)\n        {\n\
    \            return true;\n        }\n        else if(z == x + y || z == x - y\
    \ || z == y - x)\n        {\n            return true;\n        }\n        else\n\
    \        {\n            return false;\n        }\n    }\n    else\n    {\n   \
    \     return false;\n    }\n}", "{\n    // return true if x + y == z or y + z\
    \ == x or x + z == y and all are integers\n    return is(typeof(x) == long) &&\
    \ is(typeof(y) == long) && is(typeof(z) == long)\n           && (x + y == z ||\
    \ y + z == x || x + z == y);\n}", "{\n    return (((int)x + (int)y == (int)z)\
    \ || ((int)x + (int)z == (int)y) || ((int)y + (int)z == (int)x)) && x.is_integer\
    \ && y.is_integer && z.is_integer;\n    \n}\n \n ", "{\n  \n  long one = x, two\
    \ = y, three = z;\n  return any_int(one, two, three);\n}", "{\n    \n    if (int(x)\
    \ == int(y) + int(z) || int(y) == int(x) + int(z) || int(z) == int(x) + int(y))\n\
    \        return true;\n    else\n        return false;\n}", "{\n    float sum\
    \ = x + y + z;\n    return cast(bool)sum % 1;\n}\n/*\n    \n    \n    \n    \n\
    */", "{\n    if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) ==\
    \ int))\n    {\n        return (z == x + y) || (y == x + z) || (x == y + z);\n\
    \    }\n    else\n    {\n        return false;\n    }\n}", "{\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    return x == y + z || x == y - z || x == z - y;\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "{\n    \n    if (is(typeof(x) == int) && is(typeof(y)\
    \ == int) && is(typeof(z) == int))\n    {\n        return  x == y + z || y ==\
    \ x + z || z == x + y;\n    }\n    else return false;\n}", "{\n    if (x + y ==\
    \ z) return true;\n    if (x + z == y) return true;\n    if (y + z == x) return\
    \ true;\n    return false;\n}", "{\n  if (is(typeof(x+y) == int) && is(typeof(x+z)\
    \ == int) && is(typeof(y+z) == int))\n    return true;\n  else\n    return false;\n\
    }", "{\n    if (((x + y) == z || (x + z) == y || (y + z) == x) &&\n    is(typeof(x)\
    \ == int) &&\n    is(typeof(y) == int) &&\n    is(typeof(z) == int))\n       \
    \ return true;\n    else\n        return false;\n}", "{\n    //return (x + y ==\
    \ z || x + z == y || y + z == x) && x == int(x) && y == int(y) && z == int(z);\n\
    \    auto t = tuple(x, y, z);\n    //std.algorithm.find!((tuple(float, float,\
    \ float) t) => (t[0] + t[1] == t[2] || t[0] + t[2] == t[1] || t[1] + t[2] == t[0])\
    \ && t[0] == int(t[0]) && t[1] == int(t[1]) && t[2] == int(t[2]))(t);\n    return\
    \ (x + y == z || x + z == y || y + z == x) && x == to!int(x) && y == to!int(y)\
    \ && z == to!int(z);\n}", "{\n    bool A = int(x) == int(y) + int(z);\n    bool\
    \ B = int(y) == int(x) + int(z);\n    bool C = int(z) == int(x) + int(y);\n  \
    \  return A || B || C;\n}", "    //@ requires true;\n    //@ ensures true;\n{\n\
    \    float f = x + y;\n    int i = (int) f;\n    if (f == i) {\n        return\
    \ true;\n    }\n    f = x + z;\n    i = (int) f;\n    if (f == i) {\n        return\
    \ true;\n    }\n    f = y + z;\n    i = (int) f;\n    if (f == i) {\n        return\
    \ true;\n    }\n    return false;\n}", "    if(is(typeof(x) == int) && is(typeof(y)\
    \ == int) && is(typeof(z) == int))\n        if((x == y + z) || (y == x + z) ||\
    \ (z == x + y))\n            return true;\n        else \n            return false;\n\
    \    else \n        return false;", "{\n    if(modf(x,0) != 0 || modf(y,0) !=\
    \ 0 || modf(z,0) != 0)\n    {\n        return false;\n    }\n    else if(x ==\
    \ y + z || y == x + z || z == x + y)\n    {\n        return true;\n    }\n   \
    \ else\n    {\n        return false;\n    }\n}", "{\n    if (is(typeof(x) == int)\
    \ && is(typeof(y) == int) && is(typeof(z) == int)) {\n        return x == y +\
    \ z || y == x + z || z == x + y;\n    }\n    return false;\n}", "{\n    // your\
    \ code here\n   \n    if (fabs(x-y) == z || fabs(x-z) == y || fabs(y-z) == x)\n\
    \        return true;\n    else\n        return false;\n}", "{\n    return (x+y==z\
    \ || x+z==y || y+z==x) && is(typeof(x) == int && typeof(y) == int && typeof(z)\
    \ == int);\n}", "{\n    if (is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z)\
    \ == int))\n    {\n        if (x == y + z || y == x + z || z == x + y)\n     \
    \   {\n            return true;\n        }\n        else \n        {\n       \
    \     return false;\n        }\n    }\n    else \n    {\n        return false;\n\
    \    }\n}", "{\n    if (is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z)\
    \ == int))\n    {\n        if (x == y + z || y == x + z || z == x + y)\n     \
    \   {\n            return true;\n        }\n        else \n        {\n       \
    \     return false;\n        }\n    }\n    else\n    {\n        return false;\n\
    \    }\n}", "{\n    bool areIntegers = (is(typeof(x)) == is(typeof(int)) && is(typeof(y))\
    \ == is(typeof(int)) && is(typeof(z)) == is(typeof(int)));\n    bool areIntegers2\
    \ = (is(typeof(x)) == is(typeof(uint)) && is(typeof(y)) == is(typeof(uint)) &&\
    \ is(typeof(z)) == is(typeof(uint)));\n    bool areIntegers3 = (is(typeof(x))\
    \ == is(typeof(long)) && is(typeof(y)) == is(typeof(long)) && is(typeof(z)) ==\
    \ is(typeof(long)));\n    if ((x == y + z) || (y == x + z) || (z == x + y) &&\
    \ (areIntegers || areIntegers2 || areIntegers3))\n    {\n        return true;\n\
    \    }\n    else\n    {\n        return false;\n    }\n}", "{\n    assert(0);\n\
    \    return false;\n}\n// test cases", "{\n    real[3] xyz = [x, y, z];\n    real\
    \ sum = std.algorithm.reduce!\"a + b\"(xyz);\n    foreach(real i; xyz)\n    {\n\
    \        if(i == sum/2 && (is(typeof(i) == long) || is(typeof(i) == int)))\n \
    \           return true;\n    }\n    return false;\n}", "{\n   // return bool(fmod(x,1)\
    \ == 0 && fmod(y,1) == 0 && fmod(z,1) == 0 && (x + y == z || x + z == y || y +\
    \ z == x));\n    if (fmod(x,1) == 0 && fmod(y,1) == 0 && fmod(z,1) == 0) {\n \
    \       if (x + y == z || x + z == y || y + z == x)\n            return true;\n\
    \    }\n    return false;\n}", "{\n    return (x == y + z || y == x + z || z ==\
    \ x + y);\n}", "{\n    return is(x == y + z) || is(y == x + z) || is(z == x +\
    \ y);\n}", "{\n    if (isfinite(x) && isfinite(y) && isfinite(z))\n    {\n   \
    \     if (x == y+z || y == x+z || z == x+y)\n        {\n            return true;\n\
    \        }\n    }\n    return false;\n}", "{\n    int tmp = x + y;\n    if (cast(int)tmp\
    \ == z && is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n\
    \        return true;\n    tmp = x + z;\n    if (cast(int)tmp == y && is(typeof(x)\
    \ == int) && is(typeof(y) == int) && is(typeof(z) == int))\n        return true;\n\
    \    tmp = y + z;\n    if (cast(int)tmp == x && is(typeof(x) == int) && is(typeof(y)\
    \ == int) && is(typeof(z) == int))\n        return true;\n    return false;\n}",
  "{\n    return (float(int(x)) == x) && (float(int(y)) == y) && (float(int(z)) ==\
    \ z) && (x + y == z || x + z == y || y + z == x);\n}", "{ \n  auto _x = int(x);\n\
    \  auto _y = int(y);\n  auto _z = int(z);\n  if (_x + _y == _z || _x + _z == _y\
    \ || _y + _z == _x) {\n      return true;\n  }\n  return false;\n}", "{\n    if\
    \ (fmod(x, 1) != 0 || fmod(y, 1) != 0 || fmod(z, 1) != 0)\n        return false;\n\
    \    \n    if (x == y + z || y == x + z || z == x + y)\n        return true;\n\
    \    \n    return false;\n}\n ", "{\n    return (x == floor(x) && y == floor(y)\
    \ && z == floor(z)) && \n        (x == y + z || y == x + z || z == x + y);\n}",
  "{\n  import std.math;\n  import std.typecons;\n  if ((long(x) == y + z) || (long(y)\
    \ == x + z) || (long(z) == x + y)) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}", "{\n    return cast(int)x + cast(int)y == cast(int)z || cast(int)x\
    \ + cast(int)z == cast(int)y || cast(int)y + cast(int)z == cast(int)x;\n}\n/*\n\
    \    Create a function that takes 1 strings and 1 numbers.\n    Returns true if\
    \ the string has exactly n numbers, and false otherwise.\n    \n    Examples\n\
    \    >>> all_num(\"aeiou12345\", 5)\n    true\n    \n    >>> all_num(\"aeiou12345\"\
    , 4)\n    false\n    \n    >>> all_num(\"aeiou12345\", 6)\n    false\n    \n \
    \   >>> all_num(\"aeiou1345\", 5)\n    false\n    \n*/", "{\n    bool ret = false;\n\
    \    //@ref any_int(float, float, float)\n    if (x == y + z || y == x + z ||\
    \ z == x + y)\n    {\n        if (x % 1 == 0 && y % 1 == 0 && z % 1 == 0)\n  \
    \      {\n            ret = true;\n        }\n    }\n    return ret;\n}", "{\n\
    \    return (x + y == z) || (x + z == y) || (y + z == x);\n}", "{\n    \n    \n\
    \    \n    \n    \n    \n}", "{\n    // TODO: implement me\n    if(x + y == z\
    \ || y + z == x || x + z == y) return true;\n    return false;\n}", "{\n    return\
    \ (x == y + z || x == y - z || y == x + z || y == x - z || z == x + y || z ==\
    \ x - y) && is(typeof(x) == int && typeof(y) == int && typeof(z) == int);\n}",
  "{\n    return any_int(x as long, y as long, z as long);\n}", "{\n\tif (is(typeof(x)\
    \ == float || typeof(y) == float || typeof(z) == float))\n\t{\n\t\treturn false;\n\
    \t}\n\telse\n\t{\n\t\treturn (x + y == z || x + z == y || y + z == x);\n\t}\n\t\
    \n\t\n}", "{\n    return (int(x) == int(y + z)) || (int(y) == int(x + z)) || (int(z)\
    \ == int(x + y));\n}", "{\n\tif (int(x) == int(y) + int(z) || int(y) == int(x)\
    \ + int(z) || int(z) == int(x) + int(y)) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }", "{\n    return is(int a,x) && is(int b,y) && is(int c,z) && ((a == b + c)\
    \ || (b == a + c) || (c == a + b));\n}", "{\n    bool x_int = (int)x == x;\n \
    \   bool y_int = (int)y == y;\n    bool z_int = (int)z == z;\n    return (x_int\
    \ && y_int && z_int) && ((x + y == z) || (x + z == y) || (y + z == x));\n}\n//\
    \ 3rd party solution\n//#include <cmath>\n//bool any_int(float x, float y, float\
    \ z) {\n//  return std::isnormal(x) && std::isnormal(y) && std::isnormal(z) &&\n\
    //    std::abs(x) < std::numeric_limits<int>::max() &&\n//    std::abs(y) < std::numeric_limits<int>::max()\
    \ &&\n//    std::abs(z) < std::numeric_limits<int>::max() &&\n//    (int)x + (int)y\
    \ == (int)z ||\n//    (int)x + (int)z == (int)y ||\n//    (int)y + (int)z == (int)x;\n\
    //}\n//", "{\n    float sum = x + y + z;\n    return ( ((sum == x) && (is_integer(y)\
    \ && is_integer(z))) ||\n             ((sum == y) && (is_integer(x) && is_integer(z)))\
    \ ||\n             ((sum == z) && (is_integer(x) && is_integer(y))) );\n}", "{\n\
    \    return((x+y==z)||(x+z==y)||(y+z==x));\n}\n//--------------------------------------------",
  "{\n    // return x == y + z || y == x + z || z == x + y;\n    return (cast(int)x\
    \ == cast(int)y + cast(int)z || cast(int)y == cast(int)x + cast(int)z || cast(int)z\
    \ == cast(int)x + cast(int)y);\n}", "{\n    return x == y + z || x == y - z ||\
    \ y == x + z || y == x - z || z == x + y || z == x - y;\n}", "{\n    // if any\
    \ of the numbers are not ints, return false\n    if(!isfinite(x) || !isfinite(y)\
    \ || !isfinite(z))\n        return false;\n    \n    return (x == y + z) || (y\
    \ == x + z) || (z == x + y);\n}", "{\n  if (is_integral_float!(typeof(x)) && is_integral_float!(typeof(y))\
    \ && is_integral_float!(typeof(z)))\n  {\n    if (x == y + z || y == x + z ||\
    \ z == x + y)\n    {\n      return true;\n    }\n    else\n    {\n      return\
    \ false;\n    }\n  }\n  else\n  {\n    return false;\n  }\n}", "{\n    return\
    \ (x + y == z) || (x + z == y) || (y + z == x);\n    \n}", "{\n    if(is(typeof(x)\
    \ == int) && is(typeof(y) == int) && is(typeof(z) == int)) \n    {\n        if(x\
    \ + y == z || x + z == y || y + z == x) \n        {\n            return true;\n\
    \        }\n    }\n    return false;\n}", "{\n    return ( (x == y + z ) && is(\
    \ typeof(x) == int ) &&  is( typeof(y) == int ) &&  is( typeof(z) == int ) );\
    \ \n}", "{\n    \n    if(abs(x - (y + z)) < 0.00001)\n    {\n        return is(typeof(x)\
    \ == int && typeof(y) == int && typeof(z) == int);\n    }\n    else if(abs(y -\
    \ (x + z)) < 0.00001)\n    {\n        return is(typeof(x) == int && typeof(y)\
    \ == int && typeof(z) == int);\n    }\n    else if(abs(z - (x + y)) < 0.00001)\n\
    \    {\n        return is(typeof(x) == int && typeof(y) == int && typeof(z) ==\
    \ int);\n    }\n    else\n    {\n        return false;\n    }\n    \n}\n/* \n\
    \    Create a function that takes a string.\n    Returns the maximal length of\
    \ an array that can be constructed from the string.\n    The maximal length is\
    \ the number of unique characters in the string.\n    For example: The string\
    \ \"abbcc\" has a maximal length of 3, as we can create an array of \"a\", \"\
    b\", \"c\".\n    The string \"abbccad\" has a maximal length of 4, as we can create\
    \ an array of \"a\", \"b\", \"c\", \"d\".\n    \n    Examples\n    >>> maximal_length(\"\
    abbccad\")\n    4\n    \n    >>> maximal_length(\"abbcc\")\n    3\n    \n    >>>\
    \ maximal_length(\"aabc\")\n    3\n*/", "    in\n    {\n        assert(!isNaN(x));\n\
    \        assert(!isNaN(y));\n        assert(!isNaN(z));\n    }\n    out (result)\n\
    \    {\n        assert(!isNaN(result));\n    }\n    do\n{\n    return isInteger(x)\
    \ && isInteger(y) && isInteger(z) && isInteger(x + y) && isInteger(x + z) && isInteger(y\
    \ + z) && (x == y + z || y == x + z || z == x + y);\n}", "{\n    return (typeof(x)\
    \ == long) && (typeof(y) == long) && (typeof(z) == long) &&\n        ((x == y\
    \ + z) || (y == x + z) || (z == x + y));\n}\n ", "{\n\tif ((x % 1 == 0) && (y\
    \ % 1 == 0) && (z % 1 == 0))\n\t{\n\t\tif ((x == y + z) || (y == x + z) || (z\
    \ == x + y))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse return false;\n\t}\n\t\
    else return false;\n}", "{\n    bool is_int = false;\n    bool result = false;\n\
    \    bool x_is_int = is(typeof(x) == int);\n    bool y_is_int = is(typeof(y) ==\
    \ int);\n    bool z_is_int = is(typeof(z) == int);\n    bool x_is_float = is(typeof(x)\
    \ == float);\n    bool y_is_float = is(typeof(y) == float);\n    bool z_is_float\
    \ = is(typeof(z) == float);\n    if (x_is_int || y_is_int || z_is_int) {\n   \
    \     is_int = true;\n    }\n    if (x_is_float || y_is_float || z_is_float) {\n\
    \        is_int = false;\n    }\n    if (x_is_int && y_is_int && z_is_int) {\n\
    \        result = true;\n    }\n    if (result) {\n        if (x == y + z || y\
    \ == x + z || z == x + y) {\n            return true;\n        }\n    }\n    else\
    \ {\n        return false;\n    }\n}", "{\n    // Create a tuple\n    Tuple!float\
    \ t = tuple(x, y, z);\n    // Rotate tuple\n    t = rotateLeft(t);\n    // Take\
    \ the first element of the tuple\n    float a = front(t);\n    // Take the first\
    \ element of the rest of the tuple\n    float b = front(dropOne(t));\n    // Take\
    \ the rest of the rest of the tuple\n    float c = front(dropOne(dropOne(t)));\n\
    \    if (a+b == c || b+c == a || a+c == b)\n    {\n        return true;\n    }\n\
    \    else\n    {\n        return false;\n    }\n}", "{\n    int sum;\n    sum\
    \ = x + y + z;\n    if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z)\
    \ == int)){\n        if((x == sum - y - z) || (y == sum - x - z) || (z == sum\
    \ - x - y)){\n            return true;\n        }\n    }\n    return false;\n}",
  "{\n    return any_int(to!long(x), to!long(y), to!long(z));\n}", "{\n    return\
    \ x==y+z || y==x+z || z==x+y;\n}", "{\n    \n    if(x == 0 || y == 0 || z == 0)\
    \ \n    {\n        return false;\n    }\n    \n    if(isZero(x) || isZero(y) ||\
    \ isZero(z)) \n    {\n        return false;\n    }\n    \n    if(ceil(x) != x\
    \ || ceil(y) != y || ceil(z) != z) \n    {\n        return false;\n    }\n   \
    \ \n    float max = Math.max(x, Math.max(y, z));\n    float min = Math.min(x,\
    \ Math.min(y, z));\n    float mid = (x + y + z) - max - min;\n    \n    return\
    \ max == mid + min;\n    \n    \n    \n}", "{\n    enum {x_, y_, z_} int_type;\n\
    \    int_type = x - cast(int)x == 0 ? x_ : (y - cast(int)y == 0 ? y_ : z_);\n\
    \    if (int_type == x_) {\n        return x == y + z;\n    }\n    else if (int_type\
    \ == y_) {\n        return y == x + z;\n    }\n    else {\n        return z ==\
    \ x + y;\n    }\n}", "{\n    float sum = x + y + z;\n    if(is(typeof(sum) ==\
    \ int) && x != sum && y != sum && z != sum)\n    {\n        return true;\n   \
    \ }\n    else\n    {\n        return false;\n    }\n}", "{\n  float larger;\n\
    \  float smaller;\n  float smallest;\n  float maxSum;\n  float minSum;\n  if(x\
    \ > y && x > z)\n  {\n    larger = x;\n    maxSum = larger;\n    if(y > z)\n \
    \   {\n      smaller = y;\n      smallest = z;\n    }\n    else\n    {\n     \
    \ smaller = z;\n      smallest = y;\n    }\n  }\n  else if(y > x && y > z)\n \
    \ {\n    larger = y;\n    maxSum = larger;\n    if(x > z)\n    {\n      smaller\
    \ = x;\n      smallest = z;\n    }\n    else\n    {\n      smaller = z;\n    \
    \  smallest = x;\n    }\n  }\n  else if(z > x && z > y)\n  {\n    larger = z;\n\
    \    maxSum = larger;\n    if(x > y)\n    {\n      smaller = x;\n      smallest\
    \ = y;\n    }\n    else\n    {\n      smaller = y;\n      smallest = x;\n    }\n\
    \  }\n  else\n  {\n    return false;\n  }\n  if(larger + smaller == smallest)\n\
    \  {\n    return true;\n  }\n  else\n  {\n    minSum = min(smaller, smallest);\n\
    \    if(larger == minSum)\n    {\n      return false;\n    }\n    else\n    {\n\
    \      return larger + minSum == smallest;\n    }\n  }\n}", "{\n    return is(typeof(x+y+z)\
    \ == int) && (x+y == z || x+z == y || y+z == x);\n}", "{\n    return ((x == y\
    \ + z) or (y == x + z) or (z == x + y)) and \n            (is(typeof(x == int)\
    \ & typeof(y == int) & typeof(z == int)));\n}", "{\n    \n    return (( (is(typeof(x))\
    \ == is(typeof(y)) ) == is(typeof(z)) ) == false) || ( (is(typeof(x)) != is(typeof(z))\
    \ ) != is(typeof(y)) ) == false;\n}", "{\n    auto dist = [](float p, float q)\n\
    \    {\n        auto s = p - q;\n        return s * s;\n    };\n    \n    auto\
    \ d1 = dist(x, y) + dist(x, z);\n    auto d2 = dist(y, x) + dist(y, z);\n    auto\
    \ d3 = dist(z, x) + dist(z, y);\n    \n    auto eps = 1e-5;\n    \n    auto ret\
    \ = d1 < eps || d2 < eps || d3 < eps;\n    \n    return ret;\n}", "{\n    return\
    \ (((x == y + z) || (y == x + z) || (z == x + y)) && \n           is(typeof(x)\
    \ == int) && \n           is(typeof(y) == int) && \n           is(typeof(z) ==\
    \ int));\n}\n/*\n    Create a function that creates a vector of ints.\n    The\
    \ vector will have the size of the argument\n    The values of the vector should\
    \ be the squares of numbers from 1 to the number of elements\n    If the argument\
    \ is negative, the function should return an empty vector.\n    \n    Examples\n\
    \    >>> v = create_vector(3)\n    >>> v.length == 3\n    true\n    >>> v[0] ==\
    \ 1\n    true\n    >>> v[1] == 4\n    true\n    >>> v[2] == 9\n    true\n    \n\
    \    >>> v = create_vector(0)\n    >>> v.length == 0\n    true\n    \n    >>>\
    \ v = create_vector(-2)\n    >>> v.length == 0\n    true\n*/", "{\n    int xi\
    \ = 0;\n    int yi = 0;\n    int zi = 0;\n    bool xisint = false;\n    bool yisint\
    \ = false;\n    bool zisint = false;\n    bool sumisint = false;\n    bool result\
    \ = false;\n    float sum = 0.0;\n    float sum_int = 0.0;\n    float float_sum\
    \ = 0.0;\n    float epsilon = 0.001;\n    \n    xi = cast(int)x;\n    yi = cast(int)y;\n\
    \    zi = cast(int)z;\n    \n    if (abs(x - xi) < epsilon)\n    {\n        xisint\
    \ = true;\n    }\n    if (abs(y - yi) < epsilon)\n    {\n        yisint = true;\n\
    \    }\n    if (abs(z - zi) < epsilon)\n    {\n        zisint = true;\n    }\n\
    \    \n    if (xisint && yisint && zisint)\n    {\n        float_sum = x + y +\
    \ z;\n        sum_int = cast(int)float_sum;\n        if (abs(float_sum - sum_int)\
    \ < epsilon)\n        {\n            sumisint = true;\n        }\n    }\n    \n\
    \    if (sumisint)\n    {\n        sum = cast(float)sum_int;\n        if (sum\
    \ == x || sum == y || sum == z)\n        {\n            result = true;\n     \
    \   }\n    }\n    \n    return result;\n}", "{\n    return cast(bool) ((x == y\
    \ + z) || (y == x + z) || (z == x + y));\n}", "{\n    return (x + y == z || y\
    \ + z == x || x + z == y) && (is_int(x) && is_int(y) && is_int(z));\n}", "{\n\
    \    return (is(typeof(x+y+z))== long) ? true : false;\n}", "{\n    if (isInteger(x)\
    \ && isInteger(y) && isInteger(z))\n    {\n        if (x == y + z || y == x +\
    \ z || z == x + y)\n        {\n            return true;\n        }\n    }\n  \
    \  return false;\n}\n/*\n    Create a function that takes an array of integers,\
    \ and returns true if any of the numbers is a palindrome.\n    Return false if\
    \ there are no palindromes in the array.", "{\n    return (((x + y) == z) || ((x\
    \ + z) == y) || ((y + z) == x)) && std.typecons.is(x, long) && std.typecons.is(y,\
    \ long) && std.typecons.is(z, long);\n}", "{\n    return x == y + z || y == x\
    \ + z || z == x + y && x == floor(x) && y == floor(y) && z == floor(z);\n}", "{\n\
    \    // write your code here\n    return false;\n}", "{\n  /*\n  \u0422\u0440\u0435\
    \u0431\u0443\u0435\u0442\u0441\u044F \u043F\u0440\u043E\u0432\u0435\u0440\u0438\
    \u0442\u044C \u0438 \u043F\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043A int\n\
    \  std.math.abs\n  std.math.lround\n  std.typecons.Tuple.\n  */\n  //return false;\n\
    \  auto d = Tuple!(int, int, int)(lround(x), lround(y), lround(z));\n  return\
    \ (d[0] + d[1] == d[2]) || (d[0] + d[2] == d[1]) || (d[1] + d[2] == d[0]);\n}",
  "{\n    if(fract(x) == 0.0 && fract(y) == 0.0 && fract(z) == 0.0)\n    {\n     \
    \   return (x + y == z || x + z == y || y + z == x);\n    }\n    return false;\n\
    }", "{\n    assert(x == floor(x));\n    assert(y == floor(y));\n    assert(z ==\
    \ floor(z));\n    return ((x+y == z) || (x+z == y) || (y+z == x));\n}", "{\n \
    \   auto sum = x + y + z;\n    return (sum == x || sum == y || sum == z) && all(map!is_int(immutable(float))([x,\
    \ y, z]));\n}", "{\n    if (x + y == z || x + z == y || y + z == x) {\n      \
    \  if (x.to!int() && y.to!int() && z.to!int()) {\n            return true;\n \
    \       }\n    }\n    return false;\n}", "{\n    if(is(typeof(x+y+z)== int))\n\
    \    {\n        if((x+y == z) || (x+z == y) || (y+z == x))\n        {\n      \
    \      return true;\n        }\n        else\n        {\n            return false;\n\
    \        }\n    }\n    else\n    {\n        return false;\n    }\n}", "{\n   \
    \ float sum = x + y + z;\n    return sum / 3 == floor(sum / 3);\n}", "{\n    alias\
    \ sum = x + y + z;\n    return (x == sum - y - z) || (y == sum - x - z) || (z\
    \ == sum - x - y);\n}", "{\n    //return x == y + z || y == x + z || z == x +\
    \ y;\n    return (round(x) == round(y + z) || round(y) == round(x + z) || round(z)\
    \ == round(x + y));\n}", "{\n    float max = 0;\n    float first = 0;\n    float\
    \ second = 0;\n    int flag = 0;\n    if (x > y)\n    {\n        if (x > z)\n\
    \        {\n            max = x;\n            flag = 1;\n        }\n        else\n\
    \        {\n            max = z;\n            flag = 3;\n        }\n    }\n  \
    \  else\n    {\n        if (y > z)\n        {\n            max = y;\n        \
    \    flag = 2;\n        }\n        else\n        {\n            max = z;\n   \
    \         flag = 3;\n        }\n    }\n    if (flag == 1)\n    {\n        first\
    \ = y;\n        second = z;\n    }\n    else if (flag == 2)\n    {\n        first\
    \ = x;\n        second = z;\n    }\n    else\n    {\n        first = x;\n    \
    \    second = y;\n    }\n    if (max == (first + second))\n    {\n        return\
    \ true;\n    }\n    else\n    {\n        return false;\n    }\n}", "{\n    if(is(typeof(x\
    \ == y)))\n    {\n        return false;\n    }\n    else if(is(typeof(x == z)))\n\
    \    {\n        return false;\n    }\n    else if(is(typeof(y == z)))\n    {\n\
    \        return false;\n    }\n    else if(is(typeof(x + y == z)))\n    {\n  \
    \      return true;\n    }\n    else if(is(typeof(x + z == y)))\n    {\n     \
    \   return true;\n    }\n    else if(is(typeof(y + z == x)))\n    {\n        return\
    \ true;\n    }\n    else\n    {\n        return false;\n    }\n    \n    \n}",
  "{\n    return x + y == z || x + z == y || y + z == x;\n}", "{\n    bool x_is_int\
    \ = x == int(x);\n    bool y_is_int = y == int(y);\n    bool z_is_int = z == int(z);\n\
    \    bool any_is_int = x_is_int || y_is_int || z_is_int;\n    bool all_are_int\
    \ = x_is_int && y_is_int && z_is_int;\n    return (x+y==z || x+z==y || y+z==x)\
    \ && all_are_int;\n}", "{\n    // convert all values to integer\n    auto x_i\
    \ = to!int(x);\n    auto y_i = to!int(y);\n    auto z_i = to!int(z);\n    \n \
    \   // convert the values back to float\n    auto x_f = to!float(x_i);\n    auto\
    \ y_f = to!float(y_i);\n    auto z_f = to!float(z_i);\n    \n    // compare the\
    \ float to the original float.\n    if(x_f == x && y_f == y && z_f == z) \n  \
    \  {\n        // check if the float value equates to the sum of the other two\n\
    \        if(x == y + z || y == x + z || z == x + y) \n        {\n            return\
    \ true;\n        }\n        else \n        {\n            return false;\n    \
    \    }\n    }\n    else \n    {\n        return false;\n    }\n}", "{\n    return\
    \ (y + z == x || x + z == y || x + y == z) && (is(typeof(x) == int) && is(typeof(y)\
    \ == int) && is(typeof(z) == int));\n}", "{\n   if (is_integral!float(x) && is_integral!float(y)\
    \ && is_integral!float(z))\n   {\n       if( x == y + z || x == y - z || y ==\
    \ x + z || y == x - z || z == x + y || z == x - y)\n        {\n           return\
    \ true;\n        }\n   }\n   return false;\n}", "{\n    return (x+y == z) || (x+z\
    \ == y) || (y+z == x);\n}", "{\n  if (is(typeof(x) == int) && is(typeof(y) ==\
    \ int) && is(typeof(z) == int))\n  {\n    if (x == y + z || y == x + z || z ==\
    \ x + y)\n    {\n      return true;\n    }\n    else\n    {\n      return false;\n\
    \    }\n  }\n  else\n  {\n    return false;\n  }\n}", "{\n    return (x == y +\
    \ z) || (y == x + z) || (z == x + y);\n}", "{\n    bool any_int(false);\n    float\
    \ xyz = x + y + z;\n    if (xyz - trunc(xyz) == 0)\n    {\n        if (x == y\
    \ + z || y == x + z || z == x + y)\n        {\n            any_int = true;\n \
    \       }\n    }\n    return any_int;\n}", "{\n    return is(typeof(x + y + z)\
    \ == int);\n}", "{\n    bool res = false;\n    auto fl = function!(float)();\n\
    \    if(is(typeof(fl(x) == typeof(fl(y)) == typeof(fl(z)))))\n    {\n        if(x\
    \ == y + z || y == x + z || z == x + y)\n        {\n            res = true;\n\
    \        }\n    }\n    return res;\n}", "{\n    float sum = x + y + z;\n    if(is(typeof(sum))\
    \ float)\n    {\n        if(x == z + y || y == x + z || z == x + y) return true;\n\
    \    }\n    return false;\n}", "    { \n    //Erstellt zwei Variablen a und b,\
    \ die jeweils den Wert von x und y haben.\n    //Danach ruft die Variable c ihren\
    \ Wert auf.\n    //Dann wird die if-Abfrage getestet.\n    //Pr\xFCft, ob der\
    \ Wert von c ein Integer ist.\n    //Wenn ja, wird die Abfrage durchlaufen.\n\
    \    //Ansonsten, wird false ausgegeben.\n    float a = x;\n    float b = y;\n\
    \    float c = z;\n    if (is_integer!c)\n        {\n        if (a + b == c)\n\
    \            {\n            return true;\n            }\n        else if (a +\
    \ c == b)\n            {\n            return true;\n            }\n        else\
    \ if (b + c == a)\n            {\n            return true;\n            }\n  \
    \      else\n            {\n            return false;\n            }\n       \
    \ }\n    else\n        {\n        return false;\n        }\n    }", "{ \n    return\
    \ (long)x + (long)y == (long)z || (long)x + (long)z == (long)y || (long)y + (long)z\
    \ == (long)x;\n}", "{\n    if (x + y == z)\n    {\n        return true;\n    }\n\
    \    else if (x + z == y)\n    {\n        return true;\n    }\n    else if (y\
    \ + z == x)\n    {\n        return true;\n    }\n    else \n    {\n        return\
    \ false;\n    }\n}", "{\n    return  (x == (y + z)) || (y == (x + z)) || (z ==\
    \ (x + y));\n    \n}", "{\n  return (x == y + z) || (y == x + z) || (z == x +\
    \ y);\n}", "{\n    return !(modf(x) != 0.0 || modf(y) != 0.0 || modf(z) != 0.0)\
    \ &&\n        (x + y == z || x + z == y || y + z == x);\n}", "{\n    auto sum\
    \ = x + y + z;\n    //mixin(\"writeln(\\\"x: \\\",x);\");\n    //mixin(\"writeln(\\\
    \"y: \\\",y);\");\n    //mixin(\"writeln(\\\"z: \\\",z);\");\n    //mixin(\"writeln(\\\
    \"sum: \\\",sum);\");\n    auto x_int = int(x);\n    auto y_int = int(y);\n  \
    \  auto z_int = int(z);\n    auto sum_int = int(sum);\n    //mixin(\"writeln(\\\
    \"x_int: \\\",x_int);\");\n    //mixin(\"writeln(\\\"y_int: \\\",y_int);\");\n\
    \    //mixin(\"writeln(\\\"z_int: \\\",z_int);\");\n    //mixin(\"writeln(\\\"\
    sum_int: \\\",sum_int);\");\n    auto a_1 = x_int == sum_int - y_int - z_int;\n\
    \    auto a_2 = y_int == sum_int - x_int - z_int;\n    auto a_3 = z_int == sum_int\
    \ - x_int - y_int;\n    //mixin(\"writeln(\\\"a_1: \\\",a_1);\");\n    //mixin(\"\
    writeln(\\\"a_2: \\\",a_2);\");\n    //mixin(\"writeln(\\\"a_3: \\\",a_3);\");\n\
    \    return a_1 || a_2 || a_3;\n}", "{\n    return (x == y + z) || (y == x + z)\
    \ || (z == x + y); \n}", "{\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "{\n  // long types have a constructor that will take a float, and return a long.\n\
    \  // if the number has no fractional part, then it is an integer\n  if( (long)x\
    \ + (long)y == (long)z || (long)x + (long)z == (long)y || (long)y + (long)z ==\
    \ (long)x )\n    return true;\n  else\n    return false;\n}", "{\n    long real_x\
    \ = cast(long)x;\n    long real_y = cast(long)y;\n    long real_z = cast(long)z;\n\
    \    return (((real_x + real_y) == real_z) || ((real_y + real_z) == real_x) ||\
    \ ((real_x + real_z) == real_y));\n}", "{\n  return !isNaN(x) && !isNaN(y) &&\
    \ !isNaN(z) && abs(x - (y + z)) < 0.00001;\n}", "{\n    // write your code here\n\
    \    if(x == y + z)\n    {\n        return true;\n    }\n    else if(y == x +\
    \ z)\n    {\n        return true;\n    }\n    else if(z == x + y)\n    {\n   \
    \     return true;\n    }\n    else\n    {\n        return false;\n    }\n}",
  "{\n    return any_int(long(x), long(y), long(z));\n}\n/*", "{\n  return ceil(x)\
    \ == ceil(y) + ceil(z) || ceil(x) == ceil(z) + ceil(y) || ceil(y) == ceil(x) +\
    \ ceil(z) || ceil(y) == ceil(z) + ceil(x) || ceil(z) == ceil(x) + ceil(y) || ceil(z)\
    \ == ceil(y) + ceil(x);\n}", "{\n    if(x==y+z||y==x+z||z==x+y)\n    {\n     \
    \   return true;\n    }\n    else\n    {\n        return false;\n    }\n}", "{\n\
    \    return (x == (y + z) || y == (x + z) || z == (x + y)) && (x == trunc(x) &&\
    \ y == trunc(y) && z == trunc(z));\n}", "{\n    return x == y + z || y == x +\
    \ z || z == x + y;\n}\n ", "{\n   if (x + y == z || x + z == y || y + z == x)\n\
    \      return true;\n   else \n      return false;\n}", "{\n    \n    \n    return\
    \ ((x + y) == z or (x + z) == y or (y + z) == x) and is(typeof(x) == int);\n}",
  "{\n    return is(typeof(x+y+z) == int) && ((x+y == z) || (x+z == y) || (y+z ==\
    \ x));\n}", "{\n    if(is(typeof(x) == long) && is(typeof(y) == long) && is(typeof(z)\
    \ == long))\n    {\n        return x + y == z || x + z == y || y + z == x;\n \
    \   }\n    return false;\n}", "{\n    return ((x - y == z) || (x - z == y) ||\
    \ (y - x == z) || (y - z == x) || (z - x == y) || (z - y == x));\n}", "{\n   \
    \ float sum = x + y + z;\n    if (sum == x || sum == y || sum == z)\n    {\n \
    \       return true;\n    }\n    else \n    {\n        return false;\n    }\n}",
  "{\n    return false;\n}", "{ \n    int i_x = cast(int)x;\n    int i_y = cast(int)y;\n\
    \    int i_z = cast(int)z;\n    \n    return ((x + y) == z) || ((x + z) == y)\
    \ || ((y + z) == x) && (i_x == x) && (i_y == y) && (i_z == z);\n    \n}\n/*\n\
    Tests", "{\n    \n    \n    \n    \n    \n    \n}", "{\n    float[] nums = [x,\
    \ y, z];\n    float sum = 0.0;\n    foreach(idx, val; nums)\n    {\n        if(val\
    \ == int(val))\n        {\n            nums[idx] = int(val);\n        }\n    \
    \    else\n        {\n            return false;\n        }\n    }\n    foreach(val;\
    \ nums)\n    {\n        sum += val;\n    }\n    if(sum == nums[0] || sum == nums[1]\
    \ || sum == nums[2])\n    {\n        return true;\n    }\n    else\n    {\n  \
    \      return false;\n    }\n}\n ", "{\n    return (x == y + z) || (y == x + z)\
    \ || (z == x + y);\n}\n ", "{\n    bool isAnyInt = false;\n    float total = x\
    \ + y + z;\n    bool isSumInt = cast(bool)(modf(total) == 0.0);\n    float[] floatArr\
    \ = [x, y, z];\n    bool isAnyValueInt = false;\n    foreach(float f; floatArr)\n\
    \    {\n        if(modf(f) == 0.0)\n        {\n            isAnyValueInt = true;\n\
    \            break;\n        }\n    }\n    if(isSumInt && isAnyValueInt)\n   \
    \ {\n        isAnyInt = true;\n    }\n    return isAnyInt;\n}", "{\n    return\
    \ ((x == y + z) || (y == x + z) || (z == x + y)) && \n        ((int)x == x) &&\
    \ ((int)y == y) && ((int)z == z);\n}\n/*\n    Why is x == y + z necessary?\n \
    \   https://github.com/D-Programming-Language/dmd/issues/2415\n*/", "{\n    if\
    \ (modf(x) != 0 || modf(y) != 0 || modf(z) != 0)\n        return false;\n    \n\
    \    float sum = x + y;\n    if (z == sum)\n        return true;\n    \n    sum\
    \ = x + z;\n    if (y == sum)\n        return true;\n    \n    sum = y + z;\n\
    \    if (x == sum)\n        return true;\n    \n    return false;\n    \n    \n\
    }", "{\n    return (x % 1 == 0 || y % 1 == 0 || z % 1 == 0) && (x + y == z ||\
    \ x + z == y || y + z == x);\n}", "{\n    x = ceil(x);\n    y = ceil(y);\n   \
    \ z = ceil(z);\n    Tuple!(float, float, float) s = tuple(x, y, z);\n    float\
    \ sum = x + y + z;\n    int i;\n    float sum2 = 0;\n    for (i = 0; i < s.length;\
    \ i++)\n    {\n      sum2 += s[i];\n    }\n    if (sum2 == sum)\n    {\n     \
    \ return true;\n    }\n    else\n    {\n      return false;\n    }\n}", "{\n \
    \   return int(x) + int(y) == int(z) || int(x) + int(z) == int(y) || int(y) +\
    \ int(z) == int(x);\n}", "{\n    if(is(typeof(x) == int) && is(typeof(y) == int)\
    \ && is(typeof(z) == int))\n    {\n        if(x == (y + z) || y == (x + z) ||\
    \ z == (x + y))\n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}", "{\n    auto r = false;\n    int a = typeid(int).init;\n    int\
    \ b = typeid(int).init;\n    int c = typeid(int).init;\n    a = cast(int)x;\n\
    \    b = cast(int)y;\n    c = cast(int)z;\n    if(a == x && b == y && c == z)\
    \ \n    {\n        if(a == b + c || b == a + c || c == a + b) \n        {\n  \
    \          r = true;\n        }\n    }\n    return r;\n}", "{\n    float sum =\
    \ x + y + z;\n    if (x == sum - x - y)\n        return true;\n    if (y == sum\
    \ - x - z)\n        return true;\n    if (z == sum - x - y)\n        return true;\n\
    \    return false;\n}", "{\n    return false;\n}", "{\n    // returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n    // returns false in any other cases.\n    return is(typeof(x\
    \ + y + z) == int) &&\n            (x + y == z || x + z == y || y + z == x);\n\
    }", "{ \n    return (x+y == z) || (x+z == y) || (y+z == x); \n}", "{ \n    x =\
    \ to!int(x);\n    y = to!int(y);\n    z = to!int(z);\n    \n    //return (x ==\
    \ y + z) || (y == x + z) || (z == x + y);\n    if(x == y + z)\n    {\n       \
    \ return true;\n    }\n    else if(y == x + z)\n    {\n        return true;\n\
    \    }\n    else if(z == x + y)\n    {\n        return true;\n    }\n    else\n\
    \    {\n        return false;\n    }\n}\n/*\n\tCreate a function that takes 3\
    \ arguments.\n\tReturns true if one of the arguments is integer and other two\
    \ are floats, or one of the arguments is float and other two are integers.\n\t\
    Returns false in any other cases.\n\t\n\tExamples\n\t>>> any_int(5L, 2L, 7L)\n\
    \ttrue\n\t\n\t>>> any_int(3L, 2L, 2L)\n\tfalse\n\t\n\t>>> any_int(3L, -2L, 1L)\n\
    \ttrue\n\t\n\t>>> any_int(3.6, -2.2, 2L)\n\ttrue\n*/", "{\n  return (x == (y +\
    \ z) || y == (x + z) || z == (x + y));\n}", "{\n    return ((z==(x+y)) or (y==(x+z))\
    \ or (x==(y+z))) and (is(typeof(x) == int) and is(typeof(y) == int) and is(typeof(z)\
    \ == int));\n}", "{\n    //Tuple!(int,int,int) integers = tuple(cast(int)x, cast(int)y,\
    \ cast(int)z);\n    return is(typeof(x) : int) && is(typeof(y) : int) && is(typeof(z)\
    \ : int) && ( x + y == z || x + z == y || y + z == x);\n}\n/*\n    Given a number\
    \ as an int, return it as a string.\n    If the number is negative, add a '-'\
    \ in front of it.\n    If the number is positive, add a '+' in front of it.\n\
    \    If the number is 0, just return \"0\".\n    \n    >>> number_sign(2)\n  \
    \  \"+2\"\n    \n    >>> number_sign(-10)\n    \"-10\"\n    \n    >>> number_sign(0)\n\
    \    \"0\"\n    \n    Examples\n    >>> number_sign(0)\n    \"0\"\n*/\nstring\
    \ number_sign(int num) \n{\n    return (num == 0) ? \"0\" : ((num < 0) ? \"-\"\
    \ ~ abs(num) : \"+\" ~ abs(num));\n}\n/*\n    Given a string, return a new string\
    \ with the characters in reverse order.\n    \n    >>> reverse_string(\"Hello\"\
    )\n    \"olleH\"\n    \n    >>> reverse_string(\"World\")\n    \"dlroW\"\n   \
    \ \n    >>> reverse_string(\" \")\n    \" \"\n*/\nstring reverse_string(string\
    \ str) \n{\n    return str.reverse;\n}\n/*\n    Given an integer, return a string\
    \ representation of the binary form of the number.\n    If the number is negative,\
    \ it should be in 2's complement.\n    There should be no leading zeros.\n   \
    \ \n    >>> binary_number(3)\n    \"11\"\n    \n    >>> binary_number(10)\n  \
    \  \"1010\"\n    \n    >>> binary_number(-3)\n    \"11111111111111111111111111111101\"\
    \n    \n    Examples\n    >>> binary_number(7)\n    \"111\"\n*/\nstring binary_number(int\
    \ num) \n{\n    string s = \"\";", "{\n    bool result = false;\n    if ((x -\
    \ y == z || x - z == y || y - x == z || y - z == x || z - x == y || z - y == x)\
    \ && \n       (cast(long)x == x && cast(long)y == y && cast(long)z == z))\n  \
    \  {\n        result = true;\n    }\n    return result;\n}", "{ \n    return \n\
    \        is(typeof(x) : int)\n        && is(typeof(y) : int)\n        && is(typeof(z)\
    \ : int)\n        && ((x == y + z) || (y == x + z) || (z == x + y));\n}", "{\n\
    \    bool res = false;\n    if (is(typeof(sum(x, y, z)) == int)) {\n        res\
    \ = (x == sum(y, z) || y == sum(x, z) || z == sum(x, y));\n    }\n    return res;\n\
    }\n/*\n    Create a function that takes a number.\n    It will iterate from 0\
    \ to the input number and multiply each number by 2.\n    It will append the product\
    \ to a out parameter array.\n    In the end it will return the out array.\n  \
    \  \n    >>> auto res = get_mult_by_2(3L);\n    >>> res[0]\n    0L\n    >>> res[1]\n\
    \    2L\n    >>> res[2]\n    4L\n    >>> res[3]\n    6L\n    >>> res[4]\n    8L\n\
    \    \n*/", "{\n    if(is(typeof(x) == long) && is(typeof(y) == long) && is(typeof(z)\
    \ == long))\n    {\n        int xc = to!int(x);\n        int yc = to!int(y);\n\
    \        int zc = to!int(z);\n        if(x == y + z || y == x + z || z == x +\
    \ y)\n        {\n            return true;\n        }\n        else\n        {\n\
    \            return false;\n        }\n    }\n    else\n    {\n        return\
    \ false;\n    }\n}", "{\n    \n    return is(typeof(x + y + z) == int) && (x +\
    \ y == z || x + z == y || y + z == x);\n}", "{\n  import std.math;\n  if(is(typeof(x)\
    \ == int) && is(typeof(y) == int) && is(typeof(z) == int))\n  {\n    if(x + y\
    \ == z || y + z == x || x + z == y)\n    {\n      return true;\n    }\n    else\n\
    \    {\n      return false;\n    }\n  }\n  else\n  {\n    return false;\n  }\n\
    }", "{\n    return ( (x+y==z) or (x+z==y) or (y+z==x) ) and (x-floor(x)==0) and\
    \ (y-floor(y)==0) and (z-floor(z)==0);\n}", "{\n    float a = y + z;\n    float\
    \ b = x + z;\n    float c = x + y;\n    if ((a == x) || (b == y) || (c == z))\
    \ {\n        return true;\n    }\n    else {\n        return false;\n    }", "{\
    \ \n    return (x + y == z) || (x + z == y) || (y + z == x);\n}", "{\n    return\
    \ is(typeof(x) == int && typeof(y) == int && typeof(z) == int && (x + y == z ||\
    \ x + z == y || y + z == x));\n}", "{\n    return (x == y + z) || (y == x + z)\
    \ || (z == x + y);\n}", "{\n    float sum_of_two = x + y;\n    float sum_of_three\
    \ = x + y + z;\n    if(sum_of_two == z)\n    {\n        if(is(typeof(x) == int)\
    \ && is(typeof(y) == int) && is(typeof(z) == int))\n        {\n            return\
    \ true;\n        }\n    }\n    else if(sum_of_two == y)\n    {\n        if(is(typeof(x)\
    \ == int) && is(typeof(y) == int) && is(typeof(z) == int))\n        {\n      \
    \      return true;\n        }\n    }\n    else if(sum_of_two == x)\n    {\n \
    \       if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int))\n\
    \        {\n            return true;\n        }\n    }\n    else if(sum_of_three\
    \ == y)\n    {\n        if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z)\
    \ == int))\n        {\n            return true;\n        }\n    }\n    else if(sum_of_three\
    \ == x)\n    {\n        if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z)\
    \ == int))\n        {\n            return true;\n        }\n    }\n    else if(sum_of_three\
    \ == z)\n    {\n        if(is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z)\
    \ == int))\n        {\n            return true;\n        }\n    }\n    else\n\
    \    {\n        return false;\n    }\n}", "{\n    if(typeid(x) == typeid(int)\
    \ && typeid(y) == typeid(int) && typeid(z) == typeid(int))\n    {\n        if(x\
    \ == y + z || y == x + z || z == x + y)\n        {\n            return true;\n\
    \        }\n        else\n        {\n            return false;\n        }\n  \
    \  }\n    else\n    {\n        return false;\n    }\n    \n    \n    \n    \n\
    \    \n}", "{\n  bool res = false;\n  if (x == y + z || y == x + z || z == x +\
    \ y) {\n    res = true;\n  }\n  return res;\n}", "{\n    float sum = x + y + z;\n\
    \    if (is(sum, int) && is(x, int) && is(y, int) && is(z, int))\n    {\n    \
    \    return true;\n    }\n    return false;\n}", "{\n    int xx = cast(int)x;\n\
    \    int yy = cast(int)y;\n    int zz = cast(int)z;\n    return (xx == yy + zz)\
    \ || (yy == xx + zz) || (zz == xx + yy);\n}", "{\n    float x_plus_y = x + y;\n\
    \    float y_plus_z = y + z;\n    float x_plus_z = x + z;\n    return (x_plus_y\
    \ == z || y_plus_z == x || x_plus_z == y);\n}\n//+ more examples\n//+ explain\n\
    //+ point out errors", "{\n    long x1 = long(x);\n    long y1 = long(y);\n  \
    \  long z1 = long(z);\n    return (x1 == (y1 + z1) || y1 == (x1 + z1) || z1 ==\
    \ (x1 + y1)) && (x1 == x && y1 == y && z1 == z);\n}", "{\n\treturn to!int(x) ==\
    \ (to!int(y) + to!int(z)) ||\n\t\t   to!int(y) == (to!int(x) + to!int(z)) ||\n\
    \t\t   to!int(z) == (to!int(x) + to!int(y));\n}", "{\n    return (x == y + z ||\
    \ y == x + z || z == x + y);\n}\n/*\n    Create a function that takes three arguments\
    \ with types \"int\", \"int\" and \"float\".\n    Returns true if two arguments\
    \ of type \"int\" are equal and the third of type \"float\" is greater than 100.\n\
    \    Returns false in any other cases.\n    \n    Examples\n    >>> any_int_100(1L,\
    \ 1L, 101.0)\n    true\n    \n    >>> any_int_100(1L, 1L, 99.9)\n    false\n \
    \   \n    >>> any_int_100(1L, 2L, 101.0)\n    false\n    \n    >>> any_int_100(1L,\
    \ 1L, 101.1)\n    false\n    \n    >>> any_int_100(1L, 2L, 99.9)\n    false\n\
    \    \n    >>> any_int_100(1L, 2L, 101.1)\n    false\n    \n    >>> any_int_100(1L,\
    \ 2L, 100.0)\n    false\n*/", "{\n    if (x == y + z)\n    {\n        return is(typeof(x)\
    \ == int) && is(typeof(y) == int) && is(typeof(z) == int);\n    }\n    else if\
    \ (y == x + z)\n    {\n        return is(typeof(x) == int) && is(typeof(y) ==\
    \ int) && is(typeof(z) == int);\n    }\n    else if (z == x + y)\n    {\n    \
    \    return is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int);\n\
    \    }\n    else\n    {\n        return false;\n    }\n}", "{\n    if ((is(typeof(x)\
    \ == int) && (is(typeof(y) == int) && (is(typeof(z) == int))))\n        && ((x\
    \ + y == z) || (x + z == y) || (y + z == x)))\n    {\n        return true;\n \
    \   }\n    else\n    {\n        return false;\n    }\n}", "{\n    // return (x\
    \ == (y + z)) && is(int x) && is(int y) && is(int z);\n    return (int)x == (int)y\
    \ + (int)z;\n}", "{\n    if ( ( (x+y) == z || (x+z) == y || (y+z) == x ) && is(typeof(x)==int)\
    \ && is(typeof(y)==int) && is(typeof(z)==int) )\n    {\n        return true;\n\
    \    } else\n    {\n        return false;\n    }\n}", "{ \n  return \n      (x\
    \ + y == z) ||\n      (x + z == y) ||\n      (y + z == x);\n}", "{\n    auto is_int\
    \ = (int)x == x && (int)y == y && (int)z == z;\n    auto sum = x + y;\n    auto\
    \ sum2 = x + z;\n    auto sum3 = y + z;\n    if (sum == z || sum2 == y || sum3\
    \ == x && is_int)\n    {\n        return true;\n    }\n    else \n    {\n    \
    \    return false;\n    }\n}", "{\n  if (x.is_integral() && y.is_integral() &&\
    \ z.is_integral())\n    return x + y == z || x + z == y || y + z == x;\n  return\
    \ false;\n}", "{\n    return ((x + y == z) || (x + z == y) || (y + z == x)) &&\
    \ (is(typeof(x) == int) && is(typeof(y) == int) && is(typeof(z) == int));\n  \
    \  \n}", "{\n    if (is(typeof(x) == int))\n    {\n        if (is(typeof(y) ==\
    \ int))\n        {\n            if (is(typeof(z) == int))\n            {\n   \
    \             if ((x + y == z) || (x + z == y) || (y + z == x))\n            \
    \    {\n                    return true;\n                }\n                else\n\
    \                {\n                    return false;\n                }\n   \
    \         }\n            else\n            {\n                return false;\n\
    \            }\n        }\n        else\n        {\n            return false;\n\
    \        }\n    }\n    else\n    {\n        return false;\n    }\n}", "{\n   \
    \ int n = int(x);\n    int m = int(y);\n    int o = int(z);\n    if (n == (m +\
    \ o) || m == (n + o) || o == (n + m))\n        return true;\n    else\n      \
    \  return false;\n}", "{\n    return (x == y + z) || (y == x + z) || (z == x +\
    \ y);\n}", "{\n    float z1 = z - x;\n    float z2 = z - y;\n    float y1 = y\
    \ - x;\n    float y2 = y - z;\n    float x1 = x - y;\n    float x2 = x - z;\n\
    \    bool z3 = is(typeof(z1) == long);\n    bool z4 = is(typeof(z2) == long);\n\
    \    bool y3 = is(typeof(y1) == long);\n    bool y4 = is(typeof(y2) == long);\n\
    \    bool x3 = is(typeof(x1) == long);\n    bool x4 = is(typeof(x2) == long);\n\
    \    return (z3 || z4 || y3 || y4 || x3 || x4);\n}", "{\n    if (is(typeof(x)\
    \ == int) && is(typeof(y) == int) && is(typeof(z) == int)) \n    {\n        if\
    \ ((x == y + z) || (y == x + z) || (z == x + y))\n        {\n            return\
    \ true;\n        }\n        else\n        {\n            return false;\n     \
    \   }\n    }\n    else\n    {\n        return false;\n    }\n}", "{\n    return\
    \ cast(bool)(x == y + z || y == x + z || z == x + y);\n}", "{\n    if(is(typeof(x)==int)\
    \ && is(typeof(y)==int) && is(typeof(z)==int)) \n    {\n        if(x == y + z\
    \ || x == y - z || x == z - y) \n        {\n            return true;\n       \
    \ }\n        else if(y == x + z || y == x - z || y == z - x) \n        {\n   \
    \         return true;\n        }\n        else if(z == x + y || z == x - y ||\
    \ z == y - x) \n        {\n            return true;\n        }\n        else \n\
    \        {\n            return false;\n        }\n    }\n    else \n    {\n  \
    \      return false;\n    }\n}", "{\n    if (is(typeof(x+y+z) == long) && (x+y\
    \ == z || x+z == y || y+z == x)) return true;\n    else return false;\n}", "{\n\
    \    return (x == (y + z) || y == (x + z) || z == (x + y)) && is(typeof(x) ==\
    \ int) && is(typeof(y) == int) && is(typeof(z) == int);\n}\n/*\nReturn the sum\
    \ of the `depth`-th level of nested tuples. The `depth`-th level of the tuple\
    \ `t` is defined by\n`t`'s depth, depth(t) minus `depth`. The `depth`-th level\
    \ of `t` is recursively defined as follows:", "{\n    long xl = long(x);\n   \
    \ long yl = long(y);\n    long zl = long(z);\n    if (xl != x || yl != y || zl\
    \ != z)\n        return false;\n    return (xl == (y + z)) || (yl == (x + z))\
    \ || (zl == (x + y));\n}", "{\n    return \n        is_integral_float(x) \n  \
    \      && is_integral_float(y) \n        && is_integral_float(z) \n        &&\
    \ (x + y == z || y + z == x || x + z == y);\n}", "{\n    // write your code here\n\
    \    // 3 cases: \n    // x + y = z\n    // x + z = y\n    // y + z = x\n    int\
    \ dx = (int)x;\n    int dy = (int)y;\n    int dz = (int)z;\n    bool res = 0;\n\
    \    if (dx + dy == dz)\n        res = 1;\n    if (dx + dz == dy)\n        res\
    \ = 1;\n    if (dy + dz == dx)\n        res = 1;\n    return res;\n}", "{\n\t\
    float max = 0.0;\n\tfloat min = 0.0;\n\t\n\tfloat sum = x + y + z;\n\t\n\tif(x\
    \ >= y)\n\t{\n\t\tmax = x;\n\t\tmin = y;\n\t}\n\telse\n\t{\n\t\tmax = y;\n\t\t\
    min = x;\n\t}\n\t\n\tif(max < z)\n\t{\n\t\tmax = z;\n\t}\n\telse if(min > z)\n\
    \t{\n\t\tmin = z;\n\t}\n\t\n\treturn is_even(min) && is_even(sum - min - max)\
    \ && is_even(max - min) && is_even(sum - max);\n}", "{\n    //return ((x + y ==\
    \ z) || (x + z == y) || (y + z == x));\n    return ((x + y == z) || (x + z ==\
    \ y) || (y + z == x)) && (is(typeof(x) == long)) && (is(typeof(y) == long)) &&\
    \ (is(typeof(z) == long));\n}", "{\n    if (is(typeof(x) == int) && is(typeof(y)\
    \ == int) && is(typeof(z) == int)) \n    {\n        if (x + y == z || x + z ==\
    \ y || y + z == x) \n        {\n            return true;\n        }\n    }\n \
    \   return false;\n}", "{ \n    if (x == y + z || y == x + z || z == x + y) \n\
    \        return true; \n    else\n        return false; \n} ", "{\n    float sum\
    \ = 0;\n    if(y + z == x)\n    {\n        return true;\n    }\n    else if(x\
    \ + z == y)\n    {\n        return true;\n    }\n    else if(x + y == z)\n   \
    \ {\n        return true;\n    }\n    else\n    {\n        return false;\n   \
    \ }\n}\n/*\nCreate a function that takes two numbers and returns the maximum of\
    \ the two.", "{\n   if ( is(typeof(x)) && is(typeof(y)) && is(typeof(z)) )\n \
    \  {\n     if ( (x == (y + z)) || (y == (x + z)) || (z == (x + y)) )\n       return\
    \ true;\n     else\n       return false;\n   }\n   else \n   {\n     return false;\n\
    \   } \n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
