name: HumanEval_81_numerical_letter_grade
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    int i = 0;\n    foreach(grade; grades)\n    {\n\
    \        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n\
    \        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i]\
    \ = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else if(grade < 0.0)\n        {\n            letter_grades[i] = \"E\";\n\
    \        }\n        i++;\n    }\n    return letter_grades;\n}\nunittest\n{\n \
    \   alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0e9ikk2h.d(96): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42984d]\\n??:? void tmp0e9ikk2h.__unittest_L92_C1()\
    \ [0x4285a5]\\n??:? void tmp0e9ikk2h.__modtest() [0x428ab4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4295a6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b0a5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b134]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b031]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42957d]\\n??:? runModuleUnitTests [0x42e1a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429d10]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c97]\\n??:? _d_run_main [0x429c02]\\n??:? main [0x428ac7]\\\
    n??:? __libc_start_main [0x4ad7c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] result = [\"\", \"\"\
    , \"\", \"\", \"\"];\n    for (int i = 0; i < grades.length; i++)\n    {\n   \
    \     if (grades[i] >= 4.0)\n        {\n            result[i] = \"A+\";\n    \
    \    }\n        else if (grades[i] >= 3.7)\n        {\n            result[i] =\
    \ \"A\";\n        }\n        else if (grades[i] >= 3.3)\n        {\n         \
    \   result[i] = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n     \
    \   {\n            result[i] = \"B+\";\n        }\n        else if (grades[i]\
    \ >= 2.7)\n        {\n            result[i] = \"B\";\n        }\n        else\
    \ if (grades[i] >= 2.3)\n        {\n            result[i] = \"B-\";\n        }\n\
    \        else if (grades[i] >= 2.0)\n        {\n            result[i] = \"C+\"\
    ;\n        }\n        else if (grades[i] >= 1.7)\n        {\n            result[i]\
    \ = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n        {\n       \
    \     result[i] = \"C-\";\n        }\n        else if (grades[i] >= 1.0)\n   \
    \     {\n            result[i] = \"D+\";\n        }\n        else if (grades[i]\
    \ >= 0.7)\n        {\n            result[i] = \"D\";\n        }\n        else\
    \ if (grades[i] >= 0.0)\n        {\n            result[i] = \"D-\";\n        }\n\
    \        else if (grades[i] >= 0.0)\n        {\n            result[i] = \"E\"\
    ;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgfhlgt9w.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429a1d]\\n??:? void tmpgfhlgt9w.__unittest_L90_C1()\
    \ [0x428779]\\n??:? void tmpgfhlgt9w.__modtest() [0x428c88]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e53f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429776]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b219]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b2a8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b1a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42974d]\\n??:? runModuleUnitTests [0x42e315]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429ee0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429e67]\\n??:? _d_run_main [0x429dd2]\\n??:? main [0x428c9b]\\\
    n??:? __libc_start_main [0x1d2fc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    import std.array;\n    import\
    \ std.typecons;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.conv;\n    auto g = grades;\n    auto letter_grade = [\"A+\", \"A\", \"\
    A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"\
    E\"].dup;\n    auto grade_range = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3,\
    \ 1.0, 0.7, 0.0, 0.0];\n    auto l_grade = new Tuple!(string, float)[13];\n  \
    \  for (size_t i = 0; i < 13; i++)\n    {\n        l_grade[i] = tuple(letter_grade[i],\
    \ grade_range[i]);\n    }\n    // writeln(g.max);\n    foreach (ref i; g)\n  \
    \  {\n        foreach (ref j; l_grade)\n        {\n            if (i >= j[1])\n\
    \            {\n                writeln(j[0]);\n                break;\n     \
    \       }\n        }\n    }\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdstnhy4d.d(52): Error: `writeln` is not defined, perhaps `import\
    \ std.stdio;` is needed?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpdstnhy4d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] answer = new string[grades.length];\n\
    \    int x = 0;\n    foreach(auto grade; grades) \n    {\n        if(grade >=\
    \ 4.0) \n        {\n            answer[x] = \"A+\";\n        }\n        else if(grade\
    \ >= 3.7) \n        {\n            answer[x] = \"A\";\n        }\n        else\
    \ if(grade >= 3.3) \n        {\n            answer[x] = \"A-\";\n        }\n \
    \       else if(grade >= 3.0) \n        {\n            answer[x] = \"B+\";\n \
    \       }\n        else if(grade >= 2.7) \n        {\n            answer[x] =\
    \ \"B\";\n        }\n        else if(grade >= 2.3) \n        {\n            answer[x]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0) \n        {\n          \
    \  answer[x] = \"C+\";\n        }\n        else if(grade >= 1.7) \n        {\n\
    \            answer[x] = \"C\";\n        }\n        else if(grade >= 1.3) \n \
    \       {\n            answer[x] = \"C-\";\n        }\n        else if(grade >=\
    \ 1.0) \n        {\n            answer[x] = \"D+\";\n        }\n        else if(grade\
    \ >= 0.7) \n        {\n            answer[x] = \"D\";\n        }\n        else\
    \ if(grade >= 0.0) \n        {\n            answer[x] = \"D-\";\n        }\n \
    \       else if(grade == 0.0) \n        {\n            answer[x] = \"E\";\n  \
    \      }\n        x++;\n    }\n    return answer;\n}\n/*\nYou are going to a rock\
    \ concert and you want to bring a cooler with drinks. \n    You want to bring\
    \ as many beers as possible, but unfortunately you can only \n    bring one beer\
    \ at a time into the concert, and you can't leave the concert with \n    more\
    \ than one beer. You can however dispose of as many beers as you want outside\
    \ \n    the concert.\n    The concert is number\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpge9qd8sx.d(34): Error: basic type expected, not `auto`\\n/tmp/tmpge9qd8sx.d(34):\
    \ Error: no identifier for declarator `_error_`\\n/tmp/tmpge9qd8sx.d(34): Error:\
    \ found `auto` when expecting `;`\\n/tmp/tmpge9qd8sx.d(34): Error: found `;` when\
    \ expecting `)`\\n/tmp/tmpge9qd8sx.d(34): Error: found `)` when expecting `;`\
    \ following statement\\n/tmp/tmpge9qd8sx.d(92): Error: unterminated /* */ comment\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpge9qd8sx.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = [];\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpimrgbww7.d(33): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimrgbww7.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    int index = 0;\n    foreach(grade; grades)\n   \
    \ {\n        if(grade > 4.0)\n        {\n            letter_grades[index] = \"\
    A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[index]\
    \ = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[index]\
    \ = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[index]\
    \ = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[index]\
    \ = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[index]\
    \ = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[index]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[index]\
    \ = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[index]\
    \ = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[index]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[index]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[index]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[index]\
    \ = \"E\";\n        }\n        index++;\n    }\n    return letter_grades;\n}\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_dq22hke.d(96): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429835]\\n??:? void tmp_dq22hke.__unittest_L92_C1()\
    \ [0x42858d]\\n??:? void tmp_dq22hke.__modtest() [0x428a9c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42958e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b08d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b019]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429565]\\n??:? runModuleUnitTests [0x42e189]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c7f]\\n??:? _d_run_main [0x429bea]\\n??:? main [0x428aaf]\\\
    n??:? __libc_start_main [0x55d99554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{ \n    string[] result;\n    result.length\
    \ = grades.length;\n    foreach(index, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            result[index] = \"A+\";\n        }\n       \
    \ else if(grade >= 3.7)\n        {\n            result[index] = \"A\";\n     \
    \   }\n        else if(grade >= 3.3)\n        {\n            result[index] = \"\
    A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            result[index]\
    \ = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n           \
    \ result[index] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n\
    \            result[index] = \"B-\";\n        }\n        else if(grade >= 2.0)\n\
    \        {\n            result[index] = \"C+\";\n        }\n        else if(grade\
    \ >= 1.7)\n        {\n            result[index] = \"C\";\n        }\n        else\
    \ if(grade >= 1.3)\n        {\n            result[index] = \"C-\";\n        }\n\
    \        else if(grade >= 1.0)\n        {\n            result[index] = \"D+\"\
    ;\n        }\n        else if(grade >= 0.7)\n        {\n            result[index]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            result[index]\
    \ = \"D-\";\n        }\n        else if(grade >= 0.0)\n        {\n           \
    \ result[index] = \"E\";\n        }\n    }\n    return result;\n} \nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyly24215.d(95): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429855]\\n??:? void tmpyly24215.__unittest_L91_C1()\
    \ [0x4285b1]\\n??:? void tmpyly24215.__modtest() [0x428ac0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f447]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4295ae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42c121]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42c1b0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42c0ad]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429585]\\n??:? runModuleUnitTests [0x42f21d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429d18]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c9f]\\n??:? _d_run_main [0x429c0a]\\n??:? main [0x428ad3]\\\
    n??:? __libc_start_main [0x854b8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    import std.algorithm.searching;\n\
    \    import std.range;\n    import std.array;\n    import std.conv;\n    import\
    \ std.typecons;\n    import std.format;\n    import std.math;\n    import std.typecons;\n\
    \    import std.array;\n    import std.range;\n    import std.algorithm.searching;\n\
    \    import std.string;\n    import std.conv;\n    import std.typecons;\n    import\
    \ std.array;\n    import std.algorithm.comparison;\n    import std.string;\n \
    \   import std.range;\n    import std.conv;\n    import std.algorithm.comparison;\n\
    \    import std.typecons;\n    import std.array;\n    import std.range;\n    import\
    \ std.algorithm.comparison;\n    import std.algorithm.searching;\n    import std.conv;\n\
    \    import std.math;\n    import std.typecons;\n    import std.array;\n    import\
    \ std.range;\n    import std.algorithm.comparison;\n    import std.algorithm.searching;\n\
    \    import std.conv;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.array;\n    import std.range;\n    import std.algorithm.comparison;\n  \
    \  import std.algorithm.searching;\n    import std.conv;\n    import std.math;\n\
    \    import std.typecons;\n    import std.array;\n    import std.range;\n    import\
    \ std.algorithm.comparison;\n    import std.algorithm.searching;\n    import std.conv;\n\
    \    import std.math;\n    import std.typecons;\n    import std.array;\n    import\
    \ std.range;\n    import std.algorithm.comparison;\n    import std.algorithm.searching;\n\
    \    import std.conv;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.array;\n    import std.range;\n    import std.algorithm.comparison;\n  \
    \  import std.algorithm.searching;\n    import std.conv;\n   \nunittest\n{\n \
    \   alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_s702836.d(94): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_s702836.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\tstring[] output;\n\tforeach(i;\
    \ 0 .. grades.length)\n\t{\n\t\tif(grades[i] >= 4.0)\n\t\t{\n\t\t\toutput ~= \"\
    A+\";\n\t\t}\n\t\telse if(grades[i] >= 3.7)\n\t\t{\n\t\t\toutput ~= \"A\";\n\t\
    \t}\n\t\telse if(grades[i] >= 3.3)\n\t\t{\n\t\t\toutput ~= \"A-\";\n\t\t}\n\t\t\
    else if(grades[i] >= 3.0)\n\t\t{\n\t\t\toutput ~= \"B+\";\n\t\t}\n\t\telse if(grades[i]\
    \ >= 2.7)\n\t\t{\n\t\t\toutput ~= \"B\";\n\t\t}\n\t\telse if(grades[i] >= 2.3)\n\
    \t\t{\n\t\t\toutput ~= \"B-\";\n\t\t}\n\t\telse if(grades[i] >= 2.0)\n\t\t{\n\t\
    \t\toutput ~= \"C+\";\n\t\t}\n\t\telse if(grades[i] >= 1.7)\n\t\t{\n\t\t\toutput\
    \ ~= \"C\";\n\t\t}\n\t\telse if(grades[i] >= 1.3)\n\t\t{\n\t\t\toutput ~= \"C-\"\
    ;\n\t\t}\n\t\telse if(grades[i] >= 1.0)\n\t\t{\n\t\t\toutput ~= \"D+\";\n\t\t\
    }\n\t\telse if(grades[i] >= 0.7)\n\t\t{\n\t\t\toutput ~= \"D\";\n\t\t}\n\t\telse\
    \ if(grades[i] >= 0.0)\n\t\t{\n\t\t\toutput ~= \"D-\";\n\t\t}\n\t\telse\n\t\t\
    {\n\t\t\toutput ~= \"E\";\n\t\t}\n\t}\n\treturn output;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjtgy05r3.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429bb5]\\n??:? void tmpjtgy05r3.__unittest_L90_C1()\
    \ [0x428911]\\n??:? void tmpjtgy05r3.__modtest() [0x428e20]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f0c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42990e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42bd9d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42be2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42bd29]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4298e5]\\n??:? runModuleUnitTests [0x42ee99]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42a078]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429fff]\\n??:? _d_run_main [0x429f6a]\\n??:? main [0x428e33]\\\
    n??:? __libc_start_main [0xa1a4c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp33s7xelw.d(33): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp33s7xelw.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] list = new string[grades.length];\n\
    \    foreach(int i, float grade; grades)\n    {\n        if(grade == 4.0)\n  \
    \      {\n            list[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n\
    \        {\n            list[i] = \"A\";\n        }\n        else if(grade > 3.3)\n\
    \        {\n            list[i] = \"A-\";\n        }\n        else if(grade >\
    \ 3.0)\n        {\n            list[i] = \"B+\";\n        }\n        else if(grade\
    \ > 2.7)\n        {\n            list[i] = \"B\";\n        }\n        else if(grade\
    \ > 2.3)\n        {\n            list[i] = \"B-\";\n        }\n        else if(grade\
    \ > 2.0)\n        {\n            list[i] = \"C+\";\n        }\n        else if(grade\
    \ > 1.7)\n        {\n            list[i] = \"C\";\n        }\n        else if(grade\
    \ > 1.3)\n        {\n            list[i] = \"C-\";\n        }\n        else if(grade\
    \ > 1.0)\n        {\n            list[i] = \"D+\";\n        }\n        else if(grade\
    \ > 0.7)\n        {\n            list[i] = \"D\";\n        }\n        else if(grade\
    \ > 0.0)\n        {\n            list[i] = \"D-\";\n        }\n        else if(grade\
    \ == 0.0)\n        {\n            list[i] = \"E\";\n        }\n    }\n    return\
    \ list;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n   \
    \ assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdgfx5hog.d(94): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x429835]\\n??:? void tmpdgfx5hog.__unittest_L90_C1()\
    \ [0x428591]\\n??:? void tmpdgfx5hog.__modtest() [0x428aa0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e3b3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42958e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b08d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b019]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x429565]\\n??:? runModuleUnitTests [0x42e189]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429cf8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429c7f]\\n??:? _d_run_main [0x429bea]\\n??:? main [0x428ab3]\\\
    n??:? __libc_start_main [0x57029554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    double[] numerical_letter_grade\
    \ = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0};\n    string[]\
    \ letter_grade = {\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\"\
    , \"C-\", \"D+\", \"D\", \"D-\", \"E\"};\n    string[] array;\n    int i = 0;\n\
    \    foreach(float gr; grades)\n    {\n        if(i == 0)\n        {\n       \
    \     array ~= letter_grade[0];\n        }\n        else\n        {\n        \
    \    int index = 0;\n            foreach(float num; numerical_letter_grade)\n\
    \            {\n                if(gr >= num)\n                {\n           \
    \         array ~= letter_grade[index];\n                    break;\n        \
    \        }\n                index++;\n            }\n        }\n        i++;\n\
    \    }\n    return array;\n}\n//------------------------------\nunittest\n{\n\
    \    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6ceh7cbm.d(32): Error: a struct is not a valid initializer for\
    \ a `double[]`\\n/tmp/tmp6ceh7cbm.d(33): Error: a struct is not a valid initializer\
    \ for a `string[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ceh7cbm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    import std.math;\n    string[]\
    \  letter_grades=new string[];\n    foreach(element; grades)\n    {\n        if(element>=4.0)\n\
    \            letter_grades=letter_grades~\"A+\";\n        else if(element>=3.7)\n\
    \            letter_grades=letter_grades~\"A\";\n        else if(element>=3.3)\n\
    \            letter_grades=letter_grades~\"A-\";\n        else if(element>=3.0)\n\
    \            letter_grades=letter_grades~\"B+\";\n        else if(element>=2.7)\n\
    \            letter_grades=letter_grades~\"B\";\n        else if(element>=2.3)\n\
    \            letter_grades=letter_grades~\"B-\";\n        else if(element>=2.0)\n\
    \            letter_grades=letter_grades~\"C+\";\n        else if(element>=1.7)\n\
    \            letter_grades=letter_grades~\"C\";\n        else if(element>=1.3)\n\
    \            letter_grades=letter_grades~\"C-\";\n        else if(element>=1.0)\n\
    \            letter_grades=letter_grades~\"D+\";\n        else if(element>=0.7)\n\
    \            letter_grades=letter_grades~\"D\";\n        else if(element>=0.0)\n\
    \            letter_grades=letter_grades~\"D-\";\n        else\n            letter_grades=letter_grades~\"\
    E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2b82xyjo.d(33): Error: new can only create structs, dynamic arrays\
    \ or class objects, not `string[]`\\'s\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp2b82xyjo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n  assert(grades.length > 0);\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_rzcz03h.d(33): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_rzcz03h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] grades_letter;\n  \
    \  grades_letter.length = grades.length;\n    for (int i = 0; i < grades.length;\
    \ i++)\n    {\n        if (grades[i] == 4.0)\n        {\n            grades_letter[i]\
    \ = \"A+\";\n        }\n        else if (grades[i] > 3.7)\n        {\n       \
    \     grades_letter[i] = \"A\";\n        }\n        else if (grades[i] > 3.3)\n\
    \        {\n            grades_letter[i] = \"A-\";\n        }\n        else if\
    \ (grades[i] > 3.0)\n        {\n            grades_letter[i] = \"B+\";\n     \
    \   }\n        else if (grades[i] > 2.7)\n        {\n            grades_letter[i]\
    \ = \"B\";\n        }\n        else if (grades[i] > 2.3)\n        {\n        \
    \    grades_letter[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n\
    \        {\n            grades_letter[i] = \"C+\";\n        }\n        else if\
    \ (grades[i] > 1.7)\n        {\n            grades_letter[i] = \"C\";\n      \
    \  }\n        else if (grades[i] > 1.3)\n        {\n            grades_letter[i]\
    \ = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n        {\n       \
    \     grades_letter[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n\
    \        {\n            grades_letter[i] = \"D\";\n        }\n        else if\
    \ (grades[i] > 0.0)\n        {\n            grades_letter[i] = \"D-\";\n     \
    \   }\n        else\n        {\n            grades_letter[i] = \"E\";\n      \
    \  }\n    }\n    return grades_letter;\n}\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7aej2j5x.d(95): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299b5]\\n??:? void tmp7aej2j5x.__unittest_L91_C1()\
    \ [0x42870d]\\n??:? void tmp7aej2j5x.__modtest() [0x428c1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42f5a7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42970e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42c281]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42c310]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42c20d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296e5]\\n??:? runModuleUnitTests [0x42f37d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e78]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429dff]\\n??:? _d_run_main [0x429d6a]\\n??:? main [0x428c2f]\\\
    n??:? __libc_start_main [0xe84b0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] ret;\n    int m = grades.length;\n\
    \    ret.length = m;\n    foreach(int i, float g; grades)\n    {\n        if(g\
    \ > 4.0) ret[i] = \"A+\";\n        else if(g > 3.7) ret[i] = \"A\";\n        else\
    \ if(g > 3.3) ret[i] = \"A-\";\n        else if(g > 3.0) ret[i] = \"B+\";\n  \
    \      else if(g > 2.7) ret[i] = \"B\";\n        else if(g > 2.3) ret[i] = \"\
    B-\";\n        else if(g > 2.0) ret[i] = \"C+\";\n        else if(g > 1.7) ret[i]\
    \ = \"C\";\n        else if(g > 1.3) ret[i] = \"C-\";\n        else if(g > 1.0)\
    \ ret[i] = \"D+\";\n        else if(g > 0.7) ret[i] = \"D\";\n        else if(g\
    \ > 0.0) ret[i] = \"D-\";\n        else ret[i] = \"E\";\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxasovoda.d(33): Error: cannot implicitly convert expression `grades.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpxasovoda.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(i;0..grades.length)\n    {\n        if(grades[i] == 4.0)\n        {\n\
    \            letter_grades[i] = \"A+\";\n        }\n        else if(grades[i]\
    \ >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n     \
    \   else if(grades[i] >= 3.3)\n        {\n            letter_grades[i] = \"A-\"\
    ;\n        }\n        else if(grades[i] >= 3.0)\n        {\n            letter_grades[i]\
    \ = \"B+\";\n        }\n        else if(grades[i] >= 2.7)\n        {\n       \
    \     letter_grades[i] = \"B\";\n        }\n        else if(grades[i] >= 2.3)\n\
    \        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grades[i]\
    \ >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n    \
    \    else if(grades[i] >= 1.7)\n        {\n            letter_grades[i] = \"C\"\
    ;\n        }\n        else if(grades[i] >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grades[i] >= 1.0)\n        {\n       \
    \     letter_grades[i] = \"D+\";\n        }\n        else if(grades[i] >= 0.7)\n\
    \        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grades[i]\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else if(grades[i] == 0.0)\n        {\n            letter_grades[i] = \"E\"\
    ;\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpiltjqp2n.d(37): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x429a8e]\\n??:? immutable(char)[][] tmpiltjqp2n.numerical_letter_grade(float[])\
    \ [0x427fc9]\\n??:? void tmpiltjqp2n.__unittest_L90_C1() [0x42866e]\\n??:? void\
    \ tmpiltjqp2n.__modtest() [0x428c48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e4ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x429736]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1d9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b268]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b165]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42970d]\\n??:? runModuleUnitTests [0x42e2d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429ea0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429e27]\\n??:? _d_run_main [0x429d92]\\n??:? main [0x428c5b]\\\
    n??:? __libc_start_main [0xf2d3a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    // your implementation goes\
    \ here\n    string[] letter_grade = new string[grades.length];\n    for(int i\
    \ = 0; i < grades.length; i++)\n    {\n        if(grades[i] >= 4.0)\n        {\n\
    \            letter_grade[i] = \"A+\";\n        }\n        else if(grades[i] >=\
    \ 3.7)\n        {\n            letter_grade[i] = \"A\";\n        }\n        else\
    \ if(grades[i] >= 3.3)\n        {\n            letter_grade[i] = \"A-\";\n   \
    \     }\n        else if(grades[i] >= 3.0)\n        {\n            letter_grade[i]\
    \ = \"B+\";\n        }\n        else if(grades[i] >= 2.7)\n        {\n       \
    \     letter_grade[i] = \"B\";\n        }\n        else if(grades[i] >= 2.3)\n\
    \        {\n            letter_grade[i] = \"B-\";\n        }\n        else if(grades[i]\
    \ >= 2.0)\n        {\n            letter_grade[i] = \"C+\";\n        }\n     \
    \   else if(grades[i] >= 1.7)\n        {\n            letter_grade[i] = \"C\"\
    ;\n        }\n        else if(grades[i] >= 1.3)\n        {\n            letter_grade[i]\
    \ = \"C-\";\n        }\n        else if(grades[i] >= 1.0)\n        {\n       \
    \     letter_grade[i] = \"D+\";\n        }\n        else if(grades[i] >= 0.7)\n\
    \        {\n            letter_grade[i] = \"D\";\n        }\n        else if(grades[i]\
    \ >= 0.0)\n        {\n            letter_grade[i] = \"D-\";\n        }\n     \
    \   else\n        {\n            letter_grade[i] = \"E\";\n        }\n    }\n\
    \    return letter_grade;\n}\n// counting sort\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx0rmk6j6.d(96): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4299a5]\\n??:? void tmpx0rmk6j6.__unittest_L92_C1()\
    \ [0x428701]\\n??:? void tmpx0rmk6j6.__modtest() [0x428c10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e523]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4296fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42b1fd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42b189]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x4296d5]\\n??:? runModuleUnitTests [0x42e2f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429e68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429def]\\n??:? _d_run_main [0x429d5a]\\n??:? main [0x428c23]\\\
    n??:? __libc_start_main [0xa1a80554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letters = new string[grades.length];\n\
    \    for (int i = 0; i < grades.length; i++)\n    {\n        string grade = \"\
    \";\n        float gpa = grades[i];\n        if (gpa == 4.0) grade = \"A+\";\n\
    \        else if (gpa > 3.7) grade = \"A\";\n        else if (gpa > 3.3) grade\
    \ = \"A-\";\n        else if (gpa > 3.0) grade = \"B+\";\n        else if (gpa\
    \ > 2.7) grade = \"B\";\n        else if (gpa > 2.3) grade = \"B-\";\n       \
    \ else if (gpa > 2.0) grade = \"C+\";\n        else if (gpa > 1.7) grade = \"\
    C\";\n        else if (gpa > 1.3) grade = \"C-\";\n        else if (gpa > 1.0)\
    \ grade = \"D+\";\n        else if (gpa > 0.7) grade = \"D\";\n        else if\
    \ (gpa > 0.0) grade = \"D-\";\n        else grade = \"E\";\n        letters[i]\
    \ = grade;\n    }\n    return letters;\n}\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfedzwzhh.d(58): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42965d]\\n??:? void tmpfedzwzhh.__unittest_L54_C1()\
    \ [0x4283b5]\\n??:? void tmpfedzwzhh.__modtest() [0x4288c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e1db]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x4293b6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42aeb5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42af44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42ae41]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42938d]\\n??:? runModuleUnitTests [0x42dfb1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x429b20]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x429aa7]\\n??:? _d_run_main [0x429a12]\\n??:? main [0x4288d7]\\\
    n??:? __libc_start_main [0xf373d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    \n}\n \nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp890i8srp.d(30): Error: function `tmp890i8srp.numerical_letter_grade`\
    \ has no `return` statement, but is expected to return a value of type `string[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp890i8srp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
