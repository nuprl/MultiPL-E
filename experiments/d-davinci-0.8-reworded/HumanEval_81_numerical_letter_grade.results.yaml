language: d
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    int i = 0;\n    foreach(grade; grades)\n    {\n\
    \        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n\
    \        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i]\
    \ = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n           \
    \ letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n     \
    \   {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n    \
    \    else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n     \
    \   {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else if(grade < 0.0)\n        {\n            letter_grades[i] = \"E\";\n\
    \        }\n        i++;\n    }\n    return letter_grades;\n}\nunittest\n{\n \
    \   alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp0e9ikk2h.d(96): unittest failure\n----------------\n??:?
    _d_unittestp [0x42984d]\n??:? void tmp0e9ikk2h.__unittest_L92_C1() [0x4285a5]\n??:?
    void tmp0e9ikk2h.__modtest() [0x428ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4295a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b0a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b134]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b031]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42957d]\n??:? runModuleUnitTests [0x42e1a1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429d10]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429c97]\n??:? _d_run_main [0x429c02]\n??:? main [0x428ac7]\n??:?
    __libc_start_main [0x4ad7c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] result = [\"\", \"\"\
    , \"\", \"\", \"\"];\n    for (int i = 0; i < grades.length; i++)\n    {\n   \
    \     if (grades[i] >= 4.0)\n        {\n            result[i] = \"A+\";\n    \
    \    }\n        else if (grades[i] >= 3.7)\n        {\n            result[i] =\
    \ \"A\";\n        }\n        else if (grades[i] >= 3.3)\n        {\n         \
    \   result[i] = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n     \
    \   {\n            result[i] = \"B+\";\n        }\n        else if (grades[i]\
    \ >= 2.7)\n        {\n            result[i] = \"B\";\n        }\n        else\
    \ if (grades[i] >= 2.3)\n        {\n            result[i] = \"B-\";\n        }\n\
    \        else if (grades[i] >= 2.0)\n        {\n            result[i] = \"C+\"\
    ;\n        }\n        else if (grades[i] >= 1.7)\n        {\n            result[i]\
    \ = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n        {\n       \
    \     result[i] = \"C-\";\n        }\n        else if (grades[i] >= 1.0)\n   \
    \     {\n            result[i] = \"D+\";\n        }\n        else if (grades[i]\
    \ >= 0.7)\n        {\n            result[i] = \"D\";\n        }\n        else\
    \ if (grades[i] >= 0.0)\n        {\n            result[i] = \"D-\";\n        }\n\
    \        else if (grades[i] >= 0.0)\n        {\n            result[i] = \"E\"\
    ;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpgfhlgt9w.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x429a1d]\n??:? void tmpgfhlgt9w.__unittest_L90_C1() [0x428779]\n??:?
    void tmpgfhlgt9w.__modtest() [0x428c88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429776]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b219]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b2a8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b1a5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42974d]\n??:? runModuleUnitTests [0x42e315]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429ee0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429e67]\n??:? _d_run_main [0x429dd2]\n??:? main [0x428c9b]\n??:?
    __libc_start_main [0x1d2fc554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    import std.array;\n    import\
    \ std.typecons;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.conv;\n    auto g = grades;\n    auto letter_grade = [\"A+\", \"A\", \"\
    A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"\
    E\"].dup;\n    auto grade_range = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3,\
    \ 1.0, 0.7, 0.0, 0.0];\n    auto l_grade = new Tuple!(string, float)[13];\n  \
    \  for (size_t i = 0; i < 13; i++)\n    {\n        l_grade[i] = tuple(letter_grade[i],\
    \ grade_range[i]);\n    }\n    // writeln(g.max);\n    foreach (ref i; g)\n  \
    \  {\n        foreach (ref j; l_grade)\n        {\n            if (i >= j[1])\n\
    \            {\n                writeln(j[0]);\n                break;\n     \
    \       }\n        }\n    }\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdstnhy4d.d(52): Error: `writeln` is not defined, perhaps `import
    std.stdio;` is needed?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdstnhy4d.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] answer = new string[grades.length];\n\
    \    int x = 0;\n    foreach(auto grade; grades) \n    {\n        if(grade >=\
    \ 4.0) \n        {\n            answer[x] = \"A+\";\n        }\n        else if(grade\
    \ >= 3.7) \n        {\n            answer[x] = \"A\";\n        }\n        else\
    \ if(grade >= 3.3) \n        {\n            answer[x] = \"A-\";\n        }\n \
    \       else if(grade >= 3.0) \n        {\n            answer[x] = \"B+\";\n \
    \       }\n        else if(grade >= 2.7) \n        {\n            answer[x] =\
    \ \"B\";\n        }\n        else if(grade >= 2.3) \n        {\n            answer[x]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0) \n        {\n          \
    \  answer[x] = \"C+\";\n        }\n        else if(grade >= 1.7) \n        {\n\
    \            answer[x] = \"C\";\n        }\n        else if(grade >= 1.3) \n \
    \       {\n            answer[x] = \"C-\";\n        }\n        else if(grade >=\
    \ 1.0) \n        {\n            answer[x] = \"D+\";\n        }\n        else if(grade\
    \ >= 0.7) \n        {\n            answer[x] = \"D\";\n        }\n        else\
    \ if(grade >= 0.0) \n        {\n            answer[x] = \"D-\";\n        }\n \
    \       else if(grade == 0.0) \n        {\n            answer[x] = \"E\";\n  \
    \      }\n        x++;\n    }\n    return answer;\n}\n/*\nYou are going to a rock\
    \ concert and you want to bring a cooler with drinks. \n    You want to bring\
    \ as many beers as possible, but unfortunately you can only \n    bring one beer\
    \ at a time into the concert, and you can't leave the concert with \n    more\
    \ than one beer. You can however dispose of as many beers as you want outside\
    \ \n    the concert.\n    The concert is number\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpge9qd8sx.d(34): Error: basic type expected, not `auto`\n/tmp/tmpge9qd8sx.d(34):
    Error: no identifier for declarator `_error_`\n/tmp/tmpge9qd8sx.d(34): Error:
    found `auto` when expecting `;`\n/tmp/tmpge9qd8sx.d(34): Error: found `;` when
    expecting `)`\n/tmp/tmpge9qd8sx.d(34): Error: found `)` when expecting `;` following
    statement\n/tmp/tmpge9qd8sx.d(92): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpge9qd8sx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = [];\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpimrgbww7.d(33): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpimrgbww7.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    int index = 0;\n    foreach(grade; grades)\n   \
    \ {\n        if(grade > 4.0)\n        {\n            letter_grades[index] = \"\
    A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[index]\
    \ = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[index]\
    \ = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[index]\
    \ = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[index]\
    \ = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[index]\
    \ = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[index]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[index]\
    \ = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[index]\
    \ = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[index]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[index]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[index]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[index]\
    \ = \"E\";\n        }\n        index++;\n    }\n    return letter_grades;\n}\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_dq22hke.d(96): unittest failure\n----------------\n??:?
    _d_unittestp [0x429835]\n??:? void tmp_dq22hke.__unittest_L92_C1() [0x42858d]\n??:?
    void tmp_dq22hke.__modtest() [0x428a9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429cf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429c7f]\n??:? _d_run_main [0x429bea]\n??:? main [0x428aaf]\n??:?
    __libc_start_main [0x55d99554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{ \n    string[] result;\n    result.length\
    \ = grades.length;\n    foreach(index, grade; grades)\n    {\n        if(grade\
    \ >= 4.0)\n        {\n            result[index] = \"A+\";\n        }\n       \
    \ else if(grade >= 3.7)\n        {\n            result[index] = \"A\";\n     \
    \   }\n        else if(grade >= 3.3)\n        {\n            result[index] = \"\
    A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            result[index]\
    \ = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n           \
    \ result[index] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n\
    \            result[index] = \"B-\";\n        }\n        else if(grade >= 2.0)\n\
    \        {\n            result[index] = \"C+\";\n        }\n        else if(grade\
    \ >= 1.7)\n        {\n            result[index] = \"C\";\n        }\n        else\
    \ if(grade >= 1.3)\n        {\n            result[index] = \"C-\";\n        }\n\
    \        else if(grade >= 1.0)\n        {\n            result[index] = \"D+\"\
    ;\n        }\n        else if(grade >= 0.7)\n        {\n            result[index]\
    \ = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            result[index]\
    \ = \"D-\";\n        }\n        else if(grade >= 0.0)\n        {\n           \
    \ result[index] = \"E\";\n        }\n    }\n    return result;\n} \nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpyly24215.d(95): unittest failure\n----------------\n??:?
    _d_unittestp [0x429855]\n??:? void tmpyly24215.__unittest_L91_C1() [0x4285b1]\n??:?
    void tmpyly24215.__modtest() [0x428ac0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f447]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4295ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42c121]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42c1b0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42c0ad]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x429585]\n??:? runModuleUnitTests [0x42f21d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429d18]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429c9f]\n??:? _d_run_main [0x429c0a]\n??:? main [0x428ad3]\n??:?
    __libc_start_main [0x854b8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    import std.algorithm.searching;\n\
    \    import std.range;\n    import std.array;\n    import std.conv;\n    import\
    \ std.typecons;\n    import std.format;\n    import std.math;\n    import std.typecons;\n\
    \    import std.array;\n    import std.range;\n    import std.algorithm.searching;\n\
    \    import std.string;\n    import std.conv;\n    import std.typecons;\n    import\
    \ std.array;\n    import std.algorithm.comparison;\n    import std.string;\n \
    \   import std.range;\n    import std.conv;\n    import std.algorithm.comparison;\n\
    \    import std.typecons;\n    import std.array;\n    import std.range;\n    import\
    \ std.algorithm.comparison;\n    import std.algorithm.searching;\n    import std.conv;\n\
    \    import std.math;\n    import std.typecons;\n    import std.array;\n    import\
    \ std.range;\n    import std.algorithm.comparison;\n    import std.algorithm.searching;\n\
    \    import std.conv;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.array;\n    import std.range;\n    import std.algorithm.comparison;\n  \
    \  import std.algorithm.searching;\n    import std.conv;\n    import std.math;\n\
    \    import std.typecons;\n    import std.array;\n    import std.range;\n    import\
    \ std.algorithm.comparison;\n    import std.algorithm.searching;\n    import std.conv;\n\
    \    import std.math;\n    import std.typecons;\n    import std.array;\n    import\
    \ std.range;\n    import std.algorithm.comparison;\n    import std.algorithm.searching;\n\
    \    import std.conv;\n    import std.math;\n    import std.typecons;\n    import\
    \ std.array;\n    import std.range;\n    import std.algorithm.comparison;\n  \
    \  import std.algorithm.searching;\n    import std.conv;\n   \nunittest\n{\n \
    \   alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_s702836.d(94): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_s702836.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\tstring[] output;\n\tforeach(i;\
    \ 0 .. grades.length)\n\t{\n\t\tif(grades[i] >= 4.0)\n\t\t{\n\t\t\toutput ~= \"\
    A+\";\n\t\t}\n\t\telse if(grades[i] >= 3.7)\n\t\t{\n\t\t\toutput ~= \"A\";\n\t\
    \t}\n\t\telse if(grades[i] >= 3.3)\n\t\t{\n\t\t\toutput ~= \"A-\";\n\t\t}\n\t\t\
    else if(grades[i] >= 3.0)\n\t\t{\n\t\t\toutput ~= \"B+\";\n\t\t}\n\t\telse if(grades[i]\
    \ >= 2.7)\n\t\t{\n\t\t\toutput ~= \"B\";\n\t\t}\n\t\telse if(grades[i] >= 2.3)\n\
    \t\t{\n\t\t\toutput ~= \"B-\";\n\t\t}\n\t\telse if(grades[i] >= 2.0)\n\t\t{\n\t\
    \t\toutput ~= \"C+\";\n\t\t}\n\t\telse if(grades[i] >= 1.7)\n\t\t{\n\t\t\toutput\
    \ ~= \"C\";\n\t\t}\n\t\telse if(grades[i] >= 1.3)\n\t\t{\n\t\t\toutput ~= \"C-\"\
    ;\n\t\t}\n\t\telse if(grades[i] >= 1.0)\n\t\t{\n\t\t\toutput ~= \"D+\";\n\t\t\
    }\n\t\telse if(grades[i] >= 0.7)\n\t\t{\n\t\t\toutput ~= \"D\";\n\t\t}\n\t\telse\
    \ if(grades[i] >= 0.0)\n\t\t{\n\t\t\toutput ~= \"D-\";\n\t\t}\n\t\telse\n\t\t\
    {\n\t\t\toutput ~= \"E\";\n\t\t}\n\t}\n\treturn output;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjtgy05r3.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x429bb5]\n??:? void tmpjtgy05r3.__unittest_L90_C1() [0x428911]\n??:?
    void tmpjtgy05r3.__modtest() [0x428e20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f0c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42990e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42bd9d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42be2c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42bd29]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x4298e5]\n??:? runModuleUnitTests [0x42ee99]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a078]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429fff]\n??:? _d_run_main [0x429f6a]\n??:? main [0x428e33]\n??:?
    __libc_start_main [0xa1a4c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp33s7xelw.d(33): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp33s7xelw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] list = new string[grades.length];\n\
    \    foreach(int i, float grade; grades)\n    {\n        if(grade == 4.0)\n  \
    \      {\n            list[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n\
    \        {\n            list[i] = \"A\";\n        }\n        else if(grade > 3.3)\n\
    \        {\n            list[i] = \"A-\";\n        }\n        else if(grade >\
    \ 3.0)\n        {\n            list[i] = \"B+\";\n        }\n        else if(grade\
    \ > 2.7)\n        {\n            list[i] = \"B\";\n        }\n        else if(grade\
    \ > 2.3)\n        {\n            list[i] = \"B-\";\n        }\n        else if(grade\
    \ > 2.0)\n        {\n            list[i] = \"C+\";\n        }\n        else if(grade\
    \ > 1.7)\n        {\n            list[i] = \"C\";\n        }\n        else if(grade\
    \ > 1.3)\n        {\n            list[i] = \"C-\";\n        }\n        else if(grade\
    \ > 1.0)\n        {\n            list[i] = \"D+\";\n        }\n        else if(grade\
    \ > 0.7)\n        {\n            list[i] = \"D\";\n        }\n        else if(grade\
    \ > 0.0)\n        {\n            list[i] = \"D-\";\n        }\n        else if(grade\
    \ == 0.0)\n        {\n            list[i] = \"E\";\n        }\n    }\n    return\
    \ list;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n   \
    \ assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpdgfx5hog.d(94): unittest failure\n----------------\n??:?
    _d_unittestp [0x429835]\n??:? void tmpdgfx5hog.__unittest_L90_C1() [0x428591]\n??:?
    void tmpdgfx5hog.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429cf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429c7f]\n??:? _d_run_main [0x429bea]\n??:? main [0x428ab3]\n??:?
    __libc_start_main [0x57029554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    double[] numerical_letter_grade\
    \ = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0};\n    string[]\
    \ letter_grade = {\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\"\
    , \"C-\", \"D+\", \"D\", \"D-\", \"E\"};\n    string[] array;\n    int i = 0;\n\
    \    foreach(float gr; grades)\n    {\n        if(i == 0)\n        {\n       \
    \     array ~= letter_grade[0];\n        }\n        else\n        {\n        \
    \    int index = 0;\n            foreach(float num; numerical_letter_grade)\n\
    \            {\n                if(gr >= num)\n                {\n           \
    \         array ~= letter_grade[index];\n                    break;\n        \
    \        }\n                index++;\n            }\n        }\n        i++;\n\
    \    }\n    return array;\n}\n//------------------------------\nunittest\n{\n\
    \    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6ceh7cbm.d(32): Error: a struct is not a valid initializer for
    a `double[]`\n/tmp/tmp6ceh7cbm.d(33): Error: a struct is not a valid initializer
    for a `string[]`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ceh7cbm.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    import std.math;\n    string[]\
    \  letter_grades=new string[];\n    foreach(element; grades)\n    {\n        if(element>=4.0)\n\
    \            letter_grades=letter_grades~\"A+\";\n        else if(element>=3.7)\n\
    \            letter_grades=letter_grades~\"A\";\n        else if(element>=3.3)\n\
    \            letter_grades=letter_grades~\"A-\";\n        else if(element>=3.0)\n\
    \            letter_grades=letter_grades~\"B+\";\n        else if(element>=2.7)\n\
    \            letter_grades=letter_grades~\"B\";\n        else if(element>=2.3)\n\
    \            letter_grades=letter_grades~\"B-\";\n        else if(element>=2.0)\n\
    \            letter_grades=letter_grades~\"C+\";\n        else if(element>=1.7)\n\
    \            letter_grades=letter_grades~\"C\";\n        else if(element>=1.3)\n\
    \            letter_grades=letter_grades~\"C-\";\n        else if(element>=1.0)\n\
    \            letter_grades=letter_grades~\"D+\";\n        else if(element>=0.7)\n\
    \            letter_grades=letter_grades~\"D\";\n        else if(element>=0.0)\n\
    \            letter_grades=letter_grades~\"D-\";\n        else\n            letter_grades=letter_grades~\"\
    E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2b82xyjo.d(33): Error: new can only create structs, dynamic
    arrays or class objects, not `string[]`\''s\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2b82xyjo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n  assert(grades.length > 0);\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_rzcz03h.d(33): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_rzcz03h.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] grades_letter;\n  \
    \  grades_letter.length = grades.length;\n    for (int i = 0; i < grades.length;\
    \ i++)\n    {\n        if (grades[i] == 4.0)\n        {\n            grades_letter[i]\
    \ = \"A+\";\n        }\n        else if (grades[i] > 3.7)\n        {\n       \
    \     grades_letter[i] = \"A\";\n        }\n        else if (grades[i] > 3.3)\n\
    \        {\n            grades_letter[i] = \"A-\";\n        }\n        else if\
    \ (grades[i] > 3.0)\n        {\n            grades_letter[i] = \"B+\";\n     \
    \   }\n        else if (grades[i] > 2.7)\n        {\n            grades_letter[i]\
    \ = \"B\";\n        }\n        else if (grades[i] > 2.3)\n        {\n        \
    \    grades_letter[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n\
    \        {\n            grades_letter[i] = \"C+\";\n        }\n        else if\
    \ (grades[i] > 1.7)\n        {\n            grades_letter[i] = \"C\";\n      \
    \  }\n        else if (grades[i] > 1.3)\n        {\n            grades_letter[i]\
    \ = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n        {\n       \
    \     grades_letter[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n\
    \        {\n            grades_letter[i] = \"D\";\n        }\n        else if\
    \ (grades[i] > 0.0)\n        {\n            grades_letter[i] = \"D-\";\n     \
    \   }\n        else\n        {\n            grades_letter[i] = \"E\";\n      \
    \  }\n    }\n    return grades_letter;\n}\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp7aej2j5x.d(95): unittest failure\n----------------\n??:?
    _d_unittestp [0x4299b5]\n??:? void tmp7aej2j5x.__unittest_L91_C1() [0x42870d]\n??:?
    void tmp7aej2j5x.__modtest() [0x428c1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f5a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42970e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42c281]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42c310]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42c20d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x4296e5]\n??:? runModuleUnitTests [0x42f37d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429e78]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429dff]\n??:? _d_run_main [0x429d6a]\n??:? main [0x428c2f]\n??:?
    __libc_start_main [0xe84b0554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] ret;\n    int m = grades.length;\n\
    \    ret.length = m;\n    foreach(int i, float g; grades)\n    {\n        if(g\
    \ > 4.0) ret[i] = \"A+\";\n        else if(g > 3.7) ret[i] = \"A\";\n        else\
    \ if(g > 3.3) ret[i] = \"A-\";\n        else if(g > 3.0) ret[i] = \"B+\";\n  \
    \      else if(g > 2.7) ret[i] = \"B\";\n        else if(g > 2.3) ret[i] = \"\
    B-\";\n        else if(g > 2.0) ret[i] = \"C+\";\n        else if(g > 1.7) ret[i]\
    \ = \"C\";\n        else if(g > 1.3) ret[i] = \"C-\";\n        else if(g > 1.0)\
    \ ret[i] = \"D+\";\n        else if(g > 0.7) ret[i] = \"D\";\n        else if(g\
    \ > 0.0) ret[i] = \"D-\";\n        else ret[i] = \"E\";\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxasovoda.d(33): Error: cannot implicitly convert expression
    `grades.length` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpxasovoda.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(i;0..grades.length)\n    {\n        if(grades[i] == 4.0)\n        {\n\
    \            letter_grades[i] = \"A+\";\n        }\n        else if(grades[i]\
    \ >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n     \
    \   else if(grades[i] >= 3.3)\n        {\n            letter_grades[i] = \"A-\"\
    ;\n        }\n        else if(grades[i] >= 3.0)\n        {\n            letter_grades[i]\
    \ = \"B+\";\n        }\n        else if(grades[i] >= 2.7)\n        {\n       \
    \     letter_grades[i] = \"B\";\n        }\n        else if(grades[i] >= 2.3)\n\
    \        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grades[i]\
    \ >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n    \
    \    else if(grades[i] >= 1.7)\n        {\n            letter_grades[i] = \"C\"\
    ;\n        }\n        else if(grades[i] >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grades[i] >= 1.0)\n        {\n       \
    \     letter_grades[i] = \"D+\";\n        }\n        else if(grades[i] >= 0.7)\n\
    \        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grades[i]\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else if(grades[i] == 0.0)\n        {\n            letter_grades[i] = \"E\"\
    ;\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpiltjqp2n.d(37): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x429a8e]\n??:? immutable(char)[][] tmpiltjqp2n.numerical_letter_grade(float[])
    [0x427fc9]\n??:? void tmpiltjqp2n.__unittest_L90_C1() [0x42866e]\n??:? void tmpiltjqp2n.__modtest()
    [0x428c48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e4ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429736]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b1d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b268]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b165]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42970d]\n??:? runModuleUnitTests [0x42e2d5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429ea0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429e27]\n??:? _d_run_main [0x429d92]\n??:? main [0x428c5b]\n??:?
    __libc_start_main [0xf2d3a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    // your implementation goes\
    \ here\n    string[] letter_grade = new string[grades.length];\n    for(int i\
    \ = 0; i < grades.length; i++)\n    {\n        if(grades[i] >= 4.0)\n        {\n\
    \            letter_grade[i] = \"A+\";\n        }\n        else if(grades[i] >=\
    \ 3.7)\n        {\n            letter_grade[i] = \"A\";\n        }\n        else\
    \ if(grades[i] >= 3.3)\n        {\n            letter_grade[i] = \"A-\";\n   \
    \     }\n        else if(grades[i] >= 3.0)\n        {\n            letter_grade[i]\
    \ = \"B+\";\n        }\n        else if(grades[i] >= 2.7)\n        {\n       \
    \     letter_grade[i] = \"B\";\n        }\n        else if(grades[i] >= 2.3)\n\
    \        {\n            letter_grade[i] = \"B-\";\n        }\n        else if(grades[i]\
    \ >= 2.0)\n        {\n            letter_grade[i] = \"C+\";\n        }\n     \
    \   else if(grades[i] >= 1.7)\n        {\n            letter_grade[i] = \"C\"\
    ;\n        }\n        else if(grades[i] >= 1.3)\n        {\n            letter_grade[i]\
    \ = \"C-\";\n        }\n        else if(grades[i] >= 1.0)\n        {\n       \
    \     letter_grade[i] = \"D+\";\n        }\n        else if(grades[i] >= 0.7)\n\
    \        {\n            letter_grade[i] = \"D\";\n        }\n        else if(grades[i]\
    \ >= 0.0)\n        {\n            letter_grade[i] = \"D-\";\n        }\n     \
    \   else\n        {\n            letter_grade[i] = \"E\";\n        }\n    }\n\
    \    return letter_grade;\n}\n// counting sort\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpx0rmk6j6.d(96): unittest failure\n----------------\n??:?
    _d_unittestp [0x4299a5]\n??:? void tmpx0rmk6j6.__unittest_L92_C1() [0x428701]\n??:?
    void tmpx0rmk6j6.__modtest() [0x428c10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e523]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4296fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42b1fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42b189]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x4296d5]\n??:? runModuleUnitTests [0x42e2f9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429e68]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429def]\n??:? _d_run_main [0x429d5a]\n??:? main [0x428c23]\n??:?
    __libc_start_main [0xa1a80554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letters = new string[grades.length];\n\
    \    for (int i = 0; i < grades.length; i++)\n    {\n        string grade = \"\
    \";\n        float gpa = grades[i];\n        if (gpa == 4.0) grade = \"A+\";\n\
    \        else if (gpa > 3.7) grade = \"A\";\n        else if (gpa > 3.3) grade\
    \ = \"A-\";\n        else if (gpa > 3.0) grade = \"B+\";\n        else if (gpa\
    \ > 2.7) grade = \"B\";\n        else if (gpa > 2.3) grade = \"B-\";\n       \
    \ else if (gpa > 2.0) grade = \"C+\";\n        else if (gpa > 1.7) grade = \"\
    C\";\n        else if (gpa > 1.3) grade = \"C-\";\n        else if (gpa > 1.0)\
    \ grade = \"D+\";\n        else if (gpa > 0.7) grade = \"D\";\n        else if\
    \ (gpa > 0.0) grade = \"D-\";\n        else grade = \"E\";\n        letters[i]\
    \ = grade;\n    }\n    return letters;\n}\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpfedzwzhh.d(58): unittest failure\n----------------\n??:?
    _d_unittestp [0x42965d]\n??:? void tmpfedzwzhh.__unittest_L54_C1() [0x4283b5]\n??:?
    void tmpfedzwzhh.__modtest() [0x4288c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e1db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4293b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42aeb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42af44]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42ae41]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42938d]\n??:? runModuleUnitTests [0x42dfb1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429b20]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429aa7]\n??:? _d_run_main [0x429a12]\n??:? main [0x4288d7]\n??:?
    __libc_start_main [0xf373d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    \n}\n \nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp890i8srp.d(30): Error: function `tmp890i8srp.numerical_letter_grade`
    has no `return` statement, but is expected to return a value of type `string[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp890i8srp.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\t/*\n\t\tThis function just takes\
    \ in an array of numerical grades and converts them\n\t\tto a string array of\
    \ letter grades.\n\t*/\n    string[] letter_grades = new string[grades.length];\n\
    \    foreach(int i, float grade; grades)\n    {\n        string letter = grade_helper(grade);\n\
    \        letter_grades[i] = letter;\n    }\n    return letter_grades;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprgfx8_1j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    foreach(float\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            result\
    \ ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n          \
    \  result ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n   \
    \         result ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n      \
    \  {\n            result ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n\
    \        {\n            result ~= \"B\";\n        }\n        else if(grade >=\
    \ 2.3)\n        {\n            result ~= \"B-\";\n        }\n        else if(grade\
    \ >= 2.0)\n        {\n            result ~= \"C+\";\n        }\n        else if(grade\
    \ >= 1.7)\n        {\n            result ~= \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            result ~= \"C-\";\n        }\n        else if(grade\
    \ >= 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade\
    \ >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            result ~= \"E\";\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n \
    \   assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq1d6tkfv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    auto res = new string[];\n \
    \   foreach(i; grades)\n    {\n        if(i >= 4.0)\n            res ~= \"A+\"\
    ;\n        else if(i >= 3.7)\n            res ~= \"A\";\n        else if(i >=\
    \ 3.3)\n            res ~= \"A-\";\n        else if(i >= 3.0)\n            res\
    \ ~= \"B+\";\n        else if(i >= 2.7)\n            res ~= \"B\";\n        else\
    \ if(i >= 2.3)\n            res ~= \"B-\";\n        else if(i >= 2.0)\n      \
    \      res ~= \"C+\";\n        else if(i >= 1.7)\n            res ~= \"C\";\n\
    \        else if(i >= 1.3)\n            res ~= \"C-\";\n        else if(i >= 1.0)\n\
    \            res ~= \"D+\";\n        else if(i >= 0.7)\n            res ~= \"\
    D\";\n        else if(i >= 0.0)\n            res ~= \"D-\";\n        else\n  \
    \          res ~= \"E\";\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl8v5avbr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    import std.stdio;\n    import\
    \ std.math;\n    import std.typecons;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.array;\n    import std.typecons;\n    string[] result;\n    foreach(i;0..grades.length)\n\
    \    {\n        double grade = grades[i];\n        if(grade >= 4.0)\n        {\n\
    \            result ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n   \
    \     {\n            result ~= \"A\";\n        }\n        else if(grade >= 3.3)\n\
    \        {\n            result ~= \"A-\";\n        }\n        else if(grade >=\
    \ 3.0)\n        {\n            result ~= \"B+\";\n        }\n        else if(grade\
    \ >= 2.7)\n        {\n            result ~= \"B\";\n        }\n        else if(grade\
    \ >= 2.3)\n        {\n            result ~= \"B-\";\n        }\n        else if(grade\
    \ >= 2.0)\n        {\n            result ~= \"C+\";\n        }\n        else if(grade\
    \ >= 1.7)\n        {\n            result ~= \"C\";\n        }\n        else if(grade\
    \ >= 1.3)\n        {\n            result ~= \"C-\";\n        }\n        else if(grade\
    \ >= 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade\
    \ >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else\n\
    \        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2j_11aw5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grade = new\
    \ string[grades.length];\n    foreach(index, grade; grades)\n    {\n        if(grade\
    \ > 3.7)\n        {\n            letter_grade[index] = \"A\";\n        }\n   \
    \     else if(grade > 3.3)\n        {\n            letter_grade[index] = \"A-\"\
    ;\n        }\n        else if(grade > 3.0)\n        {\n            letter_grade[index]\
    \ = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grade[index]\
    \ = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grade[index]\
    \ = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grade[index]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grade[index]\
    \ = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grade[index]\
    \ = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grade[index]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grade[index]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grade[index]\
    \ = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n           \
    \ letter_grade[index] = \"E\";\n        }\n        else\n        {\n         \
    \   letter_grade[index] = \"A+\";\n        }\n    }\n    return letter_grade;\n\
    }\n// This tests your code\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqdo_szh0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\t// Your code goes here\n\tfloat[]\
    \ numerical_grades = grades.map!(a => a);\n\tstring[] letter_grades = new string[numerical_grades.length];\n\
    \tforeach(int i, float j; numerical_grades)\n\t{\n\t\tif(j == 4.0)\n\t\t{\n\t\t\
    \tletter_grades[i] = \"A+\";\n\t\t}\n\t\telse if(j > 3.7)\n\t\t{\n\t\t\tletter_grades[i]\
    \ = \"A\";\n\t\t}\n\t\telse if(j > 3.3)\n\t\t{\n\t\t\tletter_grades[i] = \"A-\"\
    ;\n\t\t}\n\t\telse if(j > 3.0)\n\t\t{\n\t\t\tletter_grades[i] = \"B+\";\n\t\t\
    }\n\t\telse if(j > 2.7)\n\t\t{\n\t\t\tletter_grades[i] = \"B\";\n\t\t}\n\t\telse\
    \ if(j > 2.3)\n\t\t{\n\t\t\tletter_grades[i] = \"B-\";\n\t\t}\n\t\telse if(j >\
    \ 2.0)\n\t\t{\n\t\t\tletter_grades[i] = \"C+\";\n\t\t}\n\t\telse if(j > 1.7)\n\
    \t\t{\n\t\t\tletter_grades[i] = \"C\";\n\t\t}\n\t\telse if(j > 1.3)\n\t\t{\n\t\
    \t\tletter_grades[i] = \"C-\";\n\t\t}\n\t\telse if(j > 1.0)\n\t\t{\n\t\t\tletter_grades[i]\
    \ = \"D+\";\n\t\t}\n\t\telse if(j > 0.7)\n\t\t{\n\t\t\tletter_grades[i] = \"D\"\
    ;\n\t\t}\n\t\telse if(j > 0.0)\n\t\t{\n\t\t\tletter_grades[i] = \"D-\";\n\t\t\
    }\n\t\telse if(j == 0.0)\n\t\t{\n\t\t\tletter_grades[i] = \"E\";\n\t\t}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6tob46mr.d(89): Error: found \''unittest\'' instead of statement\n/tmp/tmp6tob46mr.d(100):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6tob46mr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(float num; grades) \n    {\n        int num_int = cast(int)num;\n \
    \       if(num_int == 4) \n        {\n            letter_grades ~= \"A+\";\n \
    \       }\n        else if(num_int == 3) \n        {\n            letter_grades\
    \ ~= \"A\";\n        }\n        else if(num_int == 2) \n        {\n          \
    \  letter_grades ~= \"B\";\n        }\n        else if(num_int == 1) \n      \
    \  {\n            letter_grades ~= \"C\";\n        }\n        else if(num_int\
    \ == 0) \n        {\n            letter_grades ~= \"D\";\n        }\n        else\
    \ if(num_int == -1) \n        {\n            letter_grades ~= \"E\";\n       \
    \ }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_j7ih1w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    float[] grade_array = [4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0];\n    string[] letter_array\
    \ = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\"\
    , \"D\", \"E\"];\n    string[] result_array = new string[grades.length];\n   \
    \ size_t i;\n    // Check if the input is a float array\n    if(is(typeof(grades)\
    \ == float[]))\n    {\n        for(i = 0; i < grades.length; i++)\n        {\n\
    \            if(grades[i] == 4.0)\n            {\n                result_array[i]\
    \ = \"A+\";\n            }\n            else if(grades[i] > 0.0 && grades[i] <\
    \ 0.7)\n            {\n                result_array[i] = \"E\";\n            }\n\
    \            else\n            {\n                for(size_t j = 0; j < grade_array.length;\
    \ j++)\n                {\n                    if(grades[i] >= grade_array[j])\n\
    \                    {\n                        result_array[i] = letter_array[j];\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return result_array;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpox_zl5zw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] temp;\n    temp.length\
    \ = grades.length;\n    for (int i = 0; i < grades.length; i++) \n    {\n    \
    \    switch (int(grades[i]*10)) \n        {\n            case 40:\n          \
    \      temp[i] = \"A+\";\n                break;\n            case 37:\n     \
    \           temp[i] = \"A\";\n                break;\n            case 33:\n \
    \               temp[i] = \"A-\";\n                break;\n            case 30:\n\
    \                temp[i] = \"B+\";\n                break;\n            case 27:\n\
    \                temp[i] = \"B\";\n                break;\n            case 23:\n\
    \                temp[i] = \"B-\";\n                break;\n            case 20:\n\
    \                temp[i] = \"C+\";\n                break;\n            case 17:\n\
    \                temp[i] = \"C\";\n                break;\n            case 13:\n\
    \                temp[i] = \"C-\";\n                break;\n            case 10:\n\
    \                temp[i] = \"D+\";\n                break;\n            case 7:\n\
    \                temp[i] = \"D\";\n                break;\n            case 0:\n\
    \                temp[i] = \"D-\";\n                break;\n            default:\n\
    \                temp[i] = \"E\";\n                break;\n        }\n    }\n\
    \    return temp;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgjy78ynb.d(36): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpgjy78ynb.d(36): Error: found \'')\'' instead of statement\n/tmp/tmpgjy78ynb.d(79):
    Error: Declaration expected, not \''return\''\n/tmp/tmpgjy78ynb.d(80): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjy78ynb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    //Your code goes here\n    string[]\
    \ letter_grades;\n    foreach(i; 0..grades.length)\n    {\n        if(grades[i]\
    \ == 4.0) letter_grades ~= \"A+\";\n        else if(grades[i] > 3.7) letter_grades\
    \ ~= \"A\";\n        else if(grades[i] > 3.3) letter_grades ~= \"A-\";\n     \
    \   else if(grades[i] > 3.0) letter_grades ~= \"B+\";\n        else if(grades[i]\
    \ > 2.7) letter_grades ~= \"B\";\n        else if(grades[i] > 2.3) letter_grades\
    \ ~= \"B-\";\n        else if(grades[i] > 2.0) letter_grades ~= \"C+\";\n    \
    \    else if(grades[i] > 1.7) letter_grades ~= \"C\";\n        else if(grades[i]\
    \ > 1.3) letter_grades ~= \"C-\";\n        else if(grades[i] > 1.0) letter_grades\
    \ ~= \"D+\";\n        else if(grades[i] > 0.7) letter_grades ~= \"D\";\n     \
    \   else if(grades[i] > 0.0) letter_grades ~= \"D-\";\n        else letter_grades\
    \ ~= \"E\";\n    }\n    return letter_grades;\n}\n \nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpev5xp991.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    result.length\
    \ = grades.length;\n    foreach(i, grade; grades)\n    {\n        if(grade ==\
    \ 4.0)\n        {\n            result[i] = \"A+\";\n        }\n        else if(grade\
    \ >= 3.7)\n        {\n            result[i] = \"A\";\n        }\n        else\
    \ if(grade >= 3.3)\n        {\n            result[i] = \"A-\";\n        }\n  \
    \      else if(grade >= 3.0)\n        {\n            result[i] = \"B+\";\n   \
    \     }\n        else if(grade >= 2.7)\n        {\n            result[i] = \"\
    B\";\n        }\n        else if(grade >= 2.3)\n        {\n            result[i]\
    \ = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n           \
    \ result[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n \
    \           result[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n   \
    \     {\n            result[i] = \"C-\";\n        }\n        else if(grade >=\
    \ 1.0)\n        {\n            result[i] = \"D+\";\n        }\n        else if(grade\
    \ >= 0.7)\n        {\n            result[i] = \"D\";\n        }\n        else\
    \ if(grade >= 0.0)\n        {\n            result[i] = \"D-\";\n        }\n  \
    \      else\n        {\n            result[i] = \"E\";\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp839vp1jc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    auto array1 = new string[grades.length];\n\
    \    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >=\
    \ 4.0)\n        {\n            array1[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] > 3.7)\n        {\n            array1[i] = \"A\";\n        }\n  \
    \      else if (grades[i] > 3.3)\n        {\n            array1[i] = \"A-\";\n\
    \        }\n        else if (grades[i] > 3.0)\n        {\n            array1[i]\
    \ = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n       \
    \     array1[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n     \
    \   {\n            array1[i] = \"B-\";\n        }\n        else if (grades[i]\
    \ > 2.0)\n        {\n            array1[i] = \"C+\";\n        }\n        else\
    \ if (grades[i] > 1.7)\n        {\n            array1[i] = \"C\";\n        }\n\
    \        else if (grades[i] > 1.3)\n        {\n            array1[i] = \"C-\"\
    ;\n        }\n        else if (grades[i] > 1.0)\n        {\n            array1[i]\
    \ = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n       \
    \     array1[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n     \
    \   {\n            array1[i] = \"D-\";\n        }\n        else if (grades[i]\
    \ == 0.0)\n        {\n            array1[i] = \"E\";\n        }\n    }\n    return\
    \ array1;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n \
    \   assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_xxp6gsd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuacsy2kv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    float[] grade_point_average\
    \ = grades;\n    string[] letter_grade = new string[grades.length];\n    foreach(int\
    \ i, string e; grades)\n    {\n        if(grade_point_average[i] == 4.0)\n   \
    \     {\n            letter_grade[i] = \"A+\";\n        }\n        else if(grade_point_average[i]\
    \ >= 3.7)\n        {\n            letter_grade[i] = \"A\";\n        }\n      \
    \  else if(grade_point_average[i] >= 3.3)\n        {\n            letter_grade[i]\
    \ = \"A-\";\n        }\n        else if(grade_point_average[i] >= 3.0)\n     \
    \   {\n            letter_grade[i] = \"B+\";\n        }\n        else if(grade_point_average[i]\
    \ >= 2.7)\n        {\n            letter_grade[i] = \"B\";\n        }\n      \
    \  else if(grade_point_average[i] >= 2.3)\n        {\n            letter_grade[i]\
    \ = \"B-\";\n        }\n        else if(grade_point_average[i] >= 2.0)\n     \
    \   {\n            letter_grade[i] = \"C+\";\n        }\n        else if(grade_point_average[i]\
    \ >= 1.7)\n        {\n            letter_grade[i] = \"C\";\n        }\n      \
    \  else if(grade_point_average[i] >= 1.3)\n        {\n            letter_grade[i]\
    \ = \"C-\";\n        }\n        else if(grade_point_average[i] >= 1.0)\n     \
    \   {\n            letter_grade[i] = \"D+\";\n        }\n        else if(grade_point_average[i]\
    \ >= 0.7)\n        {\n            letter_grade[i] = \"D\";\n        }\n      \
    \  else if(grade_point_average[i] >= 0.0)\n        {\n            letter_grade[i]\
    \ = \"D-\";\n        }\n        else if(grade_point_average[i] == 0.0)\n     \
    \   {\n            letter_grade[i\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp34rr_e4y.d(87): Error: found \''unittest\'' when expecting \'']\''\n/tmp/tmp34rr_e4y.d(88):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmp34rr_e4y.d(98):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp34rr_e4y.d(98):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34rr_e4y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    int i = 0;\n    string[] letter_grades\
    \ = new string[grades.length];\n    foreach(float gpa; grades)\n    {\n      \
    \  if(gpa == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n       \
    \ }\n        else if(gpa >= 3.7)\n        {\n            letter_grades[i] = \"\
    A\";\n        }\n        else if(gpa >= 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(gpa >= 3.0)\n        {\n            letter_grades[i]\
    \ = \"B+\";\n        }\n        else if(gpa >= 2.7)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if(gpa >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(gpa >= 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if(gpa >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(gpa >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(gpa >= 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if(gpa >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(gpa >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n        i++;\n    }\n    return letter_grades;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppod39rz1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n    /*Write your function here*/\n\
    {\n    string[] output_grades;\n    output_grades = new string[grades.length];\n\
    \    for(int i = 0; i < grades.length; i++)\n    {\n        \n        if(grades[i]\
    \ == 4.0)\n        {\n            output_grades[i] = \"A+\";\n        }\n    \
    \    else if(grades[i] >= 3.7)\n        {\n            output_grades[i] = \"A\"\
    ;\n        }\n        else if(grades[i] >= 3.3)\n        {\n            output_grades[i]\
    \ = \"A-\";\n        }\n        else if(grades[i] >= 3.0)\n        {\n       \
    \     output_grades[i] = \"B+\";\n        }\n        else if(grades[i] >= 2.7)\n\
    \        {\n            output_grades[i] = \"B\";\n        }\n        else if(grades[i]\
    \ >= 2.3)\n        {\n            output_grades[i] = \"B-\";\n        }\n    \
    \    else if(grades[i] >= 2.0)\n        {\n            output_grades[i] = \"C+\"\
    ;\n        }\n        else if(grades[i] >= 1.7)\n        {\n            output_grades[i]\
    \ = \"C\";\n        }\n        else if(grades[i] >= 1.3)\n        {\n        \
    \    output_grades[i] = \"C-\";\n        }\n        else if(grades[i] >= 1.0)\n\
    \        {\n            output_grades[i] = \"D+\";\n        }\n        else if(grades[i]\
    \ >= 0.7)\n        {\n            output_grades[i] = \"D\";\n        }\n     \
    \   else if(grades[i] >= 0.0)\n        {\n            output_grades[i] = \"D-\"\
    ;\n        }\n        else\n        {\n            output_grades[i] = \"E\";\n\
    \        }\n        \n    }\n    return output_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36d09c4t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grade = new\
    \ string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n\
    \        if (grades[i] == 4.0)\n        {\n            letter_grade[i] = \"A+\"\
    ;\n        }\n        else if (grades[i] > 3.7)\n        {\n            letter_grade[i]\
    \ = \"A\";\n        }\n        else if (grades[i] > 3.3)\n        {\n        \
    \    letter_grade[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n\
    \        {\n            letter_grade[i] = \"B+\";\n        }\n        else if\
    \ (grades[i] > 2.7)\n        {\n            letter_grade[i] = \"B\";\n       \
    \ }\n        else if (grades[i] > 2.3)\n        {\n            letter_grade[i]\
    \ = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n        {\n       \
    \     letter_grade[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n\
    \        {\n            letter_grade[i] = \"C\";\n        }\n        else if (grades[i]\
    \ > 1.3)\n        {\n            letter_grade[i] = \"C-\";\n        }\n      \
    \  else if (grades[i] > 1.0)\n        {\n            letter_grade[i] = \"D+\"\
    ;\n        }\n        else if (grades[i] > 0.7)\n        {\n            letter_grade[i]\
    \ = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n        \
    \    letter_grade[i] = \"D-\";\n        }\n        else\n        {\n         \
    \   letter_grade[i] = \"E\";\n        }\n    }\n    return letter_grade;\n}\n\
    /*\n    The teacher wants to give everyone a chance to improve their grade by\
    \ giving\n    them their first test of the new semester. The teacher has devised\
    \ a new algorithm\n    for calculating the new grades.\n    \n    For example,\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0c1bc6dc.d(90): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp0c1bc6dc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] output;\n    foreach(float\
    \ grade; grades)\n    {\n        output ~= letter_grade(grade);\n    }\n    return\
    \ output;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n \
    \   assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjfs8ogg0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] array;\n    foreach(float\
    \ d; grades) \n    {\n        if(d == 4.0)\n            array ~= \"A+\";\n   \
    \     else if(d > 3.7)\n            array ~= \"A\";\n        else if(d > 3.3)\n\
    \            array ~= \"A-\";\n        else if(d > 3.0)\n            array ~=\
    \ \"B+\";\n        else if(d > 2.7)\n            array ~= \"B\";\n        else\
    \ if(d > 2.3)\n            array ~= \"B-\";\n        else if(d > 2.0)\n      \
    \      array ~= \"C+\";\n        else if(d > 1.7)\n            array ~= \"C\"\
    ;\n        else if(d > 1.3)\n            array ~= \"C-\";\n        else if(d >\
    \ 1.0)\n            array ~= \"D+\";\n        else if(d > 0.7)\n            array\
    \ ~= \"D\";\n        else if(d > 0.0)\n            array ~= \"D-\";\n        else\
    \ if(d == 0.0)\n            array ~= \"E\";\n    }\n    return array;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqzqhw_u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letters = new string[grades.length];\n\
    \    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] ==\
    \ 4.0)\n        {\n            letters[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] >= 3.7)\n        {\n            letters[i] = \"A\";\n        }\n\
    \        else if (grades[i] >= 3.3)\n        {\n            letters[i] = \"A-\"\
    ;\n        }\n        else if (grades[i] >= 3.0)\n        {\n            letters[i]\
    \ = \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n        {\n      \
    \      letters[i] = \"B\";\n        }\n        else if (grades[i] >= 2.3)\n  \
    \      {\n            letters[i] = \"B-\";\n        }\n        else if (grades[i]\
    \ >= 2.0)\n        {\n            letters[i] = \"C+\";\n        }\n        else\
    \ if (grades[i] >= 1.7)\n        {\n            letters[i] = \"C\";\n        }\n\
    \        else if (grades[i] >= 1.3)\n        {\n            letters[i] = \"C-\"\
    ;\n        }\n        else if (grades[i] >= 1.0)\n        {\n            letters[i]\
    \ = \"D+\";\n        }\n        else if (grades[i] >= 0.7)\n        {\n      \
    \      letters[i] = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n  \
    \      {\n            letters[i] = \"D-\";\n        }\n        else\n        {\n\
    \            letters[i] = \"E\";\n        }\n    }\n    return letters;\n}\nstring[]\
    \ numerical_letter_grade2(float[] grades)\n{\n    string[] letters = new string[grades.length];\n\
    \    for (int i = 0; i < grades.length; i++)\n    {\n        letters[i] = grades[i]\
    \ > 4.0 ? \"A+\" :\n                     grades[i] > 3.7 ?\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpecfj7o6a.d(97): Error: expression expected, not \''unittest\''\n/tmp/tmpecfj7o6a.d(98):
    Error: found \''{\'' when expecting \'':\''\n/tmp/tmpecfj7o6a.d(99): Error: expression
    expected, not \''alias\''\n/tmp/tmpecfj7o6a.d(99): Error: found \''candidate\''
    when expecting \'';\'' following statement\n/tmp/tmpecfj7o6a.d(99): Error: found
    \''=\'' instead of statement\n/tmp/tmpecfj7o6a.d(108): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpecfj7o6a.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    // your solution goes here\n\
    \    string[] array_letter = new string[grades.length];\n    int i = 0;\n    foreach(gr;\
    \ grades) {\n        if (gr > 4.0)\n            array_letter[i] = \"A+\";\n  \
    \      else if (gr > 3.7)\n            array_letter[i] = \"A\";\n        else\
    \ if (gr > 3.3)\n            array_letter[i] = \"A-\";\n        else if (gr >\
    \ 3.0)\n            array_letter[i] = \"B+\";\n        else if (gr > 2.7)\n  \
    \          array_letter[i] = \"B\";\n        else if (gr > 2.3)\n            array_letter[i]\
    \ = \"B-\";\n        else if (gr > 2.0)\n            array_letter[i] = \"C+\"\
    ;\n        else if (gr > 1.7)\n            array_letter[i] = \"C\";\n        else\
    \ if (gr > 1.3)\n            array_letter[i] = \"C-\";\n        else if (gr >\
    \ 1.0)\n            array_letter[i] = \"D+\";\n        else if (gr > 0.7)\n  \
    \          array_letter[i] = \"D\";\n        else if (gr > 0.0)\n            array_letter[i]\
    \ = \"D-\";\n        else\n            array_letter[i] = \"E\";\n        i++;\n\
    \    }\n    return array_letter;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1lg5mjjd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, _; grades.length)\n    {\n        if(grades[i]\
    \ == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n    \
    \    else if(grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\"\
    ;\n        }\n        else if(grades[i] > 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grades[i] > 3.0)\n        {\n        \
    \    letter_grades[i] = \"B+\";\n        }\n        else if(grades[i] > 2.7)\n\
    \        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grades[i]\
    \ > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n     \
    \   else if(grades[i] > 2.0)\n        {\n            letter_grades[i] = \"C+\"\
    ;\n        }\n        else if(grades[i] > 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grades[i] > 1.3)\n        {\n         \
    \   letter_grades[i] = \"C-\";\n        }\n        else if(grades[i] > 1.0)\n\
    \        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grades[i]\
    \ > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n      \
    \  else if(grades[i] > 0.0)\n        {\n            letter_grades[i] = \"D-\"\
    ;\n        }\n        else if(grades[i] == 0.0)\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\n \nunittest\n{\n \
    \   alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5xxvk1yj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n    { \n        string[] letter_grades\
    \ = new string[grades.length];\n        foreach(size_t i; grades) \n        {\n\
    \            if (grades[i] >= 4.0) \n            {\n                letter_grades[i]\
    \ = \"A+\";\n            }\n            else if (grades[i] >= 3.7) \n        \
    \    {\n                letter_grades[i] = \"A\";\n            }\n           \
    \ else if (grades[i] >= 3.3) \n            {\n                letter_grades[i]\
    \ = \"A-\";\n            }\n            else if (grades[i] >= 3.0) \n        \
    \    {\n                letter_grades[i] = \"B+\";\n            }\n          \
    \  else if (grades[i] >= 2.7) \n            {\n                letter_grades[i]\
    \ = \"B\";\n            }\n            else if (grades[i] >= 2.3) \n         \
    \   {\n                letter_grades[i] = \"B-\";\n            }\n           \
    \ else if (grades[i] >= 2.0) \n            {\n                letter_grades[i]\
    \ = \"C+\";\n            }\n            else if (grades[i] >= 1.7) \n        \
    \    {\n                letter_grades[i] = \"C\";\n            }\n           \
    \ else if (grades[i] >= 1.3) \n            {\n                letter_grades[i]\
    \ = \"C-\";\n            }\n            else if (grades[i] >= 1.0) \n        \
    \    {\n                letter_grades[i] = \"D+\";\n            }\n          \
    \  else if (grades[i] >= 0.7) \n            {\n                letter_grades[i]\
    \ = \"D\";\n            }\n            else if (grades[i] >= 0.0) \n         \
    \   {\n                letter_grades[i] = \"D-\";\n            }\n           \
    \ else \n            {\n                letter_grades[i] = \"E\";\n          \
    \  }\n        }\n        return letter_grades;\n    } \n    \nunittest\n{\n  \
    \  alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzo3bs0u9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n  string[] letter_grades = new string[grades.length];\n\
    \  foreach(i, e; grades)\n  {\n    switch(e)\n    {\n        case(4.0):\n    \
    \        letter_grades[i] = \"A+\";\n            break;\n        case(e > 3.7):\n\
    \            letter_grades[i] = \"A\";\n            break;\n        case(e > 3.3):\n\
    \            letter_grades[i] = \"A-\";\n            break;\n        case(e >\
    \ 3.0):\n            letter_grades[i] = \"B+\";\n            break;\n        case(e\
    \ > 2.7):\n            letter_grades[i] = \"B\";\n            break;\n       \
    \ case(e > 2.3):\n            letter_grades[i] = \"B-\";\n            break;\n\
    \        case(e > 2.0):\n            letter_grades[i] = \"C+\";\n            break;\n\
    \        case(e > 1.7):\n            letter_grades[i] = \"C\";\n            break;\n\
    \        case(e > 1.3):\n            letter_grades[i] = \"C-\";\n            break;\n\
    \        case(e > 1.0):\n            letter_grades[i] = \"D+\";\n            break;\n\
    \        case(e > 0.7):\n            letter_grades[i] = \"D\";\n            break;\n\
    \        case(e > 0.0):\n            letter_grades[i] = \"D-\";\n            break;\n\
    \        case(e == 0.0):\n            letter_grades[i] = \"E\";\n            break;\n\
    \    }\n  }\n  return letter_grades;\n}\nstring[] letter_grade(float[] grades)\
    \ \n{\n  string[] letter_grades = new string[grades.length];\n  foreach(i, e;\
    \ grades)\n  {\n    switch(e)\n    {\n        case(4.0):\n            letter_grades[i]\
    \ = \"A+\";\n            break;\n        case(e > 3.7):\n            letter_grades[i]\
    \ = \"A\";\n            break;\n        case(e > 3.3):\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqbrtulk.d(94): Error: found \''unittest\'' instead of statement\n/tmp/tmpqqbrtulk.d(105):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpqqbrtulk.d(105):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqbrtulk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{ \n    int i;\n    float [] numerical_grades\
    \ = grades;\n    float num = 0;\n    //string result = \"\";\n    string[] result\
    \ = new string[numerical_grades.length];\n    for (i = 0; i < numerical_grades.length;\
    \ i++) {\n        num = numerical_grades[i];\n        if (num > 4.0) {\n     \
    \       result[i] = \"A+\";\n        }\n        else if (num > 3.7) {\n      \
    \      result[i] = \"A\";\n        }\n        else if (num > 3.3) {\n        \
    \    result[i] = \"A-\";\n        }\n        else if (num > 3.0) {\n         \
    \   result[i] = \"B+\";\n        }\n        else if (num > 2.7) {\n          \
    \  result[i] = \"B\";\n        }\n        else if (num > 2.3) {\n            result[i]\
    \ = \"B-\";\n        }\n        else if (num > 2.0) {\n            result[i] =\
    \ \"C+\";\n        }\n        else if (num > 1.7) {\n            result[i] = \"\
    C\";\n        }\n        else if (num > 1.3) {\n            result[i] = \"C-\"\
    ;\n        }\n        else if (num > 1.0) {\n            result[i] = \"D+\";\n\
    \        }\n        else if (num > 0.7) {\n            result[i] = \"D\";\n  \
    \      }\n        else if (num > 0.0) {\n            result[i] = \"D-\";\n   \
    \     }\n        else if (num == 0.0) {\n            result[i] = \"E\";\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcbc0a67_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n    {\n    static immutable string[float]\
    \ map = [\n        4.0 : \"A+\",\n        3.7 : \"A\",\n        3.3 : \"A-\",\n\
    \        3.0 : \"B+\",\n        2.7 : \"B\",\n        2.3 : \"B-\",\n        2.0\
    \ : \"C+\",\n        1.7 : \"C\",\n        1.3 : \"C-\",\n        1.0 : \"D+\"\
    ,\n        0.7 : \"D\",\n        0.0 : \"D-\",\n        -1.0 : \"E\"\n    ];\n\
    \    string[] result;\n    foreach(grade; grades)\n        {\n        result ~=\
    \ map[(1.0/3.0)*((3.0/10.0)*trunc(grade))];\n        }\n    return result;\n \
    \   }\nstring[] numerical_letter_grade(int[] grades) \n    {\n    return cast(string[])numerical_letter_grade(cast(float[])grades);\n\
    \    }\nstring[] numerical_letter_grade(long[] grades) \n    {\n    return cast(string[])numerical_letter_grade(cast(float[])grades);\n\
    \    }\nstring[] numerical_letter_grade(double[] grades) \n    {\n    return cast(string[])numerical_letter_grade(cast(float[])grades);\n\
    \    }\n// Test\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n\
    \    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclokkks4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    // Input validation\n    if\
    \ (grades.length < 1) \n    {\n        return [];\n    }\n    // Create an empty\
    \ array of strings of the same size as that of the grades array\n    string[]\
    \ letter_grades = new string[grades.length];\n    string grade;\n    for (int\
    \ i = 0; i < grades.length; i++) \n    {\n        if (grades[i] >= 4.0) \n   \
    \     {\n            grade = \"A+\";\n        } \n        else if (grades[i] >=\
    \ 3.7) \n        {\n            grade = \"A\";\n        } \n        else if (grades[i]\
    \ >= 3.3) \n        {\n            grade = \"A-\";\n        } \n        else if\
    \ (grades[i] >= 3.0) \n        {\n            grade = \"B+\";\n        } \n  \
    \      else if (grades[i] >= 2.7) \n        {\n            grade = \"B\";\n  \
    \      } \n        else if (grades[i] >= 2.3) \n        {\n            grade =\
    \ \"B-\";\n        } \n        else if (grades[i] >= 2.0) \n        {\n      \
    \      grade = \"C+\";\n        } \n        else if (grades[i] >= 1.7) \n    \
    \    {\n            grade = \"C\";\n        } \n        else if (grades[i] >=\
    \ 1.3) \n        {\n            grade = \"C-\";\n        } \n        else if (grades[i]\
    \ >= 1.0) \n        {\n            grade = \"D+\";\n        } \n        else if\
    \ (grades[i] >= 0.7) \n        {\n            grade = \"D\";\n        } \n   \
    \     else if (grades[i] >= 0.0) \n        {\n            grade = \"D-\";\n  \
    \      } \n        else \n        {\n            grade = \"E\";\n        }\n \
    \       letter_grades[i] = grade;\n    }\n    return letter_grades;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwtmtgctg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    return grades.map!((a) => {\n\
    \    if (a >= 4.0)\n    {\n      return \"A+\";\n    }\n    else if (a >= 3.7)\n\
    \    {\n      return \"A\";\n    }\n    else if (a >= 3.3)\n    {\n      return\
    \ \"A-\";\n    }\n    else if (a >= 3.0)\n    {\n      return \"B+\";\n    }\n\
    \    else if (a >= 2.7)\n    {\n      return \"B\";\n    }\n    else if (a >=\
    \ 2.3)\n    {\n      return \"B-\";\n    }\n    else if (a >= 2.0)\n    {\n  \
    \    return \"C+\";\n    }\n    else if (a >= 1.7)\n    {\n      return \"C\"\
    ;\n    }\n    else if (a >= 1.3)\n    {\n      return \"C-\";\n    }\n    else\
    \ if (a >= 1.0)\n    {\n      return \"D+\";\n    }\n    else if (a >= 0.7)\n\
    \    {\n      return \"D\";\n    }\n    else if (a >= 0.0)\n    {\n      return\
    \ \"D-\";\n    }\n    else\n    {\n      return \"E\";\n    }\n    }).array;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbfcaywc6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    //use zip to zip the grades\
    \ and letters together\n    Tuple!(float, string)[] grade_map = zip(\n       \
    \ [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0],\n        [\"A+\"\
    , \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\",\
    \ \"D-\", \"E\"]\n    );\n    return grades.map!(g => grade_map.find(g >= \"tuple[0]\"\
    )[1])();\n}\n/*\n    Write a function that takes in a string, and returns the\
    \ number of times\n    the same character is repeated consecutively.\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqxmhrpd9.d(39): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpqxmhrpd9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    import std.conv;\n    string[]\
    \ new_grades;\n    foreach(grade; grades)\n    {\n        if(grade == 4.0)\n \
    \       {\n            new_grades ~= \"A+\";\n        }\n        else if(grade\
    \ > 3.7 && grade < 4.0)\n        {\n            new_grades ~= \"A\";\n       \
    \ }\n        else if(grade > 3.3 && grade < 3.7)\n        {\n            new_grades\
    \ ~= \"A-\";\n        }\n        else if(grade > 3.0 && grade < 3.3)\n       \
    \ {\n            new_grades ~= \"B+\";\n        }\n        else if(grade > 2.7\
    \ && grade < 3.0)\n        {\n            new_grades ~= \"B\";\n        }\n  \
    \      else if(grade > 2.3 && grade < 2.7)\n        {\n            new_grades\
    \ ~= \"B-\";\n        }\n        else if(grade > 2.0 && grade < 2.3)\n       \
    \ {\n            new_grades ~= \"C+\";\n        }\n        else if(grade > 1.7\
    \ && grade < 2.0)\n        {\n            new_grades ~= \"C\";\n        }\n  \
    \      else if(grade > 1.3 && grade < 1.7)\n        {\n            new_grades\
    \ ~= \"C-\";\n        }\n        else if(grade > 1.0 && grade < 1.3)\n       \
    \ {\n            new_grades ~= \"D+\";\n        }\n        else if(grade > 0.7\
    \ && grade < 1.0)\n        {\n            new_grades ~= \"D\";\n        }\n  \
    \      else if(grade > 0.0 && grade < 0.7)\n        {\n            new_grades\
    \ ~= \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n          \
    \  new_grades ~= \"E\";\n        }\n    }\n    return new_grades;\n}\n/*\n   \
    \ Bonus:\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr3ahohwo.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpr3ahohwo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{ \n    char[] letter_grades;\n   \
    \ foreach(index, grade; grades)\n    {\n        if(grade == 4.0) letter_grades\
    \ ~= \"A+\";\n        else if(grade >= 3.7) letter_grades ~= \"A\";\n        else\
    \ if(grade >= 3.3) letter_grades ~= \"A-\";\n        else if(grade >= 3.0) letter_grades\
    \ ~= \"B+\";\n        else if(grade >= 2.7) letter_grades ~= \"B\";\n        else\
    \ if(grade >= 2.3) letter_grades ~= \"B-\";\n        else if(grade >= 2.0) letter_grades\
    \ ~= \"C+\";\n        else if(grade >= 1.7) letter_grades ~= \"C\";\n        else\
    \ if(grade >= 1.3) letter_grades ~= \"C-\";\n        else if(grade >= 1.0) letter_grades\
    \ ~= \"D+\";\n        else if(grade >= 0.7) letter_grades ~= \"D\";\n        else\
    \ if(grade >= 0.0) letter_grades ~= \"D-\";\n        else letter_grades ~= \"\
    E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnkyxop8w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] grades_arr;\n    float[]\
    \ grades_num;\n    float current_grade;\n    foreach(current_grade; grades)\n\
    \    {\n        if(current_grade >= 4.0)\n        {\n            grades_arr ~=\
    \ \"A+\";\n        }\n        else if(current_grade >= 3.7)\n        {\n     \
    \       grades_arr ~= \"A\";\n        }\n        else if(current_grade >= 3.3)\n\
    \        {\n            grades_arr ~= \"A-\";\n        }\n        else if(current_grade\
    \ >= 3.0)\n        {\n            grades_arr ~= \"B+\";\n        }\n        else\
    \ if(current_grade >= 2.7)\n        {\n            grades_arr ~= \"B\";\n    \
    \    }\n        else if(current_grade >= 2.3)\n        {\n            grades_arr\
    \ ~= \"B-\";\n        }\n        else if(current_grade >= 2.0)\n        {\n  \
    \          grades_arr ~= \"C+\";\n        }\n        else if(current_grade >=\
    \ 1.7)\n        {\n            grades_arr ~= \"C\";\n        }\n        else if(current_grade\
    \ >= 1.3)\n        {\n            grades_arr ~= \"C-\";\n        }\n        else\
    \ if(current_grade >= 1.0)\n        {\n            grades_arr ~= \"D+\";\n   \
    \     }\n        else if(current_grade >= 0.7)\n        {\n            grades_arr\
    \ ~= \"D\";\n        }\n        else if(current_grade >= 0.0)\n        {\n   \
    \         grades_arr ~= \"D-\";\n        }\n        else\n        {\n        \
    \    grades_arr ~= \"E\";\n        }\n    }\n    return grades_arr;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4byw4nal.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] grades_string = new\
    \ string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n   \
    \     if(grade > 4.0)\n        {\n            grades_string[i] = \"A+\";\n   \
    \     }\n        else if(grade > 3.7)\n        {\n            grades_string[i]\
    \ = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            grades_string[i]\
    \ = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            grades_string[i]\
    \ = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            grades_string[i]\
    \ = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            grades_string[i]\
    \ = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            grades_string[i]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            grades_string[i]\
    \ = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            grades_string[i]\
    \ = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            grades_string[i]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            grades_string[i]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            grades_string[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            grades_string[i]\
    \ = \"E\";\n        }\n    }\n    return grades_string;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7xgovjb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] new_grades;\n    foreach(grade;\
    \ grades)\n    {\n        if(grade >= 4.0)\n        {\n            new_grades\
    \ ~= \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n           \
    \ new_grades ~= \"A\";\n        }\n        else if(grade > 3.3)\n        {\n \
    \           new_grades ~= \"A-\";\n        }\n        else if(grade > 3.0)\n \
    \       {\n            new_grades ~= \"B+\";\n        }\n        else if(grade\
    \ > 2.7)\n        {\n            new_grades ~= \"B\";\n        }\n        else\
    \ if(grade > 2.3)\n        {\n            new_grades ~= \"B-\";\n        }\n \
    \       else if(grade > 2.0)\n        {\n            new_grades ~= \"C+\";\n \
    \       }\n        else if(grade > 1.7)\n        {\n            new_grades ~=\
    \ \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            new_grades\
    \ ~= \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n           \
    \ new_grades ~= \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n\
    \            new_grades ~= \"D\";\n        }\n        else if(grade > 0.0)\n \
    \       {\n            new_grades ~= \"D-\";\n        }\n        else\n      \
    \  {\n            new_grades ~= \"E\";\n        }\n    }\n    return new_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37guqeus.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] grades1 = new string[grades.length];\n\
    \    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] ==\
    \ 4.0)\n        {\n            grades1[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] > 3.7)\n        {\n            grades1[i] = \"A\";\n        }\n \
    \       else if (grades[i] > 3.3)\n        {\n            grades1[i] = \"A-\"\
    ;\n        }\n        else if (grades[i] > 3.0)\n        {\n            grades1[i]\
    \ = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n       \
    \     grades1[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n    \
    \    {\n            grades1[i] = \"B-\";\n        }\n        else if (grades[i]\
    \ > 2.0)\n        {\n            grades1[i] = \"C+\";\n        }\n        else\
    \ if (grades[i] > 1.7)\n        {\n            grades1[i] = \"C\";\n        }\n\
    \        else if (grades[i] > 1.3)\n        {\n            grades1[i] = \"C-\"\
    ;\n        }\n        else if (grades[i] > 1.0)\n        {\n            grades1[i]\
    \ = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n       \
    \     grades1[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n    \
    \    {\n            grades1[i] = \"D-\";\n        }\n        else if (grades[i]\
    \ == 0.0)\n        {\n            grades1[i] = \"E\";\n        }\n    }\n    return\
    \ grades1;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n\
    \    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjk77phh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{ \n    string[] grades_out = new string[grades.length];\
    \ \n    foreach(i,grd; grades) \n    { \n        if(grd >= 3.7) \n           \
    \ grades_out[i] = \"A\"; \n        else if(grd >= 3.3) \n            grades_out[i]\
    \ = \"A-\"; \n        else if(grd >= 3.0) \n            grades_out[i] = \"B+\"\
    ; \n        else if(grd >= 2.7) \n            grades_out[i] = \"B\"; \n      \
    \  else if(grd >= 2.3) \n            grades_out[i] = \"B-\"; \n        else if(grd\
    \ >= 2.0) \n            grades_out[i] = \"C+\"; \n        else if(grd >= 1.7)\
    \ \n            grades_out[i] = \"C\"; \n        else if(grd >= 1.3) \n      \
    \      grades_out[i] = \"C-\"; \n        else if(grd >= 1.0) \n            grades_out[i]\
    \ = \"D+\"; \n        else if(grd >= 0.7) \n            grades_out[i] = \"D\"\
    ; \n        else if(grd >= 0.0) \n            grades_out[i] = \"D-\"; \n     \
    \   else \n            grades_out[i] = \"E\"; \n    } \n    return grades_out;\
    \ \n} \nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_qcxylh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    int[] letter = new int[grades.length];\n\
    \    string[] letter_grades = new string[grades.length];\n    for (int i = 0;\
    \ i < grades.length; i++)\n    {\n        letter[i] = (int) floor(10 * grades[i]);\n\
    \    }\n    for (int i = 0; i < letter.length; i++)\n    {\n        if (letter[i]\
    \ == 40)\n        {\n            letter_grades[i] = \"A+\";\n        }\n     \
    \   else if (letter[i] == 37)\n        {\n            letter_grades[i] = \"A\"\
    ;\n        }\n        else if (letter[i] == 33)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if (letter[i] == 30)\n        {\n       \
    \     letter_grades[i] = \"B+\";\n        }\n        else if (letter[i] == 27)\n\
    \        {\n            letter_grades[i] = \"B\";\n        }\n        else if\
    \ (letter[i] == 23)\n        {\n            letter_grades[i] = \"B-\";\n     \
    \   }\n        else if (letter[i] == 20)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if (letter[i] == 17)\n        {\n       \
    \     letter_grades[i] = \"C\";\n        }\n        else if (letter[i] == 13)\n\
    \        {\n            letter_grades[i] = \"C-\";\n        }\n        else if\
    \ (letter[i] == 10)\n        {\n            letter_grades[i] = \"D+\";\n     \
    \   }\n        else if (letter[i] == 7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if (letter[i] == 0)\n        {\n         \
    \   letter_grades[i] = \"D-\";\n        }\n        else\n        {\n         \
    \   letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr8dwz52_.d(36): Error: C style cast illegal, use cast(int)floor(10
    * grades[i])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr8dwz52_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    result.length\
    \ = grades.length;\n    foreach(i, v; grades)\n    {\n        if(v >= 4.0)\n \
    \           result[i] = \"A+\";\n        else if(v >= 3.7)\n            result[i]\
    \ = \"A\";\n        else if(v >= 3.3)\n            result[i] = \"A-\";\n     \
    \   else if(v >= 3.0)\n            result[i] = \"B+\";\n        else if(v >= 2.7)\n\
    \            result[i] = \"B\";\n        else if(v >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(v >= 2.0)\n            result[i] = \"C+\";\n    \
    \    else if(v >= 1.7)\n            result[i] = \"C\";\n        else if(v >= 1.3)\n\
    \            result[i] = \"C-\";\n        else if(v >= 1.0)\n            result[i]\
    \ = \"D+\";\n        else if(v >= 0.7)\n            result[i] = \"D\";\n     \
    \   else if(v >= 0.0)\n            result[i] = \"D-\";\n        else\n       \
    \     result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyzs3oxd3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] res;\n    int i;\n\
    \    int gpa_len = grades.length;\n    res.length = gpa_len;\n    foreach(float\
    \ gpa; grades)\n    {\n        if(gpa == 4.0)\n        {\n            res[i] =\
    \ \"A+\";\n        }\n        else if(gpa > 3.7)\n        {\n            res[i]\
    \ = \"A\";\n        }\n        else if(gpa > 3.3)\n        {\n            res[i]\
    \ = \"A-\";\n        }\n        else if(gpa > 3.0)\n        {\n            res[i]\
    \ = \"B+\";\n        }\n        else if(gpa > 2.7)\n        {\n            res[i]\
    \ = \"B\";\n        }\n        else if(gpa > 2.3)\n        {\n            res[i]\
    \ = \"B-\";\n        }\n        else if(gpa > 2.0)\n        {\n            res[i]\
    \ = \"C+\";\n        }\n        else if(gpa > 1.7)\n        {\n            res[i]\
    \ = \"C\";\n        }\n        else if(gpa > 1.3)\n        {\n            res[i]\
    \ = \"C-\";\n        }\n        else if(gpa > 1.0)\n        {\n            res[i]\
    \ = \"D+\";\n        }\n        else if(gpa > 0.7)\n        {\n            res[i]\
    \ = \"D\";\n        }\n        else if(gpa > 0.0)\n        {\n            res[i]\
    \ = \"D-\";\n        }\n        else if(gpa == 0.0)\n        {\n            res[i]\
    \ = \"E\";\n        }\n        i++;\n    }\n    return res;\n}\n/*\n   Example:\n\
    \    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]\n    \n    >>> numerical_letter_grade([4.0, 3L, 1.7, 2L,\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnpquvhxu.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnpquvhxu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    for (int i = 0; i < grades.length; i++) \n    {\n\
    \        if (grades[i] >= 4.0)\n            letter_grades[i] = \"A+\";\n     \
    \   else if (grades[i] >= 3.7)\n            letter_grades[i] = \"A\";\n      \
    \  else if (grades[i] >= 3.3)\n            letter_grades[i] = \"A-\";\n      \
    \  else if (grades[i] >= 3.0)\n            letter_grades[i] = \"B+\";\n      \
    \  else if (grades[i] >= 2.7)\n            letter_grades[i] = \"B\";\n       \
    \ else if (grades[i] >= 2.3)\n            letter_grades[i] = \"B-\";\n       \
    \ else if (grades[i] >= 2.0)\n            letter_grades[i] = \"C+\";\n       \
    \ else if (grades[i] >= 1.7)\n            letter_grades[i] = \"C\";\n        else\
    \ if (grades[i] >= 1.3)\n            letter_grades[i] = \"C-\";\n        else\
    \ if (grades[i] >= 1.0)\n            letter_grades[i] = \"D+\";\n        else\
    \ if (grades[i] >= 0.7)\n            letter_grades[i] = \"D\";\n        else if\
    \ (grades[i] >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n \
    \           letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\n \n\
    /*\n    It is the last week of the semester and the teacher has to give the grades\n\
    \    to students. The teacher has been making her own algorithm for grading.\n\
    \    The only problem is, she has lost the code she used for grading.\n    She\
    \ has given you an array of GPAs for some students and you have to write \n  \
    \  a function that can output an array of letter grades using the following table:\n\
    \             GPA       |    Letter grade\n              4.0                A+\n\
    \            > 3.7                A \n            > 3.3                A- \n\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwjmx8wa9.d(65): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwjmx8wa9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n    {\n    string[] result;\n    foreach(float\
    \ grade; grades)\n        {\n        if(grade > 3.7)\n            result ~= \"\
    A\";\n        else if(grade > 3.3)\n            result ~= \"A-\";\n        else\
    \ if(grade > 3.0)\n            result ~= \"B+\";\n        else if(grade > 2.7)\n\
    \            result ~= \"B\";\n        else if(grade > 2.3)\n            result\
    \ ~= \"B-\";\n        else if(grade > 2.0)\n            result ~= \"C+\";\n  \
    \      else if(grade > 1.7)\n            result ~= \"C\";\n        else if(grade\
    \ > 1.3)\n            result ~= \"C-\";\n        else if(grade > 1.0)\n      \
    \      result ~= \"D+\";\n        else if(grade > 0.7)\n            result ~=\
    \ \"D\";\n        else if(grade > 0.0)\n            result ~= \"D-\";\n      \
    \  else if(grade == 0.0)\n            result ~= \"E\";\n        else\n       \
    \     result ~= \"F\";\n        }\n    return result;\n    }\n// Solution\n/*\n\
    The way I did it was to make a dictionary to hold the letter grades and their\n\
    \    numerical equivalents. I used the numerical_grade function to calculate the\n\
    \    numerical grade for each of the passed GPA grades. From there I was able\
    \ to\n    use the numerical_grade as a key for the dictionary to find the letter\
    \ grade.\n    Finally, I returned the array of letter grades.\n*/\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ke67q_n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{ \n    return grades.map!(x => \n\
    \    {\n        if (x >= 4.0) \n            return \"A+\";\n        else if (x\
    \ >= 3.7) \n            return \"A\";\n        else if (x >= 3.3) \n         \
    \   return \"A-\";\n        else if (x >= 3.0) \n            return \"B+\";\n\
    \        else if (x >= 2.7) \n            return \"B\";\n        else if (x >=\
    \ 2.3) \n            return \"B-\";\n        else if (x >= 2.0) \n           \
    \ return \"C+\";\n        else if (x >= 1.7) \n            return \"C\";\n   \
    \     else if (x >= 1.3) \n            return \"C-\";\n        else if (x >= 1.0)\
    \ \n            return \"D+\";\n        else if (x >= 0.7) \n            return\
    \ \"D\";\n        else if (x >= 0.0) \n            return \"D-\";\n        else\
    \ \n            return \"E\";\n    });\n} \nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_mjmcyqj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] output;\n    foreach(grade;\
    \ grades)\n    {\n        string letter_grade;\n        switch(grade)\n      \
    \  {\n            case 4.0:\n                letter_grade = \"A+\";\n        \
    \        break;\n            case gt(grade, 3.7):\n                letter_grade\
    \ = \"A\";\n                break;\n            case gt(grade, 3.3):\n       \
    \         letter_grade = \"A-\";\n                break;\n            case gt(grade,\
    \ 3.0):\n                letter_grade = \"B+\";\n                break;\n    \
    \        case gt(grade, 2.7):\n                letter_grade = \"B\";\n       \
    \         break;\n            case gt(grade, 2.3):\n                letter_grade\
    \ = \"B-\";\n                break;\n            case gt(grade, 2.0):\n      \
    \          letter_grade = \"C+\";\n                break;\n            case gt(grade,\
    \ 1.7):\n                letter_grade = \"C\";\n                break;\n     \
    \       case gt(grade, 1.3):\n                letter_grade = \"C-\";\n       \
    \         break;\n            case gt(grade, 1.0):\n                letter_grade\
    \ = \"D+\";\n                break;\n            case gt(grade, 0.7):\n      \
    \          letter_grade = \"D\";\n                break;\n            case gt(grade,\
    \ 0.0):\n                letter_grade = \"D-\";\n                break;\n    \
    \        case 0.0:\n                letter_grade = \"E\";\n                break;\n\
    \        }\n        output ~= letter_grade;\n    }\n    return output;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoidl7qv7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] out;\n    foreach(i;\
    \ grades) \n    {\n        if(i > 4.0) out ~= \"A+\";\n        else if(i > 3.7)\
    \ out ~= \"A\";\n        else if(i > 3.3) out ~= \"A-\";\n        else if(i >\
    \ 3.0) out ~= \"B+\";\n        else if(i > 2.7) out ~= \"B\";\n        else if(i\
    \ > 2.3) out ~= \"B-\";\n        else if(i > 2.0) out ~= \"C+\";\n        else\
    \ if(i > 1.7) out ~= \"C\";\n        else if(i > 1.3) out ~= \"C-\";\n       \
    \ else if(i > 1.0) out ~= \"D+\";\n        else if(i > 0.7) out ~= \"D\";\n  \
    \      else if(i > 0.0) out ~= \"D-\";\n        else out ~= \"E\";\n    }\n  \
    \  return out;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpka2v3efp.d(32): Error: found \''out\'' when expecting \'';\''
    following statement\n/tmp/tmpka2v3efp.d(35): Error: found \''out\'' instead of
    statement\n/tmp/tmpka2v3efp.d(36): Error: found \''out\'' instead of statement\n/tmp/tmpka2v3efp.d(37):
    Error: found \''out\'' instead of statement\n/tmp/tmpka2v3efp.d(38): Error: found
    \''out\'' instead of statement\n/tmp/tmpka2v3efp.d(39): Error: found \''out\''
    instead of statement\n/tmp/tmpka2v3efp.d(40): Error: found \''out\'' instead of
    statement\n/tmp/tmpka2v3efp.d(41): Error: found \''out\'' instead of statement\n/tmp/tmpka2v3efp.d(42):
    Error: found \''out\'' instead of statement\n/tmp/tmpka2v3efp.d(43): Error: found
    \''out\'' instead of statement\n/tmp/tmpka2v3efp.d(44): Error: found \''out\''
    instead of statement\n/tmp/tmpka2v3efp.d(45): Error: found \''out\'' instead of
    statement\n/tmp/tmpka2v3efp.d(46): Error: found \''out\'' instead of statement\n/tmp/tmpka2v3efp.d(47):
    Error: found \''out\'' instead of statement\n/tmp/tmpka2v3efp.d(49): Error: expression
    expected, not \''out\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpka2v3efp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\tstring[] letter_grades = new string[grades.length];\n\
    \    if (grades.length == 0)\n    {\n        return letter_grades;\n    }\n\t\
    else\n\t{\n\t\tint count = 0;\n\t\tforeach(float grade; grades)\n\t\t{\n\t\t\t\
    if (grade > 3.7)\n\t\t\t{\n\t\t\t\tletter_grades[count] = \"A\";\n\t\t\t}\n\t\t\
    \telse if (grade > 3.3)\n\t\t\t{\n\t\t\t\tletter_grades[count] = \"A-\";\n\t\t\
    \t}\n\t\t\telse if (grade > 3.0)\n\t\t\t{\n\t\t\t\tletter_grades[count] = \"B+\"\
    ;\n\t\t\t}\n\t\t\telse if (grade > 2.7)\n\t\t\t{\n\t\t\t\tletter_grades[count]\
    \ = \"B\";\n\t\t\t}\n\t\t\telse if (grade > 2.3)\n\t\t\t{\n\t\t\t\tletter_grades[count]\
    \ = \"B-\";\n\t\t\t}\n\t\t\telse if (grade > 2.0)\n\t\t\t{\n\t\t\t\tletter_grades[count]\
    \ = \"C+\";\n\t\t\t}\n\t\t\telse if (grade > 1.7)\n\t\t\t{\n\t\t\t\tletter_grades[count]\
    \ = \"C\";\n\t\t\t}\n\t\t\telse if (grade > 1.3)\n\t\t\t{\n\t\t\t\tletter_grades[count]\
    \ = \"C-\";\n\t\t\t}\n\t\t\telse if (grade > 1.0)\n\t\t\t{\n\t\t\t\tletter_grades[count]\
    \ = \"D+\";\n\t\t\t}\n\t\t\telse if (grade > 0.7)\n\t\t\t{\n\t\t\t\tletter_grades[count]\
    \ = \"D\";\n\t\t\t}\n\t\t\telse if (grade > 0.0)\n\t\t\t{\n\t\t\t\tletter_grades[count]\
    \ = \"D-\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tletter_grades[\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa2dmlrs6.d(89): Error: expression expected, not \''unittest\''\n/tmp/tmpa2dmlrs6.d(90):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmpa2dmlrs6.d(91): Error: found
    \''alias\'' when expecting \'';\'' following statement\n/tmp/tmpa2dmlrs6.d(100):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa2dmlrs6.d(100):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa2dmlrs6.d(100):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa2dmlrs6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    auto  result = new string[grades.length];\n\
    \    foreach(i, ref g; grades)\n    {\n        if(g > 4.0)\n            result[i]\
    \ = \"A+\";\n        else if(g > 3.7)\n            result[i] = \"A\";\n      \
    \  else if(g > 3.3)\n            result[i] = \"A-\";\n        else if(g > 3.0)\n\
    \            result[i] = \"B+\";\n        else if(g > 2.7)\n            result[i]\
    \ = \"B\";\n        else if(g > 2.3)\n            result[i] = \"B-\";\n      \
    \  else if(g > 2.0)\n            result[i] = \"C+\";\n        else if(g > 1.7)\n\
    \            result[i] = \"C\";\n        else if(g > 1.3)\n            result[i]\
    \ = \"C-\";\n        else if(g > 1.0)\n            result[i] = \"D+\";\n     \
    \   else if(g > 0.7)\n            result[i] = \"D\";\n        else if(g > 0.0)\n\
    \            result[i] = \"D-\";\n        else\n            result[i] = \"E\"\
    ;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppc_pg25p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n  enum letter_grade = tuple(string,float);\n\
    \  static letter_grade[] grades_t = [tuple(\"A+\",4.0), tuple(\"A\",3.7), tuple(\"\
    A-\",3.3), tuple(\"B+\",3.0),\n                                    tuple(\"B\"\
    ,2.7), tuple(\"B-\",2.3), tuple(\"C+\",2.0), tuple(\"C\",1.7),\n             \
    \                       tuple(\"C-\",1.3), tuple(\"D+\",1.0), tuple(\"D\",0.7),\
    \ tuple(\"D-\",0.0),\n                                    tuple(\"E\",0.0)];\n\
    \  static string[] letter_grades = grades_t.map!(a => a[0]).array;\n  static float[]\
    \ numbers = grades_t.map!(a => a[1]).array;\n  float[] weights = new float[grades.length];\n\
    \  string[] letter_grades = new string[grades.length];\n  foreach(i, v; grades)\n\
    \  {\n    int k = 0;\n    while(k < numbers.length && v >= numbers[k])\n     \
    \ k++;\n    weights[i] = k;\n  }\n  foreach(i, v; weights)\n    letter_grades[i]\
    \ = letter_grades[v];\n  return letter_grades;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3uum_54c.d(32): Error: found \'')\'' when expecting \''.\''
    following float\n/tmp/tmp3uum_54c.d(32): Error: found \'';\'' when expecting identifier
    following \''float.\''\n/tmp/tmp3uum_54c.d(33): Error: found \''static\'' when
    expecting \'',\''\n/tmp/tmp3uum_54c.d(33): Error: found \''grades_t\'' when expecting
    \'',\''\n/tmp/tmp3uum_54c.d(33): Error: expression expected, not \''=\''\n/tmp/tmp3uum_54c.d(36):
    Error: found \'';\'' when expecting \'',\''\n/tmp/tmp3uum_54c.d(37): Error: expression
    expected, not \''static\''\n/tmp/tmp3uum_54c.d(37): Error: found \''string\''
    when expecting \'',\''\n/tmp/tmp3uum_54c.d(37): Error: found \''letter_grades\''
    when expecting \'',\''\n/tmp/tmp3uum_54c.d(37): Error: expression expected, not
    \''=\''\n/tmp/tmp3uum_54c.d(37): Error: found \''grades_t\'' when expecting \'',\''\n/tmp/tmp3uum_54c.d(37):
    Error: found \'';\'' when expecting \'',\''\n/tmp/tmp3uum_54c.d(38): Error: expression
    expected, not \''static\''\n/tmp/tmp3uum_54c.d(38): Error: found \''float\'' when
    expecting \'',\''\n/tmp/tmp3uum_54c.d(38): Error: found \''numbers\'' when expecting
    \'',\''\n/tmp/tmp3uum_54c.d(38): Error: expression expected, not \''=\''\n/tmp/tmp3uum_54c.d(38):
    Error: found \''grades_t\'' when expecting \'',\''\n/tmp/tmp3uum_54c.d(38): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmp3uum_54c.d(39): Error: found \''[\''
    when expecting \''.\'' following float\n/tmp/tmp3uum_54c.d(39): Error: found \'']\''
    when expecting identifier following \''float.\''\n/tmp/tmp3uum_54c.d(39): Error:
    found \''weights\'' when expecting \'',\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp3uum_54c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grade = new\
    \ string[grades.length];\n    foreach(i, val; grades)\n    {\n        if(val >\
    \ 3.7)\n        {\n            letter_grade[i] = \"A\";\n        }\n        else\
    \ if(val > 3.3)\n        {\n            letter_grade[i] = \"A-\";\n        }\n\
    \        else if(val > 3.0)\n        {\n            letter_grade[i] = \"B+\";\n\
    \        }\n        else if(val > 2.7)\n        {\n            letter_grade[i]\
    \ = \"B\";\n        }\n        else if(val > 2.3)\n        {\n            letter_grade[i]\
    \ = \"B-\";\n        }\n        else if(val > 2.0)\n        {\n            letter_grade[i]\
    \ = \"C+\";\n        }\n        else if(val > 1.7)\n        {\n            letter_grade[i]\
    \ = \"C\";\n        }\n        else if(val > 1.3)\n        {\n            letter_grade[i]\
    \ = \"C-\";\n        }\n        else if(val > 1.0)\n        {\n            letter_grade[i]\
    \ = \"D+\";\n        }\n        else if(val > 0.7)\n        {\n            letter_grade[i]\
    \ = \"D\";\n        }\n        else if(val > 0.0)\n        {\n            letter_grade[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grade[i] =\
    \ \"E\";\n        }\n    }\n    return letter_grade;\n}\n/*\n    A professor wants\
    \ to create a code which will generate a bar chart \n    of student's grades.\
    \ The grades are given as a list of grades.\n    The professor wants to use the\
    \ following set of characters to represent \n    the level of grades :\n     \
    \       90% or more  : 'A'\n            80% or more  : 'B'\n            70% or\
    \ more  : 'C'\n            60% or more  : 'D'\n            below 60%    : 'F'\n\
    \    The grades are represented as a string of 'A\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpskfgz0vn.d(86): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpskfgz0vn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade\
    \ < 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n      \
    \  else if(grade >= 0.0 && grade < 0.7)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else if(grade >= 0.7 && grade < 1.0)\n       \
    \ {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >=\
    \ 1.0 && grade < 1.3)\n        {\n            letter_grades[i] = \"D+\";\n   \
    \     }\n        else if(grade >= 1.3 && grade < 1.7)\n        {\n           \
    \ letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.7 && grade\
    \ < 2.0)\n        {\n            letter_grades[i] = \"C\";\n        }\n      \
    \  else if(grade >= 2.0 && grade < 2.3)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if(grade >= 2.3 && grade < 2.7)\n       \
    \ {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade\
    \ >= 2.7 && grade < 3.0)\n        {\n            letter_grades[i] = \"B\";\n \
    \       }\n        else if(grade >= 3.0 && grade < 3.3)\n        {\n         \
    \   letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 3.3 && grade\
    \ < 3.7)\n        {\n            letter_grades[i] = \"A-\";\n        }\n     \
    \   else if(grade >= 3.7 && grade < 4.0)\n        {\n            letter_grades[i]\
    \ = \"A\";\n        }\n        else\n        {\n            letter_grades[i] =\
    \ \"A+\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2g7zsf9g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\tstring[] letters = to!string([]);\n\
    \tforeach(float item; grades)\n\t{\n\t\tif(item == 4.0)\n\t\t\tletters ~= \"A+\"\
    ;\n\t\telse if(item > 3.7)\n\t\t\tletters ~= \"A\";\n\t\telse if(item > 3.3)\n\
    \t\t\tletters ~= \"A-\";\n\t\telse if(item > 3.0)\n\t\t\tletters ~= \"B+\";\n\t\
    \telse if(item > 2.7)\n\t\t\tletters ~= \"B\";\n\t\telse if(item > 2.3)\n\t\t\t\
    letters ~= \"B-\";\n\t\telse if(item > 2.0)\n\t\t\tletters ~= \"C+\";\n\t\telse\
    \ if(item > 1.7)\n\t\t\tletters ~= \"C\";\n\t\telse if(item > 1.3)\n\t\t\tletters\
    \ ~= \"C-\";\n\t\telse if(item > 1.0)\n\t\t\tletters ~= \"D+\";\n\t\telse if(item\
    \ > 0.7)\n\t\t\tletters ~= \"D\";\n\t\telse if(item > 0.0)\n\t\t\tletters ~= \"\
    D-\";\n\t\telse if(item == 0.0)\n\t\t\tletters ~= \"E\";\n\t}\n\treturn letters;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9vle85ke.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letters;\n    foreach(int\
    \ i; 0..grades.length)\n    {\n        if(grades[i] >= 4.0)\n        {\n     \
    \       letters[i] = \"A+\";\n        }\n        else if(grades[i] >= 3.7)\n \
    \       {\n            letters[i] = \"A\";\n        }\n        else if(grades[i]\
    \ >= 3.3)\n        {\n            letters[i] = \"A-\";\n        }\n        else\
    \ if(grades[i] >= 3.0)\n        {\n            letters[i] = \"B+\";\n        }\n\
    \        else if(grades[i] >= 2.7)\n        {\n            letters[i] = \"B\"\
    ;\n        }\n        else if(grades[i] >= 2.3)\n        {\n            letters[i]\
    \ = \"B-\";\n        }\n        else if(grades[i] >= 2.0)\n        {\n       \
    \     letters[i] = \"C+\";\n        }\n        else if(grades[i] >= 1.7)\n   \
    \     {\n            letters[i] = \"C\";\n        }\n        else if(grades[i]\
    \ >= 1.3)\n        {\n            letters[i] = \"C-\";\n        }\n        else\
    \ if(grades[i] >= 1.0)\n        {\n            letters[i] = \"D+\";\n        }\n\
    \        else if(grades[i] >= 0.7)\n        {\n            letters[i] = \"D\"\
    ;\n        }\n        else if(grades[i] >= 0.0)\n        {\n            letters[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letters[i] = \"E\"\
    ;\n        }\n    }\n    return letters;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpigxtzeys.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] output = new string[grades.length];\n\
    \    foreach(elem; grades)\n    {\n        if(elem == 4.0)\n        {\n      \
    \      output ~= \"A+\";\n        }\n        else if(elem >= 3.7)\n        {\n\
    \            output ~= \"A\";\n        }\n        else if(elem >= 3.3)\n     \
    \   {\n            output ~= \"A-\";\n        }\n        else if(elem >= 3.0)\n\
    \        {\n            output ~= \"B+\";\n        }\n        else if(elem >=\
    \ 2.7)\n        {\n            output ~= \"B\";\n        }\n        else if(elem\
    \ >= 2.3)\n        {\n            output ~= \"B-\";\n        }\n        else if(elem\
    \ >= 2.0)\n        {\n            output ~= \"C+\";\n        }\n        else if(elem\
    \ >= 1.7)\n        {\n            output ~= \"C\";\n        }\n        else if(elem\
    \ >= 1.3)\n        {\n            output ~= \"C-\";\n        }\n        else if(elem\
    \ >= 1.0)\n        {\n            output ~= \"D+\";\n        }\n        else if(elem\
    \ >= 0.7)\n        {\n            output ~= \"D\";\n        }\n        else if(elem\
    \ >= 0.0)\n        {\n            output ~= \"D-\";\n        }\n        else\n\
    \        {\n            output ~= \"E\";\n        }\n    }\n    return output;\n\
    }\n/*\nThe same teacher from before has given you an array of letter grades and\n\
    \    you have to output an array of numerical grades. This time, you know the\n\
    \    grading scale and you have to write a function for it. \n    The input array\
    \ should not have repeated grades. \n    That is, for example, if the input is\
    \ [\"A\", \"B\", \"A\", \"B\", \"A\", \"A\"],\n    the function should throw an\
    \ exception.\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n \
    \   assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpckznzdtz.d(90): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpckznzdtz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    int count;\n    string[] ret;\n\
    \    foreach(float x; grades)\n    {\n        count++;\n    }\n    ret = new string[count];\n\
    \    count = 0;\n    foreach(float x; grades)\n    {\n        if(x == 4.0)\n \
    \       {\n            ret[count] = \"A+\";\n        }\n        else if(x >= 3.7)\n\
    \        {\n            ret[count] = \"A\";\n        }\n        else if(x >= 3.3)\n\
    \        {\n            ret[count] = \"A-\";\n        }\n        else if(x >=\
    \ 3.0)\n        {\n            ret[count] = \"B+\";\n        }\n        else if(x\
    \ >= 2.7)\n        {\n            ret[count] = \"B\";\n        }\n        else\
    \ if(x >= 2.3)\n        {\n            ret[count] = \"B-\";\n        }\n     \
    \   else if(x >= 2.0)\n        {\n            ret[count] = \"C+\";\n        }\n\
    \        else if(x >= 1.7)\n        {\n            ret[count] = \"C\";\n     \
    \   }\n        else if(x >= 1.3)\n        {\n            ret[count] = \"C-\";\n\
    \        }\n        else if(x >= 1.0)\n        {\n            ret[count] = \"\
    D+\";\n        }\n        else if(x >= 0.7)\n        {\n            ret[count]\
    \ = \"D\";\n        }\n        else if(x >= 0.0)\n        {\n            ret[count]\
    \ = \"D-\";\n        }\n        else\n        {\n            ret[count] = \"E\"\
    ;\n        }\n        count++;\n    }\n    return ret;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps1zw9s9y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[];\n    foreach(index, grade; grades)\n    {\n        if(grades[index]\
    \ == 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n      \
    \  else if(grades[index] > 3.7)\n        {\n            letter_grades ~= \"A\"\
    ;\n        }\n        else if(grades[index] > 3.3)\n        {\n            letter_grades\
    \ ~= \"A-\";\n        }\n        else if(grades[index] > 3.0)\n        {\n   \
    \         letter_grades ~= \"B+\";\n        }\n        else if(grades[index] >\
    \ 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else\
    \ if(grades[index] > 2.3)\n        {\n            letter_grades ~= \"B-\";\n \
    \       }\n        else if(grades[index] > 2.0)\n        {\n            letter_grades\
    \ ~= \"C+\";\n        }\n        else if(grades[index] > 1.7)\n        {\n   \
    \         letter_grades ~= \"C\";\n        }\n        else if(grades[index] >\
    \ 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else\
    \ if(grades[index] > 1.0)\n        {\n            letter_grades ~= \"D+\";\n \
    \       }\n        else if(grades[index] > 0.7)\n        {\n            letter_grades\
    \ ~= \"D\";\n        }\n        else if(grades[index] > 0.0)\n        {\n    \
    \        letter_grades ~= \"D-\";\n        }\n        else if(grades[index] ==\
    \ 0.0)\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n   \
    \ return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkw8uii7l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n\
    \    for (int i = 0; i < grades.length; i++) \n    {\n        if (grades[i] >=\
    \ 4.0) \n        {\n            result[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] >= 3.7) \n        {\n            result[i] = \"A\";\n        }\n\
    \        else if (grades[i] >= 3.3) \n        {\n            result[i] = \"A-\"\
    ;\n        }\n        else if (grades[i] >= 3.0) \n        {\n            result[i]\
    \ = \"B+\";\n        }\n        else if (grades[i] >= 2.7) \n        {\n     \
    \       result[i] = \"B\";\n        }\n        else if (grades[i] >= 2.3) \n \
    \       {\n            result[i] = \"B-\";\n        }\n        else if (grades[i]\
    \ >= 2.0) \n        {\n            result[i] = \"C+\";\n        }\n        else\
    \ if (grades[i] >= 1.7) \n        {\n            result[i] = \"C\";\n        }\n\
    \        else if (grades[i] >= 1.3) \n        {\n            result[i] = \"C-\"\
    ;\n        }\n        else if (grades[i] >= 1.0) \n        {\n            result[i]\
    \ = \"D+\";\n        }\n        else if (grades[i] >= 0.7) \n        {\n     \
    \       result[i] = \"D\";\n        }\n        else if (grades[i] >= 0.0) \n \
    \       {\n            result[i] = \"D-\";\n        }\n        else \n       \
    \ {\n            result[i] = \"E\";\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4fzvaj53.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] Letter_Grades;\n  \
    \  foreach(string grade; grades)\n    {\n        if(grade == 4.0)\n        {\n\
    \            Letter_Grades ~= \"A+\";\n        }\n        else if(grade > 3.7)\n\
    \        {\n            Letter_Grades ~= \"A\";\n        }\n        else if(grade\
    \ > 3.3)\n        {\n            Letter_Grades ~= \"A-\";\n        }\n       \
    \ else if(grade > 3.0)\n        {\n            Letter_Grades ~= \"B+\";\n    \
    \    }\n        else if(grade > 2.7)\n        {\n            Letter_Grades ~=\
    \ \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            Letter_Grades\
    \ ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n           \
    \ Letter_Grades ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n\
    \            Letter_Grades ~= \"C\";\n        }\n        else if(grade > 1.3)\n\
    \        {\n            Letter_Grades ~= \"C-\";\n        }\n        else if(grade\
    \ > 1.0)\n        {\n            Letter_Grades ~= \"D+\";\n        }\n       \
    \ else if(grade > 0.7)\n        {\n            Letter_Grades ~= \"D\";\n     \
    \   }\n        else if(grade > 0.0)\n        {\n            Letter_Grades ~= \"\
    D-\";\n        }\n        else if(grade == 0.0)\n        {\n            Letter_Grades\
    \ ~= \"E\";\n        }\n    }\n    return Letter_Grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0u8zppf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letters;\n    foreach(i;\
    \ grades)\n    {\n        //Sets the grade to the letter based on their GPA\n\
    \        if(i >= 4.0)\n        {\n            letters ~= \"A+\";\n        }\n\
    \        else if(i >= 3.7)\n        {\n            letters ~= \"A\";\n       \
    \ }\n        else if(i >= 3.3)\n        {\n            letters ~= \"A-\";\n  \
    \      }\n        else if(i >= 3.0)\n        {\n            letters ~= \"B+\"\
    ;\n        }\n        else if(i >= 2.7)\n        {\n            letters ~= \"\
    B\";\n        }\n        else if(i >= 2.3)\n        {\n            letters ~=\
    \ \"B-\";\n        }\n        else if(i >= 2.0)\n        {\n            letters\
    \ ~= \"C+\";\n        }\n        else if(i >= 1.7)\n        {\n            letters\
    \ ~= \"C\";\n        }\n        else if(i >= 1.3)\n        {\n            letters\
    \ ~= \"C-\";\n        }\n        else if(i >= 1.0)\n        {\n            letters\
    \ ~= \"D+\";\n        }\n        else if(i >= 0.7)\n        {\n            letters\
    \ ~= \"D\";\n        }\n        else if(i >= 0.0)\n        {\n            letters\
    \ ~= \"D-\";\n        }\n        else\n        {\n            letters ~= \"E\"\
    ;\n        }\n    }\n    return letters;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0z8fn76k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    /*\n    WRITE YOUR CODE HERE\n\
    \    */\n    import std.string;\n    import std.stdio;\n    string[] letter;\n\
    \    for(int i = 0; i < grades.length; i++)\n    {\n        //writefln(\"%s\"\
    , grades[i]);\n        if(grades[i] >= 4.0)\n        {\n            letter ~=\
    \ \"A+\";\n        }\n        else if(grades[i] >= 3.7)\n        {\n         \
    \   letter ~= \"A\";\n        }\n        else if(grades[i] >= 3.3)\n        {\n\
    \            letter ~= \"A-\";\n        }\n        else if(grades[i] >= 3.0)\n\
    \        {\n            letter ~= \"B+\";\n        }\n        else if(grades[i]\
    \ >= 2.7)\n        {\n            letter ~= \"B\";\n        }\n        else if(grades[i]\
    \ >= 2.3)\n        {\n            letter ~= \"B-\";\n        }\n        else if(grades[i]\
    \ >= 2.0)\n        {\n            letter ~= \"C+\";\n        }\n        else if(grades[i]\
    \ >= 1.7)\n        {\n            letter ~= \"C\";\n        }\n        else if(grades[i]\
    \ >= 1.3)\n        {\n            letter ~= \"C-\";\n        }\n        else if(grades[i]\
    \ >= 1.0)\n        {\n            letter ~= \"D+\";\n        }\n        else if(grades[i]\
    \ >= 0.7)\n        {\n            letter ~= \"D\";\n        }\n        else if(grades[i]\
    \ >= 0.0)\n        {\n            letter ~= \"D-\";\n        }\n        else\n\
    \        {\n            letter ~= \"E\";\n        }\n    }\n    return letter;\n\
    }\n// Quick test\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkrkt2u9l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    import std.typecons : tuple;\n\
    \    auto ranges = [tuple(4.0f, \"A+\"),\n                   tuple(3.7f, \"A\"\
    ),\n                   tuple(3.3f, \"A-\"),\n                   tuple(3.0f, \"\
    B+\"),\n                   tuple(2.7f, \"B\"),\n                   tuple(2.3f,\
    \ \"B-\"),\n                   tuple(2.0f, \"C+\"),\n                   tuple(1.7f,\
    \ \"C\"),\n                   tuple(1.3f, \"C-\"),\n                   tuple(1.0f,\
    \ \"D+\"),\n                   tuple(0.7f, \"D\"),\n                   tuple(0.0f,\
    \ \"D-\"),\n                   tuple(0.0f, \"E\")];\n    string[] letter_grades;\n\
    \    foreach(grade; grades)\n    {\n        foreach(range; ranges)\n        {\n\
    \            if(grade > range[0])\n            {\n                letter_grades\
    \ ~= range[1];\n                break;\n            }\n        }\n    }\n    return\
    \ letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzniqezlr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n\
    \        float grade = grades[i];\n        if (grade >= 4.0)\n        {\n    \
    \        letter_grades[i] = \"A+\";\n        }\n        else if (grade >= 3.7)\n\
    \        {\n            letter_grades[i] = \"A\";\n        }\n        else if\
    \ (grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n\
    \        else if (grade >= 3.0)\n        {\n            letter_grades[i] = \"\
    B+\";\n        }\n        else if (grade >= 2.7)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if (grade >= 2.3)\n        {\n           \
    \ letter_grades[i] = \"B-\";\n        }\n        else if (grade >= 2.0)\n    \
    \    {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grade\
    \ >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n     \
    \   else if (grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n\
    \        }\n        else if (grade >= 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if (grade >= 0.7)\n        {\n          \
    \  letter_grades[i] = \"D\";\n        }\n        else if (grade >= 0.0)\n    \
    \    {\n            letter_grades[i] = \"D-\";\n        }\n        else if (grade\
    \ == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\n/*\n    \n    TODO:\n    create a class called\
    \ Course that has a string array for names of students,\n    a float array for\
    \ grades of students, and a function called add_student()\n    that takes in the\
    \ name and grade of the student.\n    \n    TODO:\n    create a function called\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgzhgx9sc.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpgzhgx9sc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] grades_letter = new\
    \ string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n\
    \        if (grades[i] == 4.0)\n        {\n            grades_letter[i] = \"A+\"\
    ;\n        }\n        else if (grades[i] > 3.7)\n        {\n            grades_letter[i]\
    \ = \"A\";\n        }\n        else if (grades[i] > 3.3)\n        {\n        \
    \    grades_letter[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n\
    \        {\n            grades_letter[i] = \"B+\";\n        }\n        else if\
    \ (grades[i] > 2.7)\n        {\n            grades_letter[i] = \"B\";\n      \
    \  }\n        else if (grades[i] > 2.3)\n        {\n            grades_letter[i]\
    \ = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n        {\n       \
    \     grades_letter[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n\
    \        {\n            grades_letter[i] = \"C\";\n        }\n        else if\
    \ (grades[i] > 1.3)\n        {\n            grades_letter[i] = \"C-\";\n     \
    \   }\n        else if (grades[i] > 1.0)\n        {\n            grades_letter[i]\
    \ = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n       \
    \     grades_letter[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n\
    \        {\n            grades_letter[i] = \"D-\";\n        }\n        else if\
    \ (grades[i] == 0.0)\n        {\n            grades_letter[i] = \"E\";\n     \
    \   }\n    }\n    return grades_letter;\n}\nstring[] numerical_letter_grade2(float[]\
    \ grades) \n{\n    string[] grades_letter = new string[grades.length];\n    int\
    \ i = 0;\n\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n   \
    \ assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph005n96f.d(95): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph005n96f.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letters=new string[grades.length];\n\
    \    for(int i=0;i<grades.length;i++)\n    {\n        if(grades[i]==4.0)\n   \
    \     {\n            letters[i]=\"A+\";\n        }\n        else if(grades[i]>3.7)\n\
    \        {\n            letters[i]=\"A\";\n        }\n        else if(grades[i]>3.3)\n\
    \        {\n            letters[i]=\"A-\";\n        }\n        else if(grades[i]>3.0)\n\
    \        {\n            letters[i]=\"B+\";\n        }\n        else if(grades[i]>2.7)\n\
    \        {\n            letters[i]=\"B\";\n        }\n        else if(grades[i]>2.3)\n\
    \        {\n            letters[i]=\"B-\";\n        }\n        else if(grades[i]>2.0)\n\
    \        {\n            letters[i]=\"C+\";\n        }\n        else if(grades[i]>1.7)\n\
    \        {\n            letters[i]=\"C\";\n        }\n        else if(grades[i]>1.3)\n\
    \        {\n            letters[i]=\"C-\";\n        }\n        else if(grades[i]>1.0)\n\
    \        {\n            letters[i]=\"D+\";\n        }\n        else if(grades[i]>0.7)\n\
    \        {\n            letters[i]=\"D\";\n        }\n        else if(grades[i]>0.0)\n\
    \        {\n            letters[i]=\"D-\";\n        }\n        else if(grades[i]==0.0)\n\
    \        {\n            letters[i]=\"E\";\n        }\n    }\n    return letters;\n\
    }\nstring[] grade_equation(float[] grades)\n{\n    string[] final_grades = numerical_letter_grade(grades);\n\
    \    return final_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjnpi2ypn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] out_grades;\n    foreach(grade;\
    \ grades)\n    {\n        string temp;\n        if(grade == 4.0)\n        {\n\
    \            temp = \"A+\";\n        }\n        else if(grade > 3.7)\n       \
    \ {\n            temp = \"A\";\n        }\n        else if(grade > 3.3)\n    \
    \    {\n            temp = \"A-\";\n        }\n        else if(grade > 3.0)\n\
    \        {\n            temp = \"B+\";\n        }\n        else if(grade > 2.7)\n\
    \        {\n            temp = \"B\";\n        }\n        else if(grade > 2.3)\n\
    \        {\n            temp = \"B-\";\n        }\n        else if(grade > 2.0)\n\
    \        {\n            temp = \"C+\";\n        }\n        else if(grade > 1.7)\n\
    \        {\n            temp = \"C\";\n        }\n        else if(grade > 1.3)\n\
    \        {\n            temp = \"C-\";\n        }\n        else if(grade > 1.0)\n\
    \        {\n            temp = \"D+\";\n        }\n        else if(grade > 0.7)\n\
    \        {\n            temp = \"D\";\n        }\n        else if(grade > 0.0)\n\
    \        {\n            temp = \"D-\";\n        }\n        else\n        {\n \
    \           temp = \"E\";\n        }\n        out_grades ~= temp;\n    }\n   \
    \ return out_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr78dqfj0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    float[] grade_arr = grades.dup;\n\
    \    string[] letter_grade = new string[0];\n    foreach(i; grade_arr)\n    {\n\
    \        if(i>=4.0)\n        {\n            letter_grade ~= \"A+\";\n        }\n\
    \        else if(i>=3.7)\n        {\n            letter_grade ~= \"A\";\n    \
    \    }\n        else if(i>=3.3)\n        {\n            letter_grade ~= \"A-\"\
    ;\n        }\n        else if(i>=3.0)\n        {\n            letter_grade ~=\
    \ \"B+\";\n        }\n        else if(i>=2.7)\n        {\n            letter_grade\
    \ ~= \"B\";\n        }\n        else if(i>=2.3)\n        {\n            letter_grade\
    \ ~= \"B-\";\n        }\n        else if(i>=2.0)\n        {\n            letter_grade\
    \ ~= \"C+\";\n        }\n        else if(i>=1.7)\n        {\n            letter_grade\
    \ ~= \"C\";\n        }\n        else if(i>=1.3)\n        {\n            letter_grade\
    \ ~= \"C-\";\n        }\n        else if(i>=1.0)\n        {\n            letter_grade\
    \ ~= \"D+\";\n        }\n        else if(i>=0.7)\n        {\n            letter_grade\
    \ ~= \"D\";\n        }\n        else if(i>=0.0)\n        {\n            letter_grade\
    \ ~= \"D-\";\n        }\n        else if(i>=-0.0)\n        {\n            letter_grade\
    \ ~= \"E\";\n        }\n    }\n    return letter_grade;\n}\nstring[] numerical_letter_grade_2(float[]\
    \ grades) \n{\n    float[] grade_arr = grades.dup;\n    string[] letter_grade\
    \ = new string[0];\n    foreach(i; grade_arr)\n    {\n        letter_grade ~=\
    \ i;\n    }\n    return letter_grade;\n}\nfloat[] numerical_letter_grade\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoj556xx9.d(102): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoj556xx9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(i; grades) \n    {\n        if(i >= 4.0) \n        {\n            letter_grades\
    \ ~= \"A+\";\n        }\n        else if(i >= 3.7) \n        {\n            letter_grades\
    \ ~= \"A\";\n        }\n        else if(i >= 3.3) \n        {\n            letter_grades\
    \ ~= \"A-\";\n        }\n        else if(i >= 3.0) \n        {\n            letter_grades\
    \ ~= \"B+\";\n        }\n        else if(i >= 2.7) \n        {\n            letter_grades\
    \ ~= \"B\";\n        }\n        else if(i >= 2.3) \n        {\n            letter_grades\
    \ ~= \"B-\";\n        }\n        else if(i >= 2.0) \n        {\n            letter_grades\
    \ ~= \"C+\";\n        }\n        else if(i >= 1.7) \n        {\n            letter_grades\
    \ ~= \"C\";\n        }\n        else if(i >= 1.3) \n        {\n            letter_grades\
    \ ~= \"C-\";\n        }\n        else if(i >= 1.0) \n        {\n            letter_grades\
    \ ~= \"D+\";\n        }\n        else if(i >= 0.7) \n        {\n            letter_grades\
    \ ~= \"D\";\n        }\n        else if(i >= 0.0) \n        {\n            letter_grades\
    \ ~= \"D-\";\n        }\n        else \n        {\n            letter_grades ~=\
    \ \"E\";\n        }\n    }\n    return letter_grades;\n}\n/*\nWrite a function\
    \ that uses your solution from the previous problem \nand computes the average\
    \ letter grade from an array of letter grades.\n    Example:\n    >>> average_letter_grade([\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"])\n    \"B\"\n*/\nstring average_letter_grade(string[]\
    \ grades) \n{\n    float numerical_grade = 0.0;\n    foreach(i; grades) \n   \
    \ {\n        if(i ==\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp36y2mizf.d(103): Error: expression expected, not \''unittest\''\n/tmp/tmp36y2mizf.d(104):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmp36y2mizf.d(114): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp36y2mizf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n\
    \    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n \
    \           result[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n  \
    \      {\n            result[i] = \"A\";\n        }\n        else if(grade >=\
    \ 3.3)\n        {\n            result[i] = \"A-\";\n        }\n        else if(grade\
    \ >= 3.0)\n        {\n            result[i] = \"B+\";\n        }\n        else\
    \ if(grade >= 2.7)\n        {\n            result[i] = \"B\";\n        }\n   \
    \     else if(grade >= 2.3)\n        {\n            result[i] = \"B-\";\n    \
    \    }\n        else if(grade >= 2.0)\n        {\n            result[i] = \"C+\"\
    ;\n        }\n        else if(grade >= 1.7)\n        {\n            result[i]\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            result[i]\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ result[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n \
    \           result[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n   \
    \     {\n            result[i] = \"D-\";\n        }\n        else\n        {\n\
    \            result[i] = \"E\";\n        }\n    }\n    return result;\n}\n/*\n\
    \    It is the last week of the semester and the teacher has to give the grades\n\
    \    to students. The teacher has been making her own algorithm for grading.\n\
    \    The only problem is, she has lost the code she used for grading.\n    She\
    \ has given you an array of GPAs for some students and you have to write \n  \
    \  a function that can output an array of letter grades using the following table:\n\
    \             GPA       |    Letter grade\n              4.0                A+\n\
    \            > 3.7                A \n            > 3.3                A\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz3ii54_y.d(90): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpz3ii54_y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    immutable Ranges = tuple(3.7f,3.3f,3.0f,2.7f,2.3f,2.0f,1.7f,1.3f,1.0f,0.7f,0.0f);\n\
    \    immutable letters = tuple(\"A+\",\"A\",\"A-\",\"B+\",\"B\",\"B-\",\"C+\"\
    ,\"C\",\"C-\",\"D+\",\"D\");\n    string[] result;\n    foreach(int i, float grade;\
    \ grades) \n    {\n        if(grade == 4.0f) \n        {\n            result ~=\
    \ \"A+\";\n        } \n        else if(grade == 0.0f) \n        {\n          \
    \  result ~= \"E\";\n        } \n        else \n        {\n            foreach(int\
    \ j, float range; Ranges) \n            {\n                if(grade > range) \n\
    \                {\n                    result ~= letters[j];\n              \
    \      break;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n \
    \   assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0mvrjzr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    int[] GPA_RANGE = [4.0, 3.7,\
    \ 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0];\n    string[] LETTER_GRADE\
    \ = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\"\
    , \"D\", \"D-\", \"E\"];\n    string[] new_grades = new string[$];\n    int index;\n\
    \    foreach(float gpa; grades) \n    {\n        index = 0;\n        while(gpa\
    \ < GPA_RANGE[index]) \n        {\n            index++;\n        }\n        new_grades\
    \ ~= LETTER_GRADE[index];\n    }\n    return new_grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvplv0nq1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] answer = new string[grades.length];\n\
    \    foreach(int i, float value; grades)\n    {\n        answer[i] = \"\";\n \
    \       if(value == 4.0)\n        {\n            answer[i] = \"A+\";\n       \
    \ }\n        else if(value > 3.7)\n        {\n            answer[i] = \"A\";\n\
    \        }\n        else if(value > 3.3)\n        {\n            answer[i] = \"\
    A-\";\n        }\n        else if(value > 3.0)\n        {\n            answer[i]\
    \ = \"B+\";\n        }\n        else if(value > 2.7)\n        {\n            answer[i]\
    \ = \"B\";\n        }\n        else if(value > 2.3)\n        {\n            answer[i]\
    \ = \"B-\";\n        }\n        else if(value > 2.0)\n        {\n            answer[i]\
    \ = \"C+\";\n        }\n        else if(value > 1.7)\n        {\n            answer[i]\
    \ = \"C\";\n        }\n        else if(value > 1.3)\n        {\n            answer[i]\
    \ = \"C-\";\n        }\n        else if(value > 1.0)\n        {\n            answer[i]\
    \ = \"D+\";\n        }\n        else if(value > 0.7)\n        {\n            answer[i]\
    \ = \"D\";\n        }\n        else if(value > 0.0)\n        {\n            answer[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            answer[i] = \"E\"\
    ;\n        }\n    }\n    return answer;\n}\n/*\n    The teaacher was so happy\
    \ with your program that she is going to give you\n    a bonus point. She wants\
    \ you to change the letter grading to numerical grading\n    using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+            98\n            > 3.7                A             95\n\
    \            > 3.3                A-            93\n            > 3.0        \
    \        B+            88\n            > 2.7                B             85\n\
    \            > 2.3                B\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq69vc1bl.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpq69vc1bl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letters = new string[grades.length];\n\
    \    foreach(int i, float g; grades)\n    {\n        if(g == 4.0)\n          \
    \  letters[i] = \"A+\";\n        else if(g > 3.7)\n            letters[i] = \"\
    A\";\n        else if(g > 3.3)\n            letters[i] = \"A-\";\n        else\
    \ if(g > 3.0)\n            letters[i] = \"B+\";\n        else if(g > 2.7)\n  \
    \          letters[i] = \"B\";\n        else if(g > 2.3)\n            letters[i]\
    \ = \"B-\";\n        else if(g > 2.0)\n            letters[i] = \"C+\";\n    \
    \    else if(g > 1.7)\n            letters[i] = \"C\";\n        else if(g > 1.3)\n\
    \            letters[i] = \"C-\";\n        else if(g > 1.0)\n            letters[i]\
    \ = \"D+\";\n        else if(g > 0.7)\n            letters[i] = \"D\";\n     \
    \   else if(g > 0.0)\n            letters[i] = \"D-\";\n        else\n       \
    \     letters[i] = \"E\";\n    }\n    return letters;\n}\n/*\n    We are going\
    \ to use a more modern approach,\n    however, and use typeclasses.\n*/\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa2635iu0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n  string[] letter_grades;\n  for(int\
    \ i = 0; i < grades.length; i++)\n  {\n    if(grades[i] >= 4.0)\n      letter_grades\
    \ ~= \"A+\";\n    else if(grades[i] >= 3.7)\n      letter_grades ~= \"A\";\n \
    \   else if(grades[i] >= 3.3)\n      letter_grades ~= \"A-\";\n    else if(grades[i]\
    \ >= 3.0)\n      letter_grades ~= \"B+\";\n    else if(grades[i] >= 2.7)\n   \
    \   letter_grades ~= \"B\";\n    else if(grades[i] >= 2.3)\n      letter_grades\
    \ ~= \"B-\";\n    else if(grades[i] >= 2.0)\n      letter_grades ~= \"C+\";\n\
    \    else if(grades[i] >= 1.7)\n      letter_grades ~= \"C\";\n    else if(grades[i]\
    \ >= 1.3)\n      letter_grades ~= \"C-\";\n    else if(grades[i] >= 1.0)\n   \
    \   letter_grades ~= \"D+\";\n    else if(grades[i] >= 0.7)\n      letter_grades\
    \ ~= \"D\";\n    else if(grades[i] >= 0.0)\n      letter_grades ~= \"D-\";\n \
    \   else\n      letter_grades ~= \"E\";\n  }\n  return letter_grades;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt3juaqq1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(i, grade; grades)\n    {\n        float\
    \ temp;\n        if(grade < 0)\n        {\n            temp = 0;\n        }\n\
    \        else if(grade > 4)\n        {\n            temp = 4;\n        }\n   \
    \     else\n        {\n            temp = grade;\n        }\n        if(temp >=\
    \ 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else\
    \ if(temp >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n       \
    \ }\n        else if(temp >= 3.0)\n        {\n            letter_grades[i] = \"\
    B+\";\n        }\n        else if(temp >= 2.7)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if(temp >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(temp >= 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if(temp >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(temp >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(temp >= 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if(temp >= 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(temp >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else if(temp == 0.0)\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6z0hyyd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(x; grades)\n    {\n        if(x == 4.0)\n        {\n            letter_grades\
    \ ~= \"A+\";\n        }\n        else if(x > 3.7)\n        {\n            letter_grades\
    \ ~= \"A\";\n        }\n        else if(x > 3.3)\n        {\n            letter_grades\
    \ ~= \"A-\";\n        }\n        else if(x > 3.0)\n        {\n            letter_grades\
    \ ~= \"B+\";\n        }\n        else if(x > 2.7)\n        {\n            letter_grades\
    \ ~= \"B\";\n        }\n        else if(x > 2.3)\n        {\n            letter_grades\
    \ ~= \"B-\";\n        }\n        else if(x > 2.0)\n        {\n            letter_grades\
    \ ~= \"C+\";\n        }\n        else if(x > 1.7)\n        {\n            letter_grades\
    \ ~= \"C\";\n        }\n        else if(x > 1.3)\n        {\n            letter_grades\
    \ ~= \"C-\";\n        }\n        else if(x > 1.0)\n        {\n            letter_grades\
    \ ~= \"D+\";\n        }\n        else if(x > 0.7)\n        {\n            letter_grades\
    \ ~= \"D\";\n        }\n        else if(x > 0.0)\n        {\n            letter_grades\
    \ ~= \"D-\";\n        }\n        else if(x == 0.0)\n        {\n            letter_grades\
    \ ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jr5hoz0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    // write\
    \ your code here\n    import std.conv;\n    foreach(element; grades)\n    {\n\
    \        if(element >= 4.0)\n        {\n            result ~= \"A+\";\n      \
    \  }\n        else if(element >= 3.7)\n        {\n            result ~= \"A\"\
    ;\n        }\n        else if(element >= 3.3)\n        {\n            result ~=\
    \ \"A-\";\n        }\n        else if(element >= 3.0)\n        {\n           \
    \ result ~= \"B+\";\n        }\n        else if(element >= 2.7)\n        {\n \
    \           result ~= \"B\";\n        }\n        else if(element >= 2.3)\n   \
    \     {\n            result ~= \"B-\";\n        }\n        else if(element >=\
    \ 2.0)\n        {\n            result ~= \"C+\";\n        }\n        else if(element\
    \ >= 1.7)\n        {\n            result ~= \"C\";\n        }\n        else if(element\
    \ >= 1.3)\n        {\n            result ~= \"C-\";\n        }\n        else if(element\
    \ >= 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(element\
    \ >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(element\
    \ >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else\n\
    \        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n\
    }\nstring[] numerical_letter_grade2(float[] grades)\n{\n    string[] result;\n\
    \    // write your code here\n    import std.conv;\n    foreach(element; grades)\n\
    \    {\n        if(element >= 4.0)\n        {\n            result ~= \"A+\";\n\
    \        }\n        else if(element >= 3.7)\n        {\n            result ~=\
    \ \"A\";\n        }\n        else if(element >= 3.3)\n        {\n            result\
    \ ~= \"A-\";\n        }\n        else if(element >= 3.0)\n        {\n        \
    \    result ~= \"\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ja4a6vj.d(118): Error: found \''A\'' when expecting \'';\''
    following statement\n/tmp/tmp4ja4a6vj.d(118): Error: found \''B\'' when expecting
    \'';\'' following statement\n/tmp/tmp4ja4a6vj.d(118): Error: found \''C\'' when
    expecting \'';\'' following statement\n/tmp/tmp4ja4a6vj.d(118): Error: found \''C\''
    when expecting \'';\'' following statement\n/tmp/tmp4ja4a6vj.d(118): Error: found
    \''A\'' when expecting \'';\'' following statement\n/tmp/tmp4ja4a6vj.d(119): Error:
    found \''D\'' when expecting \'';\'' following statement\n/tmp/tmp4ja4a6vj.d(120):
    Error: found \''D\'' when expecting \'';\'' following statement\n/tmp/tmp4ja4a6vj.d(121):
    Error: found \''E\'' when expecting \'';\'' following statement\n/tmp/tmp4ja4a6vj.d(122):
    Error: found \''D\'' when expecting \'';\'' following statement\n/tmp/tmp4ja4a6vj.d(122):
    Error: found \''D\'' when expecting \'';\'' following statement\n/tmp/tmp4ja4a6vj.d(122):
    Error: found \''C\'' when expecting \'';\'' following statement\n/tmp/tmp4ja4a6vj.d(122):
    Error: found \''B\'' when expecting \'';\'' following statement\n/tmp/tmp4ja4a6vj.d(122):
    Error: found \''B\'' when expecting \'';\'' following statement\n/tmp/tmp4ja4a6vj.d(123):
    Error: found \''E\'' when expecting \'';\'' following statement\n/tmp/tmp4ja4a6vj.d(123):
    Error: found \''D\'' when expecting \'';\'' following statement\n/tmp/tmp4ja4a6vj.d(123):
    Error: unterminated string constant starting at /tmp/tmp4ja4a6vj.d(123)\n/tmp/tmp4ja4a6vj.d(125):
    Error: found \''EOF\'' when expecting \'';\'' following statement\n/tmp/tmp4ja4a6vj.d(125):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp4ja4a6vj.d(125):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp4ja4a6vj.d(125):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ja4a6vj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    float[] letter_grade = new float[grades.length];\n\
    \    string[] letter_grade_output = new string[grades.length];\n    int i;\n \
    \   int j;\n    float temp;\n    float[] grade_sort = new float[10];\n    float[]\
    \ key = [0.0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0];\n    char[]\
    \ key_letter = \"ED+DC-C+BC-B+AB-A+\".dup;\n    for (i = 0; i < grades.length;\
    \ i++)\n    {\n        for (j = 0; j < key.length; j++)\n        {\n         \
    \   if (grades[i] >= key[j])\n            {\n                letter_grade[i] =\
    \ key_letter[j];\n                j = key.length;\n            }\n        }\n\
    \    }\n    for (i = 0; i < letter_grade.length; i++)\n    {\n        temp = letter_grade[i];\n\
    \        for (j = 0; j < key_letter.length; j++)\n        {\n            if (temp\
    \ == key_letter[j])\n            {\n                letter_grade_output[i] = key_letter[j\
    \ .. j + 1];\n                j = key_letter.length;\n            }\n        }\n\
    \    }\n    return letter_grade_output;\n}\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36c898mf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\tdouble[] boundaries;\n\tstring[]\
    \ letters;\n\tdoubles output;\n\t\n\tgrades = map!double(grades);\n\toutput =\
    \ map!(i => (i < 0.7) ? 0.0 : i)(grades);\n\toutput = map!(i => round(i * 10))(output);\n\
    \toutput = map!(i => i / 10)(output);\n\t\n\tboundaries = [\n\t\t4.0,\n\t\t3.7,\n\
    \t\t3.3,\n\t\t3.0,\n\t\t2.7,\n\t\t2.3,\n\t\t2.0,\n\t\t1.7,\n\t\t1.3,\n\t\t1.0,\n\
    \t\t0.7,\n\t\t0.0\n\t];\n\t\n\tletters = [\n\t\t\"A+\",\n\t\t\"A\",\n\t\t\"A-\"\
    ,\n\t\t\"B+\",\n\t\t\"B\",\n\t\t\"B-\",\n\t\t\"C+\",\n\t\t\"C\",\n\t\t\"C-\",\n\
    \t\t\"D+\",\n\t\t\"D\",\n\t\t\"D-\",\n\t\t\"E\"\n\t];\n\t\n\treturn map!(i =>\
    \ letters[find(boundaries, i)])(output);\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpru2dcnzw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\tenum Grade { A_plus, A, A_minus,\
    \ B_plus, B, B_minus, C_plus, C, C_minus, D_plus, D, D_minus, E }\n\t\n\tstring[]\
    \ letter_grades = new string[grades.length];\n\t\n\tforeach(int i, float grade;\
    \ grades) \n\t{\n\t\tint index = cast(int)round(grade);\n\t\t\n\t\tif(grade ==\
    \ 4.0) \n\t\t{\n\t\t\tindex = cast(int)Grade.A_plus;\n\t\t}\n\t\telse if(grade\
    \ > 3.7) \n\t\t{\n\t\t\tindex = cast(int)Grade.A;\n\t\t}\n\t\telse if(grade >\
    \ 3.3) \n\t\t{\n\t\t\tindex = cast(int)Grade.A_minus;\n\t\t}\n\t\telse if(grade\
    \ > 3.0) \n\t\t{\n\t\t\tindex = cast(int)Grade.B_plus;\n\t\t}\n\t\telse if(grade\
    \ > 2.7) \n\t\t{\n\t\t\tindex = cast(int)Grade.B;\n\t\t}\n\t\telse if(grade >\
    \ 2.3) \n\t\t{\n\t\t\tindex = cast(int)Grade.B_minus;\n\t\t}\n\t\telse if(grade\
    \ > 2.0) \n\t\t{\n\t\t\tindex = cast(int)Grade.C_plus;\n\t\t}\n\t\telse if(grade\
    \ > 1.7) \n\t\t{\n\t\t\tindex = cast(int)Grade.C;\n\t\t}\n\t\telse if(grade >\
    \ 1.3) \n\t\t{\n\t\t\tindex = cast(int)Grade.C_minus;\n\t\t}\n\t\telse if(grade\
    \ > 1.0) \n\t\t{\n\t\t\tindex = cast(int)Grade.D_plus;\n\t\t}\n\t\telse if(grade\
    \ > 0.7) \n\t\t{\n\t\t\tindex = cast(int)Grade.D;\n\t\t}\n\t\telse if(grade >\
    \ 0.0)\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl9s4od7z.d(85): Error: found \''unittest\'' instead of statement\n/tmp/tmpl9s4od7z.d(96):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9s4od7z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] results;\n    foreach(float\
    \ x; grades)\n    {\n        string result;\n        if(x >= 3.7)\n          \
    \  result = \"A\";\n        else if(x >= 3.3)\n            result = \"A-\";\n\
    \        else if(x >= 3.0)\n            result = \"B+\";\n        else if(x >=\
    \ 2.7)\n            result = \"B\";\n        else if(x >= 2.3)\n            result\
    \ = \"B-\";\n        else if(x >= 2.0)\n            result = \"C+\";\n       \
    \ else if(x >= 1.7)\n            result = \"C\";\n        else if(x >= 1.3)\n\
    \            result = \"C-\";\n        else if(x >= 1.0)\n            result =\
    \ \"D+\";\n        else if(x >= 0.7)\n            result = \"D\";\n        else\
    \ if(x >= 0.0)\n            result = \"D-\";\n        else\n            result\
    \ = \"E\";\n        results ~= result;\n    }\n    return results;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp07gqp1o_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach( float grade; grades)\n    {\n        float gpa = float(grade);\n \
    \       if (gpa >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n   \
    \     }\n        else if (gpa >= 3.7)\n        {\n            letter_grades ~=\
    \ \"A\";\n        }\n        else if (gpa >= 3.3)\n        {\n            letter_grades\
    \ ~= \"A-\";\n        }\n        else if (gpa >= 3.0)\n        {\n           \
    \ letter_grades ~= \"B+\";\n        }\n        else if (gpa >= 2.7)\n        {\n\
    \            letter_grades ~= \"B\";\n        }\n        else if (gpa >= 2.3)\n\
    \        {\n            letter_grades ~= \"B-\";\n        }\n        else if (gpa\
    \ >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n      \
    \  else if (gpa >= 1.7)\n        {\n            letter_grades ~= \"C\";\n    \
    \    }\n        else if (gpa >= 1.3)\n        {\n            letter_grades ~=\
    \ \"C-\";\n        }\n        else if (gpa >= 1.0)\n        {\n            letter_grades\
    \ ~= \"D+\";\n        }\n        else if (gpa >= 0.7)\n        {\n           \
    \ letter_grades ~= \"D\";\n        }\n        else if (gpa >= 0.0)\n        {\n\
    \            letter_grades ~= \"D-\";\n        }\n        else\n        {\n  \
    \          letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n\
    }\n/*\n    This approach is in my opinion, better. \n    It uses slices of arrays\
    \ so that the solution is more maintainable.\n    It uses the associative array\
    \ type to allow for easier indexing.\n    It also uses the tuple type to group\
    \ the gpa cutoff and letter grade into\n    a single datatype.\n*/\nstring[] array_based_grade_equation(float[]\
    \ grades)\n{\n    auto grade_map = [\n        tuple(0\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg63h9uyn.d(35): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpg63h9uyn.d(35): Error: semicolon expected, not \'')\''\n/tmp/tmpg63h9uyn.d(35):
    Error: found \'')\'' instead of statement\n/tmp/tmpg63h9uyn.d(102): Error: found
    \''unittest\'' when expecting \'',\''\n/tmp/tmpg63h9uyn.d(113): Error: found \''void\''
    when expecting \'',\''\n/tmp/tmpg63h9uyn.d(113): Error: found \''{\'' when expecting
    \'',\''\n/tmp/tmpg63h9uyn.d(113): Error: expression expected, not \''}\''\n/tmp/tmpg63h9uyn.d(113):
    Error: found \''EOF\'' when expecting \'',\''\n/tmp/tmpg63h9uyn.d(113): Error:
    found \''EOF\'' when expecting \'')\''\n/tmp/tmpg63h9uyn.d(113): Error: found
    \''EOF\'' instead of array initializer\n/tmp/tmpg63h9uyn.d(113): Error: semicolon
    expected following auto declaration, not \''EOF\''\n/tmp/tmpg63h9uyn.d(113): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpg63h9uyn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    return grades.map!(a => \n \
    \           a == 4 ? \"A+\" : \n            a > 3.7 ? \"A\" : \n            a\
    \ > 3.3 ? \"A-\" : \n            a > 3 ? \"B+\" : \n            a > 2.7 ? \"B\"\
    \ : \n            a > 2.3 ? \"B-\" : \n            a > 2 ? \"C+\" : \n       \
    \     a > 1.7 ? \"C\" : \n            a > 1.3 ? \"C-\" : \n            a > 1 ?\
    \ \"D+\" : \n            a > 0.7 ? \"D\" : \n            a > 0 ? \"D-\" : \n \
    \           a >= 0 ? \"E\" :\n            \"error\"\n            );\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoznmr_va.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n\
    \        if (grades[i] >= 4.0)\n        {\n            letter_grades[i] = \"A+\"\
    ;\n        }\n        else if (grades[i] >= 3.7)\n        {\n            letter_grades[i]\
    \ = \"A\";\n        }\n        else if (grades[i] >= 3.3)\n        {\n       \
    \     letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n\
    \        {\n            letter_grades[i] = \"B+\";\n        }\n        else if\
    \ (grades[i] >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n     \
    \   }\n        else if (grades[i] >= 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if (grades[i] >= 2.0)\n        {\n      \
    \      letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] >= 1.7)\n\
    \        {\n            letter_grades[i] = \"C\";\n        }\n        else if\
    \ (grades[i] >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n    \
    \    }\n        else if (grades[i] >= 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if (grades[i] >= 0.7)\n        {\n      \
    \      letter_grades[i] = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n\
    \        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n\
    \        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return\
    \ letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kov7dxr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] ret_array;\n    foreach(g;\
    \ grades)\n    {\n        if(g < 4.0 && g >= 3.7)\n        {\n            ret_array\
    \ ~= \"A\";\n        }\n        else if(g < 3.7 && g >= 3.3)\n        {\n    \
    \        ret_array ~= \"A-\";\n        }\n        else if(g < 3.3 && g >= 3.0)\n\
    \        {\n            ret_array ~= \"B+\";\n        }\n        else if(g < 3.0\
    \ && g >= 2.7)\n        {\n            ret_array ~= \"B\";\n        }\n      \
    \  else if(g < 2.7 && g >= 2.3)\n        {\n            ret_array ~= \"B-\";\n\
    \        }\n        else if(g < 2.3 && g >= 2.0)\n        {\n            ret_array\
    \ ~= \"C+\";\n        }\n        else if(g < 2.0 && g >= 1.7)\n        {\n   \
    \         ret_array ~= \"C\";\n        }\n        else if(g < 1.7 && g >= 1.3)\n\
    \        {\n            ret_array ~= \"C-\";\n        }\n        else if(g < 1.3\
    \ && g >= 1.0)\n        {\n            ret_array ~= \"D+\";\n        }\n     \
    \   else if(g < 1.0 && g >= 0.7)\n        {\n            ret_array ~= \"D\";\n\
    \        }\n        else if(g < 0.7 && g >= 0.0)\n        {\n            ret_array\
    \ ~= \"D-\";\n        }\n        else if(g < 0.0)\n        {\n            ret_array\
    \ ~= \"E\";\n        }\n        else\n        {\n            ret_array ~= \"A+\"\
    ;\n        }\n    }\n    return ret_array;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8e5vz820.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    /* \n        The process of\
    \ converting numerical grades to letter grades \n        is fairly similar to\
    \ converting numbers to strings. \n        In this case, the input array is passed\
    \ through a \n        loop that checks whether each GPA is within one of the grade\
    \ thresholds. \n        These threshold ranges were organized in descending order,\
    \ \n        thus allowing the loop to terminate as soon as a match is found.\n\
    \    */\n    string[] letters;\n    string[] converted_grades;\n    foreach(int\
    \ element; grades)\n    {\n        if(element > 3.7)\n        {\n            converted_grades\
    \ ~= \"A\";\n        }\n        else if(element > 3.3)\n        {\n          \
    \  converted_grades ~= \"A-\";\n        }\n        else if(element > 3.0)\n  \
    \      {\n            converted_grades ~= \"B+\";\n        }\n        else if(element\
    \ > 2.7)\n        {\n            converted_grades ~= \"B\";\n        }\n     \
    \   else if(element > 2.3)\n        {\n            converted_grades ~= \"B-\"\
    ;\n        }\n        else if(element > 2.0)\n        {\n            converted_grades\
    \ ~= \"C+\";\n        }\n        else if(element > 1.7)\n        {\n         \
    \   converted_grades ~= \"C\";\n        }\n        else if(element > 1.3)\n  \
    \      {\n            converted_grades ~= \"C-\";\n        }\n        else if(element\
    \ > 1.0)\n        {\n            converted_grades ~= \"D+\";\n        }\n    \
    \    else if(element > 0.7)\n        {\n            converted_grades ~= \"D\"\
    ;\n        }\n        else if(element > 0.0)\n        {\n            converted_grades\
    \ ~= \"D-\";\n        }\n        else if(element == 0.0)\n        {\n        \
    \    converted_grades ~= \"E\";\n        }\n    }\n    return converted_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd3b9ky93.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n\
    \    foreach(int i,grade; grades)\n    {\n        if(grade >= 4.0) result[i] =\
    \ \"A+\";\n        else if(grade > 3.7) result[i] = \"A\";\n        else if(grade\
    \ > 3.3) result[i] = \"A-\";\n        else if(grade > 3.0) result[i] = \"B+\"\
    ;\n        else if(grade > 2.7) result[i] = \"B\";\n        else if(grade > 2.3)\
    \ result[i] = \"B-\";\n        else if(grade > 2.0) result[i] = \"C+\";\n    \
    \    else if(grade > 1.7) result[i] = \"C\";\n        else if(grade > 1.3) result[i]\
    \ = \"C-\";\n        else if(grade > 1.0) result[i] = \"D+\";\n        else if(grade\
    \ > 0.7) result[i] = \"D\";\n        else if(grade > 0.0) result[i] = \"D-\";\n\
    \        else result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvxv7ade6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{ \n    string[] letter_grades = new\
    \ string[grades.length];\n    for (int i = 0; i < grades.length; i++) \n    {\n\
    \        if (grades[i] == 4.0)\n            letter_grades[i] = \"A+\";\n     \
    \   else if (grades[i] > 3.7)\n            letter_grades[i] = \"A\";\n       \
    \ else if (grades[i] > 3.3)\n            letter_grades[i] = \"A-\";\n        else\
    \ if (grades[i] > 3.0)\n            letter_grades[i] = \"B+\";\n        else if\
    \ (grades[i] > 2.7)\n            letter_grades[i] = \"B\";\n        else if (grades[i]\
    \ > 2.3)\n            letter_grades[i] = \"B-\";\n        else if (grades[i] >\
    \ 2.0)\n            letter_grades[i] = \"C+\";\n        else if (grades[i] > 1.7)\n\
    \            letter_grades[i] = \"C\";\n        else if (grades[i] > 1.3)\n  \
    \          letter_grades[i] = \"C-\";\n        else if (grades[i] > 1.0)\n   \
    \         letter_grades[i] = \"D+\";\n        else if (grades[i] > 0.7)\n    \
    \        letter_grades[i] = \"D\";\n        else if (grades[i] > 0.0)\n      \
    \      letter_grades[i] = \"D-\";\n        else if (grades[i] == 0.0)\n      \
    \      letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\n \n \n\
    \ \nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpja9xb0w1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    auto grades = [\"A+\", \"A\"\
    , \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\"];\n    auto nums = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0,\
    \ 0.7, 0.0, 0.0];\n    auto map = zip(nums, grades);\n    return map.map!((a,\
    \ b) => a < b ? a : b)(grades);\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplmupi790.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grade = new\
    \ string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n\
    \        if (grades[i] >= 4.0)\n        {\n            letter_grade[i] = \"A+\"\
    ;\n        }\n        else if (grades[i] >= 3.7)\n        {\n            letter_grade[i]\
    \ = \"A\";\n        }\n        else if (grades[i] >= 3.3)\n        {\n       \
    \     letter_grade[i] = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n\
    \        {\n            letter_grade[i] = \"B+\";\n        }\n        else if\
    \ (grades[i] >= 2.7)\n        {\n            letter_grade[i] = \"B\";\n      \
    \  }\n        else if (grades[i] >= 2.3)\n        {\n            letter_grade[i]\
    \ = \"B-\";\n        }\n        else if (grades[i] >= 2.0)\n        {\n      \
    \      letter_grade[i] = \"C+\";\n        }\n        else if (grades[i] >= 1.7)\n\
    \        {\n            letter_grade[i] = \"C\";\n        }\n        else if (grades[i]\
    \ >= 1.3)\n        {\n            letter_grade[i] = \"C-\";\n        }\n     \
    \   else if (grades[i] >= 1.0)\n        {\n            letter_grade[i] = \"D+\"\
    ;\n        }\n        else if (grades[i] >= 0.7)\n        {\n            letter_grade[i]\
    \ = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n       \
    \     letter_grade[i] = \"D-\";\n        }\n        else if (grades[i] == 0.0)\n\
    \        {\n            letter_grade[i] = \"E\";\n        }\n    }\n    return\
    \ letter_grade;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdjxxkqm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] grade = new string[grades.length];\n\
    \    foreach(int i; 0..grades.length)\n    {\n        if(grades[i] > 4.0)\n  \
    \      {\n            grade[i] = \"A+\";\n        }\n        else if(grades[i]\
    \ > 3.7)\n        {\n            grade[i] = \"A\";\n        }\n        else if(grades[i]\
    \ > 3.3)\n        {\n            grade[i] = \"A-\";\n        }\n        else if(grades[i]\
    \ > 3.0)\n        {\n            grade[i] = \"B+\";\n        }\n        else if(grades[i]\
    \ > 2.7)\n        {\n            grade[i] = \"B\";\n        }\n        else if(grades[i]\
    \ > 2.3)\n        {\n            grade[i] = \"B-\";\n        }\n        else if(grades[i]\
    \ > 2.0)\n        {\n            grade[i] = \"C+\";\n        }\n        else if(grades[i]\
    \ > 1.7)\n        {\n            grade[i] = \"C\";\n        }\n        else if(grades[i]\
    \ > 1.3)\n        {\n            grade[i] = \"C-\";\n        }\n        else if(grades[i]\
    \ > 1.0)\n        {\n            grade[i] = \"D+\";\n        }\n        else if(grades[i]\
    \ > 0.7)\n        {\n            grade[i] = \"D\";\n        }\n        else if(grades[i]\
    \ > 0.0)\n        {\n            grade[i] = \"D-\";\n        }\n        else if(grades[i]\
    \ > 0.0)\n        {\n            grade[i] = \"E\";\n        }\n    }\n    return\
    \ grade;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n  \
    \  assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5nlgsl3f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(index, grade; grades)\n    {\n        if(grade == 4.0) letter_grades[index]\
    \ = \"A+\";\n        else if(grade > 3.7) letter_grades[index] = \"A\";\n    \
    \    else if(grade > 3.3) letter_grades[index] = \"A-\";\n        else if(grade\
    \ > 3.0) letter_grades[index] = \"B+\";\n        else if(grade > 2.7) letter_grades[index]\
    \ = \"B\";\n        else if(grade > 2.3) letter_grades[index] = \"B-\";\n    \
    \    else if(grade > 2.0) letter_grades[index] = \"C+\";\n        else if(grade\
    \ > 1.7) letter_grades[index] = \"C\";\n        else if(grade > 1.3) letter_grades[index]\
    \ = \"C-\";\n        else if(grade > 1.0) letter_grades[index] = \"D+\";\n   \
    \     else if(grade > 0.7) letter_grades[index] = \"D\";\n        else if(grade\
    \ > 0.0) letter_grades[index] = \"D-\";\n        else letter_grades[index] = \"\
    E\";\n    }\n    return letter_grades;\n}\n/*\n    Write a function that takes\
    \ a list of 2 dimensional points and returns a\n    2 dimensional array of distances\
    \ in space.\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n  \
    \  assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdg1ey0yi.d(51): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdg1ey0yi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    // your code here\n    string[]\
    \ grade_letter = new string[grades.length];\n    for(int i = 0; i < grades.length;\
    \ i++)\n    {\n        float grade = grades[i];\n        if(grade >= 4.0)\n  \
    \      {\n            grade_letter[i] = \"A+\";\n        }\n        else if(grade\
    \ >= 3.7)\n        {\n            grade_letter[i] = \"A\";\n        }\n      \
    \  else if(grade >= 3.3)\n        {\n            grade_letter[i] = \"A-\";\n \
    \       }\n        else if(grade >= 3.0)\n        {\n            grade_letter[i]\
    \ = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n           \
    \ grade_letter[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n       \
    \ {\n            grade_letter[i] = \"B-\";\n        }\n        else if(grade >=\
    \ 2.0)\n        {\n            grade_letter[i] = \"C+\";\n        }\n        else\
    \ if(grade >= 1.7)\n        {\n            grade_letter[i] = \"C\";\n        }\n\
    \        else if(grade >= 1.3)\n        {\n            grade_letter[i] = \"C-\"\
    ;\n        }\n        else if(grade >= 1.0)\n        {\n            grade_letter[i]\
    \ = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n           \
    \ grade_letter[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n       \
    \ {\n            grade_letter[i] = \"D-\";\n        }\n        else if(grade >=\
    \ 0.0)\n        {\n            grade_letter[i] = \"E\";\n        }\n    }\n  \
    \  return grade_letter;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfc5n7gqa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    immutable float[] grade_cutoffs\
    \ = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0];\n    immutable\
    \ string[] letter_grade = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\"\
    , \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"];\n    string[] letter_grade_result\
    \ = new string[grades.length];\n    for (int i = 0; i < grades.length; i++) \n\
    \    {\n        if (grades[i] == 4.0) \n        {\n            letter_grade_result[i]\
    \ = \"A+\";\n        } \n        else if (grades[i] > 4.0) \n        {\n     \
    \       letter_grade_result[i] = \"X\";\n        } \n        else if (grades[i]\
    \ < 0.0) \n        {\n            letter_grade_result[i] = \"F\";\n        } \n\
    \        else \n        {\n            for (int j = 0; j < grade_cutoffs.length;\
    \ j++) \n            {\n                if (grades[i] >= grade_cutoffs[j]) \n\
    \                {\n                    letter_grade_result[i] = letter_grade[j];\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return letter_grade_result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiz2f_9eo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    int length = grades.length;\n\
    \    string[] ans = new string[length];\n    foreach(int i; 0..length)\n    {\n\
    \        if(grades[i] >= 4.0)\n        {\n            ans[i] = \"A+\";\n     \
    \   }\n        else if(grades[i] >= 3.7)\n        {\n            ans[i] = \"A\"\
    ;\n        }\n        else if(grades[i] >= 3.3)\n        {\n            ans[i]\
    \ = \"A-\";\n        }\n        else if(grades[i] >= 3.0)\n        {\n       \
    \     ans[i] = \"B+\";\n        }\n        else if(grades[i] >= 2.7)\n       \
    \ {\n            ans[i] = \"B\";\n        }\n        else if(grades[i] >= 2.3)\n\
    \        {\n            ans[i] = \"B-\";\n        }\n        else if(grades[i]\
    \ >= 2.0)\n        {\n            ans[i] = \"C+\";\n        }\n        else if(grades[i]\
    \ >= 1.7)\n        {\n            ans[i] = \"C\";\n        }\n        else if(grades[i]\
    \ >= 1.3)\n        {\n            ans[i] = \"C-\";\n        }\n        else if(grades[i]\
    \ >= 1.0)\n        {\n            ans[i] = \"D+\";\n        }\n        else if(grades[i]\
    \ >= 0.7)\n        {\n            ans[i] = \"D\";\n        }\n        else if(grades[i]\
    \ >= 0.0)\n        {\n            ans[i] = \"D-\";\n        }\n        else if(grades[i]\
    \ >= 0.0)\n        {\n            ans[i] = \"E\";\n        }\n    }\n    return\
    \ ans;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1gzy7rf1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] output_array;\n   \
    \ foreach(g; grades) \n    {\n        if(g < 0)\n        {\n            output_array\
    \ ~= \"E\";\n        }\n        else if(g == 0)\n        {\n            output_array\
    \ ~= \"D-\";\n        }\n        else if(g > 0 && g <= 0.7)\n        {\n     \
    \       output_array ~= \"D\";\n        }\n        else if(g > 0.7 && g <= 1.0)\n\
    \        {\n            output_array ~= \"D+\";\n        }\n        else if(g\
    \ > 1.0 && g <= 1.3)\n        {\n            output_array ~= \"C-\";\n       \
    \ }\n        else if(g > 1.3 && g <= 1.7)\n        {\n            output_array\
    \ ~= \"C\";\n        }\n        else if(g > 1.7 && g <= 2.0)\n        {\n    \
    \        output_array ~= \"C+\";\n        }\n        else if(g > 2.0 && g <= 2.3)\n\
    \        {\n            output_array ~= \"B-\";\n        }\n        else if(g\
    \ > 2.3 && g <= 2.7)\n        {\n            output_array ~= \"B\";\n        }\n\
    \        else if(g > 2.7 && g <= 3.0)\n        {\n            output_array ~=\
    \ \"B+\";\n        }\n        else if(g > 3.0 && g <= 3.3)\n        {\n      \
    \      output_array ~= \"A-\";\n        }\n        else if(g > 3.3 && g <= 3.7)\n\
    \        {\n            output_array ~= \"A\";\n        }\n        else if(g >\
    \ 3.7 && g <= 4.0)\n        {\n            output_array ~= \"A+\";\n        }\n\
    \    }\n    return output_array;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpra7f4_o5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n    in \n    {\n        enforce(grades.length\
    \ > 0, \"error: grades must not be empty\");\n        enforce(grades.all!(x =>\
    \ x >= 0.0 && x <= 4.0), \"error: grades must be between 0.0 and 4.0\");\n   \
    \ }\n    body\n    {\n        string[] output = new string[grades.length];\n \
    \       foreach(i, grade; grades)\n        {\n            if(grade >= 4.0) output[i]\
    \ = \"A+\";\n            else if(grade >= 3.7) output[i] = \"A\";\n          \
    \  else if(grade >= 3.3) output[i] = \"A-\";\n            else if(grade >= 3.0)\
    \ output[i] = \"B+\";\n            else if(grade >= 2.7) output[i] = \"B\";\n\
    \            else if(grade >= 2.3) output[i] = \"B-\";\n            else if(grade\
    \ >= 2.0) output[i] = \"C+\";\n            else if(grade >= 1.7) output[i] = \"\
    C\";\n            else if(grade >= 1.3) output[i] = \"C-\";\n            else\
    \ if(grade >= 1.0) output[i] = \"D+\";\n            else if(grade >= 0.7) output[i]\
    \ = \"D\";\n            else if(grade >= 0.0) output[i] = \"D-\";\n          \
    \  else output[i] = \"E\";\n        }\n        return output;\n    }\n// double[]\
    \ numerical_letter_grade(double[] grades) \n//     in \n//     {\n//         enforce(grades.length\
    \ > 0, \"error: grades must not be empty\");\n//         enforce(grades.all!(x\
    \ => x >= 0.0 && x <= 4.0), \"error: grades must be between 0.0 and 4.0\");\n\
    //     }\n//     body\n//     {\n//         string[] output = new string[grades.length];\n\
    //         foreach(i, grade; grades)\n//         {\n//             if(grade >=\
    \ 4.0) output[i] = \"A+\";\n//             else if(grade >= 3.\nunittest\n{\n\
    \    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplyd2540u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\tstring[] letter_grades = new string[grades.length];\n\
    \    foreach(float grade; grades)\n    {\n        if(grade >= 4.0)\n         \
    \   letter_grades ~= \"A+\";\n        else if(grade >= 3.7)\n            letter_grades\
    \ ~= \"A\";\n        else if(grade >= 3.3)\n            letter_grades ~= \"A-\"\
    ;\n        else if(grade >= 3.0)\n            letter_grades ~= \"B+\";\n     \
    \   else if(grade >= 2.7)\n            letter_grades ~= \"B\";\n        else if(grade\
    \ >= 2.3)\n            letter_grades ~= \"B-\";\n        else if(grade >= 2.0)\n\
    \            letter_grades ~= \"C+\";\n        else if(grade >= 1.7)\n       \
    \     letter_grades ~= \"C\";\n        else if(grade >= 1.3)\n            letter_grades\
    \ ~= \"C-\";\n        else if(grade >= 1.0)\n            letter_grades ~= \"D+\"\
    ;\n        else if(grade >= 0.7)\n            letter_grades ~= \"D\";\n      \
    \  else if(grade >= 0.0)\n            letter_grades ~= \"D-\";\n        else\n\
    \            letter_grades ~= \"E\";\n    }\n    return letter_grades;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1cp1occb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{ \n    string[] letter_grades;\n \
    \   foreach(n; grades)\n    {\n        static if(n >= 4.0)\n        {\n      \
    \      letter_grades ~= \"A+\";\n        }\n        else static if(n >= 3.7)\n\
    \        {\n            letter_grades ~= \"A\";\n        }\n        else static\
    \ if(n >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n \
    \       else static if(n >= 3.0)\n        {\n            letter_grades ~= \"B+\"\
    ;\n        }\n        else static if(n >= 2.7)\n        {\n            letter_grades\
    \ ~= \"B\";\n        }\n        else static if(n >= 2.3)\n        {\n        \
    \    letter_grades ~= \"B-\";\n        }\n        else static if(n >= 2.0)\n \
    \       {\n            letter_grades ~= \"C+\";\n        }\n        else static\
    \ if(n >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n  \
    \      else static if(n >= 1.3)\n        {\n            letter_grades ~= \"C-\"\
    ;\n        }\n        else static if(n >= 1.0)\n        {\n            letter_grades\
    \ ~= \"D+\";\n        }\n        else static if(n >= 0.7)\n        {\n       \
    \     letter_grades ~= \"D\";\n        }\n        else static if(n >= 0.0)\n \
    \       {\n            letter_grades ~= \"D-\";\n        }\n        else\n   \
    \     {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr2mzx0g8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    immutable hash = [\"E\": 0.0f,\
    \ \"D-\": 0.7f, \"D\": 1.0f, \"D+\": 1.3f, \"C-\": 1.7f, \"C\": 2.0f, \"C+\":\
    \ 2.3f, \"B-\": 2.7f, \"B\": 3.0f, \"B+\": 3.3f, \"A-\": 3.7f, \"A\": 4.0f, \"\
    A+\": 0.0f];\n    return grades.map!(a => hash.byKey(hash.byValue.byKey(a)).keys.front).array;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsamzu790.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{ \n    string[] letter_grades = new\
    \ string[grades.length];\n    string[] let_grades = [ \"A+\", \"A\", \"A-\", \"\
    B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\" ];\n\
    \    float[] num_grades = [ 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0,\
    \ 0.7, 0.0, 0.0 ];\n    for ( int i = 0; i < grades.length; i++ )\n    {\n   \
    \     for ( int j = 0; j < num_grades.length; j++ )\n        {\n            if\
    \ ( grades[i] >= num_grades[j] )\n            {\n                letter_grades[i]\
    \ = let_grades[j];\n                break;\n            }\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7b6m7_6g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\tstring[] result = new string[grades.length];\n\
    \tforeach(i, x; grades)\n\t{\n\t\tif(x >= 4.0)\n\t\t\tresult[i] = \"A+\";\n\t\t\
    else if(x >= 3.7)\n\t\t\tresult[i] = \"A\";\n\t\telse if(x >= 3.3)\n\t\t\tresult[i]\
    \ = \"A-\";\n\t\telse if(x >= 3.0)\n\t\t\tresult[i] = \"B+\";\n\t\telse if(x >=\
    \ 2.7)\n\t\t\tresult[i] = \"B\";\n\t\telse if(x >= 2.3)\n\t\t\tresult[i] = \"\
    B-\";\n\t\telse if(x >= 2.0)\n\t\t\tresult[i] = \"C+\";\n\t\telse if(x >= 1.7)\n\
    \t\t\tresult[i] = \"C\";\n\t\telse if(x >= 1.3)\n\t\t\tresult[i] = \"C-\";\n\t\
    \telse if(x >= 1.0)\n\t\t\tresult[i] = \"D+\";\n\t\telse if(x >= 0.7)\n\t\t\t\
    result[i] = \"D\";\n\t\telse if(x >= 0.0)\n\t\t\tresult[i] = \"D-\";\n\t\telse\n\
    \t\t\tresult[i] = \"E\";\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptqkosl1j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n    {\n        string[] letter_grades\
    \ = new string[grades.length];\n        for (int i = 0; i < grades.length; i++)\
    \ \n        {\n            if (grades[i] == 4.0) \n            {\n           \
    \     letter_grades[i] = \"A+\";\n            }\n            else if (grades[i]\
    \ > 3.7) \n            {\n                letter_grades[i] = \"A\";\n        \
    \    }\n            else if (grades[i] > 3.3) \n            {\n              \
    \  letter_grades[i] = \"A-\";\n            }\n            else if (grades[i] >\
    \ 3.0) \n            {\n                letter_grades[i] = \"B+\";\n         \
    \   }\n            else if (grades[i] > 2.7) \n            {\n               \
    \ letter_grades[i] = \"B\";\n            }\n            else if (grades[i] > 2.3)\
    \ \n            {\n                letter_grades[i] = \"B-\";\n            }\n\
    \            else if (grades[i] > 2.0) \n            {\n                letter_grades[i]\
    \ = \"C+\";\n            }\n            else if (grades[i] > 1.7) \n         \
    \   {\n                letter_grades[i] = \"C\";\n            }\n            else\
    \ if (grades[i] > 1.3) \n            {\n                letter_grades[i] = \"\
    C-\";\n            }\n            else if (grades[i] > 1.0) \n            {\n\
    \                letter_grades[i] = \"D+\";\n            }\n            else if\
    \ (grades[i] > 0.7) \n            {\n                letter_grades[i] = \"D\"\
    ;\n            }\n            else if (grades[i] > 0.0) \n            {\n    \
    \            letter_grades[i] = \"D-\";\n            }\n            else \n  \
    \          {\n                letter_grades[i] = \"E\";\n            }\n     \
    \   }\n        return letter_grades;\n    }\n    \n/*\n    The teacher decides\
    \ to have a little fun and encrypt the letter grades.\n    She has given you an\
    \ array of the letters and you have to\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzicc91xy.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpzicc91xy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    return grades.map!((i) =>\n\
    \        i > 4.0 ? \"A+\" :\n        i > 3.7 ? \"A\" :\n        i > 3.3 ? \"A-\"\
    \ :\n        i > 3.0 ? \"B+\" :\n        i > 2.7 ? \"B\" :\n        i > 2.3 ?\
    \ \"B-\" :\n        i > 2.0 ? \"C+\" :\n        i > 1.7 ? \"C\" :\n        i >\
    \ 1.3 ? \"C-\" :\n        i > 1.0 ? \"D+\" :\n        i > 0.7 ? \"D\" :\n    \
    \    i > 0.0 ? \"D-\" :\n        \"E\");\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpds31p8qq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    //TODO: your code here\n   \
    \ string[] result = new string[grades.length];\n    int i = 0;\n    foreach(float\
    \ g in grades)\n    {\n        if(g < 0.7 && g >= 0.0) result[i] = \"D-\";\n \
    \       else if(g < 1.0 && g >= 0.7) result[i] = \"D+\";\n        else if(g <\
    \ 1.3 && g >= 1.0) result[i] = \"C-\";\n        else if(g < 1.7 && g >= 1.3) result[i]\
    \ = \"C\";\n        else if(g < 2.0 && g >= 1.7) result[i] = \"C+\";\n       \
    \ else if(g < 2.3 && g >= 2.0) result[i] = \"B-\";\n        else if(g < 2.7 &&\
    \ g >= 2.3) result[i] = \"B\";\n        else if(g < 3.0 && g >= 2.7) result[i]\
    \ = \"B+\";\n        else if(g < 3.3 && g >= 3.0) result[i] = \"A-\";\n      \
    \  else if(g < 3.7 && g >= 3.3) result[i] = \"A\";\n        else if(g <= 4.0 &&\
    \ g >= 3.7) result[i] = \"A+\";\n        else result[i] = \"E\";\n        i++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv7z44a4c.d(35): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv7z44a4c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n      \
    \      letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n  \
    \      {\n            letter_grades ~= \"A\";\n        }\n        else if(grade\
    \ >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n      \
    \  else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n  \
    \      }\n        else if(grade >= 2.7)\n        {\n            letter_grades\
    \ ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n           \
    \ letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n       \
    \ {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >=\
    \ 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else\
    \ if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n\
    \        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\"\
    ;\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades\
    \ ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n           \
    \ letter_grades ~= \"D-\";\n        }\n        else if(grade >= 0.0)\n       \
    \ {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdkzrzztl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grade = new\
    \ string[];\n    foreach(i; grades)\n    {\n        if(i == 4.0)\n        {\n\
    \            letter_grade ~= \"A+\";\n        }\n        else if(i > 3.7)\n  \
    \      {\n            letter_grade ~= \"A\";\n        }\n        else if(i > 3.3)\n\
    \        {\n            letter_grade ~= \"A-\";\n        }\n        else if(i\
    \ > 3.0)\n        {\n            letter_grade ~= \"B+\";\n        }\n        else\
    \ if(i > 2.7)\n        {\n            letter_grade ~= \"B\";\n        }\n    \
    \    else if(i > 2.3)\n        {\n            letter_grade ~= \"B-\";\n      \
    \  }\n        else if(i > 2.0)\n        {\n            letter_grade ~= \"C+\"\
    ;\n        }\n        else if(i > 1.7)\n        {\n            letter_grade ~=\
    \ \"C\";\n        }\n        else if(i > 1.3)\n        {\n            letter_grade\
    \ ~= \"C-\";\n        }\n        else if(i > 1.0)\n        {\n            letter_grade\
    \ ~= \"D+\";\n        }\n        else if(i > 0.7)\n        {\n            letter_grade\
    \ ~= \"D\";\n        }\n        else if(i > 0.0)\n        {\n            letter_grade\
    \ ~= \"D-\";\n        }\n        else\n        {\n            letter_grade ~=\
    \ \"E\";\n        }\n    }\n    return letter_grade;\n}\n/*\n    Imagine you want\
    \ to create a program to make a yummy sandwich.\n    You want to ask the user\
    \ what type of bread they want, how many slices of bread they want,\n    and what\
    \ kind of filling they want.\n    Then you want to print out a receipt with the\
    \ type of bread, how many slices of bread,\n    and the type of filling.\n   \
    \ You also want to print out the total cost of the sandwich.\n    \n    You know\
    \ that bread is $2, and each filling is $2.\n    \n    Example:\n    \n\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprsu0eaow.d(90): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmprsu0eaow.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    float[] gpa = grades;\n    string[]\
    \ output = new string[grades.length];\n    for (int i = 0; i < grades.length;\
    \ i++) \n    {\n        if (gpa[i] == 4.0) \n        {\n            output[i]\
    \ = \"A+\";\n        } \n        else if (gpa[i] > 3.7) \n        {\n        \
    \    output[i] = \"A\";\n        } \n        else if (gpa[i] > 3.3) \n       \
    \ {\n            output[i] = \"A-\";\n        } \n        else if (gpa[i] > 3.0)\
    \ \n        {\n            output[i] = \"B+\";\n        } \n        else if (gpa[i]\
    \ > 2.7) \n        {\n            output[i] = \"B\";\n        } \n        else\
    \ if (gpa[i] > 2.3) \n        {\n            output[i] = \"B-\";\n        } \n\
    \        else if (gpa[i] > 2.0) \n        {\n            output[i] = \"C+\";\n\
    \        } \n        else if (gpa[i] > 1.7) \n        {\n            output[i]\
    \ = \"C\";\n        } \n        else if (gpa[i] > 1.3) \n        {\n         \
    \   output[i] = \"C-\";\n        } \n        else if (gpa[i] > 1.0) \n       \
    \ {\n            output[i] = \"D+\";\n        } \n        else if (gpa[i] > 0.7)\
    \ \n        {\n            output[i] = \"D\";\n        } \n        else if (gpa[i]\
    \ > 0.0) \n        {\n            output[i] = \"D-\";\n        } \n        else\
    \ if (gpa[i] == 0.0) \n        {\n            output[i] = \"E\";\n        }\n\
    \    }\n    return output;\n}\n/*\n    Function \n    >>> print_thrice([\"Hello\"\
    ], [1], [1\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n   \
    \ assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpduvqx98k.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpduvqx98k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{ \n    string[] grades_out = new string[grades.length];\n\
    \    int i = 0;\n    foreach(float grade; grades)\n    {\n        if(grade ==\
    \ 4.0f)\n        {\n            grades_out[i] = \"A+\";\n        }\n        else\
    \ if(grade > 3.7f)\n        {\n            grades_out[i] = \"A\";\n        }\n\
    \        else if(grade > 3.3f)\n        {\n            grades_out[i] = \"A-\"\
    ;\n        }\n        else if(grade > 3.0f)\n        {\n            grades_out[i]\
    \ = \"B+\";\n        }\n        else if(grade > 2.7f)\n        {\n           \
    \ grades_out[i] = \"B\";\n        }\n        else if(grade > 2.3f)\n        {\n\
    \            grades_out[i] = \"B-\";\n        }\n        else if(grade > 2.0f)\n\
    \        {\n            grades_out[i] = \"C+\";\n        }\n        else if(grade\
    \ > 1.7f)\n        {\n            grades_out[i] = \"C\";\n        }\n        else\
    \ if(grade > 1.3f)\n        {\n            grades_out[i] = \"C-\";\n        }\n\
    \        else if(grade > 1.0f)\n        {\n            grades_out[i] = \"D+\"\
    ;\n        }\n        else if(grade > 0.7f)\n        {\n            grades_out[i]\
    \ = \"D\";\n        }\n        else if(grade > 0.0f)\n        {\n            grades_out[i]\
    \ = \"D-\";\n        }\n        else if(grade == 0.0f)\n        {\n          \
    \  grades_out[i] = \"E\";\n        }\n        else\n        {\n            grades_out[i]\
    \ = \"GPA cannot be negative\";\n        }\n        i++;\n    }\n    return grades_out;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi4p3k4g8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    int[] grades_int = cast(int[])\
    \ grades;\n    string[] answer = new string[grades.length];\n    foreach(i, v;\
    \ grades_int)\n    {\n        if(v == 4) answer[i] = \"A+\";\n        else if(v\
    \ == 3) answer[i] = \"A\";\n        else if(v == 2) answer[i] = \"B\";\n     \
    \   else if(v == 1) answer[i] = \"C\";\n        else if(v == 0) answer[i] = \"\
    D\";\n        else answer[i] = \"E\";\n    }\n    return answer;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa5sgyu9c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    // YOUR CODE HERE\n    string[]\
    \ letter_grades;\n    import std.string;\n    foreach(i, grade; grades)\n    {\n\
    \        if(grade == 4.0)\n        {\n            letter_grades ~= \"A+\";\n \
    \       }\n        else if(grade > 3.7)\n        {\n            letter_grades\
    \ ~= \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades\
    \ ~= \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n           \
    \ letter_grades ~= \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n\
    \            letter_grades ~= \"B\";\n        }\n        else if(grade > 2.3)\n\
    \        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade\
    \ > 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n       \
    \ else if(grade > 1.7)\n        {\n            letter_grades ~= \"C\";\n     \
    \   }\n        else if(grade > 1.3)\n        {\n            letter_grades ~= \"\
    C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades\
    \ ~= \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n           \
    \ letter_grades ~= \"D\";\n        }\n        else if(grade > 0.0)\n        {\n\
    \            letter_grades ~= \"D-\";\n        }\n        else\n        {\n  \
    \          letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp305qq6eb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n\
    \    foreach(i, x; grades)\n    {\n        if(x >= 4.0)\n            result[i]\
    \ = \"A+\";\n        else if(x >= 3.7)\n            result[i] = \"A\";\n     \
    \   else if(x >= 3.3)\n            result[i] = \"A-\";\n        else if(x >= 3.0)\n\
    \            result[i] = \"B+\";\n        else if(x >= 2.7)\n            result[i]\
    \ = \"B\";\n        else if(x >= 2.3)\n            result[i] = \"B-\";\n     \
    \   else if(x >= 2.0)\n            result[i] = \"C+\";\n        else if(x >= 1.7)\n\
    \            result[i] = \"C\";\n        else if(x >= 1.3)\n            result[i]\
    \ = \"C-\";\n        else if(x >= 1.0)\n            result[i] = \"D+\";\n    \
    \    else if(x >= 0.7)\n            result[i] = \"D\";\n        else if(x >= 0.0)\n\
    \            result[i] = \"D-\";\n        else if(x >= 0.0)\n            result[i]\
    \ = \"E\";\n    }\n    return result;\n}\n/*\nThe teacher has a better algorithm\
    \ for giving grades. She asks the students\nto give their grades on a 100 scale.\
    \ She then converts this to a 4.0 scale\nusing the table below:\n        Score\
    \    |    4.0 Scale\n        95-100        4.0\n        90-94         3.7\n  \
    \      87-89         3.3\n        83-86         3.0\n        80-82         2.7\n\
    \        77-79         2.3\n        73-76         2.0\n        70-72         1.7\n\
    \        67-69         1.3\n        63-66         1.0\n        60-62         0.7\n\
    \        <60           0.0\n        \nExample:\n>>> numerical_letter_grade2([95,\
    \ 87, 72, 77, 88])\n[\"A+\", \"A-\",\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwksfe18z.d(64): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwksfe18z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    return grades.map!(a =>\n  \
    \  {\n        enum LetterGrade \n        {\n            F,\n            D_,\n\
    \            D,\n            D_plus,\n            C_,\n            C,\n      \
    \      C_plus,\n            B_,\n            B,\n            B_plus,\n       \
    \     A_,\n            A,\n            A_plus\n        }\n        auto letter_grade\
    \ = [F, D_, D, D_plus, C_, C, C_plus, B_, B, B_plus, A_, A, A_plus];\n       \
    \ return letter_grade[cast(size_t)(a * 3)];\n    }).map!(a => a.stringof.replace(\"\
    _\", \"-\")).map!(a => a.toUpper()).array;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r7l1xe0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    foreach(val;\
    \ grades) \n    {\n        if(val >= 4.0)\n            result ~= \"A+\";\n   \
    \     else if(val >= 3.7)\n            result ~= \"A\";\n        else if(val >=\
    \ 3.3)\n            result ~= \"A-\";\n        else if(val >= 3.0)\n         \
    \   result ~= \"B+\";\n        else if(val >= 2.7)\n            result ~= \"B\"\
    ;\n        else if(val >= 2.3)\n            result ~= \"B-\";\n        else if(val\
    \ >= 2.0)\n            result ~= \"C+\";\n        else if(val >= 1.7)\n      \
    \      result ~= \"C\";\n        else if(val >= 1.3)\n            result ~= \"\
    C-\";\n        else if(val >= 1.0)\n            result ~= \"D+\";\n        else\
    \ if(val >= 0.7)\n            result ~= \"D\";\n        else if(val >= 0.0)\n\
    \            result ~= \"D-\";\n        else\n            result ~= \"E\";\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd3_yb60e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  letter_grades.length = grades.length;\n    for (size_t i = 0; i < grades.length;\
    \ i++)\n    {\n        if (grades[i] >= 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if (grades[i] >= 3.7)\n        {\n      \
    \      letter_grades[i] = \"A\";\n        }\n        else if (grades[i] >= 3.3)\n\
    \        {\n            letter_grades[i] = \"A-\";\n        }\n        else if\
    \ (grades[i] >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n    \
    \    }\n        else if (grades[i] >= 2.7)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if (grades[i] >= 2.3)\n        {\n       \
    \     letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] >= 2.0)\n\
    \        {\n            letter_grades[i] = \"C+\";\n        }\n        else if\
    \ (grades[i] >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n     \
    \   }\n        else if (grades[i] >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if (grades[i] >= 1.0)\n        {\n      \
    \      letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] >= 0.7)\n\
    \        {\n            letter_grades[i] = \"D\";\n        }\n        else if\
    \ (grades[i] >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n    \
    \    }\n        else\n        {\n            letter_grades[i] = \"E\";\n     \
    \   }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyeqpwyae.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    import std.range;\n    string[]\
    \ answer = new string[grades.length];\n    for (i, x; grades)\n    {\n       \
    \ import std.algorithm;\n        string[] letter_grades = [\"E\", \"D-\", \"D\"\
    , \"D+\", \"C-\", \"C\", \"C+\", \"B-\", \"B\", \"B+\", \"A-\", \"A\", \"A+\"\
    ];\n        double[] numerical_grades = [0.0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7,\
    \ 3.0, 3.3, 3.7, 4.0];\n        answer[i] = letter_grades[lower_bound(numerical_grades,\
    \ x)];\n    }\n    return answer;\n}\nnumerical_letter_grade([4.0, 3L, 1.7, 2L,\
    \ 3.5]);\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8e9a6s32.d(34): Error: found \'')\'' when expecting \'';\''
    following for condition\n/tmp/tmp8e9a6s32.d(41): Error: found \''return\'' when
    expecting \'')\''\n/tmp/tmp8e9a6s32.d(43): Error: unexpected ( in declarator\n/tmp/tmp8e9a6s32.d(43):
    Error: basic type expected, not [\n/tmp/tmp8e9a6s32.d(43): Error: found \'',\''
    when expecting \'']\''\n/tmp/tmp8e9a6s32.d(43): Error: found \''3L\'' when expecting
    \'')\''\n/tmp/tmp8e9a6s32.d(43): Error: no identifier for declarator numerical_letter_grade(int[4.00000])\n/tmp/tmp8e9a6s32.d(43):
    Error: semicolon expected following function declaration\n/tmp/tmp8e9a6s32.d(43):
    Error: Declaration expected, not \'',\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8e9a6s32.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    import std.algorithm : map;\n\
    \    import std.math : max;\n    import std.string : format;\n    import std.typecons\
    \ : tuple;\n    enum GradeScale = tuple!(\n        \"A+\", 4.0,\n        \"A\"\
    , 3.7,\n        \"A-\", 3.3,\n        \"B+\", 3.0,\n        \"B\", 2.7,\n    \
    \    \"B-\", 2.3,\n        \"C+\", 2.0,\n        \"C\", 1.7,\n        \"C-\",\
    \ 1.3,\n        \"D+\", 1.0,\n        \"D\", 0.7,\n        \"D-\", 0.0,\n    \
    \    \"E\", 0.0\n    );\n    return grades.map!(g => format(\"%s\", GradeScale.tupleof.tupleof.max!((a,\
    \ b) => a > b ? a : b).front)).array;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpysa6l5g9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{ \n    string[] result = new string[grades.length];\
    \ \n    foreach(index, grade; grades) \n    { \n        if (grade > 3.7) \n  \
    \          result[index] = \"A\"; \n        else if (grade > 3.3) \n         \
    \   result[index] = \"A-\"; \n        else if (grade > 3.0) \n            result[index]\
    \ = \"B+\"; \n        else if (grade > 2.7) \n            result[index] = \"B\"\
    ; \n        else if (grade > 2.3) \n            result[index] = \"B-\"; \n   \
    \     else if (grade > 2.0) \n            result[index] = \"C+\"; \n        else\
    \ if (grade > 1.7) \n            result[index] = \"C\"; \n        else if (grade\
    \ > 1.3) \n            result[index] = \"C-\"; \n        else if (grade > 1.0)\
    \ \n            result[index] = \"D+\"; \n        else if (grade > 0.7) \n   \
    \         result[index] = \"D\"; \n        else if (grade > 0.0) \n          \
    \  result[index] = \"D-\"; \n        else if (grade == 0.0) \n            result[index]\
    \ = \"E\"; \n        else \n            result[index] = \"A+\"; \n    } \n   \
    \ \n    return result; \n} \nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ozpaw1f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] result = [];\n    foreach(i;\
    \ grades) \n    {\n        if(i >= 4.0) \n        {\n            result ~= \"\
    A+\";\n        }\n        else if(i >= 3.7) \n        {\n            result ~=\
    \ \"A\";\n        }\n        else if(i >= 3.3) \n        {\n            result\
    \ ~= \"A-\";\n        }\n        else if(i >= 3.0) \n        {\n            result\
    \ ~= \"B+\";\n        }\n        else if(i >= 2.7) \n        {\n            result\
    \ ~= \"B\";\n        }\n        else if(i >= 2.3) \n        {\n            result\
    \ ~= \"B-\";\n        }\n        else if(i >= 2.0) \n        {\n            result\
    \ ~= \"C+\";\n        }\n        else if(i >= 1.7) \n        {\n            result\
    \ ~= \"C\";\n        }\n        else if(i >= 1.3) \n        {\n            result\
    \ ~= \"C-\";\n        }\n        else if(i >= 1.0) \n        {\n            result\
    \ ~= \"D+\";\n        }\n        else if(i >= 0.7) \n        {\n            result\
    \ ~= \"D\";\n        }\n        else if(i >= 0.0) \n        {\n            result\
    \ ~= \"D-\";\n        }\n        else \n        {\n            result ~= \"E\"\
    ;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpirgsclfu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  for(int i = 0; i < grades.length; i++)\n    {\n        if(grades[i] >= 4.0)\n\
    \        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grades[i]\
    \ >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n     \
    \   else if(grades[i] >= 3.3)\n        {\n            letter_grades[i] = \"A-\"\
    ;\n        }\n        else if(grades[i] >= 3.0)\n        {\n            letter_grades[i]\
    \ = \"B+\";\n        }\n        else if(grades[i] >= 2.7)\n        {\n       \
    \     letter_grades[i] = \"B\";\n        }\n        else if(grades[i] >= 2.3)\n\
    \        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grades[i]\
    \ >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n    \
    \    else if(grades[i] >= 1.7)\n        {\n            letter_grades[i] = \"C\"\
    ;\n        }\n        else if(grades[i] >= 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grades[i] >= 1.0)\n        {\n       \
    \     letter_grades[i] = \"D+\";\n        }\n        else if(grades[i] >= 0.7)\n\
    \        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grades[i]\
    \ >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n    \
    \    else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n\
    \    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ru6fvq9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    return grades.map!((g) => \n\
    \    {\n        double grade = (double)g;\n        if (grade >= 4.0) \n      \
    \      return \"A+\";\n        else if (grade >= 3.7) \n            return \"\
    A\";\n        else if (grade >= 3.3) \n            return \"A-\";\n        else\
    \ if (grade >= 3.0) \n            return \"B+\";\n        else if (grade >= 2.7)\
    \ \n            return \"B\";\n        else if (grade >= 2.3) \n            return\
    \ \"B-\";\n        else if (grade >= 2.0) \n            return \"C+\";\n     \
    \   else if (grade >= 1.7) \n            return \"C\";\n        else if (grade\
    \ >= 1.3) \n            return \"C-\";\n        else if (grade >= 1.0) \n    \
    \        return \"D+\";\n        else if (grade >= 0.7) \n            return \"\
    D\";\n        else if (grade >= 0.0) \n            return \"D-\";\n        else\
    \ \n            return \"E\";\n    });\n}\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv2b6ez73.d(34): Error: C style cast illegal, use cast(double)g\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv2b6ez73.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    int [] new_grades = grades.map!(a\
    \ => cast(int)a).array;\n    string[] letters = new string[new_grades.length];\n\
    \    foreach(int i, int j; new_grades)\n    {\n        if(j == 4)\n        {\n\
    \            letters[i] = \"A+\";\n        }\n        else if(j == 3)\n      \
    \  {\n            letters[i] = \"A\";\n        }\n        else if(j == 2)\n  \
    \      {\n            letters[i] = \"B\";\n        }\n        else if(j == 1)\n\
    \        {\n            letters[i] = \"C\";\n        }\n        else if(j == 0)\n\
    \        {\n            letters[i] = \"D\";\n        }\n        else\n       \
    \ {\n            letters[i] = \"E\";\n        }\n    }\n    return letters;\n\
    }\nfloat[] grades = [4.0, 3L, 1.7, 2L, 3.5];\nstring[] letters = numerical_letter_grade(grades);\n\
    string grade1 = letters[0];\nstring grade2 = letters[1];\nstring grade3 = letters[2];\n\
    string grade4 = letters[3];\nstring grade5 = letters[4];\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bju6b3v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = [\"\
    A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"\
    D\", \"D-\", \"E\"];\n    float[] cutoff_points = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n    typeof(return) output;\n    foreach(i,\
    \ e; grades)\n    {\n        float curr_grade = float(e);\n        size_t idx\
    \ = 0;\n        while(idx < 13 && curr_grade < cutoff_points[idx])\n        {\n\
    \            idx++;\n        }\n        output ~= letter_grades[idx];\n    }\n\
    \    return output;\n}\n/*\n    /*\n    First, we define the two arrays, \"letter_grades\"\
    \ and \"cutoff_points\".\n    letter_grades is pretty self-explanatory, as it\
    \ is an array of string \n    with the letter grades in it. The \"cutoff_points\"\
    \ are the gpa numbers \n    that we have to compare the input grades to. The lowest\
    \ grade has the \n    lowest number, while the highest grade has the highest number.\
    \ We can see \n    from the table above, that the highest grade is 4.0, which\
    \ means the \n    cutoff for that grade is 4.0. That is why we set 4.0 as the\
    \ first element \n    in the cutoff_points array.\n    \n    Then, we define an\
    \ output array \"output\", which we will eventually return.\n    We then iterate\
    \ through each element in the input array using the foreach \n    loop. After\
    \ we get the current value of the loop, we set it to curr_grade \n    and convert\
    \ it to a float. We then define a variable \"idx\" and set it to 0.\n    We will\
    \ use this index to keep track of the index of the cutoff point in \n    the cutoff_points\
    \ array. Remember that we want to find the first cutoff \n    point that is greater\
    \ than the current grade. \n\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr1ccu40l.d(37): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpr1ccu40l.d(37): Error: semicolon expected, not \'')\''\n/tmp/tmpr1ccu40l.d(37):
    Error: found \'')\'' instead of statement\n/tmp/tmpr1ccu40l.d(47): Error: unterminated
    /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr1ccu40l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\tstring[] letter_grades;\n\tforeach(grade;\
    \ grades)\n\t{\n\t\tif(grade > 3.7f)\n\t\t{\n\t\t\tletter_grades ~= \"A\";\n\t\
    \t}\n\t\telse if(grade > 3.3f)\n\t\t{\n\t\t\tletter_grades ~= \"A-\";\n\t\t}\n\
    \t\telse if(grade > 3.0f)\n\t\t{\n\t\t\tletter_grades ~= \"B+\";\n\t\t}\n\t\t\
    else if(grade > 2.7f)\n\t\t{\n\t\t\tletter_grades ~= \"B\";\n\t\t}\n\t\telse if(grade\
    \ > 2.3f)\n\t\t{\n\t\t\tletter_grades ~= \"B-\";\n\t\t}\n\t\telse if(grade > 2.0f)\n\
    \t\t{\n\t\t\tletter_grades ~= \"C+\";\n\t\t}\n\t\telse if(grade > 1.7f)\n\t\t\
    {\n\t\t\tletter_grades ~= \"C\";\n\t\t}\n\t\telse if(grade > 1.3f)\n\t\t{\n\t\t\
    \tletter_grades ~= \"C-\";\n\t\t}\n\t\telse if(grade > 1.0f)\n\t\t{\n\t\t\tletter_grades\
    \ ~= \"D+\";\n\t\t}\n\t\telse if(grade > 0.7f)\n\t\t{\n\t\t\tletter_grades ~=\
    \ \"D\";\n\t\t}\n\t\telse if(grade > 0.0f)\n\t\t{\n\t\t\tletter_grades ~= \"D-\"\
    ;\n\t\t}\n\t\telse if(grade == 0.0f)\n\t\t{\n\t\t\tletter_grades ~= \"E\";\n\t\
    \t}\n\t}\n\treturn letter_grades;\n}\n/*\n    You have been asked to create a\
    \ program to see who can graduate and who cannot.\n    You are given an array\
    \ of GPA values, using the above table, you are supposed to \n    only output\
    \ the ones that have a GPA of 2.0 or more.\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8n0rrcv8.d(86): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8n0rrcv8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(index, float grade; grades)\n    {\n        if(grade == 4.0) letter_grades\
    \ ~= \"A+\";\n        else if(grade > 3.7) letter_grades ~= \"A\";\n        else\
    \ if(grade > 3.3) letter_grades ~= \"A-\";\n        else if(grade > 3.0) letter_grades\
    \ ~= \"B+\";\n        else if(grade > 2.7) letter_grades ~= \"B\";\n        else\
    \ if(grade > 2.3) letter_grades ~= \"B-\";\n        else if(grade > 2.0) letter_grades\
    \ ~= \"C+\";\n        else if(grade > 1.7) letter_grades ~= \"C\";\n        else\
    \ if(grade > 1.3) letter_grades ~= \"C-\";\n        else if(grade > 1.0) letter_grades\
    \ ~= \"D+\";\n        else if(grade > 0.7) letter_grades ~= \"D\";\n        else\
    \ if(grade > 0.0) letter_grades ~= \"D-\";\n        else letter_grades ~= \"E\"\
    ;\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf_jcure6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    return grades.map!((grade) =>\n\
    \    {\n        import std.format;\n        if (grade >= 4.0) return \"A+\";\n\
    \        else if (grade >= 3.7) return \"A\";\n        else if (grade >= 3.3)\
    \ return \"A-\";\n        else if (grade >= 3.0) return \"B+\";\n        else\
    \ if (grade >= 2.7) return \"B\";\n        else if (grade >= 2.3) return \"B-\"\
    ;\n        else if (grade >= 2.0) return \"C+\";\n        else if (grade >= 1.7)\
    \ return \"C\";\n        else if (grade >= 1.3) return \"C-\";\n        else if\
    \ (grade >= 1.0) return \"D+\";\n        else if (grade >= 0.7) return \"D\";\n\
    \        else if (grade >= 0.0) return \"D-\";\n        else return \"E\";\n \
    \   });\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n   \
    \ assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi0h111vr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\treturn grades.map!(a => a >= 4.0\
    \ ? \"A+\" : a >= 3.7 ? \"A\" : a >= 3.3 ? \"A-\" : a >= 3.0 ? \"B+\" : a >= 2.7\
    \ ? \"B\" : a >= 2.3 ? \"B-\" : a >= 2.0 ? \"C+\" : a >= 1.7 ? \"C\" : a >= 1.3\
    \ ? \"C-\" : a >= 1.0 ? \"D+\" : a >= 0.7 ? \"D\" : a >= 0.0 ? \"D-\" : \"E\"\
    );\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjmyz1hfh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    immutable letter_grade_dictionary\
    \ = [\n        tuple(4.0, \"A+\"),\n        tuple(3.7, \"A\"),\n        tuple(3.3,\
    \ \"A-\"),\n        tuple(3.0, \"B+\"),\n        tuple(2.7, \"B\"),\n        tuple(2.3,\
    \ \"B-\"),\n        tuple(2.0, \"C+\"),\n        tuple(1.7, \"C\"),\n        tuple(1.3,\
    \ \"C-\"),\n        tuple(1.0, \"D+\"),\n        tuple(0.7, \"D\"),\n        tuple(0.0,\
    \ \"D-\"),\n        tuple(0.0, \"E\")\n    ];\n    return grades.map!(g => {\n\
    \        immutable isLess = (float a, float b) => a < b ? true : false;\n    \
    \    immutable grade = letter_grade_dictionary.filter!(isLess(g)).back;\n    \
    \    return grade[1];\n    });\n}\nstring[] letter_grade(float[] grades) \n{\n\
    \    return grades.map!(g => g == 4.0 ? \"A+\" :\n                    g >= 3.7\
    \ ? \"A\" :\n                    g >= 3.3 ? \"A-\" :\n                    g >=\
    \ 3.0 ? \"B+\" :\n                    g >= 2.7 ? \"B\" :\n                   \
    \ g >= 2.3 ? \"B-\" :\n                    g >= 2.0 ? \"C+\" :\n             \
    \       g >= 1.7 ? \"C\" :\n                    g >= 1.3 ? \"C-\" :\n        \
    \            g >= 1.0 ? \"D+\" :\n                    g >= 0.7 ? \"D\" :\n   \
    \                 g >= 0.0 ? \"D-\" :\n                    \"E\").array;\n}\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnaxjip9s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    //TODO\n    //string[] temp=new\
    \ string[grades.length];\n    string[] grade_letter=new string[grades.length];\n\
    \    for(int i=0;i<grades.length;i++)\n    {\n        if(grades[i]>=4.0)\n   \
    \     {\n            grade_letter[i]=\"A+\";\n        }\n        else if(grades[i]>=3.7)\n\
    \        {\n            grade_letter[i]=\"A\";\n        }\n        else if(grades[i]>=3.3)\n\
    \        {\n            grade_letter[i]=\"A-\";\n        }\n        else if(grades[i]>=3.0)\n\
    \        {\n            grade_letter[i]=\"B+\";\n        }\n        else if(grades[i]>=2.7)\n\
    \        {\n            grade_letter[i]=\"B\";\n        }\n        else if(grades[i]>=2.3)\n\
    \        {\n            grade_letter[i]=\"B-\";\n        }\n        else if(grades[i]>=2.0)\n\
    \        {\n            grade_letter[i]=\"C+\";\n        }\n        else if(grades[i]>=1.7)\n\
    \        {\n            grade_letter[i]=\"C\";\n        }\n        else if(grades[i]>=1.3)\n\
    \        {\n            grade_letter[i]=\"C-\";\n        }\n        else if(grades[i]>=1.0)\n\
    \        {\n            grade_letter[i]=\"D+\";\n        }\n        else if(grades[i]>=0.7)\n\
    \        {\n            grade_letter[i]=\"D\";\n        }\n        else if(grades[i]>=0.0)\n\
    \        {\n            grade_letter[i]=\"D-\";\n        }\n        else if(grades[i]==0.0)\n\
    \        {\n            grade_letter[i]=\"E\";\n        }\n    }\n    return grade_letter;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppe75u5b0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter = new string[grades.length];\n\
    \    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >=\
    \ 4.0)\n        {\n            letter[i] = \"A+\";\n        }\n        else if\
    \ (grades[i] > 3.7)\n        {\n            letter[i] = \"A\";\n        }\n  \
    \      else if (grades[i] > 3.3)\n        {\n            letter[i] = \"A-\";\n\
    \        }\n        else if (grades[i] > 3.0)\n        {\n            letter[i]\
    \ = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n       \
    \     letter[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n     \
    \   {\n            letter[i] = \"B-\";\n        }\n        else if (grades[i]\
    \ > 2.0)\n        {\n            letter[i] = \"C+\";\n        }\n        else\
    \ if (grades[i] > 1.7)\n        {\n            letter[i] = \"C\";\n        }\n\
    \        else if (grades[i] > 1.3)\n        {\n            letter[i] = \"C-\"\
    ;\n        }\n        else if (grades[i] > 1.0)\n        {\n            letter[i]\
    \ = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n       \
    \     letter[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n     \
    \   {\n            letter[i] = \"D-\";\n        }\n        else if (grades[i]\
    \ == 0.0)\n        {\n            letter[i] = \"E\";\n        }\n    }\n    return\
    \ letter;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n \
    \   assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6a_s7ut0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    ubyte[] rating;\n    foreach(g;\
    \ grades)\n    {\n        if(g < 0.0 || g > 4.0)\n        {\n            //throw\
    \ new Exception(\"Grade out of bounds\");\n            rating ~= 0;\n        }\n\
    \        else if(g == 4.0)\n        {\n            rating ~= 1;\n        }\n \
    \       else if(g > 3.7)\n        {\n            rating ~= 2;\n        }\n   \
    \     else if(g > 3.3)\n        {\n            rating ~= 3;\n        }\n     \
    \   else if(g > 3.0)\n        {\n            rating ~= 4;\n        }\n       \
    \ else if(g > 2.7)\n        {\n            rating ~= 5;\n        }\n        else\
    \ if(g > 2.3)\n        {\n            rating ~= 6;\n        }\n        else if(g\
    \ > 2.0)\n        {\n            rating ~= 7;\n        }\n        else if(g >\
    \ 1.7)\n        {\n            rating ~= 8;\n        }\n        else if(g > 1.3)\n\
    \        {\n            rating ~= 9;\n        }\n        else if(g > 1.0)\n  \
    \      {\n            rating ~= 10;\n        }\n        else if(g > 0.7)\n   \
    \     {\n            rating ~= 11;\n        }\n        else if(g > 0.0)\n    \
    \    {\n            rating ~= 12;\n        }\n        else if(g == 0.0)\n    \
    \    {\n            rating ~= 13;\n        }\n    }\n    string[] result;\n  \
    \  foreach(val; rating)\n    {\n        switch(val)\n        {\n            case\
    \ 0:\n                result ~= \"ERROR: Grade out of bounds\";\n            \
    \    break;\n            case 1:\n                result ~= \"A+\";\n        \
    \        break;\n            case 2:\n                result ~= \"A\";\n     \
    \           break;\n            case 3:\n                result ~= \"A-\";\n \
    \               break;\n            case 4:\n                result ~= \"B+\"\
    ;\n                break;\n            case 5:\n                result ~= \"B\"\
    ;\n               \nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp35wps1oc.d(116): Error: found \''unittest\'' instead of statement\n/tmp/tmp35wps1oc.d(127):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp35wps1oc.d(127):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp35wps1oc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    for (uint i = 0; i < grades.length; i++) \n    {\n\
    \        if (grades[i] == 4.0) \n        {\n            letter_grades[i] = \"\
    A+\";\n        }\n        else if (grades[i] > 3.7) \n        {\n            letter_grades[i]\
    \ = \"A\";\n        }\n        else if (grades[i] > 3.3) \n        {\n       \
    \     letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0)\
    \ \n        {\n            letter_grades[i] = \"B+\";\n        }\n        else\
    \ if (grades[i] > 2.7) \n        {\n            letter_grades[i] = \"B\";\n  \
    \      }\n        else if (grades[i] > 2.3) \n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if (grades[i] > 2.0) \n        {\n      \
    \      letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7)\
    \ \n        {\n            letter_grades[i] = \"C\";\n        }\n        else\
    \ if (grades[i] > 1.3) \n        {\n            letter_grades[i] = \"C-\";\n \
    \       }\n        else if (grades[i] > 1.0) \n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if (grades[i] > 0.7) \n        {\n      \
    \      letter_grades[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\
    \ \n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\
    \ \n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return\
    \ letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9d6rlz6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n  float temp;\n  string[] numerical_letter_grade(float[]\
    \ grades) {\n      float[] new_grades;\n      foreach(var g; grades) {\n     \
    \     temp = g;\n          temp = temp - 0.7;\n          temp = temp/0.3;\n  \
    \        temp = int(temp);\n          new_grades ~= temp;\n      }\n      return\
    \ new_grades;\n    }\n}\nstring[] grade_equation(float[] grades) \n{\n  string[]\
    \ grade_equation(float[] grades) {\n    string[] letter_grades;\n    string[]\
    \ numerical_grades = numerical_letter_grade(grades);\n    foreach(var g; numerical_grades)\
    \ {\n        switch(g) {\n            case 5:\n                letter_grades ~=\
    \ \"A+\";\n                break;\n            case 4:\n                letter_grades\
    \ ~= \"A\";\n                break;\n            case 3:\n                letter_grades\
    \ ~= \"A-\";\n                break;\n            case 2:\n                letter_grades\
    \ ~= \"B+\";\n                break;\n            case 1:\n                letter_grades\
    \ ~= \"B\";\n                break;\n            case 0:\n                letter_grades\
    \ ~= \"B-\";\n                break;\n            case -1:\n                letter_grades\
    \ ~= \"C+\";\n                break;\n            case -2:\n                letter_grades\
    \ ~= \"C\";\n                break;\n            case -3:\n                letter_grades\
    \ ~= \"C-\";\n                break;\n            case -4:\n                letter_grades\
    \ ~= \"D+\";\n                break;\n            case -5:\n                letter_grades\
    \ ~= \"D\";\n                break;\n            case -6:\n                letter_grades\
    \ ~= \"D-\";\n                break;\n            case -7:\n                letter_grades\
    \ ~= \"E\";\n                break;\n        }\n    }\n    return letter_grades;\n\
    \  }\n}\n/*\n    The teacher has also lost the code she used to count the number\
    \ of each \n    grade in the array of grades.\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphny58sbe.d(39): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmphny58sbe.d(39): Error: found \'')\'' when expecting \'';\''
    following statement\n/tmp/tmphny58sbe.d(96): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphny58sbe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n   \
    \     if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n  \
    \      }\n        else if(grade > 3.7 && grade < 4.0)\n        {\n           \
    \ letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3 && grade <\
    \ 3.7)\n        {\n            letter_grades[i] = \"A-\";\n        }\n       \
    \ else if(grade > 3.0 && grade < 3.3)\n        {\n            letter_grades[i]\
    \ = \"B+\";\n        }\n        else if(grade > 2.7 && grade < 3.0)\n        {\n\
    \            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3\
    \ && grade < 2.7)\n        {\n            letter_grades[i] = \"B-\";\n       \
    \ }\n        else if(grade > 2.0 && grade < 2.3)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7 && grade < 2.0)\n        {\n\
    \            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3\
    \ && grade < 1.7)\n        {\n            letter_grades[i] = \"C-\";\n       \
    \ }\n        else if(grade > 1.0 && grade < 1.3)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7 && grade < 1.0)\n        {\n\
    \            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0\
    \ && grade < 0.7)\n        {\n            letter_grades[i] = \"D-\";\n       \
    \ }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] =\
    \ \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfwxm7aov.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    size_t len = grades.length;\n\
    \    string[] result = new string[];\n    foreach(float grade; grades)\n    {\n\
    \        if(grade >= 4.0)\n        {\n            result ~= \"A+\";\n        }\n\
    \        else if(grade >= 3.7)\n        {\n            result ~= \"A\";\n    \
    \    }\n        else if(grade >= 3.3)\n        {\n            result ~= \"A-\"\
    ;\n        }\n        else if(grade >= 3.0)\n        {\n            result ~=\
    \ \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            result\
    \ ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n           \
    \ result ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n   \
    \         result ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n      \
    \  {\n            result ~= \"C\";\n        }\n        else if(grade >= 1.3)\n\
    \        {\n            result ~= \"C-\";\n        }\n        else if(grade >=\
    \ 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade\
    \ >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade\
    \ >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else if(grade\
    \ == 0.0)\n        {\n            result ~= \"E\";\n        }\n        else \n\
    \        {\n            throw new Exception(\"This grade is not valid\");\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp0n6r87b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    auto letter_grades = new string[];\n\
    \    foreach(i; grades)\n    {\n        if(i == 4.0)\n        {\n            letter_grades\
    \ ~= \"A+\";\n        }\n        else if(i > 3.7)\n        {\n            letter_grades\
    \ ~= \"A\";\n        }\n        else if(i > 3.3)\n        {\n            letter_grades\
    \ ~= \"A-\";\n        }\n        else if(i > 3.0)\n        {\n            letter_grades\
    \ ~= \"B+\";\n        }\n        else if(i > 2.7)\n        {\n            letter_grades\
    \ ~= \"B\";\n        }\n        else if(i > 2.3)\n        {\n            letter_grades\
    \ ~= \"B-\";\n        }\n        else if(i > 2.0)\n        {\n            letter_grades\
    \ ~= \"C+\";\n        }\n        else if(i > 1.7)\n        {\n            letter_grades\
    \ ~= \"C\";\n        }\n        else if(i > 1.3)\n        {\n            letter_grades\
    \ ~= \"C-\";\n        }\n        else if(i > 1.0)\n        {\n            letter_grades\
    \ ~= \"D+\";\n        }\n        else if(i > 0.7)\n        {\n            letter_grades\
    \ ~= \"D\";\n        }\n        else if(i > 0.0)\n        {\n            letter_grades\
    \ ~= \"D-\";\n        }\n        else if(i == 0.0)\n        {\n            letter_grades\
    \ ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpueicprvb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    import std.string;\n    float\
    \ tmp;\n    string[] letter_grade;\n    foreach(tmp; grades)\n    {\n        if(tmp\
    \ == 4.0)\n        {\n            letter_grade ~= \"A+\";\n        }else if(tmp\
    \ < 4.0 && tmp >= 3.7)\n        {\n            letter_grade ~= \"A\";\n      \
    \  }else if(tmp < 3.7 && tmp >= 3.3)\n        {\n            letter_grade ~= \"\
    A-\";\n        }else if(tmp < 3.3 && tmp >= 3.0)\n        {\n            letter_grade\
    \ ~= \"B+\";\n        }else if(tmp < 3.0 && tmp >= 2.7)\n        {\n         \
    \   letter_grade ~= \"B\";\n        }else if(tmp < 2.7 && tmp >= 2.3)\n      \
    \  {\n            letter_grade ~= \"B-\";\n        }else if(tmp < 2.3 && tmp >=\
    \ 2.0)\n        {\n            letter_grade ~= \"C+\";\n        }else if(tmp <\
    \ 2.0 && tmp >= 1.7)\n        {\n            letter_grade ~= \"C\";\n        }else\
    \ if(tmp < 1.7 && tmp >= 1.3)\n        {\n            letter_grade ~= \"C-\";\n\
    \        }else if(tmp < 1.3 && tmp >= 1.0)\n        {\n            letter_grade\
    \ ~= \"D+\";\n        }else if(tmp < 1.0 && tmp >= 0.7)\n        {\n         \
    \   letter_grade ~= \"D\";\n        }else if(tmp < 0.7 && tmp >= 0.0)\n      \
    \  {\n            letter_grade ~= \"D-\";\n        }else if(tmp < 0.0 && tmp >=\
    \ 0.0)\n        {\n            letter_grade ~= \"E\";\n        }\n    }\n    return\
    \ letter_grade;\n}\n// void main() \n// {\n//     import std.stdio;\n//     float[]\
    \ grades = [4.0, 3.7, 1.7, 2.0, 3.5];\n//     string[] letter_grade = numerical_letter_grade\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpenl_s_38.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    foreach(grade;\
    \ grades)\n    {\n        if(grade >= 4.0)\n        {\n            result ~= \"\
    A+\";\n        }\n        else if(grade > 3.7)\n        {\n            result\
    \ ~= \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            result\
    \ ~= \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n           \
    \ result ~= \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n    \
    \        result ~= \"B\";\n        }\n        else if(grade > 2.3)\n        {\n\
    \            result ~= \"B-\";\n        }\n        else if(grade > 2.0)\n    \
    \    {\n            result ~= \"C+\";\n        }\n        else if(grade > 1.7)\n\
    \        {\n            result ~= \"C\";\n        }\n        else if(grade > 1.3)\n\
    \        {\n            result ~= \"C-\";\n        }\n        else if(grade >\
    \ 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade\
    \ > 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade\
    \ > 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else\n\
    \        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n\
    }\n/*\nThe teacher has asked you to change the grades to be presented in a different\
    \ fashion.\n    She has asked you to give the grade as a tuple with the grade\
    \ as the first element and \n    the second element being the amount of students\
    \ that got the grade.\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2ppex7lw.d(90): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2ppex7lw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  int num_grades = grades.length;\n    foreach(a; grades) \n    {\n        if(a\
    \ >= 4.0) letter_grades ~= \"A+\";\n        else if(a >= 3.7) letter_grades ~=\
    \ \"A\";\n        else if(a >= 3.3) letter_grades ~= \"A-\";\n        else if(a\
    \ >= 3.0) letter_grades ~= \"B+\";\n        else if(a >= 2.7) letter_grades ~=\
    \ \"B\";\n        else if(a >= 2.3) letter_grades ~= \"B-\";\n        else if(a\
    \ >= 2.0) letter_grades ~= \"C+\";\n        else if(a >= 1.7) letter_grades ~=\
    \ \"C\";\n        else if(a >= 1.3) letter_grades ~= \"C-\";\n        else if(a\
    \ >= 1.0) letter_grades ~= \"D+\";\n        else if(a >= 0.7) letter_grades ~=\
    \ \"D\";\n        else if(a >= 0.0) letter_grades ~= \"D-\";\n        else letter_grades\
    \ ~= \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp58993iay.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] output;\n    output.length\
    \ = grades.length;\n    for (int i = 0; i < grades.length; i++) \n    {\n    \
    \    float num = grades[i];\n        if (num == 4.0) \n        {\n           \
    \ output[i] = \"A+\";\n        }\n        else if (num > 3.7) \n        {\n  \
    \          output[i] = \"A\";\n        }\n        else if (num > 3.3) \n     \
    \   {\n            output[i] = \"A-\";\n        }\n        else if (num > 3.0)\
    \ \n        {\n            output[i] = \"B+\";\n        }\n        else if (num\
    \ > 2.7) \n        {\n            output[i] = \"B\";\n        }\n        else\
    \ if (num > 2.3) \n        {\n            output[i] = \"B-\";\n        }\n   \
    \     else if (num > 2.0) \n        {\n            output[i] = \"C+\";\n     \
    \   }\n        else if (num > 1.7) \n        {\n            output[i] = \"C\"\
    ;\n        }\n        else if (num > 1.3) \n        {\n            output[i] =\
    \ \"C-\";\n        }\n        else if (num > 1.0) \n        {\n            output[i]\
    \ = \"D+\";\n        }\n        else if (num > 0.7) \n        {\n            output[i]\
    \ = \"D\";\n        }\n        else if (num > 0.0) \n        {\n            output[i]\
    \ = \"D-\";\n        }\n        else \n        {\n            output[i] = \"E\"\
    ;\n        }\n    }\n    return output;\n}\n/*\nYou have just been hired at the\
    \ University of Michigan.\nYour job is to keep track of student schedules and\
    \ which classes they have taken.\nYou are given a few classes that are in the\
    \ system and the final class that\nthe student is currently working on. Your job\
    \ is to update the student \nschedule by removing the final class if it exists\
    \ in the schedule,\n    and adding the student's new class to the schedule\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgi9es2it.d(92): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpgi9es2it.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    int[] final_grades = new int[grades.length];\n\
    \    string[] letter_grades = new string[grades.length];\n    // Creates the array\
    \ of letter grades.\n    foreach(i, grade; grades)\n    {\n        final_grades[i]\
    \ = cast(int) (grade * 10);\n    }\n    // Assigns the letter grades.\n    foreach(i,\
    \ final_grade; final_grades)\n    {\n        if(final_grade < 0)\n        {\n\
    \            letter_grades[i] = \"E\";\n        }\n        else if(final_grade\
    \ <= 7)\n        {\n            letter_grades[i] = \"D-\";\n        }\n      \
    \  else if(final_grade <= 10)\n        {\n            letter_grades[i] = \"D\"\
    ;\n        }\n        else if(final_grade <= 13)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if(final_grade <= 17)\n        {\n      \
    \      letter_grades[i] = \"C-\";\n        }\n        else if(final_grade <= 20)\n\
    \        {\n            letter_grades[i] = \"C\";\n        }\n        else if(final_grade\
    \ <= 23)\n        {\n            letter_grades[i] = \"C+\";\n        }\n     \
    \   else if(final_grade <= 27)\n        {\n            letter_grades[i] = \"B-\"\
    ;\n        }\n        else if(final_grade <= 30)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if(final_grade <= 33)\n        {\n       \
    \     letter_grades[i] = \"B+\";\n        }\n        else if(final_grade <= 37)\n\
    \        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(final_grade\
    \ <= 40)\n        {\n            letter_grades[i] = \"A\";\n        }\n      \
    \  else if(final_grade <= 43)\n        {\n            letter_grades[i] = \"A+\"\
    ;\n        }\n    }\n    return letter_grades;\n}\n/*\n    // @LazyK\n\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa91zmtk5.d(97): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpa91zmtk5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] output;\n    foreach(i;\
    \ grades) \n    {\n        if(i == 4.0) output ~= \"A+\";\n        else if(i >\
    \ 3.7) output ~= \"A\";\n        else if(i > 3.3) output ~= \"A-\";\n        else\
    \ if(i > 3.0) output ~= \"B+\";\n        else if(i > 2.7) output ~= \"B\";\n \
    \       else if(i > 2.3) output ~= \"B-\";\n        else if(i > 2.0) output ~=\
    \ \"C+\";\n        else if(i > 1.7) output ~= \"C\";\n        else if(i > 1.3)\
    \ output ~= \"C-\";\n        else if(i > 1.0) output ~= \"D+\";\n        else\
    \ if(i > 0.7) output ~= \"D\";\n        else if(i > 0.0) output ~= \"D-\";\n \
    \       else output ~= \"E\";\n    }\n    return output;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_rxmjip.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    auto result = new string[grades.length];\n\
    \    foreach(i, val; grades)\n    {\n        if(val >= 4.0)\n            result[i]\
    \ = \"A+\";\n        else if(val >= 3.7)\n            result[i] = \"A\";\n   \
    \     else if(val >= 3.3)\n            result[i] = \"A-\";\n        else if(val\
    \ >= 3.0)\n            result[i] = \"B+\";\n        else if(val >= 2.7)\n    \
    \        result[i] = \"B\";\n        else if(val >= 2.3)\n            result[i]\
    \ = \"B-\";\n        else if(val >= 2.0)\n            result[i] = \"C+\";\n  \
    \      else if(val >= 1.7)\n            result[i] = \"C\";\n        else if(val\
    \ >= 1.3)\n            result[i] = \"C-\";\n        else if(val >= 1.0)\n    \
    \        result[i] = \"D+\";\n        else if(val >= 0.7)\n            result[i]\
    \ = \"D\";\n        else if(val >= 0.0)\n            result[i] = \"D-\";\n   \
    \     else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplg3816jh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    auto num_grades = grades.dup;\n\
    \    string[] letters;\n    foreach(num; num_grades)\n    {\n        if(num >=\
    \ 4.0)\n        {\n            letters ~= \"A+\";\n        }\n        else if(num\
    \ >= 3.7)\n        {\n            letters ~= \"A\";\n        }\n        else if(num\
    \ >= 3.3)\n        {\n            letters ~= \"A-\";\n        }\n        else\
    \ if(num >= 3.0)\n        {\n            letters ~= \"B+\";\n        }\n     \
    \   else if(num >= 2.7)\n        {\n            letters ~= \"B\";\n        }\n\
    \        else if(num >= 2.3)\n        {\n            letters ~= \"B-\";\n    \
    \    }\n        else if(num >= 2.0)\n        {\n            letters ~= \"C+\"\
    ;\n        }\n        else if(num >= 1.7)\n        {\n            letters ~= \"\
    C\";\n        }\n        else if(num >= 1.3)\n        {\n            letters ~=\
    \ \"C-\";\n        }\n        else if(num >= 1.0)\n        {\n            letters\
    \ ~= \"D+\";\n        }\n        else if(num >= 0.7)\n        {\n            letters\
    \ ~= \"D\";\n        }\n        else if(num >= 0.0)\n        {\n            letters\
    \ ~= \"D-\";\n        }\n        else\n        {\n            letters ~= \"E\"\
    ;\n        }\n    }\n    return letters;\n}\n \n/*\n    The professor has noticed\
    \ that it is difficult to keep track of all the \n    grades she has been giving\
    \ to the students. Therefore, she wants you to \n    create a function that can\
    \ convert an array of numbers to an array of string \n    that can be used to\
    \ represent a number grade. If the number grade is a decimal, \n    then it will\
    \ be rounded to the nearest integer. The professor is not a \n    big fan of decimals\
    \ so she prefers numbers to be represented as integers.\n    If the number is\
    \ less than 0, the grade is \"E\". She also wants to keep \n    track of her students'\
    \ academic\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n   \
    \ assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6qzous6k.d(92): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp6qzous6k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\timport std.conv;\n\tstring[] letter_grades;\n\
    \tchar[] letters = \"A+AB-BC+CD-DE\".dup;\n\t\n\tforeach(float grade; grades)\
    \ \n\t{\n\t\tif(grade >= 4.0) \n\t\t{\n\t\t\tletter_grades ~= \"A+\";\n\t\t}\n\
    \t\telse if(grade < 1.0) \n\t\t{\n\t\t\tletter_grades ~= \"E\";\n\t\t}\n\t\telse\
    \ \n\t\t{\n\t\t\tint index = cast(int)(log10(grade) + 1);\n\t\t\tletter_grades\
    \ ~= letters[index];\n\t\t}\n\t}\n\treturn letter_grades;\n}\nunittest\n{\n  \
    \  alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi1bnwkcb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{ \n    assert(grades.length > 0);\n\
    \    string[] letter_grades = new string[grades.length];\n    for (int i = 0;\
    \ i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n        {\n \
    \           letter_grades[i] = \"A+\";\n        }\n        else if (grades[i]\
    \ >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n     \
    \   else if (grades[i] >= 3.3)\n        {\n            letter_grades[i] = \"A-\"\
    ;\n        }\n        else if (grades[i] >= 3.0)\n        {\n            letter_grades[i]\
    \ = \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n        {\n      \
    \      letter_grades[i] = \"B\";\n        }\n        else if (grades[i] >= 2.3)\n\
    \        {\n            letter_grades[i] = \"B-\";\n        }\n        else if\
    \ (grades[i] >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n    \
    \    }\n        else if (grades[i] >= 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n        {\n       \
    \     letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] >= 1.0)\n\
    \        {\n            letter_grades[i] = \"D+\";\n        }\n        else if\
    \ (grades[i] >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n     \
    \   }\n        else if (grades[i] >= 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeb0m1f4x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\n    string letter_grade = \"\";\n    foreach(i, float\
    \ grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grade\
    \ = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n           \
    \ letter_grade = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n\
    \            letter_grade = \"A-\";\n        }\n        else if(grade >= 3.0)\n\
    \        {\n            letter_grade = \"B+\";\n        }\n        else if(grade\
    \ >= 2.7)\n        {\n            letter_grade = \"B\";\n        }\n        else\
    \ if(grade >= 2.3)\n        {\n            letter_grade = \"B-\";\n        }\n\
    \        else if(grade >= 2.0)\n        {\n            letter_grade = \"C+\";\n\
    \        }\n        else if(grade >= 1.7)\n        {\n            letter_grade\
    \ = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grade\
    \ = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n           \
    \ letter_grade = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n\
    \            letter_grade = \"D\";\n        }\n        else if(grade >= 0.0)\n\
    \        {\n            letter_grade = \"D-\";\n        }\n        else\n    \
    \    {\n            letter_grade = \"E\";\n        }\n        letter_grades[i]\
    \ = letter_grade;\n    }\n    return letter_grades;\n}\n/*\n    Now, in addition\
    \ to giving the letter grades, the teacher also wants to \n    print out a histogram\
    \ of the number of students in each of the letter grade \n    categories. Note:\
    \ the teacher also wants an empty histogram, where \n    the x-axis is the letter\
    \ grades and the y-axis is the number of students.\n    Example:\n    >>> grade_histogram([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n   \nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwbyb3cqa.d(92): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwbyb3cqa.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  foreach(float grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n\
    \            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n\
    \        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade\
    \ >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n      \
    \  else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n  \
    \      }\n        else if(grade >= 2.7)\n        {\n            letter_grades\
    \ ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n           \
    \ letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n       \
    \ {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >=\
    \ 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else\
    \ if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n\
    \        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\"\
    ;\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades\
    \ ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n           \
    \ letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades\
    \ ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoml9uozn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    import std.range;\n    import\
    \ std.algorithm;\n    // use zip to make a zip tuple\n    auto tuples = zip(grades,\
    \ map!(to!string)(grades));\n    // I think this is the best way to implement\
    \ the grade_equation\n    // i tried multiple other ways and this is the most\
    \ readable one\n    return tuples.map!(a =>\n    {\n        auto grade = a[1];\n\
    \        if (grade == \"4.0\") \n            return \"A+\";\n        else if (grade\
    \ > \"3.7\") \n            return \"A\";\n        else if (grade > \"3.3\") \n\
    \            return \"A-\";\n        else if (grade > \"3.0\") \n            return\
    \ \"B+\";\n        else if (grade > \"2.7\") \n            return \"B\";\n   \
    \     else if (grade > \"2.3\") \n            return \"B-\";\n        else if\
    \ (grade > \"2.0\") \n            return \"C+\";\n        else if (grade > \"\
    1.7\") \n            return \"C\";\n        else if (grade > \"1.3\") \n     \
    \       return \"C-\";\n        else if (grade > \"1.0\") \n            return\
    \ \"D+\";\n        else if (grade > \"0.7\") \n            return \"D\";\n   \
    \     else if (grade > \"0.0\") \n            return \"D-\";\n        else \n\
    \            return \"E\";\n    }).array;\n}\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0dedcwo0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] gradeList = new string[grades.length];\n\
    \    for (int i = 0; i < grades.length; i++) \n    {\n        if (grades[i] >=\
    \ 4.0)\n        {\n            gradeList[i] = \"A+\";\n        }\n        else\
    \ if (grades[i] >= 3.7)\n        {\n            gradeList[i] = \"A\";\n      \
    \  }\n        else if (grades[i] >= 3.3)\n        {\n            gradeList[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n        {\n      \
    \      gradeList[i] = \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n\
    \        {\n            gradeList[i] = \"B\";\n        }\n        else if (grades[i]\
    \ >= 2.3)\n        {\n            gradeList[i] = \"B-\";\n        }\n        else\
    \ if (grades[i] >= 2.0)\n        {\n            gradeList[i] = \"C+\";\n     \
    \   }\n        else if (grades[i] >= 1.7)\n        {\n            gradeList[i]\
    \ = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n        {\n       \
    \     gradeList[i] = \"C-\";\n        }\n        else if (grades[i] >= 1.0)\n\
    \        {\n            gradeList[i] = \"D+\";\n        }\n        else if (grades[i]\
    \ >= 0.7)\n        {\n            gradeList[i] = \"D\";\n        }\n        else\
    \ if (grades[i] >= 0.0)\n        {\n            gradeList[i] = \"D-\";\n     \
    \   }\n        else\n        {\n            gradeList[i] = \"E\";\n        }\n\
    \    }\n    return gradeList;\n}\n/*\nFind the product of all the elements of\
    \ a tuple.\n    For this problem you must use foldl.\n    You should not use any\
    \ built-in functions.\n    \n    Example:\n    >>> product((1,2,3,4,5))\n    120\n\
    */\nauto\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjspw0ii.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letters = new string[grades.length];\n\
    \    int i = 0;\n    foreach(float gpa; grades)\n    {\n        if(gpa == 4.0)\
    \ letters[i] = \"A+\";\n        else if(gpa >= 3.7) letters[i] = \"A\";\n    \
    \    else if(gpa >= 3.3) letters[i] = \"A-\";\n        else if(gpa >= 3.0) letters[i]\
    \ = \"B+\";\n        else if(gpa >= 2.7) letters[i] = \"B\";\n        else if(gpa\
    \ >= 2.3) letters[i] = \"B-\";\n        else if(gpa >= 2.0) letters[i] = \"C+\"\
    ;\n        else if(gpa >= 1.7) letters[i] = \"C\";\n        else if(gpa >= 1.3)\
    \ letters[i] = \"C-\";\n        else if(gpa >= 1.0) letters[i] = \"D+\";\n   \
    \     else if(gpa >= 0.7) letters[i] = \"D\";\n        else if(gpa >= 0.0) letters[i]\
    \ = \"D-\";\n        else letters[i] = \"E\";\n        i++;\n    }\n    return\
    \ letters;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n\
    \    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl0kfw7cl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letterGrade = new string[grades.length];\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9pb_imgv.d(33): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9pb_imgv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n \n  string[] alphabets;\n  float[]\
    \ numbers;\n  float[][] combinations;\n  float[][] alphabet_grade;\n  \n  combinations\
    \ = [ [0.0,0.0], [0.7,0.0], [1.0,0.7], [1.3,1.0], [1.7,1.3], [2.0,1.7], [2.3,2.0],\
    \ [2.7,2.3], [3.0,2.7], [3.3,3.0], [3.7,3.3], [4.0,3.7] ];\n  alphabet_grade =\
    \ [[4.0,\"A+\"], [3.7,\"A\"], [3.3,\"A-\"], [3.0,\"B+\"], [2.7,\"B\"], [2.3,\"\
    B-\"], [2.0,\"C+\"], [1.7,\"C\"], [1.3,\"C-\"], [1.0,\"D+\"], [0.7,\"D\"], [0.0,\"\
    D-\"], [0.0,\"E\"]];\n  foreach(i; grades)\n  {\n    foreach(j; combinations)\n\
    \    {\n      if(i > j[0] && i <= j[1])\n      {\n        numbers ~= j[1];\n \
    \     }\n    }\n  }\n  foreach(i; numbers)\n  {\n    foreach(j; alphabet_grade)\n\
    \    {\n      if(i == j[0])\n      {\n        alphabets ~= j[1];\n      }\n  \
    \  }\n  }\n  return alphabets;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpktbyuvz4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    return grades.map!(x => (x >\
    \ 4.0 ? \"A+\" : x > 3.7 ? \"A\" : x > 3.3 ? \"A-\" : x > 3.0 ? \"B+\" : x > 2.7\
    \ ? \"B\" : x > 2.3 ? \"B-\" : x > 2.0 ? \"C+\" : x > 1.7 ? \"C\" : x > 1.3 ?\
    \ \"C-\" : x > 1.0 ? \"D+\" : x > 0.7 ? \"D\" : x > 0.0 ? \"D-\" : \"E\"));\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt63avfeb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    // Set a variable to store the\
    \ letter grade\n    string[] letter_grade;\n    // Set a for loop to iterate through\
    \ the array\n    for (int i = 0; i < grades.length; i++)\n    {\n        // Test\
    \ against each condition\n        if (grades[i] == 4.0)\n        {\n         \
    \   letter_grade[i] = \"A+\";\n        }\n        else if (grades[i] > 3.7)\n\
    \        {\n            letter_grade[i] = \"A\";\n        }\n        else if (grades[i]\
    \ > 3.3)\n        {\n            letter_grade[i] = \"A-\";\n        }\n      \
    \  else if (grades[i] > 3.0)\n        {\n            letter_grade[i] = \"B+\"\
    ;\n        }\n        else if (grades[i] > 2.7)\n        {\n            letter_grade[i]\
    \ = \"B\";\n        }\n        else if (grades[i] > 2.3)\n        {\n        \
    \    letter_grade[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n\
    \        {\n            letter_grade[i] = \"C+\";\n        }\n        else if\
    \ (grades[i] > 1.7)\n        {\n            letter_grade[i] = \"C\";\n       \
    \ }\n        else if (grades[i] > 1.3)\n        {\n            letter_grade[i]\
    \ = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n        {\n       \
    \     letter_grade[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n\
    \        {\n            letter_grade[i] = \"D\";\n        }\n        else if (grades[i]\
    \ > 0.0)\n        {\n            letter_grade[i] = \"D-\";\n        }\n      \
    \  else if (grades[i] == 0.0)\n        {\n            letter_grade[i] = \"E\"\
    ;\n        }\n    }\n    return letter_grade;\n}\n/*\nThe students are not happy\
    \ with the letter grades she gives and they\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx2q6o0d6.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpx2q6o0d6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new\
    \ string[grades.length];\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp33s7xelw.d(33): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp33s7xelw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n    if grades.empty return [];\n  \
    \  static assert(grades.length > 0, \"Check array length!\");\n    string[] grades_str;\n\
    \    import std.math : ceil;\n    grades_str.length = grades.length;\n    foreach(i,\
    \ elem; grades)\n    {\n        //auto num = ceil(elem * 10);\n        auto num\
    \ = cast(ushort)round(elem * 10);\n        auto str = \"\";\n        switch(num)\n\
    \        {\n            case 0:\n                str = \"E\";\n              \
    \  break;\n            case 1:\n                str = \"D-\";\n              \
    \  break;\n            case 2:\n                str = \"D\";\n               \
    \ break;\n            case 3:\n                str = \"D+\";\n               \
    \ break;\n            case 4:\n                str = \"C-\";\n               \
    \ break;\n            case 5:\n                str = \"C\";\n                break;\n\
    \            case 6:\n                str = \"C+\";\n                break;\n\
    \            case 7:\n                str = \"B-\";\n                break;\n\
    \            case 8:\n                str = \"B\";\n                break;\n \
    \           case 9:\n                str = \"B+\";\n                break;\n \
    \           case 10:\n                str = \"A-\";\n                break;\n\
    \            case 11:\n                str = \"A\";\n                break;\n\
    \            case 12:\n                str = \"A+\";\n                break;\n\
    \            default:\n                assert(0);\n        }\n        grades_str[i]\
    \ = str;\n    }\n    return grades_str;\n}\nstring[] letter_grade(float[] grades)\
    \ \n{\n    if (grades.empty)\n        return [];\n    string[] grades_str;\n \
    \   grades_str.length = grades.length;\n    import std.math : ceil;\n    import\
    \ std.typecons : tuple;\n    //from 4.0 to 0.0\n    immutable tuple!(\"A+\", 3.7f,\
    \ 4.0f) t1;\n    immutable tuple!(\"A\", 3.3f, 3.7f) t2;\n    immutable tuple!(\"\
    A-\", 3.0f, 3.3f) t3;\n\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr3deiwoc.d(31): Error: semicolon expected following function
    declaration\n/tmp/tmpr3deiwoc.d(31): Error: Declaration expected, not \''if\''\n/tmp/tmpr3deiwoc.d(35):
    Error: no identifier for declarator grades_str.length\n/tmp/tmpr3deiwoc.d(35):
    Error: Declaration expected, not \''=\''\n/tmp/tmpr3deiwoc.d(36): Error: Declaration
    expected, not \''foreach\''\n/tmp/tmpr3deiwoc.d(36): Error: no identifier for
    declarator grades\n/tmp/tmpr3deiwoc.d(36): Error: Declaration expected, not \'')\''\n/tmp/tmpr3deiwoc.d(41):
    Error: Declaration expected, not \''switch\''\n/tmp/tmpr3deiwoc.d(45): Error:
    Declaration expected, not \''break\''\n/tmp/tmpr3deiwoc.d(46): Error: Declaration
    expected, not \''case\''\n/tmp/tmpr3deiwoc.d(48): Error: Declaration expected,
    not \''break\''\n/tmp/tmpr3deiwoc.d(49): Error: Declaration expected, not \''case\''\n/tmp/tmpr3deiwoc.d(51):
    Error: Declaration expected, not \''break\''\n/tmp/tmpr3deiwoc.d(52): Error: Declaration
    expected, not \''case\''\n/tmp/tmpr3deiwoc.d(54): Error: Declaration expected,
    not \''break\''\n/tmp/tmpr3deiwoc.d(55): Error: Declaration expected, not \''case\''\n/tmp/tmpr3deiwoc.d(57):
    Error: Declaration expected, not \''break\''\n/tmp/tmpr3deiwoc.d(58): Error: Declaration
    expected, not \''case\''\n/tmp/tmpr3deiwoc.d(60): Error: Declaration expected,
    not \''break\''\n/tmp/tmpr3deiwoc.d(61): Error: Declaration expected, not \''case\''\n/tmp/tmpr3deiwoc.d(63):
    Error: Declaration expected, not \''break\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr3deiwoc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n  import std.typecons : tuple;\n\
    \  import std.algorithm.iteration : map;\n  import std.range : iota;\n  import\
    \ std.array : array;\n  import std.conv : to;\n  return map!(to!string)(map!((grade)\
    \ => {\n    if (grade > 3.7) return tuple(grade, \"A+\");\n    else if (grade\
    \ > 3.3) return tuple(grade, \"A\");\n    else if (grade > 3.0) return tuple(grade,\
    \ \"A-\");\n    else if (grade > 2.7) return tuple(grade, \"B+\");\n    else if\
    \ (grade > 2.3) return tuple(grade, \"B\");\n    else if (grade > 2.0) return\
    \ tuple(grade, \"B-\");\n    else if (grade > 1.7) return tuple(grade, \"C+\"\
    );\n    else if (grade > 1.3) return tuple(grade, \"C\");\n    else if (grade\
    \ > 1.0) return tuple(grade, \"C-\");\n    else if (grade > 0.7) return tuple(grade,\
    \ \"D+\");\n    else if (grade > 0.0) return tuple(grade, \"D\");\n    else if\
    \ (grade == 0.0) return tuple(grade, \"E\");\n    else return tuple(grade, \"\
    D-\");\n  })(grades))(a => a[1]);\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp088tp8f6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n    in\n    {\n    }\n    out (string[]\
    \ result)\n    {\n        foreach (float grade; grades)\n        {\n         \
    \   float remainder = grade % 1.0;\n            float integral = grade - remainder;\n\
    \            float divisor = remainder / 0.3;\n            string letter = \"\"\
    ;\n            if (integral == 4.0)\n            {\n                if (divisor\
    \ < 2.0)\n                {\n                    letter = \"A+\";\n          \
    \      }\n                else if (divisor < 5.0)\n                {\n       \
    \             letter = \"A\";\n                }\n                else\n     \
    \           {\n                    letter = \"A-\";\n                }\n     \
    \       }\n            else if (integral == 3.0)\n            {\n            \
    \    if (divisor < 2.0)\n                {\n                    letter = \"B+\"\
    ;\n                }\n                else if (divisor < 5.0)\n              \
    \  {\n                    letter = \"B\";\n                }\n               \
    \ else\n                {\n                    letter = \"B-\";\n            \
    \    }\n            }\n            else if (integral == 2.0)\n            {\n\
    \                if (divisor < 2.0)\n                {\n                    letter\
    \ = \"C+\";\n                }\n                else if (divisor < 5.0)\n    \
    \            {\n                    letter = \"C\";\n                }\n     \
    \           else\n                {\n                    letter = \"C-\";\n  \
    \              }\n            }\n            else if (integral == 1.0)\n     \
    \       {\n                if (divisor < 2.0)\n                {\n           \
    \         letter = \"D+\";\n                }\n                else if (divisor\
    \ < 5.0)\n                {\n                    letter = \"D\";\n           \
    \     }\n                else\n                {\n                    letter =\
    \ \"D-\";\n                }\n            }\n            else if (integral ==\
    \ 0.0)\n            {\n                if (divisor < 2.0)\n                {\n\
    \                    letter = \"E\";\n                }\n                else\
    \ if (divisor < 5.0)\n                {\n                    letter = \"D\";\n\
    \                }\n                else\n                {\n                \
    \    letter = \"D-\";\n                }\n            }\n            result ~=\
    \ letter\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8bvfhgwl.d(34): Error: found \''[\'' when expecting \'')\''\n/tmp/tmp8bvfhgwl.d(34):
    Error: statement expected to be { }, not ]\n/tmp/tmp8bvfhgwl.d(34): Error: found
    \'']\'' instead of statement\n/tmp/tmp8bvfhgwl.d(36): Error: no identifier for
    declarator grades\n/tmp/tmp8bvfhgwl.d(36): Error: Declaration expected, not \'')\''\n/tmp/tmp8bvfhgwl.d(42):
    Error: Declaration expected, not \''if\''\n/tmp/tmp8bvfhgwl.d(47): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bvfhgwl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    // write code here \n    string[]\
    \ result;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n     \
    \       result ~= \"A+\";\n        else if(grade >= 3.7)\n            result ~=\
    \ \"A\";\n        else if(grade >= 3.3)\n            result ~= \"A-\";\n     \
    \   else if(grade >= 3.0)\n            result ~= \"B+\";\n        else if(grade\
    \ >= 2.7)\n            result ~= \"B\";\n        else if(grade >= 2.3)\n     \
    \       result ~= \"B-\";\n        else if(grade >= 2.0)\n            result ~=\
    \ \"C+\";\n        else if(grade >= 1.7)\n            result ~= \"C\";\n     \
    \   else if(grade >= 1.3)\n            result ~= \"C-\";\n        else if(grade\
    \ >= 1.0)\n            result ~= \"D+\";\n        else if(grade >= 0.7)\n    \
    \        result ~= \"D\";\n        else if(grade >= 0.0)\n            result ~=\
    \ \"D-\";\n        else if(grade == 0.0)\n            result ~= \"E\";\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqhiybly.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\tstring[] letter_grades = new string[grades.length];\n\
    \tforeach(index, num; grades) \n\t{\n\t\tif(num >= 4.0) \n\t\t{\n\t\t\tletter_grades[index]\
    \ = \"A+\";\n\t\t} \n\t\telse if(num >= 3.7) \n\t\t{\n\t\t\tletter_grades[index]\
    \ = \"A\";\n\t\t} \n\t\telse if(num >= 3.3) \n\t\t{\n\t\t\tletter_grades[index]\
    \ = \"A-\";\n\t\t} \n\t\telse if(num >= 3.0) \n\t\t{\n\t\t\tletter_grades[index]\
    \ = \"B+\";\n\t\t} \n\t\telse if(num >= 2.7) \n\t\t{\n\t\t\tletter_grades[index]\
    \ = \"B\";\n\t\t} \n\t\telse if(num >= 2.3) \n\t\t{\n\t\t\tletter_grades[index]\
    \ = \"B-\";\n\t\t} \n\t\telse if(num >= 2.0) \n\t\t{\n\t\t\tletter_grades[index]\
    \ = \"C+\";\n\t\t} \n\t\telse if(num >= 1.7) \n\t\t{\n\t\t\tletter_grades[index]\
    \ = \"C\";\n\t\t} \n\t\telse if(num >= 1.3) \n\t\t{\n\t\t\tletter_grades[index]\
    \ = \"C-\";\n\t\t} \n\t\telse if(num >= 1.0) \n\t\t{\n\t\t\tletter_grades[index]\
    \ = \"D+\";\n\t\t} \n\t\telse if(num >= 0.7) \n\t\t{\n\t\t\tletter_grades[index]\
    \ = \"D\";\n\t\t} \n\t\telse if(num >= 0.0) \n\t\t{\n\t\t\tletter_grades[index]\
    \ = \"D-\";\n\t\t} \n\t\telse \n\t\t{\n\t\t\tletter_grades[index] = \"E\";\n\t\
    \t}\n\t}\n\treturn letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpewyhf8n_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{ \n    return grades.map!((grade)\
    \ => \n    {\n        assert(0 <= grade && grade <= 4);\n        if (grade ==\
    \ 4) return \"A+\";\n        if (grade > 3.7) return \"A\";\n        if (grade\
    \ > 3.3) return \"A-\";\n        if (grade > 3.0) return \"B+\";\n        if (grade\
    \ > 2.7) return \"B\";\n        if (grade > 2.3) return \"B-\";\n        if (grade\
    \ > 2.0) return \"C+\";\n        if (grade > 1.7) return \"C\";\n        if (grade\
    \ > 1.3) return \"C-\";\n        if (grade > 1.0) return \"D+\";\n        if (grade\
    \ > 0.7) return \"D\";\n        if (grade > 0.0) return \"D-\";\n        return\
    \ \"E\";\n    });\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaf9_vhry.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grade_array\
    \ = new string[grades.length];\n    string letter_grade;\n    for (int i = 0;\
    \ i < grades.length; i++)\n    {\n        switch (true)\n        {\n         \
    \   case grades[i] >= 4.0:\n                letter_grade = \"A+\";\n         \
    \       break;\n            case grades[i] >= 3.7:\n                letter_grade\
    \ = \"A\";\n                break;\n            case grades[i] >= 3.3:\n     \
    \           letter_grade = \"A-\";\n                break;\n            case grades[i]\
    \ >= 3.0:\n                letter_grade = \"B+\";\n                break;\n  \
    \          case grades[i] >= 2.7:\n                letter_grade = \"B\";\n   \
    \             break;\n            case grades[i] >= 2.3:\n                letter_grade\
    \ = \"B-\";\n                break;\n            case grades[i] >= 2.0:\n    \
    \            letter_grade = \"C+\";\n                break;\n            case\
    \ grades[i] >= 1.7:\n                letter_grade = \"C\";\n                break;\n\
    \            case grades[i] >= 1.3:\n                letter_grade = \"C-\";\n\
    \                break;\n            case grades[i] >= 1.0:\n                letter_grade\
    \ = \"D+\";\n                break;\n            case grades[i] >= 0.7:\n    \
    \            letter_grade = \"D\";\n                break;\n            case grades[i]\
    \ >= 0.0:\n                letter_grade = \"D-\";\n                break;\n  \
    \          case grades[i] == 0.0:\n                letter_grade = \"E\";\n   \
    \             break;\n            default:\n                letter_grade = \"\
    F\";\n                break;\n        }\n        letter_grade_array[i] = letter_grade;\n\
    \    }\n    return letter_grade_array;\n}\n/*\n    Another option that you could\
    \ use is to use a tuple with the first\n    value as the numerical grade and the\
    \ second value as the letter grade.\n    The function can take in a tuple of tuples\
    \ and then return a tuple of\n    tuples. You would have to iterate through the\
    \ tuples and then the\n    elements of the\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_b6y2raz.d(85): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_b6y2raz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter = new string[grades.length];\n\
    \    foreach(i,grade; grades)\n    {\n        if( grade >= 3.7 )\n           \
    \ letter[i] = \"A\";\n        else if( grade >= 3.3 )\n            letter[i] =\
    \ \"A-\";\n        else if( grade >= 3.0 )\n            letter[i] = \"B+\";\n\
    \        else if( grade >= 2.7 )\n            letter[i] = \"B\";\n        else\
    \ if( grade >= 2.3 )\n            letter[i] = \"B-\";\n        else if( grade\
    \ >= 2.0 )\n            letter[i] = \"C+\";\n        else if( grade >= 1.7 )\n\
    \            letter[i] = \"C\";\n        else if( grade >= 1.3 )\n           \
    \ letter[i] = \"C-\";\n        else if( grade >= 1.0 )\n            letter[i]\
    \ = \"D+\";\n        else if( grade >= 0.7 )\n            letter[i] = \"D\";\n\
    \        else if( grade >= 0.0 )\n            letter[i] = \"D-\";\n        else\n\
    \            letter[i] = \"E\";\n    }\n    return letter;\n}\nunittest\n{\n \
    \   alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgdzkcaky.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\tstring[] letter_grades;\n\tforeach(\
    \ grade; grades)\n\t{\n\t\tif(grade >= 4.0)\n\t\t{\n\t\t\tletter_grades ~= \"\
    A+\";\n\t\t}\n\t\telse if(grade >= 3.7)\n\t\t{\n\t\t\tletter_grades ~= \"A\";\n\
    \t\t}\n\t\telse if(grade >= 3.3)\n\t\t{\n\t\t\tletter_grades ~= \"A-\";\n\t\t\
    }\n\t\telse if(grade >= 3.0)\n\t\t{\n\t\t\tletter_grades ~= \"B+\";\n\t\t}\n\t\
    \telse if(grade >= 2.7)\n\t\t{\n\t\t\tletter_grades ~= \"B\";\n\t\t}\n\t\telse\
    \ if(grade >= 2.3)\n\t\t{\n\t\t\tletter_grades ~= \"B-\";\n\t\t}\n\t\telse if(grade\
    \ >= 2.0)\n\t\t{\n\t\t\tletter_grades ~= \"C+\";\n\t\t}\n\t\telse if(grade >=\
    \ 1.7)\n\t\t{\n\t\t\tletter_grades ~= \"C\";\n\t\t}\n\t\telse if(grade >= 1.3)\n\
    \t\t{\n\t\t\tletter_grades ~= \"C-\";\n\t\t}\n\t\telse if(grade >= 1.0)\n\t\t\
    {\n\t\t\tletter_grades ~= \"D+\";\n\t\t}\n\t\telse if(grade >= 0.7)\n\t\t{\n\t\
    \t\tletter_grades ~= \"D\";\n\t\t}\n\t\telse if(grade >= 0.0)\n\t\t{\n\t\t\tletter_grades\
    \ ~= \"D-\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tletter_grades ~= \"E\";\n\t\t}\n\t\
    }\n\treturn letter_grades;\n}\n/*\nThe teacher has decided to change her algorithm\
    \ and now wants to give an\n    array of letter grades using the old system and\
    \ convert it to letter grades\n    using the new system. The new system is:\n\
    \             GPA       |    Letter grade\n              4.0                A+\n\
    \           \nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n \
    \   assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptfix_klm.d(90): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmptfix_klm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n\tstring[] grades_arr = to!string[];\n\
    \tforeach(float g; grades)\n\t{\n\t\tstring c_grade = \"\";\n\t\t\n\t\tif(g >=\
    \ 4.0f)\n\t\t{\n\t\t\tc_grade = \"A+\";\n\t\t}\n\t\telse if(g >= 3.7f)\n\t\t{\n\
    \t\t\tc_grade = \"A\";\n\t\t}\n\t\telse if(g >= 3.3f)\n\t\t{\n\t\t\tc_grade =\
    \ \"A-\";\n\t\t}\n\t\telse if(g >= 3.0f)\n\t\t{\n\t\t\tc_grade = \"B+\";\n\t\t\
    }\n\t\telse if(g >= 2.7f)\n\t\t{\n\t\t\tc_grade = \"B\";\n\t\t}\n\t\telse if(g\
    \ >= 2.3f)\n\t\t{\n\t\t\tc_grade = \"B-\";\n\t\t}\n\t\telse if(g >= 2.0f)\n\t\t\
    {\n\t\t\tc_grade = \"C+\";\n\t\t}\n\t\telse if(g >= 1.7f)\n\t\t{\n\t\t\tc_grade\
    \ = \"C\";\n\t\t}\n\t\telse if(g >= 1.3f)\n\t\t{\n\t\t\tc_grade = \"C-\";\n\t\t\
    }\n\t\telse if(g >= 1.0f)\n\t\t{\n\t\t\tc_grade = \"D+\";\n\t\t}\n\t\telse if(g\
    \ >= 0.7f)\n\t\t{\n\t\t\tc_grade = \"D\";\n\t\t}\n\t\telse if(g >= 0.0f)\n\t\t\
    {\n\t\t\tc_grade = \"D-\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc_grade = \"E\";\n\t\
    \t}\n\t\tgrades_arr ~= c_grade;\n\t}\n\treturn grades_arr;\n}\nunittest\n{\n \
    \   alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpni7r0uvb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    //TODO: implement function here\n\
    \    string[] letter_grades = new string[grades.length];\n    foreach(int i, float\
    \ grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i]\
    \ = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i]\
    \ = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i]\
    \ = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i]\
    \ = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i]\
    \ = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i]\
    \ = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n           \
    \ letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi3sf0cwn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] alphabet = new string[grades.length];\n\
    \    for (size_t i = 0; i < grades.length; i++)\n    {\n        if (grades[i]\
    \ > 4.0)\n        {\n            alphabet[i] = \"A+\";\n        }\n        else\
    \ if (grades[i] > 3.7)\n        {\n            alphabet[i] = \"A\";\n        }\n\
    \        else if (grades[i] > 3.3)\n        {\n            alphabet[i] = \"A-\"\
    ;\n        }\n        else if (grades[i] > 3.0)\n        {\n            alphabet[i]\
    \ = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n       \
    \     alphabet[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n   \
    \     {\n            alphabet[i] = \"B-\";\n        }\n        else if (grades[i]\
    \ > 2.0)\n        {\n            alphabet[i] = \"C+\";\n        }\n        else\
    \ if (grades[i] > 1.7)\n        {\n            alphabet[i] = \"C\";\n        }\n\
    \        else if (grades[i] > 1.3)\n        {\n            alphabet[i] = \"C-\"\
    ;\n        }\n        else if (grades[i] > 1.0)\n        {\n            alphabet[i]\
    \ = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n       \
    \     alphabet[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n   \
    \     {\n            alphabet[i] = \"D-\";\n        }\n        else\n        {\n\
    \            alphabet[i] = \"E\";\n        }\n    }\n    return alphabet;\n}\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa2eatzzm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n    in { \n        assert (grades.length>0);\n\
    \        foreach(float grade; grades)\n            assert (grade>=0.0 && grade<=4.0);\n\
    \    }\n    out (string[] result)\n    body {\n        float[] GPA = [4.0, 3.7,\
    \ 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0];\n        char[] letter_grade\
    \ = ['A', 'B', 'C', 'D', 'E'];\n        int[] number_grades = ['+', ' ', '-',\
    \ ' ', ' '];\n        string[] result = new string[0];\n        foreach(float\
    \ grade; grades)\n        {\n            int i = 0;\n            foreach(float\
    \ GP; GPA)\n            {\n                if(grade < GP)\n                {\n\
    \                    i++;\n                }\n            }\n            if(i\
    \ > 5)\n            {\n                if(i == 12)\n                {\n      \
    \              string plus = \"E\";\n                    i = 4;\n            \
    \        result ~= plus ~ letter_grade[i];\n                }\n              \
    \  else\n                {\n                    string plus = \"D\";\n       \
    \             i = 4;\n                    result ~= plus ~ letter_grade[i] ~ number_grades[i\
    \ - 4];\n                }\n            }\n            else\n            {\n \
    \               if(number_grades[i] == '+')\n                {\n             \
    \       string plus = \"A\";\n                    result ~= plus ~ letter_grade[i]\
    \ ~ number_grades[i];\n                }\n                else if(number_grades[i]\
    \ == '-')\n                {\n                    string plus = \"A\";\n     \
    \               result ~= plus ~ letter_grade[i] ~ number_grades[i];\n       \
    \         }\n                else\n                {\n                    string\
    \ plus = \"A\";\n                    result ~= plus ~ letter_grade[i];\n     \
    \           }\n            }\n        }\n    }\nunittest\n{\n    alias candidate\
    \ = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpir4kkqjh.d(36): Error: found \''[\'' when expecting \'')\''\n/tmp/tmpir4kkqjh.d(36):
    Error: statement expected to be { }, not ]\n/tmp/tmpir4kkqjh.d(36): Error: found
    \'']\'' instead of statement\n/tmp/tmpir4kkqjh.d(42): Error: Declaration expected,
    not \''foreach\''\n/tmp/tmpir4kkqjh.d(42): Error: no identifier for declarator
    grades\n/tmp/tmpir4kkqjh.d(42): Error: Declaration expected, not \'')\''\n/tmp/tmpir4kkqjh.d(45):
    Error: Declaration expected, not \''foreach\''\n/tmp/tmpir4kkqjh.d(45): Error:
    no identifier for declarator GPA\n/tmp/tmpir4kkqjh.d(45): Error: Declaration expected,
    not \'')\''\n/tmp/tmpir4kkqjh.d(50): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpir4kkqjh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] new_grades = new string[grades.length];\n\
    \    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >=\
    \ 4.0)\n        {\n            new_grades[i] = \"A+\";\n        }\n        else\
    \ if (grades[i] >= 3.7)\n        {\n            new_grades[i] = \"A\";\n     \
    \   }\n        else if (grades[i] >= 3.3)\n        {\n            new_grades[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n        {\n      \
    \      new_grades[i] = \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n\
    \        {\n            new_grades[i] = \"B\";\n        }\n        else if (grades[i]\
    \ >= 2.3)\n        {\n            new_grades[i] = \"B-\";\n        }\n       \
    \ else if (grades[i] >= 2.0)\n        {\n            new_grades[i] = \"C+\";\n\
    \        }\n        else if (grades[i] >= 1.7)\n        {\n            new_grades[i]\
    \ = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n        {\n       \
    \     new_grades[i] = \"C-\";\n        }\n        else if (grades[i] >= 1.0)\n\
    \        {\n            new_grades[i] = \"D+\";\n        }\n        else if (grades[i]\
    \ >= 0.7)\n        {\n            new_grades[i] = \"D\";\n        }\n        else\
    \ if (grades[i] >= 0.0)\n        {\n            new_grades[i] = \"D-\";\n    \
    \    }\n        else\n        {\n            new_grades[i] = \"E\";\n        }\n\
    \    }\n    return new_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw9lkrm5h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] array = new string[grades.length];\n\
    \    int i = 0;\n    foreach(grade; grades)\n    {\n        if(grade>=4.0)\n \
    \       {\n            array[i] = \"A+\";\n        }\n        else if(grade>=3.7)\n\
    \        {\n            array[i] = \"A\";\n        }\n        else if(grade>=3.3)\n\
    \        {\n            array[i] = \"A-\";\n        }\n        else if(grade>=3.0)\n\
    \        {\n            array[i] = \"B+\";\n        }\n        else if(grade>=2.7)\n\
    \        {\n            array[i] = \"B\";\n        }\n        else if(grade>=2.3)\n\
    \        {\n            array[i] = \"B-\";\n        }\n        else if(grade>=2.0)\n\
    \        {\n            array[i] = \"C+\";\n        }\n        else if(grade>=1.7)\n\
    \        {\n            array[i] = \"C\";\n        }\n        else if(grade>=1.3)\n\
    \        {\n            array[i] = \"C-\";\n        }\n        else if(grade>=1.0)\n\
    \        {\n            array[i] = \"D+\";\n        }\n        else if(grade>=0.7)\n\
    \        {\n            array[i] = \"D\";\n        }\n        else if(grade>=0.0)\n\
    \        {\n            array[i] = \"D-\";\n        }\n        else\n        {\n\
    \            array[i] = \"E\";\n        }\n        i++;\n    }\n    return array;\n\
    }\n/*\n    This is a similar task to the one before, except now the teacher has\n\
    \    decided to try a different grading method. She has provided you with a \n\
    \    program that will output an array of integers. This array contains the \n\
    \    grades that the students should receive as a percentage. You must convert\n\
    \    these numbers into a letter grade using the following table:\n        Percentage\
    \      | Letter grade\n            >= 95              A+\n            >= 90  \
    \            A\n           \nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3ho5nspa.d(92): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3ho5nspa.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    return grades.map!(a => \n \
    \       a > 4.0 ? \"A+\" :\n        a > 3.7 ? \"A\" :\n        a > 3.3 ? \"A-\"\
    \ :\n        a > 3.0 ? \"B+\" :\n        a > 2.7 ? \"B\" :\n        a > 2.3 ?\
    \ \"B-\" :\n        a > 2.0 ? \"C+\" :\n        a > 1.7 ? \"C\" :\n        a >\
    \ 1.3 ? \"C-\" :\n        a > 1.0 ? \"D+\" :\n        a > 0.7 ? \"D\" :\n    \
    \    a > 0.0 ? \"D-\" : \"E\"\n    );\n}\n// Alternative solution\nstring[] letter_grade(float[]\
    \ grades) \n{\n    return grades.map!(a =>\n        a > 4.0 ? \"A+\" :\n     \
    \   a > 3.7 ? \"A\" :\n        a > 3.3 ? \"A-\" :\n        a > 3.0 ? \"B+\" :\n\
    \        a > 2.7 ? \"B\" :\n        a > 2.3 ? \"B-\" :\n        a > 2.0 ? \"C+\"\
    \ :\n        a > 1.7 ? \"C\" :\n        a > 1.3 ? \"C-\" :\n        a > 1.0 ?\
    \ \"D+\" :\n        a > 0.7 ? \"D\" :\n        a > 0.0 ? \"D-\" : \"E\"\n    );\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppn13bn68.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    auto output = new string[];\n\
    \    foreach(grade; grades)\n    {\n        if(grade > 4.0)\n        {\n     \
    \       output ~= \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n\
    \            output ~= \"A\";\n        }\n        else if(grade > 3.3)\n     \
    \   {\n            output ~= \"A-\";\n        }\n        else if(grade > 3.0)\n\
    \        {\n            output ~= \"B+\";\n        }\n        else if(grade >\
    \ 2.7)\n        {\n            output ~= \"B\";\n        }\n        else if(grade\
    \ > 2.3)\n        {\n            output ~= \"B-\";\n        }\n        else if(grade\
    \ > 2.0)\n        {\n            output ~= \"C+\";\n        }\n        else if(grade\
    \ > 1.7)\n        {\n            output ~= \"C\";\n        }\n        else if(grade\
    \ > 1.3)\n        {\n            output ~= \"C-\";\n        }\n        else if(grade\
    \ > 1.0)\n        {\n            output ~= \"D+\";\n        }\n        else if(grade\
    \ > 0.7)\n        {\n            output ~= \"D\";\n        }\n        else if(grade\
    \ > 0.0)\n        {\n            output ~= \"D-\";\n        }\n        else if(grade\
    \ == 0.0)\n        {\n            output ~= \"E\";\n        }\n        else\n\
    \        {\n            output ~= \"Error\";\n        }\n    }\n    return output;\n\
    }\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcbt4in9s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letters;\n    string\
    \ letter;\n    foreach(float i; grades) \n    {\n        if(i > 3.7)\n       \
    \     letter = \"A\";\n        else if(i > 3.3)\n            letter = \"A-\";\n\
    \        else if(i > 3.0)\n            letter = \"B+\";\n        else if(i > 2.7)\n\
    \            letter = \"B\";\n        else if(i > 2.3)\n            letter = \"\
    B-\";\n        else if(i > 2.0)\n            letter = \"C+\";\n        else if(i\
    \ > 1.7)\n            letter = \"C\";\n        else if(i > 1.3)\n            letter\
    \ = \"C-\";\n        else if(i > 1.0)\n            letter = \"D+\";\n        else\
    \ if(i > 0.7)\n            letter = \"D\";\n        else if(i > 0.0)\n       \
    \     letter = \"D-\";\n        else if(i == 0.0)\n            letter = \"E\"\
    ;\n        else if(i == 4.0)\n            letter = \"A+\";\n        letters ~=\
    \ letter;\n    }\n    return letters;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpamqwhx63.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter = new string[grades.length];\n\
    \    foreach(int i;0..grades.length)\n    {\n        if(grades[i]>4.0)\n     \
    \   {\n            letter[i]=\"A+\";\n        }\n        else if(grades[i]>3.7)\n\
    \        {\n            letter[i]=\"A\";\n        }\n        else if(grades[i]>3.3)\n\
    \        {\n            letter[i]=\"A-\";\n        }\n        else if(grades[i]>3.0)\n\
    \        {\n            letter[i]=\"B+\";\n        }\n        else if(grades[i]>2.7)\n\
    \        {\n            letter[i]=\"B\";\n        }\n        else if(grades[i]>2.3)\n\
    \        {\n            letter[i]=\"B-\";\n        }\n        else if(grades[i]>2.0)\n\
    \        {\n            letter[i]=\"C+\";\n        }\n        else if(grades[i]>1.7)\n\
    \        {\n            letter[i]=\"C\";\n        }\n        else if(grades[i]>1.3)\n\
    \        {\n            letter[i]=\"C-\";\n        }\n        else if(grades[i]>1.0)\n\
    \        {\n            letter[i]=\"D+\";\n        }\n        else if(grades[i]>0.7)\n\
    \        {\n            letter[i]=\"D\";\n        }\n        else if(grades[i]>0.0)\n\
    \        {\n            letter[i]=\"D-\";\n        }\n        else if(grades[i]==0.0)\n\
    \        {\n            letter[i]=\"E\";\n        }\n    }\n    return letter;\n\
    }\n/*\n    Problem 2:\n    A sports brand wants to buy some ads on a popular sports\
    \ website.\n    The website shows the ads on their homepage but also on the pages\n\
    \    of the league, team and player specific pages. The website has a function\n\
    \    that runs a random number generator for each view of a page and returns\n\
    \    a float between 0 and 1. If that float is greater than\nunittest\n{\n   \
    \ alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L,\
    \ 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpua4fobam.d(90): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpua4fobam.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n  \
    \  float[] sorted_grades = grades.sort();\n    foreach(g; grades)\n    {\n   \
    \     if(g == sorted_grades[0]) letter_grades ~= \"E\";\n        else if(g ==\
    \ sorted_grades[1]) letter_grades ~= \"D-\";\n        else if(g == sorted_grades[2])\
    \ letter_grades ~= \"D\";\n        else if(g == sorted_grades[3]) letter_grades\
    \ ~= \"D+\";\n        else if(g == sorted_grades[4]) letter_grades ~= \"C-\";\n\
    \        else if(g == sorted_grades[5]) letter_grades ~= \"C\";\n        else\
    \ if(g == sorted_grades[6]) letter_grades ~= \"C+\";\n        else if(g == sorted_grades[7])\
    \ letter_grades ~= \"B-\";\n        else if(g == sorted_grades[8]) letter_grades\
    \ ~= \"B\";\n        else if(g == sorted_grades[9]) letter_grades ~= \"B+\";\n\
    \        else if(g == sorted_grades[10]) letter_grades ~= \"A-\";\n        else\
    \ if(g == sorted_grades[11]) letter_grades ~= \"A\";\n        else if(g == sorted_grades[12])\
    \ letter_grades ~= \"A+\";\n    }\n    return letter_grades;\n}\n/*\n    Example:\n\
    \    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"]\n    \n*/\nstring[] letter_grade(float[] grades) \n{\n    string[]\
    \ letter_grades;\n    foreach(g; grades)\n    {\n        if(g < 1.0) letter_grades\
    \ ~= \"E\";\n        else if(g < 1.3) letter_grades ~= \"D-\";\n        else if(g\
    \ < 1.7) letter_grades ~= \"D\";\n        else if(g < 2.0) letter_grades ~= \"\
    D+\";\n        else if(g < 2.3) letter_grades ~= \"C-\nunittest\n{\n    alias\
    \ candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgjp10f0b.d(72): Error: found \''A\'' when expecting \'';\''
    following statement\n/tmp/tmpgjp10f0b.d(72): Error: found \''B\'' when expecting
    \'';\'' following statement\n/tmp/tmpgjp10f0b.d(72): Error: found \''C\'' when
    expecting \'';\'' following statement\n/tmp/tmpgjp10f0b.d(72): Error: found \''C\''
    when expecting \'';\'' following statement\n/tmp/tmpgjp10f0b.d(72): Error: found
    \''A\'' when expecting \'';\'' following statement\n/tmp/tmpgjp10f0b.d(73): Error:
    found \''D\'' when expecting \'';\'' following statement\n/tmp/tmpgjp10f0b.d(74):
    Error: found \''D\'' when expecting \'';\'' following statement\n/tmp/tmpgjp10f0b.d(75):
    Error: found \''E\'' when expecting \'';\'' following statement\n/tmp/tmpgjp10f0b.d(76):
    Error: found \''D\'' when expecting \'';\'' following statement\n/tmp/tmpgjp10f0b.d(76):
    Error: found \''D\'' when expecting \'';\'' following statement\n/tmp/tmpgjp10f0b.d(76):
    Error: found \''C\'' when expecting \'';\'' following statement\n/tmp/tmpgjp10f0b.d(76):
    Error: found \''B\'' when expecting \'';\'' following statement\n/tmp/tmpgjp10f0b.d(76):
    Error: found \''B\'' when expecting \'';\'' following statement\n/tmp/tmpgjp10f0b.d(77):
    Error: found \''E\'' when expecting \'';\'' following statement\n/tmp/tmpgjp10f0b.d(77):
    Error: found \''D\'' when expecting \'';\'' following statement\n/tmp/tmpgjp10f0b.d(77):
    Error: unterminated string constant starting at /tmp/tmpgjp10f0b.d(77)\n/tmp/tmpgjp10f0b.d(79):
    Error: found \''EOF\'' when expecting \'';\'' following statement\n/tmp/tmpgjp10f0b.d(79):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpgjp10f0b.d(79):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjp10f0b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letters = [\"A+\",\
    \ \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\",\
    \ \"D-\", \"E\"];\n    float[] grades_table = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n    int grade_counter = 0;\n    string[] output\
    \ = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n\
    \    {\n        if (grades[i] >= grades_table[grade_counter])\n        {\n   \
    \         output[i] = letters[grade_counter];\n        }\n        else\n     \
    \   {\n            while(grades[i] < grades_table[grade_counter])\n          \
    \  {\n                grade_counter++;\n            }\n            output[i] =\
    \ letters[grade_counter];\n        }\n        grade_counter = 0;\n    }\n    return\
    \ output;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n \
    \   assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkxlswu5o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] grades_arr = new string[grades.length];\n\
    \    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] > 4.0)\n\
    \        {\n            grades_arr[i] = \"A+\";\n        }\n        else if (grades[i]\
    \ > 3.7)\n        {\n            grades_arr[i] = \"A\";\n        }\n        else\
    \ if (grades[i] > 3.3)\n        {\n            grades_arr[i] = \"A-\";\n     \
    \   }\n        else if (grades[i] > 3.0)\n        {\n            grades_arr[i]\
    \ = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n       \
    \     grades_arr[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n \
    \       {\n            grades_arr[i] = \"B-\";\n        }\n        else if (grades[i]\
    \ > 2.0)\n        {\n            grades_arr[i] = \"C+\";\n        }\n        else\
    \ if (grades[i] > 1.7)\n        {\n            grades_arr[i] = \"C\";\n      \
    \  }\n        else if (grades[i] > 1.3)\n        {\n            grades_arr[i]\
    \ = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n        {\n       \
    \     grades_arr[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n\
    \        {\n            grades_arr[i] = \"D\";\n        }\n        else if (grades[i]\
    \ > 0.0)\n        {\n            grades_arr[i] = \"D-\";\n        }\n        else\
    \ if (grades[i] == 0.0)\n        {\n            grades_arr[i] = \"E\";\n     \
    \   }\n    }\n    return grades_arr;\n}\n \nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbxdxpev.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    auto grader = new double[][2]();\n\
    \    grader ~= [4.0, \"A+\"];\n    grader ~= [3.7, \"A\"];\n    grader ~= [3.3,\
    \ \"A-\"];\n    grader ~= [3.0, \"B+\"];\n    grader ~= [2.7, \"B\"];\n    grader\
    \ ~= [2.3, \"B-\"];\n    grader ~= [2.0, \"C+\"];\n    grader ~= [1.7, \"C\"];\n\
    \    grader ~= [1.3, \"C-\"];\n    grader ~= [1.0, \"D+\"];\n    grader ~= [0.7,\
    \ \"D\"];\n    grader ~= [0.0, \"D-\"];\n    grader ~= [0.0, \"E\"];\n    auto\
    \ grade_map = tuple(grader);\n    auto out = new string[grades.length];\n    for(int\
    \ i=0; i<grades.length; i++)\n    {\n        foreach(t; grade_map)\n        {\n\
    \            if(grades[i] >= t[0])\n            {\n                out[i] = t[1];\n\
    \                break;\n            }\n        }\n    }\n    return out;\n}\n\
    unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwg3izqng.d(47): Error: basic type expected, not out\n/tmp/tmpwg3izqng.d(47):
    Error: no identifier for declarator int\n/tmp/tmpwg3izqng.d(47): Error: found
    \''out\'' instead of statement\n/tmp/tmpwg3izqng.d(54): Error: found \''out\''
    instead of statement\n/tmp/tmpwg3izqng.d(59): Error: expression expected, not
    \''out\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwg3izqng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    // YOUR CODE\n    string[] output\
    \ = new string[grades.length];\n    for (int i = 0; i < grades.length; i++) {\n\
    \        //print(grades[i]);\n        if (grades[i] > 4.0 || grades[i] < 0.0)\
    \ {\n            return \"Error\";\n        } else if (grades[i] >= 3.7) {\n \
    \           output[i] = \"A\";\n        } else if (grades[i] >= 3.3) {\n     \
    \       output[i] = \"A-\";\n        } else if (grades[i] >= 3.0) {\n        \
    \    output[i] = \"B+\";\n        } else if (grades[i] >= 2.7) {\n           \
    \ output[i] = \"B\";\n        } else if (grades[i] >= 2.3) {\n            output[i]\
    \ = \"B-\";\n        } else if (grades[i] >= 2.0) {\n            output[i] = \"\
    C+\";\n        } else if (grades[i] >= 1.7) {\n            output[i] = \"C\";\n\
    \        } else if (grades[i] >= 1.3) {\n            output[i] = \"C-\";\n   \
    \     } else if (grades[i] >= 1.0) {\n            output[i] = \"D+\";\n      \
    \  } else if (grades[i] >= 0.7) {\n            output[i] = \"D\";\n        } else\
    \ if (grades[i] >= 0.0) {\n            output[i] = \"D-\";\n        } else {\n\
    \            output[i] = \"E\";\n        }\n    }\n    return output;\n}\nunittest\n\
    {\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp059o5mad.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n\
    \    foreach(int i, float g; grades) \n    {\n        if (g == 4.0) \n       \
    \ {\n            result[i] = \"A+\";\n        }\n        else if (g > 3.7) \n\
    \        {\n            result[i] = \"A\";\n        }\n        else if (g > 3.3)\
    \ \n        {\n            result[i] = \"A-\";\n        }\n        else if (g\
    \ > 3.0) \n        {\n            result[i] = \"B+\";\n        }\n        else\
    \ if (g > 2.7) \n        {\n            result[i] = \"B\";\n        }\n      \
    \  else if (g > 2.3) \n        {\n            result[i] = \"B-\";\n        }\n\
    \        else if (g > 2.0) \n        {\n            result[i] = \"C+\";\n    \
    \    }\n        else if (g > 1.7) \n        {\n            result[i] = \"C\";\n\
    \        }\n        else if (g > 1.3) \n        {\n            result[i] = \"\
    C-\";\n        }\n        else if (g > 1.0) \n        {\n            result[i]\
    \ = \"D+\";\n        }\n        else if (g > 0.7) \n        {\n            result[i]\
    \ = \"D\";\n        }\n        else if (g > 0.0) \n        {\n            result[i]\
    \ = \"D-\";\n        }\n        else \n        {\n            result[i] = \"E\"\
    ;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"\
    D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8lqreex.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] letter_grade = new\
    \ string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n\
    \        if (grades[i] == 4.0)\n        {\n            letter_grade[i] = \"A+\"\
    ;\n        }\n        else if (grades[i] >= 3.7 && grades[i] < 4.0)\n        {\n\
    \            letter_grade[i] = \"A\";\n        }\n        else if (grades[i] >=\
    \ 3.3 && grades[i] < 3.7)\n        {\n            letter_grade[i] = \"A-\";\n\
    \        }\n        else if (grades[i] >= 3.0 && grades[i] < 3.3)\n        {\n\
    \            letter_grade[i] = \"B+\";\n        }\n        else if (grades[i]\
    \ >= 2.7 && grades[i] < 3.0)\n        {\n            letter_grade[i] = \"B\";\n\
    \        }\n        else if (grades[i] >= 2.3 && grades[i] < 2.7)\n        {\n\
    \            letter_grade[i] = \"B-\";\n        }\n        else if (grades[i]\
    \ >= 2.0 && grades[i] < 2.3)\n        {\n            letter_grade[i] = \"C+\"\
    ;\n        }\n        else if (grades[i] >= 1.7 && grades[i] < 2.0)\n        {\n\
    \            letter_grade[i] = \"C\";\n        }\n        else if (grades[i] >=\
    \ 1.3 && grades[i] < 1.7)\n        {\n            letter_grade[i] = \"C-\";\n\
    \        }\n        else if (grades[i] >= 1.0 && grades[i] < 1.3)\n        {\n\
    \            letter_grade[i] = \"D+\";\n        }\n        else if (grades[i]\
    \ >= 0.7 && grades[i] < 1.0)\n        {\n            letter_grade[i] = \"D\";\n\
    \        }\n        else if (grades[i] >= 0.0 && grades[i] < 0.7)\n        {\n\
    \nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
    \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
    \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
    \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"\
    D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3wso8ady.d(82): Error: found \''unittest\'' instead of statement\n/tmp/tmp3wso8ady.d(93):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp3wso8ady.d(93):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wso8ady.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the\
    \ semester and the teacher has to give the grades\n    to students. The teacher\
    \ has been making her own algorithm for grading.\n    The only problem is, she\
    \ has lost the code she used for grading.\n    She has given you an array of GPAs\
    \ for some students and you have to write \n    a function that can output an\
    \ array of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[]\
    \ numerical_letter_grade(float[] grades) \n{\n    string[] let_grade = new string[grades.length];\n\
    \    for (int i = 0; i < grades.length; i++) \n    {\n        if (grades[i] ==\
    \ 4.0) \n        {\n            let_grade[i] = \"A+\";\n        }\n        else\
    \ if (grades[i] > 3.7) \n        {\n            let_grade[i] = \"A\";\n      \
    \  }\n        else if (grades[i] > 3.3) \n        {\n            let_grade[i]\
    \ = \"A-\";\n        }\n        else if (grades[i] > 3.0) \n        {\n      \
    \      let_grade[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7) \n\
    \        {\n            let_grade[i] = \"B\";\n        }\n        else if (grades[i]\
    \ > 2.3) \n        {\n            let_grade[i] = \"B-\";\n        }\n        else\
    \ if (grades[i] > 2.0) \n        {\n            let_grade[i] = \"C+\";\n     \
    \   }\n        else if (grades[i] > 1.7) \n        {\n            let_grade[i]\
    \ = \"C\";\n        }\n        else if (grades[i] > 1.3) \n        {\n       \
    \     let_grade[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0) \n\
    \        {\n            let_grade[i] = \"D+\";\n        }\n        else if (grades[i]\
    \ > 0.7) \n        {\n            let_grade[i] = \"D\";\n        }\n        else\
    \ if (grades[i] > 0.0) \n        {\n            let_grade[i] = \"D-\";\n     \
    \   }\n        else \n        {\n            let_grade[i] = \"E\";\n        }\n\
    \    }\n    return let_grade;\n}\nassert(numerical_letter_grade([4.0, 3L, 1.7,\
    \ 2L, 3.5]) == [\"A+\", \"B\",\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\
    \n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5])\
    \ == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdrclffv5.d(90): Error: Declaration expected, not \''assert\''\n/tmp/tmpdrclffv5.d(95):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpdrclffv5.d(96): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpdrclffv5.d(97): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpdrclffv5.d(98): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpdrclffv5.d(99): Error: Declaration expected, not \''assert\''\n/tmp/tmpdrclffv5.d(100):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpdrclffv5.d(101): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdrclffv5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660005481
