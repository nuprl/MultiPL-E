language: d
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long n = 0;\n    foreach(string word; split(S,\
    \ \".\"))\n    {\n        string first_word = split(word, \" \")[0];\n       \
    \ if(first_word == \"I\")\n            n++;\n    }\n    return n;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3p7rmp2s.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3p7rmp2s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] strList = S.split('.');\n\
    \    foreach(str; strList) {\n        string[] wordList = str.split(' ');\n  \
    \      if(wordList[0] == \"I\") {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n   \
    \ assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpljg4upi4.d(18): Error: no property `split` for type `string`

    /tmp/tmpljg4upi4.d(20): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpljg4upi4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long start = 0;\n   \
    \ long last = 0;\n    for (;;)\n    {\n        last = findFirstNotOf(S, \" \\\
    t\\n.!?\", start);\n        if (last == -1) \n            break;\n        last\
    \ = findFirstOf(S, \" \\t\\n.!?\", last);\n        if (last == -1) \n        \
    \    break;\n        string temp = S[last-1..last];\n        if (temp == \"I\"\
    )\n            boredoms++;\n        start = last;\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp11ke3huh.d(22): Error: undefined identifier `findFirstNotOf`

    /tmp/tmp11ke3huh.d(25): Error: undefined identifier `findFirstOf`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11ke3huh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long n = 0;\n    foreach(it; (split(S, \".\"\
    ) ~= \" \").byChunk(2))\n    {\n        string s = it[0];\n        if (s[0] ==\
    \ 'I')\n            n++;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv9eremf6.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv9eremf6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    S = \" \" + S;\n    long num = 0;\n    long slen\
    \ = S.length;\n    long i = 0;\n    while (i < slen)\n    {\n        i = S.find(\"\
    I\", i);\n        if (i == -1)\n            break;\n        if (i > 0 && (isalpha(S[i-1])\
    \ || S[i-1] == ' '))\n        {\n            i++;\n            continue;\n   \
    \     }\n        num++;\n        i++;\n    }\n    return num;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpifeewyop.d(17): Error: invalid array operation `" " + S` (possible
    missing [])

    /tmp/tmpifeewyop.d(23): Error: no property `find` for type `string`

    /tmp/tmpifeewyop.d(26): Error: undefined identifier `isalpha`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpifeewyop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(strip(S), \".!?\");\n    for (string sentence : sentences)\n    {\n  \
    \      if (startsWith(strip(sentence), \"I\"))\n        {\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate =\
    \ is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvm8t170t.d(19): Error: found `sentence` when expecting `;` following
    statement

    /tmp/tmpvm8t170t.d(19): Error: expression expected, not `:`

    /tmp/tmpvm8t170t.d(19): Error: found `sentences` when expecting `;` following
    `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvm8t170t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".!?\");\n    foreach(sentence; sentences)\n    {\n        if(sentence.front\
    \ == 'I')\n            boredoms++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnd9irg9h.d(18): Error: undefined identifier `split`

    /tmp/tmpnd9irg9h.d(21): Error: no property `front` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnd9irg9h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string [] sentences =\
    \ split(S, \".\");\n    foreach(sentence; sentences) {\n        string [] words\
    \ = split(sentence, \" \");\n        foreach(string word; words) {\n         \
    \   if(word == \"I\") {\n                boredoms++;\n                break;\n\
    \            }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprzl5sf81.d(18): Error: undefined identifier `split`

    /tmp/tmprzl5sf81.d(20): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprzl5sf81.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    string\
    \ tempString = \"\";\n    while(i < S.length)\n    {\n        while(S[i] != '.'\
    \ && S[i] != '?' && S[i] != '!')\n        {\n            tempString += S[i];\n\
    \            i++;\n        }\n        if(tempString.length >= 2 && tempString[0..1]\
    \ == \"I \")\n        {\n            boredoms++;\n        }\n        tempString\
    \ = \"\";\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_oyudjk4.d(24): Error: slice `tempString` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_oyudjk4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    if (S.countChar('.') == 0)\n        return 0;\n\
    \    string[] sentences = S.split(\"[.|!|?]\");\n    int count = 0;\n    foreach\
    \ (string sent; sentences)\n    {\n        if (sent.countChar(' ') == 0)\n   \
    \         continue;\n        else if (sent.split(\" \")[0] == \"I\")\n       \
    \     count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_8u99t1r.d(17): Error: no property `countChar` for type `string`

    /tmp/tmp_8u99t1r.d(19): Error: no property `split` for type `string`

    /tmp/tmp_8u99t1r.d(23): Error: no property `countChar` for type `string`

    /tmp/tmp_8u99t1r.d(25): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_8u99t1r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] arr = split(S, \".?!\");\n    long count\
    \ = 0;\n    foreach(item; arr) {\n        count += item.startsWith(\"I\");\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp75b5zdy5.d(17): Error: undefined identifier `split`

    /tmp/tmp75b5zdy5.d(20): Error: no property `startsWith` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp75b5zdy5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong count = 0;\n\t\n\tS = S.split('.').concat('.');\n\
    \tS = S.split('?').concat('?');\n\tS = S.split('!').concat('!');\n\t\n\tforeach(string\
    \ s; S)\n\t{\n\t\tif(s[0..1] == \"I\") count++;\n\t}\n\t\n\treturn count;\n}\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpww_3_r05.d(19): Error: no property `split` for type `string`

    /tmp/tmpww_3_r05.d(20): Error: no property `split` for type `string`

    /tmp/tmpww_3_r05.d(21): Error: no property `split` for type `string`

    /tmp/tmpww_3_r05.d(23): Error: cannot implicitly convert expression `__r16[__key17]`
    of type `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpww_3_r05.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] words = S.split(' ');\n    long boredoms\
    \ = 0;\n    foreach(string word; words)\n    {\n        if(word.length && word[0]\
    \ == 'I')\n            boredoms++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiyvj3f2c.d(17): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiyvj3f2c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    // TODO: Write your code here.\n    long count\
    \ = 0;\n    foreach(line; split(S, \".\"))\n    {\n        if(strip(line, \"\\\
    n\\t ?!\").length > 0 && strip(line, \"\\n\\t ?!\")[0..1] == \"I \")\n       \
    \     count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpirhipsv6.d(19): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpirhipsv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: -1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long total = 0;\n    foreach(c; S)\n    {\n \
    \       if(c == '.' || c == '?' || c == '!')\n        {\n            S = \"\"\
    ;\n            break;\n        }\n        if(c == 'I')\n        {\n          \
    \  total++;\n            S = \"\";\n            break;\n        }\n    }\n   \
    \ if(S != \"\")\n    {\n        total += is_bored(S);\n    }\n    return total;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660163969
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return count(split(S, \".!?\"));\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpag8ojuxj.d(17): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpag8ojuxj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long N = length(S);\n\
    \    for (long i = 0; i < N; i++) {\n        if (S[i] == 'I') {\n            if\
    \ (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!')\n              \
    \  boredoms++;\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bdrln21.d(18): Error: undefined identifier `length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bdrln21.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    auto sentences = S.split(\"\
    .\");\n    sentences ~= \"\";\n    string longest_sentence = \"\";\n    foreach(sentence;\
    \ sentences)\n    {\n        auto words = sentence.split(\" \");\n        if(words[0]\
    \ == \"I\")\n        {\n            if(sentence.length > longest_sentence.length)\n\
    \            {\n                longest_sentence = sentence;\n            }\n\
    \            boredoms++;\n        }\n    }\n    return longest_sentence.length;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpugy4rww1.d(18): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpugy4rww1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long result = 0;\n    auto words = split(S, \"\
    \ .!?\", true);\n    foreach(word; words)\n    {\n        if(word == \"I\") result++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y8tsmmo.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y8tsmmo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int bored = 0;\n    for (int i = 0; i < S.length;\
    \ i++)\n    {\n        if (S[i] == 'I')\n        {\n            bored++;\n   \
    \     }\n    }\n    return bored;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpezgnra0_.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpezgnra0_.__unittest_L27_C1() [0x427aab]

    ??:? void tmpezgnra0_.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa12]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430054]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb31]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e9]

    ??:? runModuleUnitTests [0x42b955]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    auto words = split(S);\n\
    \    for (int i = 0; i < words.length; i++)\n    {\n        if (words[i] == \"\
    I\")\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2c2hm0b.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2c2hm0b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long num = 0;\n    auto vec = S.split(\".\");\n\
    \    foreach(auto str; vec) {\n        if(str.length > 0) {\n            if(str[0]\
    \ == 'I') num++;\n        }\n    }\n    return num;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkte6jpos.d(19): Error: basic type expected, not `auto`

    /tmp/tmpkte6jpos.d(19): Error: no identifier for declarator `_error_`

    /tmp/tmpkte6jpos.d(19): Error: found `auto` when expecting `;`

    /tmp/tmpkte6jpos.d(19): Error: found `;` when expecting `)`

    /tmp/tmpkte6jpos.d(19): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkte6jpos.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] words = split(S, \".[!?]\");\n    long\
    \ cnt = 0;\n    foreach(i, word; words)\n    {\n        if(word.length > 1 &&\
    \ word[0] == 'I')\n            cnt++;\n    }\n    return cnt;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnmzgl9zr.d(17): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnmzgl9zr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int words = 0;\n    int boredoms = 0;\n    bool\
    \ boring = false;\n    for (int i = 0; i < S.length; i++) {\n        if (S[i]\
    \ == ' ') {\n            if (boring)\n                boredoms++;\n          \
    \  boring = false;\n            words++;\n        } else if (S[i] == '?' || S[i]\
    \ == '!' || S[i] == '.') {\n            if (boring)\n                boredoms++;\n\
    \            boring = false;\n            words = 0;\n        } else if (words\
    \ == 0 && S[i] == 'I') {\n            boring = true;\n        }\n    }\n    return\
    \ boredoms;\n}\n/*\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather. I love this weather.\
    \ I love this weather. I love this weather. I love this weather. I love this weather.\
    \ I love this weather. I love this weather. I love this weather. I love this weather.\
    \ I love this weather. I love this weather. I love this weather. I love this weather.\
    \ I love this weather. I love this weather. I love this weather. I love this weather.\
    \ I love this weather. I love this weather. I love this weather. I love this weather.\
    \ I love this weather. I love this weather. I love this weather. I love this weather.\
    \ I love this weather. I love this weather. I love this weather. I love this weather.\
    \ I love this weather. I love this weather. I love this weather. I love this weather.\
    \ I love this weather. I love this weather. I love this weather. I love this weather.\
    \ I love this weather. I love this weather. I love this weather. I love this weather.\
    \ I love this weather. I love this weather. I love this weather. I love this weather.\
    \ I love this weather. I love this weather. I love this weather. I love this weather.\
    \ I love this weather. I love this weather. I love this weather. I love this weather.\
    \ I love this weather. I love this weather\nunittest\n{\n    alias candidate =\
    \ is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdupcuqv5.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdupcuqv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto words = split(S);\n    long boredoms = 0;\n\
    \    for (auto w : words) \n    {\n        if (w == \"I\") \n        {\n     \
    \       boredoms++;\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuxky19ug.d(19): Error: no identifier for declarator `w`

    /tmp/tmpuxky19ug.d(19): Error: expression expected, not `:`

    /tmp/tmpuxky19ug.d(19): Error: found `words` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuxky19ug.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    foreach(split(S, '.',\
    \ '!', '?'), sentence; )\n    {\n        // Split again, but this time with all\
    \ whitespace characters to \n        // get the individual words.\n        foreach(split(sentence,\
    \ ' ', '\\t', '\\n', '\\v', '\\f', '\\r'), word; )\n        {\n            if(word\
    \ == \"I\")\n            {\n                ++boredoms;\n                break;\n\
    \            }\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0h468p71.d(18): Error: unexpected `(` in declarator

    /tmp/tmp0h468p71.d(18): Error: basic type expected, not `46U`

    /tmp/tmp0h468p71.d(18): Error: found `46U` when expecting `)`

    /tmp/tmp0h468p71.d(18): Error: no identifier for declarator `split(S, _error_)`

    /tmp/tmp0h468p71.d(18): Error: basic type expected, not `33U`

    /tmp/tmp0h468p71.d(18): Error: no identifier for declarator `_error_`

    /tmp/tmp0h468p71.d(18): Error: found `33U` when expecting `;`

    /tmp/tmp0h468p71.d(18): Error: expression expected, not `,`

    /tmp/tmp0h468p71.d(18): Error: found `63U` when expecting `)`

    /tmp/tmp0h468p71.d(18): Error: found `)` instead of statement

    /tmp/tmp0h468p71.d(18): Error: found `)` instead of statement

    /tmp/tmp0h468p71.d(22): Error: found `)` instead of statement

    /tmp/tmp0h468p71.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0h468p71.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    int i;\n    string[]\
    \ sentences = split(S, \".\", \"?\", \"!\");\n    for (i = 0; i < sentences.length;\
    \ i++) {\n        if (sentences[i].find(\"I\") == 0) {\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate =\
    \ is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0rq3r_u0.d(19): Error: undefined identifier `split`

    /tmp/tmp0rq3r_u0.d(21): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0rq3r_u0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{ \n    long i = 0;\n    long boredoms = 0;\n    long\
    \ len = S.length;\n    while (i < len)\n    {\n        if (S[i] == 'I')\n    \
    \    {\n            long sentence_len = 0;\n            while (i < len && S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!')\n            {\n                sentence_len++;\n\
    \                i++;\n            }\n            if (sentence_len > 1)\n    \
    \        {\n                boredoms++;\n            }\n        }\n        i++;\n\
    \    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppsbop_1t.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ea5]

    ??:? void tmppsbop_1t.__unittest_L39_C1() [0x427b6b]

    ??:? void tmppsbop_1t.__modtest() [0x427c28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430114]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaa9]

    ??:? runModuleUnitTests [0x42ba15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428368]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long result = 0;\n    auto words = split(S, \"\
    \ .!?\");\n    foreach(w; words)\n    {\n        if(w.length > 0 && w[0] == 'I')\n\
    \            result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7dcdfmrw.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7dcdfmrw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] words = split(S,\
    \ ['.', '?', '!']);\n    foreach(word; words)\n    {\n        auto splitWord =\
    \ split(word);\n        if(splitWord.length >= 2 && splitWord[0] == \"I\")\n \
    \           count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp41dhuxgg.d(18): Error: undefined identifier `split`

    /tmp/tmp41dhuxgg.d(21): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41dhuxgg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    long p;\n    if(S[0]=='I')\
    \ bored++;\n    foreach(s; S.split(\".\"))\n    {\n        if(s[0]=='I') bored++;\n\
    \    }\n    foreach(s; S.split(\"?\"))\n    {\n        if(s[0]=='I') bored++;\n\
    \    }\n    foreach(s; S.split(\"!\"))\n    {\n        if(s[0]=='I') bored++;\n\
    \    }\n    return bored;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0dvlqasg.d(20): Error: no property `split` for type `string`

    /tmp/tmp0dvlqasg.d(24): Error: no property `split` for type `string`

    /tmp/tmp0dvlqasg.d(28): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0dvlqasg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long n = 0;\n    foreach(c; split(S, \".,?!\"\
    ))\n    {\n        if(c.length >= 1 && c[0] == 'I')\n            n++;\n    }\n\
    \    return n;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp41yv1u3x.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41yv1u3x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] words = split(S, \".\");\n    long count\
    \ = 0;\n    foreach(string word; words)\n    {\n        if(startsWith(word, \"\
    I \"))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpskicxw_v.d(17): Error: undefined identifier `split`

    /tmp/tmpskicxw_v.d(21): Error: undefined identifier `startsWith`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpskicxw_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163954
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto sentences = split(S, \".?!\", true);\n \
    \   long count = 0;\n    foreach(s; sentences)\n    {\n        auto words = split(s);\n\
    \        if(words.length > 0 && words[0] == \"I\")\n            count++;\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n  \
    \  assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpstzut7j5.d(17): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpstzut7j5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    // Write your code here\n\
    \    string[] sentences = split(S, '.');\n    foreach(s; sentences)\n    {\n \
    \       if(startsWith(s, \"I\"))\n            boredoms++;\n    }\n    return boredoms;\n\
    }\n \nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpplhscy2n.d(19): Error: undefined identifier `split`

    /tmp/tmpplhscy2n.d(22): Error: undefined identifier `startsWith`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpplhscy2n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    auto words = S.split('\
    \ ');\n    for (auto word : words) {\n        if (word == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt3eh4t8j.d(19): Error: no identifier for declarator `word`

    /tmp/tmpt3eh4t8j.d(19): Error: expression expected, not `:`

    /tmp/tmpt3eh4t8j.d(19): Error: found `words` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt3eh4t8j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    char delimiters[] = \"\
    !?.\";\n    foreach(token; S.split(delimiters))\n    {\n        if(token.startsWith(\"\
    I\")) boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp31q8brcw.d(18): Deprecation: instead of C-style syntax, use D-style
    syntax `char[] delimiters`

    /tmp/tmp31q8brcw.d(18): Error: cannot implicitly convert expression `"!?."` of
    type `string` to `char[]`

    /tmp/tmp31q8brcw.d(19): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp31q8brcw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong result = 0;\n\tchar *pch = null;\n\tpch =\
    \ strtok(toStringz(S), \"!?.\");\n\twhile (pch != null)\n\t{\n\t\tif (strncmp(pch,\
    \ \"I\", 1) == 0)\n\t\t{\n\t\t\tresult++;\n\t\t}\n\t\tpch = strtok(null, \"!?.\"\
    );\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1f5olias.d(19): Error: undefined identifier `strtok`

    /tmp/tmp1f5olias.d(22): Error: undefined identifier `strncmp`

    /tmp/tmp1f5olias.d(26): Error: undefined identifier `strtok`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1f5olias.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return count(S.split(\"[.?!]\"), \"I\");\n}\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp27yul1jw.d(17): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp27yul1jw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    while\
    \ (i < S.length) {\n        if (S[i] == 'I') {\n            boredoms++;\n    \
    \    }\n        while (i < S.length && S[i] != '.' && S[i] != '?' && S[i] != '!')\
    \ {\n            i++;\n        }\n        i++;\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptfsvfa5t.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e8d]

    ??:? void tmptfsvfa5t.__unittest_L30_C1() [0x427b53]

    ??:? void tmptfsvfa5t.__modtest() [0x427c10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc27]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc4d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa91]

    ??:? runModuleUnitTests [0x42b9fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428350]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return split(S, \".\").filter!(s => s.startsWith(\"\
    I\")).length;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1bvz7hte.d(17): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1bvz7hte.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] sentences = split(S, \".[?!]\");\n \
    \   long boredoms = 0;\n    foreach(sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words.length > 0 && words[0] ==\
    \ \"I\")\n            boredoms++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmtt6sxp5.d(17): Error: undefined identifier `split`

    /tmp/tmpmtt6sxp5.d(21): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmtt6sxp5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    int len = S.length;\n\
    \    int i = 0;\n    while (i < len)\n    {\n        // Skip whitespace\n    \
    \    while (i < len && S[i] == ' ')\n            i++;\n        \n        // We're\
    \ at the start of a sentence\n        if (i < len && S[i] == 'I')\n          \
    \  boredoms++;\n        \n        // Skip until the end of the sentence\n    \
    \    while (i < len && S[i] != '.' && S[i] != '?' && S[i] != '!')\n          \
    \  i++;\n        \n        // Skip the period\n        i++;\n    }\n    return\
    \ boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal4tx10l.d(18): Error: cannot implicitly convert expression `S.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal4tx10l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int Boredoms = 0;\n    string Boredom = \"I\"\
    ;\n    auto A = split(S, \".\");\n    foreach(word; A)\n    {\n        auto C\
    \ = split(word, \" \");\n        if(C[0] == Boredom)\n        {\n            Boredoms++;\n\
    \        }\n    }\n    return Boredoms;\n}\nunittest\n{\n    alias candidate =\
    \ is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqowkx8e9.d(19): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqowkx8e9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    // Split all the sentences.\n    string[] sentences\
    \ = split(S, \"?.!\");\n    // Initialize the boredoms counter.\n    long boredoms\
    \ = 0L;\n    // Go through each sentence and see if it starts with \"I\".\n  \
    \  foreach(sentence; sentences)\n    {\n        if(sentence.length)\n        {\n\
    \            // The first letter of a sentence.\n            char first_letter\
    \ = sentence[0];\n            // The second letter of a sentence.\n          \
    \  char second_letter = sentence[1];\n            // Check the sentence.\n   \
    \         if(first_letter == 'I' || (first_letter == ' ' && second_letter == 'I'))\n\
    \            {\n                // Add one to the boredoms counter.\n        \
    \        boredoms++;\n            }\n        }\n    }\n    // Return boredoms\
    \ counter.\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu77j_u9g.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu77j_u9g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    long start = 0;\n    for\
    \ (long i = 0; i < S.length; i++)\n    {\n        if (S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!')\n        {\n            if (S[start] == 'I')\n            {\n\
    \                bored++;\n            }\n            start = i + 2;\n       \
    \ }\n    }\n    return bored;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ierhyxf.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e6d]

    ??:? void tmp6ierhyxf.__unittest_L32_C1() [0x427b33]

    ??:? void tmp6ierhyxf.__modtest() [0x427bf0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc07]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc2d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa71]

    ??:? runModuleUnitTests [0x42b9dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428330]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    size_t pos = 0;\n    string\
    \ delim = \".!?\";\n    string token;\n    while ((pos = S.find_first_of(delim))\
    \ != string::npos) {\n        token = S.substr(0, pos);\n        count += startsWith(token,\
    \ \"I\");\n        S.erase(0, pos + 1);\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmh6ts_f_.d(21): Error: found `:` when expecting `)`

    /tmp/tmpmh6ts_f_.d(21): Error: found `:` instead of statement

    /tmp/tmpmh6ts_f_.d(26): Error: declaration expected, not `return`

    /tmp/tmpmh6ts_f_.d(27): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmh6ts_f_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    foreach(sentence; S.split(\"\
    .\"))\n    {\n        // remove any leading whitespace\n        sentence = ltrim(sentence);\n\
    \        auto words = sentence.split;\n        if (words.length && words[0] ==\
    \ \"I\")\n            boredoms++;\n    }\n    return boredoms;\n}\n/*\n    Also,\
    \ the language hasn't been invented yet that can make you\n    bored with string\
    \ functions.\n*/\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxtm5bafd.d(18): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtm5bafd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    import std.algorithm : canFind;\n    string[]\
    \ words = S.split;\n    bool found = false;\n    foreach(string word; words)\n\
    \    {\n        //if word is I, we've found the starting of a boredom sentence\n\
    \        if(word.stripRight().toLower() == \"i\")\n        {\n            found\
    \ = true;\n        }\n        //else, check if this is the end of the sentence\n\
    \        else if(found && word.stripRight().canFind('.', '!', '?'))\n        {\n\
    \            return 1L;\n        }\n    }\n    return 0L;\n}\n//overloaded version\n\
    long is_bored(string[] S)\n{\n    return S.reduce!((a, b) => a + is_bored(b));\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb80rt7vi.d(18): Error: no property `split` for type `string`

    /tmp/tmpb80rt7vi.d(23): Error: no property `stripRight` for type `string`

    /tmp/tmpb80rt7vi.d(28): Error: no property `stripRight` for type `string`

    /tmp/tmpb80rt7vi.d(38): Error: no property `reduce` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb80rt7vi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{ \n    long bor = 0;\n    string[] S2 = split(S, \"\
    \ .!?\", true);\n    foreach(string st; S2)\n    {\n        if(st[0] == 'I')\n\
    \            bor += 1;\n    }\n    return bor;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2jrgbvz5.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2jrgbvz5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    int index = 0;\n    while\
    \ (index < S.length)\n    {\n        while (index < S.length && S[index] != '.'\
    \ && S[index] != '?' && S[index] != '!')\n        {\n            index++;\n  \
    \      }\n        if (index + 1 < S.length && S[index + 1] == ' ' && S[index -\
    \ 1] == 'I')\n        {\n            count++;\n        }\n        index += 2;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpufwo7zpr.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427edd]

    ??:? void tmpufwo7zpr.__unittest_L33_C1() [0x427bca]

    ??:? void tmpufwo7zpr.__modtest() [0x427c5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc77]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab0a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc9d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43014c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc29]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aae1]

    ??:? runModuleUnitTests [0x42ba4d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long start = 0;\n   \
    \ for (long end = 0; end < S.length; end++)\n    {\n        if (S[end] == '.'\
    \ || S[end] == '?' || S[end] == '!')\n        {\n            if (S[start] == 'I')\n\
    \            {\n                boredoms++;\n            }\n            start\
    \ = end + 2;\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxiv27x2f.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e6d]

    ??:? void tmpxiv27x2f.__unittest_L32_C1() [0x427b33]

    ??:? void tmpxiv27x2f.__modtest() [0x427bf0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc07]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc2d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa71]

    ??:? runModuleUnitTests [0x42b9dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428330]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    import std.conv;\n    long counter = 0;\n   \
    \ size_t len = S.length;\n    string[] words = split(S);\n    foreach(string word;\
    \ words)\n    {\n        string firstLetter = word[0..1];\n        //std.conv.to!long(firstLetter);\
    \ // runtime error\n        if(firstLetter == \"I\")\n        {\n            counter++;\n\
    \        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate =\
    \ is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpllnebf7t.d(20): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllnebf7t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    long[] delim = [ '.', '?',\
    \ '!' ];\n    string[] parts = split(S, delim);\n    foreach(string part; parts)\n\
    \    {\n        if(part.length > 0 && part[0] == 'I')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1mkp8bya.d(19): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1mkp8bya.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    int i = 0;\n    while\
    \ (i < S.length) {\n        while (i < S.length && !(S[i] == '?' || S[i] == '!'\
    \ || S[i] == '.')) i++;\n        if (i > 0 && S[i - 1] == 'I') boredoms++;\n \
    \       i++;\n    }\n    return boredoms;\n}\nlong is_bored_1(string S) \n{\n\
    \    long boredoms = 0;\n    auto i = S.find(\"I\", 0);\n    auto j = S.find_first_of(\"\
    .!?\", i);\n    while (i != string.npos && j != string.npos) {\n        if (j\
    \ - i == 1) boredoms++;\n        i = S.find(\"I\", j);\n        j = S.find_first_of(\"\
    .!?\", i);\n    }\n    return boredoms;\n}\nlong is_bored_2(string S) \n{\n  \
    \  long boredoms = 0;\n    foreach (i, j; S.byChunk([\"I\", \".\", \"?\", \"!\"\
    ])) {\n        if (j - i == 1) boredoms++;\n    }\n    return boredoms;\n}\nlong\
    \ is_bored_3(string S) \n{\n    long boredoms = 0;\n    foreach (idx; S.count([\"\
    I\", \".\", \"?\", \"!\"])) {\n        if (idx % 2 == 0 && S[idx + 1] == ' ')\
    \ boredoms++;\n    }\n    return boredoms;\n}\nlong is_bored_4(string S) \n{\n\
    \    long boredoms = 0;\n    foreach (i; 0 .. S.length) {\n        if (S[i] ==\
    \ 'I') {\n            if (S[i + 1] == ' ' || S[i + 1] == '.' || S[i + 1] == '?'\
    \ || S[i + 1] == '!') {\n                boredoms++;\n            }\n        }\n\
    \    }\n    return boredoms;\n}\nlong is_bored_5(string\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptvoof7da.d(67): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptvoof7da.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long i = 0;\n    for (int x = 0; x < S.length;\
    \ x++)\n    {\n        if (S[x] == 'I')\n        {\n            i++;\n       \
    \ }\n    }\n    return i;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpazl18wjz.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmpazl18wjz.__unittest_L27_C1() [0x427ab3]

    ??:? void tmpazl18wjz.__modtest() [0x427b70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb87]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43005c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f1]

    ??:? runModuleUnitTests [0x42b95d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b0]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    /*\n        The `find` function returns an iterator.\n\
    \    */\n    auto it = find(S, \"I\");\n    long count = 0;\n    /*\n        If\
    \ it is not equal to the end iterator, i.e.\n        the end of the string, then\
    \ increment the count.\n    */\n    while (it != S.length)\n    {\n        count++;\n\
    \        /*\n            Increment the iterator by 1.\n        */\n        it++;\n\
    \        /*\n            Find the next occurence of 'I'.\n        */\n       \
    \ it = find(it, \"I\");\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm33gpj8z.d(20): Error: undefined identifier `find`, did you mean
    function `fmod`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm33gpj8z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    long start = 0;\n    while\
    \ (true) {\n        long end = find(S, \".\", start);\n        if (end == -1)\
    \ {\n            end = find(S, \"?\", start);\n            if (end == -1) {\n\
    \                end = find(S, \"!\", start);\n                if (end == -1)\
    \ {\n                    break;\n                }\n            }\n        }\n\
    \        if (end != start && S[start] == 'I') {\n            bored++;\n      \
    \  }\n        start = end + 1;\n    }\n    return bored;\n}\nunittest\n{\n   \
    \ alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7kelnfrw.d(20): Error: undefined identifier `find`, did you mean
    function `fmod`?

    /tmp/tmp7kelnfrw.d(22): Error: undefined identifier `find`, did you mean variable
    `end`?

    /tmp/tmp7kelnfrw.d(24): Error: undefined identifier `find`, did you mean variable
    `end`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7kelnfrw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long ret = 0;\n    string s_temp;\n    auto c\
    \ = S.length();\n    foreach(i;0..c)\n    {\n        if(S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!')\n        {\n            if(s_temp.startsWith(\"I \"))\n\
    \            {\n                ret++;\n            }\n            s_temp = \"\
    \";\n        }\n        else\n        {\n            s_temp ~= S[i];\n       \
    \ }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv_k6ovgr.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv_k6ovgr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    size_t i = 0;\n    long boredoms = 0;\n    foreach(c;\
    \ S)\n    {\n        if(c == '.' || c == '?' || c == '!')\n        {\n       \
    \     if(S[i - 1] == 'I')\n                boredoms++;\n        }\n        i++;\n\
    \    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprsjueh5n.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e2d]

    ??:? void tmprsjueh5n.__unittest_L30_C1() [0x427b1a]

    ??:? void tmprsjueh5n.__modtest() [0x427bac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa5a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43009c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb79]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa31]

    ??:? runModuleUnitTests [0x42b99d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{ \n\tsize_t pos = 0;\n\tstring delimiter = \"!?.\"\
    ;\n\tstring token;\n\tsize_t len = S.length();\n\tlong ans = 0;\n\twhile ((pos\
    \ = S.find(delimiter)) != string::npos) {\n\t\ttoken = S.substr(0, pos);\n\t\t\
    S.erase(0, pos + 1);\n\t\tif (token.substr(0, 2) == \"I \") ans++;\n\t}\n\treturn\
    \ ans;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmfeb6drj.d(22): Error: found `:` when expecting `)`

    /tmp/tmpmfeb6drj.d(22): Error: found `:` instead of statement

    /tmp/tmpmfeb6drj.d(27): Error: declaration expected, not `return`

    /tmp/tmpmfeb6drj.d(28): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmfeb6drj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto words = S.split(\" \");\n    auto count\
    \ = 0L;\n    auto is_bored = false;\n    foreach(auto word; words) {\n       \
    \ if(word == \"I\") {\n            is_bored = true;\n        }\n        if(word\
    \ == \".\" || word == \"?\" || word == \"!\") {\n            if(is_bored) {\n\
    \                count++;\n            }\n            is_bored = false;\n    \
    \    }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ylmdjv6.d(20): Error: basic type expected, not `auto`

    /tmp/tmp7ylmdjv6.d(20): Error: no identifier for declarator `_error_`

    /tmp/tmp7ylmdjv6.d(20): Error: found `auto` when expecting `;`

    /tmp/tmp7ylmdjv6.d(20): Error: found `;` when expecting `)`

    /tmp/tmp7ylmdjv6.d(20): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ylmdjv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int strLen = S.length;\n    long boredoms = 0;\n\
    \    bool bored = false;\n    string rest;\n    foreach(e; S)\n    {\n       \
    \ if(e == '.' || e == '?' || e == '!')\n        {\n            rest = S[0..$-1];\n\
    \            if(rest.startsWith(\"I \"))\n            {\n                boredoms++;\n\
    \            }\n            S = S[$..$];\n        }\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkx1ut4u_.d(17): Error: cannot implicitly convert expression `S.length`
    of type `ulong` to `int`

    /tmp/tmpkx1ut4u_.d(26): Error: no property `startsWith` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkx1ut4u_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    // Your code here.\n    size_t nCount = 0;\n\
    \    size_t nHead = 0;\n    size_t nTail = 0;\n    while(nHead < S.length && nTail\
    \ < S.length)\n    {\n        while(nTail < S.length && S[nTail] != '.' && S[nTail]\
    \ != '?' && S[nTail] != '!')\n        {\n            nTail++;\n        }\n   \
    \     if(S[nHead] == 'I')\n        {\n            nCount++;\n        }\n     \
    \   nHead = nTail + 1;\n        nTail = nHead;\n    }\n    return nCount;\n}\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9frklutj.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ea5]

    ??:? void tmp9frklutj.__unittest_L36_C1() [0x427b6b]

    ??:? void tmp9frklutj.__modtest() [0x427c28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430114]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaa9]

    ??:? runModuleUnitTests [0x42ba15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428368]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int count = 0;\n    auto words = split(S, \"\\\
    n.!?\");\n    foreach(w; words)\n    {\n        if(strip(w)[0] == 'I')\n     \
    \       count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj_e_h5ro.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_e_h5ro.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long n = 0;\n    string word = \"\";\n    foreach(ch;\
    \ S) {\n        if (ch == '.' || ch == '?' || ch == '!') {\n            if (word\
    \ == \"I\")\n                n++;\n            word = \"\";\n        } else if\
    \ (ch == ' ') {\n            if (word == \"I\")\n                n++;\n      \
    \      word = \"\";\n        } else {\n            word ~= ch;\n        }\n  \
    \  }\n    return n;\n}\n/*\n    The following lines are for testing. Do not modify.\n\
    */\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpos953uv1.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fc5]

    ??:? void tmpos953uv1.__unittest_L37_C1() [0x427c99]

    ??:? void tmpos953uv1.__modtest() [0x427d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c65b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b56a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4303f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fecd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b541]

    ??:? runModuleUnitTests [0x42c431]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tstring[] words = split(S);\n\tlong boredoms = 0;\n\
    \tforeach(string word; words)\n\t{\n\t\tif(word == \"I\")\n\t\t{\n\t\t\tboredoms++;\n\
    \t\t}\n\t}\n\treturn boredoms;\n}\n/*\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyuoreyx_.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyuoreyx_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong boredoms = 0;\n\tforeach(i; 0 .. S.length)\n\
    \t{\n\t\tif(S[i] == 'I')\n\t\t{\n\t\t\tif(S[i - 1] == '.' || S[i - 1] == '?' ||\
    \ S[i - 1] == '!')\n\t\t\t{\n\t\t\t\tboredoms++;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp0ilo24hs.d(22): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427f26]

    ??:? long tmp0ilo24hs.is_bored(immutable(char)[]) [0x427a7e]

    ??:? void tmp0ilo24hs.__unittest_L30_C1() [0x427b21]

    ??:? void tmp0ilo24hs.__modtest() [0x427bf4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaa2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc35]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbc1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa79]

    ??:? runModuleUnitTests [0x42b9e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    // Write your code here\n    auto words = split(S,\
    \ \".!?\");\n    long boredoms = 0;\n    foreach(w; words)\n    {\n        auto\
    \ w2 = w.strip();\n        if(w2.length >= 2 && w2[0..1] == \"I \")\n        \
    \    boredoms++;\n    }\n    return boredoms;\n}\n/*\n    https://leetcode.com/problems/longest-palindromic-substring/\n\
    \    Given a string s, find the longest palindromic substring in s. You may assume\
    \ that the maximum length of s is 1000.\n    Example 1:\n    Input: \"babad\"\n\
    \    Output: \"bab\"\n    Note: \"aba\" is also a valid answer.\n    Example 2:\n\
    \    Input: \"cbbd\"\n    Output: \"bb\"\n*/\nstring longestPalindrome(string\
    \ s) \n{\n    // Write your code here\n    string longest = \"\";\n    for(int\
    \ i = 0; i < s.length; i++)\n    {\n        int longestForI = 0;\n        if(i-1\
    \ >= 0 && i+1 < s.length && s[i-1] == s[i+1])\n        {\n            string str\
    \ = s[i..i+1];\n            while(i-1 >= 0 && i+1 < s.length && s[i-1] == s[i+1])\n\
    \            {\n                str = s[i-1..i+1];\n                i--;\n   \
    \         }\n            if(str.length > longest.length)\n                longest\
    \ = str;\n        }\n        else if(i+1 < s.length && s[i] == s[i+1])\n     \
    \   {\n            string str = s[i..i+1];\n            while(i+1 < s.length &&\
    \ s[i] == s[i+1])\n            {\n                str = s[i..i+1];\n         \
    \       i++;\n            }\n            if(str.length > longest.length)\n   \
    \             longest = str;\n        }\n    }\n    return longest;\n}\n/*\n \
    \   https://leetcode.com/\nunittest\n{\n    alias candidate = is_bored;\n\n  \
    \  assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsmt3i_7h.d(71): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsmt3i_7h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    size_t found;\n    found\
    \ = S.find_first_of(\".?!\");\n    while (found != string::npos)\n    {\n    \
    \    string sentence = S.substr(0, found + 1);\n        if (is_bored_sentence(sentence))\n\
    \            boredoms++;\n        S = S.substr(found + 1);\n        found = S.find_first_of(\"\
    .?!\");\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxvn6mqzf.d(20): Error: found `:` when expecting `)`

    /tmp/tmpxvn6mqzf.d(20): Error: found `:` instead of statement

    /tmp/tmpxvn6mqzf.d(28): Error: declaration expected, not `return`

    /tmp/tmpxvn6mqzf.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxvn6mqzf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto sentences = split(S, \"?.!\");\n    long\
    \ boredoms = 0;\n    foreach(sentence; sentences)\n    {\n        if(sentence.length\
    \ >= 2 && sentence[0..1] == \"I \")\n            boredoms++;\n    }\n    return\
    \ boredoms;\n}\n/*\n    On a related note, you're given a string of sentences,\
    \ and a word.\n    You have to count the number of occurances of that word in\
    \ the string.\n    (Note, it may be a substring of the word in a sentence).\n\
    \    If the word occurs more than once in a sentence, that still counts as a single\
    \ occurence.\n    \n    For example:\n    >>> count_word(\"The sun is shining.\
    \ The sun is shining.\", \"sun\")\n    2L\n    >>> count_word(\"The sun is shining.\"\
    , \"clouds\")\n    0L\n*/\nlong count_word(string S, string word) \n{\n    auto\
    \ sentences = split(S, \"?.!\");\n    long occurences = 0;\n    foreach(sentence;\
    \ sentences)\n    {\n        if(sentence.length >= word.length && \n         \
    \  sentence[0..word.length] == word)\n            occurences++;\n    }\n    return\
    \ occurences;\n}\n/*\n    You're given a string of words, and your task is to\
    \ return the average number of\n    characters in the words.\n    \n    For example:\n\
    \    >>> get_average_characters(\"Hello world\")\n    5L\n    >>> get_average_characters(\"\
    I love this weather\")\n    5L\n*/\nlong get_average_characters(string S) \n{\n\
    \    auto words = split(S, \" \");\n    long total_characters = 0;\n    foreach(word;\
    \ words)\n    {\n        total_characters += word.length;\n    }\n    return total_characters\
    \ / words.length;\n}\n/*\n    You're given a string of words. You have to get\
    \ the first character in each word,\n    and assemble them into a new string.\n\
    \    \n    For example:\n    >>> first_characters(\"My name is Simon\")\n    \"\
    M\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4lyii2hw.d(70): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4lyii2hw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{ \n  S = chomp(S, \".\");\n  S = chomp(S, \"?\");\n\
    \  S = chomp(S, \"!\");\n  string[] words = split(S, \" \");\n  long count = 0;\n\
    \  foreach(inout word; words) {\n    if(word == \"I\") {\n      count++;\n   \
    \ }\n  }\n  return count;\n}\n/*\n    This will be a template for compiling a\
    \ D program with dmd.\n*/\n/* Compile with dmd -run <file> */\n/*\n    This will\
    \ be a template for compiling a D program with dmd.\n*/\n/* Compile with dmd -run\
    \ <file> */\nimport std.stdio;\nimport std.string;\nimport std.math;\n/*\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjmoz_6_h.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjmoz_6_h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    int\
    \ len = S.length;\n    while (i < len) {\n        if (S[i] == 'I') {\n       \
    \     boredoms++;\n            while (i < len && S[i] != '.' && S[i] != '?' &&\
    \ S[i] != '!') i++;\n        }\n        i++;\n    }\n    return boredoms;\n}\n\
    \ \n/*\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplt8j1rs7.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplt8j1rs7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] split = split(S, \" .!?,\");\n    long\
    \ boring = 0;\n    foreach(string word; split)\n    {\n        if(word.toLower().length\
    \ && word.toLower()[0] == 'i')\n            boring++;\n    }\n    return boring;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc7y30hfl.d(17): Error: undefined identifier `split`

    /tmp/tmpc7y30hfl.d(21): Error: no property `toLower` for type `string`

    /tmp/tmpc7y30hfl.d(21): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc7y30hfl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n  auto num_sentences = 0L;\n  auto num_boredoms =\
    \ 0L;\n  for (auto c: S) {\n    if (c == '?' || c == '.' || c == '!')\n      num_sentences++;\n\
    \  }\n  auto tokens = split(S);\n  for (auto it = tokens.begin(); it != tokens.end();\
    \ it++) {\n    if (*it == \"I\") {\n      num_boredoms++;\n      it += min(num_sentences,\
    \ 2);\n    }\n  }\n  return num_boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ef7af2w.d(19): Error: no identifier for declarator `c`

    /tmp/tmp7ef7af2w.d(19): Error: expression expected, not `:`

    /tmp/tmp7ef7af2w.d(19): Error: found `S` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ef7af2w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    long charIndex = 0;\n  \
    \  long lineIndex = 0;\n    long boredomIndex = 0;\n    long linesCount = 0;\n\
    \    long boredomCount = 0;\n    long B, N;\n    long state = 0;\n    bool bored\
    \ = false;\n    bool word;\n    bool space;\n    bool dot;\n    bool exclamation;\n\
    \    bool question;\n    char c;\n    char[] line;\n    char[] boredom;\n    char[]\
    \ lines;\n    bool is_boredom(string str)\n    {\n        bool bored = false;\n\
    \        foreach(c; str)\n        {\n            if(c == 'I')\n            {\n\
    \                bored = true;\n                break;\n            }\n      \
    \  }\n        return bored;\n    }\n    lines = S.dup;\n    foreach(c; lines)\n\
    \    {\n        if(c == '.' || c == '?' || c == '!')\n        {\n            linesCount++;\n\
    \        }\n    }\n    linesCount++;\n    lines = new char[][linesCount];\n  \
    \  foreach(c; S)\n    {\n        if(c == '.' || c == '?' || c == '!')\n      \
    \  {\n            lines[lineIndex] = line;\n            lineIndex++;\n       \
    \     line = new char[];\n        }\n        else\n        {\n            line\
    \ ~= c;\n        }\n    }\n    lines[lineIndex] = line;\n    foreach(line; lines)\n\
    \    {\n        if(is_boredom(line))\n        {\n            boredomCount++;\n\
    \        }\n    }\n    boredom = new char[][boredomCount];\n    foreach(line;\
    \ lines)\n    {\n        if(is_boredom(line))\n        {\n            boredom[boredomIndex]\
    \ = line;\n            boredomIndex++;\n        }\n    }\n    foreach(line; boredom)\n\
    \    {\n        foreach(c; line)\n        {\n            if(c == 'I')\n      \
    \      {\n                boredomIndex++;\n            }\n        }\n    }\n \
    \   return boredomIndex;\n}\n/*\n    Write\nunittest\n{\n    alias candidate =\
    \ is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8mib91kv.d(100): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8mib91kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int num_boredoms = 0;\n    string[] split = split(S,\
    \ \".!?\");\n    for (int i = 0; i < split.length; i++) {\n        string first_word\
    \ = split[i][0 .. 4];\n        if (first_word == \"I am\") {\n            num_boredoms++;\n\
    \        }\n    }\n    return num_boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6dhcpreo.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6dhcpreo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto words = split(S, \".!?\");\n    long result\
    \ = 0;\n    foreach(word; words)\n    {\n        foreach(w; split(word))\n   \
    \     {\n            if(w == \"I\")\n            {\n                result++;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw9a2slt9.d(17): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw9a2slt9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long R = 0;\n    string [] words = S.split(\"\
    [?!.]\");\n    foreach(string W; words)\n    {\n        if(W.length > 0 && W[0]\
    \ == 'I')\n            R++;\n    }\n    return R;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7gyz09s.d(18): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7gyz09s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    if (S.length == 0)\n        return 0;\n    S\
    \ = strip(S, \"I\");\n    return count(S, \"I\");\n}\n// ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    // ________________________________________________________________________\n\
    //\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdusz91ap.d(19): Error: undefined identifier `strip`, did you mean
    alias `string`?

    /tmp/tmpdusz91ap.d(20): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdusz91ap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, '.');\n    foreach(sentence; sentences)\n    {\n        if(startsWith(trim(sentence),\
    \ \"I\"))\n            boredoms++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp649faa2u.d(18): Error: undefined identifier `split`

    /tmp/tmp649faa2u.d(21): Error: undefined identifier `startsWith`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp649faa2u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{ \n    long boredoms = 0;\n    string[] sentences =\
    \ S.split(\"[.!?]\");\n    foreach(string sentence; sentences)\n    {\n      \
    \  string[] words = sentence.split;\n        if(words.length > 0 && words[0] ==\
    \ \"I\")\n            boredoms++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk6mtg0r9.d(18): Error: no property `split` for type `string`

    /tmp/tmpk6mtg0r9.d(21): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk6mtg0r9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int cnt = 0;\n    foreach(i; 0 .. S.length)\n\
    \    {\n        if(S[i] == 'I')\n        {\n            while(i < S.length &&\
    \ S[i] != '.' && S[i] != '?' && S[i] != '!')\n            {\n                if(S[i]\
    \ == 'I') cnt++;\n                i++;\n            }\n        }\n    }\n    return\
    \ cnt;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8t__vn7z.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ecd]

    ??:? void tmp8t__vn7z.__unittest_L31_C1() [0x427b93]

    ??:? void tmp8t__vn7z.__modtest() [0x427c50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc67]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aafa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43013c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad1]

    ??:? runModuleUnitTests [0x42ba3d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428390]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ len = S.length;\n    for (; i < len; i++) {\n        if (S[i] == 'I') {\n  \
    \          boredoms++;\n        } else if (S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!') {\n            while (i < len && (S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!')) {\n                i++;\n            }\n            i--;\n        }\n\
    \    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0_6krxec.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ef5]

    ??:? void tmp0_6krxec.__unittest_L32_C1() [0x427bb7]

    ??:? void tmp0_6krxec.__modtest() [0x427c74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc8f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab22]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcb5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430164]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf9]

    ??:? runModuleUnitTests [0x42ba65]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto a = split(S, \".\");\n    int boredoms =\
    \ 0;\n    foreach(string sentence; a)\n    {\n        if(startsWith(sentence,\
    \ \"I\"))\n            boredoms++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8q63xzm6.d(17): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8q63xzm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    // your code goes here...\n    return count(S.length,\
    \ (inout long i) {\n        i = indexOf(S, \"I\", i);\n        if (i == -1)\n\
    \            return false;\n        auto l = S[i];\n        if (i+1 == S.length)\n\
    \            return false;\n        if (S[i+1] == '.' || S[i+1] == '?' || S[i+1]\
    \ == '!')\n            return true;\n        i++;\n        return false;\n   \
    \ });\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_87qba2e.d(18): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_87qba2e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long i = 0;\n    foreach(e; S.split('.'))\n \
    \   {\n        if(e.indexOf(\"I\") == 0)\n            i++;\n    }\n    return\
    \ i;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb0vd0tka.d(18): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb0vd0tka.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length;\
    \ i++)\n    {\n        if (S[i] == 'I')\n        {\n            for (int j = i;\
    \ j < S.length; j++)\n            {\n                if (S[j] == '.' || S[j] ==\
    \ '?' || S[j] == '!')\n                {\n                    count++;\n     \
    \               break;\n                }\n            }\n        }\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpazskk2j7.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e85]

    ??:? void tmpazskk2j7.__unittest_L34_C1() [0x427b4b]

    ??:? void tmpazskk2j7.__modtest() [0x427c08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc45]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa89]

    ??:? runModuleUnitTests [0x42b9f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428348]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return countUntil(split(S, \"!\"), (string a)\
    \ => a == \"I\");\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz0jm1gvz.d(17): Error: undefined identifier `countUntil`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0jm1gvz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n  return count(split(S, '.'), (string s) => strip(s,\
    \ \" \").front == 'I');\n}\nunittest\n{\n    alias candidate = is_bored;\n\n \
    \   assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb_35sll0.d(17): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_35sll0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int boredoms = 0;\n    foreach(line; lines(S))\n\
    \    {\n        if(line.length > 0)\n        {\n            if(line[0] == 'I')\n\
    \            {\n                ++boredoms;\n            }\n        }\n    }\n\
    \    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n   \
    \ assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkfxiqg82.d(18): Error: undefined identifier `lines`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkfxiqg82.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tauto a = split(S, \".\", true);\n\tlong b = 0;\n\
    \tfor (int i = 0; i < a.length; i++)\n\t{\n\t\tif (a[i].strip().length == 0)\n\
    \t\t\tcontinue;\n\t\tauto c = split(a[i], \"!\", true);\n\t\tfor (int i = 0; i\
    \ < c.length; i++)\n\t\t{\n\t\t\tif (c[i].strip().length == 0)\n\t\t\t\tcontinue;\n\
    \t\t\tauto d = split(c[i], \"?\", true);\n\t\t\tfor (int i = 0; i < d.length;\
    \ i++)\n\t\t\t{\n\t\t\t\tif (d[i].strip().length == 0)\n\t\t\t\t\tcontinue;\n\t\
    \t\t\tauto e = split(d[i], \" \", true);\n\t\t\t\tif (e[0] == \"I\")\n\t\t\t\t\
    \tb++;\n\t\t\t}\n\t\t}\n\t}\n\treturn b;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkvvldzrv.d(17): Error: undefined identifier `split`

    /tmp/tmpkvvldzrv.d(23): Error: undefined identifier `split`

    /tmp/tmpkvvldzrv.d(24): Error: variable `i` is shadowing variable `tmpkvvldzrv.is_bored.i`

    /tmp/tmpkvvldzrv.d(28): Error: undefined identifier `split`

    /tmp/tmpkvvldzrv.d(29): Error: variable `i` is shadowing variable `tmpkvvldzrv.is_bored.i`

    /tmp/tmpkvvldzrv.d(33): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkvvldzrv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] sentences = split(S,\
    \ [\".\", \"?\", \"!\"]);\n    foreach(sentence; sentences)\n    {\n        if(startsWith(sentence,\
    \ \"I\"))\n            count++;\n    }\n    return count;\n}\n/*\n    This is\
    \ a basic counting problem. To solve it, first split the\n    sentences on the\
    \ delimiters and then check each sentence that starts\n    with \"I\".\n*/\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj_dolzb1.d(18): Error: undefined identifier `split`

    /tmp/tmpj_dolzb1.d(21): Error: undefined identifier `startsWith`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_dolzb1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long pos = 0;\n    while(true)\n\
    \    {\n        long next_pos = S.find(\"I\", pos);\n        if(next_pos == -1)\n\
    \            break;\n        \n        long end_pos = next_pos;\n        while(end_pos\
    \ < S.length() && S[end_pos] != '.' && S[end_pos] != '?' && S[end_pos] != '!')\n\
    \            end_pos++;\n        \n        // Check if next_pos is first char\
    \ of sentence\n        if(next_pos == 0 || S[next_pos - 1] == '.' || S[next_pos\
    \ - 1] == '?' || S[next_pos - 1] == '!')\n            boredoms++;\n        \n\
    \        pos = next_pos + 1;\n    }\n    return boredoms;\n}\nunittest\n{\n  \
    \  alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0avqdbyx.d(21): Error: no property `find` for type `string`

    /tmp/tmp0avqdbyx.d(26): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0avqdbyx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    // YOUR CODE HERE\n    auto count = 0L;\n   \
    \ auto a = S.split(\"\");\n    for(int i = 0; i < a.length; i++)\n    {\n    \
    \    if(a[i] == \"I\") count++;\n    }\n    return count;\n}\nunittest\n{\n  \
    \  alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz73jwzow.d(19): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz73jwzow.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n  string[] tokens = split(S, \" !.?\");\n  long n\
    \ = 0;\n  foreach(string token; tokens)\n    if (startsWith(token, \"I\"))\n \
    \     n++;\n  return n;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n \
    \   assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ztlir69.d(17): Error: undefined identifier `split`

    /tmp/tmp5ztlir69.d(20): Error: undefined identifier `startsWith`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ztlir69.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    S = S.strip();\n    string[]\
    \ sentences = S.split(\"[.!?]\");\n    foreach(string sentence; sentences)\n \
    \   {\n        sentence = sentence.strip();\n        if(sentence.startsWith(\"\
    I \"))\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdom2192o.d(18): Error: no property `strip` for type `string`

    /tmp/tmpdom2192o.d(19): Error: no property `split` for type `string`

    /tmp/tmpdom2192o.d(22): Error: no property `strip` for type `string`

    /tmp/tmpdom2192o.d(23): Error: no property `startsWith` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdom2192o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long index = 0;\n    long index2 = 0;\n    long\
    \ counter = 0;\n    string[] sentences;\n    S = S.toLower();\n    foreach(dchar\
    \ in '.', '?', '!') {\n        S = S.replace(dchar, ',');\n    }\n    sentences\
    \ = S.split(\",\");\n    foreach(string in sentences) {\n        if(str == \"\"\
    ) {\n            continue;\n        }\n        index = str.indexOf(\"i\");\n \
    \       if(index == 0) {\n            counter++;\n        }\n    }\n    return\
    \ counter;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgbs7i8gk.d(22): Error: no identifier for declarator `dchar`

    /tmp/tmpgbs7i8gk.d(22): Error: found `in` when expecting `;`

    /tmp/tmpgbs7i8gk.d(23): Error: found `,` when expecting `.` following dchar

    /tmp/tmpgbs7i8gk.d(23): Error: found `44U` when expecting identifier following
    `dchar`.

    /tmp/tmpgbs7i8gk.d(26): Error: no identifier for declarator `string`

    /tmp/tmpgbs7i8gk.d(26): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbs7i8gk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    auto sentences = split(S,\
    \ '.');\n    foreach(const auto &sentence; sentences) {\n        sentences = split(sentence,\
    \ '?');\n        foreach(const auto &question; sentences) {\n            sentences\
    \ = split(question, '!');\n            foreach(const auto &exclamation; sentences)\
    \ {\n                if(exclamation.startsWith(\"I\")) {\n                   \
    \ boredoms++;\n                }\n            }\n        }\n    }\n    return\
    \ boredoms;\n}\n```\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6sq_ipat.d(19): Error: basic type expected, not `auto`

    /tmp/tmp6sq_ipat.d(19): Error: no identifier for declarator `_error_`

    /tmp/tmp6sq_ipat.d(19): Error: found `auto` when expecting `;`

    /tmp/tmp6sq_ipat.d(19): Error: found `;` when expecting `)`

    /tmp/tmp6sq_ipat.d(19): Error: found `)` when expecting `;` following statement

    /tmp/tmp6sq_ipat.d(21): Error: basic type expected, not `auto`

    /tmp/tmp6sq_ipat.d(21): Error: no identifier for declarator `_error_`

    /tmp/tmp6sq_ipat.d(21): Error: found `auto` when expecting `;`

    /tmp/tmp6sq_ipat.d(21): Error: found `;` when expecting `)`

    /tmp/tmp6sq_ipat.d(21): Error: found `)` when expecting `;` following statement

    /tmp/tmp6sq_ipat.d(23): Error: basic type expected, not `auto`

    /tmp/tmp6sq_ipat.d(23): Error: no identifier for declarator `_error_`

    /tmp/tmp6sq_ipat.d(23): Error: found `auto` when expecting `;`

    /tmp/tmp6sq_ipat.d(23): Error: found `;` when expecting `)`

    /tmp/tmp6sq_ipat.d(23): Error: found `)` when expecting `;` following statement

    /tmp/tmp6sq_ipat'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] split = split(S, \".\");\n    long count\
    \ = 0;\n    foreach(string s; split)\n    {\n        if(s.startsWith(\"I\"))\n\
    \            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt96xrmh3.d(17): Error: undefined identifier `split`

    /tmp/tmpt96xrmh3.d(21): Error: no property `startsWith` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt96xrmh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto text = S.split(\".\");\n    auto words =\
    \ text.map!(a => a.strip(\" .!?\").split(\" \"));\n    return words.filter!(a\
    \ => a[0] == \"I\").length;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph5diu3ae.d(17): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph5diu3ae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong boredoms = 0;\n\tauto start = 0, end = 0;\n\
    \twhile( end < S.length )\n\t{\n\t\tif( S[end] == '.' || S[end] == '?' || S[end]\
    \ == '!' )\n\t\t{\n\t\t\tif( start+1 < end && S[start] == 'I' )\n\t\t\t\tboredoms++;\n\
    \t\t\tstart = end+1;\n\t\t}\n\t\tend++;\n\t}\n\treturn boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258m98tj.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e75]

    ??:? void tmp258m98tj.__unittest_L31_C1() [0x427b3b]

    ??:? void tmp258m98tj.__modtest() [0x427bf8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaa2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc35]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbc1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa79]

    ??:? runModuleUnitTests [0x42b9e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428338]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163955
- exit_code: 0
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long i, j, bored, num_bored = 0;\n    long size\
    \ = S.length;\n    string word;\n    /*\n        Iterate over each sentence in\
    \ S.\n    */\n    for (i = 0; i < size; i++) {\n        j = i;\n        /*\n \
    \           Iterate over each word in the sentence.\n        */\n        for (;\
    \ j < size; j++) {\n            /*\n                If you found an end to the\
    \ sentence, skip the\n                rest of the sentence.\n            */\n\
    \            if (S[j] == '.' || S[j] == '?' || S[j] == '!') {\n              \
    \  i = j + 1;\n                break;\n            }\n            /*\n       \
    \         If you find a space, take the part of the string that has the word.\n\
    \            */\n            if (S[j] == ' ') {\n                word = S[i..j];\n\
    \                i = j + 1;\n                break;\n            }\n        }\n\
    \        /*\n            If there's no space, it means it's the last word in the\
    \ sentence.\n        */\n        if (j == size) {\n            word = S[i..j];\n\
    \        }\n        /*\n            Check if you're bored.\n        */\n     \
    \   bored = word == \"I\";\n        num_bored += bored;\n    }\n    return num_bored;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    // Split the string at '.', '?' or '!'\n    string[]\
    \ sentences = splitter(S);\n    long count = 0;\n    foreach(i; sentences)\n \
    \   {\n        // Count the number of 'I' at the start of each sentence\n    \
    \    if(splitter(i)[0] == \"I\")\n            count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp69swyay8.d(18): Error: undefined identifier `splitter`

    /tmp/tmp69swyay8.d(23): Error: undefined identifier `splitter`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp69swyay8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string tmp;\n    auto a\
    \ = S.split(\" \");\n    for (int i = 0; i < a.length; i++)\n    {\n        if\
    \ (a[i] == \"I\")\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsejbsnzc.d(19): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsejbsnzc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto b = S.count(\"I\");\n    auto s = S.count(\"\
    .\");\n    auto q = S.count(\"?\");\n    auto e = S.count(\"!\");\n    return\
    \ abs(s - b) + abs(q - b) + abs(e - b);\n}\n// Tests\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_vj7qdpy.d(17): Error: no property `count` for type `string`

    /tmp/tmp_vj7qdpy.d(18): Error: no property `count` for type `string`

    /tmp/tmp_vj7qdpy.d(19): Error: no property `count` for type `string`

    /tmp/tmp_vj7qdpy.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_vj7qdpy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n  long ret;\n  long match;\n  match = 0;\n  long\
    \ length;\n  length = S.length;\n  long i;\n  for (i = 0; i < length; i++) {\n\
    \    if ((S[i] == 'I') && ((S[i - 1] == '.') || (S[i - 1] == '?') || (S[i - 1]\
    \ == '!'))) {\n      match++;\n    }\n  }\n  ret = match;\n  return ret;\n}\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpfuq3vhwa.d(24): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427f26]

    ??:? long tmpfuq3vhwa.is_bored(immutable(char)[]) [0x427a84]

    ??:? void tmpfuq3vhwa.__unittest_L31_C1() [0x427b25]

    ??:? void tmpfuq3vhwa.__modtest() [0x427bf8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaa2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc35]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbc1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa79]

    ??:? runModuleUnitTests [0x42b9e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{ \n    auto sentences = split(S, \".!?\");\n    return\
    \ count(sentences, (string S) { return startsWith(S, \"I\"); });\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbo4mpnsy.d(17): Error: undefined identifier `split`

    /tmp/tmpbo4mpnsy.d(18): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbo4mpnsy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] sentence = split(S, '.');\n    long\
    \ number_of_boredoms = 0;\n    for (string s : sentence) \n    {\n        if (s.length\
    \ > 0) \n        {\n            string[] words = split(s, ' ');\n            if\
    \ (words[0] == \"I\")\n                number_of_boredoms++;\n        }\n    }\n\
    \    return number_of_boredoms;\n}\n//------------------end of is_bored.d--------------------------\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdty_8ckg.d(19): Error: found `s` when expecting `;` following statement

    /tmp/tmpdty_8ckg.d(19): Error: expression expected, not `:`

    /tmp/tmpdty_8ckg.d(19): Error: found `sentence` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdty_8ckg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    foreach(word; split(strip(S),\
    \ \" \"))\n    {\n        if(word.startsWith(\"I\"))\n            count++;\n \
    \   }\n    return count;\n}\n/*\n    The function 'is_bored' takes in a string\
    \ and returns the number of times\n    the word 'I' occurs in the string as a\
    \ word and not as a part of other\n    words.\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4vwbce5x.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4vwbce5x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] sentences = split(S,\
    \ ['.', '?', '!']);\n    foreach(string s; sentences)\n    {\n        if(strip(s).split('\
    \ ')[0] == \"I\")\n            count++;\n    }\n    return count;\n}\n/*\n   \
    \ You have an array of integers and a target sum. How many numbers in the array\n\
    \    sum to the target value?\n    >>> target_sum([1, 2, 3, 4, 5], 5)\n    2\n\
    \    >>> target_sum([1, 2, 3, 4, 5], 6)\n    3\n    >>> target_sum([1, 2, 3, 4,\
    \ 5], 7)\n    4\n    >>> target_sum([1, 2, 3, 4, 5], 8)\n    5\n    >>> target_sum([1,\
    \ 2, 3, 4, 5], 9)\n    4\n    >>> target_sum([1, 2, 3, 4, 5], 10)\n    3\n   \
    \ >>> target_sum([1, 2, 3, 4, 5], 11)\n    2\n    >>> target_sum([1, 2, 3, 4,\
    \ 5], 12)\n    1\n    >>> target_sum([1, 2, 3, 4, 5], 13)\n    0\n*/\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nwrdkx3.d(18): Error: undefined identifier `split`

    /tmp/tmp6nwrdkx3.d(21): Error: undefined identifier `strip`, did you mean alias
    `string`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nwrdkx3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] sentences = split(S, \".\");\n    long\
    \ boredoms = 0;\n    foreach(string sent; sentences)\n    {\n        string[]\
    \ words = split(sent, \" \");\n        foreach(string word; words)\n        {\n\
    \            if(word == \"I\")\n            {\n                boredoms++;\n \
    \               break;\n            }\n        }\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpos33aoky.d(17): Error: undefined identifier `split`

    /tmp/tmpos33aoky.d(21): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpos33aoky.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return count(split(S));\n}\nunittest\n{\n   \
    \ alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3117r8nj.d(17): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3117r8nj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long Boredoms=0;\n    auto a = split(S,\"!.?\"\
    );\n    foreach(string aa;a)\n    {\n        if(aa.length>=2)\n        {\n   \
    \         if(tolower(aa[0])=='i'&&aa[1]==' ')\n            {\n               \
    \ Boredoms++;\n            }\n        }\n    }\n    return Boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp54vxsv1.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp54vxsv1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".!?\");\n    foreach(string sentence; sentences)\n    {\n       \
    \ string trimmed = trim(sentence);\n        if(length(trimmed) > 0 && toLower(trimmed[0])\
    \ == 'i')\n            boredoms++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpug9sy1k9.d(18): Error: undefined identifier `split`

    /tmp/tmpug9sy1k9.d(21): Error: undefined identifier `trim`, did you mean function
    `fdim`?

    /tmp/tmpug9sy1k9.d(22): Error: undefined identifier `length`

    /tmp/tmpug9sy1k9.d(22): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpug9sy1k9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto words = split(S, \".\");\n    long n = 0;\n\
    \    foreach(word; words) {\n        auto w = split(word, \" \");\n        if(w[0]\
    \ == \"I\")\n            n++;\n    }\n    return n;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__y83n5i.d(17): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__y83n5i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long num = 0;\n    auto words = split(S, \".!?\"\
    );\n    foreach(word; words) {\n        auto string_word = to!string(word);\n\
    \        if(string_word[0] == 'I')\n            num++;\n    }\n    return num;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9nc81x9u.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9nc81x9u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    S = replace(S, \"?\", \".\");\n    S = replace(S,\
    \ \"!\", \".\");\n    auto list = split(S, \".\");\n    long boredom = 0;\n  \
    \  foreach(sentence; list) {\n        sentence = replace(sentence, \" \", \"\"\
    );\n        if(sentence[0..1] == \"I\") {\n            boredom++;\n        }\n\
    \    }\n    return boredom;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvx71v70w.d(17): Error: undefined identifier `replace`

    /tmp/tmpvx71v70w.d(18): Error: undefined identifier `replace`

    /tmp/tmpvx71v70w.d(19): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvx71v70w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n   int boredoms = 0;\n   string[] parts = S.split(\"\
    [!?.]\");\n   foreach(part; parts)\n   {\n       if(part.length > 0 && part[0..1]\
    \ == \"I \")\n       {\n           boredoms++;\n       }\n   }\n   return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp76zpoy1i.d(18): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp76zpoy1i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    bool is_bored = false;\n\
    \    foreach(string word; S.split()) \n    {\n        if(is_bored) \n        {\n\
    \            if(word == \".\" || word == \"?\" || word == \"!\") \n          \
    \  {\n                is_bored = false;\n            }\n        }\n        else\
    \ if(word == \"I\") \n        {\n            is_bored = true;\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;\n}\n/*\n    The function is_bored() takes\
    \ a string S as input and checks whether the \n    sentence is boring or not.\
    \ A sentence is boring if it starts with the word \n    \"I\". There will be some\
    \ number of spaces in the string, and the first letter \n    of each word will\
    \ always be a capital letter.\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgpgq9d4q.d(36): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgpgq9d4q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long N = S.length;\n    long cnt = 0;\n    foreach(i;0..N)\n\
    \    {\n        if(S[i] == 'I')\n        {\n            cnt++;\n            while(i\
    \ < N && S[i] != '.' && S[i] != '?' && S[i] != '!')\n            {\n         \
    \       i++;\n            }\n        }\n    }\n    return cnt;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvqvdbd6c.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e9d]

    ??:? void tmpvqvdbd6c.__unittest_L32_C1() [0x427b63]

    ??:? void tmpvqvdbd6c.__modtest() [0x427c20]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc37]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43010c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaa1]

    ??:? runModuleUnitTests [0x42ba0d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428360]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    size_t index = 0;\n    long count = 0;\n    while\
    \ (index < S.length)\n    {\n        if (S[index] == 'I')\n        {\n       \
    \     ++count;\n        }\n        else if (S[index] == '.' || S[index] == '?'\
    \ || S[index] == '!')\n        {\n            /* Don't move the index counter\
    \ here, we want to \n            check the next char too. */\n        }\n    \
    \    else\n        {\n            /* Non-spaces are not interest to us, pass them\
    \ by. */\n            while (index < S.length && S[index] != ' ')\n          \
    \  {\n                ++index;\n            }\n        }\n        ++index;\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp76dbz1ah.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x427eb5]

    ??:? void tmp76dbz1ah.__unittest_L42_C1() [0x427b77]

    ??:? void tmp76dbz1ah.__modtest() [0x427c34]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc4f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430124]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab9]

    ??:? runModuleUnitTests [0x42ba25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428378]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    /* Your code here */\n    long length = S.length;\n\
    \    long count = 0;\n    long i = 0;\n    for(i = 0; i < length; i++)\n    {\n\
    \        if(S[i] == 'I')\n        {\n            if(i + 1 < length)\n        \
    \    {\n                if(S[i + 1] == ' ')\n                {\n             \
    \       count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz3e53g4s.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e35]

    ??:? void tmpz3e53g4s.__unittest_L36_C1() [0x427ba5]

    ??:? void tmpz3e53g4s.__modtest() [0x427bb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbcf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa62]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb81]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa39]

    ??:? runModuleUnitTests [0x42b9a5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    foreach(token; S.split([\"\
    .\", \"?\", \"!\"])) \n    {\n        if(token.trimLeft().startsWith(\"I\")) boredoms++;\n\
    \    }\n    return boredoms;\n}\n```\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmtqlsnr9.d(24): Error: declaration expected, not `""`

    /tmp/tmpmtqlsnr9.d(24): Error: unterminated string constant starting at /tmp/tmpmtqlsnr9.d(24)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmtqlsnr9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string str = \"\";\n   \
    \ foreach(char c; S) \n    {\n        if (c == '.' || c == '?' || c == '!')\n\
    \        {\n            if (str.length)\n            {\n                count\
    \ += str.length >= 2 && str[0] == 'I' && isAlNum(str[1]);\n                str\
    \ = \"\";\n            }\n        }\n        else \n        {\n            str\
    \ ~= c;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6hi1w548.d(25): Error: undefined identifier `isAlNum`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6hi1w548.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    bool found = false;\n  \
    \  foreach(char c; S)\n    {\n        if(c == 'I')\n        {\n            found\
    \ = true;\n        }\n        else if(c == '.' || c == '?' || c == '!')\n    \
    \    {\n            if(found)\n            {\n                count++;\n     \
    \           found = false;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoy636k6j.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e1d]

    ??:? void tmpoy636k6j.__unittest_L36_C1() [0x427adf]

    ??:? void tmpoy636k6j.__modtest() [0x427b9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430018]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]

    ??:? runModuleUnitTests [0x42b919]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42826c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long i = 0;\n    bool bored = false;\n    long\
    \ boredCount = 0;\n    while(i < S.length)\n    {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!')\n        {\n            if(bored)\n            {\n  \
    \              boredCount++;\n                bored = false;\n            }\n\
    \        }\n        else if(S[i] == 'I')\n        {\n            bored = true;\n\
    \        }\n        i++;\n    }\n    return boredCount;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpot_v6gnh.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e75]

    ??:? void tmpot_v6gnh.__unittest_L38_C1() [0x427b37]

    ??:? void tmpot_v6gnh.__modtest() [0x427bf4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaa2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc35]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbc1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa79]

    ??:? runModuleUnitTests [0x42b9e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428338]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    string[] T = to!string[](filter!(ch\
    \ => ch == '.' || ch == '?' || ch == '!')(S));\n    foreach(string t; T)\n   \
    \ {\n        if(t.length > 2)\n        {\n            if(t[0..2] == \"I \")\n\
    \            {\n                bored += 1;\n            }\n        }\n    }\n\
    \    return bored;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppddu3zdd.d(18): Error: template instance `to!string` template `to`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppddu3zdd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length;\
    \ i++)\n    {\n        if (S[i] == 'I')\n        {\n            count++;\n   \
    \     }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0halder9.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmp0halder9.__unittest_L27_C1() [0x427ab3]

    ??:? void tmp0halder9.__modtest() [0x427b70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb87]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43005c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f1]

    ??:? runModuleUnitTests [0x42b95d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    foreach(string sentence;\
    \ split(S, \".?! \"))\n    {\n        if(sentence[0] == 'I')\n            boredoms++;\n\
    \    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpedwospq1.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpedwospq1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    foreach(string word; S.split(\"\
    .?!\"))\n    {\n        if(word.split(' ')[0] == \"I\")\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprhqxeicq.d(18): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprhqxeicq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return split(S, \"I\", true).length - 1;\n}\n\
    long is_bored(string S) \n{\n    auto data = split(S, \"I\", true);\n    return\
    \ data.length - 1;\n}\n/*\n    Link: https://www.codewars.com/kata/5601409514fc93442500010b\n\
    */\nlong is_bored(string S) \n{\n    auto data = split(S, \"I\", true);\n    return\
    \ data.length - 1;\n}\n//and another solution\nlong is_bored(string S) \n{\n \
    \   return S.count(\"I\");\n}\nlong is_bored(string S) \n{\n    return S.count(\"\
    I\");\n}\n// and another solution\nlong is_bored(string S) \n{\n    auto data\
    \ = split(S, \"I\", true);\n    return data.length - 1;\n}\n// and another solution\n\
    long is_bored(string S) \n{\n    return S.count(\"I\");\n}\n/*\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_d9nsr1k.d(52): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_d9nsr1k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    char[] buf = split(S, '.!?');\n\
    \    for (long i = 0; i < len(buf); i++)\n    {\n        char[] buffer = split(buf[i],\
    \ ' ');\n        if (buffer[0] == \"I\")\n            bored++;\n    }\n    return\
    \ bored;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp707dvfgi.d(18): Error: unterminated character constant

    /tmp/tmp707dvfgi.d(18): Error: found `!` when expecting `,`

    /tmp/tmp707dvfgi.d(18): Error: expression expected, not `?`

    /tmp/tmp707dvfgi.d(18): Error: unterminated character constant

    /tmp/tmp707dvfgi.d(18): Error: found `63U` when expecting `,`

    /tmp/tmp707dvfgi.d(18): Error: expression expected, not `;`

    /tmp/tmp707dvfgi.d(19): Error: found `for` when expecting `,`

    /tmp/tmp707dvfgi.d(19): Error: found `i` when expecting `.` following long

    /tmp/tmp707dvfgi.d(19): Error: found `=` when expecting identifier following `long`.

    /tmp/tmp707dvfgi.d(19): Error: found `0` when expecting `)`

    /tmp/tmp707dvfgi.d(19): Error: found `;` when expecting `,`

    /tmp/tmp707dvfgi.d(19): Error: found `;` when expecting `,`

    /tmp/tmp707dvfgi.d(20): Error: semicolon expected, not `{`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp707dvfgi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long int count = 0L;\n    string[] words = split(S,\
    \ \".\");\n    int n = words.length;\n    foreach(i; 0..n) {\n        if(words[i].length\
    \ > 0 && words[i][0] == 'I') {\n            count += 1L;\n        }\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqpsnmete.d(17): Error: no identifier for declarator `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpsnmete.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto strings = split(S, \".\");\n    long bored\
    \ = 0;\n    foreach(string s; strings)\n    {\n        auto words = split(s, \"\
    \ \");\n        if(words[0] == \"I\")\n            bored++;\n    }\n    return\
    \ bored;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzlksol5m.d(17): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzlksol5m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long num = 0;\n    string res = \"\";\n    foreach(inout\
    \ c; S) \n    {\n        if(c == '.' || c == '?' || c == '!')\n        {\n   \
    \         c = '#';\n            res ~= c;\n        }\n        else\n        {\n\
    \            res ~= c;\n        }\n    }\n    string[] words = res.split(\"#\"\
    );\n    foreach(inout w; words)\n    {\n        if(w[0] == 'I')\n        {\n \
    \           num++;\n        }\n    }\n    return num;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfr9m3k4k.d(23): Error: cannot modify `immutable` expression `c`

    /tmp/tmpfr9m3k4k.d(31): Error: no property `split` for type `string`

    /tmp/tmpfr9m3k4k.d(32): Error: variable `tmpfr9m3k4k.is_bored.w` `inout` variables
    can only be declared inside `inout` functions

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfr9m3k4k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto sentences = split(S, \".!?\");\n    long\
    \ counter = 0;\n    foreach(sentence; sentences)\n    {\n        auto words =\
    \ split(sentence);\n        if(words.length > 0 && words[0] == \"I\") counter++;\n\
    \    }\n    return counter;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ychd31y.d(17): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ychd31y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong counter = 0;\n\tstring[] array = S.split(\"\
    [.?!]\");\n\tforeach(s; array)\n\t{\n\t\t// is_bored(\"I am having fun!\") ==>\
    \ 1\n\t\t// is_bored(\"I love.\"); ==> 1\n\t\t// is_bored(\"I love? I hate!\"\
    ); ==> 2\n\t\tif(s.stripLeft().startsWith(\"I\"))\n\t\t{\n\t\t\tcounter++;\n\t\
    \t}\n\t}\n\treturn counter;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv2j519bh.d(18): Error: no property `split` for type `string`

    /tmp/tmpv2j519bh.d(24): Error: no property `stripLeft` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv2j519bh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    int start = 0;\n    int\
    \ len = S.length;\n    int i = 0;\n    while (i < len) {\n        if (S[i] ==\
    \ ' ') {\n            int end = i;\n            string word = S[start..end];\n\
    \            if (word == \"I\") {\n                boredoms++;\n            }\n\
    \            i++;\n            start = i;\n        } else if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            int end = i;\n            string word\
    \ = S[start..end];\n            if (word == \"I\") {\n                boredoms++;\n\
    \            }\n            i++;\n            start = i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n   \
    \ alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpajni19a_.d(19): Error: cannot implicitly convert expression `S.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpajni19a_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    for (long i = 0; i < S.length;\
    \ i++)\n    {\n        if (S[i] == 'I')\n        {\n            while (i < S.length)\n\
    \            {\n                if (S[i] == '.' || S[i] == '?' || S[i] == '!')\n\
    \                {\n                    bored++;\n                    break;\n\
    \                }\n                i++;\n            }\n        }\n    }\n  \
    \  return bored;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw6b421m5.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmpw6b421m5.__unittest_L35_C1() [0x427b3f]

    ??:? void tmpw6b421m5.__modtest() [0x427bfc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc17]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaaa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc3d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbc9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa81]

    ??:? runModuleUnitTests [0x42b9ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428340]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] delim = \".\",\
    \ \"?\", \"!\";\n    string[] parts = split(S, delim);\n    foreach(string part;\
    \ parts) {\n        if(part.length > 0 && part[0] == 'I')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_4p1wi9n.d(18): Error: no identifier for declarator `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_4p1wi9n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return count(split(S, \"!?.\"), (x) { return\
    \ x[0..1] == \"I \"; });\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3cklnqnt.d(17): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3cklnqnt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n  long boredoms = 0;\n  int length = S.length;\n\
    \  int pos = 0;\n  int prev_pos = 0;\n  while(pos < length) {\n    if(S[pos] ==\
    \ '.' || S[pos] == '?' || S[pos] == '!') {\n      string sentence = S[prev_pos..pos];\n\
    \      if(sentence.startsWith(\"I\")) {\n        boredoms++;\n      }\n      prev_pos\
    \ = pos + 1;\n    }\n    pos++;\n  }\n  return boredoms;\n}\n/*\n    The function\
    \ below only works with 32-bit bitstrings \n*/\nlong bitCount(long x) {\n  const\
    \ ulong M1 = 0x5555555555555555L; //01010101010101010101010101010101\n  const\
    \ ulong M2 = 0x3333333333333333L; //00110011001100110011001100110011\n  const\
    \ ulong M4 = 0x0f0f0f0f0f0f0f0fL; //00001111000011110000111100001111\n  const\
    \ ulong M8 = 0x00ff00ff00ff00ffL; //00000000111111110000000011111111\n  const\
    \ ulong M16 = 0x0000ffff0000ffffL; //00000000000000001111111111111111\n  const\
    \ ulong HFF = 0xffffffffffffffffL; //0000000000000000000000000000000011111111111111111111111111111111\n\
    \  const ulong H01 = 0x0101010101010101L; //0000000000000000000000000000000000000000000000000000000000000001\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphdy6dxyw.d(44): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphdy6dxyw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] words = S.split(\"[.!?]\");\n    long\
    \ count = 0;\n    foreach(string word; words)\n    {\n        if(word.startsWith(\"\
    I\"))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9pgptqzn.d(17): Error: no property `split` for type `string`

    /tmp/tmp9pgptqzn.d(21): Error: no property `startsWith` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9pgptqzn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    bool bored = false;\n\
    \    string[] boring_phrases = split(S, \".\");\n    foreach(string phrase; boring_phrases)\
    \ {\n        if(phrase.startsWith(\"I\")) {\n            boredoms++;\n       \
    \ }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpouu0npy5.d(19): Error: undefined identifier `split`

    /tmp/tmpouu0npy5.d(21): Error: no property `startsWith` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpouu0npy5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] words = split(S, \".\");\n    long count\
    \ = 0;\n    for (int i = 0; i < words.length; i++)\n    {\n        words[i] =\
    \ trim(words[i]);\n        words[i] = toLowerCase(words[i]);\n        string[]\
    \ words_ = split(words[i], \" \");\n        if (words_[0] == \"i\")\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6jdf29xe.d(17): Error: undefined identifier `split`

    /tmp/tmp6jdf29xe.d(21): Error: undefined identifier `trim`, did you mean function
    `fdim`?

    /tmp/tmp6jdf29xe.d(22): Error: undefined identifier `toLowerCase`

    /tmp/tmp6jdf29xe.d(23): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6jdf29xe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    auto words = split(S,\
    \ \" .!?\", true);\n    for (auto it = words.begin(); it != words.end(); it++)\n\
    \    {\n        if (*it == \"I\")\n        {\n            boredoms++;\n      \
    \  }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptdctr19t.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdctr19t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long i;\n    long count = 0;\n    foreach(i,\
    \ s; split(S, \".\"))\n    {\n        auto x = split(s, \" \");\n        if(x[0]\
    \ == \"I\")\n            count++;\n    }\n    return count;\n}\n/*\n    Given\
    \ a string, return the sum of its digits.\n   \n    >>> digit_sum(\"aaa\")\n \
    \   0L\n    >>> digit_sum(\"aaa111\")\n    3L\n    >>> digit_sum(\"123abc\")\n\
    \    6L\n*/\nlong digit_sum(string s)\n{\n    long i;\n    long sum = 0;\n   \
    \ foreach(i, c; s)\n    {\n        if(c >= '0' && c <= '9')\n            sum +=\
    \ c - '0';\n    }\n    return sum;\n}\n/*\n    Given a string, return a list of\
    \ all the palindromes in the string.\n    A palindrome is a sequence of letters\
    \ or numbers that reads the same\n    backwards as forwards.\n   \n    >>> palindromes(\"\
    abcba\")\n    [\"abcba\"]\n    >>> palindromes(\"abcba1\")\n    [\"abcba\", \"\
    1\"]\n    >>> palindromes(\"12321\")\n    [\"12321\"]\n    >>> palindromes(\"\
    abba\")\n    [\"abba\"]\n    >>> palindromes(\"\")\n    []\n*/\nauto palindromes(string\
    \ s)\n{\n    long i;\n    auto result = [];\n    // For each i in range 0 to len(s)\n\
    \    foreach(i; 0 .. s.length)\n    {\n        // For each j in range i to len(s)\n\
    \        foreach(j; i .. s.length)\n        {\n            // Split the string\
    \ into two parts.\n            // The first part is the substring s[i..j]\n  \
    \          // The second part is the substring s[j..i]\n            auto [first,\
    \ second] = [s[i .. j], s[j .. i]];\n            // Check if the two parts are\
    \ the same\n            if(first == second)\n                // Push the substring\
    \ first into the list result\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5_0mt64i.d(77): Error: basic type expected, not `[`

    /tmp/tmp5_0mt64i.d(77): Error: found `,` when expecting `]`

    /tmp/tmp5_0mt64i.d(77): Error: semicolon expected, not `]`

    /tmp/tmp5_0mt64i.d(77): Error: found `]` instead of statement

    /tmp/tmp5_0mt64i.d(81): Error: found `unittest` instead of statement

    /tmp/tmp5_0mt64i.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp5_0mt64i.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5_0mt64i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boring_count = 0;\n    string sentence;\n\
    \    auto words = split(S, '.', '?', '!');\n    foreach(word; words)\n    {\n\
    \        sentence = strip(word);\n        boring_count += sentence.startsWith(\"\
    I\");\n    }\n    return boring_count;\n}\nunittest\n{\n    alias candidate =\
    \ is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvzk8_6or.d(19): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvzk8_6or.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long c = 0;\n    auto r = split(S, \"!?.\");\n\
    \    foreach(string s; r) {\n        auto u = split(s, \" \");\n        foreach(string\
    \ t; u) {\n            if(t == \"I\") {\n                c++;\n              \
    \  break;\n            }\n        }\n    }\n    return c;\n}\nunittest\n{\n  \
    \  alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0vr4ycp0.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0vr4ycp0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long i;\n    string s;\n    long count = 0;\n\
    \    auto words = split(S, \" .?!;\");\n    foreach(element; words)\n    {\n \
    \       s = toLower(element);\n        if(s == \"i\")\n        {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa3pjf5ls.d(20): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa3pjf5ls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long ret = 0;\n    string[] sentences = split(strip(S),\
    \ \".[?!]\");\n    ret = sentences.filter!(s => s.startsWith(\"I\")).length;\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9sqozdux.d(18): Error: undefined identifier `split`

    /tmp/tmp9sqozdux.d(19): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9sqozdux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto sentences = split(S, \".\");\n    long boredoms\
    \ = 0;\n    foreach(i, sentence; sentences)\n    {\n        if(sentence.find(\"\
    I \") == 0)\n            boredoms++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4oi102jr.d(17): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4oi102jr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto boredoms = filter!( (s) => startsWith(s,\
    \ \"I\") )\n                    (split(split(split(S, '.'), '?'), '!'));\n   \
    \ return boredoms.length;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp193nqfmy.d(17): Error: template instance `filter!((s) => startsWith(s,
    "I"))` template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp193nqfmy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n  bool bored = false;\n  long boredoms = 0;\n  int\
    \ i = 0;\n  while (i < S.length)\n  {\n    if (S[i] == ' ') \n    {\n      i++;\n\
    \      continue;\n    }\n    if (S[i] == 'I')\n    {\n      i++;\n      while\
    \ (i < S.length && S[i] != '.' && S[i] != '?' && S[i] != '!')\n      {\n     \
    \   i++;\n      }\n      boredoms++;\n    }\n    i++;\n  }\n  return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmwrw9k4e.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpmwrw9k4e.__unittest_L40_C1() [0x427b7f]

    ??:? void tmpmwrw9k4e.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    size_t pos = 0;\n    long boredoms = 0;\n   \
    \ while ((pos = S.find('.', pos)) != string.npos) {\n        auto split = S.substr(0,\
    \ pos).split(' ');\n        if (split.length != 0 && split[$-1] == \"I\") {\n\
    \            boredoms++;\n        }\n        S = S.substr(pos + 1);\n        pos\
    \ = 0;\n    }\n    auto split = S.split(' ');\n    if (split.length != 0 && split[$-1]\
    \ == \"I\") {\n        boredoms++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplqzd6mgi.d(19): Error: no property `find` for type `string`

    /tmp/tmplqzd6mgi.d(19): Error: no property `npos` for type `string`

    /tmp/tmplqzd6mgi.d(20): Error: no property `substr` for type `string`

    /tmp/tmplqzd6mgi.d(24): Error: no property `substr` for type `string`

    /tmp/tmplqzd6mgi.d(27): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplqzd6mgi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] s = split(S,\".\");\n    int boredoms\
    \ = 0;\n    foreach(string ss; s)\n    {\n        if(strip(ss,\" \\t\\r\\n\")[0..1]\
    \ == \"I \")\n            boredoms++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbfrwwqhx.d(17): Error: undefined identifier `split`

    /tmp/tmpbfrwwqhx.d(21): Error: undefined identifier `strip`, did you mean alias
    `string`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbfrwwqhx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    char[] str = toStringz(S);\n\
    \    long i = 0;\n    long j = 0;\n    char delimiter = ' ';\n    // if the start\
    \ of the string is an 'I' then increment the boredoms count\n    if (str[0] ==\
    \ 'I') {\n        boredoms++;\n    }\n    while (j < str.length) {\n        while\
    \ (j < str.length && !(str[j] == '.' || str[j] == '?' || str[j] == '!')) {\n \
    \           j++;\n        }\n        if (j < str.length) {\n            delimiter\
    \ = str[j];\n            j++;\n        }\n        if (j < str.length && str[j]\
    \ == ' ') {\n            j++;\n        }\n        if (j < str.length && str[j]\
    \ == 'I') {\n            boredoms++;\n        }\n        if (j < str.length &&\
    \ str[j] == delimiter) {\n            j++;\n        }\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfzcukawq.d(18): Error: undefined identifier `toStringz`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfzcukawq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    ulong sentenceStart =\
    \ 0;\n    bool sentenceStarted = false;\n    string sentence = \"\";\n    foreach(c;\
    \ S)\n    {\n        // If we hit a delimiter (and we're in a sentence), end the\
    \ sentence.\n        if(sentenceStarted && c == '.' || c == '?' || c == '!')\n\
    \        {\n            sentence = S[sentenceStart..$];\n            if(startsWith(sentence,\
    \ \"I\"))\n            {\n                boredoms++;\n            }\n       \
    \     sentenceStarted = false;\n        }\n        else if(!sentenceStarted &&\
    \ c == '.' || c == '?' || c == '!')\n        {\n            sentenceStarted =\
    \ true;\n            sentenceStart = $;\n        }\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnv7_l7q2.d(36): Error: `$` is valid only inside [] of index or
    slice

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnv7_l7q2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163955
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long counter = 0;\n    auto s = S.split(' ');\n\
    \    foreach(t; s)\n    {\n        if(t.startsWith(\"I\"))\n            counter++;\n\
    \    }\n    return counter;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp86mo_4fb.d(18): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp86mo_4fb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long total = 0;\n    string[] words = split(S,\
    \ \"!.? \");\n    foreach(word; words)\n    {\n        if(word == \"I\")\n   \
    \         total++;\n    }\n    return total;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbmj1uhsj.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbmj1uhsj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long i = 0;\n    long\
    \ length = S.length;\n    string bored = \"I\";\n    long bored_length = bored.length;\n\
    \    while (i < length)\n    {\n        if (S[i] == 'I')\n        {\n        \
    \    auto j = 0;\n            while (j < bored_length)\n            {\n      \
    \          if (S[i + j] != bored[j])\n                {\n                    break;\n\
    \                }\n                j++;\n            }\n            if (j ==\
    \ bored_length)\n            {\n                while ((i + j) < length)\n   \
    \             {\n                    if (S[i + j] == '.' || S[i + j] == '?' ||\
    \ S[i + j] == '!')\n                    {\n                        boredoms++;\n\
    \                        break;\n                    }\n                    j++;\n\
    \                }\n            }\n        }\n        i++;\n    }\n    return\
    \ boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj1stn1m9.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmpj1stn1m9.__unittest_L52_C1() [0x427be3]

    ??:? void tmpj1stn1m9.__modtest() [0x427ca0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bcb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab4a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcdd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43018c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc69]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab21]

    ??:? runModuleUnitTests [0x42ba8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283e0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long res = 0;\n    S = S.upper;\n    foreach(line;\
    \ S.split('.', '?', '!'))\n    {\n        if(line.trim.startsWith(\"I\"))\n  \
    \          res++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr0rrxk28.d(18): Error: no property `upper` for type `string`

    /tmp/tmpr0rrxk28.d(19): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr0rrxk28.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    foreach(string sentence;\
    \ split(S, '.', '!', '?')) \n    {\n        long bored = 0;\n        foreach(string\
    \ word; split(sentence, ' ')) \n        {\n            if(word == \"I\") \n  \
    \          {\n                bored = 1;\n                break;\n           \
    \ }\n        }\n        boredoms += bored;\n    }\n    return boredoms;\n}\n/*\n\
    \    You'll be given a list of integers, and your task is to count the number\n\
    \    of even numbers in the list.\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpck7y34cg.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpck7y34cg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] Sent = split(S, ['. ', '? ', '! ']);\n\
    \    long count = 0;\n    foreach(string Sentence; Sent)\n    {\n        if(Sentence.startsWith(\"\
    I\"))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphtzeu7sc.d(17): Error: unterminated character constant

    /tmp/tmphtzeu7sc.d(17): Error: unterminated character constant

    /tmp/tmphtzeu7sc.d(17): Error: found `63U` when expecting `,`

    /tmp/tmphtzeu7sc.d(17): Error: unterminated character constant

    /tmp/tmphtzeu7sc.d(17): Error: unterminated character constant

    /tmp/tmphtzeu7sc.d(17): Error: found `63U` when expecting `,`

    /tmp/tmphtzeu7sc.d(17): Error: unterminated character constant

    /tmp/tmphtzeu7sc.d(17): Error: unterminated character constant

    /tmp/tmphtzeu7sc.d(17): Error: found `63U` when expecting `,`

    /tmp/tmphtzeu7sc.d(17): Error: expression expected, not `)`

    /tmp/tmphtzeu7sc.d(17): Error: found `;` when expecting `,`

    /tmp/tmphtzeu7sc.d(18): Error: found `count` when expecting `.` following long

    /tmp/tmphtzeu7sc.d(18): Error: found `=` when expecting identifier following `long`.

    /tmp/tmphtzeu7sc.d(18): Error: found `0` when expecting `,`

    /tmp/tmphtzeu7sc.d(18): Error: expression expected, not `;`

    /tmp/tmphtzeu7sc.d(19): Error: found `foreach` when expe'
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    string[] sentences = S.split(\"\
    [.?!]\");\n    foreach(sentence; sentences)\n    {\n        if(sentence.strip.length\
    \ > 0)\n        {\n            if(sentence.strip[0] == 'I')\n            {\n \
    \               count++;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n    Given a time in 12-hour AM/PM format, convert it to military (24-hour)\
    \ time.\n    Note: Midnight is 12:00:00AM on a 12-hour clock, and 00:00:00 on\
    \ a 24-hour clock.\n    Noon is 12:00:00PM on a 12-hour clock, and 12:00:00 on\
    \ a 24-hour clock.\n   \n    For example:\n    >>> time_conversion(\"07:05:45PM\"\
    )\n    \"19:05:45\"\n    >>> time_conversion(\"07:05:45AM\")\n    \"07:05:45\"\
    \n    >>> time_conversion(\"12:45:54PM\")\n    \"12:45:54\"\n*/\nstring time_conversion(string\
    \ S)\n{\n    if(S.strip.length != 10)\n    {\n        return \"\";\n    }\n  \
    \  string hour = S[0..1];\n    string minutes = S[3..4];\n    string seconds =\
    \ S[6..7];\n    string timePart = S[8..9];\n    int hourValue = std.stod(hour);\n\
    \    if(timePart == \"PM\")\n    {\n        if(hourValue != 12)\n        {\n \
    \           hourValue += 12;\n        }\n    }\n    else if(timePart == \"AM\"\
    )\n    {\n        if(hourValue == 12)\n        {\n            hourValue = 0;\n\
    \        }\n    }\n    else\n    {\n        return \"\";\n    }\n    hour = std.to!string(hourValue);\n\
    \    if(hour.length == 1)\n    {\n        hour = \"0\" ~ hour;\n    }\n    return\
    \ hour ~ \":\" ~ minutes ~ \":\" ~ seconds;\n}\n/*\n    You are given a date.\
    \ Your\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ob3r5vv.d(80): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ob3r5vv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    auto sentences = split(S,\
    \ '.', '!', '?');\n    foreach(word; sentences)\n    {\n        if(word.length\
    \ > 0 && word[0] == 'I')\n            boredoms++;\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1qztnh31.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1qztnh31.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return count(split(S, \"?\"));\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe3un015a.d(17): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe3un015a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string *sentences = split(S, \".!?\");\n    long\
    \ counter = 0;\n    foreach(string s; sentences)\n    {\n        if(s.length >\
    \ 0 && s[0] == 'I')\n            counter++;\n    }\n    return counter;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdh5rxcy3.d(17): Error: undefined identifier `split`

    /tmp/tmpdh5rxcy3.d(19): Error: invalid `foreach` aggregate `sentences`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdh5rxcy3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, ['.', '?', '!']);\n    foreach(string sentence; sentences)\n    {\n\
    \        string[] words = split(sentence);\n        if(words.length > 0 && words[0]\
    \ == \"I\")\n            boredoms++;\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiflohl7e.d(18): Error: undefined identifier `split`

    /tmp/tmpiflohl7e.d(21): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiflohl7e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int i;\n    long boredoms = 0;\n    string[]\
    \ words = split(S, ' ');\n    for (i = 0; i < words.length; i++)\n    {\n    \
    \    if (words[i] == \"I\")\n        {\n            boredoms++;\n        }\n \
    \   }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0k1ude6y.d(19): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0k1ude6y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    long i = 0;\n    foreach(c;\
    \ S) {\n        if(c == '.' || c == '?' || c == '!') {\n            if(S[i-1]\
    \ == 'I') {\n                bored++;\n            }\n        }\n        i++;\n\
    \    }\n    return bored;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg8346200.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e35]

    ??:? void tmpg8346200.__unittest_L29_C1() [0x427b22]

    ??:? void tmpg8346200.__modtest() [0x427bb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbcf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa62]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb81]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa39]

    ??:? runModuleUnitTests [0x42b9a5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    size_t len = S.length;\n    long count = 0;\n\
    \    bool find = false;\n    for (size_t i = 0; i < len; i++) {\n        if (S[i]\
    \ == 'I') {\n            find = true;\n        }\n        if (find) {\n      \
    \      if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n                count++;\n\
    \                find = false;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3urjjh31.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmp3urjjh31.__unittest_L33_C1() [0x427b43]

    ??:? void tmp3urjjh31.__modtest() [0x427c00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc17]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaaa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc3d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbc9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa81]

    ??:? runModuleUnitTests [0x42b9ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428340]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    size_t offset = 0;\n   \
    \ string token = \"\";\n    while (offset != -1) {\n        offset = S.find(\"\
    I\", offset);\n        if (offset != -1) {\n            token = S.substr(offset,\
    \ S.find_first_of(\".?!\", offset + 1) - offset);\n            if (token.find(\"\
    I\") == 0) {\n                count++;\n            }\n            offset++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyv_cely8.d(21): Error: no property `find` for type `string`

    /tmp/tmpyv_cely8.d(23): Error: no property `substr` for type `string`

    /tmp/tmpyv_cely8.d(24): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyv_cely8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long long num = 0;\n    while (size_t i = S.find(\"\
    I\", 0))\n    {\n        if (i == -1)\n            break;\n        if (i == 0\
    \ || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!')\n            num++;\n\
    \        i++;\n    }\n    return num;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp21q233hz.d(17): Error: use `long` for a 64 bit integer instead
    of `long long`

    /tmp/tmp21q233hz.d(18): Error: found `i` when expecting `)`

    /tmp/tmp21q233hz.d(18): Error: found `=` instead of statement

    /tmp/tmp21q233hz.d(26): Error: declaration expected, not `return`

    /tmp/tmp21q233hz.d(27): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp21q233hz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{ \n    auto words = S.split(\" \");\n    long boredoms\
    \ = 0;\n    long counter = 0;\n    foreach(w; words)\n    {\n        if(w == \"\
    I\")\n        {\n            counter++;\n        }\n        else if(w == \".\"\
    )\n        {\n            boredoms += counter;\n            counter = 0;\n   \
    \     }\n        else if(w == \"?\")\n        {\n            boredoms += counter;\n\
    \            counter = 0;\n        }\n        else if(w == \"!\")\n        {\n\
    \            boredoms += counter;\n            counter = 0;\n        }\n    }\n\
    \    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n   \
    \ assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd0n72kwl.d(17): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd0n72kwl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long num;\n    int is_bored;\n    //Split string\
    \ and store as an array\n    string[] words = S.split(\" \");\n    string[] words_copy\
    \ = words.dup;\n    int word_i = 0;\n    foreach(string word; words)\n    {\n\
    \        //Check the first letter is \"I\"\n        if(word[0] == 'I')\n     \
    \   {\n            //Make sure it is the first word in a sentence\n          \
    \  if(word_i > 0)\n            {\n                //If the previous word ended\
    \ in a \".\" \"?\" or \"!\" then it is a boredom\n                if(words_copy[word_i-1].back\
    \ == '.' || words_copy[word_i-1].back == '?' || words_copy[word_i-1].back == '!')\n\
    \                {\n                    is_bored = 1;\n                } else\n\
    \                {\n                    is_bored = 0;\n                }\n   \
    \         } else\n            {\n                is_bored = 1;\n            }\n\
    \            num += is_bored;\n        }\n        word_i++;\n    }\n    return\
    \ num;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyo4tqhen.d(20): Error: no property `split` for type `string`

    /tmp/tmpyo4tqhen.d(32): Error: no property `back` for type `string`

    /tmp/tmpyo4tqhen.d(32): Error: no property `back` for type `string`

    /tmp/tmpyo4tqhen.d(32): Error: no property `back` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyo4tqhen.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long counter = 0;\n    long len = S.length;\n\
    \    for (int i = 0; i < len; i++)\n    {\n        string word = \"\";\n     \
    \   while(S[i] != '.' && S[i] != '?' && S[i] != '!')\n        {\n            word\
    \ = word + S[i];\n            i++;\n        }\n        if (word == \"I\") counter++;\n\
    \    }\n    return counter;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprarh6jt9.d(24): Error: incompatible types for `(word) + (S[cast(ulong)i])`:
    `string` and `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprarh6jt9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto words = split(S);\n    long bored = 0;\n\
    \    for (auto word : words)\n    {\n        if (word == \"I\")\n            bored++;\n\
    \    }\n    return bored;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw31o9gmu.d(19): Error: no identifier for declarator `word`

    /tmp/tmpw31o9gmu.d(19): Error: expression expected, not `:`

    /tmp/tmpw31o9gmu.d(19): Error: found `words` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw31o9gmu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string[] tokens = split(S,\
    \ \".\");\n    foreach(token; tokens)\n    {\n        if(token.length)\n     \
    \   {\n            token = strip(token);\n            if(token[0] == 'I')\n  \
    \              boredoms++;\n        }\n    }\n    return boredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyd4haehb.d(18): Error: undefined identifier `split`

    /tmp/tmpyd4haehb.d(23): Error: undefined identifier `strip`, did you mean alias
    `string`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyd4haehb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] words = std.regex.split(S, std.regex.pattern(\"\
    [.?!]\"));\n    long boredoms = 0;\n    foreach(string word; words)\n    {\n \
    \       if(word.length > 0 && word[0] == 'I')\n            boredoms++;\n    }\n\
    \    return boredoms;\n}\n/*\n    Given a temperature in fahrenheit, return the\
    \ temperature in celsius.\n    For example:\n    >>> to_celsius(84)\n    29L\n\
    \    >>> to_celsius(80)\n    27L\n*/\nlong to_celsius(long fahrenheit) \n{\n \
    \   return long((fahrenheit - 32.0) * (5.0 / 9.0));\n}\n/*\n    Given a temperature\
    \ in celsius, return the temperature in fahrenheit.\n    For example:\n    >>>\
    \ to_fahrenheit(29)\n    84L\n    >>> to_fahrenheit(27)\n    80L\n*/\nlong to_fahrenheit(long\
    \ celsius) \n{\n    return long((celsius * (9.0 / 5.0)) + 32.0);\n}\n/*\n    Given\
    \ a string of words, return the string with the longest word.\n    If more than\
    \ one word is the longest, return the first.\n    For example:\n    >>> longest_word(\"\
    The rain in Spain falls mainly on the plain\")\n    \"mainly\"\n    >>> longest_word(\"\
    It is not the strongest of the species that survives, nor the most intelligent\
    \ that survives. It is the one that is the most adaptable to change.\")\n    \"\
    adaptable\"\n*/\nstring longest_word(string sentence) \n{\n    string[] words\
    \ = std.regex.split(sentence, std.regex.pattern(\" \"));\n    long longest_length\
    \ = 0;\n    foreach(string word; words)\n    {\n        if(word.length > longest_length)\n\
    \            longest_length = word.length;\n    }\n    foreach(string word; words)\n\
    \    {\n        if(word.length == longest_length)\n            return word;\n\
    \    }\n    return \"\";\n}\n/*\n\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsp3vmiwk.d(75): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsp3vmiwk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto sentences = S.split(\".\");\n    sentences\
    \ ~= \".\";\n    long boredoms = 0;\n    string sentence = \"\";\n    foreach(sentence;\
    \ sentences)\n    {\n        if(sentence.split(\" \")[0] == \"I\")\n         \
    \   boredoms++;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg9wxso00.d(17): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9wxso00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    /*\n    string[] s;\n    s = split(S, \".\");\n\
    \    int t = 0;\n    foreach(string in; s)\n    {\n        string s2 = replace(in,\
    \ \",\", \"\");\n        string[] s3;\n        s3 = split(s2, \" \");\n      \
    \  if(s3[0] == \"I\")\n            t++;\n    }\n    return t;\n    */\n    long\
    \ res;\n    string[] s;\n    s = split(S, \".\");\n    //string[] s2;\n    string\
    \ s2;\n    foreach(string s1; s)\n    {\n        s2 = replace(s1, \",\", \"\"\
    );\n        res += s2.count(\"I\") == 1 ? 1 : 0;\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_432t574.d(33): Error: undefined identifier `split`

    /tmp/tmp_432t574.d(38): Error: undefined identifier `replace`

    /tmp/tmp_432t574.d(39): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_432t574.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long i;\n    long count = 0;\n    long temp =\
    \ 0;\n    foreach(c; S)\n    {\n        if (c == '.' || c == '?' || c == '!')\n\
    \        {\n            count += temp;\n            temp = 0;\n        }\n   \
    \     else if (c == 'I')\n        {\n            temp = 1;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsysbwcmc.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e1d]

    ??:? void tmpsysbwcmc.__unittest_L34_C1() [0x427ae3]

    ??:? void tmpsysbwcmc.__modtest() [0x427ba0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430018]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ad]

    ??:? runModuleUnitTests [0x42b919]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42826c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long total = 0;\n    if(S.length > 0)\n    {\n\
    \        auto words = split(S, [](char c) {return c == '.' || c == '?' || c ==\
    \ '!';});\n        foreach(auto word; words)\n        {\n            if(word.length\
    \ > 0)\n            {\n                if(word[0] == 'I')\n                {\n\
    \                    total++;\n                }\n            }\n        }\n \
    \   }\n    return total;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjxv9vo35.d(20): Error: found `c` when expecting `.` following char

    /tmp/tmpjxv9vo35.d(20): Error: found `)` when expecting identifier following `char`.

    /tmp/tmpjxv9vo35.d(20): Error: found `{` when expecting `,`

    /tmp/tmpjxv9vo35.d(20): Error: expression expected, not `return`

    /tmp/tmpjxv9vo35.d(20): Error: found `c` when expecting `,`

    /tmp/tmpjxv9vo35.d(20): Error: expression expected, not `==`

    /tmp/tmpjxv9vo35.d(20): Error: found `46U` when expecting `,`

    /tmp/tmpjxv9vo35.d(20): Error: expression expected, not `||`

    /tmp/tmpjxv9vo35.d(20): Error: found `c` when expecting `,`

    /tmp/tmpjxv9vo35.d(20): Error: expression expected, not `==`

    /tmp/tmpjxv9vo35.d(20): Error: found `63U` when expecting `,`

    /tmp/tmpjxv9vo35.d(20): Error: expression expected, not `||`

    /tmp/tmpjxv9vo35.d(20): Error: found `c` when expecting `,`

    /tmp/tmpjxv9vo35.d(20): Error: expression expected, not `==`

    /tmp/tmpjxv9vo35.d(20): Error: found `33U` when expecting `,`

    /tmp/tmpjxv9vo35.d(20): Error: expression expected, not `;`

    /tmp/tmp'
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    long len = S.length;\n \
    \   string temp = \"\";\n    long i = 0;\n    while(i < len)\n    {\n        if(S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!')\n        {\n            temp += S[i];\n\
    \        }\n        else if(S[i] == '.' || S[i] == '?' || S[i] == '!')\n     \
    \   {\n            if(temp.compare(\"I\") == 0)\n            {\n             \
    \   count++;\n            }\n            temp = \"\";\n        }\n        i++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptc6dx6sb.d(25): Error: slice `temp` is not mutable

    /tmp/tmptc6dx6sb.d(29): Error: no property `compare` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptc6dx6sb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto words = split(S, \" .!?\");\n    long boredoms\
    \ = 0;\n    foreach(word; words) {\n        if(word == \"I\") boredoms++;\n  \
    \  }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2wm6094t.d(17): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2wm6094t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long start = 0;\n   \
    \ long end = 0;\n    long is_bored = 0;\n    long len = S.length;\n    for (long\
    \ i = 0; i < len; i++)\n    {\n        if (S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!')\n        {\n            start = i + 1;\n            if (is_bored ==\
    \ 1)\n            {\n                boredoms++;\n            }\n            is_bored\
    \ = 0;\n        }\n        else if (S[i] == ' ' && S[i + 1] == 'I')\n        {\n\
    \            is_bored = 1;\n        }\n    }\n    return boredoms;\n}\n/*\n  \
    \  You are given an array of strings, return all groups of strings that are\n\
    \    anagrams.\n    \n    >>> anagrams([\"\",\"b\",\"\"])\n    [[]]\n    >>> anagrams([\"\
    ab\",\"ba\",\"cd\",\"dc\",\"e\"])\n    [[ab, ba], [cd, dc]]\n    >>> anagrams([\"\
    ab\",\"ba\",\"cd\",\"dc\",\"e\",\"a\",\"d\"])\n    [[ab, ba], [cd, dc], [e], [a],\
    \ [d]]\n*/\nstring[] anagrams(string[] words) \n{\n    sort(words);\n    dstring[string]\
    \ groups;\n    foreach (i, string s; words)\n    {\n        string sorted_s =\
    \ sort_string(s);\n        if (sorted_s.length > 0)\n        {\n            groups[sorted_s]\
    \ ~= s;\n        }\n    }\n    string[][] result;\n    foreach (group; groups)\n\
    \    {\n        result ~= group;\n    }\n    return result;\n}\n/*\n    Given\
    \ a string, determine if it is a palindrome, considering only alphanumeric\n \
    \   characters and ignoring cases.\n    \n    >>> is_palindrome(\"A man, a plan,\
    \ a canal: Panama\")\n    true\n    >>> is_palindrome(\"race a car\")\n    false\n\
    */\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptm1mlrdb.d(53): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmptm1mlrdb.d(57): Error: undefined identifier `sort_string`

    /tmp/tmptm1mlrdb.d(60): Error: cannot append type `string` to type `dstring`

    /tmp/tmptm1mlrdb.d(66): Error: cannot append type `dstring` to type `string[][]`

    /tmp/tmptm1mlrdb.d(68): Error: cannot implicitly convert expression `result` of
    type `string[][]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptm1mlrdb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long n = 0;\n    for (size_t i = 0; i < S.length;\
    \ i++)\n    {\n        if (S[i] == 'I')\n        {\n            if (i + 1 < S.length)\n\
    \            {\n                if (S[i + 1] == ' ')\n                {\n    \
    \                if (i + 2 < S.length)\n                    {\n              \
    \          if (i + 3 < S.length)\n                        {\n                \
    \            if (S[i + 3] == '.' || S[i + 3] == '?' || S[i + 3] == '!')\n    \
    \                        {\n                                n++;\n           \
    \                 }\n                        }\n                        else\n\
    \                        {\n                            if (S[i + 2] == '.' ||\
    \ S[i + 2] == '?' || S[i + 2] == '!')\n                            {\n       \
    \                         n++;\n                            }\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return n;\n}\n//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgtpjkqnz.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f5d]

    ??:? void tmpgtpjkqnz.__unittest_L50_C1() [0x427c4a]

    ??:? void tmpgtpjkqnz.__modtest() [0x427cdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bcf7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab8a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fca9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab61]

    ??:? runModuleUnitTests [0x42bacd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428420]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    if (S.empty)\n      \
    \  return boredoms;\n    auto strs = split(S, \"! \");\n    foreach (str; strs)\n\
    \    {\n        auto subStrs = split(str, \". \");\n        foreach (subStr; subStrs)\n\
    \        {\n            auto words = split(subStr, \" \");\n            if (words[0]\
    \ == \"I\")\n                boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpexotg59g.d(18): Error: no property `empty` for type `string`

    /tmp/tmpexotg59g.d(20): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpexotg59g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredom = 0;\n    string[] sentences = S.split(\"\
    [\\\\.\\\\?\\\\!]\");\n    foreach(string sentence; sentences) {\n        if(sentence.length\
    \ > 0 && sentence[0..1] == \"I \")\n            boredom++;\n    }\n    return\
    \ boredom;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz_djj08m.d(18): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_djj08m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long r = 0;\n    auto words = split(S, \" \"\
    );\n    foreach(auto w; words)\n    {\n        if (w == \"I\")\n            r++;\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n   \
    \ assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm8v935f5.d(19): Error: basic type expected, not `auto`

    /tmp/tmpm8v935f5.d(19): Error: no identifier for declarator `_error_`

    /tmp/tmpm8v935f5.d(19): Error: found `auto` when expecting `;`

    /tmp/tmpm8v935f5.d(19): Error: found `;` when expecting `)`

    /tmp/tmpm8v935f5.d(19): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm8v935f5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bor = 0;\n    long dot = 0;\n    long q\
    \ = 0;\n    long ex = 0;\n    long i = 0;\n    long si = S.length;\n    while\
    \ (i < si)\n    {\n        dot = S.find(\".\", i);\n        q = S.find(\"?\",\
    \ i);\n        ex = S.find(\"!\", i);\n        if (dot < 0 && q < 0 && ex < 0)\n\
    \            break;\n        if (dot < 0)\n            dot = si + 2;\n       \
    \ if (q < 0)\n            q = si + 2;\n        if (ex < 0)\n            ex = si\
    \ + 2;\n        if (dot < q && dot < ex)\n        {\n            if (S.substr(i,\
    \ 3) == \"I am\")\n                bor++;\n            i = dot + 1;\n        }\n\
    \        else if (q < dot && q < ex)\n        {\n            if (S.substr(i, 3)\
    \ == \"I am\")\n                bor++;\n            i = q + 1;\n        }\n  \
    \      else if (ex < dot && ex < q)\n        {\n            if (S.substr(i, 3)\
    \ == \"I am\")\n                bor++;\n            i = ex + 1;\n        }\n \
    \   }\n    return bor;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n  \
    \  assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvfo68jo9.d(25): Error: no property `find` for type `string`

    /tmp/tmpvfo68jo9.d(26): Error: no property `find` for type `string`

    /tmp/tmpvfo68jo9.d(27): Error: no property `find` for type `string`

    /tmp/tmpvfo68jo9.d(38): Error: no property `substr` for type `string`

    /tmp/tmpvfo68jo9.d(44): Error: no property `substr` for type `string`

    /tmp/tmpvfo68jo9.d(50): Error: no property `substr` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvfo68jo9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto a = split(S, \".\");\n    long count = 0;\n\
    \    foreach(sentence; a)\n    {\n        auto b = split(sentence, \" \");\n \
    \       if(b[0] == \"I\")\n            count++;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprlju0y7b.d(17): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprlju0y7b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    long pos = 0;\n    long\
    \ length = S.length;\n    long last_pos = length;\n    while(pos < length)\n \
    \   {\n        long sentence_start = S.findFirst('.', pos);\n        long sentence_end\
    \ = S.findFirst('!', pos);\n        long sentence_excl = S.findFirst('?', pos);\n\
    \        sentence_start = sentence_start == -1 ? last_pos : sentence_start;\n\
    \        sentence_end = sentence_end == -1 ? last_pos : sentence_end;\n      \
    \  sentence_excl = sentence_excl == -1 ? last_pos : sentence_excl;\n        long\
    \ sentence_end_pos = min(sentence_start, sentence_end, sentence_excl);\n     \
    \   if(sentence_end_pos == last_pos)\n        {\n            break;\n        }\n\
    \        pos = sentence_end_pos;\n        ++pos;\n        string sentence = S[sentence_end_pos\
    \ - 1 .. pos];\n        if(sentence.findFirst(\"I\") == 0)\n        {\n      \
    \      ++boredoms;\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n \
    \   alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5j_0xrz0.d(23): Error: no property `findFirst` for type `string`

    /tmp/tmp5j_0xrz0.d(24): Error: no property `findFirst` for type `string`

    /tmp/tmp5j_0xrz0.d(25): Error: no property `findFirst` for type `string`

    /tmp/tmp5j_0xrz0.d(29): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmp5j_0xrz0.d(37): Error: no property `findFirst` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5j_0xrz0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long r = 0;\n    foreach(word; split(S, \" \"\
    ))\n    {\n        if(word == \"I\")\n            r++;\n    }\n    return r;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2pxzxr2n.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2pxzxr2n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string[] words = S.split(\"[!.? ]\");\n    long\
    \ boredoms = 0;\n    for (size_t i = 0; i < words.length; i++) {\n        if (words[i]\
    \ == \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph4twfsea.d(17): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4twfsea.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{ \n    long result = 0;\n    string[] sentences = split(S,\
    \ \"!?.\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0 && sentence[0..1] == \"I \")\n            result++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprrfwk2ga.d(18): Error: undefined identifier `split`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprrfwk2ga.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int n = S.length;\n    long res = 0;\n    int\
    \ i = 0;\n    while (i < n) {\n        if (S[i] == 'I') {\n            res++;\n\
    \            while (i < n && (S[i] != '.' && S[i] != '?' && S[i] != '!'))\n  \
    \              i++;\n        }\n        i++;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprd_hnyhf.d(17): Error: cannot implicitly convert expression `S.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprd_hnyhf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto bored = 0L;\n    auto first = true;\n  \
    \  foreach(w; S.split(\" \")) {\n        if (first) {\n            first = false;\n\
    \            if (w == \"I\") {\n                bored++;\n            }\n    \
    \    } else {\n            switch (w[0]) {\n                case '.':\n      \
    \          case '!':\n                case '?':\n                    first = true;\n\
    \                    break;\n            }\n        }\n    }\n    return bored;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuw9z_iow.d(19): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuw9z_iow.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163956
