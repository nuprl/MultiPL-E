name: HumanEval_15_string_sequence
language: d
prompt: "import std.math;\n/*\n Return a string containing space-delimited numbers\
  \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n  \
  \  >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
  \ n) \n"
tests: "unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
  \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
  \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
completions: ["{\n    string s;\n    if (n>=0)\n        s = \"0\";\n    else\n   \
    \     s = \"-0\";\n    foreach (int i; 1..n+1)\n        s ~= \" \" ~ to!string(i);\n\
    \    return s;\n}\n/*\n Return a list of numbers starting from 0 upto n inclusive.\n\
    \    >>> sequence(0L)\n    [0]\n    >>> sequence(5L)\n    [0, 1, 2, 3, 4, 5]\n\
    \    \n*/\nstring[] sequence(long n) \n{\n    string[] s;\n    if (n>=0)\n   \
    \     s ~= \"0\";\n    else\n        s ~= \"-0\";\n    foreach (int i; 1..n+1)\n\
    \        s ~= to!string(i);\n    return s;\n}", "{\n\t\n\t\n\tstring result;\n\
    \tresult.reserve(1024);\n\t\n\t\n\twhile(n >= 0)\n\t{\n\t\tresult += to!string(n);\n\
    \t\tif(n == 0)\n\t\t\tbreak;\n\t\tresult += \" \";\n\t\t--n;\n\t}\n\t\n\treturn\
    \ result;\n}\n/*", "{\n    string res;\n    long i;\n    for (i = 0; i <= n; i\
    \ += 1)\n    {\n        res ~= cast(string)i;\n        if (i != n)\n         \
    \   res ~= \" \";\n    }\n    return res;\n}\n/*\n    count_number_of_divisors\n\
    \    Count the number of divisors of a positive integer n. The divisors include\
    \ 1 and n.", "{\n    string result = \"\";\n    for (int i = 0; i <= n; i++)\n\
    \    {\n        result += to!string(i) + \" \";\n    }\n    return result;\n}\n\
    /*\n Return n! (n factorial).\n    >>> factorial(1L)\n    1L\n    >>> factorial(5L)\n\
    \    120L\n*/\nlong factorial(long n) \n{\n    if (n <= 1)\n    {\n        return\
    \ 1;\n    }\n    else\n    {\n        return n * factorial(n - 1);\n    }\n}\n\
    /*\n Return a list of n random integers between 0 and n.\n    >>> lst = random_list(4L)\n\
    \    >>> len(lst) == 4\n    True\n    >>> all(0 <= x < 4 for x in lst)\n    True\n\
    */\nlong[] random_list(long n) \n{\n    // TODO: implement this function\n   \
    \ long[] lst = new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        lst[i]\
    \ = uniform(0, n);\n    }\n    return lst;\n}\n/*\n Return a list of n tuples,\
    \ where each tuple is a pair of elements\n of the input list.\n    >>> tpls =\
    \ pair_list([1, 2, 3, 4])\n    >>> len(tpls) == 6\n    True\n    >>> set(tpls)\
    \ == set([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)])\n    True\n*/\ntuple!(long,\
    \ long)[] pair_list(long[] lst) \n{\n    // TODO: implement this function\n  \
    \  tuple!(long, long)[] tpls = new tuple!(long, long)[(lst.length * (lst.length\
    \ - 1)) / 2];\n    int i = 0;\n    foreach (l1; lst)\n    {\n        foreach (l2;\
    \ lst)\n        {\n            if (l1 > l2)\n            {\n                tpls[",
  "{\n    return n == 0 ? \"0\" : string_sequence(n - 1) ~ \" \" ~ n;\n}", "{\n  \
    \  string result = \"\";\n    for (int i = 0; i <= n; i++)\n    {\n        result\
    \ += std.toString(i);\n        if (i < n)\n            result += \" \";\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    long i = 0L;\n   \
    \ while (i <= n) \n    {\n        result ~= i ~ \" \";\n        i++;\n    }\n\
    \    return result;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from n down to 0 inclusive.\n    >>> string_sequence_down(0L)\n   \
    \ \"0\"\n    >>> string_sequence_down(5L)\n    \"5 4 3 2 1 0\"\n    \n*/\nstring\
    \ string_sequence_down(long n) \n{\n    string result = \"\";\n    long i = n;\n\
    \    while (i >= 0L) \n    {\n        result ~= i ~ \" \";\n        i--;\n   \
    \ }\n    return result;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from min up to max inclusive.\n    >>> string_sequence_range(0L, 0L)\n\
    \    \"0\"\n    >>> string_sequence_range(5L, 10L)\n    \"5 6 7 8 9 10\"\n   \
    \ \n*/\nstring string_sequence_range(long min, long max) \n{\n    string result\
    \ = \"\";\n    long i = min;\n    while (i <= max) \n    {\n        result ~=\
    \ i ~ \" \";\n        i++;\n    }\n    return result;\n}\n/*\n Return a string\
    \ containing space-delimited numbers starting from max down to min inclusive.\n\
    \    >>> string_sequence_range_down(0L, 0L)\n    \"0\"\n    >>> string_sequence_range_down(10L,\
    \ 5L)\n    \"10 9 8 7 6 5\"\n    \n*/\nstring string_sequence_range_down(long\
    \ min, long max) \n{\n    string result = \"\";\n    long i = max;\n    while\
    \ (i >= min) \n    {\n        result ~= i ~ \" \";\n        i--;\n    }\n    return\
    \ result;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from n down to 1 inclusive.\n    >>> string_sequence_down_from(0L)\n    \"\"\
    \n    >>> string_sequence_down_from", "{\n    if (n == 0L) return \"0\";\n   \
    \ string s = \"\";\n    for (long i = 0L; i <= n; i++) {\n        s += to!string(i);\n\
    \        if (i != n) s += \" \";\n    }\n    return s;\n}", "{\n    string s =\
    \ \"\";\n    foreach (i; 0L .. n+1L)\n        s ~= (i ~ \" \");\n    return s[0\
    \ .. $-1];\n}", "{\n   string result;\n   foreach (int i; 0 .. n + 1)\n   {\n\
    \      result ~= to!string(i) ~ \" \";\n   }\n   return result;\n}\n/*\nReturn\
    \ a string containing space-delimited numbers starting from n downto 0 inclusive.\n\
    \    >>> string_sequence_backwards(0L)\n    \"0\"\n    >>> string_sequence_backwards(5L)\n\
    \    \"5 4 3 2 1 0\"\n    \n*/\nstring string_sequence_backwards(long n) \n{\n\
    \   string result;\n   foreach (int i; n .. -1)\n   {\n      result ~= to!string(i)\
    \ ~ \" \";\n   }\n   return result;\n}\n/*\nReturn a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence_2(0L)\n \
    \   \"0\"\n    >>> string_sequence_2(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence_2(long n) \n{\n   string result;\n   foreach (int i; 0 .. n\
    \ + 1)\n   {\n      result ~= to!string(i) ~ \" \";\n   }\n   return result;\n\
    }\n/*\nReturn a string containing space-delimited numbers starting from n downto\
    \ 0 inclusive.\n    >>> string_sequence_backwards_2(0L)\n    \"0\"\n    >>> string_sequence_backwards_2(5L)\n\
    \    \"5 4 3 2 1 0\"\n    \n*/\nstring string_sequence_backwards_2(long n) \n\
    {\n   string result;\n   foreach (int i; n .. -1)\n   {\n      result ~= to!string(i)\
    \ ~ \" \";\n   }\n   return result;\n}\n/*\nReturn a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence_3(0L)\n \
    \   \"0\"\n    >>> string_sequence_3(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence_3(long n) \n{", "{\n    string result;\n    foreach (long i;\
    \ 0..n+1)\n    {\n        result ~= to!string(i) ~ \" \";\n    }\n    return result;\n\
    }", "{\n\tstring s = \"\";\n\tfor (long i = 0; i <= n; i++) \n\t{\n\t\ts = s ~\
    \ std.to!string(i) ~ \" \";\n\t}\n\treturn trim(s);\n}\n/*\n Return a string containing\
    \ comma-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"0,1,2,3,4,5\"\n*/\nstring string_sequence_comma(long\
    \ n) \n{\n\tstring s = \"\";\n\tfor (long i = 0; i <= n; i++) \n\t{\n\t\ts = s\
    \ ~ std.to!string(i) ~ \",\";\n\t}\n\treturn trim(s, \"\\'\");\n}\n/*\n Return\
    \ a string containing a range of numbers from start to end inclusive.\n    >>>\
    \ string_sequence(0L, 5L)\n    \"0..5\"\n*/\nstring string_sequence_range(long\
    \ start, long end) \n{\n\treturn to!string(start) ~ \"..\" ~ to!string(end);\n\
    }\n/*\n Return a string containing comma-delimited numbers with range(s) included.\n\
    \    >>> string_sequence_combined(0L, 5L)\n    \"0..5\"\n    >>> string_sequence_combined(0L,\
    \ 7L)\n    \"0..5,6,7\"\n    >>> string_sequence_combined(0L, 6L)\n    \"0..5,6\"\
    \n    >>> string_sequence_combined(0L, 2L)\n    \"0,1,2\"\n    >>> string_sequence_combined(0L,\
    \ 1L)\n    \"0,1\"\n    >>> string_sequence_combined(0L, 0L)\n    \"0\"\n*/\n\
    string string_sequence_combined(long start, long end) \n{\n\tint count = end -\
    \ start;\n\tint rem = count % 5;\n\tif (count == 0) \n\t{\n\t\treturn to!string(start);\n\
    \t}\n\telse if (count == 1) ", "{\n    string result = \"\";\n    long i = 0L;\n\
    \    while (i <= n) \n    {\n        result += to!string(i) + \" \";\n       \
    \ i++;\n    }\n    return result.stripRight();\n}", "{\n    return string_sequence(n,\
    \ \" \");\n}", "{\n  int i = 0;\n  string res = \"\";\n  while (i <= n) {\n  \
    \  res = res ~ to!string(i) ~ \" \";\n    i++;\n  }\n  return res;\n}", "{\n \
    \   assert(n >= 0);\n    string str = format(\"%s\", n);\n    for (long k = 0;\
    \ k < n; k++)\n        str = format(\"%s %s\", str, k);\n    return str;\n}",
  "{\n    auto a = make!string[];\n    for (size_t i = 0; i <= n; i++) \n    {\n \
    \       a ~= to!string(i);\n    }\n    return join(a, \" \");\n}", "{\n\tstring\
    \ r = \"\" + n;\n\tforeach (int i; 0 .. n)\n\t\tr = r ~ \" \" ~ i;\n\treturn r[1\
    \ ..];\n}", "{\n    return format(\"%s\", join(iota(n+1L), \" \"));\n}", "{\n\
    \  string retval;\n  for (long i = 0; i <= n; i++) \n  {\n    retval ~= to!string(i);\n\
    \    if (i < n)\n      retval ~= \" \";\n  }\n  return retval;\n}", "{\n\tstring\
    \ ret;\n\tfor (int i = 0; i <= n; i++) \n\t{\n\t\tret ~= i;\n\t\tif (i != n)\n\
    \t\t\tret ~= \" \";\n\t}\n\treturn ret;\n}\n/*\n Check if a string starts with\
    \ the given prefix, returns true if it does.\n*/", "{\n    int i;\n    string\
    \ result;\n    result = \"\";\n    for (i = 0; i <= n; i++)\n    {\n\tresult +=\
    \ format(\"%d \", i);\n    }\n    return result;\n}", '    return n < 0L ? ""
    : string_sequence(n - 1L) ~ n.stringof ~ " ";', "{\n    string result = \"\";\n\
    \    for (; n >= 0; n--) \n    {\n        result = result ~ to!string(n) ~ \"\
    \ \";\n    }\n    return result;\n}", "{\n    //foreach (immutable long i; 0L\
    \ .. n + 1L)\n    foreach (immutable long i; 0L .. n + 1L)\n    {\n        writeln(i);\n\
    \    }\n    return \"\";\n}\n \n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"\
    0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(int\
    \ n) \n{\n    //foreach (immutable int i; 0 .. n + 1)\n    foreach (immutable\
    \ int i; 0 .. n + 1)\n    {\n        writeln(i);\n    }\n    return \"\";\n}\n\
    \ \n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(short n) \n{\n    //foreach\
    \ (immutable short i; 0 .. n + 1)\n    foreach (immutable short i; 0 .. n + 1)\n\
    \    {\n        writeln(i);\n    }\n    return \"\";\n}\n \n/*\n Return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\n    >>>\
    \ string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\
    \n    \n*/\nstring string_sequence(char n) \n{\n    //foreach (immutable char\
    \ i; 0 .. n + 1)\n    foreach (immutable char i; 0 .. n + 1)\n    {\n        writeln(i);\n\
    \    }\n    return \"\";\n}\n \n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"\
    0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(byte\
    \ n) \n{\n    //foreach (", "{\n   string result;\n   foreach (i; 0 .. n + 1)\
    \ \n   {\n      result ~= std.conv.to!string(i) ~ \" \";\n   }\n   return result;\n\
    }", "{\n    if (n == 0L)\n    {\n        return to!string(0L);\n    }\n    else\n\
    \    {\n        auto result = \"\";\n        foreach (i; 0L .. n + 1L)\n     \
    \   {\n            result ~= to!string(i) ~ \" \";\n        }\n        return\
    \ result;\n    }\n}", "{\n    assert(n >= 0L);\n    if (n == 0L)\n        return\
    \ \"0\";\n    return string_sequence(n - 1L) ~ \" \" ~ to!string(n);\n}", "{\n\
    \    string s;\n    foreach (i; 0 .. n+1) {\n        if(i != 0) s ~= \" \";\n\
    \        s ~= std.conv.to!string(i);\n    }\n    return s;\n}", "{\n    auto result\
    \ = \"\";\n    long i = 0;\n    while (i <= n) \n    {\n        result ~= i.to!string;\n\
    \        i++;\n        if (i <= n) \n        {\n            result ~= \" \";\n\
    \        }\n    }\n    return result;\n}", "{\n    if (n == 0L) \n    {\n    \
    \    return \"0\";\n    }\n    return string_sequence(n - 1L) ~ \" \" ~ to!string(n);\n\
    }\n/*\nReturn a string containing space-delimited numbers starting from n downto\
    \ 0 inclusive.\n    >>> string_sequence_r(0L)\n    \"0\"\n    >>> string_sequence_r(5L)\n\
    \    \"5 4 3 2 1 0\"\n*/\nstring string_sequence_r(long n) \n{\n    if (n == 0L)\
    \ \n    {\n        return \"0\";\n    }\n    return to!string(n) ~ \" \" ~ string_sequence_r(n\
    \ - 1L);\n}\n/*", "{\n    if (n == 0L)\n        return \"0\";\n    \n    string\
    \ s = to!string(n);\n    while (n > 0L)\n    {\n        s = to!string(n--) ~ \"\
    \ \" ~ s;\n    }\n    return s;\n}", "{\n    string s;\n    for (long i = 0; i\
    \ <= n; i++) \n    {\n        s ~= to!string(i);\n        if (i < n)\n       \
    \     s ~= \" \";\n    }\n    return s;\n}", "    pure nothrow @nogc\n{\n    string\
    \ result;\n    foreach (i; 0L .. n + 1L)\n    {\n        result ~= i;\n      \
    \  if (i < n)\n            result ~= \" \";\n    }\n    return result;\n}\n/*\n\
    \ Return the amount of memory that is occupied by the string.\n    >>> string_size(\"\
    hello world\")\n    12\n    >>> string_size(\"xx\")\n    2\n    \n*/\nlong string_size(string\
    \ s) \n    pure nothrow @nogc\n{\n    return s.sizeof;\n}", "{\n    return string(n).iota.text;\n\
    }", "{\n    string ret = to!string(0L);\n    for (int i = 1; i <= n; i++) \n \
    \   {\n        ret ~= \" \" ~ to!string(i);\n    }\n    return ret;\n}", "{\n\
    \    string s;\n    for (long i = 0; i <= n; i++)\n    {\n        s += to!string(i);\n\
    \        s += \" \";\n    }\n    return s;\n}", "{\n\treturn string_sequence(n,\
    \ 0L);\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ the given number upto n inclusive.\n    >>> string_sequence(5L, 5L)\n    \"\
    5\"\n    >>> string_sequence(10L, 5L)\n    \"5 6 7 8 9 10\"\n    \n*/\nstring\
    \ string_sequence(long n, long start) \n{\n\tstring s = to!string(start);\n\t\
    for (long i = start + 1; i <= n; i++) \n\t{\n\t\ts ~= \" \" ~ to!string(i);\n\t\
    }\n\treturn s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from the given number upto n inclusive.\n    >>> string_sequence(5L, 5L)\n \
    \   \"5\"\n    >>> string_sequence(10L, 5L)\n    \"5 6 7 8 9 10\"\n    \n*/\n\
    string string_sequence(long n, long start) \n{\n\tstring s = to!string(start);\n\
    \tfor (long i = start + 1; i <= n; i++) \n\t{\n\t\ts ~= \" \" ~ to!string(i);\n\
    \t}\n\treturn s;\n}\n/**\n Return a string containing space-delimited numbers\
    \ starting from the given number upto n inclusive.\n    >>> string_sequence(5L,\
    \ 5L)\n    \"5\"\n    >>> string_sequence(10L, 5L)\n    \"5 6 7 8 9 10\"\n   \
    \ \n*/\nstring string_sequence(long n, long start) \n{\n\tstring s = to!string(start);\n\
    \tfor (long i = start + 1; i <= n; i++) \n\t{\n\t\ts ~= \" \" ~ to!string(i);\n\
    \t}\n\treturn s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from the given number upto n inclusive.\n    >>> string_sequence(5L, 5L)\n \
    \   \"5\"\n    >>> string_sequence(10L, 5L)\n    \"5 6 7 8 9 10\"\n    \n*/\n\
    string string_sequence(long n", "{\n    // return n.iota.map!(to!string).join(\"\
    \ \");\n    return n.iota.map!(to!string).join(\" \");\n}", "{\n    string s;\n\
    \    if (n == 0L) \n    {\n        s = \"0\";\n    } \n    else \n    {\n    \
    \    s = \"\";\n        foreach (i; 0 .. n + 1) \n        {\n            s ~=\
    \ format(i);\n            if (i != n) \n            {\n                s ~= \"\
    \ \";\n            }\n        }\n    }\n    return s;\n}", "    { \n    if (n\
    \ < 0L) \n        return \"\";\n    string s;\n    for (long l = 0L; l <= n; l++)\
    \ \n        s += l + \" \";\n    return s;\n    }", "{\n    if (n == 0L) \n  \
    \  {\n        return \"0\";\n    }\n    string[] result = new string[(int)n +\
    \ 1];\n    foreach (int i, ref string s; result) \n    {\n        s = to!string(i);\n\
    \    }\n    return join(result, \" \");\n}", "{\n    string result;\n    foreach\
    \ (i; 0L .. n+1L) \n    {\n        writefln(\"i: %d, result: %s\", i, result);\n\
    \        result ~= to!string(i) ~ \" \";\n    }\n    return result;\n}", "{\n\
    \    string result;\n    foreach (long i; 0..n + 1)\n    {\n        result ~=\
    \ to!string(i) ~ \" \";\n    }\n    return result.idup;\n}", "{\n    string sequence\
    \ = to!string(0L);\n    for (long i = 1L; i <= n; i++)\n    {\n        sequence\
    \ ~= \" \" ~ to!string(i);\n    }\n    return sequence;\n}\n/*\nReturn a string\
    \ containing space-delimited numbers in descending order starting from n down\
    \ to 0.\n    >>> string_sequence_descending(0L)\n    \"0\"\n    >>> string_sequence_descending(5L)\n\
    \    \"5 4 3 2 1 0\"\n*/\nstring string_sequence_descending(long n) \n{\n    string\
    \ sequence = to!string(n);\n    for (long i = n - 1L; i >= 0L; i--)\n    {\n \
    \       sequence ~= \" \" ~ to!string(i);\n    }\n    return sequence;\n}\n/*\n\
    Return a string containing comma-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence_csv(0L)\n    \"0\"\n    >>> string_sequence_csv(5L)\n\
    \    \"0,1,2,3,4,5\"\n*/\nstring string_sequence_csv(long n) \n{\n    string sequence\
    \ = to!string(0L);\n    for (long i = 1L; i <= n; i++)\n    {\n        sequence\
    \ ~= \",\" ~ to!string(i);\n    }\n    return sequence;\n}\n/*\nReturn a string\
    \ containing comma-delimited numbers in descending order starting from n down\
    \ to 0.\n    >>> string_sequence_descending_csv(0L)\n    \"0\"\n    >>> string_sequence_descending_csv(5L)\n\
    \    \"5,4,3,2,1,0\"\n*/\nstring string_sequence_descending_csv(long n) \n{\n\
    \    string sequence = to!string(n);\n    for (long i = n - 1L; i >= 0L; i--)\n\
    \    {\n        sequence ~= \",\" ~ to!string(i);\n    }\n    return sequence;\n\
    }\n/*\nReturn a string containing comma-delimited numbers starting from 0 upto\
    \ n inclusive,\nexcept for the number k.\n   ", "{\n    string s = \"\";\n   \
    \ for (int i = 0; i <= n; i++) \n    {\n        s = s ~ to!string(i) ~ \" \";\n\
    \    }\n    return s;\n}\n/*\n  Return the number of rotations necessary to make\
    \ list1 equal to list2\n    >>> rotations_needed([1, 2, 3, 4, 5], [3, 4, 5, 1,\
    \ 2])\n    2\n    >>> rotations_needed([2, 3, 1, 5, 4], [3, 1, 5, 4, 2])\n   \
    \ 1\n*/", "{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n\
    \    {\n        result += to!string(i);\n        if (i < n) \n        {\n    \
    \        result += \" \";\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ the index of the number in the string.\n    >>> find_index(\"0\", \"0 1 2 3\
    \ 4 5\")\n    0\n    >>> find_index(\"3\", \"0 1 2 3 4 5\")\n    3\n    >>> find_index(\"\
    7\", \"0 1 2 3 4 5\")\n    -1\n*/", "{\n\tstring s;\n\tforeach(i; 0L .. n+1L)\n\
    \t{\n\t\ts ~= i.to!string ~ \" \";\n\t}\n\treturn s;\n}", "{\n    import std.stdio;\n\
    \    string result = \"\";\n    foreach(i;0..n) \n    {\n        result ~= to!string(i);\n\
    \        if(i < n)\n            result ~= \" \";\n    }\n    return result;\n\
    }\n/*\n  Returns the sum of the first n positive integers.\n    >>> sum_to(3L)\n\
    \    6\n    >>> sum_to(5L)\n    15\n*/", "{\n    if (n == 0L) return \"0\";\n\
    \    string s = \"\";\n    long i = 0L;\n    while (i < n) \n    {\n        if\
    \ (i != 0L) s += \" \";\n        s += to!string(i);\n        i++;\n    }\n   \
    \ return s;\n}", "{\n    string result = \"\";\n    for (long i = 0; i <= n; i++)\
    \ \n    {\n        result += to!string(i);\n        if (i < n) \n        {\n \
    \           result += \" \";\n        }\n    }\n    return result;\n}", "{\n \
    \   string result = \"\";\n    auto temp = new string[];\n    for (long i = 0;\
    \ i <= n; i++)\n    {\n        result ~= temp.length;\n        temp ~= to!string(i);\n\
    \    }\n    return result;\n}", "{\n    return 0L .. n + 1L\n        .map!(to!string)\n\
    \        .join(\" \");\n}", "{\n    string s;\n    for (long i = 0; i <= n; i++)\n\
    \    {\n        s ~= i;\n        if (i != n)\n            s ~= \" \";\n    }\n\
    \    return s;\n}", "{\n    auto result = \"\";\n    for (auto i = 0L; i <= n;\
    \ i++)\n    {\n        result ~= to!string(i) ~ \" \";\n    }\n    return result;\n\
    }", "{\n    string s;\n    for (long i = 0; i <= n; i++)\n    {\n        if (i\
    \ == 0)\n            s = to!string(i);\n        else\n            s ~= \" \" ~\
    \ to!string(i);\n    }\n    return s;\n}", "{\n\tauto a = new string[n+1];\n\t\
    foreach(i; 0..n+1)\n\t{\n\t\ta[i] = to!string(i);\n\t}\n\treturn join(a);\n}",
  "{\n    string s = \"\";\n    for (long i = 0; i <= n; i += 1)\n    {\n\ts = s ~\
    \ i;\n\tif (i < n) s = s ~ \" \";\n    }\n    return s;\n}\n/*\n Return the number\
    \ of characters in string s\n    >>> string_length(\"\")\n    0\n    >>> string_length(\"\
    hello\")\n    5\n    >>> string_length(\"world\")\n    5\n*/\nlong string_length(string\
    \ s) \n{\n    return strlen(s);\n}\n/*\n Return a string containing the characters\
    \ of s reversed.\n    >>> string_reverse(\"\")\n    \"\"\n    >>> string_reverse(\"\
    hello\")\n    \"olleh\"\n    >>> string_reverse(\"world\")\n    \"dlrow\"\n*/\n\
    string string_reverse(string s) \n{\n    string s2 = \"\";\n    for (long i =\
    \ strlen(s) - 1; i >= 0; i -= 1)\n    {\n\ts2 = s2 ~ s[i];\n    }\n    return\
    \ s2;\n}\n/*\n Return a string containing the initial characters of s.\n    >>>\
    \ string_initial(\"12345\")\n    \"123\"\n    >>> string_initial(\"1234567890\"\
    )\n    \"1234567\"\n*/\nstring string_initial(string s) \n{\n    string s2 = \"\
    \";\n    for (long i = 0; i < min(strlen(s), 7); i += 1)\n    {\n\ts2 = s2 ~ s[i];\n\
    \    }\n    return s2;\n}\n/*\n Return a string containing the characters of s\
    \ in upper case.\n    >>> string_upper(\"abCDe\")\n    \"ABCDE\"\n    >>> string_upper(\"\
    hello\")\n    \"HELLO\"\n*/\nstring string_upper(string s) \n{\n    string s2\
    \ = \"\";\n    for (long i = 0; i < strlen(s); i += 1)\n    {\n\ts2 = s2 ~ toupper(s[i]);\n\
    \    }\n    return s2;\n}\n/*\n Return a string containing the characters of s\
    \ in lower case.\n", "{\n    string result;\n    for (long i = 0; i <= n; i++)\
    \ \n    {\n        result ~= to!string(i);\n        if (i < n)\n            result\
    \ ~= \" \";\n    }\n    return result;\n}\n/*\n    Return a string containing\
    \ space-delimited factorials starting from 0! upto n!.\n    >>> string_factorials(0L)\n\
    \    \"1\"\n    >>> string_factorials(5L)\n    \"1 1 2 6 24 120\"\n    \n*/\n\
    string string_factorials(long n) \n{\n    string result;\n    for (long i = 0;\
    \ i <= n; i++) \n    {\n        result ~= to!string(factorial(i));\n        if\
    \ (i < n)\n            result ~= \" \";\n    }\n    return result;\n}\n/*\n  \
    \  Return a string containing space-delimited Fibonacci numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_fibonacci(0L)\n    \"0\"\n    >>> string_fibonacci(5L)\n\
    \    \"0 1 1 2 3 5\"\n    \n*/\nstring string_fibonacci(long n) \n{\n    string\
    \ result;\n    for (long i = 0; i <= n; i++) \n    {\n        result ~= to!string(fibonacci(i));\n\
    \        if (i < n)\n            result ~= \" \";\n    }\n    return result;\n\
    }\n/*\nReturn a string containing space-delimited prime numbers starting from\
    \ 2 upto n inclusive.\n    >>> string_primes(0L)\n    \"\"\n    >>> string_primes(5L)\n\
    \    \"2 3 5\"\n    \n*/\nstring string_primes(long n) \n{\n    string result;\n\
    \    for (long i = 2; i <= n; i++) \n    {\n        if (is_prime(i)) \n      \
    \  {\n            result ~= to!string(i);\n            if (i < n)\n          \
    \      result ~= \" \";\n        }\n    }\n    return result;\n}\n/*", "{\n  \
    \  string[] result = new string[n + 1];\n    result[0] = to!string(0);\n    for\
    \ (long i = 1; i <= n; i++) \n    {\n        result[i] = to!string(i);\n    }\n\
    \    return join(result, \" \");\n}\n/*\n Return a tuple containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> tuple_sequence(0L)\n    ()\n\
    \    >>> tuple_sequence(5L)\n    (0, 1, 2, 3, 4, 5)\n*/\ntuple tuple_sequence(long\
    \ n) \n{\n    return iota(n + 1);\n}", "{\n    import std.conv;\n    string result;\n\
    \    foreach (i;0..n+1) {\n        if (i==0) {\n            result = to!string(i);\n\
    \        }\n        else {\n            result ~= \" \" ~ to!string(i);\n    \
    \    }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    for\
    \ (long i = 0; i <= n; i++)\n    {\n        result += to!string(i) + \" \";\n\
    \    }\n    return result;\n}\n/*\n     Return the first n characters of a string,\
    \ or the string itself if it is shorter than n.\n    >>> string_head(\"\", 3L)\n\
    \    \"\"\n    >>> string_head(\"hello\", 3L)\n    \"hel\"\n    >>> string_head(\"\
    hello\", 10L)\n    \"hello\"\n*/\nstring string_head(string s, long n) \n{\n \
    \   if (n >= s.length)\n    {\n        return s;\n    }\n    else\n    {\n   \
    \     return s[0..n];\n    }\n}\n/*\n    Return the last n characters of a string,\
    \ or the string itself if it is shorter than n.\n    >>> string_tail(\"\", 3L)\n\
    \    \"\"\n    >>> string_tail(\"hello\", 3L)\n    \"llo\"\n    >>> string_tail(\"\
    hello\", 10L)\n    \"hello\"\n    \n*/\nstring string_tail(string s, long n) \n\
    {\n    if (n >= s.length)\n    {\n        return s;\n    }\n    else\n    {\n\
    \        return s[$-n..$];\n    }\n}\n/*\n    Return the last `n` characters of\
    \ a string `s`.\n    >>> string_last(\"hello\", 3L)\n    \"llo\"\n    >>> string_last(\"\
    hello\", 10L)\n    \"hello\"\n*/\nstring string_last(string s, long n) \n{\n \
    \   return string_tail(s, n);\n}\n/*\n    Return the first `n` characters of a\
    \ string `s`.\n    >>> string_first(\"hello\", 3L)\n    \"hel\"\n    >>> string_first(\"\
    hello\", 10L)\n    \"hello\"\n*/\nstring string_first(string s, long n) \n{\n\
    \    return string_head(s, n);\n}\n/*\n    Return `true` iff `s` is a palindrome.\n\
    \    >>> is_palindrome(\"abba\")\n    true\n   ", "{\n    string result = \"\"\
    ;\n    for (int i = 0; i <= n; i++) \n    {\n        result += to!string(i) +\
    \ \" \";\n    }\n    return result.trimRight();\n}\n/*\n    Return a string containing\
    \ space-delimited numbers starting from n down to 0 inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(5L)\n    \"5 4 3 2 1 0\"\n*/\nstring reverse_string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (int i = n; i >= 0; i--) \n    {\n\
    \        result += to!string(i) + \" \";\n    }\n    return result.trimRight();\n\
    }\n//The following two functions are for a different exercise\nstring natural_string_sequence(long\
    \ n) \n{\n    string result = \"\";\n    for (int i = 1; i <= n; i++) \n    {\n\
    \        result += to!string(i) + \" \";\n    }\n    return result.trimRight();\n\
    }", "{\n    string result = \"\";\n    foreach (i; 0L .. n + 1L) \n    {\n   \
    \     result ~= \" \" ~ to!string(i);\n    }\n    return result[1 .. $];\n}",
  "{\n    /*\n    initializes a string with length n+1 and fills the string with spaces.\n\
    \    */\n    string s(n+1,' ');\n    /*\n    loops through each element in the\
    \ string, assigns the element to the string with \n    the ascii value of the\
    \ element in s minus 48, and increases the ascii value by 1.\n    */\n    foreach(int\
    \ i, char &c; s) \n    {\n        c = i + '0';\n        ++i;\n    }\n    return\
    \ s;\n}", "{\n    string res;\n    for (long i = 0; i <= n; i++) \n    {\n   \
    \     res += i;\n        if (i < n) \n        {\n            res += \" \";\n \
    \       }\n    }\n    return res;\n}\n/*\nReturn the sum of the numbers in the\
    \ array, returning 0 for an empty array.\n        Except the number 13 is very\
    \ unlucky, so it does not count and numbers that come immediately after a 13 also\
    \ do not count.\n    >>> sum13([1, 2, 2, 1])\n    6\n    >>> sum13([1, 1])\n \
    \   2\n    >>> sum13([1, 2, 2, 1, 13])\n    6\n    >>> sum13([1, 2, 13, 2, 1,\
    \ 13])\n    4\n    >>> sum13([13, 1, 2, 13, 2, 1, 13])\n    3\n    >>> sum13([])\n\
    \    0\n    >>> sum13([13])\n    0\n    >>> sum13([13, 13])\n    0\n    >>> sum13([13,\
    \ 0, 13])\n    0\n    >>> sum13([13, 1, 13])\n    0\n    >>> sum13([5, 7, 2])\n\
    \    14\n    >>> sum13([5, 13, 2])\n    5\n    >>> sum13([0])\n    0\n    >>>\
    \ sum13([13, 0])\n    0\n*/\nlong sum13(array<long> nums) \n{\n    long res =\
    \ 0;\n    long pos = 0;\n    for (; pos < nums.length && nums[pos] != 13; pos++)\
    \ \n    {\n        res += nums[pos];\n    }\n    if (pos < nums.length - 1) \n\
    \    {\n        for (pos += 1; pos < nums.length && nums[pos] != 13; pos++) \n\
    \        {\n            res += nums[pos];\n        }\n    }\n    return res;\n\
    }\n/*\nReturn the number of even ints in the given array. Note: the % \"mod\"\
    \ operator computes the remainder, e.g. 5 % 2 is 1.\n    >>> count_evens([2, 1,\
    \ 2,", "{\n    string s = \"\";\n    for (int i = 0; i <= n; i++)\n    {\n   \
    \     s = s ~ i ~ \" \";\n    }\n    return s;\n}", "{\n    assert(n >= 0);\n\
    \    string[] sequence = new string[n + 1];\n    foreach (i; 0..n + 1)\n    {\n\
    \        sequence[i] = format(\"%s\", i);\n    }\n    return join(sequence, \"\
    \ \");\n}\n/*\n Return a string containing space-delimited squares starting from\
    \ 0 upto n inclusive.\n    >>> string_squares(0L)\n    \"0\"\n    >>> string_squares(5L)\n\
    \    \"0 1 4 9 16 25\"\n    \n*/\nstring string_squares(long n) \n{\n    assert(n\
    \ >= 0);\n    string[] sequence = new string[n + 1];\n    foreach (i; 0..n + 1)\n\
    \    {\n        sequence[i] = format(\"%s\", pow(i, 2));\n    }\n    return join(sequence,\
    \ \" \");\n}\n//\n@safe unittest \n{\n    assert(string_sequence(0L) == \"0\"\
    );\n    assert(string_sequence(5L) == \"0 1 2 3 4 5\");\n    assert(string_squares(0L)\
    \ == \"0\");\n    assert(string_squares(5L) == \"0 1 4 9 16 25\");\n}\n \n/*\n\
    \   This program is free software: you can redistribute it and/or modify\n   \
    \ it under the terms of the GNU General Public License as published by\n    the\
    \ Free Software Foundation, either version 3 of the License, or\n    (at your\
    \ option) any later version.", "{\n    /*\n    if (n <= 0L)\n        return \"\
    0\";\n    else\n        return string_sequence(n - 1L) ~ (\" \" ~ to!string(n));\n\
    \    */\n    string result = \"\";\n    for (long i = 0L; i <= n; i++)\n    {\n\
    \        result ~= to!string(i) ~ \" \";\n    }\n    return result;\n}", "{\n\
    \    long i;\n    string result;\n    for (i = 0; i <= n; i++)\n        result\
    \ ~= i.stringof;\n    return result;\n}", "{\n    if (n == 0L) \n    {\n     \
    \   return \"0\";\n    }\n    return \" \".join([\"%d\" % x for x in to(n)]);\n\
    }", "{\n    // Note! We use string(long x) and to!string(long x) interchangeably.\
    \ \n    // They behave identically and the choice should be driven by what sounds\n\
    \    // more natural in the particular place.\n    import std.conv : to;\n   \
    \ string result = \"\";\n    foreach (i; 0 .. n + 1)\n        result ~= i ~ \"\
    \ \";\n    return result[0 .. $ - 1];\n}\n/*\n    Extract the last element of\
    \ a non-empty sequence.\n    >>> last(\"\")\n    Exception: last<char>(\"\")\n\
    \    >>> last(\"hello\")\n    'o'\n*/\nT last(T)(T[] s) \n{\n    return s[$ -\
    \ 1];\n}\n/*\n    Extract the last two elements of a non-empty sequence.\n   \
    \ >>> last2(\"\")\n    Exception: last2<char>(\"\")\n    >>> last2(\"hello\")\n\
    \    ['l', 'o']\n*/\nT[] last2(T)(T[] s) \n{\n    return s[$ - 2 .. $];\n}\n/*\n\
    \    Extract the last element of a non-empty sequence.\n    >>> last(\"\")\n \
    \   Exception: last<char>(\"\")\n    >>> last(\"hello\")\n    'o'\n*/\nT last(T)(T[]\
    \ s) \n{\n    return s[$ - 1];\n}\n/*\n    Extract the last two elements of a\
    \ non-empty sequence.\n    >>> last2(\"\")\n    Exception: last2<char>(\"\")\n\
    \    >>> last2(\"hello\")\n    ['l', 'o']\n*/\nT[] last2(T)(T[] s) \n{\n    return\
    \ s[$ - 2 .. $];\n}\n/*\n    Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n) \n{\n    // Note! We use string(long x) and to!string(long x) interchangeably.\
    \ \n    // They behave identically and the choice should be driven", "{\n    string\
    \ result = to!string(n);\n    for (long i = n - 1; i >= 0; i--) \n    {\n    \
    \    result ~= \" \" ~ to!string(i);\n    }\n    return result;\n}", "{\n\tstring\
    \ result = \"\";\n\tint i;\n\tfor (i = 0; i <= n; i++)\n\t{\n\t\tresult += to!string(i);\n\
    \t\tif (i < n)\n\t\t\tresult += \" \";\n\t}\n\treturn result;\n}", "{\n    string\
    \ s;\n    foreach (i; 0 .. n + 1) \n    {\n        s ~= i.to!string ~ \" \";\n\
    \    }\n    return s.idup;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from first_number upto n inclusive.\n    >>> string_sequence(0L,\
    \ 0L)\n    \"0\"\n    >>> string_sequence(0L, 5L)\n    \"0 1 2 3 4 5\"\n*/\nstring\
    \ string_sequence(long first_number, long n) \n{\n    string s;\n    foreach (i;\
    \ first_number .. n + 1) \n    {\n        s ~= i.to!string ~ \" \";\n    }\n \
    \   return s.idup;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from first_number upto n inclusive, skipping numbers in step.\n   \
    \ >>> string_sequence(0L, 5L, 0L)\n    \"0 1 2 3 4 5\"\n    >>> string_sequence(0L,\
    \ 5L, 2L)\n    \"0 2 4\"\n*/\nstring string_sequence(long first_number, long n,\
    \ long step) \n{\n    string s;\n    foreach (i; first_number .. n + 1) \n   \
    \ {\n        if (i % step == 0)\n        {\n            s ~= i.to!string ~ \"\
    \ \";\n        }\n    }\n    return s.idup;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from first_number upto n inclusive, skipping\
    \ numbers in step.\n    >>> string_sequence(0L, 5L, 0L)\n    \"0 1 2 3 4 5\"\n\
    \    >>> string_sequence(0L, 5L, 2L)\n    \"0 2 4\"\n*/\nstring string_sequence(long\
    \ first_number, long n, long step, string delimiter) \n{\n    string s;\n    foreach\
    \ (i; first_number .. n + 1) \n    {\n        if (i % step == 0)\n        {\n\
    \            s ~= i.to!string ~ delimiter;\n        }\n    }\n", "{\n    static\
    \ if (__traits(compiles, {\n        import std.format;\n        return format(\"\
    %(0 .. %)\", n);\n    })) {\n        import std.format;\n        return format(\"\
    %(0 .. %)\", n);\n    } else {\n        import std.algorithm : iota;\n       \
    \ import std.range : map;\n        import std.conv : to;\n        return iota(0L,\
    \ n + 1L).map!(i => to!string(i)).join(\" \");\n    }\n}", "{\n    string result\
    \ = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n        result = result\
    \ ~ std.string.to!string(i) ~ \" \";\n    }\n    return result.trim();\n}", "{\n\
    \    string r = \"\";\n    for (int i = 0; i <= n; i++)\n        r += std.to!string(i)\
    \ + \" \";\n    return r;\n}", "{\n    string r = \"\";\n    while (n >= 0) {\n\
    \        r = d_format(\"%s%s\", r, n);\n        n--;\n    }\n    return r;\n}",
  "{\n    string result;\n    for (size_t i = 0; i <= n; i++)\n    {\n        result\
    \ ~= to!string(i);\n        if (i < n)\n            result ~= \" \";\n    }\n\
    \    return result;\n}", "    pure nothrow @safe @nogc{\n    import std.array;\n\
    \    import std.conv;\n    import std.algorithm;\n    import std.range;\n    import\
    \ std.string;\n    return iota(0L, n+1L).map!(to!string).joiner(\" \").str;\n}",
  "{\n    long i;\n    string s;\n    s = \"\";\n    i = 0L;\n    while (i <= n) {\n\
    \        s += to!string(i);\n        if (i < n) {\n            s += \" \";\n \
    \       }\n        i++;\n    }\n    return s;\n}", "{\n    string str;\n    for\
    \ (long i = 0; i <= n; i++)\n    {\n        str ~= format(\"%s\", to!string(i));\n\
    \        if (i != n)\n            str ~= \" \";\n    }\n    return str;\n}\n/*\n\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1\
    \ 2 3 4 5\"\n*/\nstring string_sequence(int n) \n{\n    return string_sequence(to!long(n));\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0UL)\n    \"0\"\n    >>> string_sequence(5UL)\n\
    \    \"0 1 2 3 4 5\"\n*/\nstring string_sequence(ulong n) \n{\n    return string_sequence(to!long(n));\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0u)\n    \"0\"\n    >>> string_sequence(5u)\n\
    \    \"0 1 2 3 4 5\"\n*/\nstring string_sequence(uint n) \n{\n    return string_sequence(to!long(n));\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0.0)\n    \"0\"\n    >>> string_sequence(5.0)\n\
    \    \"0 1 2 3 4 5\"\n*/\nstring string_sequence(double n) \n{\n    return string_sequence(to!long(n));\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0.0f)\n    \"0\"\n    >>> string_sequence(5.0f)\n\
    \    \"0 1 2 3 4 5\"\n*/\nstring string_sequence(float n) \n{\n    return string_sequence(to!long(n));\n\
    }\n/*\n Return a string containing space-delimited numbers starting from", "{\n\
    \    string r=\"\";\n    foreach(i; 0L..n+1L)\n        r ~= (i~\" \");\n    return\
    \ r;\n}\n/*\n Input: a string containing space-delimited words.\n    Output: a\
    \ string containing each word reversed and space-delimited.\n        >>> string_reverse(\"\
    hi there\")\n        \"ih ereht\"\n*/\nstring string_reverse(string s) \n{\n \
    \   string r=\"\";\n    foreach(w; s.split())\n        r ~= w.reverse~\" \";\n\
    \    return r;\n}\n/*\n Return True if the given string contains duplicate words.\n\
    \    >>> is_string_duplicate(\"I love love programming\")\n    True\n*/", "{\n\
    \    string s;\n    foreach (i; 0L .. n + 1L) \n    {\n        s ~= to!string(i)\
    \ ~ \" \";\n    }\n    return chomp(s);\n}", "{\n    string s = to!string(0L);\n\
    \    for (long i = 1L; i <= n; i++)\n    {\n        s ~= \" \" ~ to!string(i);\n\
    \    }\n    return s;\n}\n/*\nOutput:\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n*/", "{\n    auto s = format(\"\
    %s\", n);\n    foreach (i; 1..n)\n    {\n        s ~= \" \" ~ format(\"%s\", i);\n\
    \    }\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence2(long\
    \ n) \n{\n    if (n == 0)\n    {\n        return \"0\";\n    }\n    auto s = format(\"\
    %s\", n);\n    foreach (i; n-1..0)\n    {\n        s ~= \" \" ~ format(\"%s\"\
    , i);\n    }\n    return s;\n}\n/*\n Return a tuple containing numbers starting\
    \ from 0 upto n inclusive.\n    >>> tuple_sequence(0L)\n    ()\n    >>> tuple_sequence(5L)\n\
    \    (0, 1, 2, 3, 4, 5)\n    \n*/\nauto tuple_sequence(long n) \n{\n    return\
    \ tuple(n);\n}\n/*\n Return a list containing numbers starting from 0 upto n inclusive.\n\
    \    >>> list_sequence(0L)\n    []\n    >>> list_sequence(5L)\n    [0, 1, 2, 3,\
    \ 4, 5]\n    \n*/\nauto list_sequence(long n) \n{\n    return list(n);\n}\n/*\n\
    \ Return a list containing numbers starting from 0 upto n inclusive.\n    >>>\
    \ list_sequence(0L)\n    []\n    >>> list_sequence(5L)\n    [0, 1, 2, 3, 4, 5]\n\
    \    \n*/\nauto list_sequence2(long n) \n{\n    if (n == 0)\n    {\n        return\
    \ [n];\n    }\n    return [n] ~= list_sequence2(n-1);\n}\n/*\n Return a list containing\
    \ numbers starting from 0 upto n inclusive.\n    >>> list_sequence(0L)\n    []\n\
    \    >>> list_sequence(5L)\n    [0, 1", "{\n    string result = to!string(n);\n\
    \    if (n < 0)\n        return result;\n    foreach (long i; 0..n) \n    {\n\
    \        result = to!string(i) ~ \" \" ~ result;\n    }\n    return result;\n}",
  "{\n    string result;\n    foreach (i; 0L .. n+1L)\n    {\n        result ~= std.conv.to!string(i)\
    \ ~ \" \";\n    }\n    return result;\n}\n \n/*\n Given a string of space-delimited\
    \ numbers, convert them to a list of numbers.\n \n    >>> to_numbers(\"0\")\n\
    \    [0]\n    >>> to_numbers(\"0 1 2 3 4 5\")\n    [0, 1, 2, 3, 4, 5]\n*/\nstring[]\
    \ to_numbers(string s) \n{\n    return std.conv.to!(int[])(split(s, \" \"));\n\
    }", "{\n    string result;\n    foreach (i; 0L .. n+1L)\n    {\n        result\
    \ ~= std.conv.to!string(i) ~ \" \";\n    }\n    return result.idup;\n}\n/*\n Given\
    \ a sequence, return a sequence containing all values in the first sequence\n\
    \ that are not in the second sequence.\n    >>> std.algorithm.filter!(n => n <\
    \ 5)([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    [1, 2, 3, 4]\n    >>> std.algorithm.filter!(n\
    \ => n < 5)([1, 2, 3, 5, 6, 7, 8, 9])\n    [1, 2, 3]\n    >>> std.algorithm.filter!(n\
    \ => n < 5)([1, 2, 3, 6, 7, 8, 9])\n    [1, 2, 3]\n    >>> std.algorithm.filter!(n\
    \ => n < 5)([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    [1, 2, 3, 4]\n*/\nstring filter_func(string\
    \ input)\n{\n    import std.array;\n    import std.algorithm;\n    import std.conv;\n\
    \    string[] array = split(input, \" \");\n    auto result = filter!(n => n <\
    \ 5)(array);\n    auto result_str = result.join(\" \");\n    return result_str;\n\
    }\n/*\n Return a new string with the same contents as the argument, but with all\n\
    \ vowels removed.\n    >>> filter_chars(\"foobar\")\n    \"fbr\"\n    >>> filter_chars(\"\
    aeiou\")\n    \"\"\n*/\nstring filter_chars(string input)\n{\n    return std.algorithm.filter!(n\
    \ => n != 'a' && n != 'e' && n != 'i' && n != 'o' && n != 'u')(input);\n}\n/*\n\
    \ Return a new string with the first letter uppercased, the rest lowercased.\n\
    \    >>> string_format(\"foo\")\n    \"Foo\"\n    >>> string_format(\"FOO\")\n\
    \    \"", "{\n    string result;\n    for (long i = 0; i <= n; i++)\n    {\n \
    \       if (i != 0)\n            result += \" \";\n        result += to!string(i);\n\
    \    }\n    return result;\n}", "{\n    string s;\n    foreach (i; 0 .. n + 1)\n\
    \    {\n        s ~= to!string(i) ~ \" \";\n    }\n    return s;\n}", "{\n   \
    \ long i = 0L;\n    string str = \"\";\n    while (i <= n) {\n        str ~= to!string(i);\n\
    \        str ~= \" \";\n        i++;\n    }\n    return str.idup;\n}", "{\n  \
    \  if (n == 0L)\n        return \"0\";\n    else\n        return string_sequence(n\
    \ - 1L) ~ \" \" ~ to!string(n);\n}", "{\n    string result = null;\n    long i\
    \ = 0L;\n    while (i <= n) {\n        if (result !is null) result ~= \" \";\n\
    \        result ~= to!string(i);\n        i += 1L;\n    }\n    return result;\n\
    }\nstring string_sequence(long n) \n{\n    string result = null;\n    foreach\
    \ (int i; 0..=n) {\n        if (result !is null) result ~= \" \";\n        result\
    \ ~= to!string(i);\n    }\n    return result;\n}", "{\n    string result;\n  \
    \  foreach (i; 0L .. n + 1L)\n    {\n        result ~= format(\"%s \", i);\n \
    \   }\n    return result;\n}", "{\n    //Hint: Look at the definition of sequence(n)\
    \ above.\n    return sequence(n).map!(to!string).array.join(\" \");\n}", "   \
    \ pure nothrow \n{\n    // n+1, because range stops at n inclusive\n    return\
    \ reduce!\"a ~ \\\" \\\" ~ to!string(b)\"( iota(n+1) );\n}\n/*\n Return a list\
    \ of integers containing the numbers 0 through n inclusive.\n    >>> list_sequence(0L)\n\
    \    [0]\n    >>> list_sequence(5L)\n    [0, 1, 2, 3, 4, 5]\n*/\nauto list_sequence(long\
    \ n) \n    pure nothrow \n{\n    return iota(n+1);\n}\n/*\n Return a list of the\
    \ prime numbers below n.\n    >>> list_primes(10L)\n    [2, 3, 5, 7]\n*/\nauto\
    \ list_primes(long n) \n    pure nothrow \n{\n    if (n < 2) \n        return\
    \ [];\n    auto nums = iota(n);\n    nums[0] = 0;\n    foreach (num; nums) \n\
    \    {\n        if (num < 2) \n            continue;\n        // nums[num*2::num]\
    \ = 0;\n        foreach (i; 2*num..n) \n            nums[i] = 0;\n    }\n    return\
    \ filter!\"a != 0\"(nums);\n}\n/*\n Return a list of prime numbers using the Sieve\
    \ of Eratosthenes\n algorithm. n is an integer.\n    >>> list_primes_eratosthenes(10L)\n\
    \    [2, 3, 5, 7]\n*/\nauto list_primes_eratosthenes(long n) \n    pure nothrow\
    \ \n{\n    if (n < 2) \n        return [];\n    auto nums = iota(n);\n    nums[0]\
    \ = 0;\n    auto p = 2;\n    foreach (num; nums) \n    {\n        if (num < 2)\
    \ \n            continue;\n        // nums[num*2::num] = 0;\n        foreach (i;\
    \ 2*num..n) \n            nums[i] = 0;\n        p = num+1;\n   ", "{\n    string\
    \ res;\n    for (long i = 0; i <= n; i++) \n    {\n        res ~= to!string(i);\n\
    \        if (i < n)\n            res ~= \" \";\n    }\n    return res;\n}\n/*\n\
    \    Return a string containing space-delimited numbers starting from start upto\
    \ n inclusive.\n    >>> string_sequence(10L, 0L)\n    \"0 1 2 3 4 5 6 7 8 9 10\"\
    \n    >>> string_sequence(10L, 5L)\n    \"5 6 7 8 9 10\"\n    >>> string_sequence(5L,\
    \ 5L)\n    \"5\"\n    \n*/\nstring string_sequence(long n, long start) \n{\n \
    \   string res;\n    for (long i = start; i <= n; i++) \n    {\n        res ~=\
    \ to!string(i);\n        if (i < n)\n            res ~= \" \";\n    }\n    return\
    \ res;\n}\n/*\n    Return a string containing space-delimited numbers starting\
    \ from start upto n inclusive,\n    with a step size of step.\n    >>> string_sequence(0L,\
    \ 5L, 1L)\n    \"0 1 2 3 4 5\"\n    >>> string_sequence(10L, 0L, 2L)\n    \"10\
    \ 8 6 4 2 0\"\n    >>> string_sequence(5L, 5L, 2L)\n    \"5\"\n    \n*/\nstring\
    \ string_sequence(long n, long start, long step) \n{\n    string res;\n    for\
    \ (long i = start; i <= n; i += step) \n    {\n        res ~= to!string(i);\n\
    \        if (i < n)\n            res ~= \" \";\n    }\n    return res;\n}\n/*\n\
    \    Return a string containing space-delimited numbers starting from n downto\
    \ 0.\n    >>> string_sequence(0L, 5L, 1L)\n    \"0 1 2 3 4 5\"\n    >>> string_sequence(0L,\
    \ 5L, 2L)\n    \"0 2 4\"\n    >>> string_sequence(0L, 5L, 3L)\n    \"", "{\n \
    \   if (n < 0L) {\n        return \"\";\n    }\n    return string_sequence(n -\
    \ 1L) ~ n;\n}\n/*\n Given a list of non-negative integers, return a string listing\
    \ the integers in ascending order\n    >>> \"\".join(int_sequence([2, 4, 6, 8]))\n\
    \    \"24680\"\n    >>> \"\".join(int_sequence([5, 3, 1]))\n    \"1350\"\n*/",
  "{\n    string[] nums = new string[n+1];\n    foreach (i; 0..n)\n    {\n       \
    \ nums[i] = format(\"%d\", i);\n    }\n    return join(nums, \" \");\n}", "{\n\
    \    string s = \"\";\n    for (int i = 0; i <= n; i++) \n    {\n        s = s\
    \ ~ i ~ \" \";\n    }\n    return s;\n}", "{\n    string str = \"\";\n    for\
    \ (long i = 0; i <= n; i++)\n    {\n        str ~= to!string(i) ~ \" \";\n   \
    \ }\n    return str;\n}\n/*\n Return a string containing n lines, each ending\
    \ with a newline, with the line number right justified in a field of width 5.\n\
    \    >>> numbered_lines(0L)\n    '     0\\n'\n    >>> numbered_lines(3L)\n   \
    \ '     0\\n     1\\n     2\\n     3\\n'\n*/\nstring numbered_lines(long n) \n\
    {\n    string str = \"\";\n    for (long i = 0; i <= n; i++)\n    {\n        str\
    \ ~= format(\"%5s\\n\", to!string(i));\n    }\n    return str;\n}\n/*\n Return\
    \ a string containing n lines, each ending with a newline, with the line number\
    \ right justified in a field of width 5 and padded with zeros.\n    >>> numbered_lines_2(0L)\n\
    \    '00000\\n'\n    >>> numbered_lines_2(3L)\n    '00000\\n00001\\n00002\\n00003\\\
    n'\n*/\nstring numbered_lines_2(long n) \n{\n    string str = \"\";\n    for (long\
    \ i = 0; i <= n; i++)\n    {\n        str ~= format(\"%05s\\n\", to!string(i));\n\
    \    }\n    return str;\n}\n/*\n Return a string containing n lines, each ending\
    \ with a newline, with the line number right justified in a field of width 5 with\
    \ leading zeros.\n    >>> numbered_lines_3(0L)\n    '0000\\n'\n    >>> numbered_lines_3(3L)\n\
    \    '0000\\n0001\\n0002\\n0003\\n'\n*/\nstring numbered_lines_3(long n) \n{\n\
    \    string str = \"\";\n    for (long i = 0; i <= n; i++)\n    {\n        str\
    \ ~= format(\"%04s\\n\", to!string(i));\n    }\n    return str;\n}\n/*\n Return\
    \ a string containing", "{\n    string str;\n    foreach (i; 0L .. n+1L)\n   \
    \     str ~= to!string(i) ~ \" \";\n    return str;\n}", "{\n    import std.algorithm\
    \ : map;\n    string[] arr = new string[n + 1];\n    foreach (index, ref i; arr)\
    \ {\n        i = to!string(index);\n    }\n    return arr.map!(a => a).join(\"\
    \ \");\n}\n/*\n  Returns the number of occurences of x within a given array, using\
    \ an unrolled loop\n  and returning -1 if x does not exist.\n    >>> number_of_occurences(0L,\
    \ [0L, 0L, 0L, 0L, 0L])\n    5\n    >>> number_of_occurences(5L, [0L, 0L, 0L,\
    \ 0L, 0L])\n    -1\n*/\nlong number_of_occurences(long x, long[] arr) \n{\n  \
    \  long res = 0;\n    switch (arr.length) {\n        case 8: res += (arr[7] ==\
    \ x);\n        case 7: res += (arr[6] == x);\n        case 6: res += (arr[5] ==\
    \ x);\n        case 5: res += (arr[4] == x);\n        case 4: res += (arr[3] ==\
    \ x);\n        case 3: res += (arr[2] == x);\n        case 2: res += (arr[1] ==\
    \ x);\n        case 1: res += (arr[0] == x);\n        case 0: break;\n       \
    \ default: {\n            for (size_t i = 0; i < arr.length; i++) {\n        \
    \        res += (arr[i] == x);\n            }\n        }\n    }\n    return res\
    \ == 0 ? -1 : res;\n}\n/*\n  Returns the smallest integer in a given array, or\
    \ -1 if the array is empty.\n    >>> smallest_integer([])\n    -1\n    >>> smallest_integer([5L,\
    \ 4L, 3L, 2L, 1L])\n    1\n*/\nlong smallest_integer(long[] arr) \n{\n    if (arr.length\
    \ == 0) {\n        return -1;\n    }\n    long min = arr[0];\n    foreach (item;\
    \ arr) {\n        if", "{\n  return sequence_string(0L,n);\n}", "{\n    import\
    \ std.conv;\n    string ret = \"\";\n    foreach (i; 0L .. n + 1L) \n    {\n \
    \       ret ~= i;\n        if (i < n)\n            ret ~= \" \";\n    }\n    return\
    \ ret;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    import\
    \ std.conv;\n    string ret = \"\";\n    foreach (i; 0L .. n + 1L) \n    {\n \
    \       ret ~= i;\n        if (i < n)\n            ret ~= \" \";\n    }\n    return\
    \ ret;\n}\n/*\n    Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    import\
    \ std.conv;\n    string ret = \"\";\n    foreach (i; 0L .. n + 1L) \n    {\n \
    \       ret ~= i;\n        if (i < n)\n            ret ~= \" \";\n    }\n    return\
    \ ret;\n}\n/*\n    Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n    import\
    \ std.conv;\n    string ret = \"\";\n    foreach (i; 0L .. n + 1L) \n    {\n \
    \       ret ~= i;\n        if (i < n)\n            ret ~= \" \";\n    }\n    return\
    \ ret;\n}\n/*\n    Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence", "{\n    string sequence\
    \ = \"\";\n    while (n >= 0) \n    {\n        sequence += to!string(n);\n   \
    \     sequence += \" \";\n        n--;\n    }\n    return sequence;\n}", "{\n\
    \    string result;\n    foreach (i; 0L .. n + 1L)\n    {\n        if (result\
    \ != \"\")\n            result ~= \" \";\n        result ~= to!string(i);\n  \
    \  }\n    return result;\n}", "{\n    string result = \"\";\n    for (long i =\
    \ 0; i <= n; i++) \n    {\n        result += (string)i;\n        if (i < n) \n\
    \        {\n            result += \" \";\n        }\n    }\n    return result;\n\
    }", "{\n    enum{maxline = 1024};\n    char[maxline] buf;\n    auto p = buf.ptr;\n\
    \    auto lim = buf.ptr + maxline;\n    for (int i = 0; i <= n; i++)\n    {\n\
    \        p += sprintf(p, \"%d \", i);\n        if (p + 16 > lim) \n        {\n\
    \            buf ~= \"\\n\";\n            p = buf.ptr + buf.length;\n        }\n\
    \    }\n    return buf[0..$-1];\n}", "{\n\tstring s = \"\";\n\tfor (long i = 0;\
    \ i <= n; i++) \n\t{\n\t\ts += i;\n\t\tif (i < n)\n\t\t\ts += \" \";\n\t}\n\t\
    return s;\n}", "{\n\tstring result = \"\";\n\tforeach(i; 0L .. n + 1L) \n\t{\n\
    \t\tresult ~= to!string(i) ~ \" \";\n\t}\n\treturn result.idup;\n}", "{\n    return\
    \ iota(n+1).map!(to!string).joiner(\" \").array;\n}", "{\n    string s = format(\"\
    %d\",n);\n    for (int i = n - 1; i >= 0; i--)\n        s += format(\" %d\",i);\n\
    \    return s;\n}\n// enable std.math.parse\nalias parse = std.math.parse;", "{\n\
    \    if (n == 0L)\n    {\n        return \"0\";\n    }\n    int size = (int) (log10(n)\
    \ + 1);\n    string result = \"\";\n    for (long i = 0L; i <= n; i++)\n    {\n\
    \        result += to!string(i, size);\n        result += \" \";\n    }\n    return\
    \ result[0..$-1];\n}", "{\n    if (n == 0L) return \"0\";\n    string s = \"\"\
    ;\n    foreach (k; 0L .. n + 1L) {\n        s ~= to!string(k) ~ \" \";\n    }\n\
    \    return s[0 .. $ - 1];\n}", "{\n    string result = \"\";\n    foreach (int\
    \ i; 0..n + 1)\n        result ~= i ~ \" \";\n    return result;\n}", "{\n   \
    \ string s = \"\";\n    for (int i = 0; i <= n; i++) \n    {\n        s += to!string(i);\n\
    \        if (i < n) \n        {\n            s += \" \";\n        }\n    }\n \
    \   return s;\n}\n/*\n Return a string containing n copies of the string s.\n\
    \    >>> string_repeater(\"hi\", 2L)\n    \"hihi\"\n    >>> string_repeater(\"\
    hi\", 0L)\n    \"\"\n    >>> string_repeater(\"\", 3L)\n    \"\"\n    \n*/\nstring\
    \ string_repeater(string s, long n) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < n; i++) \n    {\n        result += s;\n    }\n    return result;\n\
    }\n/*\n Return a string containing the first n numbers of the Fibonacci sequence.\n\
    \    >>> fibonacci_sequence(0L)\n    \"\"\n    >>> fibonacci_sequence(1L)\n  \
    \  \"0\"\n    >>> fibonacci_sequence(10L)\n    \"0 1 1 2 3 5 8 13 21 34\"\n  \
    \  \n*/\nstring fibonacci_sequence(long n) \n{\n    int a = 0;\n    int b = 1;\n\
    \    string s = \"\";\n    for (int i = 0; i < n; i++) \n    {\n        s += to!string(a);\n\
    \        int temp = a;\n        a = b;\n        b = temp + b;\n        if (i <\
    \ n - 1) \n        {\n            s += \" \";\n        }\n    }\n    return s;\n\
    }\n/*\n Return the sum of two numbers a and b.\n    >>> sum(2L, 3L)\n    5L\n\
    \    >>> sum(0L, 1L)\n    1L\n    >>> sum(-1L, 5L)\n    4L\n    \n*/\nlong sum(long\
    \ a, long b) \n{\n    return a + b;\n}\n/*\n Return the quotient of two numbers\
    \ a and b.\n    >>> quotient(10L, 5L)\n    2L\n   ", "{\n    string sequence =\
    \ \"\";\n    foreach (i; 0L .. n + 1L)\n    {\n        sequence ~= i;\n      \
    \  if (i < n)\n        {\n            sequence ~= \" \";\n        }\n    }\n \
    \   return sequence;\n}", "{\n    string str = \"\";\n    foreach (i; 0..n+1)\n\
    \        str ~= std.conv.to!string(i) ~ \" \";\n    return str;\n}", "{\n    string\
    \ res = \"\";\n    for (long i = 0; i <= n; i++)\n    {\n        res += to!string(i);\n\
    \        if (i < n)\n            res += \" \";\n    }\n    return res;\n}\n/*\n\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence_range(long n) \n{\n    string\
    \ res = \"\";\n    foreach (i; 0 .. n + 1)\n    {\n        res += to!string(i);\n\
    \        if (i < n)\n            res += \" \";\n    }\n    return res;\n}\n/*\n\
    \ Return a list of numbers starting from 0 upto n inclusive.\n    >>> list_sequence(0L)\n\
    \    [0]\n    >>> list_sequence(5L)\n    [0, 1, 2, 3, 4, 5]\n    \n*/", "{\n \
    \   string s;\n    foreach (i; 0 .. n+1)\n        s ~= format(\"%s \", i);\n \
    \   return s;\n}", "{\n    string res = \"\";\n    foreach (i; 0..n+1) {\n   \
    \     res ~= to!string(i) ~ \" \";\n    }\n    return res.idup;\n}", "{\n\tstring\
    \ s = \"\";\n\tfor (int i = 0; i <= n; i++)\n\t{\n\t\ts += to!string(i) + \" \"\
    ;\n\t}\n\ts = s[0..$-1];\n\treturn s;\n}", "{\n    string s;\n    auto i = 0L;\n\
    \    for (; i < n; i++)\n    {\n        s ~= i;\n        s ~= \" \";\n    }\n\
    \    s ~= i;\n    return s;\n}", "{\n    if (n <= 0L) return \"0\";\n    string\
    \ s = \"\";\n    for (long i = 0L; i <= n; i++)\n    {\n        s = s ~ \" \"\
    \ ~ to!string(i);\n    }\n    return s[1..$];\n}", "{\n    string s;\n    for\
    \ (int i = 0; i <= n; i++)\n    {\n        s += \" \" + to!string(i);\n    }\n\
    \    return s;\n}\n/*\n Return all the Fibonacci numbers upto and including the\
    \ nth term.\n    >>> fibonacci(1L)\n    [0, 1]\n    >>> fibonacci(3L)\n    [0,\
    \ 1, 1, 2]\n*/", "{\n\t\n\tstring result;\n\t\n\twhile(n>=0)\n\t{\n\t\tresult\
    \ = result ~ integerToString(n);\n\t\tn=n-1;\n\t\tif(n>=0) result = result ~ \"\
    \ \";\n\t}\n\treturn result;\n\t\n}", "{\n    import std.array;\n    return iota(n\
    \ + 1L).map!(to!string).join;\n}", "{\n    string res = \"\";\n    for (int i\
    \ = 0; i <= n; i++)\n    {\n        res = res ~ i ~ \" \";\n    }\n    return\
    \ res;\n}", "{\n    string res = \"\";\n    foreach (i; 0..n) {\n        res ~=\
    \ to!string(i) ~ \" \";\n    }\n    return res;\n}", "{\n    string s;\n    foreach\
    \ (i; 0L .. n + 1L) \n    {\n        s ~= i;\n        if (i < n) \n        {\n\
    \            s ~= \" \";\n        }\n    }\n    return s;\n}", "{\n    string\
    \ s = \"\";\n    foreach (long i; 0..n+1) \n    {\n        s ~= (i).stringof ~\
    \ \" \";\n    }\n    return s;\n}\n/*\n    Return n-th Fibonacci number.\n   \
    \ >>> fib(0L)\n    0\n    >>> fib(10L)\n    55\n*/\nlong fib(long n) \n{\n   \
    \ if (n == 0L) \n    {\n        return 0L;\n    }\n    else if (n == 1L) \n  \
    \  {\n        return 1L;\n    }\n    else \n    {\n        return fib(n-1L) +\
    \ fib(n-2L);\n    }\n}\n/*\n    Return the first n primes.\n    >>> primes(0L)\n\
    \    []\n    >>> primes(1L)\n    [2]\n    >>> primes(5L)\n    [2, 3, 5, 7, 11]\n\
    */\nlong[] primes(long n) \n{\n    long[] p = new long[];\n    long j;\n    for\
    \ (long i = 2L; i < n; i++) \n    {\n        for (j = 2L; j <= i; j++) \n    \
    \    {\n            if (i % j == 0L) \n            {\n                break;\n\
    \            }\n        }\n        if (j == i) \n        {\n            p ~= i;\n\
    \        }\n    }\n    return p;\n}\n/*\n    Return true if \"s\" is a palindrome.\n\
    \    >>> is_palindrome(\"otto\")\n    true\n    >>> is_palindrome(\"ottt\")\n\
    \    false\n*/", "{\n    string s;\n    int i;\n    foreach(i; 0..n+1)\n    {\n\
    \        s ~= to!string(i) ~ \" \";\n    }\n    return s;\n}", "{\n    string\
    \ result;\n    foreach (i; 0 .. n + 1) \n    {\n        result ~= to!string(i)\
    \ ~ \" \";\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ long i = 0L;\n    for (; i <= n; ++i) \n    {\n        result += to!string(i);\n\
    \        if (i < n) \n        {\n            result += \" \";\n        }\n   \
    \ }\n    return result;\n}", "{\n    string s;\n    for (size_t i = 0; i <= n;\
    \ i++) \n    {\n        s ~= i.to!string ~ \" \";\n    }\n    return s.trimRight();\n\
    }", "{\n    char[] s;", "{\n    string ret = \"\";\n    long i = 0;\n    foreach(i;i<=n)\
    \ {\n        ret ~= ret.length ? \" \" : \"\";\n        ret ~= to!string(i);\n\
    \    }\n    return ret;\n}", "{\n    string ret;\n    for (long i = 0; i <= n;\
    \ i++)\n    {\n        ret ~= to!string(i) ~ \" \";\n    }\n    return ret;\n\
    }\n/*\n Return a string containing numbers starting from 0 upto n inclusive\n\
    \ joined with the given separator string. \n \n    >>> string_sequence_sep(0L,\
    \ \",\")\n    \"0\"\n    >>> string_sequence_sep(5L, \",\")\n    \"0,1,2,3,4,5\"\
    \n*/\nstring string_sequence_sep(long n, string sep) \n{\n    string ret;\n  \
    \  for (long i = 0; i <= n; i++)\n    {\n        ret ~= to!string(i) ~ sep;\n\
    \    }\n    return ret;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from first to last inclusive.\n If first is greater than last an empty\
    \ string is returned.\n    >>> string_sequence_full(0L, 0L)\n    \"0\"\n    >>>\
    \ string_sequence_full(5L, 7L)\n    \"5 6 7\"\n    >>> string_sequence_full(5L,\
    \ 4L)\n    \"\"\n*/\nstring string_sequence_full(long first, long last) \n{\n\
    \    string ret;\n    if (first <= last)\n    {\n        for (long i = first;\
    \ i <= last; i++)\n        {\n            ret ~= to!string(i) ~ \" \";\n     \
    \   }\n    }\n    return ret;\n}\n/*\n Return a string containing numbers starting\
    \ from first to last inclusive\n joined with the given separator string. \n If\
    \ first is greater than last an empty string is returned.\n    >>> string_sequence_full_sep(0L,\
    \ 0L, \",\")\n    \"0\"\n    >>> string_sequence_full_sep(5L, 7L, \",\")\n   \
    \ \"5,6,7\"\n    >>> string_sequence_full_sep(5L, 4L, \",\")\n    \"\"\n*/\nstring\
    \ string_sequence_full_sep(long first, long last, string sep) \n{", "{\n  string\
    \ str = \"\";\n  foreach(long i; 0L..n+1L)\n    str = str ~ to!string(i) ~ \"\
    \ \";\n  return str;\n}", "{\n    string result;\n    result~=to!string(n);\n\
    \    for(int i=n-1;i>=0;i--)\n    {\n        result~=\" \"~to!string(i);\n   \
    \ }\n    return result;\n}\n/*\n Return a n-by-n matrix of integers starting from\
    \ 0 upto n*n-1 inclusive.\n    >>> string_matrix(0L)\n    \"0\"\n    >>> string_matrix(1L)\n\
    \    \"0\"\n    >>> string_matrix(2L)\n    \"0 1\\n2 3\"\n    >>> string_matrix(3L)\n\
    \    \"0 1 2\\n3 4 5\\n6 7 8\"\n    >>> string_matrix(4L)\n    \"0 1 2 3\\n4 5\
    \ 6 7\\n8 9 10 11\\n12 13 14 15\"\n    \n*/\nstring string_matrix(long n)\n{\n\
    \    if(n==0)\n    {\n        return \"0\";\n    }\n    else if(n==1)\n    {\n\
    \        return \"0\";\n    }\n    else\n    {\n        string result;\n     \
    \   int max=n*n;\n        int k=0;\n        for(int i=0;i<n;i++)\n        {\n\
    \            for(int j=0;j<n;j++)\n            {\n                result~=to!string(k);\n\
    \                if(j!=n-1)\n                {\n                    result~=\"\
    \ \";\n                }\n                k++;\n            }\n            if(i!=n-1)\n\
    \            {\n                result~=\"\\n\";\n            }\n        }\n \
    \       return result;\n    }\n}\n/*\n Return a string representing the primes\
    \ upto n.\n    >>> string_primes(0L)\n    \"\"\n    >>> string_primes(1L)\n  \
    \  \"\"\n    >>> string_primes(2L)\n    \"2\"\n    >>> string_primes(3L)\n   \
    \ \"2 3\"\n    >>> string_primes(4L)\n    \"2 3\"\n    >>> string_primes(5L)\n\
    \    \"", "{\n    string s;\n    foreach (i; 0 .. n+1)\n        s ~= i.to!string;\n\
    \    return s;\n}\n/*\nReturn a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence_b(0L)\n    \"0\"\n    >>>\
    \ string_sequence_b(5L)\n    \"0 1 2 3 4 5\"\n*/\nstring string_sequence_b(long\
    \ n) \n{\n    string s;\n    foreach (i; 0 .. n+1)\n        s ~= i.to!string;\n\
    \    return s;\n}\n/*\nDetermine whether a positive integer is even.\n    >>>\
    \ is_even(0L)\n    true\n    >>> is_even(1L)\n    false\n    >>> is_even(2L)\n\
    \    true\n    >>> is_even(3L)\n    false\n*/", "{\n    string res = \"\";\n \
    \   foreach (i; 0L .. n + 1L) \n    {\n        res ~= \" \" ~ i.to!string;\n \
    \   }\n    return res[1 .. $];\n}", "{\n    return iota(n+1L).to!string;\n}",
  "{\n    string result;\n    for (int i = 0; i <= n; i++) \n    {\n        result\
    \ ~= i;\n        if (i < n)\n            result ~= \" \";\n    }\n    return result;\n\
    }", "{\n\treturn string_sequence(0L, n);\n}", "{\n    string ret = \"\";\n   \
    \ if (n >= 0) {\n        foreach (i; 0 .. n + 1) {\n            ret ~= i.to!string\
    \ ~ \" \";\n        }\n    }\n    else {\n        foreach (i; 0 .. -n + 1) {\n\
    \            ret ~= (-i).to!string ~ \" \";\n        }\n    }\n    return ret.trimRight();\n\
    }", "{\n    string s;\n    for (long i = 0; i <= n; i++) \n    {\n        s +=\
    \ to!string(i);\n        if (i < n) \n        {\n            s += \" \";\n   \
    \     }\n    }\n    return s;\n}", "{\n    auto result = to!string(0L);\n    for\
    \ (long i = 1L; i <= n; i++)\n    {\n        result ~= \" \" ~ to!string(i);\n\
    \    }\n    return result;\n}", "{\n    static string result = \"\";\n    static\
    \ long i = 0L;\n    static bool first_call = true;\n    static long last_n = 0L;\n\
    \    if (first_call)\n    {\n        first_call = false;\n        result = \"\"\
    ;\n        i = 0L;\n        last_n = n;\n    }\n    if (i <= n)\n    {\n     \
    \   //result +=  to!string(i);\n        result = result ~ \" \" ~ to!string(i);\n\
    \        i++;\n        string_sequence(n);\n    }\n    if (i > n && last_n !=\
    \ n)\n    {\n        first_call = true;\n        string_sequence(n);\n    }\n\
    \    return result;\n}\n/*\nCompute the sum of squares of numbers from 0 up to\
    \ n\n    >>> sum_squares(5L)\n    30L\n    >>> sum_squares(0L)\n    0L\n    >>>\
    \ sum_squares(1L)\n    1L\n*/\nlong sum_squares(long n)\n{\n    static long result\
    \ = 0L;\n    static long i = 0L;\n    static bool first_call = true;\n    static\
    \ long last_n = 0L;\n    if (first_call)\n    {\n        first_call = false;\n\
    \        result = 0L;\n        i = 0L;\n        last_n = n;\n    }\n    if (i\
    \ <= n)\n    {\n        result += i*i;\n        i++;\n        sum_squares(n);\n\
    \    }\n    if (i > n && last_n != n)\n    {\n        first_call = true;\n   \
    \     sum_squares(n);\n    }\n    return result;\n}\n/*\nCompute the sum of 0\
    \ up to n\n    >>> sum_naturals(5L)\n    15L\n    >>> sum_naturals(0L)\n    0L\n\
    \    >>> sum_naturals(1L)\n    1L\n*/\nlong sum_naturals(long n)\n{\n    static\
    \ long result = 0L;\n    static long i = 0L;\n    static", "{\n    string result\
    \ = \"\";\n    for (long i = 0; i <= n; i++)\n    {\n        result += i;\n  \
    \      if (i < n)\n            result += \" \";\n    }\n    return result;\n}\n\
    /*\n A simple 2-D vector class\n    >>> vector2 v1(1.2, 3.4);\n    >>> v1\n  \
    \  vector2(1.2, 3.4)\n    >>> v1.x\n    1.2\n    >>> v1.y\n    3.4\n    >>> v1\
    \ += vector2(2.3, 4.5);\n    >>> v1\n    vector2(3.5, 7.9)\n    >>> v1 - vector2(0.1,\
    \ -0.2)\n    vector2(3.4, 8.1)\n    >>> v1 * 2.0\n    vector2(7.0, 15.8)\n   \
    \ >>> v1 / 2.0\n    vector2(1.75, 3.95)\n    >>> v1.magnitude\n    9.31961594466\n\
    \    >>> v1.normalized\n    vector2(0.384615384615, 0.923076923077)\n    >>> vector2.zero\n\
    \    vector2(0.0, 0.0)\n    >>> vector2.i\n    vector2(1.0, 0.0)\n    >>> vector2.j\n\
    \    vector2(0.0, 1.0)\n*/\nclass vector2 \n{\n    double x, y;\n    // Constructor\n\
    \    this(double x, double y) \n    {\n        this.x = x;\n        this.y = y;\n\
    \    }\n    // Constructor\n    this(vector2 other) \n    {\n        this.x =\
    \ other.x;\n        this.y = other.y;\n    }\n    // Operator overload\n    @disable\
    \ this(this) {}\n    vector2 opAssign(vector2 other) \n    {\n        this.x =\
    \ other.x;\n        this.y = other.y;\n        return this;\n    }\n    vector2\
    \ opAddAssign(vector2 other) \n   ", "{\n   string p = \"\";\n   while (n >= 0)\
    \ \n   {\n      p = ( p ~ \" \" ~ to!string(n));\n      n--;\n   }\n   return\
    \ trim(p);\n}\n/*\n Write a function to check if the `number` is prime or not.\n\
    \    >>> is_prime(1L)\n    false\n    >>> is_prime(2L)\n    true\n    >>> is_prime(3L)\n\
    \    true\n    >>> is_prime(4L)\n    false\n    >>> is_prime(5L)\n    true\n \
    \   >>> is_prime(6L)\n    false\n    >>> is_prime(101L)\n    true\n*/", "{\n \
    \   import std.string;\n    return from(iota(0L, n + 1L))\n        .map!(to!string)\n\
    \        .joiner(\" \")\n        .toString();\n}", "{\n    string s;\n    for\
    \ (long i = 0; i <= n; i++)\n    {\n        s ~= to!string(i) ~ \" \";\n    }\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(int n) \n{\n    string\
    \ s;\n    for (int i = 0; i <= n; i++)\n    {\n        s ~= to!string(i) ~ \"\
    \ \";\n    }\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0.0)\n  \
    \  \"0\"\n    >>> string_sequence(5.0)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(double n) \n{\n    string s;\n    for (int i = 0; i <= n; i++)\n\
    \    {\n        s ~= to!string(i) ~ \" \";\n    }\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0.0f)\n    \"0\"\n    >>> string_sequence(5.0f)\n   \
    \ \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(float n) \n{\n    string s;\n\
    \    for (int i = 0; i <= n; i++)\n    {\n        s ~= to!string(i) ~ \" \";\n\
    \    }\n    return s;\n}", "{\n    long i = 0L;\n    string s = \"\";\n    foreach\
    \ (i; 0L..n+1L)\n    {\n        s = s ~ i.to!string ~ \" \";\n    }\n    return\
    \ s;\n}", "{\n    string ret_str;\n    ret_str = \"\";\n    foreach(int i; 0..n+1)\n\
    \    {\n        ret_str = ret_str ~ to!string(i) ~ \" \";\n    }\n    return ret_str;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n in reverse order.\n    >>> string_sequence_reversed(0L)\n    \"0\"\n    >>>\
    \ string_sequence_reversed(5L)\n    \"5 4 3 2 1 0\"\n    \n*/\nstring string_sequence_reversed(long\
    \ n) \n{\n    string ret_str;\n    ret_str = \"\";\n    foreach(int i; 0..n+1)\n\
    \    {\n        ret_str = ret_str ~ to!string(n-i) ~ \" \";\n    }\n    return\
    \ ret_str;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from n downto 0.\n    >>> string_sequence_reversed(0L)\n    \"0\"\n    >>> string_sequence_reversed(5L)\n\
    \    \"5 4 3 2 1 0\"\n    \n*/\nstring string_sequence_from_n(long n) \n{\n  \
    \  string ret_str;\n    ret_str = \"\";\n    foreach(int i; 0..n+1)\n    {\n \
    \       ret_str = ret_str ~ to!string(n-i) ~ \" \";\n    }\n    return ret_str;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from n downto\
    \ 0.\n    >>> string_sequence_reversed(0L)\n    \"0\"\n    >>> string_sequence_reversed(5L)\n\
    \    \"5 4 3 2 1 0\"\n    \n*/\nstring string_sequence_from_n_reversed(long n)\
    \ \n{\n    string ret_str;\n    ret_str = \"\";\n    foreach(int i; 0..n+1)\n\
    \    {\n        ret_str = ret_str ~ to!string(i) ~ \" \";\n    }\n    return",
  "{\n    string s;\n    foreach (i; 0L .. n+1L) {\n        if (s.length) s ~= \"\
    \ \";\n        s ~= std.conv.to!string(i);\n    }\n    return s;\n}\n/*\n Return\
    \ the sum of the numbers from 0 upto n inclusive.\n    >>> sum_sequence(0L)\n\
    \    0\n    >>> sum_sequence(5L)\n    15\n*/\nlong sum_sequence(long n) \n{\n\
    \    long s = 0L;\n    foreach (i; 0L .. n+1L) {\n        s += i;\n    }\n   \
    \ return s;\n}", "{\n    char[] sequence = new char[];\n    for (int i = 0; i\
    \ <= n; i++)\n    {\n        sequence ~= to!string(i);\n        sequence ~= '\
    \ ';\n    }\n    return sequence[0..$-1];\n}\n/*\n Return a string containing\
    \ space-delimited odd numbers starting from 1 upto n inclusive.\n    >>> string_sequence_odd(5L)\n\
    \    \"1 3 5\"\n*/\nstring string_sequence_odd(long n) \n{\n    char[] sequence\
    \ = new char[];\n    for (int i = 1; i <= n; i += 2)\n    {\n        sequence\
    \ ~= to!string(i);\n        sequence ~= ' ';\n    }\n    return sequence[0..$-1];\n\
    }\n/*\n Return a string containing space-delimited even numbers starting from\
    \ 2 upto n inclusive.\n    >>> string_sequence_even(5L)\n    \"2 4\"\n*/\nstring\
    \ string_sequence_even(long n) \n{\n    char[] sequence = new char[];\n    for\
    \ (int i = 2; i <= n; i += 2)\n    {\n        sequence ~= to!string(i);\n    \
    \    sequence ~= ' ';\n    }\n    return sequence[0..$-1];\n}\n/*\n Return a string\
    \ containing space-delimited integers in the Fibonacci sequence starting from\
    \ 1 upto n inclusive.\n    >>> string_sequence_fibonacci(5L)\n    \"1 1 2 3 5\"\
    \n*/\nstring string_sequence_fibonacci(long n) \n{\n    int fibonacci(int n)\n\
    \    {\n        return (n <= 1) ? n : fibonacci(n - 1) + fibonacci(n - 2);\n \
    \   }\n    char[] sequence = new char[];\n    for (int i = 0; i <= n; i++)\n \
    \   {\n        sequence ~= to!string(fibonacci(i));\n        sequence ~= ' ';\n\
    \    }\n    return sequence[0..$-1];\n}\n/*\n Return a string containing space-delimited\
    \ positive integers in the factorial sequence starting from 1", "{\n    string\
    \ result = to!string(n);", "{\n    auto result = \"\";\n    foreach (i; 0 .. n\
    \ + 1) \n    {\n        result ~= i.to!string;\n        if (i < n) \n        {\n\
    \            result ~= \" \";\n        }\n    }\n    return result;\n}\n// Return\
    \ the nth value of the Fibonacci sequence, starting from 0.\nlong fibonacci(long\
    \ n) \n{\n    if (n == 0)\n    {\n        return 0;\n    }\n    else if (n ==\
    \ 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return fibonacci(n\
    \ - 1) + fibonacci(n - 2);\n    }\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive,\n where each number is the nth value\
    \ of the Fibonacci sequence.\n    >>> string_fibonacci(0L)\n    \"0\"\n    >>>\
    \ string_fibonacci(5L)\n    \"0 1 1 2 3 5\"\n    \n*/\nstring string_fibonacci(long\
    \ n) \n{\n    auto result = \"\";\n    foreach (i; 0 .. n + 1) \n    {\n     \
    \   result ~= fibonacci(i).to!string;\n        if (i < n) \n        {\n      \
    \      result ~= \" \";\n        }\n    }\n    return result;\n}\n// Return a\
    \ string containing n space-delimited random values in the range 0-n.\nstring\
    \ string_random(long n) \n{\n    auto result = \"\";\n    foreach (i; 0 .. n +\
    \ 1) \n    {\n        result ~= uniform(0L, n + 1).to!string;\n        if (i <\
    \ n) \n        {\n            result ~= \" \";\n        }\n    }\n    return result;\n\
    }\n// Return the median value of the list given.\nlong median(long[] list) \n\
    {\n    if (list.length < 1) \n    {\n        return -1;\n    }\n    else if (list.length\
    \ % 2 == 1) \n    {\n        return", "{\n    string result = \"\";\n    for (long\
    \ i = 0; i <= n; i++) \n    {\n        result += \" \" + to!string(i);\n    }\n\
    \    return trim(result);\n}", "{\n    string result;\n    foreach (i; 0L .. n\
    \ + 1L) \n    {\n        if (result.length != 0) \n        {\n            result\
    \ ~= \" \";\n        }\n        result ~= to!string(i);\n    }\n    return result;\n\
    }\n/*\n Create a string of space-delimited numbers starting from 0 upto n inclusive.\n\
    \ \n */\nstring string_sequence_slice(long n) \n{\n    return string_sequence(n)[0L\
    \ .. $];\n}", "{\n    string s = \"\";\n    for (int i = 0; i <= n; i++) \n  \
    \  {\n        s += i + \" \";\n    }\n    return s;\n}\n/*\nGiven a string, return\
    \ a string where for every char in the original, there are two chars.\n    >>>\
    \ double_char('The')\n    'TThhee'\n    >>> double_char('AAbb')\n    'AAAAbbbb'\n\
    \    >>> double_char('Hi-There')\n    'HHii--TThheerree'\n*/\nstring double_char(string\
    \ str) \n{\n    string t = \"\";\n    for (int i = 0; i < str.length; i++) \n\
    \    {\n        t += str[i] + str[i];\n    }\n    return t;\n}\n/*\nReturn the\
    \ number of times that the string \"hi\" appears anywhere in the given string.\n\
    \    >>> count_hi('abc hi ho')\n    1\n    >>> count_hi('ABChi hi')\n    2\n \
    \   >>> count_hi('hihi')\n    2\n*/", "{\n    if (n == 0L) return \"0\";\n   \
    \ auto result = new string[n + 1L];\n    foreach (i; 0L .. n + 1L) \n    {\n \
    \       result[i] = to!string(i);\n    }\n    return std.algorithm.join(result,\
    \ \" \");\n}", "{\n    string sequence = new string[n+1];\n    foreach (i, ref\
    \ s; sequence) {\n        s = to!string(i);\n    }\n    return sequence.join(\"\
    \ \");\n}", "{\n\tstring result = \"\";\n\tif (n == 0L) \n\t{\n\t\tresult = \"\
    0\";\n\t}\n\telse \n\t{\n\t\tforeach (i; 0L .. n + 1L) \n\t\t{\n\t\t\tresult ~=\
    \ \" \" ~ to!string(i);\n\t\t}\n\t}\n\treturn result;\n}\n/*\n  Return a string\
    \ containing comma-separated numbers starting from 0 upto n inclusive.\n    >>>\
    \ comma_sequence(0L)\n    \"0\"\n    >>> comma_sequence(5L)\n    \"0, 1, 2, 3,\
    \ 4, 5\"\n*/\nstring comma_sequence(long n) \n{\n\tstring result = \"\";\n\tif\
    \ (n == 0L) \n\t{\n\t\tresult = \"0\";\n\t}\n\telse \n\t{\n\t\tforeach (i; 0L\
    \ .. n + 1L) \n\t\t{\n\t\t\tresult ~= \", \" ~ to!string(i);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n/*\n  Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive\n  separated by the provided string.\n    >>> mixed_sequence(0L,\
    \ \";\")\n    \"0\"\n    >>> mixed_sequence(5L, \", \")\n    \"0, 1, 2, 3, 4,\
    \ 5\"\n*/\nstring mixed_sequence(long n, string separator) \n{\n\tstring result\
    \ = \"\";\n\tif (n == 0L) \n\t{\n\t\tresult = \"0\";\n\t}\n\telse \n\t{\n\t\t\
    foreach (i; 0L .. n + 1L) \n\t\t{\n\t\t\tresult ~= separator ~ to!string(i);\n\
    \t\t}\n\t}\n\treturn result;\n}\n/*\n  Return a string containing whitespace-delimited\
    \ numbers starting from 0 upto n inclusive\n  separated by the provided string.\n\
    \    >>> mixed_sequence(0L, \";\")\n    \"0\"\n    >>> mixed_sequence(5L, \",\
    \ \")\n    \"0, 1, 2, 3, 4, 5", "{\n    string result = \"\";\n    int i;\n  \
    \  for (i = 0; i <= n; i++)\n    {\n        result += format(\"%d \", i);\n  \
    \  }\n    return result;\n}", "{\n    string result = \"\";\n    foreach (idx;\
    \ 0L .. n + 1L)\n    {\n        result ~= to!string(idx) ~ \" \";\n    }\n   \
    \ return result.idup;\n}", "{\n    string s;\n    auto casted_n = cast(size_t)n;\n\
    \    for (size_t i = 0L; i <= casted_n; i++)\n    {\n        s ~= to!string(i);\n\
    \        if (i < casted_n)\n            s ~= \" \";\n    }\n    return s;\n}",
  "{\n    auto r = new string[];\n    foreach (i; 0 .. n + 1)\n        r ~= to!string(i);\n\
    \    return join(r, \" \");\n}", "{\n    if (n < 0L)\n        return \"\";\n \
    \   return string_sequence(n-1L) ~ \" \" ~ to!string(n);\n}", "{\n    string result;\n\
    \    auto s = result ~ n;\n    for (int i = 0; i < n; i++)\n        s ~ i;\n \
    \   return result;\n}", "{\n    string result;\n    result.clear();\n    foreach\
    \ (i; 0L .. n + 1L)\n    {\n        result ~= $i;\n        if (i != n) result\
    \ ~= \" \";\n    }\n    return result;\n}", "{\n    string result = \"\";\n  \
    \  for (long i = 0; i <= n; i++) \n    {\n        result += to!string(i);\n  \
    \      if (i < n) \n        {\n            result += \" \";\n        }\n    }\n\
    \    return result;\n}", "{\n    string s = \"\";\n    foreach (i; 0L .. n+1L)\
    \ \n    {\n\ts ~= i.to!string ~ \" \";\n    }\n    return s;\n}\n/*\n Return a\
    \ string containing space-delimited numbers starting from n upto 1 inclusive.\n\
    \    >>> string_sequence_reverse(0L)\n    \"0\"\n    >>> string_sequence_reverse(5L)\n\
    \    \"5 4 3 2 1 0\"\n*/\nstring string_sequence_reverse(long n) \n{\n    string\
    \ s = \"\";\n    foreach (i; n.countDown) \n    {\n\ts ~= i.to!string ~ \" \"\
    ;\n    }\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive\n in descending order.\n    >>> string_sequence_descending(0L)\n\
    \    \"0\"\n    >>> string_sequence_descending(5L)\n    \"5 4 3 2 1 0\"\n    \n\
    */\nstring string_sequence_descending(long n) \n{\n    string s = \"\";\n    foreach\
    \ (i; n.countDown) \n    {\n\ts ~= i.to!string ~ \" \";\n    }\n    return s;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from n upto\
    \ 1 inclusive\n in descending order.\n    >>> string_sequence_descending_reverse(0L)\n\
    \    \"0\"\n    >>> string_sequence_descending_reverse(5L)\n    \"5 4 3 2 1 0\"\
    \n    \n*/\nstring string_sequence_descending_reverse(long n) \n{\n    string\
    \ s = \"\";\n    foreach (i; n.countDown) \n    {\n\ts ~= i.to!string ~ \" \"\
    ;\n    }\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ with absolute value starting from 0 upto\n n inclusive.\n    >>> string_sequence_absolute(0L)\n\
    \    \"0\"\n    >>> string_sequence_absolute(5L)\n    \"0 1 2 3 4 5\"\n    \n",
  "{\n    static import std.format;\n    return format(\"%.0s%(%d%)\", \" \", iota(n\
    \ + 1L));\n}", "{\n\tstring result = \"\";\n\tlong i = 0;\n\tfor (; i < n; ++i)\n\
    \t{\n\t\tresult += to!string(i) + \" \";\n\t}\n\tresult += to!string(i);\n\treturn\
    \ result;\n}", "{\n    string result;\n    foreach (i; 0L .. n+1L) \n    {\n \
    \       result ~= i.to!string ~ \" \";\n    }\n    return result;\n}", "{\n\t\
    string s = \"\";\n\tfor (long i = 0; i <= n; i++) \n\t{\n\t\ts += to!string(i);\n\
    \t\tif (i < n)\n\t\t\ts += \" \";\n\t}\n\treturn s;\n}\n/*\n Return a sequence\
    \ of strings containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    [\"0\"]\n    >>> string_sequence(5L)\n    [\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\"]\n    \n*/\nstring[] string_sequence(long\
    \ n)\n{\n\tstring[] s = new string[n + 1];\n\tfor (long i = 0; i <= n; i++) \n\
    \t{\n\t\ts[i] = to!string(i);\n\t}\n\treturn s;\n}\n/*\n Return a sequence of\
    \ strings containing space-delimited numbers starting from from upto to inclusive.\n\
    \    >>> string_sequence(0L, 5L)\n    [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"\
    ]\n    >>> string_sequence(5L, 0L)\n    [\"5\", \"4\", \"3\", \"2\", \"1\", \"\
    0\"]\n    \n*/\nstring[] string_sequence(long from, long to)\n{\n\tif (from >\
    \ to) \n\t{\n\t\treturn [toString(to + n) : n <- [0..abs(from - to)]];\n\t}\n\t\
    return [toString(from + n) : n <- [0..abs(from - to)]];\n}\n/*\n Return a sequence\
    \ of integers containing numbers starting from 0 upto n inclusive.\n    >>> int_sequence(0L)\n\
    \    [0]\n    >>> int_sequence(5L)\n    [0, 1, 2, 3, 4, 5]\n    \n*/\nlong[] int_sequence(long\
    \ n)\n{\n\tlong[] s = new long[n + 1];\n\tfor (long i = 0; i <= n; i++) \n\t{\n\
    \t\ts[i] = i;\n\t}\n\treturn s;\n}\n/*\n Return a", "{\n\tstring s = \"\";\n\t\
    for (long i = 0; i <= n; i++) \n\t{\n\t\ts += (i <= n-1) ? to!string(i) + \" \"\
    \ : to!string(i);\n\t}\n\treturn s;\n}\n/*\n  Given a string sequence like '0\
    \ 1 2 3 4 5', return the sum of the first n numbers.\n    >>> sum_of_string_sequence(\"\
    0 1 3 3 6 10\", 3L)\n    6\n    >>> sum_of_string_sequence(\"0 1 3 3 6 10\", 6L)\n\
    \    21\n    >>> sum_of_string_sequence(\"0 1 3 3 6 10\", 10L)\n    55\n*/\nlong\
    \ sum_of_string_sequence(string s, long n) \n{\n\tlong sos = 0;\n\tforeach (i;\
    \ 0 .. n) \n\t{\n\t\tlong start = 0;\n\t\tlong end = s.find(\" \", start);\n\t\
    \tsos += to!long(s[start .. end]);\n\t\tstart = end + 1;\n\t}\n\treturn sos;\n\
    }\n/*\n  Return n factorial.\n    >>> factorial(1L)\n    1\n    >>> factorial(3L)\n\
    \    6\n    >>> factorial(10L)\n    3628800\n*/\nlong factorial(long n) \n{\n\t\
    long f = 1;\n\tforeach (i; 1 .. n+1) \n\t{\n\t\tf *= i;\n\t}\n\treturn f;\n}\n\
    /*\n  Return nth Fibonacci number.\n    >>> fibonacci(0L)\n    0\n    >>> fibonacci(1L)\n\
    \    1\n    >>> fibonacci(2L)\n    1\n    >>> fibonacci(3L)\n    2\n    >>> fibonacci(4L)\n\
    \    3\n    >>> fibonacci(5L)\n    5\n    >>> fibonacci(6L)\n    8\n    >>> fibonacci(7L)\n\
    \    13\n*/\nlong fibonacci(long n) \n{\n\tif (n == 0) \n\t{\n\t", "{\n    string\
    \ result = \"\";\n    foreach (immutable i; 0..=n)\n    {\n        result ~= i;\n\
    \        if (i < n)\n            result ~= \" \";\n    }\n    return result;\n\
    }", "{\n    string ret = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n  \
    \      ret += i;\n        if (i != n)\n            ret += \" \";\n    }\n    return\
    \ ret;\n}\n/*\n Return the string containing numbers between m and n inclusive\
    \ and\n space-delimited.\n    >>> string_sequence(2L, 5L)\n    \"2 3 4 5\"\n \
    \   >>> string_sequence(3L, 3L)\n    \"3\"\n    >>> string_sequence(3L, 2L)\n\
    \    \"\"\n    \n*/\nstring string_sequence(long m, long n) \n{\n    if (m > n)\n\
    \        return \"\";\n    string ret = \"\";\n    for (long i = m; i <= n; i++)\
    \ \n    {\n        ret += i;\n        if (i != n)\n            ret += \" \";\n\
    \    }\n    return ret;\n}\n/*\n Return the string representation of this number,\
    \ base is a\n number base from 2 to 36.\n    >>> repr_int(0x10L, 16L)\n    \"\
    16\"\n    >>> repr_int(0xFFFFL, 16L)\n    \"ffff\"\n    >>> repr_int(0xFFFFFFFFL,\
    \ 16L)\n    \"ffffffff\"\n    >>> repr_int(0x7FFFFFFFL, 16L)\n    \"7fffffff\"\
    \n    >>> repr_int(0x7FFFFFFFL, 8L)\n    \"17777777777\"\n    >>> repr_int(0x7FFFFFFFL,\
    \ 2L)\n    \"1111111111111111111111111111111\"\n    >>> repr_int(127L, 10L)\n\
    \    \"127\"\n    >>> repr_int(127L, 2L)\n    \"1111111\"\n    >>> repr_int(0L,\
    \ 10L)\n    \"0\"\n    >>> repr_int(0L, 2L)\n    \"0\"\n    \n*/\nstring repr_int(long\
    \ n, long base) \n{\n    string result = \"\";\n    string digit = \"0123456789abcdefghijklmnopqrstuvwxy",
  "{\n    return join(map!(to!string)(iota(0L, n + 1L))());\n}", "{\n    string ret\
    \ = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n        ret += to!string(i);\n\
    \        if (i != n) ret += \" \";\n    }\n    return ret;\n}", "{\n    string\
    \ result = \"\";\n    foreach (long i; 0..n + 1)\n        result ~= \" \" ~ to!string(i);\n\
    \    return result[1..$];\n}\n/*\nReturn a string containing comma-delimited numbers\
    \ starting from n downto 0 inclusive.\n    >>> string_sequence_backwards(0L)\n\
    \    \"0\"\n    >>> string_sequence_backwards(5L)\n    \"5 4 3 2 1 0\"\n    \n\
    */\nstring string_sequence_backwards(long n) \n{\n    string result = \"\";\n\
    \    foreach (long i; n..-1)\n        result ~= \" \" ~ to!string(i);\n    return\
    \ result[1..$];\n}\n/*\nReturn a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive,\nand then comma-delimited numbers starting from n downto\
    \ 0 inclusive.\n    >>> string_sequence_and_backwards(0L)\n    \"0\"\n    >>>\
    \ string_sequence_and_backwards(5L)\n    \"0 1 2 3 4 5 5 4 3 2 1 0\"\n    \n*/\n\
    string string_sequence_and_backwards(long n) \n{\n    return string_sequence(n)\
    \ ~ \" \" ~ string_sequence_backwards(n);\n}\n/*\nReturn a string containing n\
    \ copies of the character ch.\n    >>> string_repeat('x',0L)\n    \"\"\n    >>>\
    \ string_repeat('x',3L)\n    \"xxx\"\n    \n*/\nstring string_repeat(string ch,\
    \ long n) \n{\n    return ch.replicate(n);\n}\n/*\nReturn a string containing\
    \ n copies of the string item.\n    >>> string_replicate(\"abc\",0L)\n    \"\"\
    \n    >>> string_replicate(\"abc\",3L)\n    \"abcabcabc\"\n    \n*/\nstring string_replicate(string\
    \ item, long n) \n{\n    return item.replicate(n);\n}\n/*\nReturn a string containing\
    \ the numbers 1 upto n inclusive.\n    >>> string_nums(0L)\n    \"\"\n    >>>\
    \ string_nums(3L)\n    \"123\"", "{\n    string result = \"\";\n    foreach (long\
    \ i; 0..n+1) \n    {\n        result ~= to!string(i) ~ \" \";\n    }\n    return\
    \ result;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence_iterator(0L)\n    \"0\"\n\
    \    >>> string_sequence_iterator(5L)\n    \"0 1 2 3 4 5\"\n*/\nstring string_sequence_iterator(long\
    \ n) \n{\n    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n\
    \        result ~= to!string(i) ~ \" \";\n    }\n    return result;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence_while(0L)\n    \"0\"\n    >>> string_sequence_while(5L)\n\
    \    \"0 1 2 3 4 5\"\n*/\nstring string_sequence_while(long n) \n{\n    string\
    \ result = \"\";\n    while (n >= 0) \n    {\n        result ~= to!string(n) ~\
    \ \" \";\n        n--;\n    }\n    return result;\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_do_while(0L)\n\
    \    \"0\"\n    >>> string_sequence_do_while(5L)\n    \"0 1 2 3 4 5\"\n*/\nstring\
    \ string_sequence_do_while(long n) \n{\n    string result = \"\";\n    do\n  \
    \  {\n        result ~= to!string(n) ~ \" \";\n        n--;\n    } while (n >=\
    \ 0);\n    return result;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence_foreach(0L)\n\
    \    \"0\"\n    >>> string_sequence_foreach(5L)\n    \"0 1 2 3 4 5\"\n*/\nstring\
    \ string_sequence_foreach(long n) ", "{\n    string result = \"\";\n    foreach\
    \ (i; 0L .. n + 1L)\n    {\n        result ~= \" \" ~ to!string(i);\n    }\n \
    \   return result[1 .. $];\n}\n \n/*\n Convert a number to a Roman numeral as\
    \ string.\n    >>> to_roman(1L)\n    \"I\"\n    >>> to_roman(10L)\n    \"X\"\n\
    \    >>> to_roman(1000L)\n    \"M\"\n    >>> to_roman(499L)\n    \"CDXCIX\"\n\
    \    >>> to_roman(3999L)\n    \"MMMCMXCIX\"\n*/\nstring to_roman(long n)\n{\n\
    \    static const char[] ones = \" IVXLCDM\",\n                       fives =\
    \ \"VLD\";\n    static const int[] values = [ 1, 5, 10, 50, 100, 500, 1000 ];\n\
    \    string result = \"\";\n    long i = 6;\n    while (n > 0)\n    {\n      \
    \  long digit = n % 10;\n        n /= 10;\n        if (digit == 9)\n        {\n\
    \            result = ones[i] ~ ones[i+2] ~ result;\n        }\n        else if\
    \ (digit >= 5)\n        {\n            digit -= 5;\n            result = fives[i/2]\
    \ ~ result;\n        }\n        else if (digit == 4)\n        {\n            result\
    \ = ones[i] ~ fives[i/2] ~ result;\n        }\n        else\n        {\n     \
    \       result = repeat(ones[i], digit) ~ result;\n        }\n        i -= 2;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    for (long i\
    \ = 0; i <= n; i++) \n    {\n        result += to!string(i);\n        if (i <\
    \ n)\n            result += \" \";\n    }\n    return result;\n}\n/*\n Return\
    \ a one-line string containing a CSV list of numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence_csv(0L)\n    \"0\"\n    >>> string_sequence_csv(5L)\n\
    \    \"0, 1, 2, 3, 4, 5\"\n    \n*/\nstring string_sequence_csv(long n) \n{\n\
    \    string result = \"\";\n    for (long i = 0; i <= n; i++) \n    {\n      \
    \  result += to!string(i);\n        if (i < n)\n            result += \", \";\n\
    \    }\n    return result;\n}\n/*\n Return a one-line string containing a CSV\
    \ list of numbers starting from 0 upto n inclusive.\n    >>> string_sequence_csv_w(0L)\n\
    \    \"0\"\n    >>> string_sequence_csv_w(5L)\n    \"0, 1, 2, 3, 4, 5\"\n    \n\
    */\nstring string_sequence_csv_w(long n) \n{\n    return string_sequence_csv(n);\n\
    }\n/*\n Return a one-line string containing a CSV list of numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence_csv_w(0L)\n    \"0\"\n    >>> string_sequence_csv_w(5L)\n\
    \    \"0, 1, 2, 3, 4, 5\"\n    \n*/\nstring string_sequence_csv_ww(long n) \n\
    {\n    return string_sequence_csv(n);\n}\n/*\n Return a one-line string containing\
    \ a CSV list of numbers starting from 0 upto n inclusive.\n    >>> string_sequence_csv_w(0L)\n\
    \    \"0\"\n    >>> string_sequence_csv_w(5L)\n    \"0, 1, 2, 3, 4, 5\"\n    \n\
    */\nstring string_sequence_csv_www(long n) \n{\n    return string", "{\n    string\
    \ s;\n    foreach (i; 0L .. n+1L)\n    {\n        s ~= i;\n        if (i!=n)\n\
    \            s ~= \" \";\n    }\n    return s;\n}\n/*\n Choose the number of nearest\
    \ neighbors to use for predicting\n    >>> knn(4L)\n    4\n*/\nlong knn(long n_samples)\
    \ \n{\n    return max(3L, n_samples - 1L);\n}", "{\n    string s = \"\";\n   \
    \ foreach (i; 0..n + 1)\n    {\n        s ~= i.to!string;\n        s ~= \" \"\
    ;\n    }\n    return s.idup;\n}\n/*\n List of lists is a list of lists to process,\
    \ which should be of the form:\n \n [\n   [\"AAAA\", \"BBBB\", \"CCCC\"],\n  \
    \ [\"DDDD\", \"EEEE\", \"FFFF\"],\n   [\"GGGG\", \"HHHH\", \"IIII\"]\n ]\n \n\
    \ We want to combine each list into a single string and return the resulting list:\n\
    \ \n [\n   \"AAAABBBBCCCC\",\n   \"DDDDEEEEFFFF\",\n   \"GGGGHHHHIIII\"\n ]\n\
    \ \n*/\nstring[] list_of_lists(string[][] list_of_lists) \n{\n    string[] result;\n\
    \    foreach (list; list_of_lists)\n    {\n        result ~= join(list);\n   \
    \ }\n    return result;\n}\n/*\n Given a string of comma separated numbers, return\
    \ a string containing each number in the format:\n \n    \"AA\" -> \"A, A\"\n\
    \    \"ABC\" -> \"A, B, C\"\n    \"AABCC\" -> \"A, A, B, C, C\"\n    \n*/\nstring\
    \ string_to_comma_separated_string(string s) \n{\n    string result = \"\";\n\
    \    foreach (c; s)\n    {\n        result ~= c.to!string;\n        result ~=\
    \ \", \";\n    }\n    return result.idup;\n}\n/*\n Given a string of comma separated\
    \ numbers, return a string containing a range containing numbers \n with the following\
    \ format:\n \n \"1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54",
  "{\n    if (n == 0L)\n    {\n        return \"0\";\n    }\n    else \n    {\n  \
    \      string result = \"\";\n        for (long i = 0L; i <= n; i++)\n       \
    \ {\n            result = result ~ to!string(i) ~ \" \";\n        }\n        return\
    \ result;\n    }\n}\n/*\n Count the number of multiples of `base` in the range\
    \ `[start, stop)`.\n \n    >>> count_multiples(2L, 4L, 6L)\n    2\n    >>> count_multiples(3L,\
    \ 6L, 12L)\n    4\n    \n*/\nlong count_multiples(long base, long start, long\
    \ stop) \n{\n    long count = 0L;\n    for (long i = start; i < stop; i++)\n \
    \   {\n        if (i % base == 0L)\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n/*", "{\n    if (n == 0L)\n        return \"0\"\
    ;\n    string result = \"\";\n    foreach (i; 0 .. n + 1)\n        result ~= to!string(i)\
    \ ~ \" \";\n    return result[0 .. $ - 1];\n}", "    if (n >= 0L) {\n        string\
    \ result = new string;\n        for (long i = 0L; i <= n; i++)\n            result\
    \ ~= i.to!string;\n        return result;\n    } else\n        throw new Exception(\"\
    n must be non-negative\");", "{\n    return n < 1 ? \"0\" : format(\"%s %s\",\
    \ string_sequence(n - 1), n);\n}", "{\n    string result;\n    auto e = n + 1;\n\
    \    for (long i = 0; i < e; i++) \n    {\n        result ~= to!string(i);\n \
    \       if (i < e - 1) \n        {\n            result ~= \" \";\n        }\n\
    \    }\n    return result;\n}\n/*\n Return a string containing items from the\
    \ iterable object using joiner as the delimiter.\n    >>> string_from_iterable([\"\
    1\", \"2\", \"3\"], \", \")\n    \"1, 2, 3\"\n    \n*/\nstring string_from_iterable(R)(R\
    \ range) \n{\n    return string_from_iterable(range, \"\");\n}\nstring string_from_iterable(R,\
    \ JoinType)(R range, JoinType joiner) \n{\n    string result;\n    auto e = range.length;\n\
    \    for (size_t i = 0; i < e; i++) \n    {\n        result ~= range[i];\n   \
    \     if (i < e - 1) \n        {\n            result ~= joiner;\n        }\n \
    \   }\n    return result;\n}", "{\n\tstring ret = \"\";\n\tfor (int i = 0; i <=\
    \ n; i++) \n\t{\n\t\tret += format(\"%d \", i);\n\t}\n\treturn ret;\n}", "{\n\
    \    string result = \"\";\n    foreach (i; 0L .. n + 1L)\n    {\n        result\
    \ ~= \" \" ~ to!string(i);\n    }\n    return result[1 .. $];\n}\n/*\n Return\
    \ a string containing a comma-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0,\
    \ 1, 2, 3, 4, 5\"\n*/\nstring string_sequence2(long n) \n{\n    string result\
    \ = \"\";\n    foreach (i; 0L .. n + 1L)\n    {\n        result ~= \" \" ~ to!string(i);\n\
    \    }\n    return result[1 .. $];\n}\n/*\nReturn a string containing an ordered\
    \ sequence of three-digit numbers with commas separating them.\n    >>> ordered_sequence(3L)\n\
    \    \"000, 001, 002, 003\"\n*/\nstring ordered_sequence(long n) \n{\n    string\
    \ result = \"\";\n    foreach (i; 0L .. n + 1L)\n    {\n        auto v = format(\"\
    %03d\", i);\n        result ~= v ~ \", \";\n    }\n    return result[0 .. $ -\
    \ 2];\n}", "{\n    string result = \"\";\n    foreach (int i; 0 .. n+1) \n   \
    \ {\n        result ~= i;\n        if (i != n) \n        {\n            result\
    \ ~= \" \";\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
