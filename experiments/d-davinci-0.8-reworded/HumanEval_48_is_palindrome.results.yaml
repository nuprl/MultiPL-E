language: d
name: HumanEval_48_is_palindrome
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int length\
    \ = text.length;\n    for (int i = 0; i < length / 2; i++) \n    {\n        if\
    \ (text[i] != text[length - i - 1]) \n        {\n            return false;\n \
    \       }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5bov3kqs.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bov3kqs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvmlj41l0.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvmlj41l0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.equal(text.dup.reverse);\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgq6tpvt7.d(18): Error: no property `equal` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgq6tpvt7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    // Last\
    \ index of string\n    size_t last_index = text.length - 1;\n    // Loop through\
    \ the string\n    foreach (i, ch; text) \n    {\n        // Compare i:th char\
    \ with last_index - i:th char\n        if (ch != text[last_index - i]) \n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reversed;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq8262lzi.d(18): Error: no property `reversed` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq8262lzi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.mirror;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjh5x9ym0.d(18): Error: no property `mirror` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjh5x9ym0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ == 0)\n        return true;\n    \n    immutable mid_pos = text.length / 2;\n\
    \    auto a = text[0..mid_pos];\n    auto b = text[$-mid_pos..$];\n    if (text.length\
    \ % 2 == 1)\n        b = text[$-mid_pos-1..$];\n    \n    return a == b;\n}\n\
    unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\"\
    ) == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl136scqg.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fc5]

    ??:? void tmpl136scqg.__unittest_L29_C1() [0x427bcc]

    ??:? void tmpl136scqg.__modtest() [0x427d48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bce3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abf2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42abc9]

    ??:? runModuleUnitTests [0x42bab9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428488]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto n\
    \ = text.length();\n    if (n < 2) return true;\n    return text[0..n/2] == text[n-1..n/2:-1];\n\
    }\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7e3pj2la.d(20): Error: found `:` when expecting `,`

    /tmp/tmp7e3pj2la.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7e3pj2la.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    foreach\
    \ (immutable i, immutable c; text) \n    {\n        if (c != text[$ - i - 1])\n\
    \            return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbcvj3fkm.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbcvj3fkm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int halfLength\
    \ = text.length / 2;\n    for (int i = 0; i < halfLength; i++)\n    {\n      \
    \  int x = text[i];\n        int y = text[text.length - i - 1];\n        if (x\
    \ != y)\n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw9il4uxi.d(18): Error: cannot implicitly convert expression `text.length
    / 2LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw9il4uxi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    //@ ensures\
    \ text.size() >= 0;\n    //@ ensures \\result == \\old(text) == reverse(\\old(text));\n\
    \    //@ ensures \\result == text == reverse(text);\n    //@ ensures \\result\
    \ <==> text == reverse(text);\n    //@ ensures text == reverse(text) ==> \\result;\n\
    \    //@ ensures text == reverse(text) <==> \\result;\n    /*@\n        loop invariant\
    \ 0 <= i <= text.size();\n        loop invariant \\forall integer j; 0 <= j <\
    \ i ==> text[j] == text[text.size() - j - 1];\n        loop assigns i;\n     \
    \   loop variant text.size() - i;\n    */\n    for (size_t i = 0; i < text.size();\
    \ ++i) \n    {\n        //@ assert \\exists integer j; i <= j < text.size() &&\
    \ text[j] != text[text.size() - j - 1];\n        //@ assert i < text.size() ==>\
    \ text[i] == text[text.size() - i - 1];\n        if (text[i] != text[text.size()\
    \ - i - 1]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmhebbgtq.d(41): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmhebbgtq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len\
    \ = text.length;\n    foreach (idx, ch; text)\n    {\n        if (ch != text[len\
    \ - idx - 1])\n            return false;\n    }\n    return true;\n}\n/*\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptlb34al3.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptlb34al3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto words\
    \ = [](){};\n    auto first_not_whitespace = [](){};\n    auto last_not_whitespace\
    \ = [](){};\n    auto first_not_punctuation = [](){};\n    auto last_not_punctuation\
    \ = [](){};\n    auto is_not_whitespace = [](){};\n    auto is_not_punctuation\
    \ = [](){};\n    auto to_lower = [](){};\n    auto normalize = [](string text)\n\
    \    {\n        return text;\n    };\n    auto equal = [](){};\n    return equal(normalize(text),\
    \ reverse(normalize(text)));\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvfr0sql.d(18): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpqvfr0sql.d(18): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpqvfr0sql.d(19): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpqvfr0sql.d(19): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpqvfr0sql.d(20): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpqvfr0sql.d(20): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpqvfr0sql.d(21): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpqvfr0sql.d(21): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpqvfr0sql.d(22): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpqvfr0sql.d(22): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpqvfr0sql.d(23): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpqvfr0sql.d(23): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpqvfr0sql.d(24): Error: sem'
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n  auto n =\
    \ text.length;\n  for (size_t i = 0; i < n / 2; i++) \n  {\n    if (text[i] !=\
    \ text[n - i - 1]) \n    {\n      return false;\n    }\n  }\n  return true;\n\
    }\n//*/\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmt_d1mho.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmt_d1mho.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6uvkkhm2.d(18): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6uvkkhm2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ <= 1)\n        return true;\n    else if (text[0] == text[$-1])\n        return\
    \ is_palindrome(text[1..$-1]);\n    else\n        return false;\n}\n/*\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw43fzbmk.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw43fzbmk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    for (size_t\
    \ i = 0; i < text.length / 2; i++)\n    {\n        auto a = text[i];\n       \
    \ auto b = text[text.length - i - 1];\n        if (a != b)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto res\
    \ = text.to!(Tuple)().map!(a => a).array.sliced(0, text.length / 2);\n    auto\
    \ res2 = text.to!(Tuple)().map!(a => a).array.sliced(text.length / 2, text.length).reverse;\n\
    \    return res.equal(res2);\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7b6pp_eg.d(18): Error: no property `to` for type `string`

    /tmp/tmp7b6pp_eg.d(19): Error: no property `to` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7b6pp_eg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.equal(reverse(text));\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe15p3jsd.d(18): Error: no property `equal` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe15p3jsd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto n\
    \ = text.length;\n    bool r[n];\n    auto bool_seq = zip(text[0..$/2],text[n/2..$-1].reverse);\n\
    \    foreach(i,b; r) \n    {\n        i = b[0] == b[1];\n    }\n    return all(r);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9w3iyky.d(19): Deprecation: instead of C-style syntax, use D-style
    syntax `bool[n] r`

    /tmp/tmps9w3iyky.d(19): Error: variable `n` cannot be read at compile time

    /tmp/tmps9w3iyky.d(20): Error: undefined identifier `zip`

    /tmp/tmps9w3iyky.d(25): Error: undefined identifier `all`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9w3iyky.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ (text == text.dup.reverse);\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpralo71ql.d(18): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpralo71ql.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int length\
    \ = text.length;\n    foreach (i; 0 .. (length / 2)) \n    {\n        if (text[i]\
    \ != text[length - i - 1])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4pi6w3oq.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4pi6w3oq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    // Implementation\
    \ of recursive solution\n    // Time complexity: O(n) where n is length of text\n\
    \    // Space complexity: O(n)\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptp_3409e.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptp_3409e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    size_t\
    \ length = text.length;\n    size_t median = length / 2;\n    foreach (i; 0 ..\
    \ median)\n    {\n        if (text[i] != text[length - i - 1])\n        {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\n/*\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7e9l_shx.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7e9l_shx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int length\
    \ = text.length;\n    for (int i = 0; i < length / 2; i++)\n    {\n        if\
    \ (text[i] != text[length - i - 1])\n        {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpanztlmbv.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpanztlmbv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int[bool]\
    \ letters = new int[bool](26);\n    foreach (ch; text) {\n        if (ch >= 'a'\
    \ && ch <= 'z') {\n            letters[ch - 'a']++;\n        }\n    }\n    bool\
    \ has_odd = false;\n    foreach (letter; letters) {\n        if (letter % 2 ==\
    \ 1) {\n            if (has_odd) {\n                return false;\n          \
    \  }\n            has_odd = true;\n        }\n    }\n    return true;\n}\nunittest\
    \ \n{\n    assert(is_palindrome(\"aba\"));\n    assert(is_palindrome(\"\"));\n\
    \    assert(is_palindrome(\"aaaaa\"));\n    assert(!is_palindrome(\"zbcd\"));\n\
    }\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkq9svlvi.d(18): Error: need size of rightmost array, not type `bool`

    /tmp/tmpkq9svlvi.d(42): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkq9svlvi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto s\
    \ = text.length();\n    for (size_t i = 0; i < s / 2; i++) \n    {\n        if\
    \ (text[i] != text[s - i - 1]) \n        {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplj08dnio.d(18): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplj08dnio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n\tint length\
    \ = text.length;\n\tif (length < 2) return true;\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpesmy_p16.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpesmy_p16.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.retro;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbt4ir47r.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbt4ir47r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    string\
    \ t1 = text[0..$/2];\n    string t2 = text[$/2..$];\n    return t1 == t2.dup.reverse;\n\
    }\nis_palindrome(\"abba\");\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2zh3vzwb.d(22): Error: unexpected `(` in declarator

    /tmp/tmp2zh3vzwb.d(22): Error: basic type expected, not `"abba"`

    /tmp/tmp2zh3vzwb.d(22): Error: found `"abba"` when expecting `)`

    /tmp/tmp2zh3vzwb.d(22): Error: no identifier for declarator `is_palindrome(_error_)`

    /tmp/tmp2zh3vzwb.d(22): Error: semicolon expected following function declaration

    /tmp/tmp2zh3vzwb.d(22): Error: declaration expected, not `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2zh3vzwb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.length == 0 ||\n        (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp3o1wsjo1.d(19): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427f1e]

    ??:? bool tmp3o1wsjo1.is_palindrome(immutable(char)[]) [0x427a90]

    ??:? bool tmp3o1wsjo1.is_palindrome(immutable(char)[]) [0x427aa3]

    ??:? void tmp3o1wsjo1.__unittest_L21_C1() [0x427af7]

    ??:? void tmp3o1wsjo1.__modtest() [0x427bec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc07]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc2d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa71]

    ??:? runModuleUnitTests [0x'
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    size_t\
    \ len = text.length;\n    for (size_t i = 0; i < len/2; i++)\n    {\n        if\
    \ (text[i] != text[len-i-1])\n            return false;\n    }\n    return true;\n\
    }\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3bb12x4z.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3bb12x4z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto is_not_palindrome\
    \ = false;\n    return is_not_palindrome || (text.length == 0 || text == text.dup.reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo1xw4uht.d(19): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1xw4uht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.equal(text.dup.retro);\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw5ghal_i.d(18): Error: no property `equal` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw5ghal_i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    assert(text.length\
    \ <= 10000000);\n    int left = 0;\n    int right = text.length - 1;\n    bool\
    \ is_palindrome = true;\n    while (left < right) {\n        if (text[left] !=\
    \ text[right]) {\n            is_palindrome = false;\n            break;\n   \
    \     }\n        left += 1;\n        right -= 1;\n    }\n    return is_palindrome;\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx7lrlhnj.d(20): Error: cannot implicitly convert expression `text.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx7lrlhnj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reversed;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxqpyrta1.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqpyrta1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ == 0)\n        return true;\n    else if (text.length == 1)\n        return\
    \ true;\n    else if (text[0] == text[$-1])\n        return is_palindrome(text[1..$-1]);\n\
    \    else\n        return false;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    immutable\
    \ size = text.length;\n    for (immutable i = 0; i < size / 2; i++) \n    {\n\
    \        if (text[i] != text[size - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7l1b7fln.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7l1b7fln.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n  int length\
    \ = text.length;\n  for (int i = 0; i < length / 2; i++) \n  {\n    if (text[i]\
    \ != text[length - i - 1]) \n    {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjffm1h4v.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjffm1h4v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvmlj41l0.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvmlj41l0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    // Only\
    \ compare the first half of the string\n    auto middle = cast(size_t) ceil(text.length\
    \ / 2);\n    foreach (i; 0 .. middle) {\n        if (text[i] != text[text.length\
    \ - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbto76rsq.d(19): Error: `std.math.ceil` called with argument types
    `(ulong)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(4266):     `std.math.ceil(real
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(4363):     `std.math.ceil(float
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbto76rsq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    // \u043C\
    \u043E\u0436\u043D\u043E \u043D\u0430\u043F\u0438\u0441\u0430\u0442\u044C \u0431\
    \u0435\u0437 \u044D\u0442\u043E\u0433\u043E if\n    //if (text.empty())\n    //\
    \    return true;\n    int left = 0;\n    int right = text.length() - 1;\n   \
    \ while (left < right) {\n        if (text[left] != text[right])\n           \
    \ return false;\n        left++;\n        right--;\n    }\n    return true;\n\
    }\n/*\n    >>> is_palindrome_list([1, 2, 1])\n    true\n    >>> is_palindrome_list([])\n\
    \    true\n    >>> is_palindrome_list([1, 2, 3])\n    false\n*/\nunittest\n{\n\
    \    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvqq3zj7a.d(22): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvqq3zj7a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len\
    \ = text.length;\n    for (size_t i = 0; i < len / 2; i++)\n    {\n        if\
    \ (text[i] != text[len - i - 1])\n            return false;\n    }\n    return\
    \ true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgpqphtff.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgpqphtff.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n  return text\
    \ == text.reversed;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprbimcarw.d(18): Error: no property `reversed` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprbimcarw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6uvkkhm2.d(18): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6uvkkhm2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto res\
    \ = std.algorithm.find_if(text, (a, b) => a != b);\n    return res.empty;\n}\n\
    unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\"\
    ) == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzct39_ap.d(18): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzct39_ap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    string\
    \ normalised = text.toLower().strip;\n    if (normalised.length & 1)\n       \
    \ return false;\n    else\n    {\n        immutable mid = normalised.length /\
    \ 2;\n        return normalised[0..mid] == normalised[mid..$].reverse;\n    }\n\
    }\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp76ta1x78.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp76ta1x78.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto first\
    \ = text.begin();\n    auto last = text.end() - 1;\n    while (first < last) {\n\
    \        if (*first != *last)\n            return false;\n        first++;\n \
    \       last--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg7a48nnk.d(18): Error: no property `begin` for type `string`

    /tmp/tmpg7a48nnk.d(19): Error: no property `end` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7a48nnk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    static\
    \ assert(isSomeString!text);\n    if (text.length < 2)\n        return true;\n\
    \    import std.algorithm;\n    return text.dropOne().dropRight().equal(text.dropOne().dropRight().reverse);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2dtlzegm.d(18): Error: template instance `isSomeString!text` template
    `isSomeString` is not defined

    /tmp/tmp2dtlzegm.d(18):        while evaluating: `static assert(isSomeString!text)`

    /tmp/tmp2dtlzegm.d(22): Error: no property `dropOne` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2dtlzegm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == reverse(text);\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptm89ez6p.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptm89ez6p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if ( text.length\
    \ % 2 == 0 ) \n    {\n        return false;\n    }\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2bgvjron.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2bgvjron.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len\
    \ = text.length;\n    bool flag = true;\n    int i = 0;\n    while (i < len) {\n\
    \        int j = len - i - 1;\n        if (text[i] != text[j]) {\n           \
    \ flag = false;\n            break;\n        }\n        i++;\n    }\n    return\
    \ flag;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpykbw5_9_.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpykbw5_9_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    for (auto\
    \ i : iota(0, floor(text.length / 2))) \n    {\n        if (text[i] != text[text.length\
    \ - i - 1]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw4ypkid6.d(18): Error: no identifier for declarator `i`

    /tmp/tmpw4ypkid6.d(18): Error: expression expected, not `:`

    /tmp/tmpw4ypkid6.d(18): Error: found `iota` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4ypkid6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len\
    \ = text.length;\n    auto is_palindrome = true;\n    foreach (index, letter;\
    \ text)\n    {\n        is_palindrome &= letter == text[len - index - 1];\n  \
    \  }\n    return is_palindrome;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq9smd5h1.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq9smd5h1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    bool result\
    \ = true;\n    for (size_t i = 0; i < text.length / 2; i++) \n    {\n        if\
    \ (text[i] != text[text.length - i - 1]) \n        {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6uvkkhm2.d(18): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6uvkkhm2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ == 0)\n        return true;\n    if (text.length == 1)\n        return true;\n\
    \    if (text[0] != text[$-1])\n        return false;\n    return is_palindrome(text[1..$-1]);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len\
    \ = text.length;\n    if (len == 0) return true;\n    for (auto i = 0; i < ceil(len\
    \ / 2); i++) {\n        if (text[i] != text[len - i - 1]) return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgeyhp42m.d(20): Error: `std.math.ceil` called with argument types
    `(ulong)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(4266):     `std.math.ceil(real
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(4363):     `std.math.ceil(float
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgeyhp42m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto rev\
    \ = text.dup.reversed;\n    return text == rev;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnziu416i.d(18): Error: no property `reversed` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnziu416i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.size == 0 || (text[0] == text[$-1] && is_palindrome(text[1..$-1]));\n}\n\
    unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\"\
    ) == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjrem9lbz.d(18): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjrem9lbz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    bool is_palidrome\
    \ = true;\n    for (int i = 0; i < text.length/2; i++) \n    {\n        if (text[i]\
    \ != text[text.length - i - 1]) \n        {\n            is_palidrome = false;\n\
    \            break;\n        }\n    }\n    return is_palidrome;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    bool result\
    \ = true;\n    int len = text.length;\n    int limit = floor(len / 2);\n    for\
    \ (int i = 0; i < limit; i++) \n    {\n        if (text[i] != text[len - i - 1])\n\
    \        {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp7far8m2.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp7far8m2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.empty)\
    \ return true;\n    auto it_begin = text.front;\n    auto it_end = text.back;\n\
    \    while (it_begin < it_end) \n    {\n        if (it_begin != it_end) return\
    \ false;\n        it_begin++;\n        it_end--;\n    }\n    return true;\n}\n\
    //is_palindrome(\"ba\");\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy8f0sa4p.d(18): Error: no property `empty` for type `string`

    /tmp/tmpy8f0sa4p.d(19): Error: no property `front` for type `string`

    /tmp/tmpy8f0sa4p.d(20): Error: no property `back` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy8f0sa4p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    size_t\
    \ len = text.length;\n    size_t half = len / 2;\n    size_t i;\n    for (i =\
    \ 0; i < half; i++) {\n        if (text[i] != text[len - i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n/*\nunittest\n{\n  \
    \  alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwx839a2w.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwx839a2w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    for (int\
    \ i = 0; i < text.length/2; i++) \n    {\n        if (text[i] != text[text.length\
    \ - i - 1]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n\tint i;\n\t\
    int length;\n\t\n\tlength = text.length;\n\t\n\tfor (i = 0; i < length / 2; i++)\n\
    \t{\n\t\tif (text[i] != text[length - i - 1]) \n\t\t{\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5joezhw2.d(21): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5joezhw2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len\
    \ = text.length;\n    foreach (i; 0 .. len / 2)\n    {\n        if (text[i] !=\
    \ text[len - i - 1])\n            return false;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\"\
    ) == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcwsp4lzw.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwsp4lzw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    size_t\
    \ len = text.length;\n    for (size_t i = 0; i < len / 2; i++)\n    {\n      \
    \  if (text[i] != text[len - i - 1])\n            return false;\n    }\n    return\
    \ true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd56w04b2.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd56w04b2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto i\
    \ = 0;\n    auto j = text.length;\n    while (i < j) {\n        j -= 1;\n    \
    \    if (text[i] != text[j]) return false;\n        i += 1;\n    }\n    return\
    \ true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprht2j1ea.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprht2j1ea.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    string\
    \ reversed = text.dup.reverse;\n    return reversed == text;\n}\nunittest\n{\n\
    \    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm6p6nzrb.d(18): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm6p6nzrb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ <= 1) return true;\n    else if (text[0] != text[$-1]) return false;\n    else\
    \ return is_palindrome(text[1..$-1]);\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    foreach\
    \ (i, w; zip(text, text[$-1..0])) {\n        if (w[0] != w[1]) return false;\n\
    \    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6rani3c.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6rani3c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    text =\
    \ toLower(text);\n    bool result = true;\n    for (int i = 0; i < text.length\
    \ / 2; i++) \n    {\n        result = result && (text[i] == text[text.length -\
    \ i - 1]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcqv9ucg1.d(18): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcqv9ucg1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    size_t\
    \ len = text.length;\n    if (len <= 1)\n        return true;\n    foreach (i;\
    \ 0 .. len / 2)\n        if (text[i] != text[len - i - 1])\n            return\
    \ false;\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bywl6tn.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bywl6tn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.empty)\
    \ return true;\n    string clean_text = text.split()[0];\n    return clean_text\
    \ == text.rev;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n \
    \   assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqoet7_ve.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqoet7_ve.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.reversed;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps0tyjxl4.d(18): Error: no property `reversed` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps0tyjxl4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.retro;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp00evz2lk.d(18): Error: no property `retro` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp00evz2lk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int text_length\
    \ = text.length;\n    bool result = true;\n    for (int i = 0; i < text_length;\
    \ i++)\n    {\n        if (text[i] != text[text_length - i - 1])\n        {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwthycv6.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwthycv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int l =\
    \ text.length;\n    return l == 0 || text[0] == text[l-1] && is_palindrome(text[1..l-2]);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdttgy6wy.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdttgy6wy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    bool result\
    \ = true;\n    size_t i = 0;\n    size_t j = text.length() - 1;\n    for (; i\
    \ < j; ++i, --j) {\n        if (text[i] != text[j]) {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;\n}\n/*\nunittest\n{\n\
    \    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmkkhhgck.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmkkhhgck.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    // BUG:\
    \ If text length is even, it will never reach the last character of a string\n\
    \    // BUG: If you have an even number of characters, it will be impossible to\
    \ test if the middle character is the same as its reversed counterpart.\n    for\
    \ (int i = 0; i < text.length / 2; i++) \n    {\n        if (text[i] != text[text.length\
    \ - i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.reversed;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps0tyjxl4.d(18): Error: no property `reversed` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps0tyjxl4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    size_t\
    \ i = 0;\n    size_t j = text.length - 1;\n    while (i < j) \n    {\n       \
    \ if (text[i] != text[j]) \n        {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp7_2vr_uj.d(22): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427efe]

    ??:? bool tmp7_2vr_uj.is_palindrome(immutable(char)[]) [0x427a47]

    ??:? void tmp7_2vr_uj.__unittest_L31_C1() [0x427aac]

    ??:? void tmp7_2vr_uj.__modtest() [0x427bcc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc0d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300bc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb99]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa51]

    ??:? runModuleUnitTests [0x42b9bd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    bool palindrome\
    \ = true;\n    foreach(i, j; zip(text, text[$-1..0])) {\n        if(i != j) {\n\
    \            palindrome = false;\n            break;\n        }\n    }\n    return\
    \ palindrome;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9tnggg2z.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9tnggg2z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ <= 1)\n        return true;\n    else if (text[0] == text[$-1])\n        return\
    \ is_palindrome(text[1..$-1]);\n    else\n        return false;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    import\
    \ std.string;\n    import std.algorithm;\n    import std.conv;\n    text = text.toLower;\n\
    \    import std.conv : to;\n    import std.array : array;\n    import std.range;\n\
    \    import std.range : retro;\n    import std.traits;\n    import std.traits\
    \ : isCharType;\n    import std.string : strip;\n    import std.array : filter;\n\
    \    import std.array : join;\n    import std.algorithm : equal;\n    import std.range\
    \ : dropOne;\n    import std.range : takeOne;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.range : retro;\n    import std.range\
    \ : isInfinite;\n    import std.range : ElementType;\n    import std.algorithm\
    \ : map;\n    import std.algorithm : reduce;\n    import std.algorithm : equal;\n\
    \    import std.conv : to;\n    import std.range : retro;\n    import std.algorithm\
    \ : front;\n    import std.algorithm : back;\n    import std.range : isInfinite;\n\
    \    import std.algorithm : reduce;\n    import std.array : array;\n    import\
    \ std.string : strip;\n    import std.algorithm : reduce;\n    import std.algorithm\
    \ : map;\n    import std.algorithm : isSorted;\n    import std.range : retro;\n\
    \    import std.algorithm : equal;\n    import std.range : isInfinite;\n    import\
    \ std.range : ElementType;\n    import std.array : array;\n    import std.algorithm\
    \ : map;\n    import std.algorithm : reduce;\n    import std.algorithm : equal;\n\
    \    import std.range : retro;\n    import std.array : array;\n    import std.algorithm\
    \ : map;\n    import std.algorithm : reduce;\n    import std.algorithm : equal;\n\
    \    import std.range : retro;\n    import std.range : map;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.algorithm : equal;\n\
    \    import std.\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_lo4aamn.d(72): Error: identifier expected following `package`

    /tmp/tmp_lo4aamn.d(72): Error: `;` expected

    /tmp/tmp_lo4aamn.d(84): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_lo4aamn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ <= 1)\n        return true;\n    if (text[0] != text[$-1])\n        return false;\n\
    \    return is_palindrome(text[1..$-1]);\n}\n/*\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk9v96lqw.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk9v96lqw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.equal(text.dup.reverse);\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7cdrb1l5.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cdrb1l5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.length == 0 || text.length == 1 || text[0] == text[$-1] && is_palindrome(text[1..$-1]);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int length\
    \ = text.length;\n    for (int i = 0; i < length / 2; i++)\n    {\n        if\
    \ (text[i] != text[length - i - 1])\n        {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpanztlmbv.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpanztlmbv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    for (size_t\
    \ i = 0; i < text.length / 2; i++)\n    {\n        if (text[i] != text[text.length\
    \ - i - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    // works\
    \ in O(n) time complexity\n    foreach (index, char; text) \n    {\n        if\
    \ (text[index] != text[$ - index - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo1nxsxhj.d(19): Error: no identifier for declarator `char`

    /tmp/tmpo1nxsxhj.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1nxsxhj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len\
    \ = text.length;\n    if (len <= 1) \n    {\n        return true;\n    } \n  \
    \  else \n    {\n        return text[0] == text[len - 1] && is_palindrome(text[1\
    \ .. len - 2]);\n    }\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp02fwpf0f.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp02fwpf0f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    bool is_palindrome\
    \ = true;\n    foreach(a, b; zip(text, text[$-1..0]))\n    {\n        if(a !=\
    \ b)\n        {\n            is_palindrome = false;\n            break;\n    \
    \    }\n    }\n    return is_palindrome;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpracj1fmo.d(19): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpracj1fmo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.empty())\
    \ \n    {\n        return true;\n    }\n    else \n    {\n        return text[0]\
    \ == text[$ - 1] && is_palindrome(text[1 .. $ - 2]);\n    }\n}\nunittest\n{\n\
    \    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy4h4cik6.d(18): Error: no property `empty` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy4h4cik6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ all!(i => text[i] == text[$ - i - 1])(0 .. (text.length / 2));\n}\n/*\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy8bpafzw.d(18): Error: found `..` when expecting `,`

    /tmp/tmpy8bpafzw.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy8bpafzw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.retro;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp00evz2lk.d(18): Error: no property `retro` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp00evz2lk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ == 0) \n    {\n        return true;\n    }\n    return (text[0] == text[$-1])\
    \ && is_palindrome(text[1..$-1]);\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2jis74c.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2jis74c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto size\
    \ = text.length;\n    for (int i = 0; i < text.length / 2; i++) \n    {\n    \
    \    if (text[i] != text[size - i - 1])\n            return false;\n    }\n  \
    \  return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int textSize\
    \ = text.length;\n    int halfTextSize = textSize / 2;\n    for (int i = 0; i\
    \ < halfTextSize; i++) \n    {\n        if (text[i] != text[textSize - i - 1])\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6std3m7t.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6std3m7t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int n =\
    \ text.length;\n    if (n == 0) return true;\n    else return text[0] == text[n-1]\
    \ && is_palindrome(text[1..n-2]);\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyejyvpx6.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyejyvpx6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int text_length\
    \ = text.length;\n    for (int i = 0; i < text_length / 2; i++)\n    {\n     \
    \   if (text[i] != text[text_length - i - 1])\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_2vxl7yt.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_2vxl7yt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.mirror;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjh5x9ym0.d(18): Error: no property `mirror` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjh5x9ym0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvmlj41l0.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvmlj41l0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto text_len\
    \ = text.length;\n    int res = 1;\n    for (size_t i = 0; i < text_len / 2; i++)\n\
    \    {\n        res *= (text[i] == text[text_len - i - 1]);\n    }\n    return\
    \ res == 1;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpby0bdrya.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpby0bdrya.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len\
    \ = text.length;\n    //only one letter can be a palindrome\n    if (len < 2)\n\
    \        return true;\n    //last letter should match first letter\n    if (text[0]\
    \ != text[len - 1])\n        return false;\n    //if not already found the palindrome,\
    \ check the text between the first and last letters\n    return is_palindrome(text[1..$-1]);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsg64r3qq.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsg64r3qq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ == 0)\n        return true;\n    else \n    {\n        if (text[0] == text[$-1])\n\
    \            return is_palindrome(text[1..$-1]);\n        else\n            return\
    \ false;\n    }\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpr7e4lpmp.d(23): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427f26]

    ??:? bool tmpr7e4lpmp.is_palindrome(immutable(char)[]) [0x427a94]

    ??:? bool tmpr7e4lpmp.is_palindrome(immutable(char)[]) [0x427aae]

    ??:? void tmpr7e4lpmp.__unittest_L28_C1() [0x427aff]

    ??:? void tmpr7e4lpmp.__modtest() [0x427bf4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaa2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc35]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbc1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa79]

    ??:? runModuleUnitTests [0x'
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    import\
    \ std.algorithm : equal;\n    return equal(text, text.dup.mirror);\n}\n/*\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4rlg8789.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rlg8789.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.reversed.equal(text);\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_qwj5xac.d(18): Error: no property `reversed` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qwj5xac.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    foreach\
    \ (immutable i, immutable j; 0 .. (text.length - 1))\n    {\n        if (text[i]\
    \ != text[j])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg_url63u.d(18): Error: found `..` when expecting `)`

    /tmp/tmpg_url63u.d(18): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg_url63u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.dup.reverse == text;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2t0a7xph.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2t0a7xph.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    uint text_len\
    \ = text.length;\n    if (text_len == 0)\n        return true;\n    else if (text_len\
    \ == 1)\n        return true;\n    else if (text_len == 2)\n        return text[0]\
    \ == text[1];\n    else {\n        uint median = text_len / 2;\n        for (uint\
    \ i = 0; i < median; i++) {\n            if (text[i] != text[text_len - 1 - i])\n\
    \                return false;\n        }\n        return true;\n    }\n}\n/*\n\
    unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\"\
    ) == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2rfny2f8.d(34): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2rfny2f8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    size_t\
    \ len = text.length;\n    size_t half = len / 2;\n    return text[0..half] ==\
    \ text[$-half..$].reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpooe0cin7.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpooe0cin7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.idup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm6qztlf6.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm6qztlf6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.equal(text.dup.reverse);\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgq6tpvt7.d(18): Error: no property `equal` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgq6tpvt7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6uvkkhm2.d(18): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6uvkkhm2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ == 0) \n    {\n        return true;\n    }\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptm7b04ix.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptm7b04ix.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto first\
    \ = text.begin();\n    auto last = text.end();\n    if (first == last) return\
    \ true;\n    while (first != last) {\n        --last;\n        if (*first != *last)\
    \ return false;\n        ++first;\n        if (first == last) return true;\n \
    \   }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcpfz8rks.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcpfz8rks.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6uvkkhm2.d(18): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6uvkkhm2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto result\
    \ = true;\n    size_t i = 0;\n    while (i < text.length/2 && result) \n    {\n\
    \        result = text[i] == text[text.length - i - 1];\n        i++;\n    }\n\
    \    return result;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphtslmqzh.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphtslmqzh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int text_len\
    \ = text.length;\n    string text_reversed = text.dup.reverse;\n    int text_reversed_len\
    \ = text_reversed.length;\n    if (text_len != text_reversed_len) {\n        return\
    \ false;\n    }\n    else {\n        for (int i = 0; i < text_len; i++) {\n  \
    \          if (text[i] != text_reversed[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp73539p5u.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    /tmp/tmp73539p5u.d(19): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmp73539p5u.d(20): Error: cannot implicitly convert expression `text_reversed.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp73539p5u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len\
    \ = text.length;\n    for (size_t i = 0; i < len/2; i++)\n    {\n        if (text[i]\
    \ != text[len-i-1]) return false;\n    }\n    return true;\n}\nunittest\n{\n \
    \   alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto reversed_text\
    \ = text[$...].idup.array;\n    reverse(reversed_text);\n    return text == reversed_text.idup.array;\n\
    }\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwtx0fb_v.d(18): Error: found `...` when expecting `,`

    /tmp/tmpwtx0fb_v.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwtx0fb_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    foreach\
    \ (i, j;\n             iota(0, text.length / 2).retro,\n             iota(text.length\
    \ - 1, text.length / 2, -1))\n    {\n        if (text[i] != text[j]) \n      \
    \  {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz044p7wx.d(19): Error: undefined identifier `iota`

    /tmp/tmpz044p7wx.d(20): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz044p7wx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.length > 0 && all!(equal)(text[0..$/2], text[$/2..$].retro);\n}\n/*\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7h5zbn0b.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7h5zbn0b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    foreach\
    \ (int i, char c; text)\n    {\n        foreach (int j, char c2; text)\n     \
    \   {\n            if(i + j != text.length - 1)\n            {\n             \
    \   if(text[i] != text[j])\n                {\n                    return false;\n\
    \                }\n            }\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpppubc10x.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpppubc10x.__unittest_L33_C1() [0x427b5c]

    ??:? void tmpppubc10x.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43012c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]

    ??:? runModuleUnitTests [0x42ba2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428380]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ == 0)\n        return true;\n    else if (text.length == 1)\n        return\
    \ true;\n    else if (text[0] == text[$-1])\n        return is_palindrome(text[1..$-1]);\n\
    \    else\n        return false;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int size\
    \ = text.length;\n    int half = ceil(text.length / 2);\n    string first = text[0..half];\n\
    \    string second = text[half..$];\n    second = reverse(second);\n    return\
    \ first == second;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n \
    \   assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1e3fnu90.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    /tmp/tmp1e3fnu90.d(19): Error: `std.math.ceil` called with argument types `(ulong)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(4266):     `std.math.ceil(real
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(4363):     `std.math.ceil(float
    x)`

    /tmp/tmp1e3fnu90.d(22): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1e3fnu90.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.empty)\n\
    \        return true;\n    \n    return (\n        text[0] == text[$ - 1] && \n\
    \        is_palindrome(text[1 .. $ - 2])\n    );\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp5bs_if6.d(18): Error: no property `empty` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp5bs_if6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    foreach\
    \ (i, text[]) \n    {\n        if (text[0] != text[$ - 1])\n            return\
    \ false;\n        text = text[1 .. $ - 1];\n    }\n    return true;\n}\n/*\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5t444k2n.d(18): Error: no identifier for declarator `text[]`

    /tmp/tmp5t444k2n.d(18): Error: found `)` when expecting `;`

    /tmp/tmp5t444k2n.d(24): Error: found `return` when expecting `)`

    /tmp/tmp5t444k2n.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5t444k2n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    size_t\
    \ N = text.length;\n    size_t half = N / 2;\n    for (size_t i = 0; i < half;\
    \ i++)\n    {\n        if (text[i] != text[N - i - 1])\n            return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    string\
    \ a = text;\n    string b = reverse(text);\n    return a == b;\n}\n/*\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvtqf1dlg.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvtqf1dlg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int left\
    \ = 0;\n    int right = text.length - 1;\n    while (left < right) {\n       \
    \ if (text[left] != text[right]) {\n            return false;\n        }\n   \
    \     left++;\n        right--;\n    }\n    return true;\n}\n \n/*\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvk33lb5b.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvk33lb5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n  if (text.length\
    \ < 2) return true;\n  return text[0] == text[$-1] && is_palindrome(text[1..$-1]);\n\
    }\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp36cl2rh.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp36cl2rh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ == 0)\n        return true;\n    uint i = 0;\n    uint j = text.length-1;\n\
    \    while (i<j)\n    {\n        if (text[i] != text[j])\n            return false;\n\
    \        i++;\n        j--;\n    }\n    return true;\n}\n \n/*\n    Checks if\
    \ string is a palindrome or not using the above function\n    >>> is_palindrome_test(\"\
    \")\n    true\n    >>> is_palindrome_test(\"aba\")\n    true\n    >>> is_palindrome_test(\"\
    aaaaa\")\n    true\n    >>> is_palindrome_test(\"zbcd\")\n    false\n*/\n \nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptomrmecr.d(21): Error: cannot implicitly convert expression `text.length
    - 1LU` of type `ulong` to `uint`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptomrmecr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6uvkkhm2.d(18): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6uvkkhm2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if ( text.length\
    \ == 0 )\n        return true;\n    else if ( text.length == 1 )\n        return\
    \ true;\n    else if ( text[0] == text[text.length-1] )\n        return is_palindrome(text[1..text.length-2]);\n\
    \    else\n        return false;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpjg7lqm8x.d(23): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427f2e]

    ??:? bool tmpjg7lqm8x.is_palindrome(immutable(char)[]) [0x427aa2]

    ??:? bool tmpjg7lqm8x.is_palindrome(immutable(char)[]) [0x427abc]

    ??:? void tmpjg7lqm8x.__unittest_L27_C1() [0x427b34]

    ??:? void tmpjg7lqm8x.__modtest() [0x427c00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc17]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaaa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc3d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbc9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa81]

    ??:? runModuleUnitTests [0x'
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.equal(text.retro);\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp04439340.d(18): Error: no property `equal` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp04439340.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n\treturn text\
    \ == text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpumwqvgxk.d(18): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpumwqvgxk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ <= 1) return true;\n    return text[0] == text[$-1] && is_palindrome(text[1..$-1]);\n\
    }\n// BEGIN: palindrome_enum\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    bool result\
    \ = true;\n    for (int i = 0; i < text.length; i++)\n    {\n        if (text[i]\
    \ != text[text.length - 1 - i])\n        {\n            result = false;\n    \
    \        break;\n        }\n    }\n    return result;\n}\n/*\nunittest\n{\n  \
    \  alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprgcq_f95.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprgcq_f95.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    size_t\
    \ length = text.length;\n    if (length == 0)\n        return true;\n    for (size_t\
    \ i = 0; i < length / 2; i++) \n    {\n        if (text[i] != text[length - i\
    \ - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    //TODO\n\
    \    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpythpb7fg.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpythpb7fg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    import\
    \ std.algorithm : equal;\n    import std.range : zip;\n    import std.range :\
    \ take;\n    import std.range : drop;\n    import std.range : iterate;\n    auto\
    \ r = zip(take(text.length / 2 + 1, text), drop(text.length / 2, text).iterate!(\"\
    a + 'a'\"));\n    return equal(r, front);\n}\nstring[] day_1(string[] input) {\n\
    \    import std.algorithm : max;\n    import std.conv : to;\n    import std.math\
    \ : abs;\n    import std.string : split;\n    import std.range : map;\n    import\
    \ std.array : sum;\n    import std.typecons : tuple;\n    auto input_parsed =\
    \ input.map!(a => to!(int)(a.drop(1)));\n    int part_1 = sum(input_parsed.map!(a\
    \ => abs(a)).sum);\n    int part_2 = 0;\n    bool found = false;\n    int[] freq\
    \ = [];\n    for (int i = 0; !found; i++) {\n        foreach (var x; input_parsed)\
    \ {\n            part_2 += x;\n            if (part_2 in freq) {\n           \
    \     found = true;\n                break;\n            }\n            freq ~=\
    \ part_2;\n        }\n    }\n    return tuple(to!string(part_1), to!string(part_2));\n\
    }\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6aio7k5q.d(51): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6aio7k5q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    for (size_t\
    \ i = 0; i < text.length / 2; i++) \n    {\n        if (text[i] != text[text.length\
    \ - i - 1]) \n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n// \n// struct Account\n// {\n//     immutable(string) username;\n\
    //     string password;\n//     size_t age;\n//     size_t isValid;\n// }\n//\
    \ \n// Account* d_accounts = null;\n// size_t d_size = 0;\n// \n// void addAccount(string\
    \ username, string password, size_t age)\n// {\n//     d_accounts[d_size] = Account(username,\
    \ password, age, 0);\n//     d_size++;\n// }\n// \n// bool valid_account(string\
    \ username, string password)\n// {\n//     for (size_t i = 0; i < d_size; i++)\n\
    //     {\n//         if (username == d_accounts[i].username)\n//         {\n//\
    \             if (password == d_accounts[i].password)\n//             {\n//  \
    \               return true;\n//             }\n//         }\n//     }\n//   \
    \  return false;\n// }\n// \n// void set_account_valid(string username)\n// {\n\
    //     for (size_t i = 0; i < d_size; i++)\n//     {\n//         if (username\
    \ == d_accounts[i].username)\n//         {\n//             d_accounts[i].isValid\
    \ = 1;\n//         }\n//     }\n// }\n// \n// void add_accounts()\n// {\n//  \
    \   addAccount(\"michael\", \"password1\", 23);\n//     addAccount(\"john\", \"\
    password2\", 25);\n//     addAccount(\"gabriel\", \"password3\", 29);\n//    \
    \ addAccount(\"joseph\", \"password4\", 21);\n//     addAccount(\"mark\", \"password5\"\
    , 33);\n//     addAccount(\"bob\", \"password6\", 31);\n//     addAccount(\"josh\"\
    , \"password7\", 16);\n\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvmlj41l0.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvmlj41l0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len\
    \ = text.length;\n    foreach (i, str; text[i .. len - i]) \n    {\n        if\
    \ (str != text[len - i - 1])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppzkt2qm6.d(19): Error: undefined identifier `i`

    /tmp/tmppzkt2qm6.d(19): Error: undefined identifier `i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppzkt2qm6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len\
    \ = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n    {\n        if\
    \ (text[i] != text[len - i - 1]) \n        {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzfo5kc28.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzfo5kc28.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ == 0) return true;\n    foreach (i, char c; text) {\n        if (c != text[text.length\
    \ - 1 - i]) return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpetu_g9qn.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpetu_g9qn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ < 2) \n    {\n        return true;\n    }\n    else \n    {\n        return\
    \ text[0] == text[$ - 1] && is_palindrome(text[1 .. $ - 2]);\n    }\n}\n/*\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjho0lvdo.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjho0lvdo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.equal(text.dup.reverse);\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgq6tpvt7.d(18): Error: no property `equal` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgq6tpvt7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n  return text.dup.reverse\
    \ == text;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpivyzajw9.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivyzajw9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    immutable\
    \ text_size = text.length;\n    return text_size.isEven && text[0 .. text_size\
    \ / 2] == text[text_size / 2 .. $].reversed;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp370enn8m.d(19): Error: no property `isEven` for type `immutable(ulong)`

    /tmp/tmp370enn8m.d(19): Error: no property `reversed` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp370enn8m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    size_t\
    \ length = text.length;\n    for (size_t i = 0; i < length / 2; i++) \n    {\n\
    \        if (text[i] != text[length - i - 1])\n            return false;\n   \
    \ }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpam4oq9fo.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpam4oq9fo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ is(typeof(text[0]) == char) && text == text.dup.retro;\n}\n/*\nunittest\n{\n\
    \    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2avi54qx.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2avi54qx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    bool result\
    \ = true;\n    for (size_t i = 0; i < text.length; i++)\n    {\n        result\
    \ = result && (text[i] == text[text.length - i - 1]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reversed;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq8262lzi.d(18): Error: no property `reversed` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq8262lzi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int n =\
    \ text.length;\n    int n1 = text.length div 2;\n    int n2 = (text.length + 1)\
    \ div 2;\n    //n2 = n1 + 1 if n is odd\n    for (int i = 0; i < n1; i++)\n  \
    \  {\n        if (text[i] != text[n - i - 1])\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\n    Checks if given number is a palindrome\n\
    \    >>> is_palindrome(12321)\n    true\n    >>> is_palindrome(2332)\n    true\n\
    \    >>> is_palindrome(2121)\n    true\n    >>> is_palindrome(123)\n    false\n\
    */\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0_s8h9x2.d(19): Error: semicolon expected, not `div`

    /tmp/tmp0_s8h9x2.d(19): Error: found `2` when expecting `;` following statement

    /tmp/tmp0_s8h9x2.d(19): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp0_s8h9x2.d(20): Error: semicolon expected, not `div`

    /tmp/tmp0_s8h9x2.d(20): Error: found `2` when expecting `;` following statement

    /tmp/tmp0_s8h9x2.d(20): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_s8h9x2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n\tif (text.length\
    \ == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tint n = text.length;\n\
    \t\tint i = 0;\n\t\twhile (i < n / 2) \n\t\t{\n\t\t\tif (text[i] != text[n - i\
    \ - 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti += 1;\n\t\t}\n\t\t\
    return true;\n\t}\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp63sg5qj7.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp63sg5qj7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.empty)\
    \ return true;\n    else if (text.front == text.back) return is_palindrome(text[1..$-1]);\n\
    \    else return false;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkzjtph3b.d(18): Error: no property `empty` for type `string`

    /tmp/tmpkzjtph3b.d(19): Error: no property `front` for type `string`

    /tmp/tmpkzjtph3b.d(19): Error: no property `back` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkzjtph3b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int len\
    \ = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n        if (text[i]\
    \ != text[len - i - 1])\n        {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmqsffc5e.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmqsffc5e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.empty)\
    \ return true;\n    else return (text[0] == text[$-1]) && is_palindrome(text[1..$-1]);\n\
    }\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5mmbhj6n.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5mmbhj6n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    uint n\
    \ = text.length;\n    for (uint i = 0; i < n / 2; i++) \n    {\n        if (text[i]\
    \ != text[n - i - 1]) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuvhjylbs.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `uint`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuvhjylbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.equal(text.retro);\n}\n \n/*\n    Checks if given string is a palindrome\
    \ using 'equivalence table'\n    >>> is_palindrome_equiv(\"\", equiv)\n    true\n\
    \    >>> is_palindrome_equiv(\"aba\", equiv)\n    true\n    >>> is_palindrome_equiv(\"\
    aaaaa\", equiv)\n    true\n    >>> is_palindrome_equiv(\"zbcd\", equiv)\n    false\n\
    \    >>> is_palindrome_equiv(\"dfr%ds2L\", equiv)\n    true\n    >>> is_palindrome_equiv(\"\
    dfr%dsL\", equiv)\n    false\n    \n*/\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp36b83atk.d(18): Error: no property `equal` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36b83atk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int n =\
    \ text.length;\n    for (int i = 0; i < n / 2; i++) \n    {\n        if (text[i]\
    \ != text[n - i - 1]) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptzh4jwnk.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptzh4jwnk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int n =\
    \ text.length;\n    for (int i = 0; i < n / 2; i++)\n    {\n        if (text[i]\
    \ != text[n - i - 1]) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy2h9c00k.d(18): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy2h9c00k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6uvkkhm2.d(18): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6uvkkhm2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    foreach\
    \ (i, j; text[].iota) \n    {\n        if (text[i] != text[j])\n            return\
    \ false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_tv6hi16.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_tv6hi16.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    bool is_same\
    \ = true;\n    int n = text.length;\n    for (int i = 0; i < n; i++)\n    {\n\
    \        if (text[i] != text[n - i - 1])\n        {\n            is_same = false;\n\
    \            break;\n        }\n    }\n    return is_same;\n}\n/*\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4r7t2qkj.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4r7t2qkj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ == 0)\n        return true;\n    else\n    {\n        auto ch1 = text[0];\n\
    \        auto ch2 = text[text.length - 1];\n        if (ch1 == ch2)\n        \
    \    return is_palindrome(text[1..text.length - 2]);\n        else\n         \
    \   return false;\n    }\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp51340bmx.d(25): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427f1e]

    ??:? bool tmp51340bmx.is_palindrome(immutable(char)[]) [0x427a93]

    ??:? bool tmp51340bmx.is_palindrome(immutable(char)[]) [0x427aad]

    ??:? void tmp51340bmx.__unittest_L30_C1() [0x427b24]

    ??:? void tmp51340bmx.__modtest() [0x427bf0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc07]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc2d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa71]

    ??:? runModuleUnitTests [0x'
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6uvkkhm2.d(18): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6uvkkhm2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int n =\
    \ text.length;\n    int mid = n / 2;\n    for (int i = 0; i < mid; i++) {\n  \
    \      if (text[i] != text[n - i - 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int n =\
    \ text.length;\n    for (int i = 0; i < n / 2; i++) \n    {\n        if (text[i]\
    \ != text[n - i - 1]) \n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxat6bdkf.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxat6bdkf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.empty)\
    \ return true;\n    int left = 0;\n    int right = text.length - 1;\n    while\
    \ (left < right) \n    {\n        if (text[left] != text[right]) return false;\n\
    \        left += 1;\n        right -= 1;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ez5t0_q.d(18): Error: no property `empty` for type `string`

    /tmp/tmp0ez5t0_q.d(20): Error: cannot implicitly convert expression `text.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ez5t0_q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.slice(0, text.length/2) == text.slice(text.length/2 + mod(text.length,\
    \ 2), $).reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2iock7cj.d(18): Error: `$` is valid only inside [] of index or
    slice

    /tmp/tmp2iock7cj.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2iock7cj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvmlj41l0.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvmlj41l0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto n\
    \ = text.length();\n    for (int i = 0; i < n/2; i++) {\n        if (text[i] !=\
    \ text[n-i-1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvh31o64t.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvh31o64t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    //return\
    \ text.find(\"a\") == string.npos;\n    return text.equal(\"aba\");\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1bz69im1.d(19): Error: no property `equal` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1bz69im1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    text =\
    \ text.lower;\n    int len = text.length;\n    if (len == 0)\n        return true;\n\
    \    foreach (i, _; 0 .. (len / 2))\n    {\n        if (text[i] != text[len -\
    \ i - 1])\n            return false;\n    }\n    return true;\n}\n/*\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsnlv4sut.d(22): Error: found `..` when expecting `)`

    /tmp/tmpsnlv4sut.d(22): Error: found `)` when expecting `;` following statement

    /tmp/tmpsnlv4sut.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsnlv4sut.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    string\
    \ t = text.dup;\n    t.to_lower().strip_outer_whitespace();\n    return t == t.reverse;\n\
    }\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp5p8n8tp.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp5p8n8tp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto half_point\
    \ = text.length() / 2;\n    for (size_t i = 0; i < half_point; i++) {\n      \
    \  if (text[i] != text[text.length() - i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp966285xw.d(18): Error: no property `length` for type `string`

    /tmp/tmp966285xw.d(20): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp966285xw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    // Get\
    \ the size of the string\n    size_t n = text.length;\n    // Create a for loop\
    \ up to half of the size of the string\n    for (size_t i = 0; i < n / 2; i++)\
    \ \n    {\n        // If the position i is not equal to the last position minus\
    \ i, return false\n        if (text[i] != text[n - i - 1])\n            return\
    \ false;\n    }\n    // If we made it through the loop, the string is a palindrome,\
    \ return true\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnl88uzst.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnl88uzst.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto n\
    \ = text.length;\n    for (size_t i = 0; i < n / 2; i++) \n    {\n        if (text[i]\
    \ != text[n - i - 1])\n            return false;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\"\
    ) == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163139
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto length\
    \ = text.length;\n    if (length <= 1) \n    {\n        return true;\n    } \n\
    \    else \n    {\n        auto half_length = length / 2;\n        auto first_half\
    \ = text[0 .. half_length];\n        auto second_half = text[$ - half_length ..\
    \ $];\n        return first_half == second_half.reverse;\n    }\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6cdsz66q.d(28): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6cdsz66q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    bool is_palindrome\
    \ = true;\n    for (size_t i = 0; i < text.length; i++)\n    {\n        if (text[i]\
    \ != text[text.length - i - 1]) \n        {\n            is_palindrome = false;\n\
    \            break;\n        }\n    }\n    return is_palindrome;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163139
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    foreach\
    \ (i, r; iota(0, text.length/2) ~ text[text.length-1-i..text.length]) \n    {\n\
    \        if (r != text[i]) \n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp598skqxp.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp598skqxp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int half\
    \ = text.length / 2;\n    foreach (i; 0 .. half)\n    {\n        if (text[i] !=\
    \ text[text.length - i - 1])\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuo_ur534.d(18): Error: cannot implicitly convert expression `text.length
    / 2LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuo_ur534.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == std.string.reverse(text);\n}\n/*\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3xnvqmhd.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3xnvqmhd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    bool result\
    \ = true;\n    size_t length = text.length;\n    for (size_t i = 0; i < length\
    \ / 2; i++) \n    {\n        result = result && text[i] == text[length - i - 1];\n\
    \    }\n    return result;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprzw5uigk.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprzw5uigk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.length == 0 || text.front == text.back && is_palindrome(text[1..$-1]);\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprisi459p.d(18): Error: no property `front` for type `string`

    /tmp/tmprisi459p.d(18): Error: no property `back` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprisi459p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    auto len\
    \ = text.length;\n    if (len == 0) return true;\n    for (size_t i = 0; i < len\
    \ / 2; i++) {\n        if (text[i] != text[len - i - 1]) return false;\n    }\n\
    \    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpupgbr3jh.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpupgbr3jh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.empty)\
    \ \n    {\n        return true;\n    }\n    else \n    {\n        return text.front\
    \ == text.back\n        and is_palindrome(text[1..$-1]);\n    }\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqr61wzh.d(25): Error: found `and` when expecting `;` following
    `return` statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqr61wzh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    // ...\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp639if3oy.d(16): Error: function `tmp639if3oy.is_palindrome` has
    no `return` statement, but is expected to return a value of type `bool`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp639if3oy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    int left\
    \ = 0;\n    int right = text.length;\n    while (left < right) \n    {\n     \
    \   if (text[left] != text[right])\n            return false;\n        left++;\n\
    \        right--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd6001a69.d(19): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd6001a69.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.length > 0 && text == reverse(text);\n}\n/*\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2rku9cia.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2rku9cia.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text.front == text.back && text.length == 1 ||\n           text.front == text.back\
    \ && is_palindrome(text.slice(1, text.length - 1));\n}\nunittest\n{\n    alias\
    \ candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptgczjxsr.d(18): Error: no property `front` for type `string`

    /tmp/tmptgczjxsr.d(18): Error: no property `back` for type `string`

    /tmp/tmptgczjxsr.d(19): Error: no property `front` for type `string`

    /tmp/tmptgczjxsr.d(19): Error: no property `back` for type `string`

    /tmp/tmptgczjxsr.d(19): Error: no property `slice` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptgczjxsr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    // YOUR\
    \ CODE HERE\n    return false;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdjkk_dqo.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdjkk_dqo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n  if (text.length\
    \ < 2)\n    return true;\n  if (text[0] != text[$-1])\n    return false;\n  return\
    \ is_palindrome(text[1..$-1]);\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4_jqbokf.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_jqbokf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    return\
    \ text == text.dup.reverse;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvmlj41l0.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvmlj41l0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Checks if given string\
    \ is a palindrome\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"aaaaa\")\n    true\n    >>> is_palindrome(\"\
    zbcd\")\n    false\n    \n*/\nbool is_palindrome(string text) \n{\n    if (text.length\
    \ < 2) return true;\n    if (text[0] != text[$-1]) return false;\n    return is_palindrome(text[1..$-1]);\n\
    }\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzjiwspi7.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzjiwspi7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163138
