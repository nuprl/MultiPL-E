name: HumanEval_160_do_algebra
language: d
prompt: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The first\
  \ array has basic algebra operations, and \n    the second array is an array of\
  \ integers. Use the two given arrays to build the algebric \n    expression and\
  \ return the evaluation of this expression.\n\n    The basic algebra operations:\n\
  \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
  \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
  \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
  \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
  \ of operand array minus one.\n        Operand is an array of of non-negative integers.\n\
  \        Operator array has at least one operator, and operand array has at least\
  \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
  \ \n"
tests: "unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
  **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"\
  *\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
  \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
completions: ["{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}", "{\n\
    \  /*\n    Assume operator contains valid values\n    Assume operand contains\
    \ valid values\n    Assume length of operator is equal to the length of operand\
    \ minus one.\n  */\n  // storing result at the first value of operand\n  // do\
    \ operation with each operator\n  // return result stored at first index of operand\n\
    \  foreach(i, o; operator)\n  {\n    switch(o)\n    {\n      case \"+\":\n   \
    \     operand[0] += operand[i+1];\n        break;\n      case \"-\":\n       \
    \ operand[0] -= operand[i+1];\n        break;\n      case \"*\":\n        operand[0]\
    \ *= operand[i+1];\n        break;\n      case \"//\":\n        operand[0] /=\
    \ operand[i+1];\n        break;\n      case \"**\":\n        operand[0] = long(pow(double(operand[0]),\
    \ double(operand[i+1])));\n        break;\n    }\n  }\n  return operand[0];\n}",
  "{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length; i++)\n\
    \    {\n        switch (operator[i])\n        {\n            case \"+\":\n   \
    \             result += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                result -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i + 1];\n        \
    \        break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}", "{\n    long num = operand[0];\n    foreach(int i, string\
    \ j; operator)\n    {\n        if(j == \"+\")\n            num += operand[i+1];\n\
    \        else if(j == \"-\")\n            num -= operand[i+1];\n        else if(j\
    \ == \"*\")\n            num *= operand[i+1];\n        else if(j == \"//\")\n\
    \            num /= operand[i+1];\n        else if(j == \"**\")\n            num\
    \ = pow(num, operand[i+1]);\n    }\n    return num;\n}", "{\n    auto result =\
    \ operand[0];\n    for (size_t i = 0; i < operator.length; i++)\n    {\n     \
    \   if (operator[i] == \"+\")\n            result += operand[i + 1];\n       \
    \ else if (operator[i] == \"-\")\n            result -= operand[i + 1];\n    \
    \    else if (operator[i] == \"*\")\n            result *= operand[i + 1];\n \
    \       else if (operator[i] == \"//\")\n            result /= operand[i + 1];\n\
    \        else if (operator[i] == \"**\")\n            result = (long)pow(result,\
    \ operand[i + 1]);\n    }\n    return result;\n}", "{\n    long result = operand[0];\n\
    \    for (int i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case \"+\":\n                result += operand[i + 1];\n\
    \                break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = (long)pow(result, operand[i + 1]);\n     \
    \           break;\n        }\n    }\n    return result;\n}", "{\n    long result\
    \ = operand[0];\n    for (int i = 0; i < operator.length; i++) {\n        if (operator[i]\
    \ == \"+\") {\n            result += operand[i + 1];\n        } else if (operator[i]\
    \ == \"-\") {\n            result -= operand[i + 1];\n        } else if (operator[i]\
    \ == \"*\") {\n            result *= operand[i + 1];\n        } else if (operator[i]\
    \ == \"//\") {\n            result /= operand[i + 1];\n        } else if (operator[i]\
    \ == \"**\") {\n            result = long(pow(result, operand[i + 1]));\n    \
    \    }\n    }\n    return result;\n}", "{\n    long result = operand[0];\n   \
    \ for (int i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case \"+\":\n                result += operand[i + 1];\n\
    \                break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = pow(result, operand[i + 1]);\n           \
    \     break;\n        }\n    }\n    return result;\n}", "{\n    long result =\
    \ operand[0];\n    for (int i = 0; i < operator.length; i++)\n    {\n        switch\
    \ (operator[i])\n        {\n            case \"+\":\n                result +=\
    \ operand[i + 1];\n                break;\n            case \"-\":\n         \
    \       result -= operand[i + 1];\n                break;\n            case \"\
    *\":\n                result *= operand[i + 1];\n                break;\n    \
    \        case \"//\":\n                result /= operand[i + 1];\n           \
    \     break;\n            case \"**\":\n                result = (long)pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}", "{\n    int len = operator.length;\n    long temp = operand[0];\n\
    \    for(int i = 0; i < len; i++)\n    {\n        switch(operator[i])\n      \
    \  {\n            case \"+\":\n                temp += operand[i+1];\n       \
    \         break;\n            case \"-\":\n                temp -= operand[i+1];\n\
    \                break;\n            case \"*\":\n                temp *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                temp /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                temp = (long)pow(temp,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return temp;\n\
    }", "{\n    // Convert long[] to List<long>\n    List<long> arrList = new List<long>();\n\
    \    foreach(long i in operand)\n    {\n        arrList.Add(i);\n    }\n    //\
    \ Convert string[] to List<string>\n    List<string> opList = new List<string>();\n\
    \    foreach(string i in operator)\n    {\n        opList.Add(i);\n    }\n   \
    \ // Do exponentiation first\n    while(opList.IndexOf(\"**\") != -1)\n    {\n\
    \        int index = opList.IndexOf(\"**\");\n        long num1 = arrList[index];\n\
    \        long num2 = arrList[index + 1];\n        long val = (long)pow(num1, num2);\n\
    \        arrList.RemoveAt(index);\n        arrList.RemoveAt(index);\n        arrList.Insert(index,\
    \ val);\n        opList.RemoveAt(index);\n    }\n    // Do multiplication or division\
    \ next\n    while(opList.IndexOf(\"*\") != -1 || opList.IndexOf(\"//\") != -1)\n\
    \    {\n        int index = -1;\n        long val = -1;\n        if(opList.IndexOf(\"\
    *\") != -1)\n        {\n            index = opList.IndexOf(\"*\");\n         \
    \   long num1 = arrList[index];\n            long num2 = arrList[index + 1];\n\
    \            val = num1 * num2;\n        }\n        else if(opList.IndexOf(\"\
    //\") != -1)\n        {\n            index = opList.IndexOf(\"//\");\n       \
    \     long num1 = arrList[index];\n            long num2 = arrList[index + 1];\n\
    \            val = num1 / num2;\n        }\n        arrList.RemoveAt(index);\n\
    \        arrList.RemoveAt(index);\n        arrList.Insert(index, val);\n     \
    \   opList.RemoveAt(index);\n    }\n    // Do addition or subtraction last\n \
    \   while(opList.IndexOf(\"+\") != -1 || opList.IndexOf(\"-\") != -1)\n    {\n\
    \        int index = -1", "{\n    long result = operand[0];\n    for (int i =\
    \ 0; i < operator.length; i++)\n    {\n        string op = operator[i];\n    \
    \    switch (op)\n        {\n            case \"+\":\n                result +=\
    \ operand[i + 1];\n                break;\n            case \"-\":\n         \
    \       result -= operand[i + 1];\n                break;\n            case \"\
    *\":\n                result *= operand[i + 1];\n                break;\n    \
    \        case \"//\":\n                result /= operand[i + 1];\n           \
    \     break;\n            case \"**\":\n                result = cast(long) pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    if (operator.length == 0 || operand.length == 0)\n        return -1;\n\
    \    else if (operator.length != operand.length - 1)\n        return -1;\n   \
    \ \n    long result = operand[0];\n    for (long i = 0; i < operator.length; i++)\n\
    \    {\n        switch (operator[i])\n        {\n            case \"+\":\n   \
    \             result += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                result -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i + 1];\n        \
    \        break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    return result;\n}", "{\n    //\
    \ your code here\n    long ret = operand[0];\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                ret += operand[i+1];\n                break;\n            case\
    \ '-':\n                ret -= operand[i+1];\n                break;\n       \
    \     case '*':\n                ret *= operand[i+1];\n                break;\n\
    \            case '//':\n                ret /= operand[i+1];\n              \
    \  break;\n            case '**':\n                ret = pow(ret, operand[i+1]);\n\
    \                break;\n        }\n    }\n    return ret;\n}", "{\n    int last\
    \ = operand.length - 1;\n    if (operator.length != last) return 0;\n    for (int\
    \ i = 0; i < last; i++)\n    {\n        if (operator[i] == \"+\") operand[i+1]\
    \ += operand[i];\n        else if (operator[i] == \"-\") operand[i+1] = operand[i]\
    \ - operand[i+1];\n        else if (operator[i] == \"*\") operand[i+1] *= operand[i];\n\
    \        else if (operator[i] == \"//\") operand[i+1] = operand[i] / operand[i+1];\n\
    \        else if (operator[i] == \"**\") operand[i+1] = operand[i] ** operand[i+1];\n\
    \    }\n    return operand[last];\n}", "{\n    long res = operand[0];\n    for\
    \ (size_t i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case '+':\n                res += operand[i + 1];\n  \
    \              break;\n            case '-':\n                res -= operand[i\
    \ + 1];\n                break;\n            case '*':\n                res *=\
    \ operand[i + 1];\n                break;\n            case '//':\n          \
    \      res /= operand[i + 1];\n                break;\n            case '**':\n\
    \                res = pow(res, operand[i + 1]);\n                break;\n   \
    \     }\n    }\n    return res;\n}", "{\n    auto result = operand[0];\n    foreach(i,\
    \ o; operator)\n    {\n        auto next_index = i + 1;\n        if(o == \"+\"\
    )\n        {\n            result += operand[next_index];\n        }\n        else\
    \ if(o == \"-\")\n        {\n            result -= operand[next_index];\n    \
    \    }\n        else if(o == \"*\")\n        {\n            result *= operand[next_index];\n\
    \        }\n        else if(o == \"//\")\n        {\n            result /= operand[next_index];\n\
    \        }\n        else if(o == \"**\")\n        {\n            result = pow(result,\
    \ operand[next_index]);\n        }\n    }\n    return result;\n}", "{\n    long\
    \ result = operand[0];\n    for (int i = 0; i < operator.length; i++) {\n    \
    \    if (operator[i] == \"+\") {\n            result += operand[i + 1];\n    \
    \    } else if (operator[i] == \"-\") {\n            result -= operand[i + 1];\n\
    \        } else if (operator[i] == \"*\") {\n            result *= operand[i +\
    \ 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = cast(long)pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}", "{\n    //long[]\
    \ results = new long[operand.size];\n    long result = operand[0];\n    for(size_t\
    \ i = 0; i < operator.size; i++)\n    {\n        if(operator[i] == \"+\")\n  \
    \      {\n            result += operand[i+1];\n        }\n        else if(operator[i]\
    \ == \"-\")\n        {\n            result -= operand[i+1];\n        }\n     \
    \   else if(operator[i] == \"*\")\n        {\n            result *= operand[i+1];\n\
    \        }\n        else if(operator[i] == \"//\")\n        {\n            result\
    \ /= operand[i+1];\n        }\n        else if(operator[i] == \"**\")\n      \
    \  {\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return\
    \ result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
