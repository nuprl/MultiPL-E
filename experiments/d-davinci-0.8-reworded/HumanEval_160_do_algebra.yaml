name: HumanEval_160_do_algebra
language: d
prompt: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The first\
  \ array has basic algebra operations, and \n    the second array is an array of\
  \ integers. Use the two given arrays to build the algebric \n    expression and\
  \ return the evaluation of this expression.\n\n    The basic algebra operations:\n\
  \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
  \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
  \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
  \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
  \ of operand array minus one.\n        Operand is an array of of non-negative integers.\n\
  \        Operator array has at least one operator, and operand array has at least\
  \ two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[] operand)\
  \ \n"
tests: "unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
  **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"\
  *\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
  \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
completions: ["{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}", "{\n\
    \  /*\n    Assume operator contains valid values\n    Assume operand contains\
    \ valid values\n    Assume length of operator is equal to the length of operand\
    \ minus one.\n  */\n  // storing result at the first value of operand\n  // do\
    \ operation with each operator\n  // return result stored at first index of operand\n\
    \  foreach(i, o; operator)\n  {\n    switch(o)\n    {\n      case \"+\":\n   \
    \     operand[0] += operand[i+1];\n        break;\n      case \"-\":\n       \
    \ operand[0] -= operand[i+1];\n        break;\n      case \"*\":\n        operand[0]\
    \ *= operand[i+1];\n        break;\n      case \"//\":\n        operand[0] /=\
    \ operand[i+1];\n        break;\n      case \"**\":\n        operand[0] = long(pow(double(operand[0]),\
    \ double(operand[i+1])));\n        break;\n    }\n  }\n  return operand[0];\n}",
  "{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length; i++)\n\
    \    {\n        switch (operator[i])\n        {\n            case \"+\":\n   \
    \             result += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                result -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i + 1];\n        \
    \        break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}", "{\n    long num = operand[0];\n    foreach(int i, string\
    \ j; operator)\n    {\n        if(j == \"+\")\n            num += operand[i+1];\n\
    \        else if(j == \"-\")\n            num -= operand[i+1];\n        else if(j\
    \ == \"*\")\n            num *= operand[i+1];\n        else if(j == \"//\")\n\
    \            num /= operand[i+1];\n        else if(j == \"**\")\n            num\
    \ = pow(num, operand[i+1]);\n    }\n    return num;\n}", "{\n    auto result =\
    \ operand[0];\n    for (size_t i = 0; i < operator.length; i++)\n    {\n     \
    \   if (operator[i] == \"+\")\n            result += operand[i + 1];\n       \
    \ else if (operator[i] == \"-\")\n            result -= operand[i + 1];\n    \
    \    else if (operator[i] == \"*\")\n            result *= operand[i + 1];\n \
    \       else if (operator[i] == \"//\")\n            result /= operand[i + 1];\n\
    \        else if (operator[i] == \"**\")\n            result = (long)pow(result,\
    \ operand[i + 1]);\n    }\n    return result;\n}", "{\n    long result = operand[0];\n\
    \    for (int i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case \"+\":\n                result += operand[i + 1];\n\
    \                break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = (long)pow(result, operand[i + 1]);\n     \
    \           break;\n        }\n    }\n    return result;\n}", "{\n    long result\
    \ = operand[0];\n    for (int i = 0; i < operator.length; i++) {\n        if (operator[i]\
    \ == \"+\") {\n            result += operand[i + 1];\n        } else if (operator[i]\
    \ == \"-\") {\n            result -= operand[i + 1];\n        } else if (operator[i]\
    \ == \"*\") {\n            result *= operand[i + 1];\n        } else if (operator[i]\
    \ == \"//\") {\n            result /= operand[i + 1];\n        } else if (operator[i]\
    \ == \"**\") {\n            result = long(pow(result, operand[i + 1]));\n    \
    \    }\n    }\n    return result;\n}", "{\n    long result = operand[0];\n   \
    \ for (int i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case \"+\":\n                result += operand[i + 1];\n\
    \                break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = pow(result, operand[i + 1]);\n           \
    \     break;\n        }\n    }\n    return result;\n}", "{\n    long result =\
    \ operand[0];\n    for (int i = 0; i < operator.length; i++)\n    {\n        switch\
    \ (operator[i])\n        {\n            case \"+\":\n                result +=\
    \ operand[i + 1];\n                break;\n            case \"-\":\n         \
    \       result -= operand[i + 1];\n                break;\n            case \"\
    *\":\n                result *= operand[i + 1];\n                break;\n    \
    \        case \"//\":\n                result /= operand[i + 1];\n           \
    \     break;\n            case \"**\":\n                result = (long)pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}", "{\n    int len = operator.length;\n    long temp = operand[0];\n\
    \    for(int i = 0; i < len; i++)\n    {\n        switch(operator[i])\n      \
    \  {\n            case \"+\":\n                temp += operand[i+1];\n       \
    \         break;\n            case \"-\":\n                temp -= operand[i+1];\n\
    \                break;\n            case \"*\":\n                temp *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                temp /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                temp = (long)pow(temp,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return temp;\n\
    }", "{\n    // Convert long[] to List<long>\n    List<long> arrList = new List<long>();\n\
    \    foreach(long i in operand)\n    {\n        arrList.Add(i);\n    }\n    //\
    \ Convert string[] to List<string>\n    List<string> opList = new List<string>();\n\
    \    foreach(string i in operator)\n    {\n        opList.Add(i);\n    }\n   \
    \ // Do exponentiation first\n    while(opList.IndexOf(\"**\") != -1)\n    {\n\
    \        int index = opList.IndexOf(\"**\");\n        long num1 = arrList[index];\n\
    \        long num2 = arrList[index + 1];\n        long val = (long)pow(num1, num2);\n\
    \        arrList.RemoveAt(index);\n        arrList.RemoveAt(index);\n        arrList.Insert(index,\
    \ val);\n        opList.RemoveAt(index);\n    }\n    // Do multiplication or division\
    \ next\n    while(opList.IndexOf(\"*\") != -1 || opList.IndexOf(\"//\") != -1)\n\
    \    {\n        int index = -1;\n        long val = -1;\n        if(opList.IndexOf(\"\
    *\") != -1)\n        {\n            index = opList.IndexOf(\"*\");\n         \
    \   long num1 = arrList[index];\n            long num2 = arrList[index + 1];\n\
    \            val = num1 * num2;\n        }\n        else if(opList.IndexOf(\"\
    //\") != -1)\n        {\n            index = opList.IndexOf(\"//\");\n       \
    \     long num1 = arrList[index];\n            long num2 = arrList[index + 1];\n\
    \            val = num1 / num2;\n        }\n        arrList.RemoveAt(index);\n\
    \        arrList.RemoveAt(index);\n        arrList.Insert(index, val);\n     \
    \   opList.RemoveAt(index);\n    }\n    // Do addition or subtraction last\n \
    \   while(opList.IndexOf(\"+\") != -1 || opList.IndexOf(\"-\") != -1)\n    {\n\
    \        int index = -1", "{\n    long result = operand[0];\n    for (int i =\
    \ 0; i < operator.length; i++)\n    {\n        string op = operator[i];\n    \
    \    switch (op)\n        {\n            case \"+\":\n                result +=\
    \ operand[i + 1];\n                break;\n            case \"-\":\n         \
    \       result -= operand[i + 1];\n                break;\n            case \"\
    *\":\n                result *= operand[i + 1];\n                break;\n    \
    \        case \"//\":\n                result /= operand[i + 1];\n           \
    \     break;\n            case \"**\":\n                result = cast(long) pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    if (operator.length == 0 || operand.length == 0)\n        return -1;\n\
    \    else if (operator.length != operand.length - 1)\n        return -1;\n   \
    \ \n    long result = operand[0];\n    for (long i = 0; i < operator.length; i++)\n\
    \    {\n        switch (operator[i])\n        {\n            case \"+\":\n   \
    \             result += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                result -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i + 1];\n        \
    \        break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    return result;\n}", "{\n    //\
    \ your code here\n    long ret = operand[0];\n    for(int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                ret += operand[i+1];\n                break;\n            case\
    \ '-':\n                ret -= operand[i+1];\n                break;\n       \
    \     case '*':\n                ret *= operand[i+1];\n                break;\n\
    \            case '//':\n                ret /= operand[i+1];\n              \
    \  break;\n            case '**':\n                ret = pow(ret, operand[i+1]);\n\
    \                break;\n        }\n    }\n    return ret;\n}", "{\n    int last\
    \ = operand.length - 1;\n    if (operator.length != last) return 0;\n    for (int\
    \ i = 0; i < last; i++)\n    {\n        if (operator[i] == \"+\") operand[i+1]\
    \ += operand[i];\n        else if (operator[i] == \"-\") operand[i+1] = operand[i]\
    \ - operand[i+1];\n        else if (operator[i] == \"*\") operand[i+1] *= operand[i];\n\
    \        else if (operator[i] == \"//\") operand[i+1] = operand[i] / operand[i+1];\n\
    \        else if (operator[i] == \"**\") operand[i+1] = operand[i] ** operand[i+1];\n\
    \    }\n    return operand[last];\n}", "{\n    long res = operand[0];\n    for\
    \ (size_t i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case '+':\n                res += operand[i + 1];\n  \
    \              break;\n            case '-':\n                res -= operand[i\
    \ + 1];\n                break;\n            case '*':\n                res *=\
    \ operand[i + 1];\n                break;\n            case '//':\n          \
    \      res /= operand[i + 1];\n                break;\n            case '**':\n\
    \                res = pow(res, operand[i + 1]);\n                break;\n   \
    \     }\n    }\n    return res;\n}", "{\n    auto result = operand[0];\n    foreach(i,\
    \ o; operator)\n    {\n        auto next_index = i + 1;\n        if(o == \"+\"\
    )\n        {\n            result += operand[next_index];\n        }\n        else\
    \ if(o == \"-\")\n        {\n            result -= operand[next_index];\n    \
    \    }\n        else if(o == \"*\")\n        {\n            result *= operand[next_index];\n\
    \        }\n        else if(o == \"//\")\n        {\n            result /= operand[next_index];\n\
    \        }\n        else if(o == \"**\")\n        {\n            result = pow(result,\
    \ operand[next_index]);\n        }\n    }\n    return result;\n}", "{\n    long\
    \ result = operand[0];\n    for (int i = 0; i < operator.length; i++) {\n    \
    \    if (operator[i] == \"+\") {\n            result += operand[i + 1];\n    \
    \    } else if (operator[i] == \"-\") {\n            result -= operand[i + 1];\n\
    \        } else if (operator[i] == \"*\") {\n            result *= operand[i +\
    \ 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = cast(long)pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}", "{\n    //long[]\
    \ results = new long[operand.size];\n    long result = operand[0];\n    for(size_t\
    \ i = 0; i < operator.size; i++)\n    {\n        if(operator[i] == \"+\")\n  \
    \      {\n            result += operand[i+1];\n        }\n        else if(operator[i]\
    \ == \"-\")\n        {\n            result -= operand[i+1];\n        }\n     \
    \   else if(operator[i] == \"*\")\n        {\n            result *= operand[i+1];\n\
    \        }\n        else if(operator[i] == \"//\")\n        {\n            result\
    \ /= operand[i+1];\n        }\n        else if(operator[i] == \"**\")\n      \
    \  {\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return\
    \ result;\n}", "{\n    if (operand.length == 0) return 0;\n    if (operand.length\
    \ == 1) return operand[0];\n    if (operator.length == 0) return 0;\n    if (operator.length\
    \ != operand.length - 1) return 0;\n    long op1 = operand[0];\n    long op2 =\
    \ operand[1];\n    long result = 0;\n    switch (operator[0])\n    {\n       \
    \ case \"+\": result = op1 + op2; break;\n        case \"-\": result = op1 - op2;\
    \ break;\n        case \"*\": result = op1 * op2; break;\n        case \"//\"\
    : result = op1 / op2; break;\n        case \"**\": result = (long)pow(op1, op2);\
    \ break;\n    }\n    long[] newOperand = new long[operand.length - 1];\n    newOperand[0]\
    \ = result;\n    long i = 1;\n    while (i < operand.length - 1)\n    {\n    \
    \    newOperand[i] = operand[i + 1];\n        i++;\n    }\n    string[] newOperator\
    \ = new string[operator.length - 1];\n    i = 0;\n    while (i < operator.length\
    \ - 1)\n    {\n        newOperator[i] = operator[i + 1];\n        i++;\n    }\n\
    \    return do_algebra(newOperator, newOperand);\n}", "{\n    \n    long result\
    \ = operand[0];\n    for(int i = 0; i < operator.length; i++)\n    {\n       \
    \ if(operator[i] == \"+\")\n        {\n            result += operand[i+1];\n \
    \       }\n        else if(operator[i] == \"-\")\n        {\n            result\
    \ -= operand[i+1];\n        }\n        else if(operator[i] == \"*\")\n       \
    \ {\n            result *= operand[i+1];\n        }\n        else if(operator[i]\
    \ == \"//\")\n        {\n            result /= operand[i+1];\n        }\n    \
    \    else if(operator[i] == \"**\")\n        {\n            result = (long)pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}", "{\n    long accumulator\
    \ = operand[0];\n    foreach(i, op; operator)\n    {\n        switch(op)\n   \
    \     {\n            case \"+\": accumulator += operand[i+1]; break;\n       \
    \     case \"-\": accumulator -= operand[i+1]; break;\n            case \"*\"\
    : accumulator *= operand[i+1]; break;\n            case \"//\": accumulator /=\
    \ operand[i+1]; break;\n            case \"**\": accumulator = pow(accumulator,\
    \ operand[i+1]); break;\n        }\n    }\n    return accumulator;\n}", "{\n \
    \   long a = operand[0];\n    long b = operand[1];\n    long result = 0;\n   \
    \ switch(operator[0])\n    {\n        case \"+\":\n            result = a + b;\n\
    \            break;\n        case \"-\":\n            result = a - b;\n      \
    \      break;\n        case \"*\":\n            result = a * b;\n            break;\n\
    \        case \"//\":\n            result = a / b;\n            break;\n     \
    \   case \"**\":\n            result = cast(long)pow(a, b);\n            break;\n\
    \    }\n    if(operator.length > 1)\n    {\n        return do_algebra(operator[1..$],\
    \ operand[1..$], result);\n    }\n    return result;\n}\nlong do_algebra(string[]\
    \ operator, long[] operand, long nextResult) \n{\n    long b = operand[1];\n \
    \   long result = 0;\n    switch(operator[0])\n    {\n        case \"+\":\n  \
    \          result = nextResult + b;\n            break;\n        case \"-\":\n\
    \            result = nextResult - b;\n            break;\n        case \"*\"\
    :\n            result = nextResult * b;\n            break;\n        case \"//\"\
    :\n            result = nextResult / b;\n            break;\n        case \"**\"\
    :\n            result = cast(long)pow(nextResult, b);\n            break;\n  \
    \  }\n    if(operator.length > 1)\n    {\n        return do_algebra(operator[1..$],\
    \ operand[1..$], result);\n    }\n    return result;\n}", "{\n    long result\
    \ = operand[0];\n    for (long i = 0; i < operator.length; i++)\n    {\n     \
    \   switch (operator[i])\n        {\n            case \"+\":\n               \
    \ result += operand[i + 1];\n                break;\n            case \"-\":\n\
    \                result -= operand[i + 1];\n                break;\n         \
    \   case \"*\":\n                result *= operand[i + 1];\n                break;\n\
    \            case \"//\":\n                result /= operand[i + 1];\n       \
    \         break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    long res = operand[0];\n    for (int i = 0; i < operator.length; i++)\n\
    \    {\n        if (operator[i] == \"+\")\n            res += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            res -= operand[i+1];\n  \
    \      else if (operator[i] == \"*\")\n            res *= operand[i+1];\n    \
    \    else if (operator[i] == \"//\")\n            res /= operand[i+1];\n     \
    \   else if (operator[i] == \"**\")\n            res = (long)pow(res, operand[i+1]);\n\
    \    }\n    return res;\n}", "{\n    long result = operand[0];\n    for (int i\
    \ = 0; i < operator.length; i++) {\n        if (operator[i] == \"+\") {\n    \
    \        result += operand[i + 1];\n        } else if (operator[i] == \"-\") {\n\
    \            result -= operand[i + 1];\n        } else if (operator[i] == \"*\"\
    ) {\n            result *= operand[i + 1];\n        } else if (operator[i] ==\
    \ \"//\") {\n            result /= operand[i + 1];\n        } else if (operator[i]\
    \ == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n\
    \    }\n    return result;\n}", "{\n    long l = 0;\n    long r = 0;\n    long\
    \ result = 0;\n    char op = 'a';\n    foreach(e; zip(operator, operand))\n  \
    \  {\n        l = r;\n        op = e[0];\n        r = e[1];\n        switch(op)\n\
    \        {\n            case '+':\n                result = l + r;\n         \
    \       break;\n            case '-':\n                result = l - r;\n     \
    \           break;\n            case '*':\n                result = l * r;\n \
    \               break;\n            case '/':\n                result = l / r;\n\
    \                break;\n            case '^':\n                result = pow(l,\
    \ r);\n                break;\n        }\n    }\n    return result;\n}", "{\n\
    \    long result = operand[0];\n    for (int i = 0; i < operator.length; i++)\n\
    \    {\n        if (operator[i] == \"+\") result += operand[i+1];\n        else\
    \ if (operator[i] == \"-\") result -= operand[i+1];\n        else if (operator[i]\
    \ == \"*\") result *= operand[i+1];\n        else if (operator[i] == \"//\") result\
    \ /= operand[i+1];\n        else if (operator[i] == \"**\") result = pow(result,\
    \ operand[i+1]);\n    }\n    return result;\n}", "{\n    long result = operand[0];\n\
    \    for (long i = 0; i < operator.length; i++)\n    {\n        if (operator[i]\
    \ == \"+\")\n        {\n            result += operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"-\")\n        {\n            result -= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"*\")\n        {\n            result\
    \ *= operand[i+1];\n        }\n        else if (operator[i] == \"//\")\n     \
    \   {\n            result /= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"**\")\n        {\n            result = pow(result, operand[i+1]);\n   \
    \     }\n    }\n    return result;\n}", "{\n    long result = operand[0];\n  \
    \  for (int i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n\
    \            case \"+\":\n                result += operand[i + 1];\n        \
    \        break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = pow(result, operand[i + 1]);\n           \
    \     break;\n        }\n    }\n    return result;\n}\nlong do_algebra(string[]\
    \ operator, long[] operand) \n{\n    long result = operand[0];\n    for (int i\
    \ = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n         \
    \   case \"+\":\n                result += operand[i + 1];\n                break;\n\
    \            case \"-\":\n                result -= operand[i + 1];\n        \
    \        break;\n            case \"*\":\n                result *= operand[i\
    \ + 1];\n                break;\n            case \"//\":\n                result\
    \ /= operand[i + 1];\n                break;\n            case \"**\":\n     \
    \           result = pow(result, operand[i + 1]);\n                break;\n  \
    \      }\n    }\n    return result;\n}", "{\n    int i = 0;\n    long tmp = operand[i];\n\
    \    for(int j = 0; j < operator.length; j++) {\n        if(operator[j] == \"\
    +\") {\n            tmp += operand[++i];\n        }\n        else if(operator[j]\
    \ == \"-\") {\n            tmp -= operand[++i];\n        }\n        else if(operator[j]\
    \ == \"*\") {\n            tmp *= operand[++i];\n        }\n        else if(operator[j]\
    \ == \"//\") {\n            tmp /= operand[++i];\n        }\n        else if(operator[j]\
    \ == \"**\") {\n            tmp = pow(tmp, operand[++i]);\n        }\n    }\n\
    \    return tmp;\n}", "{\n    long result = operand[0];\n    for (long i = 0;\
    \ i < operator.length; i++)\n    {\n        if (operator[i] == \"+\") result +=\
    \ operand[i+1];\n        else if (operator[i] == \"-\") result -= operand[i+1];\n\
    \        else if (operator[i] == \"*\") result *= operand[i+1];\n        else\
    \ if (operator[i] == \"//\") result /= operand[i+1];\n        else if (operator[i]\
    \ == \"**\") result = pow(result, operand[i+1]);\n    }\n    return result;\n}",
  "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length; i++)\
    \ {\n        if (operator[i] == \"+\") {\n            result += operand[i + 1];\n\
    \        } else if (operator[i] == \"-\") {\n            result -= operand[i +\
    \ 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}", "{\n    long result\
    \ = operand[0];\n    for (int i = 0; i < operator.length; i++) {\n        switch\
    \ (operator[i]) {\n            case \"+\":\n                result += operand[i\
    \ + 1];\n                break;\n            case \"-\":\n                result\
    \ -= operand[i + 1];\n                break;\n            case \"*\":\n      \
    \          result *= operand[i + 1];\n                break;\n            case\
    \ \"//\":\n                result /= operand[i + 1];\n                break;\n\
    \            case \"**\":\n                result = pow(result, operand[i + 1]);\n\
    \                break;\n        }\n    }\n    return result;\n}", "{\n    long\
    \ result = operand[0];\n    long operand_length = operand.length;\n    for (int\
    \ i = 0; i < operand_length - 1; i++)\n    {\n        switch (operator[i]) \n\
    \        {\n            case \"+\":\n                result += operand[i + 1];\n\
    \                break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = pow(result, operand[i + 1]);\n           \
    \     break;\n        }\n    }\n    return result;\n}", "{\n    long result =\
    \ operand[0];\n    for (long i = 0; i < operator.length; i++) {\n        if (operator[i]\
    \ == \"+\") result += operand[i + 1];\n        else if (operator[i] == \"-\")\
    \ result -= operand[i + 1];\n        else if (operator[i] == \"*\") result *=\
    \ operand[i + 1];\n        else if (operator[i] == \"//\") result /= operand[i\
    \ + 1];\n        else if (operator[i] == \"**\") result = (long)pow(result, operand[i\
    \ + 1]);\n    }\n    return result;\n}", "{\n    long res;\n    foreach(c; operator)\n\
    \    {\n        res = operand[0];\n        switch(c)\n        {\n            case\
    \ '+':\n                res += operand[1];\n                break;\n         \
    \   case '-':\n                res -= operand[1];\n                break;\n  \
    \          case '*':\n                res *= operand[1];\n                break;\n\
    \            case '//':\n                res /= operand[1];\n                break;\n\
    \            case '**':\n                res = pow(res, operand[1]);\n       \
    \         break;\n        }\n        operand = operand[1..$];\n        operand[0]\
    \ = res;\n    }\n    return res;\n}", "{\n    long result = operand[0];\n    for\
    \ (long i = 0; i < operator.length; i++)\n    {\n        if (operator[i] == \"\
    +\")\n        {\n            result += operand[i+1];\n        }\n        else\
    \ if (operator[i] == \"-\")\n        {\n            result -= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"*\")\n        {\n            result\
    \ *= operand[i+1];\n        }\n        else if (operator[i] == \"//\")\n     \
    \   {\n            result /= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"**\")\n        {\n            result = long(pow(result, operand[i+1]));\n\
    \        }\n    }\n    return result;\n}", "{\n    ulong i = 0;\n    ulong opLen\
    \ = operator.length;\n    long result = operand[0];\n    for (i = 0; i < opLen;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}", "{\n    long r = operand[0];\n    for (long i = 0; i <\
    \ operator.length; i++)\n    {\n        switch (operator[i])\n        {\n    \
    \        case \"+\":\n                r += operand[i + 1];\n                break;\n\
    \            case \"-\":\n                r -= operand[i + 1];\n             \
    \   break;\n            case \"*\":\n                r *= operand[i + 1];\n  \
    \              break;\n            case \"//\":\n                r /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                r =\
    \ cast(long)pow(r, operand[i + 1]);\n                break;\n        }\n    }\n\
    \    return r;\n}", "{\n    long result = operand[0];\n    for (int i = 0; i <\
    \ operator.length; i++)\n    {\n        if (operator[i] == \"+\")\n        {\n\
    \            result += operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"-\")\n        {\n            result -= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"*\")\n        {\n            result *= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"//\")\n        {\n            result\
    \ /= operand[i+1];\n        }\n        else if (operator[i] == \"**\")\n     \
    \   {\n            result = pow(result, operand[i+1]);\n        }\n    }\n   \
    \ return result;\n}", "{ \n    long result = operand[0];\n    for (int i = 0;\
    \ i < operator.length; i++) {\n        switch (operator[i]) {\n            case\
    \ \"+\":\n                result += operand[i + 1];\n                break;\n\
    \            case \"-\":\n                result -= operand[i + 1];\n        \
    \        break;\n            case \"*\":\n                result *= operand[i\
    \ + 1];\n                break;\n            case \"//\":\n                result\
    \ /= operand[i + 1];\n                break;\n            case \"**\":\n     \
    \           result = (long) pow(result, operand[i + 1]);\n                break;\n\
    \        }\n    }\n    return result;\n}", "{\n    long result = operand[0];\n\
    \    int length = operator.length;\n    for (int i = 0; i < length; i++) {\n \
    \       switch (operator[i]) {\n            case \"+\":\n                result\
    \ += operand[i + 1];\n                break;\n            case \"-\":\n      \
    \          result -= operand[i + 1];\n                break;\n            case\
    \ \"*\":\n                result *= operand[i + 1];\n                break;\n\
    \            case \"//\":\n                result /= operand[i + 1];\n       \
    \         break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    auto res = operand[0];\n    foreach(i, e; operand[1..$])\n    {\n\
    \        switch(operator[i])\n        {\n            case \"+\": res += e; break;\n\
    \            case \"-\": res -= e; break;\n            case \"*\": res *= e; break;\n\
    \            case \"//\": res /= e; break;\n            case \"**\": res ^^= e;\
    \ break;\n        }\n    }\n    return res;\n}", "{ \n    long _result = operand[0];\n\
    \    for (int i = 0; i < operator.length; i++) {\n        if (operator[i] == \"\
    +\") {\n            _result += operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"-\") {\n            _result -= operand[i+1];\n        }\n        else if\
    \ (operator[i] == \"*\") {\n            _result *= operand[i+1];\n        }\n\
    \        else if (operator[i] == \"//\") {\n            _result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\") {\n            _result = (long)pow(_result,\
    \ operand[i+1]);\n        }\n    }\n    return _result;\n}", "{\n    auto oper\
    \ = operand[0];\n    for (int i = 0; i < operator.length; i++) {\n        switch\
    \ (operator[i]) {\n            case '+':\n                oper += operand[i +\
    \ 1];\n                break;\n            case '-':\n                oper -=\
    \ operand[i + 1];\n                break;\n            case '*':\n           \
    \     oper *= operand[i + 1];\n                break;\n            case '//':\n\
    \                oper /= operand[i + 1];\n                break;\n           \
    \ case '**':\n                oper = pow(oper, operand[i + 1]);\n            \
    \    break;\n        }\n    }\n    return oper;\n}", "{\n    long total = operand[0];\n\
    \    for (size_t i = 0; i < operator.length; i++)\n    {\n        if (operator[i]\
    \ == \"+\")\n        {\n            total += operand[i+1];\n        }\n      \
    \  else if (operator[i] == \"-\")\n        {\n            total -= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"*\")\n        {\n            total\
    \ *= operand[i+1];\n        }\n        else if (operator[i] == \"//\")\n     \
    \   {\n            total /= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"**\")\n        {\n            total = pow(total, operand[i+1]);\n     \
    \   }\n    }\n    return total;\n}", "{\n     long result = operand[0];\n    \
    \ for(size_t i = 0; i < operator.length; i++)\n     {\n         switch(operator[i])\n\
    \         {\n             case \"+\":\n                result += operand[i+1];\n\
    \                break;\n             case \"-\":\n                result -= operand[i+1];\n\
    \                break;\n             case \"*\":\n                result *= operand[i+1];\n\
    \                break;\n             case \"//\":\n                result /=\
    \ operand[i+1];\n                break;\n             case \"**\":\n         \
    \       result = pow(result, operand[i+1]);\n                break;\n        \
    \ }\n     }\n     return result;\n}", "{\n    long result = operand[0];\n    for\
    \ (int i = 0; i < operator.length; i++)\n    {\n        if (operator[i] == \"\
    +\")\n        {\n            result += operand[i+1];\n        }\n        else\
    \ if (operator[i] == \"-\")\n        {\n            result -= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"*\")\n        {\n            result\
    \ *= operand[i+1];\n        }\n        else if (operator[i] == \"//\")\n     \
    \   {\n            result /= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"**\")\n        {\n            result = pow(result, operand[i+1]);\n   \
    \     }\n    }\n    return result;\n}", "{\n    long result = operand[0];\n  \
    \  for (size_t i = 0; i < operator.length; i++)\n    {\n        long curr_op =\
    \ operand[i + 1];\n        if (operator[i] == \"+\")\n            result += curr_op;\n\
    \        else if (operator[i] == \"-\")\n            result -= curr_op;\n    \
    \    else if (operator[i] == \"*\")\n            result *= curr_op;\n        else\
    \ if (operator[i] == \"//\")\n            result /= curr_op;\n        else if\
    \ (operator[i] == \"**\")\n            result = pow(result, curr_op);\n    }\n\
    \    return result;\n}", "{\n    long result = operand[0];\n    for (int i = 0;\
    \ i < operator.length; i++)\n    {\n        switch (operator[i])\n        {\n\
    \            case \"+\":\n                result += operand[i + 1];\n        \
    \        break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = pow(result, operand[i + 1]);\n           \
    \     break;\n        }\n    }\n    return result;\n}", "{\n    long result =\
    \ operand[0];\n    for (int i = 0; i < operator.length; i++)\n    {\n        long\
    \ num = operand[i + 1];\n        switch (operator[i])\n        {\n           \
    \ case \"+\":\n                result += num;\n                break;\n      \
    \      case \"-\":\n                result -= num;\n                break;\n \
    \           case \"*\":\n                result *= num;\n                break;\n\
    \            case \"//\":\n                result /= num;\n                break;\n\
    \            case \"**\":\n                result = pow(result, num);\n      \
    \          break;\n        }\n    }\n    return result;\n}", "{\n    long sum\
    \ = operand[0];\n    for (int i = 0; i < operator.length; i++)\n    {\n      \
    \  if (operator[i] == \"+\")\n        {\n            sum += operand[i+1];\n  \
    \      }\n        else if (operator[i] == \"-\")\n        {\n            sum -=\
    \ operand[i+1];\n        }\n        else if (operator[i] == \"*\")\n        {\n\
    \            sum *= operand[i+1];\n        }\n        else if (operator[i] ==\
    \ \"//\")\n        {\n            sum /= operand[i+1];\n        }\n        else\
    \ if (operator[i] == \"**\")\n        {\n            sum = pow(sum, operand[i+1]);\n\
    \        }\n    }\n    return sum;\n}", "{\n    auto a = operand;\n    auto op\
    \ = operator;\n    long result = a[0];\n    for (int i = 0; i < op.length; i++)\
    \ {\n        if (op[i] == \"+\") result += a[i+1];\n        else if (op[i] ==\
    \ \"-\") result -= a[i+1];\n        else if (op[i] == \"*\") result *= a[i+1];\n\
    \        else if (op[i] == \"//\") result /= a[i+1];\n        else if (op[i] ==\
    \ \"**\") result = (long)pow(result, a[i+1]);\n    }\n    return result;\n}",
  "{\n    long result = operand[0];\n    foreach(i, op; operator)\n    {\n       \
    \ if(op == \"+\")\n            result += operand[i+1];\n        else if(op ==\
    \ \"-\")\n            result -= operand[i+1];\n        else if(op == \"*\")\n\
    \            result *= operand[i+1];\n        else if(op == \"//\")\n        \
    \    result /= operand[i+1];\n        else if(op == \"**\")\n            result\
    \ = pow(result, operand[i+1]);\n    }\n    return result;\n}", "{\n    // build\
    \ the expression\n    string expression = \"\";\n    foreach(idx, op; operator)\n\
    \    {\n        expression ~= operand[idx].idup;\n        expression ~= op;\n\
    \    }\n    expression ~= operand[$-1].idup;\n    return eval(expression);\n}",
  "{\n    long answer = operand[0];\n    long length = operand.length;\n    foreach(int\
    \ i; 0..operator.length)\n    {\n        long temp1 = operand[i];\n        long\
    \ temp2 = operand[i+1];\n        long dg = operator[i].length;\n        if(dg\
    \ == 2)\n        {\n            switch(operator[i])\n            {\n         \
    \       case \"+\":\n                    answer = temp1 + temp2;\n           \
    \         break;\n                case \"-\":\n                    answer = temp1\
    \ - temp2;\n                    break;\n                case \"*\":\n        \
    \            answer = temp1 * temp2;\n                    break;\n           \
    \     case \"//\":\n                    answer = temp1 / temp2;\n            \
    \        break;\n                case \"**\":\n                    answer = temp1\
    \ ^^ temp2;\n                    break;\n            }\n        }\n        else\
    \ if(dg == 1)\n        {\n            switch(operator[i])\n            {\n   \
    \             case \"+\":\n                    answer = temp1 + temp2;\n     \
    \               break;\n                case \"-\":\n                    answer\
    \ = temp1 - temp2;\n                    break;\n                case \"*\":\n\
    \                    answer = temp1 * temp2;\n                    break;\n   \
    \             case \"/\":\n                    answer = temp1 / temp2;\n     \
    \               break;\n                case \"^\":\n                    answer\
    \ = temp1 ^^ temp2;\n                    break;\n            }\n        }\n  \
    \  }\n    return answer;\n}", "{\n    ulong i = 0;\n    long result = operand[0];\n\
    \    while(i < operator.length)\n    {\n        switch(operator[i])\n        {\n\
    \            case \"+\":\n                result += operand[i+1];\n          \
    \      break;\n            case \"-\":\n                result -= operand[i+1];\n\
    \                break;\n            case \"*\":\n                result *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n        i++;\n    }\n   \
    \ return result;\n}", "{\n    long temp = operand[0];\n    for (int i = 0; i <\
    \ operator.length; i++) {\n        if (operator[i] == \"+\") {\n            temp\
    \ += operand[i + 1];\n        } else if (operator[i] == \"-\") {\n           \
    \ temp -= operand[i + 1];\n        } else if (operator[i] == \"*\") {\n      \
    \      temp *= operand[i + 1];\n        } else if (operator[i] == \"//\") {\n\
    \            temp /= operand[i + 1];\n        } else if (operator[i] == \"**\"\
    ) {\n            temp = (long)pow(temp, operand[i + 1]);\n        }\n    }\n \
    \   return temp;\n}\n//Below is the test cases.", "{\n    int i, j;\n    long\
    \ res;\n    string ope;\n    long num;\n    long[] nums = new long[100];\n   \
    \ int top = 0;\n    long[] opes = new long[100];\n    int top2 = 0;\n    long[]\
    \ ops = new long[100];\n    int top3 = 0;\n    for (i = 0; i < operator.length;\
    \ i++)\n    {\n        ope = operator[i];\n        num = operand[i + 1];\n   \
    \     if (ope == \"**\")\n        {\n            res = pow(nums[top - 1], num);\n\
    \            nums[top - 1] = res;\n        }\n        else\n        {\n      \
    \      nums[top++] = num;\n            opes[top2++] = ope;\n        }\n    }\n\
    \    for (i = 0; i < top2; i++)\n    {\n        ope = opes[i];\n        num =\
    \ nums[i];\n        if (ope == \"*\" || ope == \"//\")\n        {\n          \
    \  res = ops[top3 - 1];\n            ops[top3 - 1] = (ope == \"*\") ? res * num\
    \ : res / num;\n        }\n        else\n        {\n            ops[top3++] =\
    \ num;\n            opes[top2++] = ope;\n        }\n    }\n    res = ops[0];\n\
    \    for (i = 0; i < top2; i++)\n    {\n        ope = opes[i];\n        num =\
    \ ops[i + 1];\n        res = (ope == \"+\") ? res + num : res - num;\n    }\n\
    \    return res;\n}", "{\n    long result = operand[0];\n    for (int i = 0; i\
    \ < operator.length; i++) {\n        if (operator[i] == \"+\")\n            result\
    \ += operand[i + 1];\n        else if (operator[i] == \"-\")\n            result\
    \ -= operand[i + 1];\n        else if (operator[i] == \"*\")\n            result\
    \ *= operand[i + 1];\n        else if (operator[i] == \"//\")\n            result\
    \ /= operand[i + 1];\n        else if (operator[i] == \"**\")\n            result\
    \ = (long)pow(result, operand[i + 1]);\n    }\n    return result;\n}", "{\n  \
    \  long result = operand[0];\n    for (int i = 0; i < operator.length; i++) {\n\
    \        switch (operator[i]) {\n            case \"+\":\n                result\
    \ += operand[i + 1];\n                break;\n            case \"-\":\n      \
    \          result -= operand[i + 1];\n                break;\n            case\
    \ \"*\":\n                result *= operand[i + 1];\n                break;\n\
    \            case \"//\":\n                result /= operand[i + 1];\n       \
    \         break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}", "{\n    long result = operand[0];\n    for (int i = 0;\
    \ i < operator.length; i++) {\n        if (operator[i] == \"+\")\n           \
    \ result += operand[i + 1];\n        else if (operator[i] == \"-\")\n        \
    \    result -= operand[i + 1];\n        else if (operator[i] == \"*\")\n     \
    \       result *= operand[i + 1];\n        else if (operator[i] == \"//\")\n \
    \           result /= operand[i + 1];\n        else if (operator[i] == \"**\"\
    )\n            result = pow(result, operand[i + 1]);\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    : result += operand[i+1]; break;\n            case \"-\": result -= operand[i+1];\
    \ break;\n            case \"*\": result *= operand[i+1]; break;\n           \
    \ case \"//\": result /= operand[i+1]; break;\n            case \"**\": result\
    \ = pow(result, operand[i+1]); break;\n        }\n    }\n    return result;\n}",
  "{\n    auto math_operators = [\"+\", \"-\", \"*\", \"//\", \"**\"];\n    auto result\
    \ = 0;\n    for (auto i = 0; i < operator.length; i++)\n    {\n        switch\
    \ (operator[i])\n        {\n            case \"+\":\n                result +=\
    \ operand[i] + operand[i + 1];\n                break;\n            case \"-\"\
    :\n                result += operand[i] - operand[i + 1];\n                break;\n\
    \            case \"*\":\n                result += operand[i] * operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result += operand[i]\
    \ / operand[i + 1];\n                break;\n            case \"**\":\n      \
    \          result += pow(operand[i], operand[i + 1]);\n                break;\n\
    \        }\n    }\n    return result;\n}", "{\n    // Write your code here\n \
    \   long _result = operand[0];\n    for(int i = 0; i < operator.length; i++)\n\
    \    {\n        if(operator[i] == \"*\") _result *= operand[i+1];\n        else\
    \ if(operator[i] == \"/\") _result /= operand[i+1];\n        else if(operator[i]\
    \ == \"+\") _result += operand[i+1];\n        else if(operator[i] == \"-\") _result\
    \ -= operand[i+1];\n        else if(operator[i] == \"**\") _result = pow(_result,\
    \ operand[i+1]);\n    }\n    return _result;\n}", "{\n    long total;\n    long[]\
    \ o = operand;\n    string[] ope = operator;\n    for(int i = 0; i < ope.length;\
    \ i++)\n    {\n        if(ope[i] == \"+\")\n        {\n            total = o[i]\
    \ + o[i+1];\n            o[i+1] = total;\n        }\n        else if(ope[i] ==\
    \ \"-\")\n        {\n            total = o[i] - o[i+1];\n            o[i+1] =\
    \ total;\n        }\n        else if(ope[i] == \"*\")\n        {\n           \
    \ total = o[i] * o[i+1];\n            o[i+1] = total;\n        }\n        else\
    \ if(ope[i] == \"//\")\n        {\n            total = o[i] / o[i+1];\n      \
    \      o[i+1] = total;\n        }\n        else if(ope[i] == \"**\")\n       \
    \ {\n            total = o[i] ** o[i+1];\n            o[i+1] = total;\n      \
    \  }\n        else\n        {\n            total = 0;\n        }\n    }\n    return\
    \ total;\n}", "{\n    int n = 0;\n    long result = operand[0];\n    for (n =\
    \ 0; n < operator.length; n++)\n    {\n        if (operator[n] == \"+\")\n   \
    \     {\n            result += operand[n+1];\n        }\n        else if (operator[n]\
    \ == \"-\")\n        {\n            result -= operand[n+1];\n        }\n     \
    \   else if (operator[n] == \"*\")\n        {\n            result *= operand[n+1];\n\
    \        }\n        else if (operator[n] == \"//\")\n        {\n            result\
    \ /= operand[n+1];\n        }\n        else if (operator[n] == \"**\")\n     \
    \   {\n            result = pow(result, operand[n+1]);\n        }\n    }\n   \
    \ return result;\n}", "{\n    long res = operand[0];\n    for (size_t i = 0; i\
    \ < operator.length; i++)\n    {\n        switch (operator[i])\n        {\n  \
    \          case \"+\":\n                res += operand[i + 1];\n             \
    \   break;\n            case \"-\":\n                res -= operand[i + 1];\n\
    \                break;\n            case \"*\":\n                res *= operand[i\
    \ + 1];\n                break;\n            case \"//\":\n                res\
    \ /= operand[i + 1];\n                break;\n            case \"**\":\n     \
    \           res = pow(res, operand[i + 1]);\n                break;\n        }\n\
    \    }\n    return res;\n}", "{\n    long result = operand[0];\n    for (int i\
    \ = 0; i < operator.length; i++)\n    {\n        if (operator[i] == \"+\")\n \
    \       {\n            result += operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"-\")\n        {\n            result -= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"*\")\n        {\n            result *= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"//\")\n        {\n            result\
    \ /= operand[i+1];\n        }\n        else if (operator[i] == \"**\")\n     \
    \   {\n            result = pow(result, operand[i+1]);\n        }\n    }\n   \
    \ return result;\n}", "{\n    long result = operand[0];\n    for (long i = 0;\
    \ i < operator.length; i++)\n    {\n        if (operator[i] == \"+\")\n      \
    \  {\n            result += operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"-\")\n        {\n            result -= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"*\")\n        {\n            result *= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"//\")\n        {\n            result\
    \ /= operand[i+1];\n        }\n        else if (operator[i] == \"**\")\n     \
    \   {\n            result = pow(result, operand[i+1]);\n        }\n    }\n   \
    \ return result;\n}", "{\n    auto total = operand[0];\n    for (int i = 0; i\
    \ < operator.length; i++)\n    {\n        switch (operator[i])\n        {\n  \
    \          case \"+\":\n                total += operand[i + 1];\n           \
    \     break;\n            case \"-\":\n                total -= operand[i + 1];\n\
    \                break;\n            case \"*\":\n                total *= operand[i\
    \ + 1];\n                break;\n            case \"//\":\n                total\
    \ /= operand[i + 1];\n                break;\n            case \"**\":\n     \
    \           total = pow(total, operand[i + 1]);\n                break;\n    \
    \    }\n    }\n    return total;\n}", "{\n    long result = operand[0];\n    int\
    \ operators_number = operator.length;\n    for (int i = 0; i < operators_number;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}", "{\n\
    \  long result = operand[0];\n  for (int i = 0; i < operator.length; i++)\n  {\n\
    \    if (operator[i] == \"+\") {\n      result += operand[i+1];\n    } else if\
    \ (operator[i] == \"-\") {\n      result -= operand[i+1];\n    } else if (operator[i]\
    \ == \"*\") {\n      result *= operand[i+1];\n    } else if (operator[i] == \"\
    //\") {\n      result /= operand[i+1];\n    } else if (operator[i] == \"**\")\
    \ {\n      result = pow(result, operand[i+1]);\n    } else {\n      return -1;\n\
    \    }\n  }\n  return result;\n}", "{\n    long result = operand[0];\n    int\
    \ i = 0;\n    while(i < operator.length)\n    {\n        if(operator[i] == \"\
    +\")\n        {\n            result += operand[i+1];\n        }\n        else\
    \ if(operator[i] == \"-\")\n        {\n            result -= operand[i+1];\n \
    \       }\n        else if(operator[i] == \"*\")\n        {\n            result\
    \ *= operand[i+1];\n        }\n        else if(operator[i] == \"//\")\n      \
    \  {\n            result /= operand[i+1];\n        }\n        else if(operator[i]\
    \ == \"**\")\n        {\n            result = pow(result, operand[i+1]);\n   \
    \     }\n        i++;\n    }\n    return result;\n}", "{\n    /*\n        be careful\
    \ on the error line .\n        There are five kinds of algebra operators:\n  \
    \      addition(+), subtraction(-), multiplication(*), floor division(//), exponentiation(**)\n\
    \        And the order of precedence are:\n        exponentiation(**) > multiplication(*),\
    \ floor division(//) > addition(+) = subtraction(-)\n        We should do the\
    \ multiplication, floor division and exponentiation first.\n        For example:\n\
    \        2 + 3 * 4 - 5 \n        should be 2 + (3 * 4) - 5, not 2 + 3 * (4 - 5).",
  "{\n    long tmp = operand[0];\n    int x = 1;\n    foreach(string op; operator)\n\
    \    {\n        switch(op)\n        {\n            case \"+\":\n             \
    \   tmp += operand[x];\n                break;\n            case \"-\":\n    \
    \            tmp -= operand[x];\n                break;\n            case \"*\"\
    :\n                tmp *= operand[x];\n                break;\n            case\
    \ \"//\":\n                tmp /= operand[x];\n                break;\n      \
    \      case \"**\":\n                tmp = pow(tmp, operand[x]);\n           \
    \     break;\n        }\n        x++;\n    }\n    return tmp;\n}", "{\n    long\
    \ result = operand[0];\n    for (int i = 0; i < operator.length; i++)\n    {\n\
    \        if (operator[i] == \"+\") result += operand[i+1];\n        else if (operator[i]\
    \ == \"-\") result -= operand[i+1];\n        else if (operator[i] == \"*\") result\
    \ *= operand[i+1];\n        else if (operator[i] == \"//\") result /= operand[i+1];\n\
    \        else if (operator[i] == \"**\") result = pow(result, operand[i+1]);\n\
    \    }\n    return result;\n}", "{\n    long res = operand[0];\n    int j = 0;\n\
    \    for (int i = 1; i < operand.length; i++)\n    {\n        switch (operator[j])\n\
    \        {\n            case \"+\":\n                res += operand[i];\n    \
    \            break;\n            case \"-\":\n                res -= operand[i];\n\
    \                break;\n            case \"*\":\n                res *= operand[i];\n\
    \                break;\n            case \"//\":\n                res /= operand[i];\n\
    \                break;\n            case \"**\":\n                res = pow(res,\
    \ operand[i]);\n                break;\n        }\n        j++;\n    }\n    return\
    \ res;\n}", "{\n    if (operator.length != operand.length - 1)\n        return\
    \ -1;\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    return result;\n}", "{\n    long\
    \ result = operand[0];\n    foreach(int i, string op; zip(i, op; operator))\n\
    \    {\n        switch(op)\n        {\n            case \"+\":\n             \
    \   result += operand[i+1];\n                break;\n            case \"-\":\n\
    \                result -= operand[i+1];\n                break;\n           \
    \ case \"*\":\n                result *= operand[i+1];\n                break;\n\
    \            case \"//\":\n                result /= operand[i+1];\n         \
    \       break;\n            case \"**\":\n                result = long(pow(result,\
    \ operand[i+1]));\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    int nOperator = operator.length;\n    int nOperand = operand.length;\n\
    \    int n;\n    long value;\n    if(nOperator == nOperand - 1)\n    {\n     \
    \   n = nOperator;\n        value = operand[0];\n        for(int i = 0; i < n;\
    \ i++)\n        {\n            switch(operator[i])\n            {\n          \
    \      case \"+\":\n                    value += operand[i+1];\n             \
    \       break;\n                case \"-\":\n                    value -= operand[i+1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ value *= operand[i+1];\n                    break;\n                case \"\
    //\":\n                    value /= operand[i+1];\n                    break;\n\
    \                case \"**\":\n                    value = (long)pow(value, operand[i+1]);\n\
    \                    break;\n            }\n        }\n    }\n    return value;\n\
    }", "{\n    long answer = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            answer\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            answer -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            answer *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            answer /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            answer\
    \ = answer ^ operand[i+1];\n        }\n    }\n    return answer;\n}", "{\n   \
    \ int n = operand.length - 1;\n    if (n < 1) return 0;\n    else if (n == 1)\
    \ return operand[0];\n    else\n    {\n        if (operator[0] == \"+\") operand[1]\
    \ += operand[0];\n        else if (operator[0] == \"-\") operand[1] -= operand[0];\n\
    \        else if (operator[0] == \"*\") operand[1] *= operand[0];\n        else\
    \ if (operator[0] == \"//\") operand[1] = cast(long)floor(cast(double)operand[1]\
    \ / operand[0]);\n        else if (operator[0] == \"**\") operand[1] = cast(long)pow(cast(double)operand[1],\
    \ cast(double)operand[0]);\n        return do_algebra(operator[1 .. $], operand[1\
    \ .. $]);\n    }\n}", "{\n    long result = operand[0];\n    for (int i = 0; i\
    \ < operator.length; i++)\n    {\n        if (operator[i] == \"+\")\n        {\n\
    \            result += operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"-\")\n        {\n            result -= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"*\")\n        {\n            result *= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"//\")\n        {\n            result\
    \ /= operand[i+1];\n        }\n        else if (operator[i] == \"**\")\n     \
    \   {\n            result = pow(result, operand[i+1]);\n        }\n    }\n   \
    \ return result;\n}", "{\n    if (operator.length != operand.length - 1)\n   \
    \     return -1;\n    \n    long result = operand[0];\n    int i = 0;\n    while\
    \ (i < operator.length)\n    {\n        switch (operator[i])\n        {\n    \
    \        case \"+\":\n                result += operand[i + 1];\n            \
    \    break;\n            case \"-\":\n                result -= operand[i + 1];\n\
    \                break;\n            case \"*\":\n                result *= operand[i\
    \ + 1];\n                break;\n            case \"//\":\n                result\
    \ /= operand[i + 1];\n                break;\n            case \"**\":\n     \
    \           result = pow(result, operand[i + 1]);\n                break;\n  \
    \          default:\n                return -1;\n        }\n        i++;\n   \
    \ }\n    return result;\n}", "{\n    //Create a variable for the answer\n    long\
    \ answer = operand[0];\n    //Iterate through the operator array\n    for(size_t\
    \ i = 0; i < operator.length; i++)\n    {\n        if(operator[i] == \"*\")\n\
    \        {\n            answer *= operand[i+1];\n        }\n        else if(operator[i]\
    \ == \"+\")\n        {\n            answer += operand[i+1];\n        }\n     \
    \   else if(operator[i] == \"-\")\n        {\n            answer -= operand[i+1];\n\
    \        }\n        else if(operator[i] == \"//\")\n        {\n            answer\
    \ /= operand[i+1];\n        }\n        else if(operator[i] == \"**\")\n      \
    \  {\n            answer = pow(answer, operand[i+1]);\n        }\n    }\n    return\
    \ answer;\n}", "{\n    long result = operand[0];\n    foreach(int i, op; operator)\n\
    \    {\n        long op2 = operand[i+1];\n        switch(op)\n        {\n    \
    \        case '+': result += op2; break;\n            case '-': result -= op2;\
    \ break;\n            case '*': result *= op2; break;\n            case '//':\
    \ result /= op2; break;\n            case '**': result = pow(result, op2); break;\n\
    \        }\n    }\n    return result;\n}", "{\n    long result = operand[0];\n\
    \    foreach(i, op; operator)\n    {\n        if(op == \"+\")\n            result\
    \ += operand[i+1];\n        else if(op == \"-\")\n            result -= operand[i+1];\n\
    \        else if(op == \"*\")\n            result *= operand[i+1];\n        else\
    \ if(op == \"//\")\n            result /= operand[i+1];\n        else if(op ==\
    \ \"**\")\n            result = pow(result, operand[i+1]);\n    }\n    return\
    \ result;\n}", "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\") result += operand[i+1];\n   \
    \     else if (operator[i] == \"-\") result -= operand[i+1];\n        else if\
    \ (operator[i] == \"*\") result *= operand[i+1];\n        else if (operator[i]\
    \ == \"//\") result /= operand[i+1];\n        else if (operator[i] == \"**\")\
    \ result = pow(result, operand[i+1]);\n    }\n    return result;\n}", "{\n   \
    \ long temp = operand[0];\n    for (int i = 0; i < operator.length; i++) {\n \
    \       switch (operator[i]) {\n            case '+':\n                temp +=\
    \ operand[i + 1];\n                break;\n            case '-':\n           \
    \     temp -= operand[i + 1];\n                break;\n            case '*':\n\
    \                temp *= operand[i + 1];\n                break;\n           \
    \ case '//':\n                temp /= operand[i + 1];\n                break;\n\
    \            case '**':\n                temp = temp.pow(operand[i + 1]);\n  \
    \              break;\n        }\n    }\n    return temp;\n}\nlong do_algebra(string[]\
    \ operator, long[] operand) \n{\n    long temp = operand[0];\n    for (int i =\
    \ 0; i < operator.length; i++) {\n        switch (operator[i]) {\n           \
    \ case '+':\n                temp += operand[i + 1];\n                break;\n\
    \            case '-':\n                temp -= operand[i + 1];\n            \
    \    break;\n            case '*':\n                temp *= operand[i + 1];\n\
    \                break;\n            case '//':\n                temp /= operand[i\
    \ + 1];\n                break;\n            case '**':\n                temp\
    \ = temp.pow(operand[i + 1]);\n                break;\n        }\n    }\n    return\
    \ temp;\n}\nlong do_algebra(string[] operator, long[] operand) \n{\n    long temp\
    \ = operand[0];\n    for (int i = 0; i < operator.length; i++) {\n        switch\
    \ (operator[i]) {\n            case '+':\n                temp += operand[i +\
    \ 1];\n                break;\n            case '-':\n                temp -=\
    \ operand[i + 1];\n                break;\n            case '*':\n           \
    \     temp *= operand[i + 1];\n                break;\n            case '//':\n\
    \                temp /= operand[i + 1];\n                break;\n           \
    \ case '**':\n                temp = temp.pow(operand[i + 1]);\n             \
    \   break", "{\n    long total = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\") total += operand[i+1];\n    \
    \    else if (operator[i] == \"-\") total -= operand[i+1];\n        else if (operator[i]\
    \ == \"*\") total *= operand[i+1];\n        else if (operator[i] == \"//\") total\
    \ /= operand[i+1];\n        else if (operator[i] == \"**\") total = pow(total,\
    \ operand[i+1]);\n    }\n    return total;\n}", "{\n    long result = operand[0];\n\
    \    foreach(k,v; operand)\n    {\n        if(k == 0)\n            continue;\n\
    \        if(operator[k-1] == \"+\")\n            result += v;\n        else if(operator[k-1]\
    \ == \"-\")\n            result -= v;\n        else if(operator[k-1] == \"*\"\
    )\n            result *= v;\n        else if(operator[k-1] == \"//\")\n      \
    \      result /= v;\n        else if(operator[k-1] == \"**\")\n            result\
    \ = pow(result, v);\n    }\n    return result;\n}", "{\n    long result = operand[0];\n\
    \    for (auto i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case \"+\":\n                result += operand[i + 1];\n\
    \                break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = power(result, operand[i + 1]);\n         \
    \       break;\n        }\n    }\n    return result;\n}", "{\n    long result\
    \ = operand[0];\n    for (int i = 0; i < operator.length; i++)\n    {\n      \
    \  switch (operator[i])\n        {\n            case \"+\":\n                result\
    \ += operand[i + 1];\n                break;\n            case \"-\":\n      \
    \          result -= operand[i + 1];\n                break;\n            case\
    \ \"*\":\n                result *= operand[i + 1];\n                break;\n\
    \            case \"//\":\n                result /= operand[i + 1];\n       \
    \         break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    auto result = operand[0];\n    foreach(i, v; operand[1..$])\n    {\n\
    \        switch(operator[i - 1])\n        {\n            case \"+\": result +=\
    \ v; break;\n            case \"-\": result -= v; break;\n            case \"\
    *\": result *= v; break;\n            case \"//\": result /= v; break;\n     \
    \       case \"**\": result = (long)pow(result, v); break;\n        }\n    }\n\
    \    return result;\n}", "{\n    long result = operand[0];\n    for (size_t i\
    \ = 0; i < operator.length; i++)\n    {\n        if (operator[i] == \"+\")\n \
    \       {\n            result += operand[i + 1];\n        }\n        else if (operator[i]\
    \ == \"-\")\n        {\n            result -= operand[i + 1];\n        }\n   \
    \     else if (operator[i] == \"*\")\n        {\n            result *= operand[i\
    \ + 1];\n        }\n        else if (operator[i] == \"//\")\n        {\n     \
    \       result /= operand[i + 1];\n        }\n        else if (operator[i] ==\
    \ \"**\")\n        {\n            result = pow(result, operand[i + 1]);\n    \
    \    }\n    }\n    return result;\n}", "{\n    long result = operand[0];\n   \
    \ for (int i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case \"+\": result += operand[i+1]; break;\n         \
    \   case \"-\": result -= operand[i+1]; break;\n            case \"*\": result\
    \ *= operand[i+1]; break;\n            case \"//\": result /= operand[i+1]; break;\n\
    \            case \"**\": result = pow(result, operand[i+1]); break;\n       \
    \ }\n    }\n    return result;\n}", "{\n    long a = operand[0];\n    long b =\
    \ operand[1];\n    foreach(int i, string s; operand[i+1], operator)\n    {\n \
    \       if(s == \"+\")\n            a += b;\n        else if(s == \"-\")\n   \
    \         a -= b;\n        else if(s == \"*\")\n            a *= b;\n        else\
    \ if(s == \"//\")\n            a /= b;\n        else if(s == \"**\")\n       \
    \     a = power(a, b);\n        b = operand[i+2];\n    }\n    return a;\n}", "{\n\
    \    long result = operand[0];\n    for (long i = 0; i < operator.length; i++)\n\
    \    {\n        if (operator[i] == \"+\")\n        {\n            result += operand[i+1];\n\
    \        }\n        else if (operator[i] == \"-\")\n        {\n            result\
    \ -= operand[i+1];\n        }\n        else if (operator[i] == \"*\")\n      \
    \  {\n            result *= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"//\")\n        {\n            result /= operand[i+1];\n        }\n    \
    \    else if (operator[i] == \"**\")\n        {\n            result = pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}", "{\n    // Write your\
    \ code here\n    long result;\n    if(operator.length != operand.length - 1)\n\
    \        throw new Exception(\"Invalid number of operators or operands\");\n \
    \   result = operand[0];\n    for(int i = 0; i < operator.length; i++)\n    {\n\
    \        switch(operator[i])\n        {\n            case \"+\":\n           \
    \     result += operand[i+1];\n                break;\n            case \"-\"\
    :\n                result -= operand[i+1];\n                break;\n         \
    \   case \"*\":\n                result *= operand[i+1];\n                break;\n\
    \            case \"//\":\n                result /= operand[i+1];\n         \
    \       break;\n            case \"**\":\n                result = (long)pow(result,\
    \ operand[i+1]);\n                break;\n            default:\n             \
    \   throw new Exception(\"Invalid operator found\");\n        }\n    }\n    return\
    \ result;\n}", "{\n    enum OPERATORS\n    {\n        '+', '-', '*', '/', '%',\
    \ '^'\n    }\n    long[] copy = operand.dup;\n    long result = copy[0];\n   \
    \ for(int i = 0; i < operator.length; i++)\n    {\n        if(operator[i] == \"\
    +\")\n        {\n            result += copy[i+1];\n        }\n        else if(operator[i]\
    \ == \"-\")\n        {\n            result -= copy[i+1];\n        }\n        else\
    \ if(operator[i] == \"*\")\n        {\n            result *= copy[i+1];\n    \
    \    }\n        else if(operator[i] == \"/\")\n        {\n            result /=\
    \ copy[i+1];\n        }\n        else if(operator[i] == \"%\")\n        {\n  \
    \          result %= copy[i+1];\n        }\n        else if(operator[i] == \"\
    ^\")\n        {\n            result = pow(result, copy[i+1]);\n        }\n   \
    \ }\n    return result;\n}", "{\n    long result = operand[0];\n    for (int i\
    \ = 0; i < operator.length; i++)\n    {\n        result = switch(operator[i])\n\
    \        {\n            case \"+\" -> result + operand[i + 1];\n            case\
    \ \"-\" -> result - operand[i + 1];\n            case \"*\" -> result * operand[i\
    \ + 1];\n            case \"//\" -> result / operand[i + 1];\n            case\
    \ \"**\" -> (long)pow(result, operand[i + 1]);\n            default -> result;\n\
    \        };\n    }\n    return result;\n}", "{\n    long result = operand[0];\n\
    \    for (int i = 0; i < operator.length; i++) {\n        string op = operator[i];\n\
    \        long op2 = operand[i + 1];\n        switch (op) {\n            case \"\
    +\":\n                result += op2;\n                break;\n            case\
    \ \"-\":\n                result -= op2;\n                break;\n           \
    \ case \"*\":\n                result *= op2;\n                break;\n      \
    \      case \"//\":\n                result /= op2;\n                break;\n\
    \            case \"**\":\n                result = powl(result, op2);\n     \
    \           break;\n        }\n    }\n    return result;\n}", "{\n    long result\
    \ = operand[0];\n    int i = 0;\n    foreach(string op; operator)\n    {\n   \
    \     switch(op)\n        {\n            case \"+\":\n                result +=\
    \ operand[i+1];\n                break;\n            case \"-\":\n           \
    \     result -= operand[i+1];\n                break;\n            case \"*\"\
    :\n                result *= operand[i+1];\n                break;\n         \
    \   case \"//\":\n                result /= operand[i+1];\n                break;\n\
    \            case \"**\":\n                result ^= operand[i+1];\n         \
    \       break;\n        }\n        i++;\n    }\n    return result;\n}", "{\n \
    \   long result = operand[0];\n    for (auto i = 0; i < operator.length; i++)\
    \ {\n        switch (operator[i]) {\n            case '+':\n                result\
    \ += operand[i + 1];\n                break;\n            case '-':\n        \
    \        result -= operand[i + 1];\n                break;\n            case '*':\n\
    \                result *= operand[i + 1];\n                break;\n         \
    \   case '//':\n                result /= operand[i + 1];\n                break;\n\
    \            case '**':\n                result = pow(result, operand[i + 1]);\n\
    \                break;\n        }\n    }\n    return result;\n}", "{\n  long\
    \ result = operand[0];\n  for (int i = 0; i < operator.length; i++) {\n    switch\
    \ (operator[i]) {\n      case \"+\":\n        result += operand[i + 1];\n    \
    \    break;\n      case \"-\":\n        result -= operand[i + 1];\n        break;\n\
    \      case \"*\":\n        result *= operand[i + 1];\n        break;\n      case\
    \ \"//\":\n        result /= operand[i + 1];\n        break;\n      case \"**\"\
    :\n        result = pow(result, operand[i + 1]);\n        break;\n    }\n  }\n\
    \  return result;\n}", "{\n    long[] numbers = operand;\n    string[] ops = operator;\n\
    \    long result = numbers[0];\n    for (int i = 0; i < ops.length; i++)\n   \
    \ {\n        switch (ops[i])\n        {\n            case \"+\":\n           \
    \     result += numbers[i + 1];\n                break;\n            case \"-\"\
    :\n                result -= numbers[i + 1];\n                break;\n       \
    \     case \"*\":\n                result *= numbers[i + 1];\n               \
    \ break;\n            case \"//\":\n                result /= numbers[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ numbers[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = result ^^ operand[i + 1];\n                break;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\") result += operand[i+1];\n   \
    \     else if (operator[i] == \"-\") result -= operand[i+1];\n        else if\
    \ (operator[i] == \"*\") result *= operand[i+1];\n        else if (operator[i]\
    \ == \"//\") result /= operand[i+1];\n        else if (operator[i] == \"**\")\
    \ result = pow(result, operand[i+1]);\n    }\n    return result;\n}", "{\n   \
    \ long res = operand[0];\n    for (size_t i = 0; i < operator.length; i++)\n \
    \   {\n        switch (operator[i])\n        {\n            case '+': res += operand[i\
    \ + 1]; break;\n            case '-': res -= operand[i + 1]; break;\n        \
    \    case '*': res *= operand[i + 1]; break;\n            case '//': res /= operand[i\
    \ + 1]; break;\n            case '**': res = pow(res, operand[i + 1]); break;\n\
    \        }\n    }\n    return res;\n}", "{\n    long result = operand[0];\n  \
    \  for (int i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n\
    \            case \"+\":\n                result += operand[i + 1];\n        \
    \        break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = pow(result, operand[i + 1]);\n           \
    \     break;\n        }\n    }\n    return result;\n}", "{ \n   long result =\
    \ operand[0];\n  \n   for(int i = 0; i < operator.length; i++)\n   {\n       switch(operator[i])\n\
    \       {\n           case \"+\": result += operand[i+1];\n           break;\n\
    \           case \"-\": result -= operand[i+1];\n           break;\n         \
    \  case \"*\": result *= operand[i+1];\n           break;\n           case \"\
    //\": result /= operand[i+1];\n           break;\n           case \"**\": result\
    \ = pow(result, operand[i+1]);\n           break;\n       }\n   }\n   return result;\n\
    }", "{\n    long ret = operand[0];\n    for (int i = 0; i < operator.length; i++)\n\
    \    {\n        switch (operator[i])\n        {\n            case \"+\": ret +=\
    \ operand[i+1]; break;\n            case \"-\": ret -= operand[i+1]; break;\n\
    \            case \"*\": ret *= operand[i+1]; break;\n            case \"//\"\
    : ret /= operand[i+1]; break;\n            case \"**\": ret = (long)pow(ret, operand[i+1]);\
    \ break;\n        }\n    }\n    return ret;\n}", "{\n    long ans = operand[0];\n\
    \    long i = 0;\n    while(i < operator.length)\n    {\n        switch(operator[i])\n\
    \        {\n            case \"+\":\n                ans += operand[i+1];\n  \
    \              break;\n            case \"-\":\n                ans -= operand[i+1];\n\
    \                break;\n            case \"*\":\n                ans *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                ans /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                ans = (long)pow(ans,\
    \ operand[i+1]);\n                break;\n        }\n        i++;\n    }\n   \
    \ return ans;\n}", "{\n    static long do_math(long a, long b, string op)\n  \
    \  {\n        if (op == \"+\")\n            return a + b;\n        else if (op\
    \ == \"-\")\n            return a - b;\n        else if (op == \"*\")\n      \
    \      return a * b;\n        else if (op == \"//\")\n            return a / b;\n\
    \        else if (op == \"**\")\n            return (long)pow(a, b);\n       \
    \ else\n            return long.min;\n    }\n    long result = operand[0];\n \
    \   for (int i = 0; i < operator.length; i++)\n    {\n        result = do_math(result,\
    \ operand[i + 1], operator[i]);\n    }\n    return result;\n}", "{\n    long result\
    \ = operand[0];\n    long index = 0;\n    int opSize = operator.length;\n    foreach(string\
    \ o; opSize)\n    {\n        switch(o)\n        {\n            case \"+\":\n \
    \               result += operand[index+1];\n                break;\n        \
    \    case \"-\":\n                result -= operand[index+1];\n              \
    \  break;\n            case \"*\":\n                result *= operand[index+1];\n\
    \                break;\n            case \"//\":\n                result /= operand[index+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[index+1]);\n                break;\n        }\n        index++;\n  \
    \  }\n    return result;\n}", "{\n  long current_res = operand[0];\n  int i =\
    \ 0;\n  while(i < operator.length)\n  {\n    switch(operator[i])\n    {\n    \
    \  case \"+\":\n      {\n        current_res += operand[i+1];\n        break;\n\
    \      }\n      case \"-\":\n      {\n        current_res -= operand[i+1];\n \
    \       break;\n      }\n      case \"*\":\n      {\n        current_res *= operand[i+1];\n\
    \        break;\n      }\n      case \"//\":\n      {\n        current_res /=\
    \ operand[i+1];\n        break;\n      }\n      case \"**\":\n      {\n      \
    \  current_res = power(current_res, operand[i+1]);\n        break;\n      }\n\
    \    }\n    i++;\n  }\n  return current_res;\n}", "{\n    long x = operand[0];\n\
    \    foreach(int i, string op; zip(i, op; operand[1..$], operator)) {\n      \
    \  switch(op) {\n            case \"+\": x += operand[i+1]; break;\n         \
    \   case \"-\": x -= operand[i+1]; break;\n            case \"*\": x *= operand[i+1];\
    \ break;\n            case \"//\": x /= operand[i+1]; break;\n            case\
    \ \"**\": x = pow(x, operand[i+1]); break;\n        }\n    }\n    return x;\n}",
  "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length; i++)\
    \ {\n        if (operator[i] == \"+\") result += operand[i+1];\n        else if\
    \ (operator[i] == \"-\") result -= operand[i+1];\n        else if (operator[i]\
    \ == \"*\") result *= operand[i+1];\n        else if (operator[i] == \"//\") result\
    \ /= operand[i+1];\n        else if (operator[i] == \"**\") result = (long)pow(result,\
    \ operand[i+1]);\n    }\n    return result;\n}", "{\n    long total = operand[0];\n\
    \    for (int i = 0; i < operator.length; i++)\n    {\n        if (operator[i]\
    \ == \"+\")\n        {\n            total += operand[i+1];\n        }\n      \
    \  else if (operator[i] == \"-\")\n        {\n            total -= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"*\")\n        {\n            total\
    \ *= operand[i+1];\n        }\n        else if (operator[i] == \"//\")\n     \
    \   {\n            total /= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"**\")\n        {\n            total = pow(total, operand[i+1]);\n     \
    \   }\n    }\n    return total;\n}", "{\n    long result = operand[0];\n    for\
    \ (int i = 0; i < operator.length; i++)\n    {\n        if (operator[i] == \"\
    +\")\n        {\n            result += operand[i+1];\n        }\n        else\
    \ if (operator[i] == \"-\")\n        {\n            result -= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"*\")\n        {\n            result\
    \ *= operand[i+1];\n        }\n        else if (operator[i] == \"//\")\n     \
    \   {\n            result /= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"**\")\n        {\n            result = pow(result, operand[i+1]);\n   \
    \     }\n    }\n    return result;\n}", "{\n    long result = operand[0];\n  \
    \  long index = 0;\n    foreach(var op; operand)\n    {\n        if(op == operand[0])\n\
    \            continue;\n        result = doOperation(result, operand[index], operator[index\
    \ - 1]);\n        index++;\n    }\n    return result;\n}", "{\n    long result\
    \ = operand[0];\n    foreach(i, op; operator)\n    {\n        switch(op)\n   \
    \     {\n            case \"+\":\n                result += operand[i+1];\n  \
    \              break;\n            case \"-\":\n                result -= operand[i+1];\n\
    \                break;\n            case \"*\":\n                result *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == \"+\") {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] == \"-\") {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] == \"*\") {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] == \"//\") {\n            result /= operand[i\
    \ + 1];\n        } else if (operator[i] == \"**\") {\n            result = long(pow(result,\
    \ operand[i + 1]));\n        }\n    }\n    return result;\n}", "{\n  long result\
    \ = operand[0];\n  foreach(i, op; operator)\n  {\n    if(op == \"+\") \n    {\n\
    \      result += operand[i+1];\n    }\n    else if(op == \"-\") \n    {\n    \
    \  result -= operand[i+1];\n    }\n    else if(op == \"*\") \n    {\n      result\
    \ *= operand[i+1];\n    }\n    else if(op == \"//\") \n    {\n      result /=\
    \ operand[i+1];\n    }\n    else if(op == \"**\") \n    {\n      result = result.pow(operand[i+1]);\n\
    \    }\n  }\n  return result;\n}", "{\n    long result = operand[0];\n    for\
    \ (int i = 0; i < operator.length; i++)\n    {\n        if (operator[i] == \"\
    +\")\n        {\n            result += operand[i+1];\n        }\n        else\
    \ if (operator[i] == \"-\")\n        {\n            result -= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"*\")\n        {\n            result\
    \ *= operand[i+1];\n        }\n        else if (operator[i] == \"//\")\n     \
    \   {\n            result /= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"**\")\n        {\n            result = pow(result, operand[i+1]);\n   \
    \     }\n    }\n    return result;\n}", "{\n    long result = operand[0];\n  \
    \  foreach(i, operation; zip(operator, operand[1..$]))\n    {\n        switch(operation[0])\n\
    \        {\n            case \"+\":\n                result += operation[1];\n\
    \                break;\n            case \"-\":\n                result -= operation[1];\n\
    \                break;\n            case \"*\":\n                result *= operation[1];\n\
    \                break;\n            case \"//\":\n                result /= operation[1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operation[1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    foreach(elem; zip(operator, operand[1..$]))\n\
    \    {\n        long x = elem[1];\n        switch(elem[0])\n        {\n      \
    \      case \"+\":\n                result += x;\n                break;\n   \
    \         case \"-\":\n                result -= x;\n                break;\n\
    \            case \"*\":\n                result *= x;\n                break;\n\
    \            case \"//\":\n                result /= x;\n                break;\n\
    \            case \"**\":\n                result = (long)pow(result, x);\n  \
    \              break;\n        }\n    }\n    return result;\n}", "{\n    long\
    \ result = operand[0];\n    for (int i = 0; i < operator.length; i++)\n    {\n\
    \        switch (operator[i])\n        {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}", "{\n\
    \    long result = operand[0];\n    for (int i = 0; i < operator.length; i++)\n\
    \    {\n        switch (operator[i])\n        {\n            case \"+\":\n   \
    \             result += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                result -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i + 1];\n        \
    \        break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}", "{\n    auto result = operand[0];\n    foreach(i, op;\
    \ operator)\n    {\n        auto operand_index = i + 1;\n        if(op == \"+\"\
    )\n        {\n            result += operand[operand_index];\n        }\n     \
    \   else if(op == \"-\")\n        {\n            result -= operand[operand_index];\n\
    \        }\n        else if(op == \"*\")\n        {\n            result *= operand[operand_index];\n\
    \        }\n        else if(op == \"//\")\n        {\n            result /= operand[operand_index];\n\
    \        }\n        else if(op == \"**\")\n        {\n            result = (long)pow(result,\
    \ operand[operand_index]);\n        }\n    }\n    return result;\n}", "{\n  int\
    \ op_length = operator.length;\n  int num_length = operand.length;\n  long result\
    \ = operand[0];\n  long num;\n  foreach(string op; operator)\n  {\n    num = operand[op_length];\n\
    \    switch(op)\n    {\n      case \"+\":\n        result += num;\n        break;\n\
    \      case \"-\":\n        result -= num;\n        break;\n      case \"*\":\n\
    \        result *= num;\n        break;\n      case \"//\":\n        result /=\
    \ num;\n        break;\n      case \"**\":\n        result = pow(result, num);\n\
    \        break;\n    }\n    op_length++;\n  }\n  return result;\n}", "{\n    auto\
    \ result = operand[0];\n    for (auto i = 0; i < operator.length; i++)\n    {\n\
    \        if (operator[i] == \"+\")\n            result += operand[i + 1];\n  \
    \      else if (operator[i] == \"-\")\n            result -= operand[i + 1];\n\
    \        else if (operator[i] == \"*\")\n            result *= operand[i + 1];\n\
    \        else if (operator[i] == \"//\")\n            result /= operand[i + 1];\n\
    \        else if (operator[i] == \"**\")\n            result = pow(result, operand[i\
    \ + 1]);\n    }\n    return result;\n}", "{\n    long result = operand[0];\n \
    \   for (int i = 0; i < operator.length; i++)\n    {\n        if (operator[i]\
    \ == \"+\")\n        {\n            result += operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"-\")\n        {\n            result -= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"*\")\n        {\n            result\
    \ *= operand[i+1];\n        }\n        else if (operator[i] == \"//\")\n     \
    \   {\n            result /= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"**\")\n        {\n            result = pow(result, operand[i+1]);\n   \
    \     }\n    }\n    return result;\n}", "{\n    long result = operand[0];\n  \
    \  for (int i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case \"+\":\n                result += operand[i + 1];\n\
    \                break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = (long)pow(result, operand[i + 1]);\n     \
    \           break;\n        }\n    }\n    return result;\n}", "{\n    if (operator.length\
    \ == 0) \n        return operand[0];\n    \n    if (operator.length == 1) \n \
    \       return (operator[0] == \"+\") ? operand[0] + operand[1] : operand[0] -\
    \ operand[1];\n    \n    if (operator.length == 2) \n        return (operator[0]\
    \ == \"+\") ? operand[0] + operand[1] * operand[2] : operand[0] - operand[1] *\
    \ operand[2];\n    \n    if (operator.length == 3) \n        return (operator[0]\
    \ == \"+\") ? operand[0] + operand[1] * operand[2] / operand[3] : operand[0] -\
    \ operand[1] * operand[2] / operand[3];\n    \n    if (operator.length == 4) \n\
    \        return (operator[0] == \"+\") ? operand[0] + operand[1] * operand[2]\
    \ / operand[3] ^ operand[4] : operand[0] - operand[1] * operand[2] / operand[3]\
    \ ^ operand[4];\n    \n    return 0;\n}", "{\n    long ans = operand[0];\n   \
    \ for (int i = 0; i < operator.length; i++) {\n        if (operator[i] == \"+\"\
    ) {\n            ans += operand[i + 1];\n        } else if (operator[i] == \"\
    -\") {\n            ans -= operand[i + 1];\n        } else if (operator[i] ==\
    \ \"*\") {\n            ans *= operand[i + 1];\n        } else if (operator[i]\
    \ == \"//\") {\n            ans /= operand[i + 1];\n        } else if (operator[i]\
    \ == \"**\") {\n            ans = pow(ans, operand[i + 1]);\n        }\n    }\n\
    \    return ans;\n}", "{\n    long result = operand[0];\n    for (long i = 0;\
    \ i < operator.length; i++) {\n        if (operator[i] == \"+\") {\n         \
    \   result += operand[i + 1];\n        } else if (operator[i] == \"-\") {\n  \
    \          result -= operand[i + 1];\n        } else if (operator[i] == \"*\"\
    ) {\n            result *= operand[i + 1];\n        } else if (operator[i] ==\
    \ \"//\") {\n            result /= operand[i + 1];\n        } else if (operator[i]\
    \ == \"**\") {\n            result = cast(long)pow(result, operand[i + 1]);\n\
    \        }\n    }\n    return result;\n}", "{\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                operand[i + 1] = operand[i] + operand[i + 1];\n           \
    \     break;\n            case \"-\":\n                operand[i + 1] = operand[i]\
    \ - operand[i + 1];\n                break;\n            case \"*\":\n       \
    \         operand[i + 1] = operand[i] * operand[i + 1];\n                break;\n\
    \            case \"//\":\n                operand[i + 1] = operand[i] / operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                operand[i\
    \ + 1] = long(pow(operand[i], operand[i + 1]));\n                break;\n    \
    \    }\n    }\n    return operand[operand.length - 1];\n}", "{\n    long result\
    \ = operand[0];\n    long operandCount = operand.length();\n    long opCount =\
    \ operator.length();\n    if(opCount < 1 || operandCount < 2)\n        return\
    \ result;\n    for(long i = 0; i < opCount; i++)\n    {\n        if(operator[i]\
    \ == \"+\")\n            result += operand[i+1];\n        else if(operator[i]\
    \ == \"-\")\n            result -= operand[i+1];\n        else if(operator[i]\
    \ == \"*\")\n            result *= operand[i+1];\n        else if(operator[i]\
    \ == \"//\")\n            result /= operand[i+1];\n        else if(operator[i]\
    \ == \"**\")\n            result = pow(result, operand[i+1]);\n    }\n    return\
    \ result;\n}", "{\n    long total = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            total\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            total -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            total *= operand[i+1];\n        }\n      \
    \  else if (operator[i] == \"//\")\n        {\n            total /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            total\
    \ = pow(total, operand[i+1]);\n        }\n    }\n    return total;\n}", "{\n \
    \   if (operator.length == 0)\n        return operand[0];\n    \n    ulong i =\
    \ 0;\n    long res = operand[0];\n    for (i = 0; i < operator.length; i++)\n\
    \    {\n        if (operator[i] == \"+\")\n            res += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            res -= operand[i+1];\n  \
    \      else if (operator[i] == \"*\")\n            res *= operand[i+1];\n    \
    \    else if (operator[i] == \"//\")\n            res /= operand[i+1];\n     \
    \   else if (operator[i] == \"**\")\n            res = pow(res, operand[i+1]);\n\
    \    }\n    return res;\n}", "{\n    long result = operand[0];\n    for (int i\
    \ = 0; i < operator.length; i++) {\n        if (operator[i] == \"+\") result +=\
    \ operand[i+1];\n        else if (operator[i] == \"-\") result -= operand[i+1];\n\
    \        else if (operator[i] == \"*\") result *= operand[i+1];\n        else\
    \ if (operator[i] == \"//\") result /= operand[i+1];\n        else if (operator[i]\
    \ == \"**\") result = (long)pow(result, operand[i+1]);\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[operand.length - 1];\n    result[0] = operand[0];\n\
    \    for (long i = 1, j = 0; i < operand.length; i++, j++) {\n        if (operator[j]\
    \ == \"+\") {\n            result[i] = result[i - 1] + operand[i];\n        }\
    \ else if (operator[j] == \"-\") {\n            result[i] = result[i - 1] - operand[i];\n\
    \        } else if (operator[j] == \"*\") {\n            result[i] = result[i\
    \ - 1] * operand[i];\n        } else if (operator[j] == \"//\") {\n          \
    \  result[i] = result[i - 1] / operand[i];\n        } else if (operator[j] ==\
    \ \"**\") {\n            result[i] = pow(result[i - 1], operand[i]);\n       \
    \ }\n    }\n    return result[result.length - 1];\n}", "{\n    if (operator.length\
    \ < 1 || operand.length < 2)\n        return -1;\n    long result = operand[0];\n\
    \    for (int i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case \"+\":\n                result += operand[i + 1];\n\
    \                break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = (long)pow(result, operand[i + 1]);\n     \
    \           break;\n            default:\n                break;\n        }\n\
    \    }\n    return result;\n}", "{\n    if (operand.length == 1)\n        return\
    \ operand[0];\n    long result = operand[0];\n    long i = 1;\n    foreach (var\
    \ elem in operator) {\n        if (elem == \"+\")\n            result += operand[i];\n\
    \        else if (elem == \"-\")\n            result -= operand[i];\n        else\
    \ if (elem == \"*\")\n            result *= operand[i];\n        else if (elem\
    \ == \"//\")\n            result /= operand[i];\n        else if (elem == \"**\"\
    )\n            result = (long)pow(result, operand[i]);\n        i++;\n    }\n\
    \    return result;\n}", "{\n    int last_number = operand[0];\n    for (int i\
    \ = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n         \
    \   case \"+\":\n                last_number += operand[i + 1];\n            \
    \    break;\n            case \"-\":\n                last_number -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                last_number\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           last_number /= operand[i + 1];\n                break;\n         \
    \   case \"**\":\n                last_number = pow(last_number, operand[i + 1]);\n\
    \                break;\n        }\n    }\n    return last_number;\n}", "{\n \
    \   long result = operand[0];\n    for (size_t i = 0; i < operator.length; i++)\n\
    \    {\n        if (operator[i] == \"+\")\n        {\n            result += operand[i\
    \ + 1];\n        }\n        else if (operator[i] == \"-\")\n        {\n      \
    \      result -= operand[i + 1];\n        }\n        else if (operator[i] == \"\
    *\")\n        {\n            result *= operand[i + 1];\n        }\n        else\
    \ if (operator[i] == \"//\")\n        {\n            result /= operand[i + 1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}", "{\n\
    \    long result = operand[0];\n    for (size_t i = 0; i < operator.length; i++)\n\
    \    {\n        if (operator[i] == \"+\")\n        {\n            result += operand[i\
    \ + 1];\n        }\n        else if (operator[i] == \"-\")\n        {\n      \
    \      result -= operand[i + 1];\n        }\n        else if (operator[i] == \"\
    *\")\n        {\n            result *= operand[i + 1];\n        }\n        else\
    \ if (operator[i] == \"//\")\n        {\n            result /= operand[i + 1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = (long)pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    int i = 0;\n    foreach(string op;\
    \ operator)\n    {\n        switch(op)\n        {\n            case \"+\":\n \
    \               result += operand[i+1];\n                break;\n            case\
    \ \"-\":\n                result -= operand[i+1];\n                break;\n  \
    \          case \"*\":\n                result *= operand[i+1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n        i++;\n    }\n   \
    \ return result;\n}", "{\n    long result = operand[0];\n    int i = 0;\n    foreach(string\
    \ op; operator)\n    {\n        switch(op)\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n        i++;\n    }\n   \
    \ return result;\n}", "{\n    long result = operand[0];\n    for (int i = 0; i\
    \ < operator.length; i++)\n    {\n        switch (operator[i])\n        {\n  \
    \          case \"+\":\n                result += operand[i + 1];\n          \
    \      break;\n            case \"-\":\n                result -= operand[i +\
    \ 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = pow(result, operand[i + 1]);\n           \
    \     break;\n        }\n    }\n    return result;\n}", "{\n    if (operator.length\
    \ != operand.length - 1) return 0;\n    if (operator.length == 0 || operand.length\
    \ == 0) return 0;\n    int op;\n    long result = operand[0];\n    for (op = 0;\
    \ op < operator.length; op++) {\n        switch (operator[op]) {\n           \
    \ case \"+\": result += operand[op + 1]; break;\n            case \"-\": result\
    \ -= operand[op + 1]; break;\n            case \"*\": result *= operand[op + 1];\
    \ break;\n            case \"//\": result /= operand[op + 1]; break;\n       \
    \     case \"**\": result = (long)pow(result, operand[op + 1]); break;\n     \
    \       default: return 0;\n        }\n    }\n    return result;\n}\nlong do_algebra(string[]\
    \ operator, long[] operand) \n{\n    if (operator.length != operand.length - 1)\
    \ return 0;\n    if (operator.length == 0 || operand.length == 0) return 0;\n\
    \    int op;\n    long result = operand[0];\n    for (op = 0; op < operator.length;\
    \ op++) {\n        switch (operator[op]) {\n            case \"+\": result +=\
    \ operand[op + 1]; break;\n            case \"-\": result -= operand[op + 1];\
    \ break;\n            case \"*\": result *= operand[op + 1]; break;\n        \
    \    case \"//\": result /= operand[op + 1]; break;\n            case \"**\":\
    \ result = (long)pow(result, operand[op + 1]); break;\n            default: return\
    \ 0;\n        }\n    }\n    return result;\n}\nlong do_algebra(string[] operator,\
    \ long[] operand) \n{\n    if (operator.length != operand.length - 1) return 0;\n\
    \    if (operator.length == 0 || operand.length == 0) return 0;\n    int op;\n\
    \    long result = operand[0];\n    for (op = 0; op < operator.length; op++) {\n\
    \        switch (operator[op]) {\n            case \"+\": result += operand",
  "{\n    long res;\n    int n = operator.length;\n    res = operand[0];\n    for\
    \ (int i = 0; i < n; i++) {\n        switch (operator[i]) {\n            case\
    \ \"+\":\n                res += operand[i + 1];\n                break;\n   \
    \         case \"-\":\n                res -= operand[i + 1];\n              \
    \  break;\n            case \"*\":\n                res *= operand[i + 1];\n \
    \               break;\n            case \"//\":\n                res /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                res\
    \ = (long)Math.pow(res, operand[i + 1]);\n                break;\n        }\n\
    \    }\n    return res;\n}", "{\n    //1. create string version of the expression\n\
    \    string expression = \"\";\n    int x = 0;\n    while(x < operand.length)\
    \ {\n        expression += (x == 0) ? $\"{operand[x]}\" : $\" {operator[x-1]}\
    \ {operand[x]}\";\n        x++;\n    }\n    expression += \";\";\n    //2. use\
    \ dmd eval() to evaluate the expression\n    return eval(expression);\n}", "{\n\
    \    long result = operand[0];\n    for (int i = 0; i < operator.length; i++)\n\
    \    {\n        switch (operator[i])\n        {\n            case \"+\":\n   \
    \             result += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                result -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i + 1];\n        \
    \        break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = result ** operand[i + 1];\n                break;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}", "{\n    long res = operand[0];\n    for (int i = 0; i\
    \ < operator.length; i++)\n    {\n        if (operator[i] == \"+\")\n        \
    \    res += operand[i+1];\n        else if (operator[i] == \"-\")\n          \
    \  res -= operand[i+1];\n        else if (operator[i] == \"*\")\n            res\
    \ *= operand[i+1];\n        else if (operator[i] == \"//\")\n            res /=\
    \ operand[i+1];\n        else if (operator[i] == \"**\")\n            res = pow(res,\
    \ operand[i+1]);\n    }\n    return res;\n}", "{\n    long result = operand[0];\n\
    \    for (int i = 0; i < operator.length; i++)\n    {\n        if (operator[i]\
    \ == \"+\")\n        {\n            result += operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"-\")\n        {\n            result -= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"*\")\n        {\n            result\
    \ *= operand[i+1];\n        }\n        else if (operator[i] == \"//\")\n     \
    \   {\n            result /= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"**\")\n        {\n            result = pow(result, operand[i+1]);\n   \
    \     }\n    }\n    return result;\n}", "{\n    if (operator.length == 0) return\
    \ 0;\n    long res = operand[0];\n    for (long i = 0; i < operator.length; i++)\
    \ {\n        long cur = operand[i + 1];\n        switch (operator[i]) {\n    \
    \        case \"+\":\n                res += cur;\n                break;\n  \
    \          case \"-\":\n                res -= cur;\n                break;\n\
    \            case \"*\":\n                res *= cur;\n                break;\n\
    \            case \"//\":\n                res /= cur;\n                break;\n\
    \            case \"**\":\n                res = pow(res, cur);\n            \
    \    break;\n        }\n    }\n    return res;\n}", "{\n    if (operator.length\
    \ < 1 || operand.length < 2)\n        return -1;\n    \n    long result = operand[0];\n\
    \    for (int i = 0; i < operator.length; i++)\n    {\n        if (operator[i]\
    \ == \"+\")\n            result += operand[i+1];\n        else if (operator[i]\
    \ == \"-\")\n            result -= operand[i+1];\n        else if (operator[i]\
    \ == \"*\")\n            result *= operand[i+1];\n        else if (operator[i]\
    \ == \"//\")\n            result /= operand[i+1];\n        else if (operator[i]\
    \ == \"**\")\n            result = (long)pow(result, operand[i+1]);\n    }\n \
    \   return result;\n}", "{\n    long result = operand[0];\n    for (int i = 0;\
    \ i < operator.length; i++) {\n        switch (operator[i]) {\n            case\
    \ \"+\":\n                result += operand[i + 1];\n                break;\n\
    \            case \"-\":\n                result -= operand[i + 1];\n        \
    \        break;\n            case \"*\":\n                result *= operand[i\
    \ + 1];\n                break;\n            case \"//\":\n                result\
    \ /= operand[i + 1];\n                break;\n            case \"**\":\n     \
    \           result = pow(result, operand[i + 1]);\n                break;\n  \
    \      }\n    }\n    return result;\n}", "{\n    long accumulator = operand[0];\n\
    \    for (size_t i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case \"+\":\n                accumulator += operand[i\
    \ + 1];\n                break;\n            case \"-\":\n                accumulator\
    \ -= operand[i + 1];\n                break;\n            case \"*\":\n      \
    \          accumulator *= operand[i + 1];\n                break;\n          \
    \  case \"//\":\n                accumulator /= operand[i + 1];\n            \
    \    break;\n            case \"**\":\n                accumulator = pow(accumulator,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return accumulator;\n\
    }", "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    long temp = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                temp += operand[i+1];\n                break;\n           \
    \ case \"-\":\n                temp -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                temp *= operand[i+1];\n            \
    \    break;\n            case \"//\":\n                temp /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                temp = pow(temp,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return temp;\n\
    }", "{\n    long res = operand[0];\n    for (int i = 0; i < operator.length; i++)\
    \ {\n        long cur = operand[i + 1];\n        switch (operator[i]) {\n    \
    \        case \"+\":\n                res += cur;\n                break;\n  \
    \          case \"-\":\n                res -= cur;\n                break;\n\
    \            case \"*\":\n                res *= cur;\n                break;\n\
    \            case \"//\":\n                res /= cur;\n                break;\n\
    \            case \"**\":\n                res = pow(res, cur);\n            \
    \    break;\n        }\n    }\n    return res;\n}", "{\n    long res = operand[0];\n\
    \    for (int i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case \"+\":\n                res += operand[i + 1];\n\
    \                break;\n            case \"-\":\n                res -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                res\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           res /= operand[i + 1];\n                break;\n            case \"\
    **\":\n                res = res ^^ operand[i + 1];\n                break;\n\
    \        }\n    }\n    return res;\n}", "{\n    long result = operand[0];\n  \
    \  for (int i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case \"+\": result += operand[i+1]; break;\n         \
    \   case \"-\": result -= operand[i+1]; break;\n            case \"*\": result\
    \ *= operand[i+1]; break;\n            case \"//\": result /= operand[i+1]; break;\n\
    \            case \"**\": result = cast(long)pow(result, operand[i+1]); break;\n\
    \        }\n    }\n    return result;\n}", "{\n    long result = operand[0];\n\
    \    for (int i = 0; i < operator.length; i++) {\n        long n1 = operand[i];\n\
    \        long n2 = operand[i + 1];\n        string op = operator[i];\n       \
    \ switch (op) {\n            case \"+\":\n                result = n1 + n2;\n\
    \                break;\n            case \"-\":\n                result = n1\
    \ - n2;\n                break;\n            case \"*\":\n                result\
    \ = n1 * n2;\n                break;\n            case \"//\":\n             \
    \   result = n1 / n2;\n                break;\n            case \"**\":\n    \
    \            result = pow(n1, n2);\n                break;\n        }\n    }\n\
    \    return result;\n}", "{\n    long result = operand[0];\n    for (int i = 0;\
    \ i < operator.length; i++)\n    {\n        if (operator[i] == \"+\")\n      \
    \  {\n            result += operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"-\")\n        {\n            result -= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"*\")\n        {\n            result *= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"//\")\n        {\n            result\
    \ /= operand[i+1];\n        }\n        else if (operator[i] == \"**\")\n     \
    \   {\n            result = (long)pow(result, operand[i+1]);\n        }\n    }\n\
    \    return result;\n}", "{\n    long value = operand[0];\n    for (int i = 0;\
    \ i < operator.length; i++)\n    {\n        switch (operator[i])\n        {\n\
    \            case \"+\":\n                value += operand[i + 1];\n         \
    \       break;\n            case \"-\":\n                value -= operand[i +\
    \ 1];\n                break;\n            case \"*\":\n                value\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           value /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                value = pow(value, operand[i + 1]);\n             \
    \   break;\n        }\n    }\n    return value;\n}", "{ \n    auto result = operand[0];\n\
    \    foreach(i, o; operator) \n    {\n        switch(o) \n        {\n        \
    \    case \"+\": result += operand[i+1]; break;\n            case \"-\": result\
    \ -= operand[i+1]; break;\n            case \"*\": result *= operand[i+1]; break;\n\
    \            case \"//\": result /= operand[i+1]; break;\n            case \"\
    **\": result = pow(result, operand[i+1]); break;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long total = operand[0];\n    foreach(int i, string op;\
    \ zip(i, op; operator))\n    {\n        long op2 = operand[i+1];\n        switch(op)\n\
    \        {\n            case \"+\": total += op2; break;\n            case \"\
    -\": total -= op2; break;\n            case \"*\": total *= op2; break;\n    \
    \        case \"//\": total /= op2; break;\n            case \"**\": total = pow(total,\
    \ op2); break;\n        }\n    }\n    return total;\n}", "{\n    long result =\
    \ operand[0];\n    for (long i = 0; i < operator.length; i++)\n    {\n       \
    \ switch (operator[i])\n        {\n            case '+':\n                result\
    \ += operand[i + 1];\n                break;\n            case '-':\n        \
    \        result -= operand[i + 1];\n                break;\n            case '*':\n\
    \                result *= operand[i + 1];\n                break;\n         \
    \   case '//':\n                result /= operand[i + 1];\n                break;\n\
    \            case '**':\n                result = cast(long)pow(result, operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return result;\n}", "{\
    \ \n    long result = operand[0];\n    for (int i = 0; i < operator.length; i++)\n\
    \    {\n        switch (operator[i])\n        {\n            case \"+\":\n   \
    \             result += operand[i+1];\n                break;\n            case\
    \ \"-\":\n                result -= operand[i+1];\n                break;\n  \
    \          case \"*\":\n                result *= operand[i+1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n        {\n            result\
    \ += operand[i+1];\n        }\n        else if (operator[i] == \"-\")\n      \
    \  {\n            result -= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"*\")\n        {\n            result *= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"//\")\n        {\n            result /= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"**\")\n        {\n            result\
    \ = (long) pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}",
  "{\n    long result = operand[0];\n    foreach(int i, string op; operator)\n   \
    \ {\n        if(op == \"+\")\n            result += operand[i+1];\n        else\
    \ if(op == \"-\")\n            result -= operand[i+1];\n        else if(op ==\
    \ \"*\")\n            result *= operand[i+1];\n        else if(op == \"//\")\n\
    \            result /= operand[i+1];\n        else if(op == \"**\")\n        \
    \    result = pow(result, operand[i+1]);\n    }\n    return result;\n}", "{ \n\
    \    long expression = operand[0];\n    for (int i = 0; i < operator.length; i++)\
    \ {\n        switch (operator[i]) {\n            case \"+\":\n               \
    \ expression += operand[i + 1];\n                break;\n            case \"-\"\
    :\n                expression -= operand[i + 1];\n                break;\n   \
    \         case \"*\":\n                expression *= operand[i + 1];\n       \
    \         break;\n            case \"//\":\n                expression /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                expression\
    \ = pow(expression, operand[i + 1]);\n                break;\n        }\n    }\n\
    \    return expression;\n}", "{\n    long result = operand[0];\n    for (int i\
    \ = 0; i < operator.length; i++)\n    {\n        if (operator[i] == \"+\")\n \
    \       {\n            result += operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"-\")\n        {\n            result -= operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"*\")\n        {\n            result *= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"//\")\n        {\n            result\
    \ /= operand[i+1];\n        }\n        else if (operator[i] == \"**\")\n     \
    \   {\n            result = (long)pow(result, operand[i+1]);\n        }\n    }\n\
    \    return result;\n}", "{\n    //get the length of the operator array\n    long\
    \ count = operator.length;\n    long i = 0;\n    long result = operand[0];\n \
    \   //loop throught the operator and operand array\n    for(; i < count; i++)\n\
    \    {\n        //do the basic math operation\n        switch(operator[i])\n \
    \       {\n            case \"+\":\n                result += operand[i+1];\n\
    \                break;\n            case \"-\":\n                result -= operand[i+1];\n\
    \                break;\n            case \"*\":\n                result *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    for (long i = 0u; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i + 1];\n                break;\n       \
    \     case \"-\":\n                result -= operand[i + 1];\n               \
    \ break;\n            case \"*\":\n                result *= operand[i + 1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = pow(result, operand[i + 1]);\n                break;\n        }\n    }\n \
    \   return result;\n}", "{\n    int len = operand.length;\n    long result = operand[0];\n\
    \    for (int i = 0; i < len-1; i++) {\n        if (operator[i] == \"+\") {\n\
    \            result += operand[i+1];\n        } else if (operator[i] == \"-\"\
    ) {\n            result -= operand[i+1];\n        } else if (operator[i] == \"\
    *\") {\n            result *= operand[i+1];\n        } else if (operator[i] ==\
    \ \"//\") {\n            result /= operand[i+1];\n        } else if (operator[i]\
    \ == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n \
    \   }\n    return result;\n}", "{\n    long result = operand[0];\n    long temp\
    \ = 0;\n    for (int i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case \"+\":\n                result += operand[i+1];\n\
    \                break;\n            case \"-\":\n                result -= operand[i+1];\n\
    \                break;\n            case \"*\":\n                result *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    int result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\"\
    :\n                result += operand[i+1];\n                break;\n         \
    \   case \"-\":\n                result -= operand[i+1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i+1];\n          \
    \      break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result = pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n  long result = operand[0];\n  for (int i = 0; i < operator.length; i++)\n\
    \  {\n    switch (operator[i])\n    {\n      case \"+\":\n        result += operand[i\
    \ + 1];\n        break;\n      case \"-\":\n        result -= operand[i + 1];\n\
    \        break;\n      case \"*\":\n        result *= operand[i + 1];\n      \
    \  break;\n      case \"//\":\n        result /= operand[i + 1];\n        break;\n\
    \      case \"**\":\n        result = cast(long)pow(result, operand[i + 1]);\n\
    \        break;\n    }\n  }\n  return result;\n}", "{\n    long result = operand[0];\n\
    \    for (int i = 0; i < operator.length; i++)\n    {\n        if (operator[i]\
    \ == \"+\")\n        {\n            result += operand[i+1];\n        }\n     \
    \   else if (operator[i] == \"-\")\n        {\n            result -= operand[i+1];\n\
    \        }\n        else if (operator[i] == \"*\")\n        {\n            result\
    \ *= operand[i+1];\n        }\n        else if (operator[i] == \"//\")\n     \
    \   {\n            result /= operand[i+1];\n        }\n        else if (operator[i]\
    \ == \"**\")\n        {\n            result = pow(result, operand[i+1]);\n   \
    \     }\n    }\n    return result;\n}", "{\n    long result = operand[0];\n  \
    \  for (size_t i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case \"+\":\n                result += operand[i + 1];\n\
    \                break;\n            case \"-\":\n                result -= operand[i\
    \ + 1];\n                break;\n            case \"*\":\n                result\
    \ *= operand[i + 1];\n                break;\n            case \"//\":\n     \
    \           result /= operand[i + 1];\n                break;\n            case\
    \ \"**\":\n                result = pow(result, operand[i + 1]);\n           \
    \     break;\n        }\n    }\n    return result;\n}", "{\n    long result =\
    \ operand[0];\n    int n = operator.size;\n    for (int i = 0; i < n; i++)\n \
    \   {\n        if (operator[i] == \"+\")\n            result += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            result -= operand[i+1];\n\
    \        else if (operator[i] == \"*\")\n            result *= operand[i+1];\n\
    \        else if (operator[i] == \"//\")\n            result /= operand[i+1];\n\
    \        else if (operator[i] == \"**\")\n            result = pow(result, operand[i+1]);\n\
    \    }\n    return result;\n}", "{\n    auto result = operand[0];\n    long i\
    \ = 0;\n    while(i < operator.length)\n    {\n        switch(operator[i])\n \
    \       {\n            case \"+\":\n                result += operand[i+1];\n\
    \                break;\n            case \"-\":\n                result -= operand[i+1];\n\
    \                break;\n            case \"*\":\n                result *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                result /= operand[i+1];\n\
    \                break;\n            case \"**\":\n                result ^= operand[i+1];\n\
    \                break;\n        }\n        i++;\n    }\n    return result;\n}",
  "{\n    long result = operand[0];\n    for (size_t i = 0; i < operator.length; i++)\n\
    \    {\n        switch (operator[i])\n        {\n            case \"+\":\n   \
    \             result += operand[i + 1];\n                break;\n            case\
    \ \"-\":\n                result -= operand[i + 1];\n                break;\n\
    \            case \"*\":\n                result *= operand[i + 1];\n        \
    \        break;\n            case \"//\":\n                result /= operand[i\
    \ + 1];\n                break;\n            case \"**\":\n                result\
    \ = (long)pow(result, operand[i + 1]);\n                break;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long result = operand[0];\n    for (int\
    \ i = 0; i < operator.length; i++)\n    {\n        if (operator[i] == \"+\")\n\
    \            result += operand[i+1];\n        else if (operator[i] == \"-\")\n\
    \            result -= operand[i+1];\n        else if (operator[i] == \"*\")\n\
    \            result *= operand[i+1];\n        else if (operator[i] == \"//\")\n\
    \            result /= operand[i+1];\n        else if (operator[i] == \"**\")\n\
    \            result = (long)pow(result, operand[i+1]);\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++)\n    {\n        if (operator[i] == \"+\")\n            result += operand[i+1];\n\
    \        else if (operator[i] == \"-\")\n            result -= operand[i+1];\n\
    \        else if (operator[i] == \"*\")\n            result *= operand[i+1];\n\
    \        else if (operator[i] == \"//\")\n            result /= operand[i+1];\n\
    \        else if (operator[i] == \"**\")\n            result = pow(result, operand[i+1]);\n\
    \    }\n    return result;\n}", "{\n    auto result = operand[0];\n    for (size_t\
    \ i = 0; i < operator.length; i++)\n    {\n        if (operator[i] == \"+\")\n\
    \            result += operand[i + 1];\n        else if (operator[i] == \"-\"\
    )\n            result -= operand[i + 1];\n        else if (operator[i] == \"*\"\
    )\n            result *= operand[i + 1];\n        else if (operator[i] == \"//\"\
    )\n            result /= operand[i + 1];\n        else if (operator[i] == \"**\"\
    )\n            result = pow(result, operand[i + 1]);\n    }\n    return result;\n\
    }", "{\n    long result = operand[0];\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case \"+\":\n          \
    \      result += operand[i + 1];\n                break;\n            case \"\
    -\":\n                result -= operand[i + 1];\n                break;\n    \
    \        case \"*\":\n                result *= operand[i + 1];\n            \
    \    break;\n            case \"//\":\n                result /= operand[i + 1];\n\
    \                break;\n            case \"**\":\n                result = (long)pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "{\n    auto result = operand[0];\n    foreach(a, b; zip(operator, operand[1..$]))\
    \ \n    {\n        if(a == \"+\") \n        {\n            result += b;\n    \
    \    } \n        else if(a == \"-\") \n        {\n            result -= b;\n \
    \       } \n        else if(a == \"*\") \n        {\n            result *= b;\n\
    \        } \n        else if(a == \"//\") \n        {\n            result /= b;\n\
    \        } \n        else if(a == \"**\") \n        {\n            result = pow(result,\
    \ b);\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
