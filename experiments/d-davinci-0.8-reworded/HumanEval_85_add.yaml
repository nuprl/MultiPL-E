name: HumanEval_85_add
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of integers\
  \ lst. add the even elements that are at odd indices..\n\n\n    Examples:\n    >>>\
  \ add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n"
tests: "unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
  \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
  \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
  \ main(){}"
completions: ["{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i %\
    \ 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n        }\n    }\n\
    \    return sum;\n}", "{\n    int a = 0;\n    for (int i = 0; i < lst.length;\
    \ i++)\n    {\n        if (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n       \
    \     a += lst[i];\n        }\n    }\n    return a;\n}", "{\n    long x=0;\n \
    \   foreach(a;0..lst.length)\n    {\n        if(a%2==1)\n        {\n         \
    \   if(lst[a]%2==0)\n            {\n                x+=lst[a];\n            }\n\
    \        }\n    }\n    return x;\n}", '{', "{\n  long result = 0L;\n  foreach(immutable\
    \ i, immutable l; lst) \n  {\n    static if (i % 2 == 1) \n    {\n      static\
    \ if (l % 2 == 0) \n      {\n        result += l;\n      }\n    }\n  }\n  return\
    \ result;\n}", "{\n    /*\n    long r = 0;\n    for (auto i = 0; i < lst.length;\
    \ i += 2)\n        r += lst[i];\n    return r;\n    */\n    // isEven() is an\
    \ expression\n    return lst.filter!(i => i % 2 == 0).sum;\n}", "{\n    auto f\
    \ = (long x) => x % 2 == 0 ? x : 0;\n    return map!f(lst).sum;\n}", "{\n    return\
    \ 0;\n}", "{\n    long tot;\n    int i,n;\n    foreach(i,n;lst)\n    {\n     \
    \   if(n%2==0)\n        {\n            tot+=n;\n        }\n    }\n    return tot;\n\
    }\n    ", "{\n    // return sum(i % 2 == 1 ? lst[i] : 0L for i in 0..lst.length);\n\
    \    long sum = 0L;\n    foreach( idx, num; lst )\n    {\n        if( idx % 2\
    \ == 1 )\n        {\n            sum += num;\n        }\n    }\n    return sum;\n\
    }\n/*\nGiven a non-empty array of integers lst. add the even elements that are\
    \ at odd indices..", "{\n    long result = 0L;\n    foreach(n; lst)\n    {\n \
    \     enum even = n % 2 == 0;\n      enum odd = n % 2 != 0;\n      if(even) \n\
    \      {\n        result += n;\n      }\n    }\n    return result;\n}", "{\n \
    \   alias IndicesAndValues = Tuple!(size_t, \"index\", long, \"value\");\n   \
    \ return lst.enumerate\n        .filter!(a => a.index & 1 == 1 && a.value & 1\
    \ == 0)\n        .map!(a => a.value)\n        .sum;\n}", "{\n    int result =\
    \ 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if (i % 2 == 1\
    \ && lst[i] % 2 == 0)\n        {\n            result += lst[i];\n        }\n \
    \   }\n    return result;\n}", "{\n    long res=0;\n    int len = lst.length;\n\
    \    for(int i=0;i<len;i++){\n        if(i%2==1){\n            res+=lst[i];\n\
    \        }\n    }\n    return res;\n}", "{\n    return lst.filter!(x => isEven(x))\n\
    \              .filter!(x => lst.indexOf(x) % 2 == 1)\n              .sum;\n}",
  "{\n  long sum = 0;\n  foreach(lst, (val, index) => \n  {\n    if (index % 2 !=\
    \ 0 && val % 2 == 0)\n      sum += val;\n  });\n  return sum;\n}\n/*\nModule contains\
    \ a function that calculates the sum of all even numbers in an array.", "{\n \
    \   import std.algorithm;\n    return lst\n    .filter!(a => a%2 == 0)\n    .filter!((a,i)\
    \ => i%2==1)\n    .sum;\n}", "{\n    return lst.zip(0L..lst.length)\n        .filter!(t\
    \ => (t[1] % 2L) == 0L)\n        .map!(t => t[0])\n        .sum;\n}\n/*\nReturn\
    \ the number of consecutive integers with the same value as in a given array lst.",
  "{\n    long ans = 0L;\n    foreach(i,v; lst)\n    {\n        if(i % 2 == 1 && v\
    \ % 2 == 0)\n        {\n            ans += v;\n        }\n    }\n    return ans;\n\
    }", "{\n    long sum = 0;\n    foreach(i, e; lst) \n    {\n        if(i % 2 ==\
    \ 1 && e % 2 == 0)\n            sum += e;\n    }\n    return sum;\n}\n/*\nGiven\
    \ a tree, return the level in the tree that has the greatest sum."]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
