name: HumanEval_98_count_upper
language: d
prompt: "import std.math;\n/*\n\n    Given a string s, count the number of uppercase\
  \ vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\"\
  )\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\"\
  )\n    0L\n    \n*/\nlong count_upper(string s) \n"
tests: "unittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"\
  aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"\
  dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\"\
  ) == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") ==\
  \ 2L);\n}\nvoid main(){}"
completions: ["{\n    long result = 0;\n    foreach(immutable index, immutable char\
    \ c; s) \n    {\n        if(index % 2 == 0 && (c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U')) \n        {\n            result++;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    Write a function that takes in a set of integers\
    \ and returns an array of the powerset\n    of that set.", "{\n    long r = 0;\n\
    \    foreach(immutable c; s)\n    {\n        if((c >= 'A' && c <= 'Z') && (r++\
    \ & 1) == 0)\n            continue;\n    }\n    return r;\n}", "{\n    long count\
    \ = 0;\n    foreach(i, c; s)\n    {\n        if(c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U')\n        {\n            if(i % 2 == 0)\n          \
    \  {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n    Write a function that returns the count of a given character in a string.\n\
    \    \n    For example:\n    >>> char_count(\"foobar\", 'o')\n    2L\n    >>>\
    \ char_count(\"bazzzzzz\", 'z')\n    5L\n    >>> char_count(\"count\", 'x')\n\
    \    0L\n*/\nlong char_count(string s, char c) \n{\n    long count = 0;\n    foreach(i,\
    \ d; s)\n    {\n        if(d == c)\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n/*\n    Write a function that returns true if the\
    \ first half of a string is the\n    same as the second half, otherwise false.\n\
    \    \n    For example:\n    >>> half_match(\"foobar\")\n    false\n    >>> half_match(\"\
    abcdabcd\")\n    true\n    >>> half_match(\"\")\n    true\n*/", "{\n    long result\
    \ = 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        if (i % 2 ==\
    \ 0 && s[i] == toupper(s[i]))\n        {\n            result++;\n        }\n \
    \   }\n    return result;\n}", "{\n    // Your code here\n    int count = 0;\n\
    \    foreach(i, c; s)\n    {\n        if(isUpper(c) && (i % 2 == 0))\n       \
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n// NOTE: The\
    \ following autograder code must remain at the bottom of this file\n//       uncommented\
    \ so that it can be executed by the autograder.\n//\n// POST SUBMISSION: remove\
    \ all of the code below this line\n//\n/*", "{\n    long count = 0;\n    for (size_t\
    \ i = 0; i < s.length; i += 2)\n    {\n        if (s[i] == 'A' || s[i] == 'E'\
    \ || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long result;\n    long i;\n\
    \    result = 0L;\n    foreach (c; s)\n    {\n        if (c in ['A', 'E', 'I',\
    \ 'O', 'U'])\n        {\n            i++;\n            if (i % 2L == 0L)\n   \
    \         {\n                result++;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    foreach(index, i; s) \n    {\n  \
    \      if(index % 2 == 0) \n        {\n            foreach(char c; \"AEIOU\")\
    \ \n            {\n                if(s[i] == c) \n                {\n       \
    \             result++;\n                }\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    long count = 0;\n    foreach(idx, char ch; s)\
    \ \n    {\n        if((idx & 1) == 0 && isupper(ch))\n            count++;\n \
    \   }\n    return count;\n}", "{\n    long sum = 0;\n    for (auto i = 0; i <\
    \ s.length; i++)\n    {\n        if (i % 2 == 0 && s[i] >= 'A' && s[i] <= 'Z')\n\
    \        {\n            sum++;\n        }\n    }\n    return sum;\n}", "{\n  long\
    \ result = 0;\n  for (size_t i = 0; i < s.length; i++)\n  {\n    if (i % 2 ==\
    \ 0 && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'))\n\
    \      result++;\n  }\n  return result;\n}", "{\n    long count = 0;\n    foreach(char\
    \ c; s[2..$])\n    {\n        // Even indices.\n        if(toupper(c) == 'A' ||\
    \ toupper(c) == 'E' || toupper(c) == 'I' || toupper(c) == 'O' || toupper(c) ==\
    \ 'U')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long r;\n    foreach(char c; 0 .. s.length)\n    {\n        if(('A'\
    \ <= c && c <= 'Z') && c.isVowel && c % 2 == 0)\n        {\n            r += 1;\n\
    \        }\n    }\n    return r;\n}", "{\n  long result = 0;\n  foreach(i,c; s)\n\
    \  {\n    if(i % 2 == 0 && isupper(c))\n    {\n      result++;\n    }\n  }\n \
    \ return result;\n}", "{\n    long count = 0;\n    for (long i = 0; i < s.length;\
    \ i += 2)\n    {\n        if (isVowel(s[i]) && isUpper(s[i]))\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(i, e; s) \n    {\n        if (i % 2 == 0 && isupper(e)) \n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    \    Write a function that returns the index of the first negative number in a\
    \ \n    given array. The array is not sorted.\n    \n    For example:\n    >>>\
    \ index_first_negative([1, -2, 3, -4, -5, 6, 7])\n    1L\n    >>> index_first_negative([1,\
    \ -2, 3, -4, -5, 6, 7, -8])\n    1L\n    >>> index_first_negative([1, 2, 3, 4,\
    \ 5, 6, 7])\n    -1L\n*/\nlong index_first_negative(long[] a) \n{\n    long[]::size_type\
    \ index = 0;\n    while (index < a.length && a[index] >= 0) \n    {\n        index++;\n\
    \    }\n    if (index < a.length) \n    {\n        return index;\n    }\n    return\
    \ -1;\n}\n/*\n    Write a function that takes a string s and a double d and returns\
    \ the number \n    of digits in d that exist in s.\n    \n    For example:\n \
    \   >>> count_digits(\"abcdef\", 5.82)\n    2L\n    >>> count_digits(\"jfkaljfd\"\
    , 5.82)\n    0L\n    >>> count_digits(\"jfkal5jfd2\", 5.82)\n    2L\n*/\nlong\
    \ count_digits(string s, double d) \n{\n    long count = 0;\n    foreach(c; s)\
    \ \n    {\n        if (isdigit(c)) \n        {\n            foreach(n; to!string(d))\
    \ \n            {\n                if (c == n) \n                {\n         \
    \           count++;\n                }\n            }\n        }\n    }\n   \
    \ return count;\n}\n/*\n    Write a function that takes two strings s and t and\
    \ returns true if they \n    overlap each other.\n", "{\n    long l = 0;\n   \
    \ auto c = s.length;\n    for (int i = 0; i < c; i += 2)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            if (toupper(s[i]) == 'A' || toupper(s[i])\
    \ == 'E' || toupper(s[i]) == 'I' || toupper(s[i]) == 'O' || toupper(s[i]) == 'U')\n\
    \            {\n                l++;\n            }\n        }\n    }\n    return\
    \ l;\n}", "{\n    long sum = 0;\n    for (size_t i = 0; i < s.length; i++)\n \
    \   {\n        if (i % 2 == 0 && s[i] >= 'A' && s[i] <= 'Z')\n        {\n    \
    \        sum += 1;\n        }\n    }\n    return sum;\n}", "{\n    long l = 0;\n\
    \    foreach(immutable c; s)\n    {\n        if(c >= 'A' && c <= 'Z' && l % 2\
    \ == 0)\n            l++;\n        l++;\n    }\n    return l / 2;\n}", "{\n  long\
    \ count = 0;\n  foreach(immutable char c; s)\n  {\n    if(isupper(c) && (count\
    \ % 2 == 0))\n      count++;\n  }\n  return count;\n}", "{\n    long count;\n\
    \    for (long i = 0; i < s.length; i += 2)\n    {\n        if (i == 0)\n    \
    \    {\n            if (isupper(s[i]))\n            {\n                count =\
    \ 1;\n            }\n            else\n            {\n                count =\
    \ 0;\n            }\n        }\n        else\n        {\n            if (isupper(s[i]))\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n ", "{\n    long result = 0;\n    static string vowels =\
    \ \"AEIOU\";\n    foreach(immutable i, immutable c; s) \n    {\n        if (c\
    \ >= 'A' && c <= 'Z' && i % 2 == 0 && vowels.indexOf(c) != -1)\n            result++;\n\
    \    }\n    return result;\n}", "{\n    long count;\n    foreach(c; s)\n    {\n\
    \        if(isupper(c) && count % 2 == 0)\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}", "{\n    int cnt = 0;\n    for (int i\
    \ = 0; i < s.length; i += 2) \n    {\n        char c = s[i];\n        if (c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            cnt++;\n \
    \   }\n    return cnt;\n}", "{\n    long count;\n    foreach(int i, char c; s)\
    \ \n    {\n        if (isEven(i) && isUpper(c) && isVowel(c)) \n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n ", "{\n    long\
    \ j = 0;\n    foreach(i, v; s)\n    {\n        if(i%2 != 0)\n        {\n     \
    \       if(v == 'A' || v == 'E' || v == 'I' || v == 'O' || v == 'U')\n       \
    \     {\n                j++;\n            }\n        }\n    }\n    return j;\n\
    }", "{\n    long uppercaseVowels = 0;\n    foreach(immutable i, immutable c; s)\
    \ \n    {\n        //i is the character index\n        if(i % 2) \n        {\n\
    \            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') \n \
    \           {\n                uppercaseVowels++;\n            }\n        }\n\
    \    }\n    return uppercaseVowels;\n}", "{\n    long result = 0;\n    foreach(inout\
    \ char c; s[0..$/2])\n    {\n        if (('A' <= c) && (c <= 'Z'))\n         \
    \   if (isVowel(char.toLower(c)))\n                result++;\n    }\n    return\
    \ result;\n}", "{\n    long counter = 0;\n    for (int i = 0; i < s.length; i++)\n\
    \    {\n        if (isupper(s[i]) && isEven(i))\n        {\n            counter++;\n\
    \        }\n    }\n    return counter;\n}", "{\n    uint count = 0;\n    foreach(char\
    \ c; s)\n    {\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long counter = 0;\n    string vowels = \"aeiouAEIOU\";\n    foreach(i,ch;\
    \ s)\n    {\n        if(i % 2 == 0 && i != 0)\n        {\n            auto ind\
    \ = indexOf(vowels,ch);\n            if(ind > 4)\n            {\n            \
    \    counter += 1;\n            }\n        }\n    }\n    return counter;\n}",
  "{\n    long cnt = 0;\n    for (int i = 0; i < s.length; i += 2) \n    {\n     \
    \   if (i % 2 == 0 && s[i] isin ['A', 'E', 'I', 'O', 'U']) \n        {\n     \
    \       cnt++;\n        }\n    }\n    return cnt;\n}\n/*\n    Given a string s,\
    \ count the number of lowercase vowels in even indices.\n    \n    For example:\n\
    \    >>> count_lower(\"aBCdEf\")\n    0L\n    >>> count_lower(\"abcdefg\")\n \
    \   1L\n    >>> count_lower(\"dBBE\")\n    1L\n    \n*/\nlong count_lower(string\
    \ s) \n{\n    long cnt = 0;\n    for (int i = 0; i < s.length; i += 2) \n    {\n\
    \        if (i % 2 == 0 && s[i] isin ['a', 'e', 'i', 'o', 'u']) \n        {\n\
    \            cnt++;\n        }\n    }\n    return cnt;\n}\n/*\n    Given a string\
    \ s, count the number of uppercase vowels in odd indices.\n    \n    For example:\n\
    \    >>> count_upper_odd(\"aBCdEf\")\n    1L\n    >>> count_upper_odd(\"abcdefg\"\
    )\n    1L\n    >>> count_upper_odd(\"dBBE\")\n    0L\n    \n*/\nlong count_upper_odd(string\
    \ s) \n{\n    long cnt = 0;\n    for (int i = 1; i < s.length; i += 2) \n    {\n\
    \        if (i % 2 == 1 && s[i] isin ['A', 'E', 'I', 'O', 'U']) \n        {\n\
    \            cnt++;\n        }\n    }\n    return cnt;\n}\n/*\n    Given a string\
    \ s, count the number of lowercase vowels in odd indices.\n    \n    For example:\n\
    \    >>> count_lower_odd(\"aBCdEf\")\n    0L\n    >>> count_lower_odd(\"abcdefg\"\
    )\n    1", "{\n    long count = 0;\n    foreach(immutable i, immutable c; s)\n\
    \    {\n        if (isEven(i) && isVowel(c) && isUpper(c))\n            count++;\n\
    \    }\n    return count;\n}", "{\n    auto is_upper_vowel = [](dchar c) { \n\
    \        return c.isUpper && \"AEIOU\".canFind(c);\n    };\n    long num = 0;\n\
    \    for (size_t i = 0; i < s.length; i += 2)\n    {\n        if (is_upper_vowel(s[i]))\n\
    \            num++;\n    }\n    return num;\n}", "{\n    auto count = 0L;\n  \
    \  foreach(i, e; iota(s.length))\n    {\n        if (e % 2 == 0 && isUpper(s[e]))\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    string vowels = \"AEIOU\";\n    foreach(i, char c; s) \n    {\n        if(i\
    \ % 2 == 0 && c >= 'A' && c <= 'Z' && c != ' ') \n        {\n            count\
    \ += 1;\n        }\n    }\n    return count;\n}\n/*", "{\n    long ret = 0;\n\
    \    foreach(i, c; s) \n    {\n        if (i % 2 == 0 && in(c, \"AEIOU\")) ret++;\n\
    \    }\n    return ret;\n}", "{\n    auto count = 0L;\n    auto m = s.length;\n\
    \    foreach(i; 0..m)\n    {\n        if (i % 2 == 0)\n        {\n           \
    \ switch(s[i])\n            {\n                case 'A':\n                case\
    \ 'E':\n                case 'I':\n                case 'O':\n               \
    \ case 'U':\n                    count++;\n            }\n        }\n    }\n \
    \   return count;\n}", "{\n    long result = 0;\n    foreach(immutable i, c; s)\
    \ \n    {\n        if(i % 2 == 0 && isUpper(c)) \n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long len = s.length;\n    long\
    \ sum = 0;\n    foreach(index,ch; s)\n    {\n        if (index % 2 == 0 && ch\
    \ >= 'A' && ch <= 'Z')\n            sum++;\n    }\n    return sum;\n}", "{\n \
    \   long count = 0;\n    foreach(i, c; s) \n    {\n        if((i % 2 == 0) &&\
    \ (c in ['A', 'E', 'I', 'O', 'U']))\n            count++;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    char [] vowels = ['A', 'E', 'I', 'O', 'U'];\n\
    \    foreach(i, c; s)\n    {\n        if(i % 2 == 0 && c.upperof in vowels)\n\
    \            count++;\n    }\n    return count;\n}\n/*\n    \n    Given a string\
    \ s of integers and a number k, find the sum of all elements of s at indices that\
    \ have k neighbors above them.\n    \n    For example:\n    >>> sum_neighbors(\"\
    1,2,3,4,5,6,7,8,9,10\", 2)\n    7L\n    >>> sum_neighbors(\"-2,2,2,2,2,-2,2,2,2,2\"\
    , 1)\n    4L\n    >>> sum_neighbors(\"1,2,3,4,5,6,7,8,9,10\", 5)\n    0L\n   \
    \ \n*/\nlong sum_neighbors(string s, long k) \n{\n    long [] arr = s.split(\"\
    ,\").map!(to!long);\n    long sum = 0;\n    for(long i = 0; i < arr.length; i++)\n\
    \    {\n        long count = 0;\n        for(long j = i - k; j <= i + k; j++)\n\
    \        {\n            if(0 <= j && j < arr.length && arr[j] > arr[i])\n    \
    \            count++;\n        }\n        if(count == k)\n            sum += arr[i];\n\
    \    }\n    return sum;\n}\n/*\n    \n    Given a string s of integers, find the\
    \ largest value that occurs at the middle index of a tuple of 3 indices.\n   \
    \ \n    For example:\n    >>> largest_mid(\"1,2,3,4,5,6,7,8,9,10\")\n    6L\n\
    \    >>> largest_mid(\"1,2,2,2,2,2,2,2,2,2\")\n    2L\n    >>> largest_mid(\"\
    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15", "{\n    long ret = 0;\n    for (long i =\
    \ 0; i < s.length; i++)\n    {\n        ret += (i % 2 == 0 && isupper(s[i]));\n\
    \    }\n    return ret;\n}", "{\n    return s.count!((c) { return (c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U') && (s.indexOf(c) % 2 == 0); });\n\
    }", "{\n    long count = 0;\n    for (int i = 0; i < s.length; i++)\n    {\n \
    \       if (i % 2 == 0 && isUpper(s[i]))\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}", "{\n    long result = 0;\n    for (int\
    \ i = 0; i < s.length; i += 2) \n    {\n        char c = s[i];\n        if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            result++;\n\
    \    }\n    return result;\n}", "{\n    return count_if(s, (c)\n    {\n      \
    \  return (1 - (c & 32) >> 5) & (1 - ((c & 31) & ~9) >> 5) & ((s.length + (s.length\
    \ & 1) & 1) | (s.length & 1 & 1) | (1 ^ (s.length & 1 & 1)));\n    });\n}\n/*\n\
    \    \n    Written by \"Swift Lord\" (lol)\n    \n    I don't know how it works.\n\
    \    \n    It works.\n    \n    - D\n    \n*/", "{\n    long num_upper = 0;\n\
    \    foreach(i, v; s)\n    {\n        if (v >= 'A' && v <= 'Z' && i % 2 == 0)\n\
    \        {\n            num_upper++;\n        }\n    }\n    return num_upper;\n\
    }", "{\n    long count = 0;\n    string uppers = \"AEIOU\";\n    for (size_t i\
    \ = 0; i < s.length; i++) {\n        if (i % 2 == 0 && uppers.find(s[i]) != string.npos)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    return\
    \ count!(c => c.isUpper && c.isVowel && (s.indexOf(c) % 2) == 0)(s);\n}\n \n \n\
    /*\n    Write a function that returns the smallest prime factor\n    of a number\
    \ that is greater than 1.\n    \n    For example:\n    >>> smallest_prime_factor(10)\n\
    \    2L\n    >>> smallest_prime_factor(11)\n    11L\n    >>> smallest_prime_factor(12)\n\
    \    2L\n    >>> smallest_prime_factor(21)\n    3L\n*/", "{\n    long n = 0;\n\
    \    foreach(i, c; s) \n    {\n        if (i % 2 == 0 && (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U'))\n            n++;\n    }\n    return n;\n\
    }", "{\n    long result;\n    foreach(idx, elem; s)\n    {\n        if(isEven(idx)\
    \ && isUpper(elem))\n        {\n            result += 1;\n        }\n    }\n \
    \   return result;\n}", "{\n    long res = 0;\n    foreach(i, c; s) \n    {\n\
    \        if (i % 2 == 0 && 'A' <= c && c <= 'Z')\n            res++;\n    }\n\
    \    return res;\n}", "{\n    long count = 0;\n    for (int i = 0; i < s.length;\
    \ i+=2)\n    {\n        if (std.math.isupper(s[i]))\n        {\n            switch\
    \ (s[i])\n            {\n                case 'A':\n                case 'E':\n\
    \                case 'I':\n                case 'O':\n                case 'U':\n\
    \                    count++;\n                    break;\n            }\n   \
    \     }\n    }\n    return count;\n}", "{\n    long res = 0;\n    long even=0;\n\
    \    foreach(c; s)\n    {\n        if(c=='A'||c=='E'||c=='I'||c=='O'||c=='U')\n\
    \        {\n            if(even%2==0)\n            {\n                res++;\n\
    \            }\n        }\n        even++;\n    }\n    return res;\n}", "{\n \
    \   long count = 0;\n    for (int i = 0; i < s.length; i += 2)\n    {\n      \
    \  if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    for (size_t i = 0; i < s.length; i += 2) \n    {\n \
    \       switch (s[i])\n        {\n            case 'A':\n            case 'E':\n\
    \            case 'I':\n            case 'O':\n            case 'U':\n       \
    \         count++;\n                break;\n        }\n    }\n    return count;\n\
    }", "{\n    long num = 0;\n    string vowels = \"AEIOU\";\n    foreach(i, e; s)\n\
    \    {\n        if(i % 2 == 0 && vowels.canFind(toupper(e)))\n            num++;\n\
    \    }\n    return num;\n}", "{\n    long count = 0;\n    foreach(immutable c;\
    \ s[0..$-1:2])\n    {\n        if(isUpperCase(c))\n            count++;\n    }\n\
    \    return count;\n}", "{\n    long count = 0;\n    foreach(dchar c; s) \n  \
    \  {\n        if(isVowel(c) && isUpper(c) && (count % 2) == 0) \n        {\n \
    \           count++;\n        }\n    }\n    return count;\n}\n/*\n    Given two\
    \ strings, check if one is a permutation of the other\n    \n    For example:\n\
    \    >>> is_permutation(\"Michael Sorens\", \"michael sorens\")\n    true\n  \
    \  >>> is_permutation(\"Michael Sorens\", \"michael soren\")\n    false\n    >>>\
    \ is_permutation(\"Michael Sorens\", \"MICHAEL SORENS\")\n    true\n*/", "{\n\
    \    int num_vowels = 0;\n    foreach(i, letter; s) \n    {\n        if (letter\
    \ == 'A' || letter == 'E' || letter == 'I' || letter == 'O' || letter == 'U')\
    \ \n        {\n            if (i % 2 == 0) \n            {\n                num_vowels++;\n\
    \            }\n        }\n    }\n    return num_vowels;\n}", "{\n    long result\
    \ = 0;\n    foreach(ch; 2..s.length by 2) \n    {\n        switch(s[ch])\n   \
    \     {\n            case 'A':\n            case 'E':\n            case 'I':\n\
    \            case 'O':\n            case 'U':\n                result++;\n   \
    \             break;\n        }\n    }\n    return result;\n}", "{\n    return\
    \ count(filter!(i => i % 2 == 0)(s.byElem), c => isUpper(c));\n}", "{\n    long\
    \ r = 0;\n    foreach(i, c; s)\n    {\n        if(i % 2 == 0 && c in \"AEIOU\"\
    )\n            r++;\n    }\n    return r;\n}", "{\n  long count = 0;\n  foreach(immutable\
    \ c; s)\n  {\n    if((c >= 'A' && c <= 'Z') && isEven(count))\n    {\n      count++;\n\
    \    }\n  }\n  return count;\n}", "{\n    long count = 0;\n    for (size_t i =\
    \ 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && (s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'))\n        {\n         \
    \   count++;\n        }\n    }\n    return count;\n}", "{\n    long counter =\
    \ 0;\n    foreach(immutable i, immutable c; s)\n    {\n        if((i % 2) == 0\
    \ && c >= 'A' && c <= 'Z')\n        {\n            counter++;\n        }\n   \
    \ }\n    return counter;\n}", "{\n    long result;\n    foreach(immutable index,\
    \ immutable c; s)\n    {\n        if((index % 2 == 0) && (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U'))\n        {\n            result += 1;\n\
    \        }\n    }\n    return result;\n}", "{\n    import std.algorithm : filter,\
    \ count;\n    import std.range : map;\n    import std.ascii : isUpper;\n    import\
    \ std.string : strip;\n    import std.conv : to;\n    return to!long(count(filter(strip(s).map!((x)\
    \ => x.isUpper && x.index % 2 == 0))));\n}\n \n// main function", "{\n    int\
    \ result = 0;\n    foreach(immutable char; s)\n    {\n        if(isOdd(result)\
    \ && isUpper(s))\n            result++;\n        else\n            result++;\n\
    \    }\n    return result;\n}", "{\n    import std.string;\n    import std.algorithm;\n\
    \    import std.range;\n    enum vowels = \"AEIOU\";\n    long num_upper = 0;\n\
    \    long sz = s.length;\n    foreach(idx;iota(sz))\n    {\n        if(idx % 2\
    \ == 0)\n        {\n            auto vowel = s[idx];\n            if(vowels.canFind(vowel))\n\
    \            {\n                if(toUpper(vowel) == vowel)\n                {\n\
    \                    num_upper++;\n                }\n            }\n        }\n\
    \    }\n    return num_upper;\n}", "{\n    long num_vowels = 0;\n    foreach(int\
    \ i, char c; s)\n    {\n        if (isEven(i) && isVowel(c) && isUpper(c)) num_vowels++;\n\
    \    }\n    return num_vowels;\n}\n// -----------------------------------------------",
  "{\n    // TODO\n    return 0L;\n}", "{\n    int i;\n    long count = 0;\n    for\
    \ (i = 0; i < s.length; i++)\n    {\n        if (s[i] == 'A' || s[i] == 'E' ||\
    \ s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n            if (i % 2\
    \ == 0)\n            {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    long result;\n    int i;\n    foreach(i,\
    \ char c; s)\n    {\n        if (isupper(c) && i % 2 == 0)\n            result++;\n\
    \    }\n    return result;\n}", "{\n    long num = 0;\n    foreach(immutable c;\
    \ s)\n    {\n        if (c in ['A', 'E', 'I', 'O', 'U']) num += (c.isUpper & (s.indexOf(c)\
    \ % 2 == 0));\n    }\n    return num;\n}\n \n/*\n    This is another solution\
    \ to the count uppercase vowels problem.\n    \n    It was contributed by Timon\
    \ Gehr.\n*/\nlong count_upper_2(string s)\n{\n    long x = 0;\n    foreach(immutable\
    \ i, immutable c; s)\n    {\n        if ((i & 1) == 0 && (c in ['A', 'E', 'I',\
    \ 'O', 'U'])) x++;\n    }\n    return x;\n}\n ", "{\n    long upper = 0;\n   \
    \ foreach(i, char c; s)\n    {\n        if(i % 2 == 0 && isUpper(c))\n       \
    \     upper++;\n    }\n    return upper;\n}", "{\n    long count = 0;\n    foreach(immutable\
    \ i, immutable c; s)\n    {\n        if (i % 2 == 0 && isUpper(c))\n         \
    \   count++;\n    }\n    return count;\n}", "{\n    long result = 0;\n    for\
    \ (size_t i = 0; i < s.length; i++)\n    {\n        if ((s[i] == 'A' || s[i] ==\
    \ 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') && i % 2 == 0)\n        {\n\
    \            result++;\n        }\n    }\n    return result;\n}", "{\n    int\
    \ result = 0;\n    // YOUR CODE HERE\n    return result;\n}", "{\n    auto ret\
    \ = 0L;\n    auto it = s.begin();\n    auto ie = s.end();\n    while (it != ie)\
    \ {\n        if (isVowel(*it) && isupper(*it) && (distance(s.begin(), it) % 2\
    \ == 0)) {\n            ret++;\n        }\n        it++;\n    }\n    return ret;\n\
    }", "{\n    long count = 0;\n    foreach(immutable index, immutable c; s) \n \
    \   {\n        if(c.isUpper)\n        {\n            if(isEven(index))\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    for (size_t i = 0; i < s.length; i++)\n\
    \    {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' ||\
    \ s[i] == 'U')\n        {\n            if (i % 2 == 0)\n            {\n      \
    \          count++;\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long n = 0;\n    foreach(immutable i, const c; s) {\n        if (c.isUpper\
    \ && (i % 2 == 0))\n            n++;\n    }\n    return n;\n}", "{\n    long r\
    \ = 0;\n    for (int i = 0; i < s.length; i += 2)\n    {\n        if (isdigit(s[i]))\n\
    \            continue;\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U')\n            r++;\n    }\n    return r;\n}",
  "{\n    auto ret = 0L;\n    auto v = [\"A\",\"E\",\"I\",\"O\",\"U\"];\n    foreach(i,\
    \ c; s) \n    {\n        if(i % 2 == 0 && c in v)\n            ret++;\n    }\n\
    \    return ret;\n}", "{\n    return s.filter!((ref c)=>c.isUpper && cast(int)c.to!char\
    \ % 2 == 0).length;\n}", "{\n    long c = 0;\n    for (size_t i = 0; i < s.length;\
    \ i++)\n    {\n        if (s[i] >= 'A' && s[i] <= 'Z' && i % 2 == 0)\n       \
    \     c++;\n    }\n    return c;\n}\n/*\n    Not sure what is the best way to\
    \ test this so far.\n*/", "{\n    long count = 0;\n    foreach(immutable i, immutable\
    \ char; s)\n    {\n        if(i % 2 == 0 && isUpperCase(char))\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    for (int i = 0; i < s.length; i++) \n    {\n        if (isEven(i)\
    \ && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long cnt = 0;\n    foreach(i, ch; s)\n    {\n        if (i % 2 == 0 && ch\
    \ >= 'A' && ch <= 'Z')\n            cnt++;\n    }\n    return cnt;\n}\n \n/*\n\
    \    Given a string s, count the number of uppercase consonants in even indices.\n\
    \    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"\
    abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    2L\n    \n*/\nlong count_consonants(string\
    \ s) \n{\n    long cnt = 0;\n    foreach(i, ch; s)\n    {\n        if (i % 2 ==\
    \ 0 && ch >= 'A' && ch <= 'Z' && ch != 'A' && ch != 'E' && ch != 'I' && ch !=\
    \ 'O' && ch != 'U')\n            cnt++;\n    }\n    return cnt;\n}\n \n/*\n  \
    \  Given a string s, count the number of lowercase vowels in odd indices.\n  \
    \  \n    For example:\n    >>> count_lower(\"aBCdEf\")\n    2L\n    >>> count_lower(\"\
    abcdefg\")\n    3L\n    >>> count_lower(\"dBBE\")\n    0L\n    \n*/\nlong count_lower(string\
    \ s) \n{\n    long cnt = 0;\n    foreach(i, ch; s)\n    {\n        if (i % 2 ==\
    \ 1 && ch >= 'a' && ch <= 'z')\n            cnt++;\n    }\n    return cnt;\n}\n\
    \ \n/*\n    Given a string s, count the number of lowercase consonants in odd\
    \ indices.\n    \n    For example:\n    >>> count_lower(\"aBCdEf\")\n    1L\n\
    \    >>> count_lower(\"abcdefg\")\n    2L\n    >>> count_lower(\"dBBE\")\n   \
    \ 0L\n    \n*/\nlong count_lower_consonants(string s) \n{\n    long cnt = 0;\n\
    \    foreach(i, ch; s)\n", "{\n    long count = 0;\n    int len = s.length;\n\
    \    for (int i = 0; i < len; i += 2)\n    {\n        if (s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long result = 0;\n\
    \    foreach(immutable letter; s)\n    {\n        if (letter.isUpper)\n      \
    \  {\n            if (s.count ~ isEven)\n            {\n                result\
    \ += 1;\n            }\n        }\n    }\n    return result;\n}", "{\n    return\
    \ accumulate(s.length, 0L, cast(long)&s[0], __lambda2(size_t i, long a, char x)\n\
    \    {\n        return isUpper(x) && i % 2 == 0 ? a + 1 : a;\n    });\n}", "{\n\
    \    long result = 0;\n    int size = s.length;\n    for (int i = 0; i < size;\
    \ i += 2) \n    {\n        switch (s[i]) \n        {\n            case 'A':\n\
    \            case 'E':\n            case 'I':\n            case 'O':\n       \
    \     case 'U':\n                result++;\n                break;\n        }\n\
    \    }\n    return result;\n}", "{\n\tint count = 0;\n\tforeach(char c; s)\n\t\
    {\n\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t{\n\t\
    \t\tif(s.indexof(c) % 2 == 0)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn count;\n}", "{\n    long count = 0;\n    foreach(i, c; s) \n    {\n \
    \       if (isVowel(c) && i % 2 == 0 && isUpper(c))\n            count++;\n  \
    \  }\n    return count;\n}\n```", "{\n    long count = 0;\n    foreach(const char\
    \ c; s)\n    {\n        if (c < 'a' || c > 'z')\n            continue;\n     \
    \   if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n          \
    \  continue;\n        if (size_t(c - 'a') % 2 == 0)\n            count++;\n  \
    \  }\n    return count;\n}", "{\n    long count = 0;\n    for (size_t i = 0; i\
    \ < s.length; i++)\n    {\n        if (isupper(s[i]) && i % 2 == 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n\tlong uppercount\
    \ = 0;\n\tfor (size_t i = 0; i < s.length; i += 2)\n\t{\n\t\tif (isupper(s[i]))\n\
    \t\t{\n\t\t\tif (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U')\n\t\t\t{\n\t\t\t\tuppercount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn uppercount;\n\
    }", "{\n    long result = 0;\n    for (long i = 0; i < s.length; i++) \n    {\n\
    \        result += (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' ||\
    \ s[i] == 'U') && (i % 2 == 0);\n    }\n    return result;\n}", "{\n    long count\
    \ = 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        if (isVowel(s[i])\
    \ && (i % 2 == 0) && (isUpper(s[i])))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(i, c;\
    \ s)\n    {\n        if(i % 2 == 0 && 'A' <= c && c <= 'Z')\n            count++;\n\
    \    }\n    return count;\n}\n/*\n    Given a string s, return its reversal with\
    \ the upper case vowels in reverse order.", "{\n    long result = 0;\n    foreach(i,ch;\
    \ s)\n    {\n        if(i%2 == 0 && s[i] >= 'A' && s[i] <= 'Z')\n        {\n \
    \           ++result;\n        }\n    }\n    return result;\n}", "{\n    long\
    \ count = 0;\n    foreach(i, c; s) \n    {\n        if(i % 2 == 0 && to!char.isupper(c))\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}",
  "{\n    long count = 0;\n    foreach(i,e; s)\n    {\n        if(i % 2 == 0 && isUpper(e))\n\
    \            count++;\n    }\n    return count;\n}", "{\n  long result = 0;\n\
    \  for (size_t i = 0; i < s.length; i += 2) \n  {\n    result += (s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U');\n  }\n  return\
    \ result;\n}", "{\n\tlong count = 0;\n\tforeach(i, char c; s)\n\t{\n\t\tif(isalpha(c)\
    \ && isupper(c) && isEven(i))\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }", "{\n    long counter = 0;\n    for (size_t i = 0; i < s.length; i++)\n   \
    \ {\n        if (i % 2 == 0 && isupper(s[i]))\n        {\n            counter++;\n\
    \        }\n    }\n    return counter;\n}", "{\n    long result = 0;\n    foreach(i,\
    \ c; s)\n    {\n        if((i % 2 == 0) && (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U'))\n        {\n            result += 1;\n        }\n   \
    \ }\n    return result;\n}", "{\n    long count = 0;\n    for (int i = 0; i <\
    \ s.length; i++) \n    {\n        char c = s[i];\n        if ((i % 2 == 0) &&\
    \ (inSet('A', 'E', 'I', 'O', 'U')(c))) \n        {\n            count++;\n   \
    \     }\n    }\n    return count;\n}", "{\n    long vowels = 0;\n    for (int\
    \ i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n          \
    \  vowels += 1;\n        }\n    }\n    return vowels;\n}", "{\n    long count\
    \ = 0;\n    string vowels = \"AEIOU\";\n    foreach(i, char ch; s)\n    {\n  \
    \      if (ch >= 'A' && ch <= 'Z' && i % 2 == 0 && vowels.find(ch) != -1)\n  \
    \          count++;\n    }\n    return count;\n}\n/*", "{\n    long count = 0;\n\
    \    foreach(i, c; s)\n    {\n        if (i % 2 == 0 && \"AEIOU\".canFind(c))\n\
    \            count++;\n    }\n    return count;\n}", "{\n\tlong result = 0;\n\t\
    foreach(char c; s) \n\t{\n\t\t// if even index and uppercase vowel\n\t\tif(distance(s.begin(),\
    \ c) % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) \n\
    \t\t{\n\t\t\tresult++;\n\t\t}\n\t}\n\treturn result;\n}", "{\n    return enumerate(s)\n\
    \        .filter!((a) => isEven(a[0]))\n        .filter!((a) => isUpper(a[1]))\n\
    \        .count;\n}", "{\n    int i;\n    long sum = 0;\n    foreach(char c; s)\n\
    \    {\n        if (i % 2 == 0 && isupper(c))\n            sum++;\n        i++;\n\
    \    }\n    return sum;\n}\n/*\n    Remove trailing whitespace from a string in\
    \ place.\n    \n    For example:\n    >>> string s = \"hello world  \";\n    >>>\
    \ rstrip(s);\n    >>> assert(s == \"hello world\");\n*/", "{\n    long count =\
    \ 0;\n    foreach(immutable i, immutable c; s)\n    {\n        if(isEven(i) &&\
    \ c.isUpper) count++;\n    }\n    return count;\n}", "{\n    long ans=0;\n   \
    \ foreach(i, c; s)\n    {\n        if(c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U')\n        {\n            ans += (i % 2) == 0;\n        }\n \
    \   }\n    return ans;\n}", "{\n    long i = 0;\n    long count = 0;\n    foreach(c;\
    \ s)\n    {\n        if (isEven(i) && isUpper(c))\n        {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}", "{\n    long r = 0;\n\
    \    for (size_t i = 0; i < s.length; i += 2)\n    {\n        if (s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n            r++;\n\
    \    }\n    return r;\n}", "{\n    long count = 0;\n    for (size_t i = 0; i <\
    \ s.length; i++) \n    {\n        char c = s[i];\n        if (isalpha(c) && isupper(c)\
    \ && i % 2 == 0)\n            count++;\n    }\n    return count;\n}", "{\n   \
    \ long result = 0;\n    int sLength = s.length;\n    for (int i = 0; i < sLength;\
    \ i += 2) \n    {\n        switch (s[i]) \n        {\n            case 'A':\n\
    \            case 'E':\n            case 'I':\n            case 'O':\n       \
    \     case 'U':\n                result++;\n                break;\n        }\n\
    \    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(i, const\
    \ ch; s)\n    {\n        if (isalpha(ch) && isupper(ch) && i % 2 == 0)\n     \
    \       count++;\n    }\n    return count;\n}", "{\n    long ret = 0;\n    for\
    \ (long i = 0; i < s.length; i += 2)\n    {\n        if (s[i] == 'A' || s[i] ==\
    \ 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n            ret++;\n    }\n\
    \    return ret;\n}", "{\n    long result = 0;\n    foreach(char c; s) \n    {\n\
    \        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n      \
    \  {\n            if(result % 2 == 0)\n            {\n                result++;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long count =\
    \ 0;\n    foreach(i, c; s) \n    {\n        if (i % 2 == 0 && isupper(c)) \n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(i, dchar c; s)\n    {\n        if( i % 2 ==\
    \ 0 && isUpper(c) && c in ['A', 'E', 'I', 'O', 'U'])\n            count++;\n \
    \   }\n    return count;\n}", "{\n    long result = 0;\n    for (long i = 0; i\
    \ < s.length; i += 2) \n    {\n        if (s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n            result++;\n  \
    \      }\n    }\n    return result;\n}", "{\n    long count = 0;\n    auto len\
    \ = s.length;\n    if (len == 0) return 0;\n    for (long i = 0; i < len; i +=\
    \ 2) \n    {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] ==\
    \ 'O' || s[i] == 'U') count++;\n    }\n    return count;\n}\n/*\n    Given a date,\
    \ return the number of seconds between a given date and January 1, 1970.\n   \
    \ \n    >>> get_seconds(\"2018/08/27\")\n    1535356800L\n    >>> get_seconds(\"\
    2019/01/01\")\n    1546300800L\n    >>> get_seconds(\"1970/01/01\")\n    0L\n\
    \    \n*/\nlong get_seconds(string date)\n{\n    import std.datetime : DateTime;\n\
    \    auto dt = DateTime(date);\n    return dt.toEpochTime;\n}\n/*\n    Given an\
    \ array of integers, return the number of doubles.\n    \n    >>> count_doubles([1,\
    \ 2, 3, 4, 5, 6])\n    0L\n    >>> count_doubles([1, 1, 2, 3, 4, 5, 6])\n    1L\n\
    \    >>> count_doubles([1, 1, 2, 2, 3, 4, 5, 6])\n    2L\n*/\nlong count_doubles(long[]\
    \ a)\n{\n    if (a.length < 2) return 0;\n    long count = 0;\n    for (long i\
    \ = 0; i < a.length - 1; i++)\n    {\n        if (a[i] == a[i + 1]) count++;\n\
    \    }\n    return count;\n}\n/*\n    Given an array of integers and a number\
    \ n, return the number of integers in the array that are \n    evenly divisible\
    \ by n.\n    \n    >>> count_div(5, [1, 2, 3, 4, 5, 6])\n    1L\n    >>> count_div(5,\
    \ [1, 2, 3, 4, 1, 2, 3,", "{\n    long sum = 0;\n    foreach(i, c; s)\n    {\n\
    \        if((isVowel(c) || c == 'y') && isEven(i) && isUpper(c))\n        {\n\
    \            sum++;\n        }\n    }\n    return sum;\n}", "{\n    long count\
    \ = 0;\n    foreach(i, c; s)\n    {\n        if(i%2 == 0 && isalpha(c) && isupper(c))\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(immutable c; s)\n    {\n        if (isUpperCase(c) && isEven(count))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    for (long i = 0; i < s.length; i += 2)\n    {\n    \
    \    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    auto len = s.length;\n    for (long i = 0; i < len;\
    \ i++)\n    {\n        if (is_upper(s[i]) && (i % 2 == 0))\n        {\n      \
    \      count++;\n        }\n    }\n    return count;\n}", "{\n    long result\
    \ = 0;\n    foreach(i, e; s)\n    {\n        if (i % 2 == 0 && e == toUpper(e))\n\
    \        {\n            result++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    long sz = s.length;\n    for (long i = 0; i < sz; i+=2)\
    \ {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U') {\n            result++;\n        }\n    }\n    return result;\n}",
  "{\n    long counter = 0;\n    foreach(i, char c; s)\n    {\n        if (i % 2 ==\
    \ 0 && isupper(c))\n            counter++;\n    }\n    return counter;\n}", "{\n\
    \    long result = 0;\n    for (long i = 0; i < s.length; i++)\n    {\n      \
    \  if (i % 2 == 0 && s[i] >= 'A' && s[i] <= 'Z')\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    return count(s, (elem,idx)=>elem=='A'||elem=='E'||elem=='I'||elem=='O'||elem=='U');\n\
    }", "{\n    long sz = s.length;\n    long result = 0;\n    for (size_t i = 0;\
    \ i < sz; i++)\n    {\n        if (i % 2 == 0 && isUpper(s[i]))\n        {\n \
    \           result++;\n        }\n    }\n    return result;\n}\n/*", "{\n    long\
    \ evencount = 0;\n    char vowelcheck;\n    char vowels[5] = \"AEIOU\";\n    foreach(string\
    \ i; 0..strlen(s))\n    {\n        if(i % 2 == 0)\n        {\n            vowelcheck\
    \ = toupper(s[i]);\n            foreach(char j; vowels)\n            {\n     \
    \           if(vowelcheck == j)\n                {\n                    evencount++;\n\
    \                }\n            }\n        }\n    }\n    return evencount;\n}\n\
    /*\n    Given a string s, count the number of uppercase vowels in odd indices.\n\
    \    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    2L\n    >>> count_upper(\"\
    abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string\
    \ s) \n{\n    long oddcount = 0;\n    char vowelcheck;\n    char vowels[5] = \"\
    AEIOU\";\n    foreach(string i; 0..strlen(s))\n    {\n        if(i % 2 != 0)\n\
    \        {\n            vowelcheck = toupper(s[i]);\n            foreach(char\
    \ j; vowels)\n            {\n                if(vowelcheck == j)\n           \
    \     {\n                    oddcount++;\n                }\n            }\n \
    \       }\n    }\n    return oddcount;\n}\n/*\n    Given two strings s and t,\
    \ returns an array of each character in s and t.\n    \n    For example:\n   \
    \ >>> makeArray(\"A\", \"B\")\n    ['A', 'B']\n    >>> makeArray(\"aaa\", \"bbb\"\
    )\n    ['a', 'b', 'a', 'b', 'a', 'b']\n    \n*/\nchar[] makeArray(string s, string\
    \ t) \n{\n    char array[strlen(s) + strlen(t)];\n    foreach(string i; 0..strlen(s))\n\
    \    {\n        array[i] = s[i];\n    }\n    foreach(string i; 0..strlen(t))\n\
    \    {\n        array[i", "{\n    long count = 0;\n    foreach(immutable c; 0\
    \ .. s.length)\n    {\n        if(isEven(c) && s[c] >= 'A' && s[c] <= 'Z') count++;\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(int i, char\
    \ c; s)\n    {\n        if(is_upper(c) && i % 2 == 0)\n            count++;\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(immutable\
    \ c; s)\n    {\n        if(isupper(c) && c in \"AEIOU\")\n        {\n        \
    \    count++;\n        }\n    }\n    return count;\n}", "{\n    long counter =\
    \ 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        if (isupper(s[i])\
    \ && i % 2 == 0)\n        {\n            counter++;\n        }\n    }\n    return\
    \ counter;\n}", "{\n    long result = 0;\n    foreach(immutable i, immutable c;\
    \ s)\n    {\n        if(c >= 'A' && c <= 'Z' && i % 2 == 0)\n            result++;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    for (int i = 0;\
    \ i < s.length; i++)\n    {\n        if (i % 2 == 0 && s[i] in \"AEIOU\")\n  \
    \      {\n            result++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long count = 0;\n    foreach(i,j; s)\n    {\n        if(i%2==0)\n       \
    \ {\n            if(j=='A'||j=='E'||j=='I'||j=='O'||j=='U')\n            {\n \
    \               count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long res = 0;\n    foreach(i, c; s)\n    {\n        if(i % 2 == 0\
    \ && c >= 'A' && c <= 'Z')\n            res++;\n    }\n    return res;\n}", "{\n\
    \    return count!((x) => (x[1] % 2 == 0) && (x[0] in 'AEIOU'))(enumerate(s));\n\
    }", "{\n    long count = 0;\n    for (size_t i = 0; i < s.length; i += 2)\n  \
    \  {\n        char c = s[i];\n        count += isUpper(c) && isVowel(c);\n   \
    \ }\n    return count;\n}", "{\n    long count = 0;\n    string vowels = \"AEIOU\"\
    ;\n    for (long i = 0; i < s.length; i++) {\n        char c = s[i];\n       \
    \ if (i % 2 == 0 && c in vowels)\n            count++;\n    }\n    return count;\n\
    }", "{\n    long result = 0;\n    foreach(immutable i, immutable c; s)\n    {\n\
    \        if(i%2 == 0 && isUpper(c))\n            result++;\n    }\n    return\
    \ result;\n}", "{\n    long counter = 0;\n    foreach(i, e; s) \n    {\n     \
    \   if(i % 2 == 0 && isupper(e))\n            counter++;\n    }\n    return counter;\n\
    }", "{\n    long i;\n    long count = 0;\n    for (i = 0; i < s.length; i += 2)\
    \ \n    {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O'\
    \ || s[i] == 'U')\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    enum vowels = ['A', 'E', 'I', 'O', 'U'];\n    long num_upper\
    \ = 0;\n    foreach(index, c; s) \n    {\n        if (index % 2 == 0 && std.algorithm.any!(isUpper)(vowels,\
    \ c))\n            num_upper++;\n    }\n    return num_upper;\n}\n ", "{\n   \
    \ long count = 0;\n    for (long i = 0; i < s.length; i += 2)\n    {\n       \
    \ if (s[i] in ['A', 'E', 'I', 'O', 'U'])\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\n/*", "{\n    long res = 0;\n    foreach(immutable\
    \ i, immutable c; s) \n    {\n        if (i % 2 == 0 && isUpper(c)) \n       \
    \ {\n            res++;\n        }\n    }\n    return res;\n}", "{\n    long count\
    \ = 0;\n    for (int i = 0; i < s.length; i++)\n    {\n        if (isVowel(s[i])\
    \ && s[i] == toupper(s[i]) && i % 2 == 0)\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}", "{\n    long counter = 0;\n    char uc;\n\
    \    foreach(immutable index, immutable ch; s)\n    {\n        uc = toUpper(ch);\n\
    \        if(index % 2 == 0 && (uc == 'A' || uc == 'E' || uc == 'I' || uc == 'O'\
    \ || uc == 'U'))\n        {\n            counter++;\n        }\n    }\n    return\
    \ counter;\n}", "{\n    int vowels = 0;\n    for (int i = 0; i < s.length; i++)\n\
    \    {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U')\n        {\n            if (i % 2 == 0)\n            {\n\
    \                vowels++;\n            }\n        }\n    }\n    return vowels;\n\
    }", "{\n    long numUppers = 0;\n    foreach(immutable index, immutable c; s)\
    \ \n    {\n        if(index % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U')) \n        {\n            numUppers++;\n        }\n    }\n\
    \    return numUppers;\n}", "{\n\tlong counter = 0;\n\tforeach(i, c; s)\n\t{\n\
    \t\tif(isVowel(c) && isUpper(c) && isEven(i))\n\t\t{\n\t\t\tcounter++;\n\t\t}\n\
    \t}\n\treturn counter;\n}", "{\n  long result = 0;\n  foreach(i, x; s) \n  {\n\
    \    if (x >= 'A' && x <= 'Z' && i % 2 == 0) \n    {\n      result++;\n    }\n\
    \  }\n  return result;\n}", "{\n    static uint[] vowel = [\n        ('A'.ord),\n\
    \        ('E'.ord),\n        ('I'.ord),\n        ('O'.ord),\n        ('U'.ord)\n\
    \    ];\n    long sum = 0;\n    foreach(i, c; s)\n    {\n        auto o = c.ord;\n\
    \        if(o > 64 && o < 91)\n        {\n            auto d = o - 65;\n     \
    \       foreach(i, v; vowel)\n            {\n                if(v == d)\n    \
    \            {\n                    sum++;\n                    break;\n     \
    \           }\n            }\n        }\n    }\n    return sum;\n}", "{\n    //size_t\
    \ size = s.size();\n    long count = 0;\n    for (size_t i = 0; i < s.size();\
    \ i += 2)\n    {\n        char c = s[i];\n        if (c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U')\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}", "{\n    long n = 0;\n    for (size_t i = 0;\
    \ i < s.length; i++)\n    {\n        if (i % 2 == 0 && isUpperCase(s[i]))\n  \
    \          n++;\n    }\n    return n;\n}", "{\n    long ret = 0;\n    foreach(char\
    \ c; s) \n    {\n        switch(c) \n        {\n            case 'A':\n      \
    \      case 'E':\n            case 'I':\n            case 'O':\n            case\
    \ 'U':\n                ret += (s.length - s.indexof(c)) % 2;\n              \
    \  break;\n        }\n    }\n    return ret;\n}", "{\n    long ct = 0;\n    foreach(\
    \ immutable dchar c; s )\n    {\n        if( ct % 2 == 0 && isUpper(c) && (c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') )\n            ct++;\n\
    \    }\n    return ct;\n}", "{\n    long result = 0;\n    foreach(i, c; s) \n\
    \    {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ \n        {\n            if (i % 2 == 0) \n            {\n                result\
    \ += 1;\n            }\n        }\n    }\n    return result;\n}", "{\n    uint\
    \ i = 0;\n    long ret = 0;\n    foreach(c; s)\n    {\n        if(i % 2 == 0 &&\
    \ c >= 'A' && c <= 'Z')\n            ret++;\n        i++;\n    }\n    return ret;\n\
    }\n/*", "{\n  long count = 0;\n  foreach( immutable c; s)\n  {\n    static if(isUpper(c))\n\
    \    {\n      count++;\n    }\n  }\n  return count;\n}", "{\n    long upper =\
    \ 0;\n    foreach(char c; s)\n    {\n        if(isupper(c) && (s.indexOf(c) %\
    \ 2) == 0)\n        {\n            upper++;\n        }\n    }\n    return upper;\n\
    }", "{\n    long res = 0;\n    auto vowels = \"AEIOU\";\n    foreach(immutable\
    \ idx, immutable c; s)\n    {\n        if (idx % 2 == 0 && toupper(c) in vowels)\n\
    \            res++;\n    }\n    return res;\n}", "{\n    long count = 0;\n   \
    \ foreach(i, char c; s)\n    {\n        if (c >= 'A' && c <= 'Z' && i % 2 == 0)\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long r = 0;\n   \
    \ foreach(i, c; s) \n    {\n        if (c >= 'A' && c <= 'Z' && (i & 1) == 0)\
    \ \n        {\n            r++;\n        }\n    }\n    return r;\n}", "{\n   \
    \ long vowels = 0;\n    long size = s.length;\n    for (long i = 0; i < size;\
    \ i += 2)\n    {\n        switch (s[i])\n        {\n            case 'A':\n  \
    \          case 'E':\n            case 'I':\n            case 'O':\n         \
    \   case 'U':\n                vowels++;\n                break;\n        }\n\
    \    }\n    return vowels;\n}", "{\n  long ret = 0;\n  foreach( i, c; s)\n  {\n\
    \    if( is_upper(c) && (i % 2) == 0)\n    {\n      ++ret;\n    }\n  }\n  return\
    \ ret;\n}", "{\n    long count = 0;\n    foreach(immutable int i, immutable char\
    \ c; s) \n    {\n        if(i % 2 == 0 && c in ['A', 'E', 'I', 'O', 'U'])\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n    Given a string s, count\
    \ the number of substrings that start with the prefix \"a\".\n    \n    For example:\n\
    \    >>> count_a(\"a\")\n    1L\n    >>> count_a(\"banana\")\n    1L\n    >>>\
    \ count_a(\"aardvark\")\n    2L\n*/\nlong count_a(string s) \n{\n    long count\
    \ = 0;\n    immutable int n = s.length;\n    foreach(immutable int i; 0..n) \n\
    \    {\n        if(s[i..n].startsWith(\"a\"))\n            count++;\n    }\n \
    \   return count;\n}\n/*\n    Given a string s, count the number of substrings\
    \ that start with the prefix \"ab\".\n    \n    For example:\n    >>> count_ab(\"\
    ab\")\n    1L\n    >>> count_ab(\"ababab\")\n    3L\n    >>> count_ab(\"bababab\"\
    )\n    0L\n*/\nlong count_ab(string s) \n{\n    long count = 0;\n    immutable\
    \ int n = s.length;\n    foreach(immutable int i; 0..n) \n    {\n        if(s[i..n].startsWith(\"\
    ab\"))\n            count++;\n    }\n    return count;\n}\n/*\n    Given a string\
    \ s, count the number of contiguous substrings of length at least 2 \n    whose\
    \ maximum is the same as their minimum.\n    \n    For example:\n    >>> count_maxmin(\"\
    aa\")\n    1L\n    >>> count_maxmin(\"abac\")\n    2L\n    >>> count_maxmin(\"\
    abba\")\n    1L\n*/\nlong count_maxmin(string s) \n{\n    long count = 0;\n  \
    \  immutable int n = s.length;\n    foreach(immutable int i; 0..n) \n    {\n \
    \       fore", "{\n    long counter = 0;\n    foreach(int i; 0 .. s.length)\n\
    \    {\n        if (i % 2 != 0)\n        {\n            switch(toupper(s[i]))\n\
    \            {\n                case 'A':\n                case 'E':\n       \
    \         case 'I':\n                case 'O':\n                case 'U':\n  \
    \                  counter++;\n                    break;\n            }\n   \
    \     }\n    }\n    return counter;\n}", "{\n    long vowels = 0;\n    foreach(i,\
    \ c; s)\n    {\n        if (i % 2 == 0 && 'AEIOU'.indexOf(c) != -1)\n        \
    \    vowels++;\n    }\n    return vowels;\n}", "{\n    size_t length = s.length;\n\
    \    long count = 0;\n    for (size_t i = 0; i < length; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            if (isupper(s[i])) count++;\n      \
    \  }\n    }\n    return count;\n}", "{\n    return count(s, (x) => (x >= 'A' &&\
    \ x <= 'Z') && (x % 2 == 0));\n}\n \n/*\n    Given a string s and a character\
    \ c, count the number of occurrences of the character in the string.\n    \n \
    \   For example:\n    >>> count(\"hello\", 'l')\n    2L\n    >>> count(\"hello\"\
    , 'x')\n    0L\n    >>> count(\"\", 'x')\n    0L\n    \n*/\nlong count(string\
    \ s, char c) \n{\n    return count(s, (x) => x == c);\n}\n \n/*\n    Given a vector\
    \ of unsigned integers and a value, count the number of instances of the value\
    \ in the vector.\n    \n    For example:\n    >>> count([0,0,0,1,1,1,2,2,2], 0u)\n\
    \    3L\n    >>> count([0,0,0,1,1,1,2,2,2], 3u)\n    0L\n    >>> count([], 0u)\n\
    \    0L\n*/\nlong count(in uint[] v, uint n) \n{\n    return count(v, (x) => x\
    \ == n);\n}\n \n/*\n    Given a string s, return true if the string is \"clean\"\
    , meaning it has only letters and no punctuation, numbers, or symbols.\n    \n\
    \    For example:\n    >>> is_clean(\"ab cd\")\n    true\n    >>> is_clean(\"\
    ab12cd\")\n    false\n    >>> is_clean(\"ab*&^cd\")\n    false\n*/", "{\n    long\
    \ count = 0;\n    foreach(i, c; s) \n    {\n        if(i % 2 && c == toupper(c))\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}",
  "{\n    return count_if!(i =>\n    (\n        (i.length > 1) && \n        ((i[0]\
    \ + 0) % 2) == 0 && \n        (\n            (i[1] == 'A') || \n            (i[1]\
    \ == 'E') || \n            (i[1] == 'I') || \n            (i[1] == 'O') || \n\
    \            (i[1] == 'U')\n        )\n    ))(s.zip);\n}", "{\n    long ret =\
    \ 0;\n    int len = s.length;\n    for (int i = 0; i < len; i+=2) {\n        ret\
    \ += (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U');\n\
    \    }\n    return ret;\n}", "{\n    long n = 0;\n    foreach(j, w; enumerate(s))\n\
    \    {\n        if(j % 2 == 0 && 'A' <= w && w <= 'Z')\n            n++;\n   \
    \ }\n    return n;\n}", "{\n    long count = 0;\n    foreach(immutable c; s)\n\
    \    {\n        if (c.isUpper && 'AEIOU'.canFind(c) && c == 0)\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}", "{\n    long acc\
    \ = 0;\n    foreach(ind, ch; s) \n    {\n        if(ind % 2 == 0 && ch >= 'A'\
    \ && ch <= 'Z')\n            acc++;\n    }\n    return acc;\n}", "{\n    // TODO\n\
    \    long count=0;\n    foreach(int i;0..s.length)\n    {\n        if((i%2==0)&&(toupper(s[i])=='A'||toupper(s[i])=='E'||toupper(s[i])=='I'||toupper(s[i])=='O'||toupper(s[i])=='U'))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    return count!((c) { return (c >= 'A' && c <= 'Z') && (s.indexOf(c) % 2 ==\
    \ 0); })(s);\n}", "{\n\tlong result = 0;\n\tlong s_size = s.length;\n\tfor (long\
    \ i = 0; i < s_size; i++) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tif (s[i] ==\
    \ 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') \n\t\t\t{\n\
    \t\t\t\tresult += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long\
    \ sum = 0;\n    foreach(i, c; s)\n    {\n        if (i%2 == 0 && c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            sum++;\n\
    \        }\n    }\n    return sum;\n}", "{\n    long num = 0;\n    foreach(i,\
    \ c; s)\n    {\n        if(i % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U'))\n        {\n            num += 1;\n        }\n    }\n\
    \    return num;\n}", "{\n    long count = 0;\n    foreach(i,c; s)\n    {\n  \
    \      if(i % 2 == 0 && c.isUpper && c.isVowel) count++;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    for (int i = 0; i < s.length; i += 2)\n    {\n\
    \        if (is_upper(s[i]))\n        {\n            if (is_vowel(s[i]))\n   \
    \         {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    auto b = s.begin;\n    auto e = s.end;\n\
    \    for (auto i = b; i < e; i+=2)\n    {\n        switch(*i)\n        {\n   \
    \         case 'A':\n            case 'E':\n            case 'I':\n          \
    \  case 'O':\n            case 'U':\n                result++;\n             \
    \   break;\n        }\n    }\n    return result;\n}", "{\n    long count = 0;\n\
    \    for (long i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && s[i]\
    \ == toupper(s[i]))\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n ", "{\n    long even_upper = 0;\n    foreach(i,c;iota(s.length))\n\
    \    {\n        if(isupper(s[i]) && (i%2)==0)\n        {\n            even_upper++;\n\
    \        }\n    }\n    return even_upper;\n}\n/*\n    Bonus Question:\n    Can\
    \ you make this code shorter without using for or foreach loops?\n*/\nlong count_upper_bonus(string\
    \ s)\n{\n    long even_upper = 0;\n    foreach(i,c;iota(s.length))\n    {\n  \
    \      if(isupper(s[i]) && (i%2)==0)\n        {\n            even_upper++;\n \
    \       }\n    }\n    return even_upper;\n}\n/*"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
