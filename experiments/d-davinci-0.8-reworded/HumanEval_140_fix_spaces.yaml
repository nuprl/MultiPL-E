name: HumanEval_140_fix_spaces
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace\
  \ all spaces in it with underscores, \n    and if a string has more than 2 consecutive\
  \ spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\"\
  \ Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\
  \n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\"\
  \ Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n"
tests: "unittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"\
  Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
  );\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
  );\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"\
  \   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}"
completions: ["{ \n    text = text.strip();\n    text = text.replace(\" \", \"_\"\
    );\n    text = text.replace(\"__\", \"_\");\n    text = text.replace(\"___\",\
    \ \"-\");\n    return text;\n}\n/*\n    Return an array containing indices of\
    \ vowels in given text\n    \n    >>> get_vowels_indices(\"Example\")\n    [1,\
    \ 4, 5]\n    >>> get_vowels_indices(\"Hello Word\")\n    [1, 2, 4, 5, 8]\n*/",
  "{\n    /* Implementation here */\n    return replace(text,\" \",\"_\");\n}\nfix_spaces(\"\
    \ Example\")\nfix_spaces(\" Example 1\")\nfix_spaces(\" Example 2\")\nfix_spaces(\"\
    \ Example 3\")\n \nstring fix_spaces(string text) \n{\n    /* Implementation here\
    \ */\n    return replace(text,\" \",\"_\");\n}\nfix_spaces(\" Example\")\nfix_spaces(\"\
    \ Example 1\")\nfix_spaces(\" Example 2\")\nfix_spaces(\" Example 3\")", "{\n\
    \    string tmp = text.strip();\n    return replace(tmp, \" \", \"_\").replace(\"\
    __\", \"-\");\n}", "{\n    string result;\n    bool space = false;\n    bool last_space\
    \ = false;\n    foreach(char c; text)\n    {\n        switch(c)\n        {\n \
    \           case ' ':\n                space = true;\n                if(last_space)\n\
    \                {\n                    result ~= '-';\n                    space\
    \ = false;\n                }\n                break;\n            default:\n\
    \                if(space)\n                {\n                    result ~= '_';\n\
    \                    space = false;\n                }\n                result\
    \ ~= c;\n                break;\n        }\n        last_space = space;\n    }\n\
    \    return result;\n}", "{\n    import std.algorithm : each, map, filter, zip;\n\
    \    import std.format : format;\n    import std.array : array;\n    import std.math\
    \ : min;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.uni : isSpace;\n    import std.string : stripLeft;\n    import\
    \ std.stdio : writeln;\n    import std.algorithm : cartesianProduct;\n    import\
    \ std.algorithm : replace;\n    import std.ascii : toLower;\n    import std.range\
    \ : chunks;\n    import std.range : enumerate;\n    import std.range : zip;\n\
    \    import std.range : chain;\n    import std.range : empty;\n    import std.range\
    \ : join;\n    import std.range : cycled;\n    import std.range : takeExactly;\n\
    \    import std.range : retro;\n    import std.array : replicate;\n    import\
    \ std.functional : unaryFun;\n    import std.range : only;\n    import std.algorithm\
    \ : uniq;\n    import std.algorithm : dropOne;\n    import std.math : sqrt;\n\
    \    import std.meta : AliasSeq;\n    import std.typecons : Tuple;\n    import\
    \ std.math : max;\n    import std.range : iota;\n    import std.range : map;\n\
    \    import std.algorithm : count;\n    import std.algorithm : sort;\n    import\
    \ std.algorithm : filter;\n    import std.algorithm : minElement;\n    import\
    \ std.algorithm : maxElement;\n    import std.typecons : tuple;\n    import std.ascii\
    \ : isAlpha;\n    import std.conv : to;\n    import std.string : replace;\n  \
    \  import std.traits : isIntegral;\n    import std.traits : isFloatingPoint;\n\
    \    import std.traits : isUnsigned;\n    import std.traits : isSigned;\n    import\
    \ std.traits : isSomeChar;\n    import std.typecons : tuple;\n    import std.conv\
    \ : to;\n    import std.string : toStringz;\n   ", "{\n    import std.range;\n\
    \    import std.algorithm;\n    return text.strip()\n        .replace(\" \", \"\
    _\")\n        .replace(\"  \", \"-\")\n        .replace(\"--\", \"-\");\n}", "{\n\
    \    bool is_there_any_space = false;\n    bool is_there_any_not_empty_space =\
    \ false;\n    foreach(ch; text)\n    {\n        if(ch == ' ')\n        {\n   \
    \         is_there_any_space = true;\n            if(is_there_any_not_empty_space)\n\
    \            {\n                return '_' ~ text;\n            }\n        }\n\
    \        else\n        {\n            is_there_any_not_empty_space = true;\n \
    \       }\n    }\n    if(is_there_any_space)\n    {\n        if(is_there_any_not_empty_space)\n\
    \        {\n            return '_' ~ text;\n        }\n        else\n        {\n\
    \            return text;\n        }\n    }\n    else\n    {\n        return text;\n\
    \    }\n}", "{\n    import std.algorithm;\n    auto result = text.replace(' ',\
    \ '_');\n    bool isSpaces = false;\n    uint count = 0;\n    foreach(i, ch; result)\
    \ {\n        if(ch == '_') {\n            isSpaces = true;\n            count++;\n\
    \        } else {\n            if(isSpaces && count > 2) {\n                result\
    \ = result.replace(\"____\", \"-\");\n            }\n            isSpaces = false;\n\
    \            count = 0;\n        }\n    }\n    return result;\n}", "{\n\tsize_t\
    \ pos = text.find_first_not_of(\" \");\n\tif (pos == string.npos) \n\t{\n\t\t\
    return \"\";\n\t}\n\telse \n\t{\n\t\ttext = text.substr(pos);\n\t}\n\t\n\tstring\
    \ result = text.replace(\" \", \"_\");\n\t\n\tint space_count = 0;\n\tfor (size_t\
    \ i = 0; i < result.length; i++) \n\t{\n\t\tif (result[i] == '_') \n\t\t{\n\t\t\
    \tspace_count++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tspace_count = 0;\n\t\t}\n\t\t\
    \n\t\tif (space_count > 2) \n\t\t{\n\t\t\tresult[i] = '-';\n\t\t}\n\t}\n\t\n\t\
    return result;\n}", "{\n    bool first = true;\n    bool two = false;\n    text\
    \ = text.replace(\" \", \"_\");\n    for (int i = 0; i < text.length; i++)\n \
    \   {\n        if (text[i] == '_')\n        {\n            if (first)\n      \
    \      {\n                first = false;\n                two = true;\n      \
    \      }\n            else if (two)\n            {\n                text[i] =\
    \ '-';\n                two = false;\n            }\n            else\n      \
    \      {\n                two = true;\n            }\n        }\n        else\n\
    \        {\n            first = true;\n            two = false;\n        }\n \
    \   }\n    return text;\n}", "{\n    auto res = text.split();\n    if (res.empty)\n\
    \        return text;\n    if (res.length == 1)\n        return res[0];\n    foreach\
    \ (index, element; res)\n    {\n        if (index == 0)\n            res[index]\
    \ = element.strip();\n        else\n            res[index] = res[index].strip().replace('\
    \ ', '_');\n    }\n    return res.join(res.length > 2 ? \"-\" : \"_\");\n}", "{\n\
    \    // Check if we have at least two spaces\n    auto count = text.count(' ');\n\
    \    if (count < 2) {\n        return text.replace(' ', '_');\n    }\n    else\
    \ {\n        return text.replace(' ', '-');\n    }\n}", "{\n    string result;\n\
    \    enum char[] chars = text.dup;\n    foreach(immutable char c; chars)\n   \
    \ {\n        result ~= c.isspace ? \n            ((result.back == '_' || result.back\
    \ == '-') ? \n            '-' : '_') : c;\n    }\n    return result;\n}", "{ \n\
    \  import std.string;\n  auto char_iterator = text.byUTF;\n  while (char_iterator.next)\
    \ {\n    ubyte current = char_iterator.curr;\n    if (current == ' ') {\n    \
    \  char_iterator.next;\n      ubyte next = char_iterator.curr;\n      if (next\
    \ == ' ') {\n        char_iterator.insert('-');\n      } else {\n        char_iterator.insert('_');\n\
    \      }\n    }\n  }\n  return text;\n}", "{\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.algorithm;\n    import std.typecons;\n\
    \    import std.format;\n    import std.stdio;\n    import std.string;\n    import\
    \ std.typecons;\n    import std.utf;\n    import std.array;\n    import std.traits;\n\
    \    import std.math;\n    import std.typecons;\n    int i = 0;\n    int j = 0;\n\
    \    int n = text.length;\n    Tuple!(string, string) t;\n    string result =\
    \ text;\n    foreach(ch; text)\n    {\n        i++;\n        if (ch == ' ')\n\
    \        {\n            j++;\n            if (j >= 2)\n            {\n       \
    \         t = text.split(ch);\n                result = t[0] ~ \"_\" ~ t[1];\n\
    \            }\n        }\n        else\n        {\n            j = 0;\n     \
    \   }\n    }\n    return result;\n}", "{\n    enum underscores = '_';\n    enum\
    \ dash = '-';\n    enum space = ' ';\n    enum max_spaces = 2;\n    if (text.empty())\
    \ return text;\n    size_t slen = text.length;\n    size_t index = 0;\n    if\
    \ (text[0] == space) \n    {\n        // find first non-space \n        while\
    \ (index < slen && text[index] == space) index++;\n        if (index == slen)\
    \ return text;\n        text[0] = text[index];\n        text[index] = space;\n\
    \        index++;\n    }\n    size_t prev_index = index;\n    // remove multiple\
    \ spaces and replace with _\n    while (index < slen) \n    {\n        if (text[index]\
    \ == space) \n        {\n            size_t space_count = 0;\n            while\
    \ (index < slen && text[index] == space) \n            {\n                index++;\n\
    \                space_count++;\n            }\n            size_t i = index -\
    \ 1;\n            size_t j = prev_index + 1;\n            while (i >= prev_index)\
    \ \n            {\n                text[j] = text[i];\n                j++;\n\
    \                i--;\n            }\n            if (space_count > max_spaces)\
    \ \n            {\n                text[prev_index] = dash;\n                prev_index++;\n\
    \            } \n            else if (space_count > 1) \n            {\n     \
    \           text[prev_index] = underscores;\n                prev_index++;\n \
    \           }\n            else \n            {\n                text[prev_index]\
    \ = space;\n                prev_index++;\n            }\n        } \n       \
    \ else \n        {\n            text[prev_index] = text[index];\n            prev_index++;\n\
    \            index++;\n        }\n    }\n    if (prev_index == 0) \n    {\n  \
    \      text[prev_index] = text[index];\n        prev_index++;\n    }\n    text.length\
    \ = prev_index;\n    return text;\n}", "{\n    string separator;\n    string temp\
    \ = \"\";\n    int count = 0;\n    bool flag = false;\n    foreach(it; text) \n\
    \    {\n        if(it == ' ') \n        {\n            count++;\n            separator\
    \ = count > 2 ? \"-\" : \"_\";\n            if(count == 1) \n            {\n \
    \               continue;\n            }\n            if(flag) \n            {\n\
    \                temp += separator;\n            }\n            flag = true;\n\
    \        }\n        else \n        {\n            count = 0;\n            flag\
    \ = false;\n            temp += it;\n        }\n    }\n    return temp;\n}\n/*",
  "{\n    return text;\n}\n/*", "{\n    import std.algorithm;\n    import std.range;\n\
    \    import std.algorithm.comparison;\n    import std.conv;\n    import std.array;\n\
    \    import std.range;\n    import std.regex;\n    import std.ascii;\n    import\
    \ std.algorithm.iteration;\n    import std.functional;\n    import std.string;\n\
    \    import std.datetime;\n    import std.typecons;\n    return text\n       \
    \ .replace(\" \",\"_\")\n        .replace(\"__\",\"_\")\n        .replace(\"___\"\
    ,\"-\")\n        .replace(\"____\",\"-\")\n        .replace(\"_____\",\"-\")\n\
    \        .replace(\"______\",\"-\")\n        .replace(\"_______\",\"-\")\n   \
    \     .replace(\"________\",\"-\")\n        .replace(\"_________\",\"-\")\n  \
    \      .replace(\"__________\",\"-\")\n        .replace(\"___________\",\"-\"\
    )\n        .replace(\"____________\",\"-\")\n        .replace(\"_____________\"\
    ,\"-\")\n        .replace(\"______________\",\"-\")\n        .replace(\"_______________\"\
    ,\"-\")\n        .replace(\"________________\",\"-\")\n        .replace(\"_________________\"\
    ,\"-\")\n        .replace(\"__________________\",\"-\")\n        .replace(\"___________________\"\
    ,\"-\")\n        .replace(\"____________________\",\"-\")\n        .replace(\"\
    _____________________\",\"-\")\n        .replace(\"______________________\",\"\
    -\")\n        .replace(\"_______________________\",\"-\")\n        .replace(\"\
    ________________________\",\"-\")\n        .replace(\"_________________________\"\
    ,\"-\")\n        .replace(\"__________________________\",\"-\")\n        .replace(\"\
    ___________________________\",\"-\")\n        .replace(\"____________________________\"\
    ,\"-\")\n        .replace(\"_____________________________\",\"-\")\n        .replace(\"\
    ______________________________\",\"-\")\n        .replace(\"_______________________________\"\
    ,\"-\")\n        .replace(\"________________________________\",\"-\")\n      \
    \  .replace(\"_________________________________\",\"-\")\n        .replace(\"\
    __________________________________\",\"-\")\n        .replace(\"___________________________________\"\
    ,\"-\")\n        .replace(\"____________________________________\",\"-\")\n  \
    \      .replace(\"_____________________________________\",\"-\")\n        .replace(\"\
    ______________________________________\",\"-\")\n        .replace(\"_______________________________________\"\
    ,\"-\")\n        .replace(\"________________________________________\",\"-\")\n\
    \        .replace(\"_________________________________________\",\"-\")", "{\n\
    \    import std.algorithm;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
