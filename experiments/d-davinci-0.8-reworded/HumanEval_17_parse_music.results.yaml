name: HumanEval_17_parse_music
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n\tlong[] beats = [];\n\tmusic_string = music_string.stripWhite();\n\
    \tforeach(c; music_string)\n\t{\n\t\tif(c == 'o')\n\t\t{\n\t\t\tbeats ~= 4;\n\t\
    \t}\n\t\telse if(c == '|')\n\t\t{\n\t\t\tif(beats[$-1] == 4)\n\t\t\t{\n\t\t\t\t\
    beats[$-1] = 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbeats ~= 1;\n\t\t\t}\n\t\
    \t}\n\t\telse if(c == '.')\n\t\t{\n\t\t\tbeats ~= 1;\n\t\t}\n\t}\n\treturn beats;\n\
    }\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm1sjyyw8.d(20): Error: no property `stripWhite` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm1sjyyw8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            result ~= 4;\n        }\n\
    \        else if(c == '|')\n        {\n            result[$-1] /= 2;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp5d6ohz4q.d(28): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428576]\\n??:? long[] tmp5d6ohz4q.parse_music(immutable(char)[])\
    \ [0x427ed9]\\n??:? void tmp5d6ohz4q.__unittest_L33_C1() [0x427ff7]\\n??:? void\
    \ tmp5d6ohz4q.__modtest() [0x428248]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdc6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd9d]\\n??:? runModuleUnitTests [0x42cd09]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428988]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42890f]\\n??:? _d_run_main [0x42887a]\\n??:? main [0x42825b]\\\
    n??:? __libc_start_main [0xbc06554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    return music_string.split(\" \").map!((x) => x.length()\
    \ == 1 ? 4 : 2).array();\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu6kqr7nn.d(19): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6kqr7nn.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    auto beats = [];\n    import std.algorithm : map;\n \
    \   music_string.splitter.map!(a => {\n        switch(a) {\n            case \"\
    o\" : beats ~= 4; break;\n            case \"o|\" : beats ~= 2; break;\n     \
    \       case \".|\" : beats ~= 1; break;\n        }\n    }).joiner;\n    return\
    \ beats;\n}\n/*\n    A parity bit is a bit that is added to a group of source\
    \ bits to ensure that the number of set bits \n    (i.e., bits with value of one)\
    \ in the result is even or odd. It is a very simple scheme that can be \n    used\
    \ to detect single or any other odd number (i.e., three, five, etc.) of errors\
    \ in the output. \n    Parity bits are used as the simplest form of error detecting\
    \ code.\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd_5r_1ot.d(30): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd_5r_1ot.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    /*\n    string[] notes_split = music_string.split(\"\
    \ \");\n    long[] result = new long[notes_split.length];\n    foreach(i, item;\
    \ zip(result, notes_split))\n    {\n        if(item[1] == \"o\")\n           \
    \ item[0] = 4;\n        else if(item[1] == \"o|\")\n            item[0] = 2;\n\
    \        else if(item[1] == \".|\")\n            item[0] = 1;\n    }\n    return\
    \ result;\n    */\n    return map!(item => \n    {\n        if(item == \"o\")\n\
    \            return 4;\n        else if(item == \"o|\")\n            return 2;\n\
    \        else if(item == \".|\")\n            return 1;\n    })(music_string.split(\"\
    \ \"));\n}\n/*\n >>> find_pockets([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6],\
    \ [5, 6, 7], [6, 7, 8], [7, 8, 9], [8, 9, 1], [9, 1, 2]])\n    [0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8]\n*/\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoj0tovt0.d(33): Error: template instance `map!((item) => ()\\\
    n{\\nif (item == \"o\")\\nreturn 4;\\nelse if (item == \"o|\")\\nreturn 2;\\nelse\
    \ if (item == \".|\")\\nreturn 1;\\n}\\n)` template `map` is not defined\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoj0tovt0.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n  long[] beats;\n  beats.length = 0;\n  while(music_string.length\
    \ != 0)\n  {\n    string current_symbol = music_string[0..2];\n    music_string\
    \ = music_string[2..$];\n    switch(current_symbol)\n    {\n      case \"o \"\
    :\n        beats ~= 4;\n        break;\n      case \"o|\":\n        beats ~= 2;\n\
    \        break;\n      case \".|\":\n        beats ~= 1;\n        break;\n   \
    \   default:\n        assert(false);\n    }\n  }\n  return beats;\n}\n// -------------------------\n\
    // - Join(T,T):T\n// -------------------------\n// -------------------------\n\
    // - Join(T,T):T\n// -------------------------\n// ---------------------\n// -\
    \ Join(T,T):T\n// ---------------------\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp3ab9zxro.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4289aa]\\n??:? long[] tmp3ab9zxro.parse_music(immutable(char)[])\
    \ [0x427fff]\\n??:? void tmp3ab9zxro.__unittest_L51_C1() [0x428196]\\n??:? void\
    \ tmp3ab9zxro.__modtest() [0x4285c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42e48b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42d31e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431d1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4321cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431ca9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42d2f5]\\n??:? runModuleUnitTests [0x42e261]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428e10]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d97]\\n??:? _d_run_main [0x428d02]\\n??:? main [0x4285d7]\\\
    n??:? __libc_start_main [0xb382a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    immutable triples = zip(music_string, music_string[1\
    \ .. $], music_string[2 .. $]);\n    return to!(long[])(map!(tuple[string, string,\
    \ string] => long)(triples, (t) =>\n    {\n        switch(t) \n        {\n   \
    \         case tuple(\"o\", \" \", \" \"):\n                return 4L;\n     \
    \       case tuple(\"o\", \"|\", \" \"):\n                return 2L;\n       \
    \     case tuple(\".\", \"|\", \" \"):\n                return 1L;\n         \
    \   default:\n                assert(false);\n        }\n    }));\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_v_lz9b3.d(20): Error: found `=>` when expecting `)` following\
    \ template argument list\\n/tmp/tmp_v_lz9b3.d(20): Error: found `long` when expecting\
    \ `,`\\n/tmp/tmp_v_lz9b3.d(33): Error: found `)` when expecting `;` following\
    \ `return` statement\\n/tmp/tmp_v_lz9b3.d(33): Deprecation: use `{ }` for an empty\
    \ statement, not `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_v_lz9b3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    string[] music_pieces = split(music_string);\n\
    \    foreach(piece; music_pieces)\n    {\n        switch(piece)\n        {\n \
    \           case \"o\":\n                result ~= 4;\n                break;\n\
    \            case \"o|\":\n                result ~= 2;\n                break;\n\
    \            case \".|\":\n                result ~= 1;\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl5kkjna5.d(20): Error: undefined identifier `split`\\n/tmp/tmpl5kkjna5.d(23):\
    \ Error: `switch` statement without a `default`; use `final switch` or add `default:\
    \ assert(0);` or add `default: break;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpl5kkjna5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n\tlong[] array;\n\tint i = 0;\n\tint count = 0;\n\twhile(i\
    \ < music_string.length)\n\t{\n\t\tif(music_string[i] == 'o')\n\t\t{\n\t\t\tif(music_string[i+1]\
    \ == ' ')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse if(music_string[i+1]\
    \ == '|')\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\ti += 3;\n\t\t\t}\n\t\t}\n\t\telse\
    \ if(music_string[i] == '.')\n\t\t{\n\t\t\tif(music_string[i+1] == '|')\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t\ti += 3;\n\t\t\t}\n\t\t}\n\t}\n\tarray.length = count;\n\
    \ti = 0;\n\tint k = 0;\n\twhile(i < music_string.length)\n\t{\n\t\tif(music_string[i]\
    \ == 'o')\n\t\t{\n\t\t\tif(music_string[i+1] == ' ')\n\t\t\t{\n\t\t\t\tarray[k]\
    \ = 4;\n\t\t\t\tk++;\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse if(music_string[i+1]\
    \ == '|')\n\t\t\t{\n\t\t\t\tarray[k] = 2;\n\t\t\t\tk++;\n\t\t\t\ti += 3;\n\t\t\
    \t}\n\t\t}\n\t\telse if(music_string[i] == '.')\n\t\t{\n\t\t\tif(music_string[i+1]\
    \ == '|')\n\t\t\t{\n\t\t\t\tarray[k] = 1;\n\t\t\t\tk++;\n\t\t\t\ti += 3;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn array;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpb_3yzruy.d(26): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4287e6]\\n??:? long[] tmpb_3yzruy.parse_music(immutable(char)[])\
    \ [0x427eaa]\\n??:? void tmpb_3yzruy.__unittest_L78_C1() [0x4281f2]\\n??:? void\
    \ tmpb_3yzruy.__modtest() [0x4284b8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d887]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c71a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x431b59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x432008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431ae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c6f1]\\n??:? runModuleUnitTests [0x42d65d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428bf8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428b7f]\\n??:? _d_run_main [0x428aea]\\n??:? main [0x4284cb]\\\
    n??:? __libc_start_main [0x5834554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{ \n  import std.algorithm.iteration : map;\n  return map!(a\
    \ => a=='o' ? 4 : a=='o|' ? 2 : 1)(music_string.split(\" \"));\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo7_093qf.d(20): Error: unterminated character constant\\n/tmp/tmpo7_093qf.d(20):\
    \ Error: `a == \\'?\\'` must be parenthesized when next to operator `|`\\n/tmp/tmpo7_093qf.d(20):\
    \ Error: unterminated character constant\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpo7_093qf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    int start = 0;\n    for (int i =\
    \ 0; i < music_string.length; i++) \n    {\n        if (music_string[i] == ' ')\
    \ \n        {\n            result ~= (i - start == 1) ? 1 : 2;\n            start\
    \ = i + 1;\n        } \n        else if (music_string[i] == 'o') \n        {\n\
    \            result ~= 4;\n            start = i + 2;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi0y652uh.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpi0y652uh.__unittest_L36_C1()\
    \ [0x42801b]\\n??:? void tmpi0y652uh.__modtest() [0x428280]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bdfe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430851]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d00]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307dd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bdd5]\\n??:? runModuleUnitTests [0x42cd41]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x428293]\\\
    n??:? __libc_start_main [0x3db89554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    \n    long[] beats;\n    music_string.split(\" \").map!((a)\
    \ =>\n    {\n        if(a==\"o\")\n            return 4L;\n        else if(a==\"\
    o|\")\n            return 2L;\n        else if(a==\".|\")\n            return\
    \ 1L;\n    }).array(beats);\n    return beats;\n    \n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdedr05t5.d(21): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdedr05t5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    return music_string.split(' ').map!(s =>\n    {\n   \
    \     switch (s)\n        {\n            case \"o\": return 4L;\n            case\
    \ \"o|\": return 2L;\n            case \".|\": return 1L;\n            default:\
    \ return 0L;\n        }\n    }).array;\n}\nunittest\n{\n    alias candidate =\
    \ parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw3fk1dxq.d(19): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3fk1dxq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    string[] music_arr = split(music_string);\n\
    \    foreach(string note; music_arr)\n    {\n        int dots = 0;\n        while(note.length\
    \ > 1 && note[$-1] == '.')\n        {\n            ++dots;\n            note =\
    \ note[0..$-1];\n        }\n        switch(note)\n        {\n            case\
    \ \"o\":\n                result ~= 4L - dots;\n                break;\n     \
    \       case \"o|\":\n                result ~= 2L - dots;\n                break;\n\
    \            case \".|\":\n                result ~= 1L - dots;\n            \
    \    break;\n        }\n    }\n    return result;\n}\n// Solution 3\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(note; music_string.replace(\"\
    \ \", \"\"))\n    {\n        int dots = 0;\n        while(note == '.')\n     \
    \   {\n            ++dots;\n            note = music_string[++$];\n        }\n\
    \        switch(note)\n        {\n            case 'o':\n                result\
    \ ~= 4L - dots;\n                break;\n            case '|':\n             \
    \   result ~= 2L - dots;\n                break;\n        }\n    }\n    return\
    \ result;\n}\n// Solution 4\nlong[] parse_music(string music_string) \n{\n   \
    \ return music_string.replace(\" \", \"\").replace(\".\", \"\").replace(\"o\"\
    , \"4\").replace(\"|\", \"2\").map!(a => a.to!long - '0'.to!long).array;\n}\n\
    // Solution 5\nlong[] parse_music(string music_string) \n{\n    long[] result;\n\
    \    foreach(char note; music_string.replace(\" \", \"\"))\n    {\n        int\
    \ dots = 0;\n        while(note == '.')\n        {\n            ++dots;\n    \
    \        note = music_string[++$];\n        }\n        switch(note)\n        {\n\
    \            case 'o':\n                result ~= 4L - dots;\n               \
    \ break;\n            case '|':\n                result ~=\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa8_rkkou.d(92): Error: expression expected, not `unittest`\\\
    n/tmp/tmpa8_rkkou.d(93): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmpa8_rkkou.d(102): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpa8_rkkou.d(102): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpa8_rkkou.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    int i = 0;\n    foreach(r; music_string)\n\
    \    {\n        if(r == 'o')\n        {\n            if(result.length == 0)\n\
    \            {\n                if(i == music_string.length-1)\n             \
    \   {\n                    result ~= 4;\n                }\n                else\n\
    \                {\n                    result ~= 1;\n                }\n    \
    \        }\n            else\n            {\n                if(i == music_string.length-1)\n\
    \                {\n                    result[$-1] += 4;\n                }\n\
    \                else\n                {\n                    result[$-1] += 1;\n\
    \                }\n            }\n        }\n        else if(r == 'o' && music_string[i+1]\
    \ == '|')\n        {\n            if(result.length == 0)\n            {\n    \
    \            result ~= 2;\n            }\n            else\n            {\n  \
    \              result[$-1] += 2;\n            }\n            i++;\n        }\n\
    \        else if(r == '.' && music_string[i+1] == '|')\n        {\n          \
    \  if(result.length == 0)\n            {\n                result ~= 1;\n     \
    \       }\n            else\n            {\n                result[$-1] += 1;\n\
    \            }\n            i++;\n        }\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8t_z56xh.d(81): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428705]\\n??:? void tmp8t_z56xh.__unittest_L76_C1()\
    \ [0x42821f]\\n??:? void tmp8t_z56xh.__modtest() [0x428484]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d173]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c006]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f08]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bfdd]\\n??:? runModuleUnitTests [0x42cf49]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428bc8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428b4f]\\n??:? _d_run_main [0x428aba]\\n??:? main [0x428497]\\\
    n??:? __libc_start_main [0x3cc7a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    auto result = [];\n    foreach(c; music_string)\n   \
    \ {\n        if(c == 'o')\n        {\n            result ~= 4;\n        }\n  \
    \      else if(c == '|')\n        {\n            result[$-1] = int(result[$-1]\
    \ / 2);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjiq6edn3.d(24): Error: cannot append type `int` to type `void[]`\\\
    n/tmp/tmpjiq6edn3.d(28): Error: void has no value\\n/tmp/tmpjiq6edn3.d(28): Error:\
    \ incompatible types for `(result[__dollar - 1LU]) / (2)`: `void` and `int`\\\
    n/tmp/tmpjiq6edn3.d(31): Error: cannot implicitly convert expression `result`\
    \ of type `void[]` to `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpjiq6edn3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    import std.range;\n    import std.stdio;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n\
    \    import std.typecons;\n    import std.range;\n    import std.container;\n\
    \    import std.functional;\n    import std.math;\n    import std.regex;\n   \
    \ //Regex to extract matches of o's and o|'s\n    auto re = regex(`o|o\\|`);\n\
    \    long[] parsed;\n    //Keep track of all matches \n    auto matches = re.matchAll(music_string);\n\
    \    //Iterate through the matches and append to parsed array\n    foreach(match;\
    \ matches)\n    {\n        parsed ~= match[0].output.length;\n    }\n    return\
    \ parsed;\n}\n/*\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n   \
    \ [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n*/\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpndsycg7h.d(35): Error: template `std.regex.matchAll` cannot deduce\
    \ function from argument types `!()(Regex!char, string)`, candidates are:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/regex/package.d(975):\
    \        `std.regex.matchAll(R, RegEx)(R input, RegEx re) if (isSomeString!R &&\
    \ isRegexFor!(RegEx, R))`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/regex/package.d(982):\
    \        `std.regex.matchAll(R, String)(R input, String re) if (isSomeString!R\
    \ && isSomeString!String)`\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/regex/package.d(989):\
    \        `std.regex.matchAll(R, String)(R input, String[] re...) if (isSomeString!R\
    \ && isSomeString!String)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpndsycg7h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    return split(music_string).map!(s => s.length).array;\n\
    }\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcau696l7.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcau696l7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n\tauto music_arr = music_string.split;\n\tint music_len =\
    \ music_arr.length;\n\tlong[] result = new long[music_len];\n\tfor (int i = 0;\
    \ i < music_len; i++)\n\t{\n\t\tif (music_arr[i] == \"o\")\n\t\t{\n\t\t\tresult[i]\
    \ = 4;\n\t\t}\n\t\telse if (music_arr[i] == \"o|\")\n\t\t{\n\t\t\tresult[i] =\
    \ 2;\n\t\t}\n\t\telse if (music_arr[i] == \".|\")\n\t\t{\n\t\t\tresult[i] = 1;\n\
    \t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_o1e1xv0.d(19): Error: no property `split` for type `string`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_o1e1xv0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    auto notes = split(music_string, \" \");\n    return\
    \ notes.map!(x => {\n        switch (x[0]) {\n            case 'o': return x.length\
    \ == 1 ? 4L : 2L;\n            case '.': return 1L;\n            default: assert(false);\n\
    \        }\n    }).array;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3ylbstqc.d(19): Error: undefined identifier `split`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ylbstqc.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
