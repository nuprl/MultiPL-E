name: HumanEval_122_add_elements
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    auto arr2 = arr[0..$k];\n\
    unittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv7qqwiea.d(20): Error: found `k` when expecting `,`\\n/tmp/tmpv7qqwiea.d(21):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpv7qqwiea.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \nin\n{\n    assert(arr.length\
    \ != 0);\n    assert(1 <= arr.length && arr.length <= 100);\n    assert(1 <= k\
    \ && k <= arr.length);\n    long sum = 0L;\n    long i = 0L;\n    for (; i < k;\
    \ i += 1L)\n    {\n        if (arr[i] <= 99L)\n        {\n            sum += arr[i];\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add_elements;\n\
    \n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n\
    \    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L,\
    \ 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L,\
    \ 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L],\
    \ 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc2xi3r7r.d(18): Error: function `tmpc2xi3r7r.add_elements` `in`\
    \ and `out` contracts can only appear without a body when they are virtual interface\
    \ functions or abstract\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpc2xi3r7r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long result = 0L;\n\
    \    /* \n        Do your magic here!\n    */\n    return result;\n}\nunittest\n\
    {\n    alias candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L,\
    \ 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L,\
    \ 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L,\
    \ 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1cxofzbg.d(30): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281ad]\\n??:? void tmp1cxofzbg.__unittest_L26_C1()\
    \ [0x427d78]\\n??:? void tmp1cxofzbg.__modtest() [0x427f30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c197]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b02a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301bd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43066c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430149]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b001]\\n??:? runModuleUnitTests [0x42bf6d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428583]\\n??:? _d_run_main [0x4284ee]\\n??:? main [0x427f43]\\\
    n??:? __libc_start_main [0x64c2f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{ \n    const int num_to_add\
    \ = 2;\n    long sum = 0;\n    for (long i = 0; i < k; i++)\n    {\n        int\
    \ num_digits = 0;\n        long current_num = arr[i];\n        while (current_num\
    \ > 0)\n        {\n            current_num /= 10;\n            num_digits++;\n\
    \        }\n        if (num_digits <= num_to_add)\n        {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    auto len = (int)arr.length;\n\
    \    if (len > 100 || len < 1)\n        return 0;\n    if (k > len || k < 1)\n\
    \        return 0;\n    auto sum = 0L;\n    foreach (i, e; arr)\n    {\n     \
    \   if (i == k)\n            break;\n        if (e <= 99)\n            sum +=\
    \ e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add_elements;\n\
    \n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n\
    \    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L,\
    \ 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L,\
    \ 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L],\
    \ 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6lbumsnr.d(20): Error: C style cast illegal, use `cast(int)arr.length`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6lbumsnr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    // create an alias for\
    \ 2-byte unsigned integer\n    alias uint16 = uint;\n    // as long as k <= 0,\
    \ do not attempt to process\n    if (k <= 0) return 0;\n    // set the starting\
    \ sum to 0\n    long sum = 0;\n    // iterate over the first k elements\n    foreach\
    \ (i, element; arr[0 .. k]) \n    {\n        // if it's less than 10, add to the\
    \ sum\n        if (element < 10) sum += element;\n        // otherwise, if it's\
    \ less than 100 (i.e. is a 2-digit number)\n        else if (element < 100) \n\
    \        {\n            // if it's not divisible by 10 and the remainder is less\
    \ than 10, add to the sum\n            if (element % 10 != 0 && element % 10 <\
    \ 10) sum += element;\n        }\n    }\n    // return the sum\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpniafvdy7.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428265]\\n??:? void tmpniafvdy7.__unittest_L41_C1()\
    \ [0x427f10]\\n??:? void tmpniafvdy7.__modtest() [0x427fe4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b156]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430798]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430275]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b12d]\\n??:? runModuleUnitTests [0x42c099]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428728]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286af]\\n??:? _d_run_main [0x42861a]\\n??:? main [0x427ff7]\\\
    n??:? __libc_start_main [0x7049e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long result = 0L;\n\
    \    int k_int = to!int(k);\n    for (int i = 0; i < k_int; i++) \n    {\n   \
    \     if (arr[i] < 100L) \n        {\n            result += arr[i];\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = add_elements;\n\
    \n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n\
    \    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L,\
    \ 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L,\
    \ 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L],\
    \ 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe9v5ajde.d(21): Error: template instance `to!int` template `to`\
    \ is not defined, did you mean No?\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpe9v5ajde.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long total = 0L;\n \
    \   foreach(index, elem; arr[0..k]) \n    {\n        if (elem < 100L) \n     \
    \   {\n            total += elem;\n        }\n    }\n    return total;\n}\nunittest\n\
    {\n    alias candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L,\
    \ 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L,\
    \ 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L,\
    \ 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \nin \n{\n    import std.math\
    \ : max;\n    import std.typecons : tuple;\n    import std.range : take, enumerate;\n\
    \    import std.array : array;\n    import std.algorithm : count;\n    import\
    \ std.algorithm : map;\n    import std.conv : to;\n    import std.algorithm :\
    \ filter;\n    import std.algorithm : sum;\n    import std.range : retro;\n  \
    \  import std.typecons : tuple;\n    import std.conv : to;\n    import std.algorithm\
    \ : count;\n    import std.array : array;\n    import std.range : take;\n    import\
    \ std.range : retro;\n    import std.range : retro;\n    import std.range : take;\n\
    \    import std.algorithm : count;\n    import std.algorithm : sum;\n    import\
    \ std.range : retro;\n    import std.range : take;\n    import std.algorithm :\
    \ map;\n    import std.conv : to;\n    import std.range : take;\n    import std.range\
    \ : take;\n    import std.range : take;\n    import std.range : retro;\n    import\
    \ std.range : retro;\n    import std.algorithm : map;\n    import std.algorithm\
    \ : sum;\n    import std.algorithm : count;\n    import std.range : retro;\n \
    \   import std.range : take;\n    import std.algorithm : sum;\n    import std.algorithm\
    \ : count;\n    import std.algorithm : count;\n    import std.range : retro;\n\
    \    import std.range : take;\n    import std.range : retro;\n    import std.algorithm\
    \ : map;\n    import std.algorithm : count;\n    import std.range : retro;\n \
    \   import std.algorithm : count;\n    import std.range : retro;\n    import std.algorithm\
    \ : count;\n    import std.range : retro;\n    import std.range : take;\n    import\
    \ std.range : retro;\n    import std.range : take;\n    import std.algorithm :\
    \ map;\n    import std.range : retro;\n    import std.range : take;\n    import\
    \ std.range\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp886melk9.d(75): Error: `;` expected\\n/tmp/tmp886melk9.d(85):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp886melk9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ foreach(index, element; arr[0 .. (min(k, arr.length))]) {\n        if (element\
    \ < 100L) {\n            sum += element;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5fyffp1f.d(21): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5fyffp1f.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long total = 0L;\n \
    \   foreach(i; 0 .. k)\n    {\n        if(i >= arr.length) break;\n        if(arr[i]\
    \ > 99)\n        {\n            //split the number into two digits\n         \
    \   long[] digits = arr[i].digits(10);\n            long newElement = digits[0]\
    \ * 10 + digits[1];\n            total += newElement;\n        }\n        else\n\
    \        {\n            total += arr[i];\n        }\n    }\n    return total;\n\
    }\n//TESTS\nunittest\n{\n    assert(add_elements([111L, 21L, 3L, 4000L, 5L, 6L,\
    \ 7L, 8L, 9L], 4L) == 24L);\n    assert(add_elements([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L, 9L], 4L) == 20L);\n    assert(add_elements([11L, 22L, 33L, 44L, 55L,\
    \ 66L, 77L, 88L, 99L], 4L) == 110L);\n    assert(add_elements([111L, 222L, 333L,\
    \ 444L, 555L, 666L, 777L, 888L, 999L], 4L) == 444L);\n    assert(add_elements([],\
    \ 0L) == 0L);\n    assert(add_elements([3L, 21L, 111L, 11L, 22L, 33L, 44L, 55L,\
    \ 66L, 77L, 88L, 99L], 4L) == 47L);\n    assert(add_elements([3L, 21L, 111L, 11L,\
    \ 22L, 33L, 44L, 55L, 66L, 77L, 88L, 99L], 5L) == 57L);\n    assert(add_elements([3L,\
    \ 21L, 111L, 11L, 22L, 33L, 44L, 55L, 66L, 77L, 88L, 99L], 3L) == 37L);\n    assert(add_elements([3L,\
    \ 21L, 111L, 11L, 22L, 33L,\nunittest\n{\n    alias candidate = add_elements;\n\
    \n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n\
    \    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L,\
    \ 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L,\
    \ 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L],\
    \ 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3vbcqfza.d(50): Error: expression expected, not `unittest`\\\
    n/tmp/tmp3vbcqfza.d(51): Error: found `{` when expecting `,`\\n/tmp/tmp3vbcqfza.d(52):\
    \ Error: expression expected, not `alias`\\n/tmp/tmp3vbcqfza.d(52): Error: found\
    \ `candidate` when expecting `,`\\n/tmp/tmp3vbcqfza.d(52): Error: expression expected,\
    \ not `=`\\n/tmp/tmp3vbcqfza.d(52): Error: found `add_elements` when expecting\
    \ `,`\\n/tmp/tmp3vbcqfza.d(52): Error: expression expected, not `;`\\n/tmp/tmp3vbcqfza.d(54):\
    \ Error: found `assert` when expecting `,`\\n/tmp/tmp3vbcqfza.d(54): Error: found\
    \ `;` when expecting `,`\\n/tmp/tmp3vbcqfza.d(55): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp3vbcqfza.d(56): Error: found `;` when expecting `,`\\n/tmp/tmp3vbcqfza.d(57):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmp3vbcqfza.d(58): Error: found `;`\
    \ when expecting `,`\\n/tmp/tmp3vbcqfza.d(59): Error: expression expected, not\
    \ `}`\\n/tmp/tmp3vbcqfza.d(60): Error: found `void` when expecting `,`\\n/tmp/tmp3vbcqfza.d(60):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmp3vbcqfza.d(60): Error: expression\
    \ expected, not `}`\\n/tmp/tmp3vbcqfza.d(60): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmp3vbcqfza.d(49): Error: found `End of File` when expecting\
    \ `]`\\n/tmp/tmp3vbcqfza.d(60): Error: found `End of File` when expecting `,`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3vbcqfza.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    import std.array;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.typecons;\n\
    \    import std.conv;\n    import std.string;\n    import std.math;\n    import\
    \ std.traits;\n    static assert(arr.length >= 1);\n    static assert(k >= 1);\n\
    \    static assert(k <= arr.length);\n    return arr.take(k).filter!(x => x.to!string.length\
    \ <= 2).sum;\n}\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjjlyrlpt.d(28): Error: variable `arr` cannot be read at compile\
    \ time\\n/tmp/tmpjjlyrlpt.d(28):        while evaluating: `static assert(arr.length\
    \ >= 1LU)`\\n/tmp/tmpjjlyrlpt.d(29): Error: variable `k` cannot be read at compile\
    \ time\\n/tmp/tmpjjlyrlpt.d(29):        while evaluating: `static assert(k >=\
    \ 1L)`\\n/tmp/tmpjjlyrlpt.d(30): Error: variable `k` cannot be read at compile\
    \ time\\n/tmp/tmpjjlyrlpt.d(30):        while evaluating: `static assert(cast(ulong)k\
    \ <= arr.length)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjlyrlpt.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ long[] new_arr = [];\n    foreach(i; 0 .. k)\n    {\n        if(arr[i] >= 10L\
    \ && arr[i] <= 99L)\n        {\n            new_arr ~= arr[i];\n        }\n  \
    \  }\n    foreach(i; new_arr)\n    {\n        sum += i;\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L,\
    \ -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L,\
    \ 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp69ry436x.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42830d]\\n??:? void tmp69ry436x.__unittest_L35_C1()\
    \ [0x427ed4]\\n??:? void tmp69ry436x.__modtest() [0x42808c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cd57]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bbea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43063d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430aec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305c9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bbc1]\\n??:? runModuleUnitTests [0x42cb2d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287d0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428757]\\n??:? _d_run_main [0x4286c2]\\n??:? main [0x42809f]\\\
    n??:? __libc_start_main [0xf1666554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long r = 0L;\n    static\
    \ immutable size_t two = twoDigits;\n    static immutable size_t one = oneDigit;\n\
    \    for (int i = 0; i < k; i++)\n    {\n        auto x = arr[i];\n        if\
    \ (x >= 10L && x < 100L) r += x;\n        else if (x >= 1L && x < 10L) r += x;\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = add_elements;\n\n\
    \    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n\
    \    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L,\
    \ 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L,\
    \ 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L],\
    \ 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcpkdq9cy.d(21): Error: undefined identifier `twoDigits`\\n/tmp/tmpcpkdq9cy.d(22):\
    \ Error: undefined identifier `oneDigit`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpcpkdq9cy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long sum = 0L;\n   \
    \ foreach(idx, elem; arr[0 .. k])\n    {\n        if (elem < 100L)\n        {\n\
    \            sum += elem;\n        }\n    }\n    return sum;\n}\nunittest\n{\n\
    \    alias candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L,\
    \ 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L,\
    \ 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L,\
    \ 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L,\
    \ 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    int i = 0;\n    long\
    \ sum = 0;\n    while(i < k && i < arr.length)\n    {\n        if(abs(arr[i])\
    \ < 100)\n        {\n            sum += arr[i];\n        }\n        i++;\n   \
    \ }\n    return sum;\n}\nunittest\n{\n    alias candidate = add_elements;\n\n\
    \    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n\
    \    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L,\
    \ 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L,\
    \ 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L],\
    \ 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long result = 0L;\n\
    \    foreach(idx, elem; arr)\n    {\n        if(elem < 10)\n        {\n      \
    \      result += elem;\n        } else if(elem < 100)\n        {\n           \
    \ result += elem;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L,\
    \ 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L,\
    \ 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L],\
    \ 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmqwx_rty.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42822d]\\n??:? void tmpmqwx_rty.__unittest_L33_C1()\
    \ [0x427df4]\\n??:? void tmpmqwx_rty.__modtest() [0x427fac]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c217]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0aa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43023d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4306ec]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301c9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b081]\\n??:? runModuleUnitTests [0x42bfed]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42867c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428603]\\n??:? _d_run_main [0x42856e]\\n??:? main [0x427fbf]\\\
    n??:? __libc_start_main [0xe7dd6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    alias tuple = Tuple!(int,\
    \ int);\n    long sum = 0;\n    for (; k > 0; k--)\n    {\n        int num = arr[k-1];\n\
    \        int digits = std.math.log10(num) + 1;\n        if (digits <= 2)\n   \
    \     {\n            sum += num;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L,\
    \ 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L,\
    \ 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L,\
    \ 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L,\
    \ 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuv7wkrt3.d(24): Error: cannot implicitly convert expression `arr[cast(ulong)(k\
    \ - 1L)]` of type `long` to `int`\\n/tmp/tmpuv7wkrt3.d(25): Error: cannot implicitly\
    \ convert expression `log10(cast(real)num) + 1.00000L` of type `real` to `int`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuv7wkrt3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long total = 0L;\n \
    \   long[] slice = arr[0 .. cast(ulong)k];\n    foreach(ref num; slice)\n    {\n\
    \        if(num >= 0 && num < 100)\n        {\n            total += num;\n   \
    \     }\n    }\n    return total;\n}\nunittest\n{\n    alias candidate = add_elements;\n\
    \n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n\
    \    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L,\
    \ 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L,\
    \ 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L],\
    \ 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf2qmgmkv.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42823d]\\n??:? void tmpf2qmgmkv.__unittest_L31_C1()\
    \ [0x427e04]\\n??:? void tmpf2qmgmkv.__modtest() [0x427fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c29b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b12e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302c1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430770]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43024d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b105]\\n??:? runModuleUnitTests [0x42c071]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428700]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428687]\\n??:? _d_run_main [0x4285f2]\\n??:? main [0x427fcf]\\\
    n??:? __libc_start_main [0x1d6c3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a non-empty array\
    \ of integers arr and an integer k, return\n    the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n\n    Example:\n\n    >>>\
    \ add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n    24L\n\n  \
    \  Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n\
    \    \n*/\nlong add_elements(long[] arr, long k) \n{\n    long ret = 0L;\n   \
    \ foreach(i; 0..k)\n    {\n        if(arr[i] < 100L)\n        {\n            ret\
    \ += arr[i];\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L,\
    \ 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L)\
    \ == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) ==\
    \ 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\
    \ == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
