name: HumanEval_102_choose_num
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nThis function takes two positive\
  \ numbers x and y and returns the\n    biggest even integer number that is in the\
  \ range [x, y] inclusive. If \n    there's no such number, then the function should\
  \ return -1.\n\n    For example:\n    >>> choose_num(12L, 15L)\n    14L\n    >>>\
  \ choose_num(13L, 12L)\n    -1L\n    \n*/\nlong choose_num(long x, long y) \n"
tests: "unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L,\
  \ 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L,\
  \ 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L,\
  \ 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L,\
  \ 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}"
completions: ["{\n    if (x % 2 == 0)\n    {\n        return x;\n    }\n    else if\
    \ (x % 2 == 1)\n    {\n        return y;\n    }\n    else\n    {\n        return\
    \ -1;\n    }\n}", "{\n    long result = -1;\n    long i = x;\n    for (; i <=\
    \ y; i++)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n\
    \        }\n    }\n    return result;\n}", "{\n    long max = -1;\n    long i\
    \ = x;\n    if (x > y) {\n        i = y;\n    }\n    while (i <= y) \n    {\n\
    \        if (i % 2 == 0) {\n            max = i;\n        }\n        i = i + 1;\n\
    \    }\n    return max;\n}", "{\n    alias T = ulong;\n    alias P = Tuple!(long,\
    \ long);\n    T xPos = x > 0 ? x : -x;\n    T yPos = y > 0 ? y : -y;\n    if (xPos\
    \ == 0 || yPos == 0)\n        return -1;\n    else\n    {\n        P p = xPos\
    \ > yPos ? P(yPos, xPos) : P(xPos, yPos);\n        T g = gcd(p[0], p[1]);\n  \
    \      T l = p[0] / g * p[1];\n        // could check if l is even and return\
    \ -1 here...\n        return l / 2;\n    }\n}\n/*\nThe function digitsum(N) returns\
    \ the sum of digits of N. \n    For example:", "{\n    if(x<y)\n    {\n      \
    \  if(y%2==0)\n        {\n            return y;\n        }\n        else\n   \
    \     {\n            return y-1;\n        }\n    }\n    else if(x==y)\n    {\n\
    \        if(x%2==0)\n        {\n            return x;\n        }\n        else\n\
    \        {\n            return -1;\n        }\n    }\n    else\n    {\n      \
    \  return -1;\n    }\n    \n    \n}", "{\n    if (x % 2 == 0) \n    {\n      \
    \  if (x > y) \n        {\n            return -1;\n        }\n        return x;\n\
    \    }\n    return choose_num(x + 1, y);\n}", "{\n  long largestEven;\n  if(x>y)\n\
    \  {\n    largestEven=-1;\n  }\n  else\n  {\n    for(long i=x;i<=y;i++)\n    {\n\
    \      if(i%2==0)\n      {\n        largestEven=i;\n      }\n    }\n  }\n  return\
    \ largestEven;\n}", "{\n    long result;\n    if (y % 2 == 0)\n    {\n       \
    \ result = y;\n    }\n    else\n    {\n        result = y - 1;\n    }\n    if\
    \ (result < x)\n    {\n        result = -1;\n    }\n    return result;\n}", "{\n\
    \    return tuple(long.max, long.min).zip(tuple(x, y)).map!((a, b) => a - b).reduce!((a,\
    \ b) => abs(a) < abs(b) ? a : b);\n}\n/*", "{\n    if( x % 2 == 0)\n        return\
    \ x;\n    else if (y % 2 == 0)\n        return y;\n    else\n        return -1;\n\
    }\n/*\n    This function takes a series of numbers (integers or floats) and\n\
    \    returns a std.typecons.Tuple!(long, double) that contains the minimum\n \
    \   number and the maximum number of the series.", "{\n    long result = -1;\n\
    \    long i = 0;\n    foreach(i;x..y)\n    {\n        if (i % 2 == 0)\n      \
    \  {\n            result = i;\n        }\n    }\n    return result;\n}", "{\n\
    \    if (x % 2 != 0 && y % 2 != 0) \n    {\n        return -1L;\n    }\n    else\
    \ \n    {\n        long low = min(x, y);\n        long high = max(x, y);\n   \
    \     if (low % 2 == 0)\n        {\n            return low;\n        }\n     \
    \   else\n        {\n            return low + 1;\n        }\n    }\n}", "{\n \
    \   long result;\n    if (x % 2 != 0)\n    {\n        result = x + 1;\n    }\n\
    \    else\n    {\n        result = x;\n    }\n    if (result > y)\n    {\n   \
    \     return -1;\n    }\n    else\n    {\n        return result;\n    }\n}", "{\n\
    \treturn -1;\n}", "{\n    if(x%2 != 0 || y%2 != 0)\n    {\n        if(x%2 != 0)\n\
    \        {\n            x++;\n        }\n        if(y%2 != 0)\n        {\n   \
    \         y--;\n        }\n    }\n    if(x <= y)\n    {\n        return y;\n \
    \   }\n    else\n    {\n        return -1;\n    }\n}\n/*\n    This function takes\
    \ a natural number n and returns the sum of \n    numbers from 1 to n inclusive,\
    \ if n is not divisible by 6. If n is \n    divisible by 6, then the function\
    \ should return the sum of numbers \n    from 1 to n inclusive plus 10. If n is\
    \ less than 1, then the function \n    should return -1.", "{\n    if (x > y)\
    \ return -1;\n    while (x <= y)\n    {\n        if (x % 2 == 0)\n           \
    \ return x;\n        x += 1;\n    }\n    return -1;\n}", "{\n    static assert(x\
    \ > 0 && y > 0);\n    if (x == y)\n    {\n        if ((x % 2) == 0)\n        \
    \    return x;\n        else\n            return -1;\n    }\n    else if (x >\
    \ y)\n    {\n        return -1;\n    }\n    else\n    {\n        long r = x %\
    \ 2;\n        return (r == 0) ? x : x + 1;\n    }\n}\n/*\n * This function takes\
    \ a positive number num, and a string str, and\n *    replaces all even-numbered\
    \ characters in str with the string\n *    representation of num. (0-indexed.)\
    \ If str has less than\n *    2 * num characters, then the function should return\
    \ None.\n *    Otherwise, it should return the new string.", "{\n  long n = 0;\n\
    \  if (x > y)\n  {\n    n = -1;\n  }\n  else if (y == 0)\n  {\n    n = 0;\n  }\n\
    \  else\n  {\n    for (long i = y; i > x; i--)\n    {\n      if ((i % 2) == 0)\n\
    \      {\n        n = i;\n        break;\n      }\n    }\n  }\n  return n;\n}\n\
    \ \n/*", "{\n\tlong result = -1;\n\tlong i = min(x, y);\n\t\n\twhile (i <= max(x,\
    \ y))\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tresult = i;\n\t\t}\n\t\ti++;\n\t\
    }\n\treturn result;\n}", "{\n    static struct S(a, b)\n    {\n        long a;\n\
    \        long b;\n    } nums = \n    {\n        .a = x,\n        .b = y\n    };\n\
    \    if (x > y)\n    {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    if (x % 2 == 0)\n    {\n        return x;\n    }\n    else\n    {\n\
    \        return y;\n    }\n    return x;\n}", "{\n    int lowest = x>y? y:x;\n\
    \    int highest = x>y? x:y;\n    for(long i = highest; i >= lowest; i--)\n  \
    \  {\n        if(i%2 == 0)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}\n/*\nThis function takes as its argument an unsorted tuple\
    \ of strings. The\n    function returns a sorted tuple of strings that contains\
    \ the same\n    elements as the given tuple. Don't use any built-in functions\
    \ (not\n    even sort). Use bubble sort instead.\n    For example:\n    >>> bubble_sort(make_tuple(\"\
    C\", \"B\", \"A\"))\n    tuple(\"A\", \"B\", \"C\")\n*/\nTuple!(string) bubble_sort(Tuple!(string)\
    \ unsorted)\n{\n    bool sorted = false;\n    int size = unsorted.length;\n  \
    \  string[] strings = new string[size];\n    while(!sorted)\n    {\n        sorted\
    \ = true;\n        for(int i = 0; i < size - 1; i++)\n        {\n            if(unsorted[i]\
    \ > unsorted[i+1])\n            {\n                sorted = false;\n         \
    \       strings[i] = unsorted[i+1];\n                strings[i+1] = unsorted[i];\n\
    \            }\n            else\n            {\n                strings[i] =\
    \ unsorted[i];\n                strings[i+1] = unsorted[i+1];\n            }\n\
    \        }\n    }\n    return new Tuple!(string)(strings);\n}\n/*\nThis function\
    \ takes a tuple of tuples as its argument. All tuples are\n    the same length,\
    \ and all elements of the tuple are integers. The\n    function returns the sum\
    \ of all elements of the tuple.\n    For example:\n    >>> sum_tuple(make_tuple(make_tuple(1,\
    \ 2, 3), make_tuple(4, 5, 6)))\n    21\n*/", "{\n    long maxEven = -1;\n    while\
    \ (x <= y)\n    {\n        if (x % 2 == 0)\n        {\n            maxEven = x;\n\
    \        }\n        x++;\n    }\n    return maxEven;\n}", "{\n    //TODO: implement\
    \ the function using std.typecons.If struct\n    auto isEven = [](long n) {return\
    \ n % 2 == 0;};\n    return typecons.If!(isEven(x) && isEven(y), () =>\n    {\n\
    \        auto max = (x > y) ? x : y;\n        return max;\n    }, () =>\n    {\n\
    \        return typecons.If!(isEven(x) && !isEven(y), () =>\n        {\n     \
    \       return x;\n        }, () =>\n        {\n            return typecons.If!(!isEven(x)\
    \ && isEven(y), () =>\n            {\n                return y;\n            },\
    \ () =>\n            {\n                return -1;\n            });\n        });\n\
    \    });\n}", "{\n    if (x%2)\n    {\n        if (y%2)\n        {\n         \
    \   return -1;\n        }\n        else\n        {\n            return max(x+1,\
    \ y);\n        }\n    }\n    else\n    {\n        return max(x, y);\n    }\n}",
  "{\n    long z = -1;\n    z = y - (y%2);\n    if (z == y && z < x)\n    {\n    \
    \    z = z -2;\n    }\n    if (z < x)\n    {\n        z = -1;\n    }\n    return\
    \ z;\n}\n/*\nThis function takes in a positive integer number n and returns a\n\
    \    letter grade (as a char) according to the following table:", "{\n    while\
    \ (x <= y)\n    {\n        if (x % 2 == 0)\n        {\n            return x;\n\
    \        }\n        x++;\n    }\n    return -1;\n}", "{\n  assert(x <= y);\n \
    \ if(x % 2 == 0) return x;\n  else return x + 1;\n}", "{\n    return (y - (y %\
    \ 2)) + (y % 2 == 1 ? x % 2 == 0 ? 0 : -2 : 0);\n}", "{\n\tif (x%2==0)\n\t{\n\t\
    \treturn x;\n\t}\n\telse\n\t{\n\t\tif (x+1<=y)\n\t\t{\n\t\t\treturn x+1;\n\t\t\
    }\n\t\telse\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t}\n}\n/*\nThis function accepts\
    \ a positive integer n, and returns an array of two \n    unique prime numbers\
    \ whose sum is equal to n. The prime numbers should be \n    in ascending order.",
  "{\n    static assert(is(typeof(x == long) && typeof(y == long)));\n    static assert(x\
    \ > 0L && y > 0L);\n    long num = -1L;\n    for(long i = x; i <= y; i++)\n  \
    \  {\n        if(isOdd(i))\n        {\n            i++;\n            if(i <= y)\n\
    \            {\n                num = i;\n            }\n            break;\n\
    \        }\n        else\n        {\n            num = i;\n        }\n    }\n\
    \    return num;\n}\n/*\nThis function takes two positive numbers x and y and\
    \ returns the biggest\n    odd integer number that is in the range [x, y] inclusive.\
    \ If there's no \n    such number, then the function should return -1.", "{\n\
    \    assert(x >= 0L);\n    assert(y >= 0L);\n    if (x == y)\n    {\n        if\
    \ (x % 2L == 0L)\n        {\n            return x;\n        }\n        else \n\
    \        {\n            return -1L;\n        }\n    }\n    long tmp = (x + y)\
    \ / 2L;\n    while (tmp % 2L != 0L)\n    {\n        if (tmp > x)\n        {\n\
    \            x = tmp;\n        }\n        else \n        {\n            y = tmp;\n\
    \        }\n        tmp = (x + y) / 2L;\n    }\n    return tmp;\n}", "{\n    long\
    \ z;\n    if (x % 2 == 0) {\n        z = x;\n    }\n    else {\n        z = x\
    \ + 1;\n    }\n    while (z <= y) {\n        return z;\n        z = z + 2;\n \
    \   }\n    return -1;\n}\n/*\nThis function takes a positive number n and returns\
    \ a list that \n    contains n non-negative integers such that the sum of those\
    \ numbers \n    is n. The numbers in the list should be in ascending order.",
  "{\n\t//return (abs(y-x)+1)%2==0?y-((abs(y-x)+1)/2-1):-1;\n\t//return (abs(y-x)+1)%2==0?x+((abs(y-x)+1)/2-1):-1;\n\
    \tif(y<x)\n\t{\n\t\treturn -1;\n\t}\n\telse if(y-x>=2)\n\t{\n\t\treturn y-((abs(y-x)+1)/2-1);\n\
    \t}\n\telse\n\t{\n\t\treturn y%2==0?y:-1;\n\t}\n}\n/*\nThis function takes a positive\
    \ number n and a non-negative integer\n    k and returns a tuple (i, j) of two\
    \ integers, such that:\n    - i and j are odd (not divisible by 2)\n    - i is\
    \ less than or equal to j\n    - |i - j| is k\n    - the sum of numbers in the\
    \ range [i, j] is equal to n", "{\n    if (x > y)\n        return -1;\n    long\
    \ even_low = 2 * floor(x / 2.0) + 1;\n    long even_hi = 2 * floor(y / 2.0);\n\
    \    if (even_low > even_hi)\n        return -1;\n    return even_hi;\n}", "{\n\
    \    auto num;\n    if (x%2==0)\n    {\n        num =x;\n    }\n    else \n  \
    \  {\n        num = x+1;\n    }\n    if (num>y)\n    {\n        return -1;\n \
    \   }\n    else\n    {\n        return num;\n    }", "{\n\tif (x < y) {\n\t\t\
    if (x % 2 == 0) {\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\treturn choose_num(x\
    \ + 1, y);\n\t\t}\n\t}\n\telse if (x > y) {\n\t\treturn -1;\n\t}\n\telse {\n\t\
    \tif (x % 2 == 0) {\n\t\t\treturn x;\n\t\t}\n\t\telse {\n\t\t\treturn -1;\n\t\t\
    }\n\t}\n}", "{\n  if (y <= x) \n  {\n    return -1L;\n  }\n  else \n  {\n    long\
    \ z = x;\n    while (z <= y) \n    {\n      if (z % 2 == 0) \n      {\n      \
    \  return z;\n      }\n      else \n      {\n        z = z + 1;\n      }\n   \
    \ }\n    return -1L;\n  }\n}\n \n/*\nThis function accepts two positive integers\
    \ x and y. If the first\n    number is larger than the second, return -1, otherwise\
    \ return the square\n    root of the first number.", "{\n    if (x > y)\n    \
    \    return -1;\n    if (x == y)\n        return (cast(long)x % 2 == 0) ? x :\
    \ -1;\n    long res = -1;\n    foreach (int i; x .. y)\n    {\n        if (cast(long)i\
    \ % 2 == 0)\n            res = i;\n    }\n    return res;\n}", "{\n    long ret;\n\
    \    if(x % 2 == 0)\n    {\n        return x;\n    }\n    ret = x + 1;\n    if(ret\
    \ > y)\n    {\n        return -1;\n    }\n    return ret;\n}", "{\n    if (x%2\
    \ != 0)\n        x = x+1;\n    if (y%2 != 0)\n        y = y-1;\n    if (x > y)\n\
    \        return -1;\n    else\n        return y;\n}", "{\n    // Input:\n    //\
    \    x: a long number\n    //    y: a long number\n    // Output:\n    //    the\
    \ largest even number in the range [x, y] inclusive.\n    // Example:\n    //\
    \ >>> choose_num(12L, 15L)\n    // 14L\n    // >>> choose_num(13L, 12L)\n    //\
    \ -1L\n    \n    // YOUR CODE HERE\n    if(x>y)\n    {\n        return -1L;\n\
    \    }\n    auto z = max(x,y);\n    if(z%2==0)\n    {\n        return z;\n   \
    \ }\n    else\n    {\n        return z-1;\n    }\n}", "{\n    if (x <= y)\n  \
    \  {\n        long evens = tuple!(2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 18L, 20L);\n\
    \        long odd = tuple!(1L, 3L, 5L, 7L, 9L, 11L, 13L, 15L, 17L, 19L);\n   \
    \     auto a = evens[$-1];\n        foreach (e; evens)\n        {\n          \
    \  if (e <= y)\n            {\n                a = e;\n            }\n       \
    \ }\n        if (a >= x)\n        {\n            return a;\n        }\n      \
    \  else\n        {\n            return -1L;\n        }\n    }\n    else\n    {\n\
    \        return -1L;\n    }\n}", "{\n    if (x < 0 || y < 0) \n    {\n       \
    \ return -1;\n    }\n    else \n    {\n        while (x <= y) \n        {\n  \
    \          if (x % 2 == 0) \n            {\n                return x;\n      \
    \      }\n            else \n            {\n                x = x + 1;\n     \
    \       }\n        }\n        return -1;\n    }\n}\n/*\nThis function takes a\
    \ positive number n and a list of long ints. The \n    function should return\
    \ a tuple of two lists containing all odd and even \n    numbers respectively.\
    \ Note that the function should return the two lists \n    in the same order they\
    \ appear in the input list.", "{\n    enum positive_even_numbers = iota(0L, 2L,\
    \ max(x, y) + 1L);\n    return find!(a => a >= x && a <= y)(positive_even_numbers);\n\
    }\n/*\nThis function takes an array of positive numbers and a positive number\
    \ s, \n    and returns true if there are two numbers in the array whose sum is\
    \ s, \n    and false otherwise.", "{ \n    if(x > y) return -1;\n    long counter\
    \ = x;\n    while(counter <= y)\n    {\n        if(counter % 2 == 0)\n       \
    \ {\n            return counter;\n        }\n        else \n        {\n      \
    \      counter++;\n        }\n    }\n    return -1;\n}\n/*\n    This function\
    \ takes three positive numbers x, y and z. If the \n    values of those numbers\
    \ are in increasing order (x < y < z), \n    then the function should return True.\
    \ Otherwise, it should \n    return False.", "{\n    return 0;\n}", "{\n    long\
    \ i;\n    for (i = y; i >= x; i--)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            return i;\n        }\n    }\n    return -1;\n}\n \n/*\nThis function\
    \ takes three numbers a, b and c and returns true if \n    the value of a*b is\
    \ in the range [c, c+1000] inclusive, and false otherwise.", "{\n  long result\
    \ = 0;\n  \n  if (x <= y)\n  {\n    result = x;\n    if (x%2 != 0)\n    {\n  \
    \    if (y%2 != 0)\n      {\n        result = -1;\n      }\n      else\n     \
    \ {\n        result = y;\n      }\n    }\n  }\n  else\n  {\n    result = -1;\n\
    \  }\n  \n  return result;\n}", "{\n    x = (long)floor(x/2)*2;\n    y = (long)floor(y/2)*2;\n\
    \    if (x >= y) return -1;\n    return x + 2;\n}\n/*\nThis function takes a positive\
    \ integer n. It should return the sum of all \n    even numbers in the Fibonacci\
    \ sequence up to and including the nth \n    Fibonacci number. This includes the\
    \ 0th term.", "{\n    if (x<=y)\n    {\n        if (x % 2 == 0) return x;\n  \
    \      else if (x == y) return -1;\n        else return choose_num(x+1, y);\n\
    \    }\n    else\n    {\n        if (y % 2 == 0) return y;\n        else if (x\
    \ == y) return -1;\n        else return choose_num(y+1, x);\n    }\n    return\
    \ -1;\n}\n/*\n    The function takes a positive integer number n and returns the\
    \ nth\n    prime number. It should return -1, if n is less than 1.", "{\n    \
    \ long result = -1;\n     long modulo = x % 2;\n     if (modulo == 0)\n      \
    \  result = x;\n     else\n        result = x + 1;\n     while (result <= y)\n\
    \     {\n         if (result % 2 == 0)\n            return result;\n         result\
    \ += 2;\n     }\n     return -1;\n}\n/*\nImplement a function that takes an integer\
    \ x and a list of integers xs\n    and returns true if the first integer is included\
    \ in the list, false \n    otherwise.", "{\n    // YOUR CODE HERE\n    if(x >\
    \ y)\n        return -1;\n    int largest = y;\n    for(; largest >= x; largest--)\n\
    \    {\n        if(largest % 2 == 0)\n            return largest;\n    }\n   \
    \ return -1;\n}", "{\n    static int[] evens = [2, 4, 6, 8, 10, 12, 14, 16, 18,\
    \ 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56,\
    \ 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94,\
    \ 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158,\
    \ 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190,\
    \ 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222,\
    \ 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254,\
    \ 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286,\
    \ 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318,\
    \ 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350,\
    \ 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382,\
    \ 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414,\
    \ 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446,\
    \ 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478,\
    \ 480, 482,", "{\n    return -1L;\n}", "{\n    enum size_t range = cast(size_t)(y\
    \ - x + 1);\n    if(range <= 1)\n        return -1;\n    if(range == 2)\n    \
    \    return x;\n    auto result = new long[range];\n    foreach(i; 0 .. range)\n\
    \        result[i] = x + i;\n    static struct IsEven\n    {\n        enum bool\
    \ opCall(long value)\n        {\n            return cast(bool)(value % 2 == 0);\n\
    \        }\n    } isEven;\n    return reduce!max(result, isEven);\n}\n/**\n *\
    \ This function takes a string of integers separated by commas,\n * and returns\
    \ the sum of all of them.\n *\n * For example:\n * >>> sum_ints(\"1, 2, 3, 4,\
    \ 5\")\n * 15\n * >>> sum_ints(\"\")\n * 0\n * >>> sum_ints(\"1\")\n * 1\n * >>>\
    \ sum_ints(\"1, 1, 1, 1, 1\")\n * 5\n * >>> sum_ints(\"1, -1, 1, -1, 1\")\n *\
    \ 0\n * >>> sum_ints(\"1, -1, 0, -1, 1\")\n * 0\n * >>> sum_ints(\"1, -1, -1,\
    \ -1, 1\")\n * -1\n * >>> sum_ints(\"1, -1, -1, -1, -1\")\n * -5\n * >>> sum_ints(\"\
    -1, -1, -1, -1, -1\")\n * -5\n * >>> sum_ints(\"-5\")\n * -5\n * >>> sum_ints(\"\
    -5, 5\")\n * 0\n * >>> sum_ints(\"5, -5\")\n * 0\n * >>> sum_ints(\"-5, -5\")\n\
    \ * -10\n * >>> sum_ints(\"-5, -5, 10\")\n * 0\n * >>> sum_ints(\"1, 2, 3, 4,\
    \ 5, 5, 4, 3, 2, 1\")\n * 30\n * >>> sum_ints(\"1, 2, 3, 4, 5, 4, 3, 2, 1\")\n\
    \ * 30\n * >>> sum_ints(\"-1, -2, -3, -4, -", "{\n\tif(y>x)\n\t{\n\t\tif((y%2)==0)\n\
    \t\t\treturn y;\n\t\telse\n\t\t\treturn y-1;\n\t}\n\telse\n\t\treturn -1;\n}",
  "{\n    long bigEven = -1;\n    int i = x;\n    for(; i <= y; i++)\n    {\n    \
    \    if(i % 2 == 0)\n        {\n            bigEven = i;\n        }\n    }\n \
    \   return bigEven;\n}", "{\n    if (x % 2L == 0L && x <= y)\n    {\n        return\
    \ x;\n    }\n    else if (x % 2L == 1L && x <= y)\n    {\n        return x + 1L;\n\
    \    }\n    else\n    {\n        return -1L;\n    }\n}\n/*\nThis function takes\
    \ two positive numbers x and y and returns a tuple \n    containing two long numbers,\
    \ the first one is the biggest odd number in \n    the range [x, y] inclusive,\
    \ and the second one is the biggest even number \n    in the range [x, y] inclusive.\
    \ If there's no such number, then the function \n    should return (-1L, -1L).",
  "{\n    long ret = -1;\n    long m = min(x, y);\n    long M = max(x, y);\n    ret\
    \ = M - (M % 2) + 2;\n    if (ret > M)\n    {\n        ret = -1;\n    }\n    return\
    \ ret;\n}", "{\n    if (x % 2 == 0 || y % 2 == 0) {\n        return max(x, y);\n\
    \    } else {\n        return -1;\n    }\n}", "{\n    static if(x < y)\n    {\n\
    \        if(x % 2 == 0) return x;\n        else return choose_num(x + 1, y);\n\
    \    }\n    else if(x > y)\n    {\n        if(y % 2 == 0) return y;\n        else\
    \ return choose_num(x, y - 1);\n    }\n    else\n    {\n        if(x % 2 == 0)\
    \ return x;\n        else return -1;\n    }\n}\n/*\nThis function takes a non-negative\
    \ number n as a parameter and\n    returns the number of right-handed ways of\
    \ parenthesizing an \n    expression with n variables.", "{\n    long z;\n   \
    \ for (long i = y; i >= x; i--)\n    {\n        if (i % 2 == 0)\n        {\n \
    \           z = i;\n            break;\n        }\n        else\n        {\n \
    \           z = -1;\n        }\n    }\n    return z;\n}", "{\n\tif (x <= y)\n\t\
    {\n\t\tif (y % 2 == 0)\n\t\t{\n\t\t\treturn y;\n\t\t} else\n\t\t{\n\t\t\treturn\
    \ choose_num(x, y - 1);\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn -1;\n\t}\n}", "{\n\
    \    long count;\n    long bigEven;\n    bool found = false;\n    for(count =\
    \ x; count <= y; count++)\n    {\n        if(count % 2 == 0)\n        {\n    \
    \        bigEven = count;\n            found = true;\n        }\n    }\n    if(found)\n\
    \    {\n        return bigEven;\n    }\n    else\n    {\n        return -1;\n\
    \    }\n}", "{\n    auto result = -1L;\n    for (long i = min(x, y); i <= max(x,\
    \ y); i++) \n    {\n        if (i % 2 == 0) \n        {\n            result =\
    \ i;\n        }\n    }\n    return result;\n}\n/* \nThis function takes an int\
    \ number k and a string word and returns the word \nrepeated k times. If k is\
    \ negative, then the function should return an empty string.", "{\n\tenum num\
    \ = (x % 2 == 0) ? x : x + 1;\n\twhile (num <= y)\n\t{\n\t\tif (num % 2 == 0)\n\
    \t\t\treturn num;\n\t\telse\n\t\t\tnum += 1;\n\t}\n\treturn -1;\n}", "{\n    long\
    \ i = max(x, y);\n    while (i > x) {\n        if (i % 2 == 0) {\n           \
    \ return i;\n        }\n        i--;\n    }\n    return -1;\n}\n/*\nThe game is\
    \ played as follows: The first player chooses a number N, divides\n    it by 2\
    \ if it's even, and multiplies it by 3 and adds 1 if it's odd. After\n    that,\
    \ the second player follows the same procedure and so on. The game\n    ends when\
    \ somebody reaches the number 1.", "{\n    enum lowest_bound = 2L;\n    if (x\
    \ < lowest_bound || y < lowest_bound)\n    {\n        writeln(\"Error: Both inputs\
    \ must be positive\");\n        return -1L;\n    }\n    if (x > y)\n    {\n  \
    \      writeln(\"Error: The first number must be smaller or equal to the second\"\
    );\n        return -1L;\n    }\n    if (x == y)\n    {\n        if (x % 2 == 0)\n\
    \        {\n            return x;\n        }\n        else\n        {\n      \
    \      return -1L;\n        }\n    }\n    if (x % 2 == 0)\n    {\n        return\
    \ x;\n    }\n    else\n    {\n        return choose_num(x + 1L, y);\n    }\n}\n\
    /*\nThis function takes two numbers x and y and calculates the sum of \n    them.\
    \ The function also takes an array of numbers, which will \n    be used as a currency\
    \ exchange rate. The elements in that array \n    correspond to the exchange rate\
    \ between the currencies (in the same \n    order) that are in the string \"currencies\"\
    . For example, the\n    exchange rate between euro and usd is in the element of\
    \ index 0.\n    The function should return the sum of x and y in the format of\
    \ a \n    tuple of currency, value.", "{\n    long res = 0;\n    long i = min(x,\
    \ y);\n    res = x % 2 == 0 ? x : x + 1;\n    if(res > y)\n        return -1;\n\
    \    return res;\n}", "{\n    if (x < y && x % 2 == 0)\n    {\n        return\
    \ x;\n    }\n    else if (x < y && x % 2 != 0)\n    {\n        return choose_num(x\
    \ + 1, y);\n    }\n    else if (x > y && y % 2 == 0)\n    {\n        return y;\n\
    \    }\n    else if (x > y && y % 2 != 0)\n    {\n        return choose_num(x,\
    \ y - 1);\n    }\n    else if (x % 2 == 0)\n    {\n        return x;\n    }\n\
    \    else if (x % 2 != 0)\n    {\n        return -1;\n    }\n    else\n    {\n\
    \        return -1;\n    }\n}\n/*\nThis function takes a tuple of numbers and\
    \ returns a new tuple of the same\n    length that contains the numbers from the\
    \ original tuple but in \n    reverse order.", "{\n    if(x % 2L == 0)\n    {\n\
    \        if(x == y)\n        {\n            return x;\n        }\n        else\n\
    \        {\n            return choose_num(x + 2L, y);\n        }\n    }\n    else\n\
    \    {\n        if(x + 1L == y)\n        {\n            return -1L;\n        }\n\
    \        else\n        {\n            return choose_num(x + 1L, y);\n        }\n\
    \    }\n}\n/*\nThis function takes two positive numbers x and y and returns the\n\
    \    biggest odd integer number that is in the range [x, y] inclusive. If \n \
    \   there's no such number, then the function should return -1.", "{\n    long\
    \ result = -1;\n    if (x % 2 == 0)\n    {\n        result = x;\n    }\n    else\
    \ if (x + 1 <= y)\n    {\n        result = x + 1;\n    }\n    else\n    {\n  \
    \      result = -1;\n    }\n    return result;\n}", "{\n    if(y < x)\n      \
    \  return -1;\n    while(y % 2 != 0)\n        y--;\n    return y;\n}\n/*\n> Note\
    \ that we may have a chance to have the following wrong code:", "{\n    long i\
    \ = min(x, y);\n    while (i > 0)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            return i;\n        }\n        i -= 1;\n    }\n    return -1;\n}",
  "{\n    long z;\n    z = max(x, y);\n    if (z % 2 != 0)\n        z = z - 1;\n \
    \   if (z < x)\n        z = -1;\n    return z;\n}", "{\n    if (x == y)\n    {\n\
    \        return x % 2 == 0 ? x : -1;\n    }\n    auto z = cast(long)x;\n    while\
    \ (z <= y)\n    {\n        if (z % 2 == 0)\n        {\n            return z;\n\
    \        }\n        z++;\n    }\n    return -1;\n}\n/*\nThis function takes two\
    \ positive numbers x and y and returns the biggest\neven integer number that is\
    \ in the range [x, y] inclusive. If there's no such\nnumber, then the function\
    \ should return -1.", "{\n    long z;\n    if(x % 2 == 0)\n        z = x;\n  \
    \  else\n        z = x + 1;\n    if(z > y)\n        return -1;\n    else\n   \
    \     return z;\n}\n/*\nThis function takes a list xs and a positive number x.",
  "{\n    long res = -1;\n    long dx = x;\n    long dy = y;\n    if(dx%2 == 0)\n\
    \    {\n        res = dx;\n    }\n    else\n    {\n        dx += 1;\n    }\n \
    \   if(dy%2 == 0)\n    {\n        res = max(res, dy);\n    }\n    else\n    {\n\
    \        dy -= 1;\n    }\n    if(dx <= dy)\n    {\n        res = max(res, dx);\n\
    \    }\n    return res;\n}", "{\n    // import std.math;\n    // import std.typecons;\n\
    \    // import std.algorithm;\n    // import std.range;\n    if (x > y || y <\
    \ 0 || x < 0)\n    {\n        return -1;\n    }\n    long iter;\n    long num;\n\
    \    foreach (iter; x..y+1)\n    {\n        num = x + y;\n        if (num % 2\
    \ == 0)\n        {\n            return num;\n        }\n    }\n    return -1;\n\
    }", "{\n    auto res = -1L;", "{ \n    auto a = LazyArray!(x..y);\n    foreach(i;\
    \ reverse(a))\n    {\n        if (i % 2 == 0)\n        {\n            return i;\n\
    \        }\n    }\n    return -1;\n}", "{\n    long result = -1;\n    long n =\
    \ x;\n    while (n <= y) {\n        if (n % 2 == 0) {\n            result = n;\n\
    \        }\n        n++;\n    }\n    return result;\n}", "{\n    int X = (int)\
    \ x;\n    int Y = (int) y;\n    if (X > Y)\n    {\n        writeln(\"Invalid range\"\
    );\n        return -1;\n    }\n    int temp = max(X, Y);\n    while (temp % 2\
    \ != 0)\n    {\n        temp--;\n    }\n    return (long) temp;\n}\n/*\nThis function\
    \ takes two positive numbers x and y, and an integer number k. \nThe function\
    \ should return a tuple of two elements: the first one\nis the biggest multiple\
    \ of k that is in the range [x, y] inclusive,\nand the second element is the number\
    \ of multiples of k within the range [x, y]. \nIf the range doesn't contain any\
    \ multiples of k, the function should return -1 and 0.", "{\n  long z = -1;\n\
    \  for (int i = cast(int)x; i <= cast(int)y; i++)\n  {\n    if (i % 2 == 0)\n\
    \    {\n      z = cast(long)i;\n    }\n  }\n  return z;\n}", "{\n    long res\
    \ = -1;\n    long max = x;\n    long min = y;\n    if (x < y)\n    {\n       \
    \ min = x;\n        max = y;\n    }\n    for (long i = max; i >= min; i--)\n \
    \   {\n        if (i % 2 == 0)\n        {\n            res = i;\n            break;\n\
    \        }\n    }\n    return res;\n}\n/*\nThis function returns the sum of the\
    \ first n positive odd numbers. For\n    example:\n    >>> sum_odd_numbers(5L)\n\
    \    25L\n    >>> sum_odd_numbers(8L)\n    64L\n*/\nlong sum_odd_numbers(long\
    \ n) \n{\n    return n * n;\n}\n/*\nYou want to pay $3 for a cup of coffee. You\
    \ notice that the coffee shop\n    advertises the price of coffee in a strange\
    \ way: the price is always \n    written as the price of the most expensive cup\
    \ of coffee plus the \n    price of the second most expensive cup of coffee. For\
    \ example, if the \n    most expensive cup of coffee costs $12 and the second\
    \ most expensive \n    cup of coffee costs $3, then the coffee shop's advertisement\
    \ shows \n    that a cup of coffee costs $15.", "{\n\tif(x > y || y < 0 || x <\
    \ 0) \n    {\n        return -1;\n    }\n    else \n    {\n        long min =\
    \ min(x, y);\n        long max = max(x, y);\n        if((min % 2 == 0) && (max\
    \ % 2 == 0)) \n        {\n            return max;\n        }\n        else if((min\
    \ % 2 == 1) && (max % 2 == 1)) \n        {\n            return -1;\n        }\n\
    \        else if((min % 2 == 0) && (max % 2 == 1)) \n        {\n            return\
    \ min;\n        }\n        else if((min % 2 == 1) && (max % 2 == 0)) \n      \
    \  {\n            return max - 1;\n        }\n    }\n    return -1;\n}\n/*\nThis\
    \ function takes an arbitrary number of strings and returns \na tuple that contains\
    \ the following:\n- the length of the longest string in the tuple\n- the index\
    \ of the longest string in the tuple\n- the length of the shortest string in the\
    \ tuple\n- the index of the shortest string in the tuple", "{\n    if (x>y) {\n\
    \        return -1L;\n    } else if ((x%2)!=0){\n        x++;\n    }\n    return\
    \ x;\n}", "{\n    if(x > y) return -1;\n    else if(x <= 0 || y <= 0) return -1;\n\
    \    else if(x == y) return x%2 == 0 ? x : -1;\n    else return choose_num(x+1,\
    \ y);\n}", "{\n    long result = -1;\n    long i = y;\n    while (i >= x)\n  \
    \  {\n        if (i % 2 == 0)\n        {\n            result = i;\n          \
    \  break;\n        }\n        i--;\n    }\n    return result;\n}", "{\n  //int\
    \ i = x;\n  int j = y;\n  for(; j >= x; j--)\n  {\n    if(j % 2 == 0)\n    {\n\
    \      return j;\n    }\n  }\n  return -1;\n}", "{\n    if (x%2 != 0)\n    {\n\
    \       x += 1;\n    }\n    if (y%2 != 0)\n    {\n       y -= 1;\n    }\n    if\
    \ (x > y)\n    {\n       return -1;\n    }\n    else\n    {\n       return y;\n\
    \    }\n}", "{\n    // YOUR CODE HERE\n    if (x == y)\n    {\n        return\
    \ x % 2 == 0 ? x : -1;\n    }\n    else\n    {\n        return choose_num(x+1,\
    \ y);\n    }\n}", "{\n    static assert(x > 0);\n    static assert(y > 0);\n \
    \   static assert(x <= y);\n    long range = y - x;\n    if (range < 1) \n   \
    \ {\n        return -1;\n    }\n    else \n    {\n        return x + (range %\
    \ 2 == 0 ? 0 : 1);\n    }\n}", "{\n    if (x > y)\n    {\n        return -1L;\n\
    \    }\n    if (x % 2 != 0)\n    {\n        x++;\n    }\n    if (y % 2 != 0)\n\
    \    {\n        y--;\n    }\n    return y;\n}", "{\n    if (x <= y)\n    {\n \
    \       if (x % 2 == 0)\n        {\n            return x;\n        }\n       \
    \ else if (x % 2 == 1)\n        {\n            return choose_num(x + 1, y);\n\
    \        }\n    }\n    else\n    {\n        return -1;\n    }\n}\n/*\nThis function\
    \ takes three numbers, x, y, and n, and returns the \n    nth number of the Fibonacci\
    \ sequence which is in the range [x, y] \n    inclusive. The Fibonacci sequence\
    \ is defined as follows:", "{\n    return 0L;\n}", "{\n    foreach(i; iota(x,\
    \ y+1))\n    {\n        if(i % 2 == 0)\n        {\n            return i;\n   \
    \     }\n    }\n    return -1;\n}", "{\n\t/*auto i = to!int(x);\n\tauto j = to!int(y);\n\
    \tfor(int a = i; a <= j; a++)\n\t{\n\t\tif(a % 2 == 0)\n\t\t{\n\t\t\treturn a;\n\
    \t\t}\n\t}\n\treturn -1;*/\n\tif (x % 2 == 0)\n\t{\n\t\treturn x;\n\t}\n\telse\
    \ if (x < y)\n\t{\n\t\treturn choose_num(x + 1, y);\n\t}\n\telse if (x > y)\n\t\
    {\n\t\treturn choose_num(y, x);\n\t}\n\telse\n\t{\n\t\treturn -1;\n\t}\n\t\n}\n\
    /*\nThis function takes an array of positive integer numbers, and returns a \n\
    \    copy of that array that has all of the same elements, but with a single \n\
    \    difference: in the copy all of the even integer numbers are replaced \n \
    \   with 0.", "{\n    // code here\n    if (x < y)\n    {\n        long max_even\
    \ = cast(long)(x / 2) * 2;\n        if (max_even > y) return -1;\n        return\
    \ max_even;\n    }\n    else\n    {\n        long max_even = cast(long)(y / 2)\
    \ * 2;\n        if (max_even > x) return -1;\n        return max_even;\n    }\n\
    }\n ", "{\n    if (x > y) return -1;\n    if (x % 2 != 0) x++;\n    if (y % 2\
    \ != 0) y--;\n    return x <= y ? x : -1;\n}", "{\n  // this func is not needed,\
    \ but I made it just for fun\n  auto not_even(long z) \n  {\n    return z % 2\
    \ != 0;\n  }\n  if (x < 0 || y < 0)\n    return -1;\n  if (x > y)\n    return\
    \ -1;\n  if (not_even(x) && not_even(y))\n    return -1;\n  if (not_even(x))\n\
    \    x += 1;\n  if (not_even(y))\n    y -= 1;\n  for (long i = y; i >= x; i -=\
    \ 2)\n    return i;\n  return -1;\n}\n/*\nWrite a function that returns the sum\
    \ of all numbers that are a power of\n    2 and greater than or equal to 0, up\
    \ to and including n.", "{\n    if (x > y)\n    {\n        return -1L;\n    }\n\
    \    else if (x % 2 == 0)\n    {\n        return x;\n    }\n    else\n    {\n\
    \        return x + 1;\n    }\n    \n}", "{\n    \n    assert(x > 0);\n    assert(y\
    \ > 0);\n    if (x > y)\n    {\n        return -1;\n    }\n    else\n    {\n \
    \       if (x % 2 == 0)\n        {\n            return x;\n        }\n       \
    \ else\n        {\n            return x + 1;\n        }\n    }\n}\n/*\nThis function\
    \ takes two tuples [x, y] and [a, b] and checks whether they\n    intersect.",
  "{\n  long z=0;\n  if(x>y)\n  {\n    z=-1;\n  }\n  else\n  {\n    for(;x<=y;x++)\n\
    \    {\n      if(x%2==0)\n      {\n        z=x;\n      }\n    }\n  }\n  return\
    \ z;\n}", "{\n    auto z = x;\n    while( z <= y)\n    {\n        if ( z % 2 ==\
    \ 0) return z;\n        z += 1;\n    }\n    return -1;\n}\n \n/*\nThis function\
    \ takes three positive numbers x, y and z and returns the\n    biggest integer\
    \ number that is in the range [x, y] inclusive.", "{\n    if(x>y) return -1;\n\
    \    else \n    {\n        return 2 * cast(long) floor( (y + 1)/2.0 ) - 1;\n \
    \   }\n}", "{\n    long[] arr = [];\n    arr = new long[y - x + 1];\n    long\
    \ count = 0;\n    foreach(long i; x..y+1)\n    {\n        arr[count] = i;\n  \
    \      count++;\n    }\n    for(long i = arr.length - 1; i >= 0; i--)\n    {\n\
    \        if(arr[i] % 2 == 0)\n        {\n            return arr[i];\n        }\n\
    \    }\n    return -1;\n}", "{\n  if (x > y) return -1;\n  long smallest = min(x,\
    \ y);\n  long largest = max(x, y);\n  if (smallest % 2 != 0) smallest++;\n  if\
    \ (largest % 2 != 0) largest--;\n  if (smallest > largest) return -1;\n  return\
    \ largest;\n}\n/*\nThis function takes two positive numbers x and y and returns\
    \ the\n    biggest even integer number that is in the range [x, y] inclusive.\
    \ If \n    there's no such number, then the function should return -1.", "{\n\
    \    if(x > y) return -1;\n    if(x%2 == 0) return max(x, x+1);\n    return max(x,\
    \ x+2);\n}", "{\n\t/*\n\t\tx - y / 2 = 0 ?\n\t\t*/\n\t//return -1L;\n\t\n\t//code\
    \ here\n\t\n\tif(x % 2 == 0 && y % 2 == 0)\n\t{\n\t\tif(x + y > 0)\n\t\t{\n\t\t\
    \t//static if(x + y < 13)\n\t\t\treturn (x + y) / 2;\n\t\t}\n\t\telse\n\t\t{\n\
    \t\t\treturn x;\n\t\t}\n\t}\n\telse if(x % 2 == 1 && y % 2 == 1)\n\t{\n\t\tif(x\
    \ + y > 0)\n\t\t{\n\t\t\treturn (x + y - 1) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\
    \treturn y;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn -1L;\n\t}\n}", "{\n    int i;\n\
    \    long z;\n    z=-1;\n    for(i=x;i<=y;i++)\n    {\n        if(i%2==0)\n  \
    \      {\n            z=i;\n        }\n    }\n    return z;\n}\nlong choose_num_aa(long\
    \ x, long y)\n{\n    int x1,y1;\n    long z1;\n    x1=int(x);\n    y1=int(y);\n\
    \    for(int i=x1;i<=y1;i++)\n    {\n        if(i%2==0)\n        {\n         \
    \   z1=i;\n        }\n    }\n    return z1;\n}", "{\n    if (x%2!=0 && y%2!=0)\n\
    \        return -1;\n    if (x%2!=0)\n        x++;\n    long big_one = x;\n  \
    \  for (long i = x; i <= y; i+=2)\n    {\n        if (i > big_one)\n         \
    \   big_one = i;\n    }\n    return big_one;\n}", "{\n  if(x <= y)\n  {\n    auto\
    \ diff = y - x;\n    if(diff % 2 == 0)\n    {\n      return y;\n    }\n    else\n\
    \    {\n      return y - 1;\n    }\n  }\n  else\n  {\n    return -1;\n  }\n}\n\
    /*\n    This function takes a positive number n and returns a string of n stars.\
    \ \n    For example:\n    >>> stars(2)\n    \"**\"\n    >>> stars(0)\n    \"\"\
    \n*/\nstring stars(int n)\n{\n  string result = \"\";\n  for(int i = 0; i < n;\
    \ i++)\n  {\n    result ~= \"*\";\n  }\n  return result;\n}\n/*\n    This function\
    \ takes a positive number n and returns a string \n    consisting of a triangle\
    \ of n rows. Each row has n characters. \n    The first row has n stars, the second\
    \ row has n-1 stars, and so on. \n    For example:\n    >>> triangle(2)\n    \"\
    **\\n*\"\n    >>> triangle(3)\n    \"***\\n**\\n*\"\n    >>> triangle(1)\n   \
    \ \"*\"\n    >>> triangle(5)\n    \"*****\\n****\\n***\\n**\\n*\"\n*/\nstring\
    \ triangle(int n)\n{\n  string result = \"\";\n  for(int i = 0; i < n; i++)\n\
    \  {\n    result ~= stars(n - i) ~ \"\\n\";\n  }\n  return result;\n}\n/*\n  \
    \  This function takes a positive number n and returns a string \n    consisting\
    \ of a triangle of n rows. Each row has n characters. \n    The first row has\
    \ n stars, the second row has n-1 stars, and so on. \n    For example:\n    >>>\
    \ triangle(2)\n    \"**\\n*\"\n    >>> triangle(3)\n    \"***\\n**\\n*\"\n   \
    \ >>> triangle(1)\n    \"*\"\n    >>> triangle(5)\n    \"*****\\n****\\n***\\\
    n**\\n*\"\n*/\nstring triangle_reverse(int n)", "{\n    if (x > y)\n        return\
    \ -1;\n    if (y % 2 == 0)\n        return y;\n    if (x % 2 == 0)\n        return\
    \ x;\n    return -1;\n}", "{ \n    if(x > y || x%2 != 0) return -1;\n    else\
    \ if(x < y) return y-1;\n    else return x;\n}", "{\n    if (x>y) \n    {\n  \
    \      return -1L;\n    }\n    else if (y%2!=0) \n    {\n        return choose_num(x,\
    \ y-1);\n    }\n    else\n    {\n        return y;\n    }\n}\n \n/*\n    This\
    \ function returns the number of iterations needed to find the\n    largest even\
    \ number in the range [1, x] inclusive that is divisible by k.\n    If there's\
    \ no such number, then it should return -1.", "{\n    long z;\n    z = (x+y)/2;\n\
    \    //z = (int)z;\n    //printf(\"\\n \\n %d \\n \\n\", z);\n    //printf(\"\
    %d\", z);\n    if (z%2 == 0)\n    {\n        return z;\n    }\n    else if (x\
    \ == y)\n    {\n        return -1;\n    }\n    else\n    {\n        if (z%2 ==\
    \ 0)\n        {\n            return z;\n        }\n        else if (z%2 != 0)\n\
    \        {\n            long x_new;\n            long y_new;\n            x_new\
    \ = x+1;\n            y_new = y-1;\n            return choose_num(x_new, y_new);\n\
    \        }\n    }\n}", "{ \n    if(x%2==0)\n    {\n        return x;\n    }\n\
    \    else if((x+1)%2==0)\n    {\n        return x+1;\n    }\n    else if(x==y)\n\
    \    {\n        return -1;\n    }\n    else\n    {\n        return choose_num(x+1,y);\n\
    \    }\n} \n/*\nThis function takes an int array and returns the smallest element\
    \ of the\n    array. If the array is empty, the function should return -1.", "{\n\
    \    version(none) {}\n    else { pragma(msg, \"This is the D template.\"); }\n\
    \    \n    long i = min(x, y);\n    for (; i <= max(x, y); i++) {\n        if\
    \ (i % 2 == 0) return i;\n    }\n    return -1;\n}", "{\n\tlong result = -1;\n\
    \tfor (long i = x; i <= y; i++)\n\t{\n\t\tif ((i % 2) == 0)\n\t\t{\n\t\t\tresult\
    \ = i;\n\t\t}\n\t}\n\treturn result;\n}", "{\n    assert(x >= 0);\n    assert(y\
    \ >= 0);\n    if (x % 2 == 0) {\n        return max(x, min(y, x + 1));\n    }\
    \ else {\n        return max(x + 1, min(y, x + 2));\n    }\n}", "{\n    long result\
    \ = -1;\n    if (x <= y)\n    {\n        if (x % 2 != 0)\n        {\n        \
    \    ++x;\n        }\n        if (y % 2 != 0)\n        {\n            --y;\n \
    \       }\n        if (x > y)\n        {\n            result = -1;\n        }\n\
    \        else\n        {\n            result = y;\n        }\n    }\n    return\
    \ result;\n}", "{\n  static assert(x > 0L && y > 0L);\n  return y % 2L == 0L ?\
    \ y : (y - 1L) % 2L == 0L ? y - 1L : -1L;\n}\n/*\nThis function calculates n!\
    \ recursively.", "{\n    long s = -1;\n    long z = 0;\n    if(x % 2 == 0)\n \
    \       s = x;\n    else\n        s = x + 1;\n    while(s <= y)\n    {\n     \
    \   if(s % 2 == 0)\n            z = s;\n        s++;\n    }\n    return z;\n}",
  "{\n    long r;\n    x %= 2L;\n    y %= 2L;\n    if(x == 0L && y == 0L)\n    {\n\
    \        r = max(x, y);\n    }\n    else if(x == 1L && y == 1L)\n    {\n     \
    \   r = -1L;\n    }\n    else\n    {\n        r = max(x, y);\n    }\n    return\
    \ r;\n}", "{\n    foreach(num; x .. y + 1) {\n        if (num % 2 == 0)\n    \
    \        return num;\n    }\n    return -1;\n}", "{ \n    if(x == y)\n    {\n\
    \        if(x % 2 == 0)\n        {\n            return x;\n        }\n       \
    \ else\n        {\n            return -1;\n        }\n    }\n    else if(x < y)\n\
    \    {\n        if(x % 2 == 0)\n        {\n            return x;\n        }\n\
    \        else\n        {\n            return choose_num(x + 1, y);\n        }\n\
    \    }\n    else\n    {\n        return -1;\n    }\n}", "{\n    if (x % 2 == 0)\
    \ \n    {\n        return max(x, y);\n    }\n    else \n    {\n        if (y %\
    \ 2 == 0) \n        {\n            return y;\n        }\n        else \n     \
    \   {\n            return -1;\n        }\n    }\n}\n/*\nthis function takes a\
    \ positive number 'x' and returns the smallest \n    integer number that is strictly\
    \ bigger than 'x' and has all its digits \n    different from each other (i.e.\
    \ is a pandigital number). If there's no \n    such number, then the function\
    \ should return -1.", "{\n    assert(x <= y);\n    return -1L;\n}", "{ \n    long\
    \ num = 0;\n    long diff = y - x;", "{\n    if(x % 2 != 0) x++;\n    if(y % 2\
    \ != 0) y--;\n    if(x > y) return -1;\n    return y;\n}\n/*", "{\n    if(x%2\
    \ != 0 && y%2 != 0)\n    {\n        return -1;\n    }\n    if(x%2 != 0)\n    {\n\
    \        x++;\n    }\n    if(y%2 != 0)\n    {\n        y--;\n    }\n    if(x >\
    \ y)\n    {\n        return -1;\n    }\n    return y;\n}", "{ \n    long biggest\
    \ = -1;\n    long temp = 0;\n    if(x%2 == 0)\n    {\n        biggest = x;\n \
    \   }\n    else\n    {\n        biggest = x+1;\n    }\n    if(y%2 == 0)\n    {\n\
    \        temp = y;\n    }\n    else\n    {\n        temp = y-1;\n    }\n    if(x\
    \ > y)\n    {\n        return -1;\n    }\n    else if(temp < biggest)\n    {\n\
    \        return -1;\n    }\n    else\n    {\n        return temp;\n    }\n}",
  "{\n\treturn -1;\n}", "{\n    if (x > y)\n        return -1;\n    int diff = int(y)\
    \ - int(x);\n    if (diff > 1)\n        return -1;\n    if (diff == 1)\n     \
    \   return x;\n    if (diff == 0)\n        return x % 2 == 0 ? x : -1;\n}", "{\n\
    \    // Your implementation\n    long temp;\n    if (x > y) {\n        temp =\
    \ x;\n        x = y;\n        y = temp;\n    }\n    if (y > x && (y - x) % 2 !=\
    \ 0) {\n        y--;\n    }\n    if (y - x < 0) {\n        return -1;\n    }\n\
    \    return y;\n    \n}", "{ \n    if (x % 2 == 0 && y % 2 == 0)\n        return\
    \ max(x, y);\n    else if (x % 2 == 0 && y % 2 != 0)\n        return y - 1;\n\
    \    else if (x % 2 != 0 && y % 2 == 0)\n        return x + 1;\n    else\n   \
    \     return -1;\n}", "{\n    long ret = -1;\n    long i;\n    for (i = x; i <=\
    \ y; i++)\n    {\n        if (i % 2 == 0)\n        {\n            ret = i;\n \
    \       }\n    }\n    return ret;\n}", "{\n    if (x % 2 == 0) \n    {\n     \
    \   return x;\n    }\n    else if (x % 2 == 1 && y % 2 == 0) \n    {\n       \
    \ return y;\n    }\n    else \n    {\n        return -1;\n    }\n}\n/*\nThis function\
    \ takes a positive integer number n and returns the number of \n    prime numbers\
    \ in the range [2, n] inclusive. A prime number is an integer \n    that is divisible\
    \ only by 1 and itself.", "{\n    return (x % 2 == 0) ? max(x, y) : (y % 2 ==\
    \ 0) ? y : -1;\n}", "{\n    return 0;\n}\nimport std.range;\n/*\nThis function\
    \ takes a positive number x and generates a list of all numbers \nin the range\
    \ [1, x] inclusive that are prime.", "{\n  long i;\n  long n = -1;\n  while (x\
    \ <= y)\n  {\n    if (x % 2 == 0)\n    {\n      n = x;\n    }\n    x++;\n  }\n\
    \  return n;\n}", "{\n    immutable result = [0L, -1L].front;\n    foreach(i;\
    \ x..y+1)\n    {\n        if(i % 2 == 0) result = i;\n    }\n    return result;\n\
    }", "{\n    assert(x <= y);\n    long ans = -1;\n    for (long i = y; i >= x;\
    \ i--)\n    {\n        if (i % 2 == 0)\n        {\n            ans = i;\n    \
    \        break;\n        }\n    }\n    return ans;\n}", "{\n    int max = -1;\n\
    \    for (; x <= y; x++) {\n        if (x % 2 == 0)\n            max = max(max,\
    \ x);\n    }\n    return max;\n}", "{\n    // write your code here\n    static\
    \ assert(x > 0);\n    static assert(y > 0);\n    if (x <= y)\n    {\n        //\
    \ x <= y\n        if (x % 2 == 0)\n        {\n            // x is even\n     \
    \       return x;\n        }\n        else\n        {\n            // x is odd\n\
    \            if (x + 1 <= y)\n            {\n                // x + 1 <= y\n \
    \               return x + 1;\n            }\n            else\n            {\n\
    \                // x + 1 > y\n                return -1;\n            }\n   \
    \     }\n    }\n    else\n    {\n        // x > y\n        return -1;\n    }\n\
    }\n/*\nThis function takes an integer number n as an argument and returns\n  \
    \  the biggest even integer number that is less than or equal to n. If\n    there's\
    \ no such number, then the function should return -1.", "{\n\t// Your solution\
    \ starts here\n\tif(x > y)\n\t{\n\t\treturn -1;\n\t}\n\t\n\twhile(x <= y)\n\t\
    {\n\t\tif(x % 2 == 0)\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t\tx++;\n\t}\n\t\n\treturn\
    \ -1;\n\t// Your solution ends here\n}", "{\n    if(x > y)\n    {\n        return\
    \ -1L;\n    }\n    long mid = (x + y) / 2;\n    if(mid % 2 == 0)\n    {\n    \
    \    if(mid < y)\n        {\n            return choose_num(mid + 1, y);\n    \
    \    }\n        else\n        {\n            return mid;\n        }\n    }\n \
    \   else\n    {\n        return choose_num(x, mid - 1);\n    }\n}", "{\n    if(x\
    \ > y)\n    {\n        return -1L;\n    }\n    return (x + y) / 2L * 2L;\n}\n\
    /*\nThis function takes two positive numbers x and y and returns an array \n \
    \   of size 2, where the first element is the smallest odd number in the \n  \
    \  range [x, y] inclusive, and the second element is the biggest odd \n    number\
    \ in the range [x, y] inclusive. If there's no such number, \n    then the function\
    \ should return [-1, -1].", "{\n    x += 1;\n    long num=cast(long) x;\n    while(num\
    \ <= cast(long) y)\n    {\n       if(num % 2 == 0)\n       {\n           return\
    \ num;\n       }\n       num++;\n    }\n    return -1;\n}\n/*\n    This function\
    \ takes a positive integer x (where x > 0) as input and returns\n    a boolean\
    \ value representing whether or not x is a power of 2.", "{\n    long max = -1;\n\
    \    for (long i = x; i <= y; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\n/*\nDefine a function\
    \ 'is_prime' which receives a positive integer x and returns\n    true if x is\
    \ a prime number and false otherwise.\n    \n    For example:\n    >>> is_prime(5L)\n\
    \    true\n    >>> is_prime(7L)\n    true\n    >>> is_prime(13L)\n    true\n \
    \   >>> is_prime(1L)\n    false\n    >>> is_prime(12L)\n    false\n    >>> is_prime(27L)\n\
    \    false\n*/", "{ \n    // assert(x >= 1);\n    // assert(y >= 1);\n    long\
    \ maxEven = -1;\n    for (long i = x; i <= y; i++)\n    {\n        if(isEven(i))\n\
    \        {\n            maxEven = i;\n        }\n    }\n    return maxEven;\n}",
  "{ \n    long a = 0;\n    long b = 0;\n    if (x > y)\n    {\n        a = y;\n \
    \       b = x;\n    }\n    else\n    {\n        a = x;\n        b = y;\n    }\n\
    \    if ( a % 2 == 0)\n    {\n        return a;\n    }\n    else\n    {\n    \
    \    if (a+1 < b)\n        {\n            return a+1;\n        }\n        else\n\
    \        {\n            return -1;\n        }\n    }\n}", "{\n    if (x < 0 ||\
    \ y < 0)\n    {\n        throw new Error(\"Arguments should be positive integers\"\
    );\n    }\n    if (x > y)\n    {\n        return -1;\n    }\n    else if (x <\
    \ y)\n    {\n        if ((y % 2) == 0)\n        {\n            return y;\n   \
    \     }\n        else\n        {\n            return y - 1;\n        }\n    }\n\
    \    else\n    {\n        if ((x % 2) == 0)\n        {\n            return x;\n\
    \        }\n        else\n        {\n            return -1;\n        }\n    }\n\
    }", "{\n    //your code goes here\n    \n    int ret = -1;\n    for(int i = x;\
    \ i <= y; i++)\n    {\n        if(i % 2 == 0)\n        {\n            ret = i;\n\
    \        }\n    }\n    return ret;\n}\nstring choose_num(long x, long y) \n{\n\
    \    //your code goes here\n    \n    int ret = -1;\n    string str = \"\";\n\
    \    for(int i = x; i <= y; i++)\n    {\n        if(i % 2 == 0)\n        {\n \
    \           ret = i;\n            str = i.to!string;\n        }\n    }\n    return\
    \ str;\n}", "{\n\tif(x%2==0){\n\t\treturn x;\n\t}\n\telse if((x+1)%2==0){\n\t\t\
    return x+1;\n\t}\n\telse{\n\t\treturn -1;\n\t}\n}\n/*\nThis function takes a positive\
    \ integer number x and returns \n    the least integer number that is bigger than\
    \ x, and has exactly the same \n    divisors as x. If there's no such number,\
    \ then the function should return -1.", "{\n    long ans = -1;\n    while (x <=\
    \ y)\n    {\n        if (x % 2 == 0)\n        {\n            ans = x;\n      \
    \  }\n        x = x + 1;\n    }\n    return ans;\n}", "{\n\tlong diff = (x - y)\
    \ * (x - y);\n\tif (diff < 0) {\n\t\treturn -1;\n\t}\n\t// the difference between\
    \ x and y is even and we choose the smaller value\n\tif (diff % 2 == 0) {\n\t\t\
    return y;\n\t}\n\t// the difference between x and y is odd and we choose the bigger\
    \ value\n\telse {\n\t\treturn x;\n\t}\n}\n/*\nThis function checks a string to\
    \ see if it contains an \n    exclamation mark.\n    >>> check_exclamation(\"\
    Hello\")\n    false\n    >>> check_exclamation(\"Hello!\")\n    true\n*/", "{\
    \ \n    if (x <= y && (x & 1) == 0) {\n        return x;\n    } else if (x < y\
    \ && (x & 1) == 1) {\n        return x + 1;\n    } else {\n        return -1;\n\
    \    }\n}", "{\n    long _min = min(x, y);\n    long _max = max(x, y);\n    long\
    \ e;\n    foreach(e; _min.._max)\n    {\n        if(e % 2 == 0)\n        {\n \
    \           return e;\n        }\n    }\n    return -1;\n}\n/*\nThe function takes\
    \ a positive number n and returns true if it's a power of\n    two and false otherwise.\n\
    \    \n    For example:\n    >>> pow_two(5L)\n    false\n    >>> pow_two(4L)\n\
    \    true\n*/", "{\n    // get all even numbers from x to y\n    auto evens =\
    \ iota(x, y+1).filter!(a => a % 2 == 0);\n    if (evens.empty) \n    {\n     \
    \   return -1;\n    }\n    return evens.front;\n}", "{\n    // Your code goes\
    \ here\n    long z = max(x, y);\n    long w = min(x, y);\n    long even = 0;\n\
    \    for (long i = z; i >= w; i--)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            even = i;\n            break;\n        }\n    }\n    if (even ==\
    \ 0)\n    {\n        return -1;\n    }\n    else\n    {\n        return even;\n\
    \    }\n}\n/*\nThis function takes a positive integer x and a positive integer\
    \ y and\n    returns a range of x numbers that are divisible by y.", "{\n    //\
    \ Return x if it is the largest and even number in the range.\n    if (x % 2 ==\
    \ 0 && x >= y) \n    {\n        return x;\n    }\n    // Return y if it is the\
    \ largest and even number in the range.\n    else if (y % 2 == 0 && y >= x) \n\
    \    {\n        return y;\n    }\n    // Return -1 if there is no even number\
    \ in the range.\n    else \n    {\n        return -1;\n    }\n}", "{\n    long\
    \ max = x;\n    if (x % 2 == 1) \n    {\n        x++;\n    }\n    for (; x <=\
    \ y; x += 2) \n    {\n        if (x > max) \n        {\n            max = x;\n\
    \        }\n    }\n    if (max == x) \n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    // Implement me\n    int num = -1;\n    if (x % 2 == 0)\n\
    \    {\n        num = x;\n    }\n    else\n    {\n        num = x + 1;\n    }\n\
    \    long z = max(x, y);\n    while (num <= z)\n    {\n        if (num <= y)\n\
    \        {\n            return num;\n        }\n        num += 2;\n    }\n   \
    \ return -1;\n}", "{\n    return -1L;\n}\n \n/*\nThis function takes a natural\
    \ number n as an argument and returns the sum of\nsquares of numbers from 0 to\
    \ n inclusive.", "{\n    if (x % 2 != 0) {\n        x += 1;\n    }\n    if (y\
    \ % 2 != 0) {\n        y -= 1;\n    }\n    if (x > y) {\n        return -1;\n\
    \    }\n    return y;\n}", "{\n\tif (x % 2L != 0)\n\t\tx += 1L;\n\tif (y % 2L\
    \ != 0)\n\t\ty -= 1L;\n\tif (x > y)\n\t\treturn -1L;\n\treturn y;\n}", "{\n  \
    \  /*\n    long sum = 0;\n    long i = 1;\n    while (i * 2 < 10)\n    {\n   \
    \     sum += i * 2;\n        i++;\n    }\n    writeln(sum);\n    */\n    //long\
    \ num = 0;\n    //num = (x+y)/2;\n    //return num;\n    if (x%2 != 0)\n    {\n\
    \        x += 1;\n    }\n    if (y%2 != 0)\n    {\n        y -= 1;\n    }\n  \
    \  if (x >= y)\n    {\n        return -1;\n    }\n    return y;\n}", "{\n    long\
    \ choose = -1;\n    long i = x + 1;\n    while (i <= y)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            choose = i;\n            break;\n        }\n\
    \        else\n        {\n            i = i + 1;\n        }\n    }\n    return\
    \ choose;\n}", "{ \n\tlong num1, num2;\n\tif(x>y)\n\t{\n\t\tnum1 = y;\n\t\tnum2\
    \ = x;\n\t}\n\telse\n\t{\n\t\tnum1 = x;\n\t\tnum2 = y;\n\t}\n\tfor(;num1<=num2;num1++)\n\
    \t{\n\t\tif(num1%2==0)\n\t\t{\n\t\t\treturn num1;\n\t\t}\n\t}\n\treturn -1;\n\
    }\n/*\nGiven a list of numbers, return the second biggest number in the list.\n\
    \    If there's no such number, return -1.", "{\n    long minNum = min(x, y);\n\
    \    long maxNum = max(x, y);\n    long maxEven = -1;\n    for (long i = minNum;\
    \ i <= maxNum; i++)\n    {\n        if (i % 2 == 0)\n        {\n            maxEven\
    \ = i;\n        }\n    }\n    return maxEven;\n}", "{\n    if(x%2==0 && y%2==0)\
    \ \n        return max(x,y);\n    else if(x%2==1 && y%2==1)\n        return -1;\n\
    \    else \n        return (x>y)? x-1 : y-1;\n}", "{\n    for (long i = y; i >=\
    \ x; i--)\n    {\n        if (i % 2 == 0)\n        {\n            return i;\n\
    \        }\n    }\n    return -1;\n}\n/*\nThis function takes two positive numbers\
    \ x and y and returns the\n    smallest odd integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.", "{\n    if(x>y)\n    {\n        return -1;\n    }\n    else\n \
    \   {\n        if(x%2==0)\n        {\n            return x;\n        }\n     \
    \   else\n        {\n            return choose_num(x+1,y);\n        }\n    }\n\
    }", "{\n\tstatic assert(x>0 && y>0);\n\tfor(; x<=y; x++) \n\t{\n\t\tif(x%2==0)\
    \ \n\t\t{\n\t\t\treturn x;\n\t\t}\n\t}\n\treturn -1;\n}\n/*\nThis function takes\
    \ two positive numbers x and y and returns the\n    closest to x and even number\
    \ that is in the range [x, y] inclusive. If \n    there's no such number, then\
    \ the function should return -1.", "{\n    long a;\n    int i = 0;\n    long array[];\n\
    \    if (x > y)\n    {\n        a = -1;\n    }\n    else\n    {\n        array\
    \ = new long[y - x + 1];\n        foreach (num; iota(x, y+1))\n        {\n   \
    \         if (num % 2 == 0)\n            {\n                array[i] = num;\n\
    \                i = i + 1;\n            }\n        }\n        if (i > 0)\n  \
    \      {\n            a = array[$-1];\n        }\n        else\n        {\n  \
    \          a = -1;\n        }\n    }\n    return a;\n}", "{\n    // your code\
    \ goes here...\n    long result = -1;\n    for(int i = x; i <= y; i++)\n    {\n\
    \        if(i % 2 == 0)\n        {\n            result = i;\n        }\n    }\n\
    \    return result;\n}\n \n/*\nThis function takes two positive numbers x and\
    \ y and returns the\n    smallest odd integer number that is in the range [x,\
    \ y] inclusive. If \n    there's no such number, then the function should return\
    \ -1.", "{\n    if (x % 2L == 0)\n    {\n        if (x == y)\n        {\n    \
    \        return x;\n        }\n        else\n        {\n            return max(x,\
    \ choose_num(x + 2L, y));\n        }\n    }\n    else\n    {\n        return choose_num(x\
    \ + 1L, y);\n    }\n}", "{ \n    if (x > y)\n        return -1;\n    return y\
    \ - ((y & 1) ^ 1);\n}\n/*\nThis function takes two positive numbers x and y and\
    \ returns a tuple \n    containing two numbers chosen from the range [x, y] inclusive.\
    \ The two \n    numbers should be different and their sum should be an even number.\
    \ If\n    there's no such pair, then the function should return (-1, -1).\n  \
    \  The two numbers in the returned tuple should be in ascending order.", "{\n\
    \    if (x > y)\n    {\n        return -1L;\n    }", "{ \n    static if (x > y)\n\
    \    {\n        writeln(\"x should be less than y!\");\n        return -1;\n \
    \   }\n    else\n    {\n        static if (x % 2 == 0)\n        {\n          \
    \  // If x is even, the chosen number is x\n            return x;\n        }\n\
    \        else\n        {\n            // If x is odd, the chosen number is the\
    \ even number between x and y\n            return choose_num(x + 1, y);\n    \
    \    }\n    }\n}", "{\n    long gcd = 0L;\n    long lcm = 0L;\n    long result\
    \ = 0L;\n    if(x == y) {\n        if(x%2 == 0) {\n            return x;\n   \
    \     } else {\n            return -1L;\n        }\n    }\n    if(x > y) {\n \
    \       gcd = x;\n        lcm = y;\n    } else {\n        gcd = y;\n        lcm\
    \ = x;\n    }\n    while (x != 0 && y != 0) {\n        if (x > y) {\n        \
    \    x %= y;\n        } else {\n            y %= x;\n        }\n    }\n    gcd\
    \ = x + y;\n    lcm = (lcm * gcd) / gcd;\n    if(lcm % 2 == 0) {\n        return\
    \ lcm;\n    } else {\n        return -1L;\n    }\n}\n/*\nThis function takes a\
    \ number n, and returns a type-safe tuple in which the \n    first number is equal\
    \ to n, and the second one is equal to the sum of \n    its digits.\n    \n  \
    \  For example:\n    >>> get_num_and_sum(314L)\n    (314L, 8L)\n    >>> get_num_and_sum(135L)\n\
    \    (135L, 9L)\n    \n*/\nTuple!(long, long) get_num_and_sum(long n) \n{\n  \
    \  long number = n;\n    long sum = 0L;\n    while(n != 0) {\n        sum += n\
    \ % 10;\n        n /= 10;\n    }\n    return tuple(number, sum);\n}\n/*\nThis\
    \ function takes a list of numbers, and returns the smallest number \n    in the\
    \ list.\n    \n    For example:\n    >>> get_min([5L, 3L, 9L, 2L, 4L])\n    2L\n\
    \    >>> get_min([1L, 2L, 1L, 2L, 1L])\n    1L\n    \n*/\nlong get_min(long[]\
    \ arr) \n{\n    long min = arr[0];\n   ", "{\n    if(x<=y) {\n        if(x%2==0)\
    \ {\n            return x;\n        } else {\n            return choose_num(x+1,\
    \ y);\n        }\n    } else {\n        return -1;\n    }\n}\n/*\nImplement factorial\
    \ for ints.  What happens if you call it with a large argument?\n    >>> factorial(3)\n\
    \    6\n    >>> factorial(5)\n    120\n    >>> factorial(20)\n    2432902008176640000\n\
    */\nlong factorial(long n) \n{\n    if(n==0) {\n        return 1;\n    } else\
    \ {\n        return n*factorial(n-1);\n    }\n}\n/*\n    Implement a function\
    \ that takes two positive integers x and y and \n    returns the biggest perfect\
    \ square that is less than or equal to the\n    square of x and has a remainder\
    \ of y when divided by x.\n    \n    For example:\n    >>> choose_ps(8L, 1L)\n\
    \    4L\n    >>> choose_ps(10L, 3L)\n    9L\n    >>> choose_ps(1L, 1L)\n    -1L\n\
    \    >>> choose_ps(2L, 0L)\n    -1L\n*/\nlong choose_ps(long x, long y) \n{\n\
    \    if(x==0) {\n        return -1;\n    } else {\n        if(x*x%y==0) {\n  \
    \          return x*x;\n        } else {\n            return choose_ps(x-1, y);\n\
    \        }\n    }\n}\n/*\nImplement a function that takes an array of integers\
    \ and a number n and\n    returns an array of integers which is composed of the\
    \ last n elements\n    of the input array.\n    \n    >>> a = [5, 9, -1, 4, 0,\
    \ 8, -2, 6, 7, -3, 3, 2]\n    >>> last_n(a, 5)\n    [-3, 3, 2, 5, 9]\n*/\ndarray<long>\
    \ last_n(darray<long> a, long n) \n{\n    if(n", "{\n    if(x <= y)\n    {\n \
    \       if(x % 2 == 0)\n        {\n            return x;\n        }\n        else\n\
    \        {\n            return choose_num(x + 1, y);\n        }\n    }\n    else\n\
    \    {\n        return -1;\n    }\n}", "{\n    if(x < 0L || y < 0L)\n    {\n\t\
    \    return -1L;\n    }\n    else\n    {\n\t    long num = (x < y) ? x : y;\n\t\
    \    long nummax = (x > y) ? x : y;\n\t    while(num <= nummax)\n\t    {\n\t\t\
    \    if(num % 2L == 0L)\n\t\t    {\n\t\t\t    return num;\n\t\t    }\n\t\t   \
    \ num++;\n\t    }\n\t    return -1L;\n    }\n}", "{\n    // Your code goes here.\n\
    \    //\n    if(x < 0 || y < 0)\n    {\n        return -1;\n    }\n    else if(x%2==0)\n\
    \    {\n        return x;\n    }\n    else if(y%2==0)\n    {\n        return y;\n\
    \    }\n    else\n    {\n        return -1;\n    }\n}", "{\n    if(x % 2 == 0\
    \ && y % 2 == 0)\n    {\n        return x > y ? x : y;\n    }\n    else if(x %\
    \ 2 == 0 && y % 2 != 0)\n    {\n        return x;\n    }\n    else if(x % 2 !=\
    \ 0 && y % 2 == 0)\n    {\n        return y;\n    }\n    else\n    {\n       \
    \ return -1;\n    }\n}", "{\n    static assert(0 <= x && 0 <= y);\n    for (long\
    \ i = y; i >= x; i -= 2)\n    {\n        if (i % 2 == 0)\n        {\n        \
    \    return i;\n        }\n    }\n    return -1;\n}\n/*\nThis function takes a\
    \ positive integer n and returns the biggest number\n    with the same number\
    \ of digits as n.", "{\n    if(y == -1)\n    {\n        return y;\n    }\n   \
    \ else\n    {\n        long []evenArray = new long[y-x+1];\n        long count\
    \ = 0;\n        long newNum = x;\n        while(newNum <= y)\n        {\n    \
    \        if(newNum % 2 == 0)\n            {\n                evenArray[count]\
    \ = newNum;\n                count++;\n            }\n            newNum++;\n\
    \        }\n        long max = evenArray[0];\n        for(int i = 0; i < evenArray.length;\
    \ i++)\n        {\n            if(evenArray[i] > max)\n            {\n       \
    \         max = evenArray[i];\n            }\n        }\n        return max;\n\
    \    }\n    \n}\n/*\nThis function takes two positive numbers x and y and returns\
    \ the\n    smallest odd integer number that is in the range [x, y] inclusive.\
    \ If \n    there's no such number, then the function should return -1.", "{\n\
    \    if (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n\
    \    return x + 1;\n}\n/*\nThis function takes two positive numbers x and y and\
    \ returns the\n    largest odd integer number that is in the range [x, y] inclusive.\
    \ If\n    there's no such number, then the function should return -1.", "{\n \
    \   if(x%2 == 1 && y%2 == 1)\n        return -1;\n    else if(x%2 == 1)\n    \
    \    return y;\n    else if(y%2 == 1)\n        return y-1;\n    else\n       \
    \ return y;\n}\n/*\n    This function takes a positive number n and returns the\n\
    \    length of the longest sequence of consecutive integers\n    that have the\
    \ same number of divisors.\n    \n    For example:\n    >>> find_sequences(20L)\n\
    \    4L\n    >>> find_sequences(1L)\n    1L\n    >>> find_sequences(2L)\n    2L\n\
    \    >>> find_sequences(8L)\n    4L\n    >>> find_sequences(15L)\n    1L\n*/\n\
    long find_sequences(long n) \n{\n    long max_length = 1;\n    long curr_length\
    \ = 1;\n    long num_divisors;\n    long prev_num_divisors;\n    long i;\n   \
    \ num_divisors = prev_num_divisors = divisors(n).length;\n    for(i = n-1; i >\
    \ 0; i--)\n    {\n        num_divisors = divisors(i).length;\n        if(num_divisors\
    \ == prev_num_divisors)\n            curr_length++;\n        else\n        {\n\
    \            max_length = max(max_length, curr_length);\n            curr_length\
    \ = 1;\n        }\n        prev_num_divisors = num_divisors;\n    }\n    return\
    \ max_length;\n}", "{\n    long answer = -1;\n    foreach(even; x..y+1)\n    {\n\
    \        if(even.isEven)\n        {\n            answer = even;\n        }\n \
    \   }\n    return answer;\n}\n/*\nThis function takes a positive number x and\
    \ returns true if x is a prime\n    number and false otherwise.", "{\n    import\
    \ std.math;\n    import std.typecons;\n    if (x == y)\n    {\n        if (x%2==0)\n\
    \        {\n            return x;\n        }\n        else\n        {\n      \
    \      return -1;\n        }\n    }\n    else if (x > y)\n    {\n        return\
    \ -1;\n    }\n    else\n    {\n        bool result = false;\n        for (long\
    \ i = y; i >= x; i--)\n        {\n            if (i%2==0)\n            {\n   \
    \             result = true;\n                return i;\n            }\n     \
    \   }\n        if (result == false)\n        {\n            return -1;\n     \
    \   }\n    }\n}", "{\n    return cast(long) ((x % 2 == 0) ? x : x + 1);\n}", "{\n\
    \    if(x % 2 == 0)\n    {\n        for(long i = x; i <= y; i += 2)\n        {\n\
    \            if(i % 2 == 0)\n            {\n                return i;\n      \
    \      }\n        }\n    }\n    else\n    {\n        for(long i = x + 1; i <=\
    \ y; i += 2)\n        {\n            if(i % 2 == 0)\n            {\n         \
    \       return i;\n            }\n        }\n    }\n    return -1;\n}", "{\n \
    \   if (x < 0)\n        return -1;\n    if (y < 0)\n        return -1;\n    if\
    \ (x > y)\n        return -1;\n    if (x % 2 == 0)\n        return x;\n    else\n\
    \        return choose_num(x + 1, y);\n}", "{\n    long z = -1;\n    for (long\
    \ i = min(x, y); i <= max(x, y); i++)\n    {\n        if (i % 2 == 0)\n      \
    \  {\n            z = i;\n        }\n    }\n    return z;\n}", "{\n    if (x <=\
    \ y)\n    {\n        long z = max(x, y);\n        if (z % 2 == 0)\n        {\n\
    \            return z;\n        }\n        else\n        {\n            return\
    \ z - 1;\n        }\n    }\n    else\n    {\n        return -1;\n    }\n}", "{\n\
    \    long result;\n    if (x > y) \n    {\n        result = -1;\n    }\n    else\
    \ \n    {\n        result = x + (x % 2);\n        if (result > y) \n        {\n\
    \            result = -1;\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
