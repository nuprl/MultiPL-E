name: HumanEval_13_greatest_common_divisor
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (a != 0 && b != 0) \n    {\n        if (a > b) \n\
    \        {\n            a %= b;\n        }\n        else \n        {\n       \
    \     b %= a;\n        }\n    }\n    return a + b;\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (true) \n    {\n        if (a == 0L) \n        {\n\
    \            return b;\n        }\n        b %= a;\n        if (b == 0L) \n  \
    \      {\n            return a;\n        }\n        a %= b;\n    }\n}\n/*\nReturn\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    Combine integers into a rational number\n    \n    >>> rational_number(1L, 2L)\n\
    \    Number(num=1L, den=2L)\n    >>> rational_number(3L, 2L)\n    Number(num=3L,\
    \ den=2L)\n*/\nNumber rational_number(long num, long den) \n{\n    long gcd =\
    \ greatest_common_divisor(num, den);\n    num /= gcd;\n    den /= gcd;\n    return\
    \ Number(num, den);\n}\n/*\nMultiply two rational numbers\n    >>> rational_number(1L,\
    \ 2L) * rational_number(3L, 4L)\n    Number(num=3L, den=8L)\n    >>> rational_number(2L,\
    \ 3L) * rational_number(4L, 5L)\n    Number(num=8L, den=15L)\n*/\nNumber opMul(Number\
    \ a, Number b) \n{\n    return rational_number(a.num * b.num, a.den * b.den);\n\
    }\n/*\nAdd two rational numbers\n    >>> rational_number(1L, 2L) + rational_number(3L,\
    \ 4L)\n    Number(num=5L, den=4L)\n    >>> rational_number(2L, 3L) + rational_number(4L,\
    \ 5L)\n    Number(num=22L, den=15L)\n*/\nNumber opAdd(\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxeoutzop.d(72): Error: basic type expected, not `unittest`\\\
    n/tmp/tmpxeoutzop.d(72): Error: found `unittest` when expecting `)`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxeoutzop.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return (b == 0) ? a : greatest_common_divisor(b, a % b);\n\
    }\n \n/*\n Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a / greatest_common_divisor(a, b)) * b;\n}\n/*\n\
    \ Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a / greatest_common_divisor(a, b)) * b;\n}\n \n\
    \ \nstruct fraction(T)\n{\n    T numerator;\n    T denominator;\n \n    this(T\
    \ n, T d)\n    {\n        numerator = n;\n        denominator = d;\n    }\n \n\
    \    void reduce() \n    {\n        long gcd = greatest_common_divisor(numerator,\
    \ denominator);\n        numerator /= gcd;\n        denominator /= gcd;\n    }\n\
    }\n \n//+/- operator to add two fractions\nfraction!T operator+(fraction!T lhs,\
    \ fraction!T rhs) \n{\n    long least_common_denominator = least_common_multiple(lhs.denominator,\
    \ rhs.denominator);\n    long left_factor = least_common_denominator / lhs.denominator;\n\
    \    long right_factor = least_common_denominator / rhs.denominator;\n    return\
    \ typeof(return)(\n        lhs.numerator * left_factor + rhs.numerator * right_factor,\n\
    \        least_common_denominator\n    );\n}\n \n//* operator to multiply two\
    \ fractions\nfraction!T operator*(fraction!T lhs, fraction!\nunittest\n{\n   \
    \ alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) ==\
    \ 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0fly9ndr.d(60): Error: semicolon expected, not `+`\\n/tmp/tmp0fly9ndr.d(60):\
    \ Error: declaration expected, not `+`\\n/tmp/tmp0fly9ndr.d(65): Error: declaration\
    \ expected, not `return`\\n/tmp/tmp0fly9ndr.d(69): Error: unrecognized declaration\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0fly9ndr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if(a < b) \n    {\n        auto tmp = a;\n        a = b;\n\
    \        b = tmp;\n    }\n    while(b != 0) \n    {\n        auto r = a % b;\n\
    \        a = b;\n        b = r;\n    }\n    return a;\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    a = abs(a);\n    b = abs(b);\n    a = b ? a : b;\n    b\
    \ = b ? b : a;\n    while (a != 0) {\n        auto t = b % a;\n        b = a;\n\
    \        a = t;\n    }\n    return b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if(a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if(a % b == 0)\n        return b;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n Return a least common multiple of two integers a and b\n  \
    \  >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n    \n*/\nlong least_common_multiple(long a, long b) \n{\n  \
    \  return a / greatest_common_divisor(a, b) * b;\n}\n/*\n Return a prime factorization\
    \ of a positive integer n\n    >>> prime_factorization(15L)\n    @(3L, 2L)\n \
    \   >>> prime_factorization(24L)\n    @(2L, 3L)\n*/\nalias prime_factor_tuple\
    \ = Tuple!(long, long);\nprime_factor_tuple[] prime_factorization(long n) \n{\n\
    \    //assert(n > 0);\n    if(n == 1)\n        return [];\n    auto factor = n;\n\
    \    while(true) \n    {\n        if(n % factor == 0)\n            break;\n  \
    \      factor -= 1;\n    }\n    auto factors = prime_factorization(n / factor);\n\
    \    if(factors[$ - 1][0] == factor)\n        factors[$ - 1][1] += 1;\n    else\n\
    \        factors ~= prime_factor_tuple(factor, 1);\n    return factors;\n}\n/*\n\
    \ Return a list of prime factors of a positive integer n\n    >>> prime_factors(15L)\n\
    \    @3L, @3L, @5L\n    >>> prime_factors(24L)\n    @2L, @2L, @2L, @3L\n*/\nlong[]\
    \ prime_factors(long n) \n{\n    long[] factors;\n    foreach(factor; prime_factorization(n))\
    \ \n    {\n        long count = factor[1];\n        while(count > 0) \n      \
    \  {\n            factors ~= factor[0\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiol1wik8.d(74): Error: found `unittest` when expecting `,`\\\
    n/tmp/tmpiol1wik8.d(83): Error: found `void` when expecting `,`\\n/tmp/tmpiol1wik8.d(83):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmpiol1wik8.d(83): Error: expression\
    \ expected, not `}`\\n/tmp/tmpiol1wik8.d(83): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmpiol1wik8.d(83): Error: found `End of File` when expecting\
    \ `]`\\n/tmp/tmpiol1wik8.d(83): Error: found `End of File` when expecting `;`\
    \ following statement\\n/tmp/tmpiol1wik8.d(83): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpiol1wik8.d(83): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpiol1wik8.d(83):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiol1wik8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    else\n        return\
    \ greatest_common_divisor(b % a, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0) \n        return b; \n    if (b == 0) \n   \
    \     return a; \n    long t;\n    while (b != 0) \n    {\n        t = b;\n  \
    \      b = a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        auto t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return (a == 0L || b == 0L) ? a + b : greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    // Handle 0 cases\n    if (a == 0)\n    {\n        return\
    \ b;\n    }\n    if (b == 0)\n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n    Return a least common multiple of two integers a and b\n\
    \    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n    >>> least_common_multiple(2L, 7L)\n    14L\n*/\nlong least_common_multiple(long\
    \ a, long b)\n{\n    // Handle 0 cases\n    if (a == 0)\n    {\n        return\
    \ b;\n    }\n    if (b == 0)\n    {\n        return a;\n    }\n    return (a *\
    \ b) / greatest_common_divisor(a, b);\n}\n/*\n    Return a least common multiple\
    \ of an array of numbers\n    >>> least_common_multiple([3L, 4L, 5L])\n    60L\n\
    \    >>> least_common_multiple([7L, 10L, 15L])\n    210L\n    >>> least_common_multiple([2L,\
    \ 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L])\n    2520L\n    >>> least_common_multiple([2L,\
    \ 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L,\
    \ 20L])\n    232792560L\n*/\nlong least_common_multiple(long[] a)\n{\n    // Handle\
    \ 0 cases\n    if (a.length == 0)\n    {\n        return 0;\n    }\n    // Handle\
    \ single element cases\n    if (a.length == 1)\n    {\n        return a[0];\n\
    \    }\n    // Create a type-checked dynamic array of longs\n    // The \"long\"\
    \ type is for 32-bit integers\n    // The \"L\" type suffix specifies the literal\
    \ constant is of type long\n\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpla_ji_f0.d(73): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpla_ji_f0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\t// If a or b is 0 then return 0\n\tif(a == 0L || b == 0L)\n\
    \t\treturn 0L;\n\t// If a == b then return a\n\tif(a == b)\n\t\treturn a;\n\t\
    // If a is negative, then return greatest_common_divisor(-a, b)\n\tif(a < 0L)\n\
    \t\treturn greatest_common_divisor(-a, b);\n\t// If b is negative, then return\
    \ greatest_common_divisor(a, -b)\n\tif(b < 0L)\n\t\treturn greatest_common_divisor(a,\
    \ -b);\n\t// If a > b then return greatest_common_divisor(b, a)\n\tif(a > b)\n\
    \t\treturn greatest_common_divisor(b, a);\n\t// Else return the result of calling\
    \ greatest_common_divisor(b mod a, a)\n\telse\n\t\treturn greatest_common_divisor(b\
    \ % a, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjqfb8bew.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmpjqfb8bew.__unittest_L32_C1()\
    \ [0x427ac1]\\n??:? void tmpjqfb8bew.__modtest() [0x427b48]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b5b]\\\
    n??:? __libc_start_main [0xee3fd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\tif (a == 0)\n\t\treturn b;\n\tif (b == 0)\n\t\treturn a;\n\
    \tif (a == b)\n\t\treturn a;\n\t\n\tif (a > b)\n\t\treturn greatest_common_divisor(a\
    \ % b, b);\n\telse\n\t\treturn greatest_common_divisor(a, b % a);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    auto gcd = (a, b) {\n        return b == 0 ? a : gcd(b,\
    \ a % b);\n    };\n    return gcd(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4hrfwno0.d(13): Error: variable `tmp4hrfwno0.greatest_common_divisor.gcd`\
    \ type `void` is inferred from initializer `(a, b)\\n{\\nreturn b == 0 ? a : gcd(b,\
    \ a % b);\\n}\\n`, and variables cannot be of type `void`\\n/tmp/tmp4hrfwno0.d(13):\
    \ Error: template lambda has no value\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp4hrfwno0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long  m, n;\n    long r = 0L;\n    m = abs(a);\n    n =\
    \ abs(b);\n    while (n > 0L) {\n        r = m % n;\n        m = n;\n        n\
    \ = r;\n    }\n    return m;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long x, y;\n    x = min(a, b);\n    y = max(a, b);\n   \
    \ while (y % x != 0)\n    {\n        y = y % x;\n        x = min(x, y);\n    \
    \    y = max(x, y);\n    }\n    return x;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcjw9_f8e.d(14): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpcjw9_f8e.d(15): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\n/tmp/tmpcjw9_f8e.d(19): Error: undefined identifier\
    \ `min`, did you mean function `main`?\\n/tmp/tmpcjw9_f8e.d(20): Error: undefined\
    \ identifier `max`, did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcjw9_f8e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long r;\n    while (b != 0) \n    {\n        r = a % b;\n\
    \        a = b;\n        b = r;\n    }\n    return a;\n}\n/*\nReturn a least common\
    \ multiple of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n  \
    \  15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\nReturn\
    \ a least common multiple of a list of integers \n    >>> least_common_multiple([3L,\
    \ 5L, 7L])\n    105L\n    >>> least_common_multiple([25L, 15L, 75L])\n    75L\n\
    */\nlong least_common_multiple(immutable(long)[] a) \n{\n    long result = 1L;\n\
    \    foreach (item; a) \n    {\n        result = least_common_multiple(result,\
    \ item);\n    }\n    return result;\n}\n/*\nReturn a modulus of two integers a\
    \ and b\n    >>> modulus(14L, 7L)\n    0L\n    >>> modulus(15L, 7L)\n    1L\n\
    */\nlong modulus(long a, long b) \n{\n    return a % b;\n}\n/*\nReturn a division\
    \ remainder of two integers a and b\n    >>> remainder(14L, 7L)\n    0L\n    >>>\
    \ remainder(15L, 7L)\n    1L\n*/\nlong remainder(long a, long b) \n{\n    return\
    \ a % b;\n}\n/*\nReturn an euclidian division of two integers a and b\n    >>>\
    \ div(14L, 7L)\n    2L\n    >>> div(15L, 7L)\n    2L\n*/\nlong div(long a, long\
    \ b) \n{\n    return a / b;\n}\n/*\nReturn a quotient of two integers a and b\n\
    \    >>> quotient(14L, 7L)\n    2L\n    >>> quotient(15L, 7L)\nunittest\n{\n \
    \   alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpak3i05dm.d(82): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpak3i05dm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    a = abs(a);\n    b = abs(b);\n    if (a == 0L)\n       \
    \ return b;\n    if (b == 0L)\n        return a;\n    long k = a;\n    long m\
    \ = b;\n    while (true) \n    {\n        long t = k % m;\n        if (t == 0L)\n\
    \            return m;\n        k = m;\n        m = t;\n    }\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    a = abs(a);\n    b = abs(b);\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return a rational number x/y.\n    >>> rational(1L, 2L)\n    (1L,\
    \ 2L)\n    >>> rational(2L, 2L)\n    (1L, 1L)\n    >>> rational(5L, 2L)\n    (5L,\
    \ 2L)\n*/\nTuple!(long, long) rational(long x, long y) \n{\n    long g = greatest_common_divisor(x,\
    \ y);\n    if (g != 0L) \n    {\n        x /= g;\n        y /= g;\n    }\n   \
    \ return tuple(x, y);\n}\n/*\n Return a rational number x/y.\n    >>> rational(1,\
    \ 2)\n    (1L, 2L)\n    >>> rational(2, 2)\n    (1L, 1L)\n    >>> rational(5,\
    \ 2)\n    (5L, 2L)\n*/\nTuple!(long, long) rational(int x, int y) \n{\n    return\
    \ rational(long(x), long(y));\n}\n/*\n Return a rational number x/y.\n    >>>\
    \ rational(1.5)\n    (3L, 2L)\n    >>> rational(0.5)\n    (\nunittest\n{\n   \
    \ alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) ==\
    \ 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4_gni_ce.d(75): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_gni_ce.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\treturn __gcd(a, b);\n}\n/*\n Return a least common multiple\
    \ of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n  \
    \  >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n\treturn a / greatest_common_divisor(a, b) * b;\n}\n/*\n Return\
    \ the standard deviation of an array of real numbers\n    >>> standard_deviation([1.0,\
    \ 3.0, 1.0, 3.0, 1.0, 3.0])\n    1.0\n    >>> round(standard_deviation([1.0, 4.0,\
    \ 7.0, 10.0]), 3)\n    3.316\n    >>> round(standard_deviation([1.0, 10.0, 100.0,\
    \ 1000.0]), 3)\n    364.054\n*/\ndouble standard_deviation(double[] values)\n\
    {\n\treturn sqrt(variance(values));\n}\n/*\n Return the variance of an array of\
    \ real numbers\n    >>> variance([1.0, 3.0, 1.0, 3.0, 1.0, 3.0])\n    1.0\n  \
    \  >>> round(variance([1.0, 4.0, 7.0, 10.0]), 3)\n    11.0\n    >>> round(variance([1.0,\
    \ 10.0, 100.0, 1000.0]), 3)\n    132225.0\n*/\ndouble variance(double[] values)\n\
    {\n\tdouble mean = sum(values) / cast(double)values.length;\n\tdouble accum =\
    \ 0.0;\n\tforeach(value; values)\n\t{\n\t\taccum += (value - mean) ** 2;\n\t}\n\
    \treturn accum / (values.length - 1);\n}\n/*\n Return covariance of two arrays\
    \ of real numbers\n    >>> round(covariance([1.0, 4.0, 7.0, 10.0], [3.0, 5.0,\
    \ 9.0, 14.0]), 3)\n    5.5\n    >>> round(\nunittest\n{\n    alias candidate =\
    \ greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpfk9ic5sv.d(58): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfk9ic5sv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
