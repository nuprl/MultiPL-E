language: d
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (a != 0 && b != 0) \n    {\n        if (a > b) \n\
    \        {\n            a %= b;\n        }\n        else \n        {\n       \
    \     b %= a;\n        }\n    }\n    return a + b;\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (true) \n    {\n        if (a == 0L) \n        {\n\
    \            return b;\n        }\n        b %= a;\n        if (b == 0L) \n  \
    \      {\n            return a;\n        }\n        a %= b;\n    }\n}\n/*\nReturn\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    Combine integers into a rational number\n    \n    >>> rational_number(1L, 2L)\n\
    \    Number(num=1L, den=2L)\n    >>> rational_number(3L, 2L)\n    Number(num=3L,\
    \ den=2L)\n*/\nNumber rational_number(long num, long den) \n{\n    long gcd =\
    \ greatest_common_divisor(num, den);\n    num /= gcd;\n    den /= gcd;\n    return\
    \ Number(num, den);\n}\n/*\nMultiply two rational numbers\n    >>> rational_number(1L,\
    \ 2L) * rational_number(3L, 4L)\n    Number(num=3L, den=8L)\n    >>> rational_number(2L,\
    \ 3L) * rational_number(4L, 5L)\n    Number(num=8L, den=15L)\n*/\nNumber opMul(Number\
    \ a, Number b) \n{\n    return rational_number(a.num * b.num, a.den * b.den);\n\
    }\n/*\nAdd two rational numbers\n    >>> rational_number(1L, 2L) + rational_number(3L,\
    \ 4L)\n    Number(num=5L, den=4L)\n    >>> rational_number(2L, 3L) + rational_number(4L,\
    \ 5L)\n    Number(num=22L, den=15L)\n*/\nNumber opAdd(\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzt3g5hv8.d(72): Error: basic type expected, not `unittest`

    /tmp/tmpzt3g5hv8.d(72): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzt3g5hv8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return (b == 0) ? a : greatest_common_divisor(b, a % b);\n\
    }\n \n/*\n Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a / greatest_common_divisor(a, b)) * b;\n}\n/*\n\
    \ Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a / greatest_common_divisor(a, b)) * b;\n}\n \n\
    \ \nstruct fraction(T)\n{\n    T numerator;\n    T denominator;\n \n    this(T\
    \ n, T d)\n    {\n        numerator = n;\n        denominator = d;\n    }\n \n\
    \    void reduce() \n    {\n        long gcd = greatest_common_divisor(numerator,\
    \ denominator);\n        numerator /= gcd;\n        denominator /= gcd;\n    }\n\
    }\n \n//+/- operator to add two fractions\nfraction!T operator+(fraction!T lhs,\
    \ fraction!T rhs) \n{\n    long least_common_denominator = least_common_multiple(lhs.denominator,\
    \ rhs.denominator);\n    long left_factor = least_common_denominator / lhs.denominator;\n\
    \    long right_factor = least_common_denominator / rhs.denominator;\n    return\
    \ typeof(return)(\n        lhs.numerator * left_factor + rhs.numerator * right_factor,\n\
    \        least_common_denominator\n    );\n}\n \n//* operator to multiply two\
    \ fractions\nfraction!T operator*(fraction!T lhs, fraction!\nunittest\n{\n   \
    \ alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) ==\
    \ 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwfyd4hob.d(60): Error: semicolon expected, not `+`

    /tmp/tmpwfyd4hob.d(60): Error: declaration expected, not `+`

    /tmp/tmpwfyd4hob.d(65): Error: declaration expected, not `return`

    /tmp/tmpwfyd4hob.d(69): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfyd4hob.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if(a < b) \n    {\n        auto tmp = a;\n        a = b;\n\
    \        b = tmp;\n    }\n    while(b != 0) \n    {\n        auto r = a % b;\n\
    \        a = b;\n        b = r;\n    }\n    return a;\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    a = abs(a);\n    b = abs(b);\n    a = b ? a : b;\n    b\
    \ = b ? b : a;\n    while (a != 0) {\n        auto t = b % a;\n        b = a;\n\
    \        a = t;\n    }\n    return b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if(a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if(a % b == 0)\n        return b;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n Return a least common multiple of two integers a and b\n  \
    \  >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n    \n*/\nlong least_common_multiple(long a, long b) \n{\n  \
    \  return a / greatest_common_divisor(a, b) * b;\n}\n/*\n Return a prime factorization\
    \ of a positive integer n\n    >>> prime_factorization(15L)\n    @(3L, 2L)\n \
    \   >>> prime_factorization(24L)\n    @(2L, 3L)\n*/\nalias prime_factor_tuple\
    \ = Tuple!(long, long);\nprime_factor_tuple[] prime_factorization(long n) \n{\n\
    \    //assert(n > 0);\n    if(n == 1)\n        return [];\n    auto factor = n;\n\
    \    while(true) \n    {\n        if(n % factor == 0)\n            break;\n  \
    \      factor -= 1;\n    }\n    auto factors = prime_factorization(n / factor);\n\
    \    if(factors[$ - 1][0] == factor)\n        factors[$ - 1][1] += 1;\n    else\n\
    \        factors ~= prime_factor_tuple(factor, 1);\n    return factors;\n}\n/*\n\
    \ Return a list of prime factors of a positive integer n\n    >>> prime_factors(15L)\n\
    \    @3L, @3L, @5L\n    >>> prime_factors(24L)\n    @2L, @2L, @2L, @3L\n*/\nlong[]\
    \ prime_factors(long n) \n{\n    long[] factors;\n    foreach(factor; prime_factorization(n))\
    \ \n    {\n        long count = factor[1];\n        while(count > 0) \n      \
    \  {\n            factors ~= factor[0\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5uez29q1.d(74): Error: found `unittest` when expecting `,`

    /tmp/tmp5uez29q1.d(83): Error: found `void` when expecting `,`

    /tmp/tmp5uez29q1.d(83): Error: found `{` when expecting `,`

    /tmp/tmp5uez29q1.d(83): Error: expression expected, not `}`

    /tmp/tmp5uez29q1.d(83): Error: found `End of File` when expecting `,`

    /tmp/tmp5uez29q1.d(83): Error: found `End of File` when expecting `]`

    /tmp/tmp5uez29q1.d(83): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmp5uez29q1.d(83): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp5uez29q1.d(83): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp5uez29q1.d(83): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5uez29q1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    else\n        return\
    \ greatest_common_divisor(b % a, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0) \n        return b; \n    if (b == 0) \n   \
    \     return a; \n    long t;\n    while (b != 0) \n    {\n        t = b;\n  \
    \      b = a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        auto t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return (a == 0L || b == 0L) ? a + b : greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    // Handle 0 cases\n    if (a == 0)\n    {\n        return\
    \ b;\n    }\n    if (b == 0)\n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n    Return a least common multiple of two integers a and b\n\
    \    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n    >>> least_common_multiple(2L, 7L)\n    14L\n*/\nlong least_common_multiple(long\
    \ a, long b)\n{\n    // Handle 0 cases\n    if (a == 0)\n    {\n        return\
    \ b;\n    }\n    if (b == 0)\n    {\n        return a;\n    }\n    return (a *\
    \ b) / greatest_common_divisor(a, b);\n}\n/*\n    Return a least common multiple\
    \ of an array of numbers\n    >>> least_common_multiple([3L, 4L, 5L])\n    60L\n\
    \    >>> least_common_multiple([7L, 10L, 15L])\n    210L\n    >>> least_common_multiple([2L,\
    \ 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L])\n    2520L\n    >>> least_common_multiple([2L,\
    \ 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L,\
    \ 20L])\n    232792560L\n*/\nlong least_common_multiple(long[] a)\n{\n    // Handle\
    \ 0 cases\n    if (a.length == 0)\n    {\n        return 0;\n    }\n    // Handle\
    \ single element cases\n    if (a.length == 1)\n    {\n        return a[0];\n\
    \    }\n    // Create a type-checked dynamic array of longs\n    // The \"long\"\
    \ type is for 32-bit integers\n    // The \"L\" type suffix specifies the literal\
    \ constant is of type long\n\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwcat630w.d(73): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwcat630w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\t// If a or b is 0 then return 0\n\tif(a == 0L || b == 0L)\n\
    \t\treturn 0L;\n\t// If a == b then return a\n\tif(a == b)\n\t\treturn a;\n\t\
    // If a is negative, then return greatest_common_divisor(-a, b)\n\tif(a < 0L)\n\
    \t\treturn greatest_common_divisor(-a, b);\n\t// If b is negative, then return\
    \ greatest_common_divisor(a, -b)\n\tif(b < 0L)\n\t\treturn greatest_common_divisor(a,\
    \ -b);\n\t// If a > b then return greatest_common_divisor(b, a)\n\tif(a > b)\n\
    \t\treturn greatest_common_divisor(b, a);\n\t// Else return the result of calling\
    \ greatest_common_divisor(b mod a, a)\n\telse\n\t\treturn greatest_common_divisor(b\
    \ % a, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt1iry874.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpt1iry874.__unittest_L32_C1() [0x427ac1]

    ??:? void tmpt1iry874.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\tif (a == 0)\n\t\treturn b;\n\tif (b == 0)\n\t\treturn a;\n\
    \tif (a == b)\n\t\treturn a;\n\t\n\tif (a > b)\n\t\treturn greatest_common_divisor(a\
    \ % b, b);\n\telse\n\t\treturn greatest_common_divisor(a, b % a);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    auto gcd = (a, b) {\n        return b == 0 ? a : gcd(b,\
    \ a % b);\n    };\n    return gcd(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf3n53tc0.d(13): Error: variable `tmpf3n53tc0.greatest_common_divisor.gcd`
    type `void` is inferred from initializer `(a, b)

    {

    return b == 0 ? a : gcd(b, a % b);

    }

    `, and variables cannot be of type `void`

    /tmp/tmpf3n53tc0.d(13): Error: template lambda has no value

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf3n53tc0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long  m, n;\n    long r = 0L;\n    m = abs(a);\n    n =\
    \ abs(b);\n    while (n > 0L) {\n        r = m % n;\n        m = n;\n        n\
    \ = r;\n    }\n    return m;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long x, y;\n    x = min(a, b);\n    y = max(a, b);\n   \
    \ while (y % x != 0)\n    {\n        y = y % x;\n        x = min(x, y);\n    \
    \    y = max(x, y);\n    }\n    return x;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1kbhe8e.d(14): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpn1kbhe8e.d(15): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpn1kbhe8e.d(19): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmpn1kbhe8e.d(20): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1kbhe8e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long r;\n    while (b != 0) \n    {\n        r = a % b;\n\
    \        a = b;\n        b = r;\n    }\n    return a;\n}\n/*\nReturn a least common\
    \ multiple of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n  \
    \  15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\nReturn\
    \ a least common multiple of a list of integers \n    >>> least_common_multiple([3L,\
    \ 5L, 7L])\n    105L\n    >>> least_common_multiple([25L, 15L, 75L])\n    75L\n\
    */\nlong least_common_multiple(immutable(long)[] a) \n{\n    long result = 1L;\n\
    \    foreach (item; a) \n    {\n        result = least_common_multiple(result,\
    \ item);\n    }\n    return result;\n}\n/*\nReturn a modulus of two integers a\
    \ and b\n    >>> modulus(14L, 7L)\n    0L\n    >>> modulus(15L, 7L)\n    1L\n\
    */\nlong modulus(long a, long b) \n{\n    return a % b;\n}\n/*\nReturn a division\
    \ remainder of two integers a and b\n    >>> remainder(14L, 7L)\n    0L\n    >>>\
    \ remainder(15L, 7L)\n    1L\n*/\nlong remainder(long a, long b) \n{\n    return\
    \ a % b;\n}\n/*\nReturn an euclidian division of two integers a and b\n    >>>\
    \ div(14L, 7L)\n    2L\n    >>> div(15L, 7L)\n    2L\n*/\nlong div(long a, long\
    \ b) \n{\n    return a / b;\n}\n/*\nReturn a quotient of two integers a and b\n\
    \    >>> quotient(14L, 7L)\n    2L\n    >>> quotient(15L, 7L)\nunittest\n{\n \
    \   alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp753xo5y6.d(82): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp753xo5y6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    a = abs(a);\n    b = abs(b);\n    if (a == 0L)\n       \
    \ return b;\n    if (b == 0L)\n        return a;\n    long k = a;\n    long m\
    \ = b;\n    while (true) \n    {\n        long t = k % m;\n        if (t == 0L)\n\
    \            return m;\n        k = m;\n        m = t;\n    }\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    a = abs(a);\n    b = abs(b);\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return a rational number x/y.\n    >>> rational(1L, 2L)\n    (1L,\
    \ 2L)\n    >>> rational(2L, 2L)\n    (1L, 1L)\n    >>> rational(5L, 2L)\n    (5L,\
    \ 2L)\n*/\nTuple!(long, long) rational(long x, long y) \n{\n    long g = greatest_common_divisor(x,\
    \ y);\n    if (g != 0L) \n    {\n        x /= g;\n        y /= g;\n    }\n   \
    \ return tuple(x, y);\n}\n/*\n Return a rational number x/y.\n    >>> rational(1,\
    \ 2)\n    (1L, 2L)\n    >>> rational(2, 2)\n    (1L, 1L)\n    >>> rational(5,\
    \ 2)\n    (5L, 2L)\n*/\nTuple!(long, long) rational(int x, int y) \n{\n    return\
    \ rational(long(x), long(y));\n}\n/*\n Return a rational number x/y.\n    >>>\
    \ rational(1.5)\n    (3L, 2L)\n    >>> rational(0.5)\n    (\nunittest\n{\n   \
    \ alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) ==\
    \ 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf862onrg.d(75): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf862onrg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\treturn __gcd(a, b);\n}\n/*\n Return a least common multiple\
    \ of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n  \
    \  >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n\treturn a / greatest_common_divisor(a, b) * b;\n}\n/*\n Return\
    \ the standard deviation of an array of real numbers\n    >>> standard_deviation([1.0,\
    \ 3.0, 1.0, 3.0, 1.0, 3.0])\n    1.0\n    >>> round(standard_deviation([1.0, 4.0,\
    \ 7.0, 10.0]), 3)\n    3.316\n    >>> round(standard_deviation([1.0, 10.0, 100.0,\
    \ 1000.0]), 3)\n    364.054\n*/\ndouble standard_deviation(double[] values)\n\
    {\n\treturn sqrt(variance(values));\n}\n/*\n Return the variance of an array of\
    \ real numbers\n    >>> variance([1.0, 3.0, 1.0, 3.0, 1.0, 3.0])\n    1.0\n  \
    \  >>> round(variance([1.0, 4.0, 7.0, 10.0]), 3)\n    11.0\n    >>> round(variance([1.0,\
    \ 10.0, 100.0, 1000.0]), 3)\n    132225.0\n*/\ndouble variance(double[] values)\n\
    {\n\tdouble mean = sum(values) / cast(double)values.length;\n\tdouble accum =\
    \ 0.0;\n\tforeach(value; values)\n\t{\n\t\taccum += (value - mean) ** 2;\n\t}\n\
    \treturn accum / (values.length - 1);\n}\n/*\n Return covariance of two arrays\
    \ of real numbers\n    >>> round(covariance([1.0, 4.0, 7.0, 10.0], [3.0, 5.0,\
    \ 9.0, 14.0]), 3)\n    5.5\n    >>> round(\nunittest\n{\n    alias candidate =\
    \ greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkd_rk879.d(58): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkd_rk879.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    while (a != 0) {\n        c = a;\n        a\
    \ = b % a;\n        b = c;\n    }\n    return b;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    // Base cases\n    if (a == 0)\n        return b;\n    if\
    \ (b == 0)\n        return a;\n    \n    // a is greater\n    if (a > b)\n   \
    \     return greatest_common_divisor(a-b, b);\n    return greatest_common_divisor(a,\
    \ b-a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n  \
    \  assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long tmp;\n    if (a < b)\n    {\n        tmp = a;\n   \
    \     a = b;\n        b = tmp;\n    }\n    while (b != 0)\n    {\n        tmp\
    \ = a % b;\n        a = b;\n        b = tmp;\n    }\n    return a;\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    auto div = cast(ulong)a % cast(ulong)b;\n    if (div ==\
    \ 0)\n        return (b < 0) ? -b : b;\n    return greatest_common_divisor(b,\
    \ div);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n  \
    \  assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n  while (b != 0) {\n    auto t = b;\n    b = a % b;\n    a =\
    \ t;\n  }\n  return a;\n}\n/*\n Return a least common multiple of two integers\
    \ a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkk5ro2cr.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkk5ro2cr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n    if (a > 0 && b > 0) {\n        while (a != b) {\n         \
    \   if (a > b) {\n                a -= b;\n            } else {\n            \
    \    b -= a;\n            }\n        }\n        return a;\n    } else {\n    \
    \    return 1L;\n    }\n    \n/*\n Return a least common multiple of two integers\
    \ a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(4L,\
    \ 6L)\n    12L\n*/\nlong least_common_multiple(long a, long b) \n    if (a > 0\
    \ && b > 0) {\n        auto n = a * b;\n        while (a != b) {\n           \
    \ if (a > b) {\n                a -= b;\n            } else {\n              \
    \  b -= a;\n            }\n        }\n        return n / a;\n    } else {\n  \
    \      return 1L;\n    }\n    \n/*\n Return a contructor of fraction\n    >>>\
    \ auto fraction = Fraction(2L, 3L);\n    >>> fraction.numerator\n    2L\n    >>>\
    \ fraction.denominator\n    3L\n*/\nstruct Fraction(long, long) {\n    this(long\
    \ numerator, long denominator) {\n        if (denominator == 0L) {\n         \
    \   throw new Exception(\"Error: denominator is zero\");\n        }\n        if\
    \ (denominator < 0L) {\n            numerator = -numerator;\n            denominator\
    \ = -denominator;\n        }\n        auto gcd = greatest_common_divisor(numerator,\
    \ denominator);\n        this.numerator = numerator / gcd;\n        this.denominator\
    \ = denominator / gcd;\n    }\n    \n    @property {\n        long getNumerator()\
    \ {\n            return this.numerator;\n        }\n    }\n    \n    @property\
    \ {\n        long getDenominator() {\n            return this.denominator;\n \
    \       }\n    }\n    \n    override {\n        auto toString() {\n          \
    \  return this.numerator ~ \"/\" ~ this.denominator;\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp771kiebz.d(12): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmp771kiebz.d(12): Error: declaration expected, not `if`

    /tmp/tmp771kiebz.d(16): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp771kiebz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0) \n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\tif(b == 0) return a;\n\telse return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    alias std.math.gcd;\n    return gcd(a, b);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0fz63xf_.d(13): Error: no identifier for declarator `std.math.gcd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0fz63xf_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    auto a_abs = a.abs;\n    auto b_abs = b.abs;\n    while\
    \ (b_abs != 0) {\n        auto t = b_abs;\n        b_abs = a_abs % b_abs;\n  \
    \      a_abs = t;\n    }\n    return a_abs;\n}\nlong greatest_common_divisor(Tuple!(long,\
    \ long) tpl) {\n    return greatest_common_divisor(tpl[0], tpl[1]);\n}\n/*\nReturn\
    \ a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) {\n    return a * b / greatest_common_divisor(a, b);\n}\nlong least_common_multiple(Tuple!(long,\
    \ long) tpl) {\n    return least_common_multiple(tpl[0], tpl[1]);\n}\n//     Fill\
    \ in factorial for the factorial of the given positive integer\n//     >>> factorial(4)\n\
    //     24\nlong factorial(long n) {\n    long fact = 1;\n    for (long i = 2;\
    \ i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n// Fill in factorial_recursive\
    \ for the factorial of the given positive integer\n//     >>> factorial_recursive(4)\n\
    //     24\nlong factorial_recursive(long n) {\n    return n == 0 ? 1 : n * factorial_recursive(n\
    \ - 1);\n}\n/*\nReturn the sum of the given floating-point numbers\n    >>> numbers_sum(1.0,\
    \ 2.0, 3.0)\n    6.0\n    >>> numbers_sum(1.0, 2.0, 3.0, 4.0)\n    10.0\n*/\n\
    double numbers_sum(double[] arr) {\n    double sum = 0;\n    foreach (item; arr)\
    \ {\n        sum += item;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long temp = a % b;\n   \
    \     a = b;\n        b = temp;\n    }\n    return abs(a);\n}\nunittest\n{\n \
    \   alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return gcd(a, b);\n}\n \n/*\n Return a pair of integers\
    \ that are multiplicative inverses of each other\n such that a*b == 1 (mod n)\n\
    \    >>> multiplicative_inverse(3L, 11L)\n    (4L, 11L)\n    >>> multiplicative_inverse(5L,\
    \ 7L)\n    (3L, 7L)\n*/\nauto multiplicative_inverse(long a, long n)\n{\n    auto\
    \ a0 = a;\n    auto n0 = n;\n    auto t0 = 0L;\n    auto t = 1L;\n    auto q =\
    \ long(n0 / a0);\n    auto r = n0 % a0;\n    while (r > 0)\n    {\n        auto\
    \ temp = (t0 - q * t) % n;\n        t0 = t;\n        t = temp;\n        n0 = a0;\n\
    \        a0 = r;\n        q = n0 / a0;\n        r = n0 % a0;\n    }\n    return\
    \ tuple(t, n);\n}\n \n \n/*\n Return the modular multiplicative inverse of a mod\
    \ n\n This algorithm only works when a and n are coprime\n    >>> modular_multiplicative_inverse(3L,\
    \ 11L)\n    4L\n    >>> modular_multiplicative_inverse(5L, 7L)\n    3L\n*/\nlong\
    \ modular_multiplicative_inverse(long a, long n)\n{\n    return multiplicative_inverse(a,\
    \ n)[0];\n}\n \n/*\n Return the solution to the linear congruence equation\n ax\
    \ == b (mod n) using the extended Euclidean algorithm.\n The solution will be\
    \ within the range [0, n)\n    >>> solve_linear_congruence(1L, 0L, 7L)\n    0L\n\
    \    >>> solve_linear_congruence(1L, 2L, 7L)\n    2L\n    >>> solve_linear_congruence(3L,\
    \ 2L, 7L)\n    5L\n    >>> solve_linear_congruence(3L, 2L, 9L)\n    2L\n*/\nlong\
    \ solve\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyg9g421t.d(73): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyg9g421t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (a % b == 0) \n    {\n        return b;\n    }\n    return\
    \ greatest_common_divisor(b, a % b);\n}\n/*\n Return a least common multiple of\
    \ two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>>\
    \ least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return abs(a * b) / greatest_common_divisor(a, b);\n}\n\
    /*\n    A rational number\n    >>> Rational(0)\n    Rational(0, 1)\n    >>> Rational(1)\n\
    \    Rational(1, 1)\n    >>> Rational(1, 2)\n    Rational(1, 2)\n    >>> Rational(1,\
    \ -2)\n    Rational(-1, 2)\n    >>> Rational(2, 4)\n    Rational(1, 2)\n    >>>\
    \ Rational(2, -4)\n    Rational(-1, 2)\n    >>> Rational(-1, 2)\n    Rational(-1,\
    \ 2)\n    >>> Rational(-1, -2)\n    Rational(1, 2)\n    >>> Rational(3, 2)\n \
    \   Rational(3, 2)\n    >>> Rational(3, -2)\n    Rational(-3, 2)\n    >>> Rational(-3,\
    \ 2)\n    Rational(-3, 2)\n    >>> Rational(-3, -2)\n    Rational(3, 2)\n    >>>\
    \ Rational(3L, 2L)\n    Rational(3, 2)\n    >>> Rational(3L, -2L)\n    Rational(-3,\
    \ 2)\n    >>> Rational(-3L, 2L)\n    Rational(-3, 2)\n    >>> Rational(-3L, -2L)\n\
    \    Rational(3, 2)\n    >>> Rational(0.1)\n    Rational(1, 10)\n    >>> Rational(0.5)\n\
    \    Rational(1, 2)\n    >>> Rational(1, -2)\n    Rational(-1, 2)\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbf9q4tui.d(35): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbf9q4tui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if(a % b == 0)\n        return b;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    // TODO: implement this\n    return 0L;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppce66ph1.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d35]

    ??:? void tmppce66ph1.__unittest_L16_C1() [0x427a31]

    ??:? void tmppce66ph1.__modtest() [0x427ab8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a8ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff30]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]

    ??:? runModuleUnitTests [0x42b831]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428184]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\tif(a == 0L)\n\t\treturn b;\n\tif(b == 0L)\n\t\treturn a;\n\
    \treturn greatest_common_divisor(b, a % b);\n}\n/*\n Accepts a numerator n and\
    \ a denominator d, and reduces the \n rational number n/d to lowest terms (i.e.\
    \ a numerator and \n denominator that have no common divisor greater than 1).\n\
    \    >>> reduce_fraction(6L, 10L)\n    (3L, 5L)\n    >>> reduce_fraction(40L,\
    \ 50L)\n    (4L, 5L)\n*/\nTuple!(long, long) reduce_fraction(long n, long d)\n\
    {\n\tlong gcd = greatest_common_divisor(n, d);\n\treturn tuple(n / gcd, d / gcd);\n\
    }\n/*\n Computes the square root of a float number.\n   >>> sqrt(2.0)\n   1.4142135623730951\n\
    \   >>> sqrt(4.0)\n   2.0\n*/\ndouble sqrt(double num)\n{\n\tdouble result = num;\n\
    \tdouble diff = num;\n\twhile(diff > 1e-12)\n\t{\n\t\tdiff = (result - num / result)\
    \ / 2;\n\t\tresult -= diff;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long temp;\n    if (a < b) \n    {\n        temp = a;\n\
    \        a = b;\n        b = temp;\n    }\n    if (a % b == 0) \n    {\n     \
    \   return b;\n    }\n    else \n    {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b==0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a%b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n  \
    \  assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return (b == 0L) ? a : greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) return greatest_common_divisor(b, a);\n    long\
    \ r;\n    while ((r = a % b) != 0) \n    {\n        a = b;\n        b = r;\n \
    \   }\n    return b;\n}\n/*\n Return the least common multiple of two integers\
    \ a and b\n \n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ abs(a * b) / greatest_common_divisor(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long temp;\n    // If a is less than b, then swap a and\
    \ b\n    if (a < b) \n    {\n        temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    // Compute the GCD\n    while (b != 0) \n    {\n        temp = a %\
    \ b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n/*\n Compute\
    \ the least common multiple of two integers a and b\n    >>> least_common_multiple(1L,\
    \ 2L)\n    2L\n    >>> least_common_multiple(10L, 15L)\n    30L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    \ Compute the power a^b in logarithmic time using successive squaring method\n\
    \    >>> power(2L, 3L)\n    8L\n    >>> power(3L, 3L)\n    27L\n*/\nlong power(long\
    \ a, long b) \n{\n    long result = 1L;\n    while (b != 0) \n    {\n        if\
    \ (b % 2L == 1L) \n        {\n            result *= a;\n        }\n        a *=\
    \ a;\n        b /= 2L;\n    }\n    return result;\n}\n/*\n Compute the number\
    \ of trailing zero bits of x\n    >>> num_trailing_zero_bits(4L)\n    2L\n   \
    \ >>> num_trailing_zero_bits(5L)\n    0L\n*/\nlong num_trailing_zero_bits(long\
    \ x) \n{\n    long result = 0L;\n    while (x % 2L == 0) \n    {\n        x /=\
    \ 2L;\n        result += 1L;\n    }\n    return result;\n}\n/*\n Compute x modulo\
    \ 2^p - 1\n    >>> mod_power_of_two_minus_one(5L, 3L)\n    2L\n    >>> mod_power_of_two_minus_one(13L,\
    \ 4\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjvs755j7.d(79): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjvs755j7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n  long[] p = new long[2];\n  p[0] = a;\n  p[1] = b;\n  while(p[1]\
    \ != 0)\n  {\n    long r = p[0] % p[1];\n    p[0] = p[1];\n    p[1] = r;\n  }\n\
    \  return p[0];\n}\n/*\n Return a least common multiple of two integers a and\
    \ b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n    \n*/\nlong least_common_multiple(long a, long b) \n{\n  return\
    \ a * b / greatest_common_divisor(a, b);\n}\n/*\n Return a prime factors of positive\
    \ integer n\n    >>> prime_factors(1L)\n    [1L]\n    >>> prime_factors(2L)\n\
    \    [2L]\n    >>> prime_factors(36L)\n    [2L, 2L, 3L, 3L]\n    \n*/\nlong[]\
    \ prime_factors(long n) \n{\n  if(n < 2)\n    return [1L];\n  long[] p = new long[2];\n\
    \  p[0] = 2L;\n  p[1] = n;\n  long[] f = new long[0];\n  while(p[1] % p[0] ==\
    \ 0)\n  {\n    p[1] /= p[0];\n    f ~= p[0];\n  }\n  long d = p[0];\n  while(p[1]\
    \ != 1)\n  {\n    d += 1L;\n    if(prime(d))\n    {\n      while(p[1] % d == 0)\n\
    \      {\n        p[1] /= d;\n        f ~= d;\n      }\n    }\n  }\n  return f;\n\
    }\n/*\n Return n-th Fibonacci number\n    >>> fibonacci(0L)\n    0L\n    >>> fibonacci(1L)\n\
    \    1L\n    >>> fibonacci(2L)\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphz7ssc5l.d(74): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphz7ssc5l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    a = abs(a);\n    b = abs(b);\n    while (a != 0 && b !=\
    \ 0) \n    {\n        auto r = a % b;\n        a = b;\n        b = r;\n    }\n\
    \    return a + b;\n}\n/*\n Return a least common multiple of two integers a and\
    \ b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ abs(a) / greatest_common_divisor(a, b) * abs(b);\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    while (b != 0) \n    {\n        c = a % b;\n\
    \        a = b;\n        b = c;\n    }\n    return a;\n}\n/*\n Return a least\
    \ common multiple of two integers a and b\n    >>> least_common_multiple(2L, 3L)\n\
    \    6L\n    >>> least_common_multiple(6L, 9L)\n    18L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Add\
    \ rational numbers a and b\n    >>> add(Rational(1L, 2L), Rational(1L, 2L))\n\
    \    Rational(1L, 1L)\n    >>> add(Rational(1L, 2L), Rational(2L, 3L))\n    Rational(7L,\
    \ 6L)\n*/\n@safe @nogc nothrow @property @pure unittest \n{\n    assert(add(Rational(1L,\
    \ 2L), Rational(1L, 2L)) == Rational(1L, 1L));\n    assert(add(Rational(1L, 2L),\
    \ Rational(2L, 3L)) == Rational(7L, 6L));\n}\nRational add(Rational a, Rational\
    \ b) \n{\n    return Rational(a.numerator * b.denominator + b.numerator * a.denominator,\n\
    \        a.denominator * b.denominator);\n}\n/*\n Subtract rational numbers a\
    \ and b\n    >>> subtract(Rational(1L, 2L), Rational(1L, 2L))\n    Rational(0L,\
    \ 1L)\n    >>> subtract(Rational(2L, 3L), Rational(1L, 2L))\n    Rational(1L,\
    \ 6L)\n*/\n@safe @nogc nothrow @property @pure unittest \n{\n    assert(subtract(Rational(1L,\
    \ 2L), Rational(1L, 2L)) == Rational(0L, 1L));\n    assert(subtract(Rational(2L,\
    \ 3L), Rational(\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3n2qub0m.d(40): Error: @identifier or @(ArgumentList) expected,
    not `@pure`

    /tmp/tmp3n2qub0m.d(40): Error: valid attributes are `@property`, `@safe`, `@trusted`,
    `@system`, `@disable`, `@nogc`

    /tmp/tmp3n2qub0m.d(57): Error: @identifier or @(ArgumentList) expected, not `@pure`

    /tmp/tmp3n2qub0m.d(57): Error: valid attributes are `@property`, `@safe`, `@trusted`,
    `@system`, `@disable`, `@nogc`

    /tmp/tmp3n2qub0m.d(61): Error: expression expected, not `unittest`

    /tmp/tmp3n2qub0m.d(62): Error: found `{` when expecting `,`

    /tmp/tmp3n2qub0m.d(63): Error: expression expected, not `alias`

    /tmp/tmp3n2qub0m.d(63): Error: found `candidate` when expecting `,`

    /tmp/tmp3n2qub0m.d(63): Error: expression expected, not `=`

    /tmp/tmp3n2qub0m.d(63): Error: found `greatest_common_divisor` when expecting
    `,`

    /tmp/tmp3n2qub0m.d(63): Error: expression expected, not `;`

    /tmp/tmp3n2qub0m.d(65): Error: found `assert` when expecting `,`

    /tmp/tmp3n2qub0m.d(65): Error: found `;` when expecting `,`

    /tmp/tmp3n2qub0m.d(66): Error: found'
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if(b == 0L) \n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n    pure nothrow @safe\n{\n    if (a < b) \n        return greatest_common_divisor(b,\
    \ a);\n    \n    if (b == 0) \n        return a;\n    \n    if (isEven(a)) \n\
    \    {\n        if (isEven(b)) \n            return 2 * greatest_common_divisor(a\
    \ >> 1, b >> 1);\n        else \n            return greatest_common_divisor(a\
    \ >> 1, b);\n    }\n    else \n    {\n        if (isEven(b)) \n            return\
    \ greatest_common_divisor(a, b >> 1);\n        else \n            return greatest_common_divisor((a\
    \ - b) >> 1, b);\n    }\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3anki6sg.d(20): Error: undefined identifier `isEven`

    /tmp/tmp3anki6sg.d(22): Error: undefined identifier `isEven`

    /tmp/tmp3anki6sg.d(29): Error: undefined identifier `isEven`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3anki6sg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (a != 0 and b != 0) {\n        a %= b;\n        swap(a,\
    \ b);\n    }\n    return a + b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprrmcsvxq.d(13): Error: found `and` when expecting `)`

    /tmp/tmprrmcsvxq.d(13): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprrmcsvxq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    a = abs(a);\n    b = abs(b);\n    if (a > b)\n        return\
    \ __d_binary_long_search(a % b, 0L, min(a, b), (long test) { return (a % test)\
    \ == 0 && (b % test) == 0; });\n    else\n        return __d_binary_long_search(b\
    \ % a, 0L, min(a, b), (long test) { return (a % test) == 0 && (b % test) == 0;\
    \ });\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcedmsrzi.d(16): Error: undefined identifier `__d_binary_long_search`

    /tmp/tmpcedmsrzi.d(18): Error: undefined identifier `__d_binary_long_search`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcedmsrzi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n  {\n    if (a < b) \n      return greatest_common_divisor(b, a);\n\
    \    if (b == 0) \n      return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n  }\n/*\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n  {\n    return\
    \ a / greatest_common_divisor(a, b) * b;\n  }\n/*\n    >>> deg_to_rad(90)\n  \
    \  pi / 2\n    >>> rad_to_deg(pi / 2)\n    90\n*/\ndouble deg_to_rad(double deg)\
    \ \n  {\n    return deg * pi / 180;\n  }\ndouble rad_to_deg(double rad) \n  {\n\
    \    return rad * 180 / pi;\n  }\n/*\n    >>> distance(2L, 3L, 0L, 0L)\n    3.605551275463989\n\
    \    >>> distance(-2L, -3L, 0L, 0L)\n    3.605551275463989\n    >>> distance(2L,\
    \ 3L, 2L, 3L)\n    0.0\n*/\ndouble distance(long from_x, long from_y, long to_x,\
    \ long to_y) \n  {\n    return sqrt((from_x - to_x) * (from_x - to_x) + (from_y\
    \ - to_y) * (from_y - to_y));\n  }\n// Return a direction vector from two positions.\n\
    //\n// It is a vector that points from from_x, from_y to to_x, to_y.\n// It will\
    \ have length 1.\n//\n// >>> direction(2L, 3L, 0L, 0L)\n// Tuple!(real,real)(-0.5547001962252291,\
    \ -0.8320502943378437)\n// >>> direction(-2L, -3L, 0L, 0L)\n// Tuple!\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4tbcx32d.d(37): Error: undefined identifier `pi`

    /tmp/tmp4tbcx32d.d(41): Error: undefined identifier `pi`

    /tmp/tmp4tbcx32d.d(53): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4tbcx32d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long divisor=0L;\n    a = abs(a);\n    b = abs(b);\n   \
    \ if (a == 0L || b == 0L)\n    {\n        if (a == 0L)\n        {\n          \
    \  divisor = b;\n        }\n        else if (b == 0L)\n        {\n           \
    \ divisor = a;\n        }\n    }\n    else\n    {\n        while(a != b)\n   \
    \     {\n            if (a > b)\n            {\n                a = a - b;\n \
    \           }\n            else\n            {\n                b = b - a;\n \
    \           }\n        }\n        divisor = a;\n    }\n    return divisor;\n}\n\
    // Return a least common multiple of two integers a and b\n// If a or b is zero,\
    \ return zero\nlong least_common_multiple(long a, long b)\n{\n    long multiple=0L;\n\
    \    if (a == 0L || b == 0L)\n    {\n        multiple = 0L;\n    }\n    else\n\
    \    {\n        auto gcd = greatest_common_divisor(a, b);\n        if (gcd ==\
    \ 0L)\n        {\n            multiple = 0L;\n        }\n        else\n      \
    \  {\n            multiple = a * b / gcd;\n        }\n    }\n    return multiple;\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\tif (a < b)\n\t\treturn greatest_common_divisor(b, a);\n\t\
    if (b == 0)\n\t\treturn a;\n\treturn greatest_common_divisor(b, a % b);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long t;\n    while (a % b != 0) \n    {\n        t = a;\n\
    \        a = b;\n        b = t % b;\n    }\n    return b;\n}\nunittest\n{\n  \
    \  alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if(a == 0L) \n    {\n        return b;\n    } \n    else\
    \ if(b == 0L) \n    {\n        return a;\n    } \n    else \n    {\n        //\
    \ Using Euclidean algorithm\n        if(a > b) \n        {\n            return\
    \ greatest_common_divisor(b, a % b);\n        } \n        else \n        {\n \
    \           return greatest_common_divisor(a, b % a);\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\n/*\n Return a least common\
    \ multiple of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n  \
    \  15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b)\n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ an absolute value of a number\n    >>> abs_value(-3L)\n    3L\n    >>> abs_value(3L)\n\
    \    3L\n*/\nlong abs_value(long a)\n{\n    return a < 0 ? -a : a;\n}\n/*\n Return\
    \ a difference of two integers a and b\n    >>> difference(3L, 5L)\n    -2L\n\
    \    >>> difference(25L, 15L)\n    10L\n*/\nlong difference(long a, long b)\n\
    {\n    return a - b;\n}\n/*\n Return a sum of two integers a and b\n    >>> sum(3L,\
    \ 5L)\n    8L\n    >>> sum(25L, 15L)\n    40L\n*/\nlong sum(long a, long b)\n\
    {\n    return a + b;\n}\n/*\n Return a product of two integers a and b\n    >>>\
    \ product(3L, 5L)\n    15L\n    >>> product(25L, 15L)\n    375L\n*/\nlong product(long\
    \ a, long b)\n{\n    return a * b;\n}\n/*\n Return a quotient of two integers\
    \ a and b\n    >>> quotient(3L, 5L)\n    0L\n    >>> quotient(25L, 15L)\n    1L\n\
    */\nlong quotient(long a, long b)\n{\n    return a / b;\n}\n/*\n Return a remainder\
    \ of two integers a and b\n    >>> remainder(3L, 5L)\n    3L\n    >>> remainder(25L,\
    \ 15L)\n    10L\n*/\nlong\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsymtl4a_.d(95): Error: no identifier for declarator `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsymtl4a_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) {\n        long t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    return a;\n}\n/*\n Return a least common multiple\
    \ of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n  \
    \  >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Integer\
    \ version of the modulus\n    >>> imod(7L, 5L)\n    2L\n    >>> imod(7L, -5L)\n\
    \    2L\n    >>> imod(-7L, 5L)\n    3L\n    >>> imod(-7L, -5L)\n    -2L\n    \n\
    */\nlong imod(long a, long b)\n{\n    long result = a % b;\n    if (result < 0\
    \ && b > 0 || result > 0 && b < 0)\n        result += b;\n    return result;\n\
    }\n/*\n Type-safe version of the modulus\n    >>> imod!int(7, 5)\n    2\n    >>>\
    \ imod!int(7, -5)\n    2\n    >>> imod!int(-7, 5)\n    3\n    >>> imod!int(-7,\
    \ -5)\n    -2\n    \n*/\nauto imod(T, T)(T a, T b)\n{\n    if (isFloatingPoint!T)\n\
    \        return a % b;\n    T result = a % b;\n    if (result < 0 && b > 0 ||\
    \ result > 0 && b < 0)\n        result += b;\n    return result;\n}\n/*\n Calculate\
    \ the factorial of a non-negative integer\n    >>> factorial(5)\n    120\n   \
    \ >>> factorial(10)\n    3628800\n    \n*/\nlong factorial(size_t n)\n{\n    long\
    \ result = 1;\n    foreach (i; 1 .. n + 1)\n        result *= i;\n    return result;\n\
    unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvog_wzt0.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvog_wzt0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    assert(a > 0L);\n    assert(b > 0L);\n    while (a != b)\
    \ \n    {\n        if (a > b) \n        {\n            a = a - b;\n        } \n\
    \        else \n        {\n            b = b - a;\n        }\n    }\n    return\
    \ a;\n}\n/*\n    Return a least common multiple of two integers a and b\n    >>>\
    \ least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(30L, 20L)\n\
    \    60L\n    \n*/\nlong least_common_multiple(long a, long b) \n{\n    assert(a\
    \ > 0L);\n    assert(b > 0L);\n    return (a / greatest_common_divisor(a, b))\
    \ * b;\n}\n/*\n    Return least common multiple of a sequence of integers a\n\
    \    >>> least_common_multiple([3L, 5L, 7L])\n    105L\n    >>> least_common_multiple([3L,\
    \ 5L, 7L, 9L])\n    945L\n    \n*/\nlong least_common_multiple(long a[]) \n{\n\
    \    assert(a.length > 0u);\n    long result = a[0];\n    for (size_t i = 1u;\
    \ i < a.length; i++) \n    {\n        result = least_common_multiple(result, a[i]);\n\
    \    }\n    return result;\n}\n/*\n    Convert a string to an integer\n    >>>\
    \ string_to_integer(\"1234\")\n    1234L\n    >>> string_to_integer(\"-1234\"\
    )\n    -1234L\n    >>> string_to_integer(\"abc\")\n    -1L\n    \n*/\nlong string_to_integer(string\
    \ s) \n{\n    long result = 0L;\n    long sign = 1L;\n    if (s.length == 0u)\
    \ \n    {\n        return -1L;\n    }\n    if (s[0] == '-') \n    {\n        sign\
    \ = -1L;\n        s = s[1 .. $];\n    }\n    foreach\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpva6fc5bc.d(50): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] a`

    /tmp/tmpva6fc5bc.d(84): Error: found `unittest` when expecting `(`

    /tmp/tmpva6fc5bc.d(85): Error: basic type expected, not `{`

    /tmp/tmpva6fc5bc.d(85): Error: no identifier for declarator `_error_`

    /tmp/tmpva6fc5bc.d(85): Error: found `{` when expecting `;`

    /tmp/tmpva6fc5bc.d(86): Error: expression expected, not `alias`

    /tmp/tmpva6fc5bc.d(86): Error: found `candidate` when expecting `)`

    /tmp/tmpva6fc5bc.d(86): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpva6fc5bc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \nin \n    assert(a >= 0L);\n    assert(b >= 0L);\nin\n    return\
    \ b == 0L ? a : greatest_common_divisor(b, a % b);\n}\n/*\n Return a least common\
    \ multiple of two integers a and b\n    >>> least_common_multiple(2L, 3L)\n  \
    \  6L\n    >>> least_common_multiple(2L, 4L)\n    4L\n*/\nlong least_common_multiple(long\
    \ a, long b) \nin \n    assert(a >= 0L);\n    assert(b >= 0L);\nin\n    return\
    \ (a / greatest_common_divisor(a, b)) * b;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1fjioapg.d(13): Error: statement expected to be `{ }`, not `assert`

    /tmp/tmp1fjioapg.d(14): Error: declaration expected, not `assert`

    /tmp/tmp1fjioapg.d(15): Error: declaration expected, not `in`

    /tmp/tmp1fjioapg.d(17): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1fjioapg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while(b!=0) \n    {\n        auto r = a % b;\n        a\
    \ = b;\n        b = r;\n    }\n    return a;\n}\n/*\n Return a least common multiple\
    \ of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n  \
    \  >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a / greatest_common_divisor(a, b) * b;\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        a %= b;\n        auto t\
    \ = a;\n        a = b;\n        b = t;\n    }\n    return a;\n}\n/*\n Return a\
    \ least common multiple of two integers a and b\n    >>> least_common_multiple(1L,\
    \ 5L)\n    5L\n    >>> least_common_multiple(5L, 1L)\n    5L\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(10L, 15L)\n    30L\n    >>> least_common_multiple(8L,\
    \ 4L)\n    8L\n    >>> least_common_multiple(1024L, 768L)\n    307200L\n*/\nlong\
    \ least_common_multiple(long a, long b) \n{\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor2(long\
    \ a, long b) \n{\n    if (b == 0) \n    {\n        return a;\n    }\n    else\
    \ \n    {\n        return greatest_common_divisor2(b, a % b);\n    }\n}\n/*\n\
    \ Return least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(1L, 1L)\n    1L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ nth Fibonacci number\n    >>> fibonacci(0L)\n    0L\n    >>> fibonacci(1L)\n\
    \    1L\n    >>> fibonacci(2L)\n    1L\n    >>> fibonacci(3L)\n    2L\n    >>>\
    \ fibonacci(4L)\n    3L\n    >>> fibonacci(5L)\n    5L\n    >>> fibonacci(10L)\n\
    \    55L\n*/\nlong fibonacci(long n) \n{\n    long prev_prev = 0L;\n    long prev\
    \ = 1L;\n    for (int i = 0; i < n; i++) \n    {\n        long cur = prev_prev\
    \ + prev;\n        prev_prev = prev;\n        prev = cur;\n    }\n    return prev_prev;\n\
    }\n/*\n Return nth Fibonacci number\n    >>> fibonacci(0L)\n    0L\n    >>> fibonacci(1L)\n\
    \    1L\n    >>> fibonacci(2L)\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1f1khsd.d(80): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1f1khsd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n  if (a == 0 || b == 0) \n  {\n    return 0;\n  }\n  if (a <\
    \ 0) \n  {\n    a = -a;\n  }\n  if (b < 0) \n  {\n    b = -b;\n  }\n \n  while\
    \ (a != b) \n  {\n    if (a > b) \n    {\n      a = a - b;\n    } \n    else \n\
    \    {\n      b = b - a;\n    }\n  }\n  return a;\n}\n/*\n Return a least common\
    \ multiple of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n  \
    \  15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n  if (a == 0 || b == 0) \n  {\n    return 0;\n  }\n  if (a <\
    \ 0) \n  {\n    a = -a;\n  }\n  if (b < 0) \n  {\n    b = -b;\n  }\n  return (a\
    \ * b) / greatest_common_divisor(a, b);\n}\nunittest\n{\n    alias candidate =\
    \ greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\twhile (true) \n\t{\n\t\tif (a < b)\n\t\t{\n\t\t\ta = a ^ b;\n\
    \t\t\tb = a ^ b;\n\t\t\ta = a ^ b;\n\t\t}\n\t\tif (b == 0)\n\t\t{\n\t\t\treturn\
    \ a;\n\t\t}\n\t\ta %= b;\n\t}\n}\n/*\n Return a least common multiple of two integers\
    \ a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(1L,\
    \ 3L)\n    3L\n*/\nlong least_common_multiple(long a, long b) \n{\n\treturn abs(a\
    \ * b) / greatest_common_divisor(a, b);\n}\n/*\n Return a least common multiple\
    \ of a sequence of integers\n    >>> least_common_multiple(2L, 3L, 5L)\n    30L\n\
    \    >>> least_common_multiple(0L, 0L, 0L)\n    0L\n*/\nlong least_common_multiple(in\
    \ long[] a) \n{\n\treturn a.reduce!((lhs, rhs) => least_common_multiple(lhs, rhs))();\n\
    }\n/*\n Return a least common multiple of a sequence of integers\n    >>> least_common_multiple(Tuple(2L,\
    \ 3L, 5L))\n    30L\n    >>> least_common_multiple(Tuple(0L, 0L, 0L))\n    0L\n\
    */\nlong least_common_multiple(in Tuple!(long, \"a\", \"b\", \"c\") x) \n{\n\t\
    return least_common_multiple(tupleof(x.a, x.b, x.c));\n}\n/*\n Return a least\
    \ common multiple of a sequence of integers\n    >>> least_common_multiple(2L,\
    \ 3L, 5L)\n    30L\n    >>> least_common_multiple(0L, 0L, 0L)\n    0L\n*/\nlong\
    \ least_common_multiple(in long a, in long b, in long c) \n{\n\treturn least_common_multiple(a,\
    \ b\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphfld6f44.d(71): Error: found `unittest` when expecting `,`

    /tmp/tmphfld6f44.d(80): Error: found `void` when expecting `,`

    /tmp/tmphfld6f44.d(80): Error: found `{` when expecting `,`

    /tmp/tmphfld6f44.d(80): Error: expression expected, not `}`

    /tmp/tmphfld6f44.d(80): Error: found `End of File` when expecting `,`

    /tmp/tmphfld6f44.d(80): Error: found `End of File` when expecting `)`

    /tmp/tmphfld6f44.d(80): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmphfld6f44.d(80): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphfld6f44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    auto p = tuple(a, b);\n    while (tuple(p.1, p.0 % p.1).0\
    \ != 0) \n    {\n        p = tuple(p.1, p.0 % p.1);\n    }\n    return p.1;\n\
    }\n/*\n  Return true if x is a prime number, false otherwise\n  \n  >>> is_prime(2L)\n\
    \  true\n  >>> is_prime(3L)\n  true\n  >>> is_prime(8L)\n  false\n  >>> is_prime(11L)\n\
    \  true\n  >>> is_prime(15L)\n  false\n  >>> is_prime(17L)\n  true\n  >>> is_prime(21L)\n\
    \  false\n  >>> is_prime(29L)\n  true\n  >>> is_prime(37L)\n  true\n  >>> is_prime(41L)\n\
    \  true\n  >>> is_prime(43L)\n  true\n  >>> is_prime(45L)\n  false\n  >>> is_prime(49L)\n\
    \  false\n  >>> is_prime(53L)\n  true\n  >>> is_prime(59L)\n  true\n  >>> is_prime(61L)\n\
    \  true\n  >>> is_prime(65L)\n  false\n  >>> is_prime(67L)\n  true\n  >>> is_prime(71L)\n\
    \  true\n  >>> is_prime(73L)\n  true\n  >>> is_prime(75L)\n  false\n  >>> is_prime(79L)\n\
    \  true\n  >>> is_prime(81L)\n  false\n  >>> is_prime(85L)\n  false\n  >>> is_prime(87L)\n\
    \  true\n  >>> is_prime(89L)\n  true\n  >>> is_prime(91L)\n  false\n  >>> is_prime(93L)\n\
    \  true\n  >>> is_prime(95L)\n  false\n  >>> is_prime(97L)\n  true\n  >>> is_prime(101L)\n\
    \  true\n  >>> is_prime(103L)\n  true\n  >>> is_prime(105L\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnqluf8fj.d(14): Error: found `0.1` when expecting `,`

    /tmp/tmpnqluf8fj.d(14): Error: expression expected, not `,`

    /tmp/tmpnqluf8fj.d(14): Error: found `p` when expecting `,`

    /tmp/tmpnqluf8fj.d(14): Error: found `0.1` when expecting `,`

    /tmp/tmpnqluf8fj.d(14): Error: found `0.00000` when expecting `)`

    /tmp/tmpnqluf8fj.d(14): Error: found `!=` instead of statement

    /tmp/tmpnqluf8fj.d(18): Error: declaration expected, not `return`

    /tmp/tmpnqluf8fj.d(19): Error: unrecognized declaration

    /tmp/tmpnqluf8fj.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnqluf8fj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    while (b != 0) {\n        a %= b;\n        (a, b) = (b, a);\n\
    \    }\n    return a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphxxopcek.d(18): Error: Using the result of a comma expression is
    not allowed

    /tmp/tmphxxopcek.d(18): Error: Using the result of a comma expression is not allowed

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphxxopcek.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long r;\n    while (b != 0) {\n        r = a % b;\n    \
    \    a = b;\n        b = r;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) \n    {\n        long t = b;\n        b =\
    \ a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L || b == 0L)\n        return 0L;\n    return\
    \ abs(a) > abs(b) ?  greatest_common_divisor(b, a % b) : greatest_common_divisor(a,\
    \ b % a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxdzh71vh.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dfd]

    ??:? void tmpxdzh71vh.__unittest_L17_C1() [0x427add]

    ??:? void tmpxdzh71vh.__modtest() [0x427b7c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fad5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]

    ??:? runModuleUnitTests [0x42b8f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42824c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n    {\n        auto temp = a;\n        a = b;\n\
    \        b = temp;\n    }\n    while (b != 0) \n    {\n        auto r = a % b;\n\
    \        a = b;\n        b = r;\n    }\n    return a;\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) {\n        long t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    return a;\n}\n \n/*\n Return lowest common multiple\
    \ of two integers a and b\n    >>> lowest_common_multiple(2L, 3L)\n    6L\n  \
    \  >>> lowest_common_multiple(10L, 15L)\n    30L\n*/\nlong lowest_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n \n\
    /*\n Return lowest common multiple of a sequence of integers\n    >>> lowest_common_multiple(2L,\
    \ 3L, 4L)\n    12L\n    >>> lowest_common_multiple(10L, 15L, 20L)\n    60L\n*/\n\
    long lowest_common_multiple(in long[] values) \n{\n    long lcm = values[0];\n\
    \    foreach (v; values[1 .. $]) {\n        lcm = lowest_common_multiple(lcm,\
    \ v);\n    }\n    return lcm;\n}\n \n/*\n Return a sequence of consecutive integers\n\
    \    >>> range(0L, 5L)\n    [0L, 1L, 2L, 3L, 4L]\n    >>> range(10L, 15L)\n  \
    \  [10L, 11L, 12L, 13L, 14L]\n*/\nlong[] range(long begin, long end)\n{\n    return\
    \ begin .. end;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi_1qnmis.d(58): Error: found `..` when expecting `;` following
    `return` statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_1qnmis.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return (a % b == 0) ? b : greatest_common_divisor(b, a %\
    \ b);\n}\n/*\n Return a least common multiple of two integers a and b\n    >>>\
    \ least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n\
    \    75L\n    \n*/\nlong least_common_multiple(long a, long b)\n{\n    return\
    \ a / greatest_common_divisor(a, b) * b;\n}\n/*\n * Returns the rung length of\
    \ the binomial tree which is the same\n * as the power of the ladder of binomial\
    \ tree.\n *\n * @param n a height of the tree\n * @return a rung length of the\
    \ tree\n */\nlong length(long n)\n{\n    return nth_power_of_two(n) + 1;\n}\n\
    /*\n * Returns n-th power of 2.\n *\n * @param n a power of 2\n * @return n-th\
    \ power of 2\n */\nlong nth_power_of_two(long n)\n{\n    return 2 ^^ n;\n}\n/*\n\
    \ * Returns the height of the tree.\n *\n * @param a length of the tree\n * @return\
    \ a height of the tree\n */\nlong height(long a)\n{\n    return isqrt(a - 1);\n\
    }\n/*\n * Returns an index of the tree level that contains `a` elements.\n *\n\
    \ * @param a number of elements\n * @return an index of the tree level\n */\n\
    long level_index(long a)\n{\n    return ilog2(a);\n}\n/*\n * Returns the number\
    \ of elements in the tree level indexed by `i`.\n *\n * @param i an index of the\
    \ tree level\n * @return the number of elements in the tree level\n */\nlong level_size(long\
    \ i)\n{\n    return nth_power_of_two(i);\n}\n/*\n * Returns index of the first\
    \ element in the tree level indexed by `i`.\n *\n * @param i an index of the tree\
    \ level\n * @return an index of the first element in the tree level\n */\nlong\
    \ level_start\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17n0ggnp.d(85): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17n0ggnp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n    /*\n    >>> greatest_common_divisor(3L, 5L)\n    1L\n    >>>\
    \ greatest_common_divisor(25L, 15L)\n    5L\n    */\n    {\n    long m = abs(a);\n\
    \    long n = abs(b);\n    while (n != 0) {\n        long r = m % n;\n       \
    \ m = n;\n        n = r;\n    }\n    return m;\n}\n/*\nReturn a least common multiple\
    \ of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n  \
    \  >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n    /*\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>>\
    \ least_common_multiple(25L, 15L)\n    75L\n    */\n    {\n    long m = abs(a);\n\
    \    long n = abs(b);\n    if (m == 0L || n == 0L) {\n        return 0L;\n   \
    \ }\n    long r = greatest_common_divisor(m, n);\n    return (m / r) * n;\n}\n\
    unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    a = abs(a);\n    b = abs(b);\n    while (a and b) {\n  \
    \      if (a > b) \n            a %= b;\n        else \n            b %= a;\n\
    \    }\n    return a + b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6cskbfv4.d(15): Error: found `and` when expecting `)`

    /tmp/tmp6cskbfv4.d(15): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6cskbfv4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (a != 0 && b != 0) \n    {\n        if (a > b) \n\
    \        {\n            a %= b;\n        } \n        else \n        {\n      \
    \      b %= a;\n        }\n    }\n    return max(a, b);\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp294piih3.d(24): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp294piih3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n    pure\n{\n    while(b != 0)\n    {\n        (a, b) = (b, a %\
    \ b);\n    }\n    return a;\n}\n/*\n Return the least common multiple of two integers\
    \ a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n    pure\n{\n\
    \    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return a rational\
    \ number from a pair of integers\n    >>> Rational(3L, 5L)\n    (3L, 5L)\n   \
    \ >>> Rational(25L, 15L)\n    (5L, 3L)\n*/\nRational!(long) Rational(long a, long\
    \ b) pure \n{\n    if(a == 0)\n    {\n        return tuple(0L, 1L);\n    }\n \
    \   const gcd = greatest_common_divisor(a, b);\n    return tuple(a / gcd, b /\
    \ gcd);\n}\n/*\n Return the numerator of the rational number\n    >>> numerator(Rational(25L,\
    \ 15L))\n    5L\n*/\nlong numerator(Rational!(long) value) pure \n{\n    return\
    \ value[0];\n}\n/*\n Return the denominator of the rational number\n    >>> denominator(Rational(25L,\
    \ 15L))\n    3L\n*/\nlong denominator(Rational!(long) value) pure \n{\n    return\
    \ value[1];\n}\n/*\n Return the negation of the rational number\n    >>> negate(Rational(25L,\
    \ 15L))\n    (-5L, 3L)\n*/\nRational!(long) negate(Rational!(long) value) pure\
    \ \n{\n    return tuple(-value[0], value[1]);\n}\n/*\n Return the inverse of the\
    \ rational number\n    >>> inverse(Rational(25L, 15L))\n    (3L, 5L)\n*/\nRational!(long)\
    \ inverse(Rational!(long) value) pure \n\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp02selm_h.d(82): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp02selm_h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long t;\n    while (b != 0) {\n        t = b;\n        b\
    \ = a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n  return b == 0 ? a : greatest_common_divisor(b, a % b);\n}\n\
    unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if(a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if(a == 0)\n        return b;\n    return greatest_common_divisor(b % a,\
    \ a);\n}\n/*\n Return a least common multiple of two integers a and b\n    >>>\
    \ least_common_multiple(2L, 3L)\n    6L\n    >>> least_common_multiple(6L, 12L)\n\
    \    12L\n    >>> least_common_multiple(0L, 1L)\n    0L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    if(a == 0 || b == 0)\n        return 0;\n    return a /\
    \ greatest_common_divisor(a, b) * b;\n}\n/*\n Return a greatest common divisor\
    \ of two rational numbers a and b\n    >>> greatest_common_divisor(Ratio!int(3,\
    \ 7), Ratio!int(5, 11))\n    Ratio!int(1, 77)\n    >>> greatest_common_divisor(Ratio!int(25,\
    \ 15), Ratio!int(15, 25))\n    Ratio!int(1, 5)\n    >>> greatest_common_divisor(Ratio!int(0,\
    \ 1), Ratio!int(2, 3))\n    Ratio!int(0, 1)\n*/\nRatio!int greatest_common_divisor(Ratio!int\
    \ a, Ratio!int b) \n{\n    if(a.denominator < b.denominator)\n        return greatest_common_divisor(b,\
    \ a);\n    if(a.denominator == 0)\n        return b;\n    return greatest_common_divisor(b\
    \ % a, a);\n}\n/*\n Return a least common multiple of two rational numbers a and\
    \ b\n    >>> least_common_multiple(Ratio!int(3, 7), Ratio!int(5, 11))\n    Ratio!int(15,\
    \ 77)\n    >>> least_common_multiple(Ratio!int(25, 15), Ratio!int(15, 25))\n \
    \   Ratio!int(5, 3)\n    >>> least_common_multiple(Ratio!\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpltcd6zys.d(51): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpltcd6zys.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (a != 0L && b != 0L) \n    {\n        if (a > b) \n\
    \        {\n            a %= b;\n        } \n        else \n        {\n      \
    \      b %= a;\n        }\n    }\n    return a + b;\n}\n/*\nReturn the least common\
    \ multiple of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n  \
    \  15L\n    >>> least_common_multiple(5L, 3L)\n    15L\n    >>> least_common_multiple(3L,\
    \ 7L)\n    21L\n    >>> least_common_multiple(7L, 3L)\n    21L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a / greatest_common_divisor(a, b)) * b;\n}\n/*\n\
    Return the greatest common divisor of a sequence of integers\n    >>> greatest_common_divisor(1L,\
    \ 7L, 4L)\n    1L\n    >>> greatest_common_divisor(8L, 4L, 12L)\n    4L\n    >>>\
    \ greatest_common_divisor(27L, 9L, 18L)\n    9L\n    >>> greatest_common_divisor(21L,\
    \ 7L, 14L)\n    7L\n*/\nlong greatest_common_divisor(R)(R xs) \n{\n    auto e\
    \ = xs.front;\n    foreach (n; xs.dropOne) \n    {\n        e = greatest_common_divisor(e,\
    \ n);\n    }\n    return e;\n}\n/*\nReturn the least common multiple of a sequence\
    \ of integers\n    >>> least_common_multiple(2L, 3L, 4L)\n    12L\n    >>> least_common_multiple(7L,\
    \ 5L, 9L)\n    315L\n    >>> least_common_multiple(21L, 14L, 7L)\n    378L\n \
    \   >>> least_common_multiple(42L, 21L, 14L)\n    378L\n*/\nlong least_common_multiple(R)(R\
    \ xs) \n{\n    auto\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp64yhfojb.d(75): Error: basic type expected, not `unittest`

    /tmp/tmp64yhfojb.d(75): Error: no identifier for declarator `_error_`

    /tmp/tmp64yhfojb.d(75): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64yhfojb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) \n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0) \n        return a;\n    return greatest_common_divisor(b, a\
    \ % b);\n}\n/*\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ a * b / greatest_common_divisor(a, b);\n}\n/*\n    >>> factorial(4L)\n    24L\n\
    \    >>> factorial(0L)\n    1L\n*/\nlong factorial(long n) \n{\n    if (n == 0)\n\
    \        return 1;\n    return n * factorial(n - 1);\n}\n/*\n    >>> fibonacci(0L)\n\
    \    0L\n    >>> fibonacci(1L)\n    1L\n    >>> fibonacci(2L)\n    1L\n    >>>\
    \ fibonacci(3L)\n    2L\n    >>> fibonacci(4L)\n    3L\n    >>> fibonacci(5L)\n\
    \    5L\n    >>> fibonacci(6L)\n    8L\n    >>> fibonacci(20L)\n    6765L\n*/\n\
    long fibonacci(long n) \n{\n    if (n < 2)\n        return n;\n    return fibonacci(n\
    \ - 1) + fibonacci(n - 2);\n}\n/*\n    >>> iterative_fibonacci(0L)\n    0L\n \
    \   >>> iterative_fibonacci(1L)\n    1L\n    >>> iterative_fibonacci(2L)\n   \
    \ 1L\n    >>> iterative_fibonacci(3L)\n    2L\n    >>> iterative_fibonacci(4L)\n\
    \    3L\n    >>> iterative_fibonacci(5L)\n    5L\n    >>> iterative_fibonacci(6L)\n\
    \    8L\n    >>> iterative_fibonacci(20L\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6y1ken2x.d(65): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6y1ken2x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if(b == 0L)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    assert(a >= 0);\n    assert(b >= 0);\n    if (a == 0) {\n\
    \        return b;\n    } else if (b == 0) {\n        return a;\n    } else {\n\
    \        return greatest_common_divisor(b, a % b);\n    }\n}\nunittest\n{\n  \
    \  alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (a != 0 && b != 0) \n    {\n        if (a > b) \n\
    \        {\n            a %= b;\n        } \n        else \n        {\n      \
    \      b %= a;\n        }\n    }\n    return max(a, b);\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp294piih3.d(24): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp294piih3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n  if (b == 0)\n    return a;\n  else\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0 || b == 0) {\n        return 1;\n    }\n    a\
    \ = abs(a);\n    b = abs(b);\n    if (a == b) {\n        return a;\n    }\n  \
    \  if (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n  \
    \  return greatest_common_divisor(a, b - a);\n}\n/*\nReturn a least common multiple\
    \ of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n  \
    \  >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b)\n{\n    a = abs(a);\n    b = abs(b);\n    return a / greatest_common_divisor(a,\
    \ b) * b;\n}\n/*\nReturn an irreducible fraction for the given a/b fraction.\n\
    \    >>> to_reduced_fraction(2L, 3L)\n    (2L, 3L)\n    >>> to_reduced_fraction(3L,\
    \ 5L)\n    (3L, 5L)\n    >>> to_reduced_fraction(6L, 10L)\n    (3L, 5L)\n    >>>\
    \ to_reduced_fraction(4L, 8L)\n    (1L, 2L)\n*/\nauto to_reduced_fraction(long\
    \ a, long b)\n{\n    long div = greatest_common_divisor(a, b);\n    return tuple(a\
    \ / div, b / div);\n}\n/*\nReturn a list of irreducible fractions representing\
    \ a given number.\n    >>> egyptian_fractions(2L, 3L)\n    [(1L, 2L), (1L, 6L)]\n\
    \    >>> egyptian_fractions(3L, 8L)\n    [(1L, 3L), (1L, 24L)]\n    >>> egyptian_fractions(1L,\
    \ 2L)\n    [(1L, 2L)]\n    >>> egyptian_fractions(7L, 12L)\n    [(1\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm53rdxi6.d(55): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm53rdxi6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    // TODO: implement me\n    long minnum = min(a, b);\n  \
    \  long maxnum = max(a, b);\n    long gcd = 1;\n    for (int i = 1; i <= minnum;\
    \ i++) {\n        if (minnum % i == 0) {\n            if (maxnum % i == 0) {\n\
    \                gcd = i;\n            }\n        }\n    }\n    return gcd;\n\
    }\n/*\n Rotate a list L n steps to the left\n     >>> rotate_list([1, 2, 3, 4,\
    \ 5], 1)\n     [2, 3, 4, 5, 1]\n     >>> rotate_list([1, 2, 3, 4, 5], 3)\n   \
    \  [4, 5, 1, 2, 3]\n     >>> rotate_list([1, 2, 3, 4, 5], 12)\n     [4, 5, 1,\
    \ 2, 3]\n*/\nList!(int) rotate_list(List!(int) l, int n) \n{\n    // TODO: implement\
    \ me\n    int m = l.length;\n    n = n % m;\n    return l[n..m] ~ l[0..n];\n}\n\
    /*\n     Return a list of lists containing cartesian product of the \n     given\
    \ lists of size n\n     >>> cartesian_product(3, [[1, 2], [3, 4], [5, 6]])\n \
    \    [[1, 3, 5], [1, 3, 6], [1, 4, 5], [1, 4, 6], [2, 3, 5], [2, 3, 6], [2, 4,\
    \ 5], [2, 4, 6]]\n     >>> cartesian_product(1, [[1, 2], [3, 4], [5, 6]])\n  \
    \   [[1], [2], [3], [4], [5], [6]]\n     >>> cartesian_product(0, [[1, 2], [3,\
    \ 4], [5, 6]])\n     [[]]\n*/\nList!(List!(int)) cartesian_product(int n, List!(List!(int))\
    \ l) \n{\n    // TODO: implement me\n    int m =\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ca33mr1.d(56): Error: expression expected, not `unittest`

    /tmp/tmp_ca33mr1.d(57): Error: semicolon expected, not `{`

    /tmp/tmp_ca33mr1.d(65): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ca33mr1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    a = abs(a); b = abs(b);\n    while (b) { a %= b; swap(a,\
    \ b); }\n    return a;\n}\n/*\n Return a least common multiple of two integers\
    \ a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(1L,\
    \ 5L)\n    5L\n    >>> least_common_multiple(15L, 5L)\n    15L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a / greatest_common_divisor(a, b)) * b;\n}\n/*\n\
    \ Return an array of a prime factors of an integer n\n    >>> prime_factors(2L)\n\
    \    [2L]\n    >>> prime_factors(4L)\n    [2L, 2L]\n    >>> prime_factors(16L)\n\
    \    [2L, 2L, 2L, 2L]\n    >>> prime_factors(20L)\n    [2L, 2L, 5L]\n    >>> prime_factors(50L)\n\
    \    [2L, 5L, 5L]\n    >>> prime_factors(35L)\n    [5L, 7L]\n    >>> prime_factors(12L)\n\
    \    [2L, 2L, 3L]\n    >>> prime_factors(123L)\n    [3L, 41L]\n    >>> prime_factors(10**5\
    \ + 3)\n    [100019L]\n*/\nlong[] prime_factors(long n) \n{\n    import std.typecons\
    \ : tuple;\n    import std.algorithm : map, filter;\n    import std.range : takeWhile;\n\
    \    import std.math : sqrt;\n    //find primes less than n\n    long[] primes\
    \ = { 2L };\n    primes ~= primes.filter!(a => a % primes.takeWhile!(b => b <=\
    \ sqrt(a)).empty).map!(a => a + 1).takeWhile!(a => a <= n / 2);\n    long[] res\
    \ = {};\n    foreach (p; primes\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsb4thd92.d(62): Error: found `unittest` when expecting `)`

    /tmp/tmpsb4thd92.d(71): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsb4thd92.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if(a < b) {\n        return greatest_common_divisor(b, a);\n\
    \    }\n    if(b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    else if (b == 0)\n \
    \       return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }\n/*\n    Find prime factors of a given number\n    >>> find_prime_factors(28L)\n\
    \    [2L, 2L, 7L]\n    >>> find_prime_factors(35L)\n    [5L, 7L]\n*/\nlong[] find_prime_factors(long\
    \ n) \n{\n    long[] factors = new long[0];\n    if (n > 1) \n    {\n        while\
    \ (n % 2 == 0) \n        {\n            factors ~= 2;\n            n /= 2;\n \
    \       }\n        long divisor = 3;\n        while (divisor <= (long)sqrt(n))\
    \ \n        {\n            while (n % divisor == 0) \n            {\n        \
    \        factors ~= divisor;\n                n /= divisor;\n            }\n \
    \           divisor += 2;\n        }\n        if (n > 1)\n            factors\
    \ ~= n;\n    }\n    return factors;\n}\n/*\n    Find prime factors of a given\
    \ number. A mapping from a prime factor to its\n    multiplicity is returned.\n\
    \    >>> find_prime_factors_mul(28L)\n    [2L: 2, 7L: 1]\n    >>> find_prime_factors_mul(35L)\n\
    \    [5L: 1, 7L: 1]\n*/\n@safe unittest \n{\n    assert(find_prime_factors_mul(28L)\
    \ == [2L: 2, 7L: 1]);\n    assert(find_prime_factors_mul(35L) == [5L: 1, 7L: 1]);\n\
    }\nMap!(long, long) find_prime_factors_mul(long n) \n{\n    auto factors = find_prime_factors(n);\n\
    \    return tuple(factors)\n                .filter!(a => a[1] > 0).map!(a =>\
    \ a[0] => a[\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp10nj5uvn.d(38): Error: C style cast illegal, use `cast(long)sqrt(n)`

    /tmp/tmp10nj5uvn.d(69): Error: found `=>` when expecting `)` following template
    argument list

    /tmp/tmp10nj5uvn.d(69): Error: found `a` when expecting `;` following `return`
    statement

    /tmp/tmp10nj5uvn.d(70): Error: expression expected, not `unittest`

    /tmp/tmp10nj5uvn.d(71): Error: found `{` when expecting `,`

    /tmp/tmp10nj5uvn.d(72): Error: expression expected, not `alias`

    /tmp/tmp10nj5uvn.d(72): Error: found `candidate` when expecting `,`

    /tmp/tmp10nj5uvn.d(72): Error: expression expected, not `=`

    /tmp/tmp10nj5uvn.d(72): Error: found `greatest_common_divisor` when expecting
    `,`

    /tmp/tmp10nj5uvn.d(72): Error: expression expected, not `;`

    /tmp/tmp10nj5uvn.d(74): Error: found `assert` when expecting `,`

    /tmp/tmp10nj5uvn.d(74): Error: found `;` when expecting `,`

    /tmp/tmp10nj5uvn.d(75): Error: found `;` when expecting `,`

    /tmp/tmp10nj5uvn.d(76): Error: found `;` when expecting `,`

    /tmp/tmp10nj5uvn.d(77): Error: found `;` when expecting `,'
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\tif(a < b)\n\t\treturn greatest_common_divisor(b, a);\n\tif(a\
    \ % b == 0)\n\t\treturn b;\n\telse\n\t\treturn greatest_common_divisor(b, a %\
    \ b);\n}\n/*\n Return the least common multiple of two integers a and b\n    >>>\
    \ least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n\
    \    75L\n*/\nlong least_common_multiple(long a, long b)\n{\n\treturn a / greatest_common_divisor(a,\
    \ b) * b;\n}\n/*\n Return a smallest prime factor of a long integer n\n    >>>\
    \ smallest_prime_factor(8L)\n    2L\n    >>> smallest_prime_factor(513L)\n   \
    \ 3L\n*/\nlong smallest_prime_factor(long n)\n{\n\tint i;\n\tlong smallest_prime_factor\
    \ = n;\n\tif(n == 1)\n\t\treturn n;\n\tfor(i = 2; i < n; i++)\n\t{\n\t\tif(n %\
    \ i == 0)\n\t\t{\n\t\t\tsmallest_prime_factor = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \treturn smallest_prime_factor;\n}\n/*\n Return a prime factorization of a long\
    \ integer n\n    >>> prime_factorization(8L)\n    [2L, 2L, 2L]\n    >>> prime_factorization(12L)\n\
    \    [2L, 2L, 3L]\n    >>> prime_factorization(513L)\n    [3L, 3L, 57L]\n*/\n\
    Tuple!(T[], T, long) prime_factorization(long n)\n{\n\tlong prime_factor, prime_factorization;\n\
    \tint i;\n\tT[] list;\n\twhile(n != 1)\n\t{\n\t\tprime_factor = smallest_prime_factor(n);\n\
    \t\tn /= prime_factor;\n\t\tlist ~= prime_factor;\n\t}\n\treturn tuple(list, list[0],\
    \ list.length);\n}\n\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp437wbpz7.d(63): Error: undefined identifier `T`

    /tmp/tmp437wbpz7.d(63): Error: undefined identifier `T`

    /tmp/tmp437wbpz7.d(63): Error: undefined identifier `T`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp437wbpz7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    a = abs(a);\n    b = abs(b);\n    if (a < b)\n        return\
    \ greatest_common_divisor(b, a);\n    else if (b == 0)\n        return a;\n  \
    \  else\n        return greatest_common_divisor(b, a % b);\n}\nunittest\n{\n \
    \   alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\tstatic struct Tuple2!long gcdInner(long a, long b)\n\t{\n\t\
    \tif (a == 0L)\n\t\t{\n\t\t\treturn tuple(0L, 1L);\n\t\t}\n\t\tauto t = gcdInner(b\
    \ % a, a);\n\t\treturn tuple(t[1] - (b / a) * t[0], t[0]);\n\t}\n\tauto t = gcdInner(a,\
    \ b);\n\tassert(t[0] * a + t[1] * b == 1L);\n\treturn t[0] * a + t[1] * b;\n}\n\
    unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpni6r598l.d(13): Error: { } expected following `struct` declaration

    /tmp/tmpni6r598l.d(13): Error: found `gcdInner` when expecting `.` following long

    /tmp/tmpni6r598l.d(13): Error: found `(` when expecting identifier following `long`.

    /tmp/tmpni6r598l.d(13): Error: found `long` when expecting `;` following statement

    /tmp/tmpni6r598l.d(13): Error: found `b` when expecting `.` following long

    /tmp/tmpni6r598l.d(13): Error: found `)` when expecting identifier following `long`.

    /tmp/tmpni6r598l.d(14): Error: found `{` when expecting `;` following statement

    /tmp/tmpni6r598l.d(23): Error: declaration expected, not `assert`

    /tmp/tmpni6r598l.d(24): Error: declaration expected, not `return`

    /tmp/tmpni6r598l.d(25): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpni6r598l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0) \n        return a;\n    else \n        return\
    \ greatest_common_divisor(b, a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\n/*\n Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong\
    \ least_common_multiple(long a, long b) \n{\n    return (a * b) / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return a greatest common divisor of two integer arrays a, b\n \
    \   >>> greatest_common_divisor([3L, 2L, 1L], [5L, 0L, 1L])\n    1L\n    >>> greatest_common_divisor([1L,\
    \ 2L, 3L], [1L, 2L, 3L])\n    6L\n    >>> greatest_common_divisor([25L, 15L, 75L],\
    \ [15L, 75L, 25L])\n    75L\n    \n*/\nlong greatest_common_divisor(long[] a,\
    \ long[] b) \n{\n    return reduce!greatest_common_divisor(a[0], a[1 .. $].zip(b).map!(tuple\
    \ => tuple[0] > tuple[1] ? tuple[0] : tuple[1]));\n}\n/*\n Return a least common\
    \ multiple of two integer arrays a, b\n    >>> least_common_multiple([3L, 2L,\
    \ 1L], [5L, 0L, 1L])\n    15L\n    >>> least_common_multiple([1L, 2L, 3L], [1L,\
    \ 2L, 3L])\n    6L\n    >>> least_common_multiple([25L, 15L, 75L], [15L, 75L,\
    \ 25L])\n    225L\n    \n*/\nlong least_common_multiple(long[] a, long[] b) \n\
    {\n    return reduce!least_common_multiple(a[0], a[1 .. $].zip(b).map!(tuple =>\
    \ tuple[0] < tuple[1] ? tuple[0] : tuple[1]));\n}\n\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfaykx1n3.d(39): Error: template instance `reduce!greatest_common_divisor`
    template `reduce` is not defined

    /tmp/tmpfaykx1n3.d(53): Error: template instance `reduce!least_common_multiple`
    template `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfaykx1n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) {\n        long t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n  {\n  if (a == 0) return b;\n  if (b == 0) return a;\n  return\
    \ greatest_common_divisor(b, a % b);\n  }\n/*\n Return a tuple with the greatest\
    \ common divisor and a pair of integers\n (s, t) such that a*s + b*t = gcd(a,\
    \ b)\n    >>> greatest_common_divisor_extended(3L, 5L)\n    Tuple!(long, \"s\"\
    , \"t\")(1L, (1L, -2L))\n    >>> greatest_common_divisor_extended(25L, 15L)\n\
    \    Tuple!(long, \"s\", \"t\")(5L, (1L, -2L))\n*/\nTuple!(long, \"s\", \"t\"\
    ) greatest_common_divisor_extended(long a, long b)\n  {\n  static Tuple!(long,\
    \ \"s\", \"t\") extend(long a, long b, \n                                    \
    \  long s, long t, long s1, long t1)\n    {\n    if (b == 0) return tuple(a, tuple(s,\
    \ t));\n    else \n      {\n      long q = a / b;\n      return extend(b, a %\
    \ b, s1, t1, s - q * s1, t - q * t1);\n      }\n    }\n  if (a == 0) return tuple(b,\
    \ tuple(0L, 1L));\n  if (b == 0) return tuple(a, tuple(1L, 0L));\n  long q = a\
    \ / b;\n  return extend(b, a % b, 0L, 1L, 1L, -q);\n  }\n/*\n Return a tuple with\
    \ modulo inverse of a integer a modulo of b integer\n or null if there is no inverse.\n\
    \    >>> modulo_inverse(13L, 11L)\n    9L\n    >>> modulo_inverse(5L, 15L)\n \
    \   null\n*/\nlong? modulo_inverse(long a, long b)\n  {\n  auto t = greatest_common_divisor_extended(a,\
    \ b);\n\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3tuiz5yp.d(50): Error: no identifier for declarator `long`

    /tmp/tmp3tuiz5yp.d(50): Error: declaration expected, not `?`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3tuiz5yp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    while (a != b)\n    {\n        if (a > b)\n            a -=\
    \ b;\n        else\n            b -= a;\n    }\n    return a;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\tif (a == 0)\n\t\treturn b;\n\tif (b == 0)\n\t\treturn a;\n\
    \twhile (true) \n\t{\n\t\tauto tmp = a % b;\n\t\tif (tmp == 0)\n\t\t\treturn b;\n\
    \t\ta = b;\n\t\tb = tmp;\n\t}\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if(a == 0 || b == 0)\n        return 0;\n    return (abs(a)\
    \ % abs(b) == 0 ? abs(b) : abs(a) % abs(b));\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplllt7mj9.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmplllt7mj9.__unittest_L17_C1() [0x427ae5]

    ??:? void tmplllt7mj9.__modtest() [0x427b84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) {\n        long t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    return a;\n}\n/*\n Return a least common multiple\
    \ of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n  \
    \  >>> least_common_multiple(25L, 15L)\n    75L\n    >>> least_common_multiple(6L,\
    \ 8L)\n    24L\n    >>> least_common_multiple(72L, 8L)\n    72L\n*/\nlong least_common_multiple(long\
    \ a, long b)\n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n// allow\
    \ arbitrary numbers of ints\nlong least_common_multiple(int[] v) \n{\n    long\
    \ lcm = v[0];\n    foreach (ref i; v[1..$])\n        lcm = least_common_multiple(lcm,\
    \ i);\n    return lcm;\n}\n/*\n    // test if n is prime\n    >>> is_prime(1)\n\
    \    false\n    >>> is_prime(2)\n    true\n    >>> is_prime(3)\n    true\n   \
    \ >>> is_prime(4)\n    false\n    >>> is_prime(5)\n    true\n    >>> is_prime(6)\n\
    \    false\n    >>> is_prime(7)\n    true\n    >>> is_prime(8)\n    false\n  \
    \  >>> is_prime(9)\n    false\n    >>> is_prime(10)\n    false\n    >>> is_prime(11)\n\
    \    true\n    >>> is_prime(12)\n    false\n    >>> is_prime(13)\n    true\n \
    \   >>> is_prime(14)\n    false\n    >>> is_prime(15)\n    false\n    >>> is_prime(16)\n\
    \    false\n    >>> is_prime(17)\n    true\n    >>> is_prime(18)\n    false\n\
    \    >>> is_prime(19)\n    true\n    >>> is_prime(20)\n    false\n    >>> is_prime(21)\n\
    \    false\n    >>> is_prime\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl0c6gws_.d(43): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl0c6gws_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n    return ((b == 0L) ? abs(a) : greatest_common_divisor(b, a %\
    \ b));\n}\n/*\n Return the least common multiple of two integers a and b\n   \
    \ >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n    return (abs(a\
    \ * b) / greatest_common_divisor(a, b));\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfbldbuov.d(12): Error: semicolon expected following function declaration

    /tmp/tmpfbldbuov.d(12): Error: declaration expected, not `(`

    /tmp/tmpfbldbuov.d(13): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfbldbuov.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) { return b; }\n    if (b == 0L) { return a;\
    \ }\n    while (a != b) {\n        if (a > b) { a -= b; }\n        else { b -=\
    \ a; }\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    //std.algorithm.swap(a, b);\n    while(b != 0) \n    {\n\
    \        auto t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n\
    }\n/*\n Return a lowest common multiple of two integers a and b\n    >>> lowest_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> lowest_common_multiple(24L, 18L)\n    72L\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9q0hf8ke.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9q0hf8ke.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while(a != 0 && b != 0) \n    {\n        if(a > b) \n  \
    \      {\n            a %= b;\n        } \n        else \n        {\n        \
    \    b %= a;\n        }\n    }\n    return a + b;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\tlong c;\n\twhile (b) {\n\t\tc = a % b;\n\t\ta = b;\n\t\tb\
    \ = c;\n\t}\n\treturn a;\n}\n/*\n Return a least common multiple of two integers\
    \ a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n    >>> least_common_multiple(1L, 5L)\n    5L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n\treturn a * b / greatest_common_divisor(a, b);\n}\n/*\n Finds\
    \ the greatest common divisor of more than two integers\n    >>> greatest_common_divisor([3L,\
    \ 5L, 8L])\n    1L\n    >>> greatest_common_divisor([100L, 75L, 50L])\n    25L\n\
    */\nlong greatest_common_divisor(inout ulong[] numbers) \n{\n\tauto r = numbers[0];\n\
    \tforeach (n; numbers[1 .. $]) {\n\t\tr = greatest_common_divisor(r, n);\n\t}\n\
    \treturn r;\n}\n/*\n Finds the least common multiple of more than two integers\n\
    \    >>> least_common_multiple([3L, 5L, 8L])\n    120L\n    >>> least_common_multiple([100L,\
    \ 75L, 50L])\n    37500L\n*/\nlong least_common_multiple(inout ulong[] numbers)\
    \ \n{\n\tauto r = numbers[0];\n\tforeach (n; numbers[1 .. $]) {\n\t\tr = least_common_multiple(r,\
    \ n);\n\t}\n\treturn r;\n}\n/*\n Finds the greatest common divisor of more than\
    \ two integers\n    >>> greatest_common_divisor([3L, 5L, 8L])\n    1L\n    >>>\
    \ greatest_common_divisor([100L, 75L, 50L])\n    25L\n*/\nlong greatest_common_divisor(std.algorithm.sinkable!(long[])\
    \ numbers)\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n  \
    \  assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7zl064dx.d(72): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7zl064dx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) {\n        long t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n  return b == 0 ? a : greatest_common_divisor(b, a % b);\n}\n\
    /*\nReturn a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n  return a * b / greatest_common_divisor(a, b);\n}\n/*\nReturn\
    \ a greatest common divisor of numbers in a vector \n*/\nlong greatest_common_divisor(in\
    \ long[][] a)\n{\n    long gcd = a[0][0];\n    foreach(i; 1..a.length)\n     \
    \   gcd = greatest_common_divisor(gcd, a[i][0]);\n    return gcd;\n}\n/*\nReturn\
    \ a least common multiple of numbers in a vector \n*/\nlong least_common_multiple(in\
    \ long[][] a)\n{\n    long lcm = a[0][0];\n    foreach(i; 1..a.length)\n     \
    \   lcm = least_common_multiple(lcm, a[i][0]);\n    return lcm;\n}\n//Matrix class\n\
    class Matrix\n{\n    public:\n        long[][] matrix;\n        int rows;\n  \
    \      int cols;\n        //Constructor\n        this(in long[][] m)\n       \
    \ {\n            this.matrix = m;\n            this.rows = m.length;\n       \
    \     this.cols = m[0].length;\n        }\n        //Destructor\n        ~this()\n\
    \        {\n            //Do nothing\n        }\n        //Set operator (inout\
    \ Matrix)\n        inout(Matrix) opIndexAssign(size_t index, in long[] row)\n\
    \        {\n            matrix[index] = row;\n            return this;\n     \
    \   }\n        //Get operator (long[])\n        in long[] opIndex(size_t index)\
    \ inout nothrow\n        {\n            return matrix[index];\n        }\n   \
    \     //Matrix multiplication\n        Matrix opMul(Matrix m)\nunittest\n{\n \
    \   alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0np8r1z8.d(72): Error: declaration expected, not `in`

    /tmp/tmp0np8r1z8.d(78): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0np8r1z8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\twhile(b != 0) \n\t{\n\t\tlong rem = a % b;\n\t\ta = b;\n\t\
    \tb = rem;\n\t}\n\treturn a;\n}\n/*\n Return a least common multiple of two integers\
    \ a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n\treturn\
    \ (a / greatest_common_divisor(a, b)) * b;\n}\nstruct Fraction(T) \n{\n\t/*\n\t\
    \t\t\t\t\t\t\tThe divisor and divident\n\t*/\n\tT numerator;\n\tT denominator;\n\
    \t/*\n\t\t\t\t\t\t\t\tDivides the fraction\n\t*/\n\tvoid opOpAssign(string op)(Fraction!(T)\
    \ rhs) \n\t{\n\t\tT lcd = least_common_multiple(denominator, rhs.denominator);\n\
    \t\tT l = lcd / denominator;\n\t\tT r = lcd / rhs.denominator;\n\t\tswitch(op)\
    \ \n\t\t{\n\t\t\tcase \"+\":\n\t\t\t\tnumerator = numerator * r + rhs.numerator\
    \ * l;\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\tnumerator = numerator * r -\
    \ rhs.numerator * l;\n\t\t\t\tbreak;\n\t\t\tcase \"*\":\n\t\t\t\tnumerator *=\
    \ rhs.numerator;\n\t\t\t\tdenominator *= rhs.denominator;\n\t\t\t\tbreak;\n\t\t\
    \tcase \"/\":\n\t\t\t\tnumerator *= rhs.denominator;\n\t\t\t\tdenominator *= rhs.numerator;\n\
    \t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tassert(0);\n\t\t}\n\t\tT gcd = greatest_common_divisor(numerator,\
    \ denominator);\n\t\tnumerator /\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe5no4sgj.d(68): Error: expression expected, not `unittest`

    /tmp/tmpe5no4sgj.d(69): Error: found `{` when expecting `;` following statement

    /tmp/tmpe5no4sgj.d(77): Error: `}` expected following members in `struct` declaration
    at /tmp/tmpe5no4sgj.d(32)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5no4sgj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) \n    {\n        return b;\n    }\n    else\
    \ \n    {\n        while (b != 0L) \n        {\n            long temp = a % b;\n\
    \            a = b;\n            b = temp;\n        }\n        return a;\n   \
    \ }\n}\n/*\n Given a number, return a tuple of the form (sign, digits, exponent)\n\
    \    >>> digittuple(1234567890123456789L)\n    Tuple!(int, int[], int)(1, [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 0)\n    >>> digittuple(-1234.5678e-90)\n\
    \    Tuple!(int, int[], int)(-1, [1, 2, 3, 4, 5, 6, 7, 8], -92)\n    >>> digittuple(1e-1000)\n\
    \    Tuple!(int, int[], int)(1, [], -999)\n    >>> digittuple(1e-1999)\n    Tuple!(int,\
    \ int[], int)(1, [], -1998)\n*/\n//Tuple!(int, int[], int) digittuple(long x)\
    \ \nauto digittuple(long x) -> Tuple!(int, int[], int)\n{\n    import std.algorithm\
    \ : map;\n    if (x == 0L) \n    {\n        return tuple(1, [], 0);\n    }\n \
    \   else \n    {\n        int sign = signbit(x) ? -1 : 1;\n        int[] nums\
    \ = string(abs(x)).map!(a => a.to!int - '0').array;\n        return tuple(sign,\
    \ nums, 0);\n    }\n}\n/*\n Given a tuple of the form (sign, digits, exponent)\
    \ return a number\n    >>> fromdigits((1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9], 0))\n    12345\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa7pkz5p_.d(40): Error: function declaration without return type.
    (Note that constructors are always named `this`)

    /tmp/tmpa7pkz5p_.d(40): Error: no identifier for declarator `digittuple(long x)`

    /tmp/tmpa7pkz5p_.d(40): Error: semicolon expected following function declaration

    /tmp/tmpa7pkz5p_.d(40): Error: declaration expected, not `-`

    /tmp/tmpa7pkz5p_.d(43): Error: declaration expected, not `if`

    /tmp/tmpa7pkz5p_.d(46): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa7pkz5p_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0 || b == 0)\n    {\n        return 0;\n    }\n\
    \    else if (a == b)\n    {\n        return a;\n    }\n    else if (a > b)\n\
    \    {\n        return greatest_common_divisor(a - b, b);\n    }\n    else\n \
    \   {\n        return greatest_common_divisor(a, b - a);\n    }\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\tif (a < b) \n\t{\n\t\treturn greatest_common_divisor(b, a);\n\
    \t}\n\tauto quotient = a / b;\n\tauto remainder = a % b;\n\tif (remainder == 0)\
    \ \n\t{\n\t\treturn b;\n\t}\n\telse \n\t{\n\t\treturn greatest_common_divisor(b,\
    \ remainder);\n\t}\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) {\n\tauto t = b;\n\tb = a % b;\n\ta = t;\n\
    \    }\n    return a;\n}\n/*\n Return a least common multiple of two integers\
    \ a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ a * b / greatest_common_divisor(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while(a!=0) \n    {\n        auto r = b % a;\n        b\
    \ = a;\n        a = r;\n    }\n    return b;\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n        return b;\n    if (b == 0L)\n    \
    \    return a;\n    while (a != b)\n    {\n        if (a > b)\n            a -=\
    \ b;\n        else\n            b -= a;\n    }\n    return a;\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n    if (isUnsigned!(long)) \n{\n    import std.math : gcd;\n  \
    \  return gcd(a, b);\n}\nelse\n{\n    if (a == 0L)\n        return b;\n    if\
    \ (b == 0L)\n        return a;\n    // no need to call greatest_common_divisor\
    \ if b is 1\n    if (b == 1L)\n        return 1L;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdgl72hx3.d(12): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmpdgl72hx3.d(12): Error: declaration expected, not `if`

    /tmp/tmpdgl72hx3.d(15): Error: declaration expected, not `return`

    /tmp/tmpdgl72hx3.d(16): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdgl72hx3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0) \n    {\n        return a;\n    } \n    else\
    \ \n    {\n        return greatest_common_divisor(b, a % b);\n    }\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    // Always ensure that b > a\n    while (a > 0L)\n    {\n\
    \        long t = a;\n        a = b % a;\n        b = t;\n    }\n    return b;\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long min = min(a, b);\n    for (long i = min; i > 0; i--)\n\
    \    {\n        if ((a % i == 0) && (b % i == 0))\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate =\
    \ greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcs3pak8q.d(13): Error: undefined identifier `min`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcs3pak8q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n  return a != 0 ? greatest_common_divisor(b % a, a) : b;\n}\n\
    unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return reduce!q{b == 0 ? a : gcd(b, a % b)}([a, b]);\n}\n\
    unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ybi8tor.d(13): Error: template instance `reduce!"b == 0 ? a :
    gcd(b, a % b)"` template `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ybi8tor.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while(a != 0L && b != 0L) \n    {\n        if(a > b)\n \
    \           a %= b;\n        else\n            b %= a;\n    }\n    return max(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqm017l31.d(20): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqm017l31.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0 || b == 0)\n        return 0;\n    if (a == b)\n\
    \        return a;\n    if (a > b)\n        return greatest_common_divisor(a -\
    \ b, b);\n    return greatest_common_divisor(a, b - a);\n}\n/*\n    Given a sequence\
    \ of points and a natural number p, return a list of p elements.\n    Element\
    \ i of the list will contain the point from the input sequence nearest to a point\n\
    \    with coordinates [x, y] = [i * p, i * p]\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpftk1gdlm.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpftk1gdlm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    //return  a == 0 ? b : greatest_common_divisor(b % a, a);\n\
    \    return b == 0 ? a : greatest_common_divisor(b, a % b);\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return ((b != 0L) ? greatest_common_divisor(b, a % b) :\
    \ a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\tif(a == 0L) return b;\n\tif(b == 0L) return a;\n\tif(a < 0L)\
    \ a = -a;\n\tif(b < 0L) b = -b;\n\twhile(a != b)\n\t{\n\t\tif(a > b) a -= b;\n\
    \t\telse b -= a;\n\t}\n\treturn a;\n}\n/*\n Return a least common multiple of\
    \ two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>>\
    \ least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n\treturn a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a greatest common divisor of the fraction.\n    >>> fraction_gcd(Tuple!(long,\
    \ long)(2L, 3L))\n    1L\n    >>> fraction_gcd(Tuple!(long, long)(8L, 12L))\n\
    \    4L\n*/\nlong fraction_gcd(Tuple!(long, long) fraction)\n{\n\treturn greatest_common_divisor(fraction[0],\
    \ fraction[1]);\n}\n/*\n Reduce a fraction.\n    >>> fraction_reduce(Tuple!(long,\
    \ long)(2L, 3L))\n    tuple(2L, 3L)\n    >>> fraction_reduce(Tuple!(long, long)(8L,\
    \ 12L))\n    tuple(2L, 3L)\n*/\nTuple!(long, long) fraction_reduce(Tuple!(long,\
    \ long) fraction)\n{\n\tlong common = fraction_gcd(fraction);\n\treturn tuple(fraction[0]\
    \ / common, fraction[1] / common);\n}\n/*\n Return a value of a reduced fraction.\n\
    \    >>> fraction_value(Tuple!(long, long)(2L, 3L))\n    2L\n    >>> fraction_value(Tuple!(long,\
    \ long)(8L, 12L))\n    2L\n*/\nlong fraction_value(Tuple!(long, long) fraction)\n\
    {\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpptuidga5.d(67): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpptuidga5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n \
    \   // https://rosettacode.org/wiki/Greatest_common_divisor#D\n    while (b !=\
    \ 0) {\n        long c = a % b;\n        a = b;\n        b = c;\n    }\n    return\
    \ a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    while (b != 0) \n    {\n        c = a % b;\n\
    \        a = b;\n        b = c;\n    }\n    return a;\n}\n/*\n Return a least\
    \ common multiple of two integers a and b\n    >>> least_common_multiple(3L, 5L)\n\
    \    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    >>> least_common_multiple(27L,\
    \ 18L)\n    162L\n    >>> least_common_multiple(30030L, 20020L)\n    60060L\n\
    */\nlong least_common_multiple(long a, long b) \n{\n    return (a / greatest_common_divisor(a,\
    \ b)) * b;\n}\n/*\n Find the integer cube root of a number\n    >>> int_cuberoot(27L)\n\
    \    3L\n    >>> int_cuberoot(28L)\n    3L\n    >>> int_cuberoot(25L)\n    2L\n\
    \    >>> int_cuberoot(24L)\n    2L\n    >>> int_cuberoot(26L)\n    2L\n    >>>\
    \ int_cuberoot(4913L)\n    17L\n    >>> int_cuberoot(4912L)\n    16L\n    >>>\
    \ int_cuberoot(4914L)\n    17L\n    >>> int_cuberoot(5832L)\n    17L\n    >>>\
    \ int_cuberoot(6859L)\n    17L\n    >>> int_cuberoot(6857L)\n    17L\n    >>>\
    \ int_cuberoot(6858L)\n    17L\n    >>> int_cuberoot(12167L)\n    19L\n    >>>\
    \ int_cuberoot(15125L)\n    19L\n    >>> int_cuberoot(17576L)\n    19L\n    >>>\
    \ int_cuberoot(19683L)\n    19L\n    >>> int_cuberoot(21952L)\n    19L\n    >>>\
    \ int_cuberoot(24389L)\n    19L\n    >>> int_cuberoot(27000L)\n    19\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsv43nmaa.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsv43nmaa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) {\n        return b;\n    }\n    if (b == 0L)\
    \ {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n  import std.math;\n  import std.typecons;\n  return a < b ?\
    \ greatest_common_divisor(b, a) : (a % b) ? greatest_common_divisor(b, a % b)\
    \ : b;\n}\n/*\n Return a least common multiple of two integers a and b\n    >>>\
    \ least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n\
    \    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n  import std.math;\n\
    \  import std.typecons;\n  return (a * b) / greatest_common_divisor(a, b);\n}\n\
    /*\n Return a Least common multiple of integers from an input range\n    >>> least_common_multiple([2L,\
    \ 3L, 4L])\n    12L\n    >>> least_common_multiple([25L, 15L, 30L])\n    150L\n\
    */\nlong least_common_multiple(in Iterable)(Iterable range) \n{\n  import std.math;\n\
    \  import std.typecons;\n  return range.reduce!least_common_multiple;\n}\n/*\n\
    \ Return a Greatest common divisor of integers from an input range\n    >>> greatest_common_divisor([2L,\
    \ 3L, 4L])\n    1L\n    >>> greatest_common_divisor([25L, 15L, 30L])\n    5L\n\
    */\nlong greatest_common_divisor(in Iterable)(Iterable range) \n{\n  import std.math;\n\
    \  import std.typecons;\n  return range.reduce!greatest_common_divisor;\n}\n/*\n\
    \ Determine if any two numbers from a given input range sum to s\n    >>> isSumS([2L,\
    \ 4L, 8L], 8L)\n    true\n    >>> isSumS([2L, 4L, 8L], 6L)\n    false\n*/\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_u1nkees.d(37): Error: basic type expected, not `in`

    /tmp/tmp_u1nkees.d(37): Error: identifier expected for template value parameter

    /tmp/tmp_u1nkees.d(37): Error: found `in` when expecting `)`

    /tmp/tmp_u1nkees.d(37): Error: found `Iterable` when expecting `(`

    /tmp/tmp_u1nkees.d(37): Error: semicolon expected following function declaration

    /tmp/tmp_u1nkees.d(37): Error: declaration expected, not `(`

    /tmp/tmp_u1nkees.d(41): Error: declaration expected, not `return`

    /tmp/tmp_u1nkees.d(42): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_u1nkees.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) \n        return b;\n    else if (b == 0L)\
    \ \n        return a;\n    else \n        return greatest_common_divisor(b, a\
    \ % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n  \
    \  assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    // assert (a > 0 && b > 0)\n    return (b == 0) ? a : greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return __gcd(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbe0fesr8.d(13): Error: undefined identifier `__gcd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbe0fesr8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return a == 0 ? b : greatest_common_divisor(b % a, a);\n\
    }\n/*\nReturn a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return abs(a * b) / greatest_common_divisor(a, b);\n}\n\
    /*\nreturn a reduced fraction of numerator and denominator\n   >>> reduce_fraction(3L,\
    \ 5L)\n   Fraction(3L, 5L)\n   >>> reduce_fraction(25L, 15L)\n   Fraction(5L,\
    \ 3L)\n   >>> reduce_fraction(25L, 15L) == Fraction(5L, 3L)\n   True\n   >>> reduce_fraction(0L,\
    \ 1L)\n   Fraction(0L, 1L)\n   >>> reduce_fraction(1L, 0L)\n   Fraction(1L, 0L)\n\
    */\nauto reduce_fraction(long numerator, long denominator) \n{\n    long factor\
    \ = greatest_common_divisor(numerator, denominator);\n    return Fraction(numerator\
    \ / factor, denominator / factor);\n}\n/*\nReturn a Fraction object from a double\
    \ value\n    >>> from_double(0.125)\n    Fraction(1L, 8L)\n    >>> from_double(0.25)\n\
    \    Fraction(1L, 4L)\n    >>> from_double(0.625)\n    Fraction(5L, 8L)\n    >>>\
    \ from_double(0.625) == Fraction(5L, 8L)\n    True\n    >>> from_double(0.0)\n\
    \    Fraction(0L, 1L)\n    >>> from_double(std.math.inf)\n    Fraction(1L, 0L)\n\
    \    >>> from_double(-std.math.inf)\n    Fraction(-1L, 0L)\n    >>> from_double(std.math.nan)\n\
    \    Fraction(0\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr_gu13dq.d(44): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr_gu13dq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\n/*\n    Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(6L, 12L)\n    12L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long temp;\n    while ( b != 0L ) \n    {\n        temp\
    \ = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n/*\n Return\
    \ a pair of integers (s, t) such that\n   as + bt = gcd(a, b)\n    >>> pair =\
    \ extended_greatest_common_divisor(3L, 5L)\n    >>> pair[0] * 3L + pair[1] * 5L\n\
    \    1L\n    >>> pair = extended_greatest_common_divisor(25L, 15L)\n    >>> pair[0]\
    \ * 25L + pair[1] * 15L\n    5L\n*/\nTuple!(long, long) extended_greatest_common_divisor(long\
    \ a, long b) \n{\n    long s, old_s, t, old_t, r, old_r;\n    s = 0L;\n    old_s\
    \ = 1L;\n    t = 1L;\n    old_t = 0L;\n    r = b;\n    old_r = a;\n    while (\
    \ r != 0L ) \n    {\n        long quotient = old_r / r;\n        long temp = old_r;\n\
    \        old_r = r;\n        r = temp - quotient * r;\n        temp = old_s;\n\
    \        old_s = s;\n        s = temp - quotient * s;\n        temp = old_t;\n\
    \        old_t = t;\n        t = temp - quotient * t;\n    }\n    return tuple(old_s,\
    \ old_t);\n}\n/*\n Return a integer n such that a^n == 1 (mod m)\n Assume that\
    \ a is an element of Z/mZ* (that is, gcd(a, m) == 1)\n >>> inverse_mod(5L, 7L)\n\
    \    3L\n    >>> inverse_mod(2L, 11L)\n    6L\n*/\nlong inverse_mod(long a, long\
    \ m) \n{\n    if ( a < 0L ) \n    {\n        a = a + m;\n    }\n   \nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfrg33pql.d(71): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfrg33pql.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    import std.math : sqrt;\n    return b == 0 ? a : greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n  long c;\n  while ( a != 0 ) \n  {\n    c = a; a = b%a;  b\
    \ = c;\n  }\n  return b;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while(b != 0)\n    {\n        long t = b;\n        b = a\
    \ % b;\n        a = t;\n    }\n    return a;\n}\n/*\n Get the coefficients for\
    \ extended euclidean algorithm\n    >>> extended_euclidean_algorithm(25L, 15L)\n\
    \    Tuple!(int, \"a\", int, \"b\")(1, -1)\n    >>> extended_euclidean_algorithm(20L,\
    \ 15L)\n    Tuple!(int, \"a\", int, \"b\")(1, -2)\n    >>> extended_euclidean_algorithm(3L,\
    \ 5L)\n    Tuple!(int, \"a\", int, \"b\")(2, -1)\n*/\nTuple!(int, \"a\", int,\
    \ \"b\") extended_euclidean_algorithm(long a, long b)\n{\n    if(b == 0)\n   \
    \     return tuple(1, 0);\n    else\n    {\n        Tuple!(int, \"a\", int, \"\
    b\") c = extended_euclidean_algorithm(b, a % b);\n        return tuple(c[1], c[0]\
    \ - c[1] * cast(int)(a / b));\n    }\n}\n/*\n Return the modular inverse of a\
    \ and n\n    >>> modular_inverse(5L, 13L)\n    8L\n    >>> modular_inverse(5L,\
    \ 6L)\n    -1L\n*/\nlong modular_inverse(long a, long n)\n{\n    Tuple!(int, \"\
    a\", int, \"b\") temp = extended_euclidean_algorithm(a, n);\n    long c = temp[0];\n\
    \    if(c < 0)\n        c += n;\n    return c;\n}\n/*\n Return the smallest multiple\
    \ of a number that is greater than another\n    >>> lcm(25L, 15L)\n    75L\n \
    \   >>> lcm(20L, 15L)\n    60L\n    >>> lcm(3L, 5L)\n    15L\n*/\nlong lcm(long\
    \ a, long b)\n{\n    return\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbxyhlckl.d(67): Error: expression expected, not `unittest`

    /tmp/tmpbxyhlckl.d(68): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbxyhlckl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    a = abs(a);\n    b = abs(b);\n    if (a < b) \n        return\
    \ greatest_common_divisor(b, a);\n    if (b == 0) \n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long r = 0L;\n    while (b != 0L) \n    {\n        r = a\
    \ % b;\n        a = b;\n        b = r;\n    }\n    return a;\n}\n/*\n Return a\
    \ greatest common divisor of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    \    Return a positive angle between 0.0 and 360.0\n    >>> angle(0.0)\n    0.0\n\
    \    >>> angle(360.0)\n    0.0\n    >>> angle(90.0)\n    90.0\n    >>> angle(540.0)\n\
    \    180.0\n    >>> angle(-180.0)\n    180.0\n    >>> angle(-540.0)\n    180.0\n\
    */\ndouble angle(double angle) \n{\n    double result = angle;\n    while (result\
    \ >= 360.0) \n    {\n        result -= 360.0;\n    }\n    while (result < 0.0)\
    \ \n    {\n        result += 360.0;\n    }\n    return result;\n}\n/*\n    >>>\
    \ angle_difference(0.0, 0.0)\n    0.0\n    >>> angle_difference(0.0, 180.0)\n\
    \    180.0\n    >>> angle_difference(180.0, 0.0)\n    180.0\n    >>> angle_difference(90.0,\
    \ 90.0)\n    0.0\n    >>> angle_difference(270.0, 90.0)\n    180.0\n    >>> angle_difference(90.0,\
    \ 270.0)\n    180.0\n    >>> angle_difference(0.0, 360.0)\n    0.0\n    >>> angle_difference(360.0,\
    \ 0.0)\n    0.0\n    >>> angle_difference(90.0, 180.0)\n\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemth5i28.d(61): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemth5i28.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    a = abs(a);\n    b = abs(b);\n    while(b != 0)\n    {\n\
    \        long c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \nin\n{\n    assert(a > 0L);\n    assert(b > 0L);\n}\nbody\n{\n \
    \   if (a == b)\n    {\n        return a;\n    }\n    if (a > b)\n    {\n    \
    \    return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    static assert(is(a == long.init));\n    static assert(is(b\
    \ == long.init));\n    return (a == 0L) ? b : greatest_common_divisor(b % a, a);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnhxq_6j6.d(13): Error: found `.` when expecting `)`

    /tmp/tmpnhxq_6j6.d(13): Error: found `init` when expecting `)`

    /tmp/tmpnhxq_6j6.d(13): Error: found `)` when expecting `;`

    /tmp/tmpnhxq_6j6.d(13): Error: found `)` instead of statement

    /tmp/tmpnhxq_6j6.d(14): Error: found `.` when expecting `)`

    /tmp/tmpnhxq_6j6.d(14): Error: found `init` when expecting `)`

    /tmp/tmpnhxq_6j6.d(14): Error: found `)` when expecting `;`

    /tmp/tmpnhxq_6j6.d(14): Error: found `)` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhxq_6j6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    import std.math;\n    assert(a > 0L && b > 0L);\n    while\
    \ (b != 0L) \n    {\n        const auto t = b;\n        b = a % b;\n        a\
    \ = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return (a != 0L) ? greatest_common_divisor(b % a, a) : abs(b);\n\
    }\n//--------------------------------------------------------------------\n/*\n\
    Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    >>> least_common_multiple(1L,\
    \ 1L)\n    1L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ (a * b) / greatest_common_divisor(a, b);\n}\n//--------------------------------------------------------------------\n\
    //Returns a new array with items at indices 0 and 1 swapped.\n//    >>> swap_indices([\"\
    a\", \"b\", \"c\", \"d\"])\n//    [\"b\", \"a\", \"c\", \"d\"]\n//    >>> swap_indices([1,\
    \ 2, 3, 4])\n//    [2, 1, 3, 4]\n//    >>> swap_indices([true, false])\n//   \
    \ [false, true]\n//    >>> swap_indices([])\n//    []\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    Tuple!(long, long) t;\n    if (a < b)\n    {\n        t\
    \ = tuple(b, a);\n    }\n    else\n    {\n        t = tuple(a, b);\n    }\n  \
    \  long result = 0L;\n    while (t[1] != 0L)\n    {\n        result = t[1];\n\
    \        t[1] = t[0] % t[1];\n        t[0] = result;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b)\n    {\n        auto tmp = a;\n        a = b;\n\
    \        b = tmp;\n    }\n    return b ? greatest_common_divisor(b, a % b) : a;\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a < b) \n        return greatest_common_divisor(b, a);\n\
    \    if (a % b == 0) \n        return b;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    a = abs(a);\n    b = abs(b);\n    while (a != 0 && b !=\
    \ 0) \n    {\n        if (a > b)\n            a %= b;\n        else\n        \
    \    b %= a;\n    }\n    return a + b;\n}\n/*\nReturn a greatest common divisor\
    \ of several integers.\n    >>> greatest_common_divisor(3L, 5L, 10L)\n    1L\n\
    \    >>> greatest_common_divisor(25L, 15L, 50L)\n    5L\n*/\nlong greatest_common_divisor(long\
    \ a, long b, long c) \n{\n    return greatest_common_divisor(greatest_common_divisor(a,\
    \ b), c);\n}\n/*\nReturn a greatest common divisor of an arbitrary number of integers.\n\
    \    >>> greatest_common_divisor(*(15L, 25L, 50L))\n    5L\n*/\nlong greatest_common_divisor(\n\
    \        long first, \n        Range!(long) rest) \n{\n    foreach (n; rest) \n\
    \    {\n        first = greatest_common_divisor(first, n);\n    }\n    return\
    \ first;\n}\nlong greatest_common_divisor(Range!(long) args) \n{\n    return greatest_common_divisor(args.front,\
    \ args);\n}\n/*\nReturn the least common multiple of two integers a and b\n  \
    \  >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ (a * b) / greatest_common_divisor(a, b);\n}\n/*\nReturn the least common multiple\
    \ of several integers.\n    >>> least_common_multiple(3L, 5L, 10L)\n    30L\n\
    \    >>> least_common_multiple(25L, 15L, 50L)\n    150L\n*/\nlong least_common_multiple(long\
    \ a, long b, long c) \n{\n    return least_\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqjtuaynb.d(75): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpqjtuaynb.d(84): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqjtuaynb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return a == 0 ? b : greatest_common_divisor(b % a, a);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return gcd(a, b);\n}\nunittest\n{\n    alias candidate =\
    \ greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3d1_geak.d(13): Error: undefined identifier `gcd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3d1_geak.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\tif (a < b) { // swap\n\t\tlong t = a;\n\t\ta = b;\n\t\tb =\
    \ t;\n\t}\n\tif (b == 0) {\n\t\treturn a;\n\t}\n\treturn greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n Return a least common multiple of two integers a and b\n  \
    \  >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n\treturn\
    \ (a * b) / greatest_common_divisor(a, b);\n}\n/*\n Return a least common multiple\
    \ of a sequence of integers.\n    >>> least_common_multiple_of_seq(range(2L,6L))\n\
    \    60L\n*/\nlong least_common_multiple_of_seq(in long[] seq) \n{\n\tlong result\
    \ = 1L;\n\tfor (long i = 0; i < seq.length; i++) {\n\t\tresult = least_common_multiple(result,\
    \ seq[i]);\n\t}\n\treturn result;\n}\n/*\n Return an array of numbers, which are\
    \ all of the greatest common divisors of a sequence of integers.\n    >>> greatest_common_divisors_of_seq(range(2L,6L))\n\
    \    [2L, 6L, 4L, 6L]\n*/\nlong[] greatest_common_divisors_of_seq(in long[] seq)\
    \ \n{\n\tlong[] result = new long[seq.length];\n\tresult[0] = seq[0];\n\tfor (long\
    \ i = 1; i < seq.length; i++) {\n\t\tresult[i] = greatest_common_divisor(result[i\
    \ - 1], seq[i]);\n\t}\n\treturn result;\n}\n/*\n Return an array of numbers, which\
    \ are all of the least common multiples of a sequence of integers.\n    >>> least_common_multiples_of_seq(range(2L,6L))\n\
    \    [2L, 12L, 12L, 60L]\n*/\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    // Remove this and return the correct value\n    return\
    \ 1L;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp165dgv0b.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d3d]

    ??:? void tmp165dgv0b.__unittest_L16_C1() [0x427a5b]

    ??:? void tmp165dgv0b.__modtest() [0x427abc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a8f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff38]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8cd]

    ??:? runModuleUnitTests [0x42b839]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42818c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n  while (b != 0) {\n    auto _a = a;\n    a = b;\n    b = _a\
    \ % b;\n  }\n  return a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b==0) return a;\n    else return greatest_common_divisor(b,\
    \ a%b);\n}\n/*\n A simple function for checking the Pythagorean theorem\n    >>>\
    \ is_pythagorean_triplet(3L, 4L, 5L)\n    True\n    >>> is_pythagorean_triplet(7L,\
    \ 8L, 9L)\n    False\n*/\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    a = abs(a);\n    b = abs(b);\n    while (b != 0) {\n   \
    \     auto t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return a==0 ? b : greatest_common_divisor(b%a, a);\n}\n\
    /*\n    Return a greatest common divisor of list of integers.\nunittest\n{\n \
    \   alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzr340w27.d(15): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzr340w27.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\treturn !b ? a : greatest_common_divisor(b, a % b);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c = 0L;\n    while ((a % 2L == 0L) && (b % 2L == 0L))\
    \ \n    {\n        a /= 2L;\n        b /= 2L;\n        c += 1L;\n    }\n    while\
    \ (a != b) \n    {\n        if (a % 2L == 0L) \n        {\n            a /= 2L;\n\
    \        }\n        else if (b % 2L == 0L) \n        {\n            b /= 2L;\n\
    \        }\n        else if (a > b) \n        {\n            a = (a - b) / 2L;\n\
    \        }\n        else \n        {\n            b = (b - a) / 2L;\n        }\n\
    \    }\n    return a * pow(2L, c);\n}\n/*\n Return a least common multiple of\
    \ two integers a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>>\
    \ least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    long gcd = greatest_common_divisor(a, b);\n    return a\
    \ * b / gcd;\n}\n/*\n Return a tuple containing greatest common divisor and least\
    \ common multiple\n of two integers a and b\n    >>> greatest_common_divisor_least_common_multiple(3L,\
    \ 5L)\n    (1L, 15L)\n    >>> greatest_common_divisor_least_common_multiple(25L,\
    \ 15L)\n    (5L, 75L)\n    \n*/\ntuple(long, long) greatest_common_divisor_least_common_multiple(long\
    \ a, long b) \n{\n    return tuple(greatest_common_divisor(a, b), least_common_multiple(a,\
    \ b));\n}\n/*\n Return a tuple containing greatest common divisor and least common\
    \ multiple\n of a list of integers\n    >>> greatest_common_divisor_least_common_multiple([3L,\
    \ 5L, 15L])\n    (1L, 15\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1lx3_vwf.d(63): Error: function declaration without return type.
    (Note that constructors are always named `this`)

    /tmp/tmp1lx3_vwf.d(63): Error: no identifier for declarator `tuple(long, long)`

    /tmp/tmp1lx3_vwf.d(63): Error: semicolon expected following function declaration

    /tmp/tmp1lx3_vwf.d(63): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmp1lx3_vwf.d(64): Error: no identifier for declarator `greatest_common_divisor_least_common_multiple(long
    a, long b)`

    /tmp/tmp1lx3_vwf.d(67): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1lx3_vwf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if(a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if(b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n Return a least common multiple of two integers a and b\n >>>\
    \ least_common_multiple(3L, 5L)\n 15L\n >>> least_common_multiple(25L, 15L)\n\
    \ 75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return a * b /\
    \ greatest_common_divisor(a, b);\n}\n/*\n Return a tuple of least common multiple\
    \ and greatest common divisor of two integers a and b\n >>> least_common_multiple_and_greatest_common_divisor(3L,\
    \ 5L)\n (15L, 1L)\n >>> least_common_multiple_and_greatest_common_divisor(25L,\
    \ 15L)\n (75L, 5L)\n*/\nstd.typecons.Tuple!(long, long) least_common_multiple_and_greatest_common_divisor(long\
    \ a, long b) \n{\n    return std.typecons.Tuple!(long, long)(\n        least_common_multiple(a,\
    \ b),\n        greatest_common_divisor(a, b)\n    );\n}\n/*\n Return a greatest\
    \ common divisor of two integers a and b\n    >>> greatest_common_divisor(3L,\
    \ 5L)\n    1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n*/\n/*long greatest_common_divisor(long\
    \ a, long b) \n{\n    while(b != 0)\n    {\n        auto t = b;\n        b = a\
    \ % b;\n        a = t;\n    }\n    return a;\n}*/\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n*/\nlong greatest_\n\
    unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq7th705p.d(70): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq7th705p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    auto t = tuple(a, b);\n    do {\n        t = tuple(t[1],\
    \ t[0] % t[1]);\n    } while (t[1] != 0);\n    return t[0];\n}\nunittest\n{\n\
    \    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if(a == 0) \n    {\n        return b;\n    } \n    else\
    \ if(b == 0) \n    {\n        return a;\n    } \n    else if(a > b) \n    {\n\
    \        return greatest_common_divisor(a % b, b);\n    } \n    else \n    {\n\
    \        return greatest_common_divisor(a, b % a);\n    }\n}\nunittest\n{\n  \
    \  alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L)\
    \ == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L)\
    \ == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long t;\n    while (b != 0) \n    {\n        t = b;\n  \
    \      b = a % b;\n        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n    long a, b;\n{\n    return euclidean_algorithm_recursive(a,\
    \ b);\n}\n/*\n Return a least common multiple of two integers a and b\n    >>>\
    \ least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n\
    \    75L\n*/\nlong least_common_multiple(long a, long b) \n    long a, b;\n{\n\
    \    return abs(a) * abs(b) / greatest_common_divisor(a, b);\n}\n/*\n Return a\
    \ least common multiple of a list of integers\n    >>> least_common_multiple_list([7L,\
    \ 5L, 1L, 3L])\n    105L\n*/\nlong least_common_multiple_list(list[long] l) \n\
    \    list[long] l;\n{\n    return reduce(l, lambda (result, a) \n        long\
    \ result, a;\n    {\n        return least_common_multiple(result, a);\n    },\
    \ 1L);\n}\n/*\n Return a euclidean distance between two 2d points\n    >>> euclidean_distance((0L,\
    \ 0L), (1L, 1L))\n    1.4142135623730951\n*/\ndouble euclidean_distance(std.typecons.Tuple[long,\
    \ long] a, std.typecons.Tuple[long, long] b) \n    std.typecons.Tuple[long, long]\
    \ a, b;\n{\n    return sqrt(pow(a.first - b.first, 2) + pow(a.second - b.second,\
    \ 2));\n}\n/*\n Return a euclidean distance between two 3d points\n    >>> euclidean_distance((0L,\
    \ 0L, 0L), (1L, 1L, 1L))\n    1.7320508075688772\n*/\ndouble euclidean_distance(std.typecons.Tuple[long,\
    \ long, long] a, std.typecons.Tuple[long, long, long] b) \n    std.typecons.Tuple[long,\
    \ long, long] a, b;\n{\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0rp4_sk1.d(12): Error: semicolon expected following function declaration

    /tmp/tmp0rp4_sk1.d(13): Error: declaration expected, not `{`

    /tmp/tmp0rp4_sk1.d(15): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0rp4_sk1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    tuple!(long, long)(numer_denom_a) = rationalize(a);\n  \
    \  tuple!(long, long)(numer_denom_b) = rationalize(b);\n    long numer_a = numer_denom_a[0];\n\
    \    long denom_a = numer_denom_a[1];\n    long numer_b = numer_denom_b[0];\n\
    \    long denom_b = numer_denom_b[1];\n    if(numer_a < 0L)\n    {\n        numer_a\
    \ = -numer_a;\n    }\n    if(numer_b < 0L)\n    {\n        numer_b = -numer_b;\n\
    \    }\n    return denom_a * denom_b / gcd(numer_a * denom_b, numer_b * denom_a);\n\
    }\n/*\n    >>> rat(3L, 15L)\n    1/5\n*/\nRational!long rat(long numer, long denom)\
    \ \n{\n    return Rational!long(numer, denom);\n}\n/*\n    >>> rat(3L, -15L)\n\
    \    -1/5\n*/\nRational!long rat(long numer, long denom) \n{\n    return Rational!long(numer,\
    \ denom);\n}\n/*\n    >>> rat(-3L, 15L)\n    -1/5\n*/\nRational!long rat(long\
    \ numer, long denom) \n{\n    return Rational!long(numer, denom);\n}\n/*\n   \
    \ >>> rat(-3L, -15L)\n    1/5\n*/\nRational!long rat(long numer, long denom) \n\
    {\n    return Rational!long(numer, denom);\n}\n/*\n    >>> rat(3)\n    3\n*/\n\
    Rational!long rat(long numer) \n{\n    return Rational!long(numer, 1L);\n}\n/*\n\
    \    >>> rat(-3)\n    -3\n*/\nRational!long rat(long numer) \n{\n    return Rational!long(numer,\
    \ 1L);\n}\n/*\n   \nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6di90mal.d(77): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6di90mal.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if(a > b)\n        return gcd(a, b);\n    else\n       \
    \ return gcd(b, a);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa5i1b2z3.d(14): Error: undefined identifier `gcd`

    /tmp/tmpa5i1b2z3.d(16): Error: undefined identifier `gcd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa5i1b2z3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    assert(a >= 0);\n    assert(b >= 0);\n    a = abs(a);\n\
    \    b = abs(b);\n    while (b) \n    {\n        a %= b;\n        std.swap(a,\
    \ b);\n    }\n    return a;\n}\n/*\n Return a least common multiple of two integers\
    \ a and b\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    assert(a\
    \ >= 0);\n    assert(b >= 0);\n    return (a / greatest_common_divisor(a, b))\
    \ * b;\n}\n/*\n Return a tuple (g, x, y), where g is gcd(a, b) and\n g = ax +\
    \ by.\n*/\nstd.tuple!(long, long, long) extended_greatest_common_divisor(long\
    \ a, long b) \n{\n    assert(a >= 0);\n    assert(b >= 0);\n    long s = 0L;\n\
    \    long old_s = 1L;\n    long t = 1L;\n    long old_t = 0L;\n    long r = b;\n\
    \    long old_r = a;\n    while (r != 0L) \n    {\n        long quotient = old_r\
    \ / r;\n        std.swap(old_r, r);\n        r -= quotient * old_r;\n        std.swap(old_s,\
    \ s);\n        s -= quotient * old_s;\n        std.swap(old_t, t);\n        t\
    \ -= quotient * old_t;\n    }\n    return std.make_tuple(old_r, old_s, old_t);\n\
    }\n/*\n Return a tuple (g, x, y), where g is gcd(a, b) and\n g = ax + by, with\
    \ x and y in the range [0, n-1].\n*/\nstd.tuple!(long, long, long) modular_linear_equation_solver(long\
    \ a\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppj735yh1.d(68): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppj735yh1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n  while(b != 0) \n  {\n    long temp = b;\n    b = a % b;\n\
    \    a = temp;\n  }\n  return a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L) \n    {\n        return b;\n    }\n    else\
    \ if (b == 0L) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n\
    \    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\n/*\n Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3L,\
    \ 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n    75L\n    \n*/\nlong\
    \ least_common_multiple(long a, long b) \n{\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return an extended greatest common divisor of two integers a and\
    \ b\n    >>> extended_greatest_common_divisor(3L, 5L)\n    (1L, -1L, 2L)\n   \
    \ >>> extended_greatest_common_divisor(25L, 15L)\n    (5L, 1L, -1L)\n    >>> extended_greatest_common_divisor(27L,\
    \ 13L)\n    (1L, -2L, 1L)\n    \n*/\nTuple!(long, long, long) extended_greatest_common_divisor(long\
    \ a, long b) \n{\n    long s, old_s = 1;\n    long t, old_t = 0;\n    long r,\
    \ old_r = b;\n    while (b != 0) \n    {\n        long quotient = a / b;\n   \
    \     auto temp = b;\n        b = a % b;\n        a = temp;\n        temp = s;\n\
    \        s = old_s - quotient * s;\n        old_s = temp;\n        temp = t;\n\
    \        t = old_t - quotient * t;\n        old_t = temp;\n        temp = r;\n\
    \        r = old_r - quotient * r;\n        old_r = temp;\n    }\n    return tuple(old_r,\
    \ old_s, old_t);\n}\n/*\n Return a modular inverse of an integer a (mod n)\n \
    \   >>> modular_inverse(2L, 7L)\n    4L\n    >>> modular_inverse(3L, 5L)\n   \
    \ 2L\n    \n*/\nlong modular_inverse\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6vlhm883.d(69): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6vlhm883.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n  return (a == 0L || b == 0L) ? (a + b) : greatest_common_divisor(b,\
    \ a % b);\n}\n/*\nReturn least common multiple of two integers a and b\n    >>>\
    \ least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L, 15L)\n\
    \    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n  return (a == 0L\
    \ || b == 0L) ? 0L : (abs(a) / greatest_common_divisor(a, b)) * abs(b);\n}\n/*\n\
    Return a fraction as a tuple (numerator, denominator)\n    >>> fraction_as_tuple(1L,\
    \ 2L)\n    (1L, 2L)\n    >>> fraction_as_tuple(2L, 4L)\n    (1L, 2L)\n    >>>\
    \ fraction_as_tuple(5L, -15L)\n    (-1L, 3L)\n*/\n@property long numerator() \n\
    {\n  return this[0];\n}\n@property long denominator() \n{\n  return this[1];\n\
    }\ntuple(long, long) fraction_as_tuple(long numerator, long denominator) \n{\n\
    \  bool negative = (numerator < 0L) ^ (denominator < 0L);\n  numerator = abs(numerator);\n\
    \  denominator = abs(denominator);\n  long gcd = greatest_common_divisor(numerator,\
    \ denominator);\n  return tuple(negative ? -(numerator / gcd) : (numerator / gcd),\
    \ denominator / gcd);\n}\n/*\nReturn a fraction as a number\n    >>> fraction_as_number(1L,\
    \ 2L)\n    0.5\n    >>> fraction_as_number(2L, 4L)\n    0.5\n    >>> fraction_as_number(5L,\
    \ -15L)\n    -0.3333333333333333\n*/\ndouble fraction_as_number(long numerator,\
    \ long denominator) \n{\n  return (double)numer\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph87dvjqg.d(43): Error: function declaration without return type.
    (Note that constructors are always named `this`)

    /tmp/tmph87dvjqg.d(43): Error: no identifier for declarator `tuple(long, long)`

    /tmp/tmph87dvjqg.d(43): Error: semicolon expected following function declaration

    /tmp/tmph87dvjqg.d(43): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmph87dvjqg.d(44): Error: no identifier for declarator `fraction_as_tuple(long
    numerator, long denominator)`

    /tmp/tmph87dvjqg.d(63): Error: C style cast illegal, use `cast(double)numer`

    /tmp/tmph87dvjqg.d(63): Error: found `unittest` when expecting `;` following `return`
    statement

    /tmp/tmph87dvjqg.d(72): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph87dvjqg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\tif(b == 0)\n\t\treturn a;\n\treturn greatest_common_divisor(b,\
    \ a % b);\n}\n/*\nReturn a least common multiple of two integers a and b\n   \
    \ >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n    \n*/\nlong least_common_multiple(long a, long b)\n{\n\treturn\
    \ a / greatest_common_divisor(a, b) * b;\n}\n/*\n    Return a greatest common\
    \ divisor of n integers in an array\n    >>> greatest_common_divisor_array([3L,\
    \ 5L, 12L])\n    1L\n    >>> greatest_common_divisor_array([25L, 15L, 75L])\n\
    \    5L\n*/\nlong greatest_common_divisor_array(long[] a)\n{\n\tlong r = a[0];\n\
    \tforeach(long x; a)\n\t\tr = greatest_common_divisor(r, x);\n\treturn r;\n}\n\
    /*\n    Return a least common multiple of n integers in an array\n    >>> least_common_multiple_array([3L,\
    \ 5L, 12L])\n    60L\n    >>> least_common_multiple_array([25L, 15L, 75L])\n \
    \   375L\n*/\nlong least_common_multiple_array(long[] a)\n{\n\tlong r = a[0];\n\
    \tforeach(long x; a)\n\t\tr = least_common_multiple(r, x);\n\treturn r;\n}\n/*\n\
    \    Returns a list of prime numbers up to given upper limit\n    >>> [2L, 3L,\
    \ 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L,\
    \ 67L, 71L, 73L, 79L, 83L, 89L, 97L]\n*/\nlong[] prime_sieve(long limit)\n{\n\t\
    long[] primes = [2L];\n\tauto i = 3L;\n\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr2znfr9u.d(66): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr2znfr9u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0) {\n        return a;\n    } else {\n       \
    \ return greatest_common_divisor(b, a % b);\n    }\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\tif (a == 0L) \n\t{\n\t\treturn b;\n\t}\n\tif (b == 0L) \n\t\
    {\n\t\treturn a;\n\t}\n\treturn greatest_common_divisor(b, a % b);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if(a == 0L)\n    {\n        return b;\n    }\n    else if(b\
    \ == 0L)\n    {\n        return a;\n    }\n    else\n    {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n    {\n    long c;\n    a = abs(a);\n    b = abs(b);\n    if (a<b)\
    \ {\n        c = a; a = b; b = c;\n    }\n    for (;;) {\n        if (b==0) {\n\
    \            return a;\n        }\n        a %= b;\n        if (a==0) {\n    \
    \        return b;\n        }\n        b %= a;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n\
    \    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n\
    \    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n  if (a == 0L) return b;\n  if (b == 0L) return a;\n  if (a\
    \ < 0L) a = -a;\n  if (b < 0L) b = -b;\n  while (true) {\n    a %= b;\n    if\
    \ (a == 0L) return b;\n    b %= a;\n    if (b == 0L) return a;\n  }\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n  if (a == 0)\n    return b;\n  else\n    return greatest_common_divisor(b\
    \ % a, a);\n}\n/*\n Return a least common multiple of two integers a and b\n \
    \   >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(4L,\
    \ 6L)\n    12L\n*/\nlong least_common_multiple(long a, long b) \n{\n  return a\
    \ * b / greatest_common_divisor(a, b);\n}\n/*\n Return a least common multiple\
    \ of a list of integers\n    >>> least_common_multiple_from_list([3L, 5L])\n \
    \   15L\n    >>> least_common_multiple_from_list([3L, 4L, 5L])\n    60L\n*/\n\
    long least_common_multiple_from_list(list l) \n{\n  return __foldl1(least_common_multiple,\
    \ l);\n}\n/*\n Return the length of a list\n    >>> length([1L, 2L, 3L])\n   \
    \ 3L\n    >>> length([])\n    0L\n*/\nlong length(list l) \n{\n  return __foldl(l,\
    \ 0L, fun _L_ tmp => tmp + 1L);\n}\n/*\n Return the maximum element in a list\n\
    \    >>> maximum([1L, 2L, 3L])\n    3L\n    >>> maximum([3L, 2L, 1L])\n    3L\n\
    */\nlong maximum(list l) \n{\n  if (length(l) == 0L)\n    error(\"maximum length\
    \ is 0\");\n  else\n    return __foldl1(max, l);\n}\n/*\n Return the minimum element\
    \ in a list\n    >>> minimum([1L, 2L, 3L])\n    1L\n    >>> minimum([3L, 2L, 1L])\n\
    \    1L\n*/\nlong minimum(list l) \n{\n  if (length(l) == 0L)\n    error(\"minimum\
    \ length is 0\");\n  else\n    return __foldl1(min, l);\n}\n/*\n Return a list\
    \ of all prime numbers in range from 2 to n\nunittest\n{\n    alias candidate\
    \ = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf4pwd375.d(49): Error: found `_L_` when expecting `,`

    /tmp/tmpf4pwd375.d(79): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf4pwd375.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0L)\n    {\n        return b;\n    }\n    else\n\
    \    {\n        if (b == 0L)\n        {\n            return a;\n        }\n  \
    \      else\n        {\n            return greatest_common_divisor(b, a % b);\n\
    \        }\n    }\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163136
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b > a) {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    else if (b <= 0) {\n        return a;\n    }\n    else {\n \
    \       return greatest_common_divisor(b, a%b);\n    }\n}\n/*\n Return a least\
    \ common multiple of two integers a and b\n >>> least_common_multiple(3L, 5L)\n\
    \ 15L\n >>> least_common_multiple(25L, 15L)\n 75L\n \n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a*b/greatest_common_divisor(a, b);\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n\treturn b == 0 ? a : greatest_common_divisor(b, a % b);\n}\n\
    // Return a least common multiple of two integers a and b\nlong least_common_multiple(long\
    \ a, long b) \n{\n\treturn (a / greatest_common_divisor(a, b)) * b;\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    // make sure that a >= b\n    if (a < b) {\n        return\
    \ greatest_common_divisor(b, a);\n    }\n    // at this point, we have a >= b\n\
    \    if (b == 0) {\n        return a;\n    }\n    if (a % b == 0) {\n        return\
    \ b;\n    }\n    else {\n        return greatest_common_divisor(b, a % b);\n \
    \   }\n}\n/*\nReturn a list of all the divisors of an integer a\n    >>> list_divisors(6L)\n\
    \    [1L, 2L, 3L, 6L]\n    >>> list_divisors(4L)\n    [1L, 2L, 4L]\n*/\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    while (b != 0) {\n        auto t = b;\n        b = a % b;\n\
    \        a = t;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\
    \n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n\
    \    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    long c;\n    if (a == 0) return b;\n    if (b == 0) return\
    \ a;\n    while (a != 0) {\n        c = a; a = b%a;  b = c;\n    }\n    return\
    \ b;\n}\n/*\n    >>> least_common_multiple(3L, 5L)\n    15L\n    >>> least_common_multiple(25L,\
    \ 15L)\n    75L\n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ (a*b)/greatest_common_divisor(a, b);\n}\nunittest\n{\n    alias candidate =\
    \ greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L,\
    \ 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L,\
    \ 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n  if (b == 0) \n    return a;\n  return greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n    >>> simplest_fraction(3, 5)\n    (1L, 5L)\n    >>> simplest_fraction(25,\
    \ 15)\n    (1L, 3L)\n    >>> simplest_fraction(2, 3)\n    (2L, 3L)\n    \n*/\n\
    Tuple!(long, long) simplest_fraction(long a, long b)\n{\n  import std.math;\n\
    \  auto gcd = greatest_common_divisor(a, b);\n  return tuple(a / gcd, b / gcd);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (b == 0) \n    {\n        return a;\n    }\n    else\
    \ \n    {\n        return greatest_common_divisor(b, a % b);\n    }\n}\nunittest\n\
    {\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163138
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return a greatest common\
    \ divisor of two integers a and b\n    >>> greatest_common_divisor(3L, 5L)\n \
    \   1L\n    >>> greatest_common_divisor(25L, 15L)\n    5L\n    \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    static struct MCD \n    {\n        void opCall(long a, long\
    \ b) \n        {\n            if (b == 0) \n            {\n                result\
    \ = a;\n            } \n            else \n            {\n                result\
    \ = mcd(b, a % b);\n            }\n        }\n        long result;\n    }\n  \
    \  mcd;\n    return mcd(a, b);\n}\nlong least_common_multiple(long a, long b)\
    \ \n{\n    if (a == 0L || b == 0L) \n    {\n        return 0L;\n    }\n    return\
    \ a * b / greatest_common_divisor(a, b);\n}\n/*\n    >>> Rational(3L, 5L)\n  \
    \  Rational(3L, 5L)\n    >>> Rational(45L, -10L)\n    Rational(-9L, 2L)\n*/\n\
    class Rational(T) \n{\n    private \n    {\n        T _numerator;\n        T _denominator;\n\
    \    }\n    this(T numerator, T denominator) \n    {\n        _numerator = numerator;\n\
    \        _denominator = denominator;\n        reduce();\n    }\n    this(T numerator)\
    \ \n    {\n        this(numerator, 1L);\n    }\n    T get numerator() \n    {\n\
    \        return _numerator;\n    }\n    T get denominator() \n    {\n        return\
    \ _denominator;\n    }\n    // Forwarded comparison operators\n    bool opEquals(Rational!T\
    \ that) \n    {\n        return this.numerator == that.numerator && this.denominator\
    \ == that.denominator;\n    }\n    int opCmp(Rational!T that) \n    {\n      \
    \  return this.numerator * that.denominator - this.denominator * that.numerator;\n\
    \    }\n    int opCmp(T that) \n    {\n        return this.numerator - this.denominator\
    \ * that;\n    }\n    // Forwarded arithmetic operators\n    Rational!T opNeg()\
    \ \nunittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
    \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
    \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4jv86l3d.d(62): Error: semicolon expected, not `numerator`

    /tmp/tmp4jv86l3d.d(62): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmp4jv86l3d.d(63): Error: no identifier for declarator `numerator()`

    /tmp/tmp4jv86l3d.d(66): Error: semicolon expected, not `denominator`

    /tmp/tmp4jv86l3d.d(66): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmp4jv86l3d.d(67): Error: no identifier for declarator `denominator()`

    /tmp/tmp4jv86l3d.d(85): Error: semicolon expected following function declaration

    /tmp/tmp4jv86l3d.d(94): Error: `}` expected following members in `class` declaration
    at /tmp/tmp4jv86l3d.d(45)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4jv86l3d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
