name: HumanEval_89_encrypt
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string res;\n \
    \   foreach(ch; s)\n    {\n        res ~= ch + 2 * 2;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps1bsbod8.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmps1bsbod8.__unittest_L28_C1()\
    \ [0x427d1e]\\n??:? void tmps1bsbod8.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x77333554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    for (int i = 0; i < s.length; i++) \n    {\n        result ~= (s[i]\
    \ + 2) % 25;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_ra826ho.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428085]\\n??:? void tmp_ra826ho.__unittest_L28_C1()\
    \ [0x427b46]\\n??:? void tmp_ra826ho.__modtest() [0x427e04]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c78f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b69e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430075]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430524]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430001]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b675]\\n??:? runModuleUnitTests [0x42c565]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428548]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4284cf]\\n??:? _d_run_main [0x42843a]\\n??:? main [0x427e17]\\\
    n??:? __libc_start_main [0x514b6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{ \n    int n = s.length();\
    \ \n    int i;\n    string encryptString = \"\";\n    //char encryptString[n];\n\
    \    for (i = 0; i < n; i++) { \n        encryptString += (char)((s[i] - 'a' +\
    \ 2) % 26 + 'a'); \n    }\n    return encryptString;\n} \nunittest\n{\n    alias\
    \ candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy50rccpa.d(26): Error: C style cast illegal, use `cast(char)((s[i]\
    \ - \\'a\\' + 2) % 26 + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpy50rccpa.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{ \n    string result\
    \ = \"\"; \n    for (int i = 0; i < s.length; i++) \n    {\n        if (s[i] >='a'\
    \ && s[i] <='z'){\n            result += (s[i] - 'a' + 2) % 26 + 'a'; \n     \
    \   }\n        else if (s[i] >= 'A' && s[i] <= 'Z'){\n            result += (s[i]\
    \ - 'A' + 2) % 26 + 'A'; \n        }\n        else{\n            result += s[i];\n\
    \        }\n    }\n    return result; \n} \nunittest\n{\n    alias candidate =\
    \ encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8u7n3d0z.d(25): Error: slice `result` is not mutable\\n/tmp/tmp8u7n3d0z.d(28):\
    \ Error: slice `result` is not mutable\\n/tmp/tmp8u7n3d0z.d(31): Error: slice\
    \ `result` is not mutable\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp8u7n3d0z.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string s2;\n  \
    \  foreach(immutable char ch; s) \n    {\n        int shift=0;\n        immutable\
    \ char nextChar = ch;\n        foreach(immutable int i; 0..2) \n        {\n  \
    \          nextChar = shiftChar(nextChar, 2);\n        }\n        s2 ~= nextChar;\n\
    \    }\n    return s2;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n   \
    \ assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5gksob9s.d(28): Error: undefined identifier `shiftChar`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5gksob9s.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(const ch; s)\n    {\n        if(ch == 'z')\n            result\
    \ ~= 'b';\n        else if(ch == 'y')\n            result ~= 'a';\n        else\
    \ if('a' <= ch <= 'x')\n            result ~= ch + 2;\n        else if('A' <=\
    \ ch <= 'X')\n            result ~= ch + 2;\n        else if('0' <= ch <= '8')\n\
    \            result ~= ch + 2;\n        else\n            result ~= ch;\n    }\n\
    \    return result;\n}\n/*\nCreate a function that takes a string encrypted by\
    \ the encrypt() function \n    and returns the decrypted string. The decrypted\
    \ string should be an \n    exact inverse of the encrypted one. The alphabet should\
    \ be rotated \n    in a manner such that the letters shift up by two multiplied\
    \ to two places.\n    For example:\n    >>> decrypt(\"lm\")\n    \"hi\"\n    >>>\
    \ decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>> decrypt(\"kj\")\n    \"gf\"\
    \n    >>> decrypt(\"ix\")\n    \"et\"\n    \n*/\nstring decrypt(string s) \n{\n\
    \    string result = \"\";\n    foreach(const ch; s)\n    {\n        if(ch ==\
    \ 'b')\n            result ~= 'z';\n        else if(ch == 'a')\n            result\
    \ ~= 'y';\n        else if('c' <= ch <= 'z')\n            result ~= ch - 2;\n\
    \        else if('C' <= ch <= 'Z')\n            result ~= ch - 2;\n        else\
    \ if('2' <= ch <= '9')\n            result ~= ch - 2;\n        else\n        \
    \    result ~= ch;\n    }\n    return result;\n}\n/*\nCreate a function that takes\
    \ a string and returns a string that contains \n    the letter in the same position\
    \ in the alphabet multiplied by the \n    position of the letter in the alphabet.\n\
    \    For example:\n    >>> test(\"hi\")\n    \"kl\"\n    >>> test(\"asdfghjkl\"\
    )\n    \"bmkpnxtyb\"\n    >>>\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe53o5bds.d(28): Error: found `<=` when expecting `)`\\n/tmp/tmpe53o5bds.d(28):\
    \ Error: found `)` when expecting `;` following statement\\n/tmp/tmpe53o5bds.d(30):\
    \ Error: found `else` without a corresponding `if`, `version` or `debug` statement\\\
    n/tmp/tmpe53o5bds.d(32): Error: found `else` without a corresponding `if`, `version`\
    \ or `debug` statement\\n/tmp/tmpe53o5bds.d(34): Error: found `else` without a\
    \ corresponding `if`, `version` or `debug` statement\\n/tmp/tmpe53o5bds.d(64):\
    \ Error: found `<=` when expecting `)`\\n/tmp/tmpe53o5bds.d(64): Error: found\
    \ `)` when expecting `;` following statement\\n/tmp/tmpe53o5bds.d(66): Error:\
    \ found `else` without a corresponding `if`, `version` or `debug` statement\\\
    n/tmp/tmpe53o5bds.d(68): Error: found `else` without a corresponding `if`, `version`\
    \ or `debug` statement\\n/tmp/tmpe53o5bds.d(70): Error: found `else` without a\
    \ corresponding `if`, `version` or `debug` statement\\n/tmp/tmpe53o5bds.d(75):\
    \ Error: unterminated /* */ comment\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpe53o5bds.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    auto encrypted\
    \ = \"\";\n    foreach(ch; s)\n    {\n        // ch is a char, char.min equals\
    \ '\\0', char.max equals '\\xff'\n        int index = ch - 'a'; // obtain a 0..25\
    \ value\n        encrypted ~= 'a' + ((index + (index * 2)) % 26);\n    }\n   \
    \ return encrypted;\n}\n/*\nCreate a function decrypt that takes a string as an\
    \ argument and\n    returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift up by two multiplied to two places.\n    For example:\n    >>> decrypt(\"\
    lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>>\
    \ decrypt(\"kj\")\n    \"gf\"\n    >>> decrypt(\"ix\")\n    \"et\"\n    \n*/\n\
    string decrypt(string s) \n{\n    auto decrypted = \"\";\n    foreach(ch; s)\n\
    \    {\n        // ch is a char, char.min equals '\\0', char.max equals '\\xff'\n\
    \        int index = ch - 'a'; // obtain a 0..25 value\n        decrypted ~= 'a'\
    \ + ((index - (index * 2)) % 26);\n    }\n    return decrypted;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphlj86ys0.d(61): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42818d]\\n??:? void tmphlj86ys0.__unittest_L57_C1()\
    \ [0x427c52]\\n??:? void tmphlj86ys0.__modtest() [0x427f10]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c823]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b732]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430109]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305b8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430095]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b709]\\n??:? runModuleUnitTests [0x42c5f9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4285dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428563]\\n??:? _d_run_main [0x4284ce]\\n??:? main [0x427f23]\\\
    n??:? __libc_start_main [0x1c4b9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n\tstring retStr = \"\
    \";\n\tforeach(ch; s) \n\t{\n\t\tretStr ~= ch+2*2;\n\t}\n\treturn retStr;\n}\n\
    /*\n\tCreate a function decrypt that takes a string as an argument and\n    returns\
    \ a string decrypted with the alphabet being rotated. \n    The alphabet should\
    \ be rotated in a manner such that the letters \n    shift up by two multiplied\
    \ to two places.\n    For example:\n    >>> decrypt(\"kj\")\n    \"gf\"\n    >>>\
    \ decrypt(\"lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\
    \n    >>> decrypt(\"ix\")\n    \"et\"\n    \n*/\nstring decrypt(string s) \n{\n\
    \tstring retStr = \"\";\n\tforeach(ch; s) \n\t{\n\t\tretStr ~= ch-2*2;\n\t}\n\t\
    return retStr;\n}\n/*\n\tCreate a function factorial that takes an integer, n,\
    \ as an argument \n\tand returns the factorial of n.\n\tFor example:\n\t>>> factorial(5)\n\
    \t120\n\t>>> factorial(7)\n\t5040\n\t>>> factorial(10)\n\t3628800\n*/\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgk8d2st4.d(72): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281fd]\\n??:? void tmpgk8d2st4.__unittest_L64_C1()\
    \ [0x427dee]\\n??:? void tmpgk8d2st4.__modtest() [0x427f80]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c19b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0aa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301c1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430670]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43014d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b081]\\n??:? runModuleUnitTests [0x42bf71]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42864c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285d3]\\n??:? _d_run_main [0x42853e]\\n??:? main [0x427f93]\\\
    n??:? __libc_start_main [0x98ed1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    char[] arr = s.dup;\n\
    \    immutable char[] alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \    int len = arr.length;\n    for(int i = 0; i < len; i++)\n    {\n        int\
    \ idx = std.array.indexOf(alphabet, arr[i]);\n        arr[i] = alphabet[(idx +\
    \ 2*2) % 26];\n    }\n    return arr.idup;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1z935mf8.d(23): Error: cannot implicitly convert expression `arr.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp1z935mf8.d(26): Error: undefined identifier\
    \ `array` in package `std`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp1z935mf8.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int i = 0;\n  \
    \  string str;\n    foreach(ch; s) \n    {\n        if(ch=='z')\n        {\n \
    \           str ~= 'b';\n        }\n        else if(ch=='y')\n        {\n    \
    \        str ~= 'a';\n        }\n        else if(ch=='x')\n        {\n       \
    \     str ~= '`';\n        }\n        else if(ch==' ')\n        {\n          \
    \  str ~= ' ';\n        }\n        else if(ch=='.')\n        {\n            str\
    \ ~= '.';\n        }\n        else if(ch==',')\n        {\n            str ~=\
    \ ',';\n        }\n        else if(ch=='?')\n        {\n            str ~= '?';\n\
    \        }\n        else if(ch=='!')\n        {\n            str ~= '!';\n   \
    \     }\n        else\n        {\n            str ~= ch + 2;\n        }\n    \
    \    i++;\n    }\n    return str;\n}\n/*\n>>> print(\"\")\n>>> print(\"\")\n>>>\
    \ print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\
    \")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\
    \")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\
    \")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\
    \")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\
    \")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\
    \")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\
    \")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\
    \")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\
    \")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\")\n>>> print(\"\
    \")\n\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2p732g42.d(65): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p732g42.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(e; s)\n    {\n        char c = e + 4;\n        c = cast(char)(c);\n\
    \        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuuybtol5.d(24): Error: cannot implicitly convert expression `cast(int)e\
    \ + 4` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpuuybtol5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    //return s;\n \
    \   \n    string ret = \"\";\n    foreach(char c; s)\n    {\n        if(c < 'a'\
    \ || c > 'z')\n            ret ~= c;\n        else\n        {\n            int\
    \ i = c - 'a';\n            i = (i + (i<<1)) % 26;\n            ret ~= char(i\
    \ + 'a');\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu3ezqs4q.d(32): Error: cannot implicitly convert expression `i\
    \ + 97` of type `int` to `char`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpu3ezqs4q.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int i = 0;\n  \
    \  string encrypt;\n    foreach(char c; s)\n    {\n        encrypt ~= (c+2*2);\n\
    \    }\n    return encrypt;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp16qxh7z2.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42812d]\\n??:? void tmp16qxh7z2.__unittest_L29_C1()\
    \ [0x427d1e]\\n??:? void tmp16qxh7z2.__modtest() [0x427eb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c0cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afda]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4300f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4305a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43007d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb1]\\n??:? runModuleUnitTests [0x42bea1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42857c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428503]\\n??:? _d_run_main [0x42846e]\\n??:? main [0x427ec3]\\\
    n??:? __libc_start_main [0x3f9be554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alph = \"\
    abcdefghijklmnopqrstuvwxyz\";\n    string newAlph = \"cdefghijklmnopqrstuvwxyzab\"\
    ;\n    string result = \"\";\n    int pos;\n    foreach(char c; s)\n    {\n  \
    \      pos = alph.find(c);\n        if(pos != -1)\n        {\n            result\
    \ ~= newAlph[pos];\n        }\n        else\n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\n/*\nCreate a function decrypt that\
    \ takes a string as an argument and\n    returns a string decrypted with the alphabet\
    \ being rotated. \n    The alphabet should be rotated in a manner such that the\
    \ letters \n    shift up by two multiplied to two places.\n    For example:\n\
    \    >>> decrypt(\"lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\
    \n    >>> decrypt(\"kj\")\n    \"gf\"\n    >>> decrypt(\"ix\")\n    \"et\"\n \
    \   >>> decrypt(\"abc\")\n    \"xyz\"\n    \n*/\nstring decrypt(string s) \n{\n\
    \    string alph = \"abcdefghijklmnopqrstuvwxyz\";\n    string newAlph = \"xyzabcdefghijklmnopqrstuvw\"\
    ;\n    string result = \"\";\n    int pos;\n    foreach(char c; s)\n    {\n  \
    \      pos = alph.find(c);\n        if(pos != -1)\n        {\n            result\
    \ ~= newAlph[pos];\n        }\n        else\n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}\n/*\nCreate a function reverse that\
    \ takes a string as an argument and\n    returns a string that is reversed.\n\
    \    For example:\n    >>> reverse(\"hello\")\n    \"olleh\"\n    >>> reverse(\"\
    hello world\")\n    \"dlrow olleh\"\n    >>> reverse(\"1\")\n    \"1\"\n    >>>\
    \ reverse(\"\")\n    \"\"\n*/\nstring reverse(string s) \n{\n    string result\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9lvsrg36.d(92): Error: found `result` when expecting `;` following\
    \ statement\\n/tmp/tmp9lvsrg36.d(93): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lvsrg36.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret = \"\
    \";\n    foreach(c; s)\n    {\n        int offset = 2*2;\n        if(c.isUpper)\n\
    \        {\n            ret ~= (cast(char)(((c - 'A' + offset) % 26) + 'A'));\n\
    \        }\n        else if(c.isLower)\n        {\n            ret ~= (cast(char)(((c\
    \ - 'a' + offset) % 26) + 'a'));\n        }\n        else\n        {\n       \
    \     ret ~= c;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias\
    \ candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoiqaruhs.d(25): Error: no property `isUpper` for type `immutable(char)`\\\
    n/tmp/tmpoiqaruhs.d(29): Error: no property `isLower` for type `immutable(char)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoiqaruhs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string s2 = \"\"\
    ;\n    foreach(int i;0..s.length)\n    {\n        if (s[i] == 'z')\n        {\n\
    \            s2 ~= 'b';\n        }\n        else if (s[i] == 'y')\n        {\n\
    \            s2 ~= 'a';\n        }\n        else\n        {\n            s2 ~=\
    \ s[i] + 2;\n        }\n    }\n    return s2;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpruwtosku.d(22): Error: cannot implicitly convert expression `s.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpruwtosku.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    enum a = 'a';\n\
    \    enum z = 'z';\n    enum A = 'A';\n    enum Z = 'Z';\n    enum shift = 2;\n\
    \    string encrypted = \"\";\n    foreach(ch; s) \n    {\n        // lower case\n\
    \        if (ch >= a && ch <= z) \n        {\n            if (ch + shift > z)\
    \ \n            {\n                encrypted ~= to!string(A + (shift - (z - ch)\
    \ - 1));\n            } \n            else \n            {\n                encrypted\
    \ ~= to!string(ch + shift);\n            }\n        } \n        // upper case\n\
    \        else if (ch >= A && ch <= Z) \n        {\n            if (ch + shift\
    \ > Z) \n            {\n                encrypted ~= to!string(a + (shift - (Z\
    \ - ch) - 1));\n            } \n            else \n            {\n           \
    \     encrypted ~= to!string(ch + shift);\n            }\n        } \n       \
    \ // not a letter\n        else \n        {\n            encrypted ~= to!string(ch);\n\
    \        }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyck3rp2u.d(34): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpyck3rp2u.d(38): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\n/tmp/tmpyck3rp2u.d(46):\
    \ Error: template instance `to!string` template `to` is not defined, did you mean\
    \ No?\\n/tmp/tmpyck3rp2u.d(50): Error: template instance `to!string` template\
    \ `to` is not defined, did you mean No?\\n/tmp/tmpyck3rp2u.d(56): Error: template\
    \ instance `to!string` template `to` is not defined, did you mean No?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyck3rp2u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(immutable char c; s)\n    {\n        result ~= (char)((c - 'a' +\
    \ 2) % 26 + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9mlp0d3d.d(24): Error: C style cast illegal, use `cast(char)((c\
    \ - \\'a\\' + 2) % 26 + \\'a\\')`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp9mlp0d3d.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{ \n    char[] cipher\
    \ = new char[s.length]; \n    int j = 0; \n    foreach(i; s)\n    { \n       \
    \ if (i >= 'a' && i <= 'z') { \n            if (i > 'm') \n                cipher[j++]\
    \ = cast(char)(i - 13); \n            else\n                cipher[j++] = cast(char)(i\
    \ + 13); \n        } \n        else if (i >= 'A' && i <= 'Z') { \n           \
    \ if (i > 'M') \n                cipher[j++] = cast(char)(i - 13); \n        \
    \    else\n                cipher[j++] = cast(char)(i + 13); \n        } \n  \
    \      else { \n            cipher[j++] = i; \n        } \n    } \n    string\
    \ s2 = \"\";\n    foreach(i; cipher)\n    {\n        s2 ~= i;\n    }\n    return\
    \ s2;\n}\n//------------------------------\n/*\nCreate a function decrypt that\
    \ takes a string as an argument and \n    returns a string decrypted with the\
    \ alphabet being rotated. \n    This function should do the same thing as encrypt\
    \ but the \n    opposite.\n    For example:\n    >>> decrypt(\"lm\")\n    \"hi\"\
    \n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>> decrypt(\"kj\")\n\
    \    \"gf\"\n    >>> decrypt(\"ix\")\n    \"et\"\n*/\nstring decrypt(string s)\
    \ \n{ \n    char[] cipher = new char[s.length]; \n    int j = 0; \n    foreach(i;\
    \ s)\n    { \n        if (i >= 'a' && i <= 'z') { \n            if (i > 'm') \n\
    \                cipher[j++] = cast(char)(i - 13); \n            else\n      \
    \          cipher[j++] = cast(char)(i + 13); \n        } \n        else if (i\
    \ >= 'A' && i <= 'Z') { \n            if (i > 'M') \n                cipher[j++]\
    \ = cast(char)(i -\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0tuxt_rg.d(79): Error: expression expected, not `unittest`\\\
    n/tmp/tmp0tuxt_rg.d(78): Error: found `{` when expecting `)`\\n/tmp/tmp0tuxt_rg.d(81):\
    \ Error: found `alias` when expecting `;` following statement\\n/tmp/tmp0tuxt_rg.d(92):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp0tuxt_rg.d(92): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0tuxt_rg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{ \n    int n = s.length();\
    \ \n    foreach(ch; s)\n    {\n        // Lowercase \n        if (ch >= 'a' &&\
    \ ch <= 'z') \n            s[ch] = ((s[ch] - 'a') + 2) % 26 + 'a'; \n        \
    \  \n        // Uppercase \n        else if (ch >= 'A' && ch <= 'Z') \n      \
    \      s[ch] = ((s[ch] - 'A') + 2) % 26 + 'A'; \n    } \n    return s; \n} \n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb5tjbf22.d(21): Error: no property `length` for type `string`\\\
    n/tmp/tmpb5tjbf22.d(26): Error: cannot modify `immutable` expression `s[cast(ulong)ch]`\\\
    n/tmp/tmpb5tjbf22.d(30): Error: cannot modify `immutable` expression `s[cast(ulong)ch]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb5tjbf22.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
