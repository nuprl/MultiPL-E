language: d
name: HumanEval_23_strlen
results:
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\n/*\n    Return zero if given string is empty\n\
    \    >>> iszero(\"\")\n    true\n    >>> iszero(\"abc\")\n    false\n*/\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    for (long i = 0; string[i] != '\\0'; i++) \n\
    \    {\n        length++;\n    }\n    return length;\n}\nunittest\n{\n    alias\
    \ candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmp94fq2ad5.d(13): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x427e06]\n??:? long tmp94fq2ad5.strlen(immutable(char)[]) [0x427a24]\n??:?
    void tmp94fq2ad5.__unittest_L19_C1() [0x427a58]\n??:? void tmp94fq2ad5.__modtest()
    [0x427ad8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a982]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb15]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42faa1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a959]\n??:? runModuleUnitTests [0x42b8c5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428218]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42819f]\n??:? _d_run_main [0x42810a]\n??:? main [0x427aeb]\n??:?
    __libc_start_main [0xaaca5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return cast(long)string.length;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    char[] chars = string.toCharArray();\n    while(chars[len]\
    \ != '\\0')\n        len++;\n    return len;\n}\n// Test function\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvo_87msn.d(13): Error: no property `toCharArray` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvo_87msn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\tlong length = 0;\n\twhile(length < string.length && string[length] !=\
    \ '\\0')\n\t{\n\t\tlength++;\n\t}\n\treturn length;\n}\nunittest\n{\n    alias\
    \ candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\tlong len;\n\tfor (len = 0; string[len]; len++);\n\treturn len;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6uawibj0.d(13): Error: use `{ }` for an empty statement, not
    `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6uawibj0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    foreach(c; string) \n    {\n        len++;\n   \
    \ }\n    return len;\n}\n/*\n Return true if given string starts with given prefix\n\
    \    >>> startswith(\"\", \"\")\n    true\n    >>> startswith(\"abc\", \"\")\n\
    \    true\n    >>> startswith(\"abc\", \"a\")\n    true\n    >>> startswith(\"\
    abc\", \"ab\")\n    true\n    >>> startswith(\"abc\", \"abc\")\n    true\n   \
    \ >>> startswith(\"abc\", \"abcd\")\n    false\n    >>> startswith(\"abc\", \"\
    b\")\n    false\n    >>> startswith(\"abc\", \"bc\")\n    false\n    >>> startswith(\"\
    abc\", \"c\")\n    false\n*/\nunittest\n{\n    alias candidate = strlen;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len;\n    foreach(ch; string)\n        len++;\n    return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    char* c = cast(char*) string;\n    char* ret = c;\n    while(*c) \n\
    \    {\n        c++;\n    }\n    return c - ret;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n  return string.length;\n}\n/*\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmagae4ww.d(14): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmagae4ww.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\tlong length = 0;\n\tforeach(char c; string) \n\t{\n\t\tlength++;\n\t\
    }\n\treturn length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len;\n    foreach(c; string)\n        len++;\n    return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long result = 0;\n    while (string[result] != '\\0') \n    {\n   \
    \     result++;\n    }\n    return result;\n}\n/*\n Return index of first occurrence\
    \ of string needle in string haystack\n or -1 if not found\n    >>> strstr(\"\
    abc\", \"a\")\n    0L\n    >>> strstr(\"abc\", \"b\")\n    1L\n    >>> strstr(\"\
    abc\", \"c\")\n    2L\n    >>> strstr(\"abc\", \"\")\n    0L\n    >>> strstr(\"\
    abc\", \"d\")\n    -1L\n*/\nlong strstr(string haystack, string needle) \n{\n\
    \    long needleLen = strlen(needle);\n    long haystackLen = strlen(haystack);\n\
    \    for (long i = 0; i < haystackLen; i++) \n    {\n        if (haystack[i] ==\
    \ needle[0]) \n        {\n            for (long j = 0; j < needleLen; j++) \n\
    \            {\n                if (needle[j] != haystack[i + j]) \n         \
    \       {\n                    break;\n                }\n                if (j\
    \ == needleLen - 1) \n                {\n                    return i;\n     \
    \           }\n            }\n        }\n    }\n    return -1;\n}\n/*\n Return\
    \ substring of string s, starting at index start and of length len\n    >>> substr(\"\
    abc\", 0, 1)\n    \"a\"\n    >>> substr(\"abc\", 1, 2)\n    \"bc\"\n    >>> substr(\"\
    abc\", 1, 3)\n    \"bc\"\n    >>> substr(\"abc\", 0, 3)\n    \"abc\"\n    >>>\
    \ substr(\"abc\", 0, 4)\n    \"abc\"\n    >>> substr(\"abc\", 1, 0)\n    \"\"\n\
    \    >>> substr(\"abc\", 3, 0)\n    \"\"\n    >>> substr(\"abc\", 4, 0)\n    \"\
    \"\n    >>> substr(\"abc\", 0, -1)\n    \"\"\n    >>> substr(\"abc\", -1, 1)\n\
    \    \"\"\n*/\nstring substr(string s, long start, long len) \n{\n    long sLen\
    \ = strlen(s);\n    if (start\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9vv4x1jq.d(83): Error: found `unittest` when expecting `)`\n/tmp/tmp9vv4x1jq.d(91):
    Error: found `End of File` when expecting `}` following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9vv4x1jq.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n  long length = 0;\n  while(string[length] != '\\0')\n  {\n    length++;\n\
    \  }\n  return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpvtbbr92y.d(13): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x427e0e]\n??:? long tmpvtbbr92y.strlen(immutable(char)[]) [0x427a26]\n??:?
    void tmpvtbbr92y.__unittest_L19_C1() [0x427a5c]\n??:? void tmpvtbbr92y.__modtest()
    [0x427adc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb1d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffcc]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42faa9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a961]\n??:? runModuleUnitTests [0x42b8cd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428220]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281a7]\n??:? _d_run_main [0x428112]\n??:? main [0x427aef]\n??:?
    __libc_start_main [0x92a14554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return cast(long) string.length;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    int i = 0;\n    for (i = 0; string[i] != '\\0'; i++)\n    {}\n    return\
    \ i;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpvwff1_gx.d(13): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x427dfe]\n??:? long tmpvwff1_gx.strlen(immutable(char)[]) [0x427a22]\n??:?
    void tmpvwff1_gx.__unittest_L17_C1() [0x427a50]\n??:? void tmpvwff1_gx.__modtest()
    [0x427ad0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb0d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffbc]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa99]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a951]\n??:? runModuleUnitTests [0x42b8bd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428210]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428197]\n??:? _d_run_main [0x428102]\n??:? main [0x427ae3]\n??:?
    __libc_start_main [0x9c858554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return std.file.byChunk(string, \"r\").length;\n}\nunittest\n{\n  \
    \  alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_cqim473.d(12): Error: undefined identifier `file` in package
    `std`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_cqim473.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n  return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_z_pim8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(c; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi95ztm1f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long result = 0;\n    while (true) {\n        char front;\n       \
    \ front = string[result];\n        if (front == 0)\n            break;\n     \
    \   ++result;\n    }\n    return result;\n}\n/*\n    Chunk string into array of\
    \ strings.\n    @param string the string to chunk\n    @param delim the delimiter\n\
    \    \n    >>> chunk(\"ABC:DEF:123\", \":\")\n    [\"ABC\", \"DEF\", \"123\"]\n\
    \    >>> chunk(\"abc:def:123\", \":\")\n    [\"abc\", \"def\", \"123\"]\n*/\n\
    string[] chunk(string string, string delim) \n{\n    string[] result;\n    long\
    \ beg = 0;\n    long end = 0;\n    while (true) {\n        end = index(string,\
    \ delim, beg);\n        if (end < 0)\n            break;\n        result ~= substr(string,\
    \ beg, end - beg);\n        beg = end + strlen(delim);\n    }\n    result ~= substr(string,\
    \ beg, strlen(string) - beg);\n    return result;\n}\n//\n// parse a date string\
    \ into date struct\n//\ndate dateparse(string s) \n{\n    date result;\n    string[]\
    \ pieces = chunk(s, \" \");\n    if (pieces.length == 3) {\n        string[] pieces2\
    \ = chunk(pieces[0], \"-\");\n        result.year = to!int(pieces2[0]);\n    \
    \    result.month = to!int(pieces2[1]);\n        result.day = to!int(pieces2[2]);\n\
    \        pieces2 = chunk(pieces[1], \":\");\n        result.hour = to!int(pieces2[0]);\n\
    \        result.minute = to!int(pieces2[1]);\n        result.second = to!int(pieces2[2]);\n\
    \        pieces2 = chunk(pieces[2], \",\");\n        result.millisecond = to!int(pieces2[0]);\n\
    \    }\n    return result;\n}\n//\n// format a date struct into a date string\n\
    //\nstring dateformat(date date) \n{\n    return\n    format(\"%04d-%02d\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm1rcc72e.d(80): Error: non-hex character \'')\''\n/tmp/tmpm1rcc72e.d(80):
    Error: non-hex character \''=\''\n/tmp/tmpm1rcc72e.d(80): Error: non-hex character
    \''=\''\n/tmp/tmpm1rcc72e.d(80): Error: non-hex character \''L\''\n/tmp/tmpm1rcc72e.d(80):
    Error: non-hex character \'')\''\n/tmp/tmpm1rcc72e.d(80): Error: non-hex character
    \'';\''\n/tmp/tmpm1rcc72e.d(80): Error: non-hex character \''s\''\n/tmp/tmpm1rcc72e.d(80):
    Error: non-hex character \''s\''\n/tmp/tmpm1rcc72e.d(80): Error: non-hex character
    \''r\''\n/tmp/tmpm1rcc72e.d(80): Error: non-hex character \''t\''\n/tmp/tmpm1rcc72e.d(80):
    Error: non-hex character \''(\''\n/tmp/tmpm1rcc72e.d(80): Error: non-hex character
    \''n\''\n/tmp/tmpm1rcc72e.d(80): Error: non-hex character \''i\''\n/tmp/tmpm1rcc72e.d(80):
    Error: non-hex character \''t\''\n/tmp/tmpm1rcc72e.d(80): Error: non-hex character
    \''(\''\n/tmp/tmpm1rcc72e.d(81): Error: found \''asdasnakj\'' when expecting \'',\''\n/tmp/tmpm1rcc72e.d(81):
    Error: unterminated string constant starting at /tmp/tmpm1rcc72e.d(81)\n/tmp/tmpm1rcc72e.d(83):
    Error: found \''EOF\'' when expecting \'',\''\n/tmp/tmpm1rcc72e.d(83): Error:
    found \''EOF\'' when expecting \'')\''\n/tmp/tmpm1rcc72e.d(83): Error: found \''EOF\''
    when expecting \'';\'' following return statement\n/tmp/tmpm1rcc72e.d(83): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpm1rcc72e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length;\n    length = 0;\n    foreach(c; string) \n    {\n   \
    \     length += 1;\n    }\n    return length;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc0aute76.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return cast(long)string.length;\n}\n/*\n Find character in string\n\
    \    \n    >>> find(\"abc\", 'a')\n    0L\n    >>> find(\"abc\", 'c')\n    2L\n\
    \    >>> find(\"abc\", 'd')\n    -1L\n*/\nlong find(string string, char char)\
    \ \n{\n    return string.find(char);\n}\n/*\n Return number of occurrences of\
    \ character in string\n \n    >>> count(\"abc\", 'a')\n    1L\n    >>> count(\"\
    aa\", 'a')\n    2L\n    >>> count(\"abca\", 'a')\n    2L\n*/\nlong count(string\
    \ string, char char) \n{\n    long count = 0L;\n    for (dchar c in string) {\n\
    \        if (c == char) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n Return a new string, with all occurrences of character from\
    \ given string removed\n \n    >>> strstrip(\"abc\", 'a')\n    \"bc\"\n    >>>\
    \ strstrip(\"aa\", 'a')\n    \"\"\n    >>> strstrip(\"abca\", 'a')\n    \"bc\"\
    \n*/\nstring strstrip(string string, char char) \n{\n    string ret = \"\";\n\
    \    for (dchar c in string) {\n        if (c != char) {\n            ret ~= c;\n\
    \        }\n    }\n    return ret;\n}\n/*\n Return a new string, with all occurrences\
    \ of character from given string replaced by specified character\n \n    >>> strstrip(\"\
    abc\", 'a', 'z')\n    \"zbc\"\n    >>> strstrip(\"abca\", 'a', 'z')\n    \"zbcz\"\
    \n*/\nstring strreplace(string string, char char, char replace) \n{\n    string\
    \ ret = \"\";\n    for (dchar c in string) {\n        if (c == char) {\n     \
    \       ret ~= replace;\n        } else {\n            ret ~= c;\n        }\n\
    \    }\n    return ret;\n}\n/*\n Return true if given string ends with specified\
    \ suffix, else false\n \n    >>> strends(\"abc\", \"c\")\n    true\n\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptcfo1rxv.d(24): Error: found \''char\'' when expecting \'')\''\n/tmp/tmptcfo1rxv.d(24):
    Error: semicolon expected following function declaration\n/tmp/tmptcfo1rxv.d(24):
    Error: Declaration expected, not \'')\''\n/tmp/tmptcfo1rxv.d(27): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptcfo1rxv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i = 0;\n    while (string[i] != '\\0')\n        i++;\n    return\
    \ i;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr_n243gd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    long index = 0;\n    while(index < string.length)\n\
    \    {\n        index++;\n        length++;\n    }\n    return length;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5lclolmm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n  return strlen(string);\n}\n/*\n Return length of given string\n    >>>\
    \ strlen(\"\")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(const\
    \ char* string) \n{\n  long count = 0;\n  for (long i = 0; string[i] != '\\0';\
    \ i++) {\n    count++;\n  }\n  return count;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnpivj5a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    //strlen(\"abcde\") = 5\n    long length = 0;\n    foreach(char c;\
    \ string)\n    {\n        length++;\n    }\n    return length;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdh_j5uaw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\tint i;\n\tfor (i = 0; string[i]; i++);\n\treturn i;\n}\nunittest\n{\n\
    \    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_u4ex8d_.d(13): Error: use \''{ }\'' for an empty statement,
    not a \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_u4ex8d_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\tlong length = 0;\n\tforeach(char c; string) \n\t{\n\t\tlength++;\n\t\
    }\n\treturn length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    char character;\n    size_t position = 0;\n \
    \   for (; ; ) {\n        character = string[position];\n        if (character\
    \ == '\\0') {\n            break;\n        }\n        length += 1;\n        position\
    \ += 1;\n    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp049itvmx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long ret;\n    foreach(string c; string)\n    {\n        ret++;\n \
    \   }\n    return ret;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpan3eviuo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return cast(long)string.length;\n}\n/*\n    Find a character in a string\n\
    \    >>> strchr(\"abc\", 'a')\n    0L\n    >>> strchr(\"abc\", 'b')\n    1L\n\
    \    >>> strchr(\"abc\", 'c')\n    2L\n    >>> strchr(\"abc\", 'd')\n    -1L\n\
    */\nlong strchr(string string, char ch) \n{\n    foreach(idx, c; string) \n  \
    \  {\n        if(c == ch) \n        {\n            return idx;\n        }\n  \
    \  }\n    return -1L;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwsc1b20o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return size(string);\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8pew78w5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i = 0;\n    while (string[i]) \n    {\n        i += 1;\n    }\n\
    \    return i;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmfrebtds.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(char; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5g71_mge.d(13): Error: no identifier for declarator char\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g71_mge.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\tlong length;\n\tlength = 0;\n\twhile (string[length] != '\\0')\n\t{\n\
    \t\tlength++;\n\t}\n\treturn length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9s4fgqae.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(char c; string)\n        length++;\n\
    \    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvl7q4yp4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long count = 0;\n    while (string[count] != '\\0')\n    {\n      \
    \  count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmle71icy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    size_t length = 0;\n    foreach(const char ch; string)\n    {\n   \
    \     length++;\n    }\n    return length;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkh3iqmej.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    foreach(ch; string)\n    {\n        ++len;\n   \
    \ }\n    return len;\n}\n/*\n Return length of given wstring\n    >>> wstrlen(\"\
    \")\n    0L\n    >>> wstrlen(\"abc\")\n    3L\n    \n*/\nlong wstrlen(wstring\
    \ string) \n{\n    long len = 0;\n    foreach(ch; string)\n    {\n        ++len;\n\
    \    }\n    return len;\n}\n/*\n Return length of given string\n    >>> dstrlen(\"\
    \")\n    0L\n    >>> dstrlen(\"abc\")\n    3L\n    \n*/\nlong dstrlen(dstring\
    \ string) \n{\n    long len = 0;\n    foreach(ch; string)\n    {\n        ++len;\n\
    \    }\n    return len;\n}\n/*\n Return length of given dstring\n    >>> dstrlen(\"\
    \")\n    0L\n    >>> dstrlen(\"abc\")\n    3L\n    \n*/\nlong dstrlen(dstring\
    \ string) \n{\n    long len = 0;\n    foreach(ch; string)\n    {\n        ++len;\n\
    \    }\n    return len;\n}\n/*\n Return number of characters in given string\n\
    \    >>> strlen(\"\")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong\
    \ strlen(string string) \n{\n    long len = 0;\n    foreach(ch; string)\n    {\n\
    \        ++len;\n    }\n    return len;\n}\n/*\n Return number of characters in\
    \ given wstring\n    >>> wstrlen(\"\")\n    0L\n    >>> wstrlen(\"abc\")\n   \
    \ 3L\n    \n*/\nlong wstrlen(wstring string) \n{\n    long len = 0;\n    foreach(ch;\
    \ string)\n    {\n        ++len;\n    }\n    return len;\n}\n/*\n Return number\
    \ of characters in given dstring\n    >>> dstrlen(\"\")\n    0L\n    >>> dstrlen(\"\
    abc\")\n    3L\n    \n*/\nlong dstrlen(dstring string) \n{\nunittest\n{\n    alias\
    \ candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppdcucsq6.d(114): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppdcucsq6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i;\n    for (i = 0; string[i]; i++);\n    return i;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp23djyh7m.d(13): Error: use \''{ }\'' for an empty statement,
    not a \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23djyh7m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    for (int i = 0; string[i] != '\\0'; i++)\n     \
    \   len++;\n    return len;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd7sogam8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\n/*\n Return the length of the initial segment\
    \ of S which consists entirely of characters in ACCEPT.\n    >>> strspn(\"foo\"\
    , \"o\")\n    1L\n    >>> strspn(\"foo\", \"\")\n    0L\n    >>> strspn(\"foo\"\
    , \"o \")\n    2L\n    >>> strspn(\"foo\", \"o f\")\n    2L\n    >>> strspn(\"\
    foo\", \"f o\")\n    1L\n    >>> strspn(\"foo\", \"abc\")\n    0L\n    \n*/\n\
    long strspn(string str, string accept) \n{\n    long result = 0;\n    foreach\
    \ (s; str) \n    {\n        if (accept.contains(s)) \n        {\n            result++;\n\
    \        }\n        else \n        {\n            break;\n        }\n    }\n \
    \   return result;\n}\n/*\n Return the length of the initial segment of S which\
    \ consists entirely of characters not in REJECT.\n    >>> strcspn(\"foo\", \"\
    x\")\n    3L\n    >>> strcspn(\"foo\", \"\")\n    0L\n    >>> strcspn(\"foo\"\
    , \"x \")\n    2L\n    >>> strcspn(\"foo\", \"xyz\")\n    0L\n    >>> strcspn(\"\
    foo\", \"fxo\")\n    0L\n    >>> strcspn(\"foo\", \"fo\")\n    0L\n    >>> strcspn(\"\
    foo\", \"of\")\n    2L\n    \n*/\nlong strcspn(string str, string reject) \n{\n\
    \    long result = 0;\n    foreach (s; str) \n    {\n        if (!reject.contains(s))\
    \ \n        {\n            result++;\n        }\n        else \n        {\n  \
    \          break;\n        }\n    }\n    return result;\n}\n/*\n Return the position\
    \ of the first occurrence of SUB in S, or -1 if SUB is not found.\n    >>> strpbrk(\"\
    foo\", \"\")\n    -1L\n    >>> strpbrk(\"foo\", \"x\")\n    -1L\n    >>> strpbrk\n\
    unittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmhbsshzx.d(80): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmhbsshzx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return cast(long)string.length;\n}\n/*\n    >>> fract(3.4)\n    0.4\n\
    \    >>> fract(3)\n    0.0\n    >>> fract(-3.4)\n    0.6\n    >>> fract(-3)\n\
    \    0.0\n    >>> fract(0)\n    0.0\n    >>> fract(2.0/3.0)\n    0.666667\n*/\n\
    float fract(float x) \n{\n    return x - floor(x);\n}\n/*\n    >>> roundEven(0.5)\n\
    \    0\n    >>> roundEven(1.5)\n    2\n    >>> roundEven(2.5)\n    2\n    >>>\
    \ roundEven(3.5)\n    4\n    >>> roundEven(4.5)\n    4\n    >>> roundEven(5.5)\n\
    \    6\n    >>> roundEven(6.5)\n    6\n    >>> roundEven(7.5)\n    8\n    >>>\
    \ roundEven(8.5)\n    8\n    >>> roundEven(9.5)\n    10\n    >>> roundEven(10.5)\n\
    \    10\n    >>> roundEven(11.5)\n    12\n    >>> roundEven(12.5)\n    12\n  \
    \  >>> roundEven(13.5)\n    14\n    >>> roundEven(14.5)\n    14\n    >>> roundEven(15.5)\n\
    \    16\n    >>> roundEven(16.5)\n    16\n    >>> roundEven(17.5)\n    18\n  \
    \  >>> roundEven(18.5)\n    18\n    >>> roundEven(19.5)\n    20\n    >>> roundEven(20.5)\n\
    \    20\n    >>> roundEven(21.5)\n    22\n    >>> roundEven(22.5)\n    22\n  \
    \  >>> roundEven(23.5)\n    24\n    >>> roundEven(24.5)\n    24\n    >>> roundEven(25.5)\n\
    \    26\n    >>> roundEven(26.5)\n    26\n    >>> roundEven(27.5)\n    28\n  \
    \  >>> roundEven(28.5)\n    28\n    >>> roundEven(29.5)\nunittest\n{\n    alias\
    \ candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplvviqnob.d(32): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmplvviqnob.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return cast(long)string.length;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\tlong len = 0;\n\tforeach(c; string)\n\t{\n\t\tlen++;\n\t}\n\treturn len;\n\
    }\n/*\n Compute the Hamming distance between two strings\n    >>> hamming(\"\"\
    , \"\")\n    0L\n    >>> hamming(\"abc\", \"abc\")\n    0L\n    >>> hamming(\"\
    aaa\", \"bbb\")\n    3L\n    >>> hamming(\"abc\", \"def\")\n    3L\n    >>> hamming(\"\
    abc\", \"\")\n    InvalidArgumentError(\"Strings must have same length.\")\n*/\n\
    long hamming(string s1, string s2)\n{\n\tif(strlen(s1) != strlen(s2))\n\t{\n\t\
    \tthrow new Exception(\"Strings must have same length.\");\n\t}\n\tlong distance\
    \ = 0;\n\tforeach(c1, c2; zip(s1, s2))\n\t{\n\t\tif(c1 != c2)\n\t\t{\n\t\t\tdistance++;\n\
    \t\t}\n\t}\n\treturn distance;\n}\n/*\n Compute the Levenshtein distance between\
    \ two strings\n    >>> levenshtein(\"\", \"\")\n    0L\n    >>> levenshtein(\"\
    abc\", \"abc\")\n    0L\n    >>> levenshtein(\"kitten\", \"sitting\")\n    3L\n\
    \    >>> levenshtein(\"abc\", \"\")\n    3L\n*/\nlong levenshtein(string s1, string\
    \ s2)\n{\n\tlong len1 = strlen(s1);\n\tlong len2 = strlen(s2);\n\t\n\tauto lev\
    \ = new long[][](len1 + 1, len2 + 1);\n\tforeach(i; 0 .. len1 + 1)\n\t{\n\t\t\
    lev[i][0] = i;\n\t}\n\tforeach(j; 0 .. len2 + 1)\n\t{\n\t\tlev[0][j] = j;\n\t\
    }\n\t\n\tforeach(i; 1 .. len1 + 1)\n\t{\n\t\tforeach(j; 1 .. len2 + 1)\n\t\t{\n\
    \t\t\tif(s1[i - 1] ==\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4xrer0d7.d(79): Error: expression expected, not \''unittest\''\n/tmp/tmp4xrer0d7.d(80):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmp4xrer0d7.d(87): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp4xrer0d7.d(87):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4xrer0d7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long count = 0;\n    while (string[count] != '\\0') {\n        count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = strlen;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu77rd8zf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n    \
    \    length++;\n    }\n    return length;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpub6myt7e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    foreach(c; string)\n    {\n        len++;\n    }\n\
    \    return len;\n}\n/*\n Return distance between two strings, the \"distance\"\
    \ between a and b is defined as the minimum number of edits needed to change a\
    \ to b.\n    >>> strdist(\"\", \"\")\n    0L\n    >>> strdist(\"\", \"abc\")\n\
    \    3L\n    >>> strdist(\"abc\", \"\")\n    3L\n    >>> strdist(\"ab\", \"ab\"\
    )\n    0L\n    >>> strdist(\"ab\", \"ba\")\n    2L\n    >>> strdist(\"foo\", \"\
    bar\")\n    3L\n    >>> strdist(\"foo\", \"ofo\")\n    2L\n*/\nlong strdist(string\
    \ a, string b) \n{\n    long cost;\n    long n = strlen(a);\n    long m = strlen(b);\n\
    \    long[,] d = new long[n + 1, m + 1];\n    if (n == 0) return m;\n    if (m\
    \ == 0) return n;\n    foreach(i; 0 .. n + 1) d[i, 0] = i;\n    foreach(j; 0 ..\
    \ m + 1) d[0, j] = j;\n    foreach(i; 1 .. n + 1)\n    {\n        foreach(j; 1\
    \ .. m + 1)\n        {\n            cost = a[i - 1] == b[j - 1] ? 0 : 1;\n   \
    \         d[i, j] = min(min(d[i - 1, j] + 1, d[i, j - 1] + 1), d[i - 1, j - 1]\
    \ + cost);\n        }\n    }\n    return d[n, m];\n}\n/*\n Return number of times\
    \ that a substring occurs in a string\n    >>> find_substr(\"\", \"\")\n    0L\n\
    \    >>> find_substr(\"\", \"abc\")\n    0L\n    >>> find_substr(\"abc\", \"\"\
    )\n    0L\n    >>> find_substr(\"ab\", \"ab\")\n    1L\n    >>> find_substr(\"\
    ab\", \"ba\")\n    0L\n   \nunittest\n{\n    alias candidate = strlen;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphuys5g_k.d(41): Error: expression expected, not \'',\''\n/tmp/tmphuys5g_k.d(41):
    Error: found \'',\'' when expecting \'']\''\n/tmp/tmphuys5g_k.d(41): Error: semicolon
    expected, not \''m\''\n/tmp/tmphuys5g_k.d(41): Error: found \'']\'' when expecting
    \'';\'' following statement\n/tmp/tmphuys5g_k.d(56): Error: unterminated /* */
    comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphuys5g_k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long result = 0;\n    foreach(char ch; string)\n    {\n        result++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcbz6t0je.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(c; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\n/*\n Return a new string consisting of a given\
    \ string duplicated a given number of times.\n    >>> repeater(\"\", 2)\n    \"\
    \"\n    >>> repeater(\"x\", 4)\n    \"xxxx\"\n    >>> repeater(\"ab\", 2)\n  \
    \  \"abab\"\n    \n*/\nstring repeater(string string, int count) \n{\n    string\
    \ repeatedString = \"\";\n    foreach(count; 0..count) \n    {\n        repeatedString\
    \ ~= string;\n    }\n    return repeatedString;\n}\n/*\n    Return a new string\
    \ consisting of a given string, surrounded by spaces, \n    and padded to a given\
    \ length with spaces.\n    >>> center(\"abc\", 7)\n    \"  abc  \"\n    >>> center(\"\
    \", 7)\n    \"       \"\n    >>> center(\"abc\", 0)\n    \"abc\"\n*/\nstring center(string\
    \ string, int length) \n{\n    // Check input\n    if(string.length == 0) \n \
    \   {\n        return repeater(\" \", length);\n    }\n    else if(length <= string.length)\
    \ \n    {\n        return string;\n    }\n    // Calculate padding on each side\n\
    \    long padding = (length - string.length) / 2;\n    // Pad the string\n   \
    \ return repeater(\" \", padding) ~ string ~ repeater(\" \", padding);\n}\n/*\n\
    \ Return a new string with a given string center-justified in a field of a given\
    \ width.\n    >>> ljust(\"abc\", 7)\n    \"abc    \"\n    >>> ljust(\"\", 7)\n\
    \    \"       \"\n    >>> ljust(\"abc\", 0)\n    \"abc\"\n*/\nstring ljust(string\
    \ string, int length) \n{\n    // Check input\n    if(string.length == 0) \n \
    \   {\n        return repeater(\" \", length);\n    }\n    else if(length <= string.length)\
    \ \n    {\n        return string;\n    }\n    // Calculate padding on each side\n\
    \    long padding = length - string.length;\n   \nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5occ3gg_.d(87): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5occ3gg_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    while (string[len] != '\\0')\n        len++;\n \
    \   return len;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjraxt1gl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkj8am4_t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    foreach(ch; string)\n        len++;\n    return\
    \ len;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp82250zdj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long string_length = 0;\n    for (char c : string) {\n        string_length++;\n\
    \    }\n    return string_length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpinx7pp1_.d(13): Error: semicolon expected, not \'':\''\n/tmp/tmpinx7pp1_.d(13):
    Error: expression expected, not \'':\''\n/tmp/tmpinx7pp1_.d(13): Error: found
    \''string\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpinx7pp1_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long count = 0;\n    foreach(c; string)\n        count++;\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvi4cx2jw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    size_t len = 0;\n    while (string[len] != '\\0') {\n        len++;\n\
    \    }\n    return len;\n}\n/*\n Return a new string of the given length, with\
    \ all its characters\n set to the specified character\n    >>> strchr(0, 4)\n\
    \    \"....\"\n    >>> strchr('x', 2)\n    \"xx\"\n    \n*/\nstring strchr(char\
    \ c, long len)\n{\n    string s = alloc_string(len);\n    for (long i = 0; i <\
    \ len; i++) {\n        s[i] = c;\n    }\n    return s;\n}\n/*\n Return a new string\
    \ that is n copies of the given string,\n joined together\n    >>> repeat(\"abc\"\
    , 0)\n    \"\"\n    >>> repeat(\"abc\", 1)\n    \"abc\"\n    >>> repeat(\"abc\"\
    , 2)\n    \"abcabc\"\n    >>> repeat(\"abc\", 3)\n    \"abcabcabc\"\n    \n*/\n\
    string repeat(string string, long n)\n{\n    if (n == 0) {\n        return \"\"\
    ;\n    }\n    size_t len = strlen(string);\n    string result = alloc_string(len\
    \ * n);\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < len;\
    \ j++) {\n            result[i * len + j] = string[j];\n        }\n    }\n   \
    \ return result;\n}\n/*\n Split string on given character.\n Returns a list of\
    \ strings.\n    >>> split(\"abcd\", 'c')\n    [\"ab\", \"d\"]\n    >>> split(\"\
    abcd\", 'd')\n    [\"abc\"]\n    >>> split(\"abcd\", 'a')\n    [\"\", \"bcd\"\
    ]\n    >>> split(\"abcd\", 'e')\n    [\"abcd\"]\n    >>> split(\"abcd\", '\\0')\n\
    \    [\"abcd\"]\n    \n*/\nstring[] split(string string, char sep)\n{\n    long\
    \ len = strlen(string);\n    if (len == 0) {\n        return [];\n    }\n    long\
    \ count = 1;\n    for (long i\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8975r6bw.d(85): Error: semicolon expected, not \''unittest\''\n/tmp/tmp8975r6bw.d(85):
    Error: expression expected, not \''unittest\''\n/tmp/tmp8975r6bw.d(86): Error:
    found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmp8975r6bw.d(87):
    Error: expression expected, not \''alias\''\n/tmp/tmp8975r6bw.d(87): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmp8975r6bw.d(87): Error: found \''=\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8975r6bw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\treturn cast(long)string.length;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8t_531v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long ret = 0;\n    foreach(c; string)\n        ret++;\n    return ret;\n\
    }\n/*\n Return length of given wstring\n    >>> wstrlen(\"\")\n    0L\n    >>>\
    \ wstrlen(\"abc\")\n    3L\n    \n*/\nlong wstrlen(wstring string) \n{\n    long\
    \ ret = 0;\n    foreach(c; string)\n        ret++;\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpze_xd7jo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\tlong len = 0;\n\tforeach(c; string) len++;\n\treturn len;\n}\n/*\n Return\
    \ a substring\n \n    >>> substr(\"foobar\",1)\n    \"oobar\"\n    >>> substr(\"\
    foobar\",1,2)\n    \"oo\"\n    >>> substr(\"foobar\",-1)\n    \"r\"\n    >>> substr(\"\
    foobar\",-1,2)\n    \"r\"\n    >>> substr(\"foobar\",1,-1)\n    \"ooba\"\n   \
    \ >>> substr(\"foobar\",-2,-1)\n    \"a\"\n    >>> substr(\"foobar\",1,200)\n\
    \    \"oobar\"\n    \n*/\nstring substr(string string, long begin, long end =\
    \ -1) \n{\n\tstring r;\n\tlong len = strlen(string);\n\tlong i, j;\n\tif (begin\
    \ < 0) begin = len + begin;\n\tif (end < 0) end = len + end;\n\telse end++;\n\t\
    \n\ti = clamp(begin, 0, len);\n\tj = clamp(end, 0, len);\n\tfor (; i < j; i++)\
    \ \n\t{\n\t\tr ~= string[i];\n\t}\n\treturn r;\n}\n/*\n Return index of first\
    \ occurance of char in string or -1 if not found\n    \n    >>> strchr(\"\",\"\
    a\")\n    -1L\n    >>> strchr(\"abca\",\"b\")\n    1L\n    >>> strchr(\"abca\"\
    ,\"c\")\n    2L\n    \n*/\nlong strchr(string string, char c) \n{\n\tlong len\
    \ = strlen(string);\n\tlong i;\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tif (string[i]\
    \ == c) return i;\n\t}\n\treturn -1;\n}\n/*\n Return index of last occurance of\
    \ char in string or -1 if not found\n    \n    >>> strrchr(\"\",\"a\")\n    -1L\n\
    \    >>> strrchr(\"abca\",\"b\")\n    1L\n    >>> strrchr(\"abca\",\"c\")\n  \
    \  2\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp90w1d7s4.d(73): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp90w1d7s4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    auto i = 0L;\n    while (string[i])\n        i++;\n    return i;\n\
    }\n/*\n Return length of given array\n    >>> array_length([1])\n    1L\n    >>>\
    \ array_length([1,1,1])\n    3L\n*/\nlong array_length(T...)(T array) \n{\n  \
    \  return array.length;\n}\n/*\n Return index of given char in string or -1 if\
    \ char is not in string\n    >>> index_of(\"\", 'a')\n    -1L\n    >>> index_of(\"\
    a\", 'a')\n    0L\n    >>> index_of(\"ab\", 'a')\n    0L\n    >>> index_of(\"\
    bc\", 'a')\n    -1L\n    >>> index_of(\"abc\", 'b')\n    1L\n    >>> index_of(\"\
    abc\", 'c')\n    2L\n*/\nlong index_of(string string, char c) \n{\n    auto i\
    \ = 0L;\n    while (string[i])\n    {\n        if (string[i] == c)\n         \
    \   return i;\n        i++;\n    }\n    return -1L;\n}\n/*\n Return index of given\
    \ string in string or -1 if string is not in string\n    >>> index_of(\"\", \"\
    \")\n    -1L\n    >>> index_of(\"\", \"a\")\n    -1L\n    >>> index_of(\"a\",\
    \ \"\")\n    -1L\n    >>> index_of(\"a\", \"a\")\n    0L\n    >>> index_of(\"\
    ab\", \"a\")\n    0L\n    >>> index_of(\"abc\", \"a\")\n    0L\n    >>> index_of(\"\
    abc\", \"b\")\n    1L\n    >>> index_of(\"abc\", \"c\")\n    2L\n    >>> index_of(\"\
    abc\", \"ab\")\n    0L\n    >>> index_of(\"abc\", \"bc\")\n    1L\n    >>> index_of(\"\
    abc\", \"abc\")\n    0L\n    >>> index_of(\"abc\", \"abcd\")\n    -1L\n    >>>\
    \ index_of(\"abc\", \"abd\")\n    -1L\n    >>> index_\nunittest\n{\n    alias\
    \ candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd9q5c2l_.d(54): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpd9q5c2l_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    while(string[length] != '\\0')\n    {\n     \
    \   length += 1;\n    }\n    return length;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcuxb4c8s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len;\n    for (len = 0; string[len]; len++) {};\n    return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_eo5c27g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i;\n    foreach(i, string)\n    {\n        continue;\n    }\n\
    \    return i;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuemzksmq.d(13): Error: no identifier for declarator string\n/tmp/tmpuemzksmq.d(13):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpuemzksmq.d(17): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpuemzksmq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\treturn d_strlen(string);\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpctd7z8xm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\tlong length;\n\tlength = 0;\n\t\n\tforeach(char c; string)\n\t{\n\t\t\
    ++length;\n\t}\n\t\n\treturn length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal9x0ski.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    for (char c in string) \n    {\n        len++;\n\
    \    }\n    return len;\n}\n/*\n    Find first occurrence of c in string.\n  \
    \  Return index of first occurrence or -1 if c not found.\n*/\nlong strchr(string\
    \ string, char c) \n{\n    long index = 0;\n    for (char ch in string) \n   \
    \ {\n        if (ch == c) \n        {\n            return index;\n        }\n\
    \        index++;\n    }\n    return -1;\n}\n/*\n    Make copy of given string.\n\
    \    >>> strdup(\"\")\n    \"\"\n    >>> strdup(\"abc\")\n    \"abc\"\n*/\nstring\
    \ strdup(string string) \n{\n    string str;\n    for (char c in string) \n  \
    \  {\n        str ~= c;\n    }\n    return str;\n}\n/*\n    Return index of first\
    \ occurence of string b in string a or -1 if b is not a substring of a.\n    >>>\
    \ strstr(\"\", \"\")\n    0L\n    >>> strstr(\"abc\", \"\")\n    0L\n    >>> strstr(\"\
    abc\", \"a\")\n    0L\n    >>> strstr(\"abc\", \"b\")\n    1L\n    >>> strstr(\"\
    abc\", \"bc\")\n    1L\n    >>> strstr(\"abc\", \"abc\")\n    0L\n    >>> strstr(\"\
    abc\", \"abcd\")\n    -1L\n    >>> strstr(\"abc\", \"bcd\")\n    -1L\n    >>>\
    \ strstr(\"abcd\", \"bc\")\n    1L\n*/\nlong strstr(string a, string b) \n{\n\
    \    long index = 0;\n    long bIndex = 0;\n    long bLen = strlen(b);\n    if\
    \ (bLen == 0) \n    {\n        return 0;\n    }\n    for (char c in a) \n    {\n\
    \        if (c == b[bIndex]) \n        {\n            if (bIndex == bLen - 1)\
    \ \n            {\n                return index - bIndex;\n            }\n   \
    \         bIndex++;\n        }\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk2hn8vnt.d(13): Error: semicolon expected, not \''in\''\n/tmp/tmpk2hn8vnt.d(13):
    Error: expression expected, not \''in\''\n/tmp/tmpk2hn8vnt.d(13): Error: found
    \''string\'' when expecting \'';\'' following for condition\n/tmp/tmpk2hn8vnt.d(26):
    Error: semicolon expected, not \''in\''\n/tmp/tmpk2hn8vnt.d(26): Error: expression
    expected, not \''in\''\n/tmp/tmpk2hn8vnt.d(26): Error: found \''string\'' when
    expecting \'';\'' following for condition\n/tmp/tmpk2hn8vnt.d(46): Error: semicolon
    expected, not \''in\''\n/tmp/tmpk2hn8vnt.d(46): Error: expression expected, not
    \''in\''\n/tmp/tmpk2hn8vnt.d(46): Error: found \''string\'' when expecting \'';\''
    following for condition\n/tmp/tmpk2hn8vnt.d(82): Error: semicolon expected, not
    \''in\''\n/tmp/tmpk2hn8vnt.d(82): Error: expression expected, not \''in\''\n/tmp/tmpk2hn8vnt.d(82):
    Error: found \''a\'' when expecting \'';\'' following for condition\n/tmp/tmpk2hn8vnt.d(92):
    Error: found \''unittest\'' instead of statement\n/tmp/tmpk2hn8vnt.d(100): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpk2hn8vnt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long count = 0;\n    foreach(char c; string)\n        count++;\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcaa9pssr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long result = 0;\n    foreach(char character; string) \n    {\n   \
    \     result += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpg8h1pn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\tlong string_len = 0;\n\tfor (long i = 0; i < string.length; i++)\n\t\
    {\n\t\tif (string[i] != 0)\n\t\t{\n\t\t\tstring_len++;\n\t\t}\n\t}\n\treturn string_len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwgzshq5h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long result = 0;\n    foreach(c; string)\n        result++;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bwf4hdd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\treturn string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp42of8wd8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length;\n    length = 0;\n    while (string[length] != 0)\n  \
    \  {\n        length++;\n    }\n    return length;\n}\nunittest\n{\n    alias\
    \ candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ujdlt_4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long l = 0;\n    foreach(c; string) \n    {\n        l++;\n    }\n\
    \    return l;\n}\n/*\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpse1gcel5.d(19): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpse1gcel5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i;\n    for (i = 0; string[i]; i++);\n    return i;\n}\n \n \n\
    \ \n/*\n    Return length of given string using ptr arithmatic\n        >>> strlen(\"\
    \")\n        0L\n        >>> strlen(\"abc\")\n        3L\n        \n    */\n \
    \   long strlen(char[] string) \n    {\n        long i;\n        for (i = 0; string[i];\
    \ i++);\n        return i;\n    }\n \n/*\n    Return length of given string using\
    \ ptr arithmatic\n        >>> strlen(\"\")\n        0L\n        >>> strlen(\"\
    abc\")\n        3L\n        \n    */\n    long strlen(char* string) \n    {\n\
    \        long i;\n        for (i = 0; string[i]; i++);\n        return i;\n  \
    \  }\n \n/*\n    Return length of given string using ptr arithmatic\n        >>>\
    \ strlen(\"\")\n        0L\n        >>> strlen(\"abc\")\n        3L\n        \n\
    \    */\n    long strlen(wchar* string) \n    {\n        long i;\n        for\
    \ (i = 0; string[i]; i++);\n        return i;\n    }\n \n/*\n    Return length\
    \ of given string using ptr arithmatic\n        >>> strlen(\"\")\n        0L\n\
    \        >>> strlen(\"abc\")\n        3L\n        \n    */\n    long strlen(dchar*\
    \ string) \n    {\n        long i;\n        for (i = 0; string[i]; i++);\n   \
    \     return i;\n    }\n \n \n/*\n    >>> join([\"a\",\"b\"], \"\")\n    \"ab\"\
    \n    >>> join([\"a\",\"b\"], \".\")\n    \"a.b\"\n    >>> join([\"a\",\"b\"],\
    \ \".\", \"..\")\n    \"a..b\"\n    >>> join([\"\"], \".\")\n    \"\"\n    >>>\
    \ join([\"a\"], \".\")\n    \"a\"\n    >>> join([\"a\", \"b\", \"c\"], \"\")\n\
    \    \"abc\"\n    >>> join([\"a\", \"b\", \"c\"], \".\", \"\")\n    \"\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpusrkxodh.d(13): Error: use \''{ }\'' for an empty statement,
    not a \'';\''\n/tmp/tmpusrkxodh.d(30): Error: use \''{ }\'' for an empty statement,
    not a \'';\''\n/tmp/tmpusrkxodh.d(45): Error: use \''{ }\'' for an empty statement,
    not a \'';\''\n/tmp/tmpusrkxodh.d(60): Error: use \''{ }\'' for an empty statement,
    not a \'';\''\n/tmp/tmpusrkxodh.d(75): Error: use \''{ }\'' for an empty statement,
    not a \'';\''\n/tmp/tmpusrkxodh.d(80): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpusrkxodh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n  long len = 0;\n  foreach(int i; string)\n    len++;\n  return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprnco9xlg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len;\n    len = 0;\n    foreach(string[]) {\n        len++;\n\
    \    }\n    return len;\n}\n/*\n Return index of the first occurance of needle\
    \ in haystack\n     >>> strstr(\"haystack\", \"stack\")\n     4L\n     >>> strstr(\"\
    haystack\", \"needle\")\n     -1L\n*/\nlong strstr(string haystack, string needle)\
    \ \n{\n    long i;\n    i = 0;\n    foreach(haystack[]) {\n        if(haystack[i..i+strlen(needle)-1]\
    \ == needle) {\n            return i;\n        }\n        i++;\n    }\n    return\
    \ -1;\n}\n/*\n Return index of the last occurance of needle in haystack\n    \
    \ >>> strrstr(\"haystack\", \"stack\")\n     4L\n     >>> strrstr(\"haystack\"\
    , \"needle\")\n     -1L\n*/\nlong strrstr(string haystack, string needle) \n{\n\
    \    long i;\n    i = strlen(haystack) - strlen(needle);\n    while(i >= 0) {\n\
    \        if(haystack[i..i+strlen(needle)-1] == needle) {\n            return i;\n\
    \        }\n        i--;\n    }\n    return -1;\n}\n/*\n Return a copy of string,\
    \ with each element changed to lowercase\n    >>> strtolower(\"StRinG\")\n   \
    \ \"string\"\n*/\nstring strtolower(string string) \n{\n    long i;\n    string\
    \ newstring;\n    newstring = \"\";\n    i = 0;\n    foreach(string[]) {\n   \
    \     newstring ~= tolower(string[i]);\n        i++;\n    }\n    return newstring;\n\
    }\n/*\n Return a copy of string, with each element changed to uppercase\n    >>>\
    \ strtoupper(\"StRinG\")\n    \"STRING\"\n*/\nstring strtoupper(string string)\
    \ \n{\n    long i;\n    string newstring;\n    newstring = \"\";\n    i = 0;\n\
    \    fore\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprqhuakwd.d(14): Error: no identifier for declarator string[]\n/tmp/tmprqhuakwd.d(14):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmprqhuakwd.d(17): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmprqhuakwd.d(30): Error: no identifier
    for declarator haystack[]\n/tmp/tmprqhuakwd.d(30): Error: found \'')\'' when expecting
    \'';\''\n/tmp/tmprqhuakwd.d(36): Error: found \''return\'' when expecting \'')\''\n/tmp/tmprqhuakwd.d(68):
    Error: no identifier for declarator string[]\n/tmp/tmprqhuakwd.d(68): Error: found
    \'')\'' when expecting \'';\''\n/tmp/tmprqhuakwd.d(72): Error: found \''return\''
    when expecting \'')\''\n/tmp/tmprqhuakwd.d(86): Error: found \''unittest\'' when
    expecting \'';\'' following statement\n/tmp/tmprqhuakwd.d(94): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmprqhuakwd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length;\n    length = string.length;\n    return length;\n}\n\
    unittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_2k3tj5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i;\n    for (i = 0; string[i]; i++);\n    return i;\n}\n/*\n Return\
    \ length of given string\n    >>> strlen_c(\"\")\n    0L\n    >>> strlen_c(\"\
    abc\")\n    3L\n    \n*/\nlong strlen_c(char[] string) \n{\n    long i;\n    for\
    \ (i = 0; string[i]; i++);\n    return i;\n}\n/*\n  Just a simple function to\
    \ provide functionality close to strdup\n  \n*/\nchar[] strdup(char[] string)\n\
    {\n    char[] result = new char[string.length];\n    for (long i = 0; i < string.length;\
    \ i++)\n        result[i] = string[i];\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnqrs0zt9.d(13): Error: use \''{ }\'' for an empty statement,
    not a \'';\''\n/tmp/tmpnqrs0zt9.d(27): Error: use \''{ }\'' for an empty statement,
    not a \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnqrs0zt9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i = 0;\n    while (string[i] != '\\0') \n    {\n        i++;\n\
    \    }\n    return i;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpotnucldf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(char c; string)\n        length++;\n\
    \    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvl7q4yp4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    if (string is null) return 0L;\n    return string.length;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq7wpz2lh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    if (string.length == 0) \n    {\n        return 0L;\n    } \n    else\
    \ \n    {\n        return strlen(string[1..string.length]) + 1L;\n    }\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgrotx228.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return size_t.init.max;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1dp85rer.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(string[0..$]) \n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1cwr41vo.d(13): Error: no identifier for declarator string[0
    .. __dollar]\n/tmp/tmp1cwr41vo.d(13): Error: found \'')\'' when expecting \'';\''\n/tmp/tmp1cwr41vo.d(17):
    Error: found \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp1cwr41vo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    while (string[len] != '\\0') \n    {\n        len++;\n\
    \    }\n    return len;\n}\n/*\n   Write the given string to a given file\n*/\n\
    unittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4d05qbqv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length;\n    length = 0;\n    for (; string[length] != 0; length++);\n\
    \    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnutaionv.d(14): Error: use \''{ }\'' for an empty statement,
    not a \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnutaionv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len;\n    len = 0;\n    while(string[len] != '\\0')\n    {\n \
    \       len++;\n    }\n    return len;\n}\n/*\n Replace \\t in string with tabCount\
    \ of whitespaces\n    >>> expand_tabs(\"\")\n    \"\"\n    >>> expand_tabs(\"\\\
    t\")\n    \"    \"\n    >>> expand_tabs(\"\\t\\t\")\n    \"        \"\n    >>>\
    \ expand_tabs(\"a\\tb\")\n    \"a    b\"\n    >>> expand_tabs(\"\\t\\ta\")\n \
    \   \"        a\"\n    >>> expand_tabs(\"ab\\t\\t\")\n    \"ab        \"\n   \
    \ >>> expand_tabs(\"a\\tb\\tc\")\n    \"a    b    c\"\n*/\nstring expand_tabs(string\
    \ string) \n{\n    string expanded;\n    expanded = \"\";\n    int tabCount;\n\
    \    tabCount = 0;\n    long len;\n    len = strlen(string);\n    int i;\n   \
    \ i = 0;\n    while(i < len)\n    {\n        if(string[i] == '\\t')\n        {\n\
    \            while(tabCount < 4)\n            {\n                expanded += '\
    \ ';\n                tabCount++;\n            }\n            tabCount = 0;\n\
    \        }\n        else\n        {\n            expanded += string[i];\n    \
    \    }\n        i++;\n    }\n    return expanded;\n}\n/*\n Remove all whitespaces\
    \ from string\n    >>> remove_whitespaces(\"\")\n    \"\"\n    >>> remove_whitespaces(\"\
    \ \")\n    \"\"\n    >>> remove_whitespaces(\"\\t\")\n    \"\"\n    >>> remove_whitespaces(\"\
    \\n\")\n    \"\"\n    >>> remove_whitespaces(\" a\")\n    \"a\"\n    >>> remove_whitespaces(\"\
    a \")\n    \"a\"\n    >>> remove_whitespaces(\" a \")\n    \"a\"\n    >>> remove_whitespaces(\"\
    ab\")\n    \"ab\"\n    >>> remove_whitespaces(\"a b\")\n    \"ab\"\n    >>> remove_whitespaces(\"\
    a  b\")\n    \"ab\"\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmzctts9_.d(66): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmzctts9_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length;\n    for (length = 0;\n         string[length] != '\\\
    0';\n         length++) \n    {\n        // Do nothing\n    }\n    return length;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsrcl1mo1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i=0;\n    while(string[i]!='\\0')\n        i++;\n    return i;\n\
    }\n/*\n \n Return length of given wide string\n    >>> wcslen(\"\")\n    0L\n\
    \    >>> wcslen(\"abc\")\n    3L\n    \n*/\nlong wcslen(wstring string) \n{\n\
    \    long i=0;\n    while(string[i]!='\\0')\n        i++;\n    return i;\n}\n\
    /*\n \n Return length of given dstring\n    >>> dstrlen(\"\")\n    0L\n    >>>\
    \ dstrlen(\"abc\")\n    3L\n    \n*/\nlong dstrlen(dstring string) \n{\n    long\
    \ i=0;\n    while(string[i]!='\\0')\n        i++;\n    return i;\n}\n/*\n \n Returns\
    \ true if strings are equal, otherwise false\n    >>> strcmp(\"abc\", \"abc\"\
    )\n    true\n    >>> strcmp(\"abc\", \"def\")\n    false\n    \n*/\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0mwnn9h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i = 0;\n    while (string[i] != '\\0')\n        i++;\n    return\
    \ i;\n}\n/*\n Check if given character is alpha\n    >>> isalpha('a')\n    true\n\
    \    >>> isalpha('A')\n    true\n    >>> isalpha('1')\n    false\n*/\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw018daqj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(i; string)\n    {\n        length +=\
    \ 1;\n    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplnh2j9hr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(character; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\n/*\n  Replace character to target in given string\n\
    \  >>> replace(\"acb\", 'a', 'b')\n  \"bcb\"\n*/\nstring replace(string string,\
    \ char character, char target) \n{\n    string result = \"\";\n    foreach(char;\
    \ string) \n    {\n        if(char == character) \n        {\n            result\
    \ ~= target;\n        }\n        else \n        {\n            result ~= char;\n\
    \        }\n    }\n    return result;\n}\n/*\n  Check if given string start with\
    \ given prefix\n  >>> startswith(\"abc\", \"a\")\n  true\n  >>> startswith(\"\
    abc\", \"abc\")\n  true\n  >>> startswith(\"abc\", \"c\")\n  false\n  >>> startswith(\"\
    abc\", \"\")\n  true\n*/\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjyfjvjhk.d(27): Error: no identifier for declarator char\n/tmp/tmpjyfjvjhk.d(29):
    Error: found \''==\'' when expecting \''.\'' following char\n/tmp/tmpjyfjvjhk.d(35):
    Error: found \'';\'' when expecting \''.\'' following char\n/tmp/tmpjyfjvjhk.d(36):
    Error: found \''}\'' when expecting identifier following \''char.\''\n/tmp/tmpjyfjvjhk.d(37):
    Error: found \''}\'' when expecting \'';\'' following statement\n/tmp/tmpjyfjvjhk.d(51):
    Error: found \''unittest\'' instead of statement\n/tmp/tmpjyfjvjhk.d(59): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjyfjvjhk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\n/*\n Return length of given token\n    >>>\
    \ strlen(\"0x9\")\n    3L\n    >>> strlen(\"0x09\")\n    4L\n    \n*/\nlong strlen(token\
    \ token) \n{\n    return token.length;\n}\n/*\n Return length of given wstring\n\
    \    >>> strlen(\"\")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong\
    \ strlen(wstring wstring) \n{\n    return wstring.length;\n}\n/*\n Return length\
    \ of given dstring\n    >>> strlen(\"\")\n    0L\n    >>> strlen(\"abc\")\n  \
    \  3L\n    \n*/\nlong strlen(dstring dstring) \n{\n    return dstring.length;\n\
    }\n/*\n Return length of given string\n    >>> strlen(\"\")\n    0L\n    >>> strlen(\"\
    abc\")\n    3L\n    \n*/\nlong strlen(wchar wchar) \n{\n    return strlen(wstring(wchar));\n\
    }\n/*\n Return length of given string\n    >>> strlen(\"\")\n    0L\n    >>> strlen(\"\
    abc\")\n    3L\n    \n*/\nlong strlen(dchar dchar) \n{\n    return strlen(dstring(dchar));\n\
    }\n/*\n Return the index of the first occurrence of the character in the string\n\
    \    >>> index(\"abc\", 'a')\n    0L\n    >>> index(\"abc\", 'b')\n    1L\n  \
    \  >>> index(\"abc\", 'c')\n    2L\n    >>> index(\"abc\", 'd')\n    -1L\n*/\n\
    long index(string string, char c) \n{\n    foreach (index, char; string)\n   \
    \ {\n        if (c == char)\n        {\n            return index;\n        }\n\
    \    }\n    return -1L;\n}\n/*\n Return the index of the first occurrence of the\
    \ character in the string\n    >>> index(\"abc\", 'a')\n    0L\n    >>> index(\"\
    abc\", 'b')\n    1L\n    >>> index(\"abc\", 'c')\n    2L\n    >>> index(\"abc\"\
    , '\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppslazjgu.d(58): Error: found \''wchar\'' when expecting \'')\''\n/tmp/tmppslazjgu.d(58):
    Error: semicolon expected following function declaration\n/tmp/tmppslazjgu.d(58):
    Error: Declaration expected, not \'')\''\n/tmp/tmppslazjgu.d(61): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppslazjgu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\n/*\n Print given string\n    >>> printf(\"\
    abc\")\n    abc\n    >>> printf(\"%i\", 10)\n    10\n*/\nunittest\n{\n    alias\
    \ candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7310sgw7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length;\n    //assume string is null terminated\n    while (string[length]!='\\\
    0')\n        length++;\n    return length;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiknc9wkg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n  long i;\n  long len;\n  i = 0L;\n  len = 0L;\n  while ((i < string.length)\
    \ && (string[i] != 0)) \n  {\n    len = len + 1L;\n    i = i + 1L;\n  }\n  return\
    \ len;\n}\n/*\n Return a copy of the given string\n    >>> strdup(\"\")\n    \"\
    \"\n    >>> strdup(\"abc\")\n    \"abc\"\n    \n*/\nstring strdup(string string)\
    \ \n{\n  string result;\n  long i;\n  long len;\n  result = string;\n  len = strlen(string);\n\
    \  i = len;\n  while (i < len) \n  {\n    result[i] = string[i];\n    i = i +\
    \ 1L;\n  }\n  return result;\n}\n/*\n Return a string consisting of n copies of\
    \ the given string\n    >>> strndup(\"\", 2)\n    \"\"\n    >>> strndup(\"abc\"\
    , 0)\n    \"\"\n    >>> strndup(\"abc\", 2)\n    \"abcabc\"\n    \n*/\nstring\
    \ strndup(string string, long n) \n{\n  string result;\n  long i;\n  long len;\n\
    \  long k;\n  if (n <= 0L) \n  {\n    return \"\";\n  }\n  len = strlen(string);\n\
    \  result = result(len * n);\n  i = 0L;\n  while (i < n) \n  {\n    k = 0L;\n\
    \    while (k < len) \n    {\n      result[i * len + k] = string[k];\n      k\
    \ = k + 1L;\n    }\n    i = i + 1L;\n  }\n  return result;\n}\n/*\n Copy the given\
    \ string into result; result is assumed to be large enough\n    >>> strcpy(\"\"\
    , array(long, 0))\n    \"\"\n    >>> strcpy(\"abc\", array(long, 3))\n    \"abc\"\
    \n    \n*/\nstring strcpy(string string, var array) \n{\n  long i;\n  long len;\n\
    \ \nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5i32fti2.d(94): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5i32fti2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    foreach(ch; string) {\n        len++;\n    }\n \
    \   return len;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqvkxx_f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length;\n    length = string.length;\n    return length;\n}\n\
    \ \n/*\n Return given character\n    >>> charAt(\"abcd\", 1)\n    'b'\n    >>>\
    \ charAt(\"abcd\", 0)\n    'a'\n    >>> charAt(\"abcd\", 3)\n    'd'\n*/\n \n\
    char charAt(string string, long index) \n{\n    return string[index];\n}\n \n\
    /*\n Calculate factorial of given number\n    >>> factorial(3)\n    6L\n    >>>\
    \ factorial(0)\n    1L\n    >>> factorial(4)\n    24L\n    >>> factorial(5)\n\
    \    120L\n*/\n \nlong factorial(long n) \n{\n    if (n < 0) {\n        return\
    \ 0;\n    } else if (n == 0) {\n        return 1;\n    } else {\n        return\
    \ n * factorial(n - 1);\n    }\n}\n \n/*\n Return given number in binary representation\n\
    \    >>> binary(0)\n    \"\"\n    >>> binary(3)\n    \"11\"\n    >>> binary(5)\n\
    \    \"101\"\n    >>> binary(6)\n    \"110\"\n    >>> binary(7)\n    \"111\"\n\
    \    >>> binary(10)\n    \"1010\"\n    >>> binary(11)\n    \"1011\"\n    >>> binary(63)\n\
    \    \"111111\"\n    >>> binary(64)\n    \"1000000\"\n    >>> binary(64+1)\n \
    \   \"1000001\"\n    >>> binary(64+2)\n    \"1000010\"\n    >>> binary(64+3)\n\
    \    \"1000011\"\n    >>> binary(64+4)\n    \"1000100\"\n    >>> binary(256)\n\
    \    \"100000000\"\n    >>> binary(1024)\n    \"10000000000\"\n    >>> binary(1024+512)\n\
    \    \"100000000101\"\n    >>> binary(1024+512+256)\n    \"100000000101100\"\n\
    \    >>> binary(1024+512+256+128)\n    \"1000000001011001\"\n    >>> binary(1024+512+256+128+64)\n\
    \nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpumnpw90y.d(55): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpumnpw90y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i = 0;\n    while (string[i]) \n    {\n        i++;\n    }\n \
    \   return i;\n}\n/*\n Return a new string constructed by copying a range of bytes\
    \ from another string\n    >>> strncpy(\"\", \"\", 0)\n    \"\"\n    >>> strncpy(\"\
    abc\", \"\", 0)\n    \"\"\n    >>> strncpy(\"abc\", \"a\", 1)\n    \"a\"\n   \
    \ >>> strncpy(\"abc\", \"ab\", 2)\n    \"ab\"\n    >>> strncpy(\"abc\", \"abc\"\
    , 3)\n    \"abc\"\n    >>> strncpy(\"abc\", \"\", 4)\n    \"\"\n    >>> strncpy(\"\
    abc\", \"a\", 4)\n    \"a\"\n    >>> strncpy(\"abc\", \"ab\", 4)\n    \"ab\"\n\
    \    >>> strncpy(\"abc\", \"abc\", 4)\n    \"abc\"\n    >>> strncpy(\"abc\", \"\
    abcd\", 4)\n    \"abcd\"\n    \n*/\nstring strncpy(string dst, string src, size_t\
    \ n) \n{\n    long i = 0;\n    while (i < n && src[i]) \n    {\n        dst[i]\
    \ = src[i];\n        i++;\n    }\n    while (i < n) \n    {\n        dst[i] =\
    \ 0;\n        i++;\n    }\n    return dst;\n}\n/*\n Return a new string constructed\
    \ by copying a range of bytes from another string\n    >>> strncat(\"\", \"\"\
    , 0)\n    \"\"\n    >>> strncat(\"abc\", \"\", 0)\n    \"abc\"\n    >>> strncat(\"\
    abc\", \"a\", 1)\n    \"abca\"\n    >>> strncat(\"abc\", \"ab\", 2)\n    \"abcab\"\
    \n    >>> strncat(\"abc\", \"abc\", 3)\n    \"abcabc\"\n    >>> strncat(\"abc\"\
    , \"\", 4)\n    \"abc\"\n    >>> strncat(\"abc\", \"a\", 4)\n    \"abca\"\n  \
    \  >>> strncat(\"abc\", \"ab\", 4)\n    \"abcab\"\n    >>> strncat(\"abc\", \"\
    \nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4hmpp10k.d(58): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp4hmpp10k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return strlen(string.ptr);\n}\n/*\n    [a] = \"abc\"\n    [b] = \"\
    bcd\"\n    >>> interleave(a, b)\n    \"abbccd\"\n*/\nstring interleave(string\
    \ a, string b)\n{\n    size_t a_len = strlen(a);\n    size_t b_len = strlen(b);\n\
    \    size_t max_len = max(a_len, b_len);\n    string result = \"\";\n    foreach(idx;\
    \ 0..max_len)\n    {\n        if(idx < a_len)\n        {\n            result ~=\
    \ a[idx];\n        }\n        if(idx < b_len)\n        {\n            result ~=\
    \ b[idx];\n        }\n    }\n    return result;\n}\n/*\n    [a] = \"abcd\"\n \
    \   [b] = \"abcd\"\n    >>> zip(a, b)\n    [\"aa\", \"bb\", \"cc\", \"dd\"]\n\
    */\nstring[] zip(string a, string b)\n{\n    size_t a_len = strlen(a);\n    size_t\
    \ b_len = strlen(b);\n    size_t max_len = max(a_len, b_len);\n    string[] result;\n\
    \    foreach(idx; 0..max_len)\n    {\n        if(idx < a_len && idx < b_len)\n\
    \        {\n            result ~= interleave(a[idx], b[idx]);\n        }\n   \
    \ }\n    return result;\n}\n/*\n    [a] = \"abcdef\"\n    [b] = \"abcd\"\n   \
    \ >>> fit(a, b)\n    \"abcdef\"\n    >>> fit(b, a)\n    \"abcdab\"\n    >>> fit(b,\
    \ a, true)\n    \"abcd\"\n*/\nstring fit(string a, string b, bool return_shortest\
    \ = false)\n{\n    size_t a_len = strlen(a);\n    size_t b_len = strlen(b);\n\
    \    size_t max_len\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9zbm_v30.d(74): Error: found \''max_len\'' when expecting \'';\''
    following statement\n/tmp/tmp9zbm_v30.d(75): Error: found \''unittest\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zbm_v30.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i = 0;\n    while (string[i])\n    {\n        i++;\n    }\n  \
    \  return i;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7colppdw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i;\n    foreach(i,ch; string)\n    {\n        i++;\n    }\n  \
    \  return i;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcaq01ilp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i;\n    for (i = 0; string[i]; i++);\n    return i;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp23djyh7m.d(13): Error: use \''{ }\'' for an empty statement,
    not a \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23djyh7m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(ch; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7q3h97o2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkj8am4_t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return cast(long)strlen(string);\n}\n/*\n    return length of given\
    \ wstring\n    >>> wstrlen(\"\")\n    0L\n    >>> wstrlen(\"abc\")\n    3L\n \
    \   \n*/\nlong wstrlen(wstring string) \n{\n    return cast(long)wcslen(string);\n\
    }\n/*\n Convert string to character array\n    >>> to_cstr(\"Hello\")\n    \"\
    Hello\"\n    >>> to_cstr(\"Hello, world!\")\n    \"Hello, world!\"\n    \n*/\n\
    char[] to_cstr(string string) \n{\n    return to_c_strz(string);\n}\n/*\n    Convert\
    \ wstring to wchar array\n    >>> to_cstr(\"Hello\")\n    \"Hello\"\n    >>> to_cstr(\"\
    Hello, world!\")\n    \"Hello, world!\"\n    \n*/\nwchar[] to_cstr(wstring string)\
    \ \n{\n    return to_c_strz(string);\n}\n/*\n    Convert wstring to wchar array\n\
    \    >>> to_cstr(\"Hello\")\n    \"Hello\"\n    >>> to_cstr(\"Hello, world!\"\
    )\n    \"Hello, world!\"\n    \n*/\nwchar[] to_cstr(wchar[] string) \n{\n    return\
    \ to_c_strz(string);\n}\n/*\n    Convert wstring to wchar array\n    >>> to_cstr(\"\
    Hello\")\n    \"Hello\"\n    >>> to_cstr(\"Hello, world!\")\n    \"Hello, world!\"\
    \n    \n*/\nwchar[] to_cstr(char[] string) \n{\n    return to_c_strz(string);\n\
    }\n/*\n    Convert wstring to wchar array\n    >>> to_cstr(\"Hello\")\n    \"\
    Hello\"\n    >>> to_cstr(\"Hello, world!\")\n    \"Hello, world!\"\n    \n*/\n\
    char[] to_cstr(char[] string) \n{\n    return to_c_strz(string);\n}\n/*\n Convert\
    \ UTF-8 encoded string to UTF-32\n \n    >>> to_wstring(\"Hello, world!\")\n \
    \   \"Hello, world!\"\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3q3oy1vv.d(86): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3q3oy1vv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    foreach(c; string) {\n        len++;\n    }\n  \
    \  return len;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11hg1_e3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\n/*\n Return a string with the character converted\
    \ to uppercase\n    >>> toupper(\"abc\")\n    \"ABC\"\n*/\nstring toupper(string\
    \ s)\n{\n    return toUpper(s);\n}\n/*\n Return a string with the character converted\
    \ to lowercase\n    >>> tolower(\"ABC\")\n    \"abc\"\n*/\nstring tolower(string\
    \ s)\n{\n    return toLower(s);\n}\n/*\n Return a string with the character converted\
    \ to hexadecimal\n   >>> toHex(\"ABC\")\n   \"414243\"\n*/\nstring toHex(string\
    \ s)\n{\n    string hex;\n    foreach(e; s)\n    {\n        hex ~= format(\"%02x\"\
    , cast(int)e);\n    }\n    return hex;\n}\n/*\n Return a string with the character\
    \ converted to base64\n   >>> toBase64(\"ABC\")\n   \"QUJD\"\n*/\nstring toBase64(string\
    \ s)\n{\n    return std.base64.encode(s);\n}\n/*\n Return a string with the character\
    \ converted to base64url\n   >>> toBase64Url(\"ABC\")\n   \"QUJD\"\n*/\nstring\
    \ toBase64Url(string s)\n{\n    string b64 = toBase64(s);\n    b64 = replace(b64,\
    \ \"+\", \"-\");\n    b64 = replace(b64, \"/\", \"_\");\n    b64 = replace(b64,\
    \ \"=\", \"\");\n    return b64;\n}\n/*\n Return a string with the character converted\
    \ from hexadecimal\n   >>> fromHex(\"414243\")\n   \"ABC\"\n*/\nstring fromHex(string\
    \ s)\n{\n    string result;\n    foreach(e; s)\n    {\n        result ~= parseInt(e,\
    \ 16);\n    }\n    return result;\n}\n/*\n Return a string with the character\
    \ converted from base64\n   >>> fromBase64(\"QUJD\")\n   \"ABC\"\n*/\nstring fromBase64(string\
    \ s)\n{\n    return std.base64.decode(s);\n}\n/*\n Return a string with the character\
    \ converted from base64url\n\nunittest\n{\n    alias candidate = strlen;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2w1wd38j.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2w1wd38j.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n  return d_strlen(string);\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66p3yj6v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return cast(long)string.length;\n}\n/*\n Return length of given wstring\n\
    \    >>> wstrlen(\"\")\n    0L\n    >>> wstrlen(\"abc\")\n    3L\n    \n*/\nlong\
    \ wstrlen(wstring string) \n{\n    return cast(long)string.length;\n}\n/*\n Return\
    \ length of given dstring\n    >>> dstrlen(\"\")\n    0L\n    >>> dstrlen(\"abc\"\
    )\n    3L\n    \n*/\nlong dstrlen(dstring string) \n{\n    return cast(long)string.length;\n\
    }\n/*\n Convert given character to uppercase\n    >>> toupper('a')\n    'A'\n\
    \    >>> toupper('1')\n    '1'\n    >>> toupper('A')\n    'A'\n    \n*/\nchar\
    \ toupper(char ch) \n{\n    return char.toupper(ch);\n}\n/*\n Check if given character\
    \ is space\n    >>> isspace(' ')\n    true\n    >>> isspace('#')\n    false\n\
    \    \n*/\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvl1ktx28.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\n/*\n Return length of given array\n */\n\
    long arraylen(T[] array) \n{\n    return array.length;\n}\nunittest\n{\n    alias\
    \ candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv6v2didz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\n/*\n Return number of occurances of given\
    \ character in given string\n \n >>> count_char(\"\", 'a')\n 0L\n >>> count_char(\"\
    aaa\", 'a')\n 3L\n >>> count_char(\"abc\", 'a')\n 1L\n >>> count_char(\"abc\"\
    , 'd')\n 0L\n*/\nlong count_char(string string, char c) \n{\n    long count;\n\
    \    foreach(string; c)\n    {\n        count++;\n    }\n    return count;\n}\n\
    /*\n Return number of occurances of given char in given string\n    >>> strchr(\"\
    \", 'a')\n    0L\n    >>> strchr(\"aaa\", 'a')\n    0L\n    >>> strchr(\"abacada\"\
    , 'a')\n    0L\n    >>> strchr(\"abacada\", 'b')\n    1L\n    >>> strchr(\"abacada\"\
    , 'c')\n    2L\n    >>> strchr(\"abacada\", 'd')\n    3L\n    \n*/\nlong strchr(string\
    \ string, char c) \n{\n    long count;\n    foreach(string; i)\n    {\n      \
    \  if(string[i] == c)\n        {\n            return count;\n        }\n     \
    \   count++;\n    }\n    return count;\n}\n/*\n Return substring from beginning\
    \ of string to nth occurence of given char.\n    >>> strchrn(\"abcda\", 'a')\n\
    \    \"a\"\n    >>> strchrn(\"abcda\", 'b')\n    \"ab\"\n    >>> strchrn(\"abcda\"\
    , 'c')\n    \"abc\"\n    >>> strchrn(\"abcda\", 'd')\n    \"abcd\"\n    >>> strchrn(\"\
    abcda\", 'e')\n    \"abcda\"\n*/\nstring strchrn(string string, char c) \n{\n\
    \    long count;\n    foreach(string; i)\n    {\n        if(string[i] == c)\n\
    \        {\n            return string[0..count];\n        }\n        count++;\n\
    \    }\n    return string;\n}\n/*\n Return substring from\nunittest\n{\n    alias\
    \ candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptiu0d7hd.d(90): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmptiu0d7hd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i;\n    foreach(ch; string)\n        i++;\n    return i;\n}\n\
    unittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9h33aomo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(c; string) {\n        length++;\n   \
    \ }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzdawkt15.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i;\n    for (i = 0; string[i]; i++);\n    return i;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp23djyh7m.d(13): Error: use \''{ }\'' for an empty statement,
    not a \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23djyh7m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i;\n    for (i = 0; string[i]; i++) { /* nothing */ }\n    return\
    \ i;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpip321ynx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long index = 0;\n    long length = 0;\n    while (1) {\n        if\
    \ (index == string.length) {\n            break;\n        }\n        char ch =\
    \ string[index];\n        if (ch == '\\0') {\n            break;\n        }\n\
    \        length++;\n        index++;\n    }\n    return length;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz35xqu0p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(ch; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\n/*\n String concatenation\n    >>> strcat(\"\"\
    ,\"\")\n    \"\"\n    >>> strcat(\"abc\",\"\")\n    \"abc\"\n    >>> strcat(\"\
    \",\"abc\")\n    \"abc\"\n    >>> strcat(\"abc\",\"def\")\n    \"abcdef\"\n*/\n\
    string strcat(string string1, string string2) \n{\n    string result = \"\";\n\
    \    foreach(ch; string1) \n    {\n        result ~= ch;\n    }\n    foreach(ch;\
    \ string2) \n    {\n        result ~= ch;\n    }\n    return result;\n}\n/*\n\
    \ Return s1 + s2 + ... + sn\n    >>> strjoin(\"\", \"\", \"\", \"\")\n    \"\"\
    \n    >>> strjoin(\"a\", \"b\", \"c\", \"d\")\n    \"abcd\"\n*/\nstring strjoin(string[]\
    \ strings) \n{\n    string result = \"\";\n    foreach(string; strings) \n   \
    \ {\n        foreach(ch; string) \n        {\n            result ~= ch;\n    \
    \    }\n    }\n    return result;\n}\n/*\n Return copy of string\n    >>> strdup(\"\
    \")\n    \"\"\n    >>> strdup(\"abc\")\n    \"abc\"\n*/\nstring strdup(string\
    \ string) \n{\n    string result = \"\";\n    foreach(ch; string) \n    {\n  \
    \      result ~= ch;\n    }\n    return result;\n}\n/*\n Compare two strings\n\
    \    >>> strcmp(\"\", \"\")\n    0\n    >>> strcmp(\"abc\", \"abc\")\n    0\n\
    \    >>> strcmp(\"abc\", \"def\")\n    -1\n    >>> strcmp(\"def\", \"abc\")\n\
    \    1\n*/\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxn7062kt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(char c; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmjbjs4oy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    for (auto str: string)\n    {\n        len++;\n\
    \    }\n    return len;\n}\nunittest\n{\n    alias candidate = strlen;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpquitrz_u.d(13): Error: no identifier for declarator str\n/tmp/tmpquitrz_u.d(13):
    Error: expression expected, not \'':\''\n/tmp/tmpquitrz_u.d(13): Error: found
    \''string\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpquitrz_u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length;\n    length = 0;\n    foreach(size_t index; string)\n\
    \    {\n        length++;\n    }\n    return length;\n}\nunittest\n{\n    alias\
    \ candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdj3wt_6x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\n/*\n Checks if each char in string is a digit\n\
    \    >>> isNum(\"\")\n    true\n    >>> isNum(\"a\")\n    false\n    >>> isNum(\"\
    12345\")\n    true\n    >>> isNum(\"1a\")\n    false\n    \n*/\nunittest\n{\n\
    \    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_uq0qay.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long result = 0;\n    foreach(char c; string) {\n        result++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgv2knog6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i;\n    i = 0L;\n    while (string[i] != '\\0')\n    {\n     \
    \   i = i + 1L;\n    }\n    return i;\n}\n/*\n    Binary search on sorted array\n\
    */\nlong bsearch(long arr[], long l, long r, long x)\n{\n    long mid;\n    mid\
    \ = 0L;\n    while (l <= r)\n    {\n        mid = l + (r - l) / 2L;\n        if\
    \ (arr[mid] == x)\n        {\n            return mid;\n        }\n        if (arr[mid]\
    \ < x)\n        {\n            l = mid + 1L;\n        }\n        else\n      \
    \  {\n            r = mid - 1L;\n        }\n    }\n    return -1L;\n}\n/*\n  \
    \  Binary search on sorted array\n*/\nlong bsearch(long arr[], long x)\n{\n  \
    \  long mid;\n    mid = 0L;\n    while (mid < length(arr))\n    {\n        if\
    \ (arr[mid] == x)\n        {\n            return mid;\n        }\n        mid\
    \ = mid + 1L;\n    }\n    return -1L;\n}\n/*\n    Binary search for sorted array\n\
    */\nlong bsearch(long arr[], long l, long r, long x)\n{\n    long mid;\n    mid\
    \ = 0L;\n    while (l <= r)\n    {\n        mid = l + (r - l) / 2L;\n        if\
    \ (arr[mid] == x)\n        {\n            return mid;\n        }\n        if (arr[mid]\
    \ < x)\n        {\n            l = mid + 1L;\n        }\n        else\n      \
    \  {\n            r = mid - 1L;\n        }\n    }\n    return -1L;\n}\n/*\n  \
    \  Returns number of set bits in a given number\n*/\nlong countSetBits(long num)\n\
    {\n    long count;\n    count = 0L;\n    while (num > 0L)\n    {\n        num\
    \ = num & (num - 1L);\n        count = count + 1L;\n    }\n\nunittest\n{\n   \
    \ alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt4i25rwo.d(100): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4i25rwo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long size = 0;\n    while(string[size] != '\\0')\n    {\n        size++;\n\
    \    }\n    return size;\n}\nunittest\n{\n    alias candidate = strlen;\n\n  \
    \  assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnyoh7rps.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\treturn cast(long)string.length;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8t_531v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n  return string.length;\n}\n/*\n Return a new string with leading and trailing\
    \ space removed\n    >>> trim(\"  abc  \")\n    \"abc\"\n    >>> trim(\" abcd\
    \ \")\n    \"abcd\"\n*/\nstring trim(string string) \n{\n  int firstChar = 0;\n\
    \  while(firstChar < string.length && isspace(string[firstChar]))\n  {\n    firstChar++;\n\
    \  }\n  int lastChar = string.length - 1;\n  while(lastChar >= 0 && isspace(string[lastChar]))\n\
    \  {\n    lastChar--;\n  }\n  return string[firstChar..lastChar+1];\n}\n/*\n Return\
    \ a new string in reverse order\n    >>> reverse(\"abcd\")\n    \"dcba\"\n   \
    \ >>> reverse(\"\")\n    \"\"\n*/\nstring reverse(string string) \n{\n  string\
    \ result = \"\";\n  for(int i = string.length-1; i >= 0; i--)\n  {\n    result\
    \ = result ~ string[i];\n  }\n  return result;\n}\n/*\n Return the starting index\
    \ of the given substring in the given string, \n    or -1 if the substring is\
    \ not found\n    >>> indexOf(\"\", \"\")\n    0L\n    >>> indexOf(\"\", \"a\"\
    )\n    -1L\n    >>> indexOf(\"a\", \"\")\n    0L\n    >>> indexOf(\"a\", \"a\"\
    )\n    0L\n    >>> indexOf(\"abc\", \"d\")\n    -1L\n    >>> indexOf(\"abc\",\
    \ \"a\")\n    0L\n    >>> indexOf(\"abc\", \"b\")\n    1L\n    >>> indexOf(\"\
    abc\", \"bc\")\n    1L\n    >>> indexOf(\"abcabc\", \"bc\")\n    1L\n    >>> indexOf(\"\
    abcabc\", \"bc\", 2)\n    4L\n*/\nlong indexOf(string string, string substr, long\
    \ start = 0) \n{\n  int found = -1;\n  for(int i = start; i < string.length; i++)\n\
    \  {\n    if(string[i..i+substr.length-1] == substr)\n    {\nunittest\n{\n   \
    \ alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5msbp3ud.d(82): Error: found \''unittest\'' instead of statement\n/tmp/tmp5msbp3ud.d(90):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp5msbp3ud.d(90):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5msbp3ud.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n  long length;\n  length = 0;\n  foreach (ch; string)\n  {\n    length\
    \ += 1;\n  }\n  return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8mtclngz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(c; string)\n    {\n        length +=\
    \ 1;\n    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpez4b2b90.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    if (empty(string)) \n    {\n        return 0L;\n    }\n    else \n\
    \    {\n        return 1L + strlen(string[1..$]);\n    }\n}\nunittest\n{\n   \
    \ alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3_sdekk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long result = 0;\n    for (auto value : string)\n    {\n        ++result;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw15uffbg.d(13): Error: no identifier for declarator value\n/tmp/tmpw15uffbg.d(13):
    Error: expression expected, not \'':\''\n/tmp/tmpw15uffbg.d(13): Error: found
    \''string\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpw15uffbg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return size(string);\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8pew78w5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i = 0;\n    foreach(c; string) \n    {\n        i++;\n    }\n\
    \    return i;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3tea6vf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long result = 0;\n    while(string[result] != '\\0') {\n        result++;\n\
    \    }\n    return result;\n}\n/*\n Check if two given strings are equal\n   \
    \ >>> streq(\"abc\", \"abc\")\n    1\n    >>> streq(\"abc\", \"xyz\")\n    0\n\
    \    >>> streq(\"abc\", \"xyz\")\n    0\n    >>> streq(\"abc\", \"ab\")\n    0\n\
    \    >>> streq(\"abc\", \"abcd\")\n    0\n*/\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_du2uy2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    //TODO: This will blow up on null strings, should it?\n    return (string[$-1]\
    \ == '\\0') ? cast(long)string.length - 1 : cast(long)string.length;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kmt7jue.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    foreach(char ch; string) \n    {\n        ++len;\n\
    \    }\n    return len;\n}\nunittest\n{\n    alias candidate = strlen;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq2quqyud.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    foreach(i; string)\n        len++;\n    return len;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcjzcl7dn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long x = 0;\n    foreach(c; string)\n    {\n        x++;\n    }\n \
    \   return x;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiz8m3d8l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(c; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi95ztm1f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    while (string.length) {\n        len++;\n      \
    \  string = strip(string);\n    }\n    return len;\n}\n/*\nReturn number of occurrences\
    \ of given character in string\n    >>> strcount(\"\",\"a\")\n    0L\n    >>>\
    \ strcount(\"abc\",\"b\")\n    1L\n    >>> strcount(\"abc\",\"c\")\n    1L\n \
    \   >>> strcount(\"aa\",\"a\")\n    2L\n    >>> strcount(\"aa\",\"b\")\n    0L\n\
    */\nlong strcount(string string,string character) \n{\n    long count = 0;\n \
    \   for (int i = 0; i < string.length; i++) {\n        if (string[i] == character[0])\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n/*\nReturn\
    \ position of first occurrence of given character in string\n    >>> strpos(\"\
    abc\",\"b\")\n    1L\n    >>> strpos(\"abc\",\"c\")\n    2L\n    >>> strpos(\"\
    abc\",\"a\")\n    0L\n    >>> strpos(\"abc\",\"x\")\n    -1L\n*/\nlong strpos(string\
    \ string,string character) \n{\n    for (int i = 0; i < string.length; i++) {\n\
    \        if (string[i] == character[0]) {\n            return i;\n        }\n\
    \    }\n    return -1;\n}\n/*\n    Return position of last occurrence of given\
    \ character in string\n    >>> strrpos(\"abc\",\"b\")\n    1L\n    >>> strrpos(\"\
    abc\",\"c\")\n    2L\n    >>> strrpos(\"abc\",\"a\")\n    0L\n    >>> strrpos(\"\
    abc\",\"x\")\n    -1L\n*/\nlong strrpos(string string,string character) \n{\n\
    \    long pos = -1;\n    for (int i = 0; i < string.length; i++) {\n        if\
    \ (string[i] == character[0]) {\n            pos = i;\n        }\n    }\n    return\
    \ pos;\n}\n/*\nReturn string with all occurrences of given character replaced\
    \ with another character\n    >>> strreplace(\"\",\"a\",\"b\")\n    \"\"\n   \n\
    unittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsj26v2jg.d(83): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpsj26v2jg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    foreach(c; string)\n    {\n        len++;\n    }\n\
    \    return len;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpek2vv0mi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(c; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkj8am4_t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long n = 0;\n    while (string[n] != '\\0') \n    {\n        n++;\n\
    \    }\n    return n;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppehroufp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n  return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_z_pim8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\n/*\n Return mean of all numbers in array\n\
    \    >>> mean([])\n    nan\n    >>> mean([2])\n    2.0\n    >>> mean([1, 2, 3])\n\
    \    2.0\n    >>> mean([1, 2, 3, 4])\n    2.5\n    \n*/\ndouble mean(int[] array)\
    \ \n{\n    long length = array.length;\n    double sum = 0;\n    foreach(int item;\
    \ array) \n    {\n        sum += item;\n    }\n    return sum / (double)length;\n\
    }\n/*\n Return variance of all numbers in array\n    >>> variance([])\n    nan\n\
    \    >>> variance([2])\n    0.0\n    >>> variance([1, 2, 3])\n    0.6666666666666666\n\
    \    >>> variance([1, 2, 3, 4])\n    1.25\n    \n*/\ndouble variance(int[] array)\
    \ \n{\n    long length = array.length;\n    double mean = mean(array);\n    double\
    \ sum = 0;\n    foreach(int item; array) \n    {\n        sum += pow(item - mean,\
    \ 2);\n    }\n    return sum / (double)length;\n}\n/*\n Return standard deviation\
    \ of all numbers in array\n    >>> standard_deviation([])\n    nan\n    >>> standard_deviation([2])\n\
    \    0.0\n    >>> standard_deviation([1, 2, 3])\n    0.816496580927726\n    >>>\
    \ standard_deviation([1, 2, 3, 4])\n    1.118033988749895\n    \n*/\ndouble standard_deviation(int[]\
    \ array) \n{\n    return sqrt(variance(array));\n}\n/*\n Return median of all\
    \ numbers in array\n    >>> median([])\n    nan\n    >>> median([2])\n    2.0\n\
    \    >>> median([1, 2, 3])\n    2.0\n    >>> median([1, 2, 3, 4])\n    2.5\n \
    \   \n*/\ndouble median(int[] array) \n{\n    long length = array.length;\n  \
    \  double median = 0;\n    int[] sorted_array\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprr8t3uc5.d(34): Error: C style cast illegal, use cast(double)length\n/tmp/tmprr8t3uc5.d(57):
    Error: C style cast illegal, use cast(double)length\n/tmp/tmprr8t3uc5.d(92): Error:
    semicolon expected, not \''unittest\''\n/tmp/tmprr8t3uc5.d(92): Error: found \''unittest\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprr8t3uc5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    for (int i = 0; i < string.length; i++) \n  \
    \  {\n        if (string[i] == '\\0')\n            break;\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2dt5ujm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    while(string[length] != '\\0')\n    {\n     \
    \   length++;\n    }\n    return length;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0kskk8b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    while (string[len] != '\\0')\n    {\n        len++;\n\
    \    }\n    return len;\n}\nunittest\n{\n    alias candidate = strlen;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"\
    asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpreet_cvk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    for (int i = 0; string[i] != '\\0'; i++) {\n   \
    \     len++;\n    }\n    return len;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgk72tpqa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long nchars = 0;\n    foreach (c; string)\n    {\n        nchars++;\n\
    \    }\n    return nchars;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu41c0z2t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i = 0;\n    for (; string[i]; i++);\n    return i;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp78305qxo.d(13): Error: use \''{ }\'' for an empty statement,
    not a \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp78305qxo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    foreach(a; string)\n    {\n        len++;\n    }\n\
    \    return len;\n}\n/*\n Return given string with escaped characters\n    >>>\
    \ escape(\"\")\n    \"\"\n    >>> escape(\"abc\")\n    \"abc\"\n    >>> escape(\"\
    \\\\n\")\n    \"\\\\\\\\n\"\n    >>> escape(\"\\\\nabc\")\n    \"\\\\\\\\nabc\"\
    \n    >>> escape(\"abc\\\\n\")\n    \"abc\\\\\\\\n\"\n    >>> escape(\"\\\\x00\"\
    )\n    \"\\\\\\\\x00\"\n    >>> escape(\"\\\\xff\")\n    \"\\\\\\\\xff\"\n   \
    \ >>> escape(\"\\\\xffabc\")\n    \"\\\\\\\\xffabc\"\n    >>> escape(\"abc\\\\\
    xff\")\n    \"abc\\\\\\\\xff\"\n    >>> escape(\"\\\\xaa\")\n    \"\\\\\\\\xaa\"\
    \n    >>> escape(\"\\\\xaaabc\")\n    \"\\\\\\\\xaaabc\"\n    >>> escape(\"abc\\\
    \\xaa\")\n    \"abc\\\\\\\\xaa\"\n    >>> escape(\"\\\\xaa\\\\xaa\")\n    \"\\\
    \\\\\\xaa\\\\\\\\xaa\"\n    >>> escape(\"abc\\\\xaa\\\\xaa\")\n    \"abc\\\\\\\
    \\xaa\\\\\\\\xaa\"\n    >>> escape(\"\\\\xaa\\\\xaaabc\")\n    \"\\\\\\\\xaa\\\
    \\\\\\xaaabc\"\n    >>> escape(\"\\\\xaaabc\\\\xaa\")\n    \"\\\\\\\\xaaabc\\\\\
    \\\\xaa\"\n    >>> escape(\"\\\\xaaabc\\\\xaaabc\")\n    \"\\\\\\\\xaaabc\\\\\\\
    \\xaaabc\"\n*/\nstring escape(string string)\n{\n    string escaped = \"\";\n\
    \    foreach(char a; string)\n    {\n        if(a == '\\\\')\n        {\n    \
    \        escaped ~= '\\\\';\n            escaped ~= '\\\\';\n        }\n     \
    \   else if(a == '\\n')\n        {\n            escaped ~= '\\\\';\n         \
    \   escaped ~= 'n';\n        }\n        else if(a == '\\r')\n        {\n     \
    \       escaped ~= '\\\\';\n            escaped ~= 'r';\n        }\n        else\
    \ if(a == '\\t')\n        {\n            escaped ~= '\\\\';\n            escaped\
    \ ~= 't';\n        }\n        else if(a\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj9sdryje.d(82): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmpj9sdryje.d(90):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpj9sdryje.d(90):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj9sdryje.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i;\n    for (i = 0; string[i]; i++) {}\n    return i;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp14_lc2qx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\tlong length = 0;\n\tforeach(string[i]) \n\t{\n\t\tlength++;\n\t}\n\t\
    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppmu_4vkx.d(13): Error: no identifier for declarator string[i]\n/tmp/tmppmu_4vkx.d(13):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmppmu_4vkx.d(17): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmppmu_4vkx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(ch; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(wstring string)\
    \ \n{\n    long length = 0;\n    foreach(ch; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\n/*\n Return length of given pointer\n    >>> strlen(&\"\
    \")\n    0L\n    >>> strlen(&\"abc\")\n    3L\n    \n*/\nlong strlen(char[] string)\
    \ \n{\n    long length = 0;\n    foreach(ch; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\n/*\n Return length of given pointer\n    >>> strlen(&\"\
    \")\n    0L\n    >>> strlen(&\"abc\")\n    3L\n    \n*/\nlong strlen(wchar[] string)\
    \ \n{\n    long length = 0;\n    foreach(ch; string)\n    {\n        length++;\n\
    \    }\n    return length;\n}\n/*\n Return length of given pointer\n    >>> strlen(&\"\
    \")\n    0L\n    >>> strlen(&\"abc\")\n    3L\n    \n*/\nlong strlen(char* string)\
    \ \n{\n    long length = 0;\n    while(string[length] != '\\0')\n    {\n     \
    \   length++;\n    }\n    return length;\n}\n/*\n Return length of given pointer\n\
    \    >>> strlen(&\"\")\n    0L\n    >>> strlen(&\"abc\")\n    3L\n    \n*/\nlong\
    \ strlen(wchar* string) \n{\n    long length = 0;\n    while(string[length] !=\
    \ '\\0')\n    {\n        length++;\n    }\n    return length;\n}\n/*\n Return\
    \ pointer to char at given index\n    >>> charAt(&\"abc\", 0)\n    'a'\n    >>>\
    \ charAt(&\"abc\", 1)\n    'b'\n    >>> charAt(&\"abc\", 2)\n    'c'\n\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfkfprel4.d(104): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkfprel4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return len(string);\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp87n_b44.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\tlong length = 0;\n\twhile (string[length] != '\\0')\n\t{\n\t\tlength++;\n\
    \t}\n\treturn length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9tgtdpia.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long size = 0;\n    char[] chars = toStringz(string);\n    for (long\
    \ i = 0; chars[i] != '\\0'; i++) \n    {\n        size++;\n    }\n    return size;\n\
    }\n/*\n Reverse given string in place\n    >>> strrev(\"abc\")\n    \"cba\"\n\
    \    >>> strrev(\"abcdef\")\n    \"fedcba\"\n*/\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvh36nzlz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i;\n    for (i = 0; string[i]; i++);\n    return i;\n}\n/*\n \
    \   Extract part of string\n    >>> substr(\"abcdef\", 3L, 3L)\n    \"def\"\n\
    \    >>> substr(\"abcdef\", 2L, 100L)\n    \"cdef\"\n    >>> substr(\"abcdef\"\
    , 2L, 0L)\n    \"\"\n    >>> substr(\"abcdef\", 5L, 10L)\n    \"f\"\n*/\nstring\
    \ substr(string string, long pos, long n)\n{\n    long string_len;\n    string\
    \ res;\n    long i;\n    if (n == 0L)\n        return \"\";\n    string_len =\
    \ strlen(string);\n    if (pos >= string_len)\n        return \"\";\n    if (pos\
    \ + n > string_len)\n        n = string_len - pos;\n    res = malloc(n + 1L);\n\
    \    i = 0L;\n    for (; i < n; i++)\n        res[i] = string[pos + i];\n    res[i]\
    \ = 0;\n    return res;\n}\n/*\n    Find 1st occurence of string 't' in string\
    \ 's'\n    Return -1 if 't' is not found in 's'\n    Return index of first 't'\
    \ occurence in 's' otherwise\n    >>> strfind(\"abcabc\", \"a\")\n    0L\n   \
    \ >>> strfind(\"abcabc\", \"c\")\n    2L\n    >>> strfind(\"abcabc\", \"d\")\n\
    \    -1L\n    >>> strfind(\"abcabc\", \"ab\")\n    0L\n    >>> strfind(\"abcabc\"\
    , \"bc\")\n    1L\n    >>> strfind(\"abcabc\", \"abc\")\n    0L\n    >>> strfind(\"\
    abcabc\", \"\")\n    0L\n    >>> strfind(\"\", \"abc\")\n    -1L\n    >>> strfind(\"\
    abcabc\", \"abcabc\")\n    0L\n    >>> strfind(\"abcabc\", \"bcabca\")\n    -1L\n\
    */\nlong strfind(string s, string t)\n{\n    long i;\n    long ls;\n    long l\n\
    unittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphs45lh06.d(13): Error: use \''{ }\'' for an empty statement,
    not a \'';\''\n/tmp/tmphs45lh06.d(76): Error: semicolon expected, not \''unittest\''\n/tmp/tmphs45lh06.d(76):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphs45lh06.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long int len = 0;\n    while (string[len])\n        len++;\n    return\
    \ len;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc264p7jd.d(12): Error: no identifier for declarator long\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc264p7jd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long count = 0;\n    for (char c in string) {\n        count += 1;\n\
    \    }\n    return count;\n}\n/*\nReturn concatenation of given strings\n    >>>\
    \ strcat(\"a\", \"b\")\n    \"ab\"\n    >>> strcat(\"\", \"a\")\n    \"a\"\n*/\n\
    string strcat(string s1, string s2) \n{\n    string result = s1;\n    for (char\
    \ c in s2) {\n        result ~= c;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiqsbidfb.d(13): Error: semicolon expected, not \''in\''\n/tmp/tmpiqsbidfb.d(13):
    Error: expression expected, not \''in\''\n/tmp/tmpiqsbidfb.d(13): Error: found
    \''string\'' when expecting \'';\'' following for condition\n/tmp/tmpiqsbidfb.d(28):
    Error: semicolon expected, not \''in\''\n/tmp/tmpiqsbidfb.d(28): Error: expression
    expected, not \''in\''\n/tmp/tmpiqsbidfb.d(28): Error: found \''s2\'' when expecting
    \'';\'' following for condition\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqsbidfb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i = 0;\n    while (string[i] != '\\0')\n        i++;\n    return\
    \ i;\n}\n/*\n Upper-case all characters in string\n */\nstring strupper(string\
    \ string) \n{\n    long n = strlen(string);\n    long i = 0;\n    while (i < n)\
    \ {\n        string[i] = toUpper(string[i]);\n        i++;\n    }\n    return\
    \ string;\n}\n/*\n Lower-case all characters in string\n */\nstring strlower(string\
    \ string) \n{\n    long n = strlen(string);\n    long i = 0;\n    while (i < n)\
    \ {\n        string[i] = toLower(string[i]);\n        i++;\n    }\n    return\
    \ string;\n}\n/*\n Capitalise first letter in string\n */\nstring strcap(string\
    \ string) \n{\n    long n = strlen(string);\n    if (n > 0)\n        string[0]\
    \ = toUpper(string[0]);\n    return string;\n}\n/*\n Compare strings\n    >>>\
    \ strcmp(\"a\",\"b\")\n    -1\n    >>> strcmp(\"a\",\"a\")\n    0\n    >>> strcmp(\"\
    b\",\"a\")\n    1\n*/\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplcyn0e68.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\treturn string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp42of8wd8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    while (string[length] != '\\0')\n    {\n    \
    \    length++;\n    }\n    return length;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpub6myt7e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\tlong result;\n\tresult = 0;\n\tforeach(string char; string) \n\t{\n\t\
    \tresult = result + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy6627_h3.d(14): Error: no identifier for declarator string\n/tmp/tmpy6627_h3.d(14):
    Error: found \''char\'' when expecting \'';\''\n/tmp/tmpy6627_h3.d(14): Error:
    expression expected, not \'';\''\n/tmp/tmpy6627_h3.d(14): Error: found \''string\''
    when expecting \'')\''\n/tmp/tmpy6627_h3.d(14): Error: found \'')\'' instead of
    statement\n/tmp/tmpy6627_h3.d(18): Error: Declaration expected, not \''return\''\n/tmp/tmpy6627_h3.d(19):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy6627_h3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    int i;\n    for (i = 0; string[i]; i++);\n    return i;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf4wz7hm_.d(13): Error: use \''{ }\'' for an empty statement,
    not a \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf4wz7hm_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n\tlong len = 0;\n\twhile (string[len])\n\t\tlen++;\n\treturn len;\n}\n\
    /*\n Check if given string is contained in other string\n    >>> strstr(\"abc\"\
    , \"a\")\n    true\n    >>> strstr(\"abcd\", \"abcd\")\n    true\n    >>> strstr(\"\
    abcd\", \"abcde\")\n    false\n    >>> strstr(\"abcd\", \"abd\")\n    false\n\
    \    >>> strstr(\"abcd\", \"\")\n    true\n    >>> strstr(\"\", \"abc\")\n   \
    \ false\n*/\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhncd3x8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(s; string) {\n        length++;\n   \
    \ }\n    return length;\n}\n/*\n Return number of words in string\n    >>> numWords(\"\
    \")\n    0L\n    >>> numWords(\"abc\")\n    1L\n    >>> numWords(\"  abc  \")\n\
    \    1L\n    >>> numWords(\"a b c\")\n    3L\n    >>> numWords(\"a    b c\")\n\
    \    3L\n*/\nlong numWords(string string) \n{\n    long words = 0;\n    long length\
    \ = strlen(string);\n    bool prevSpace = true;\n    foreach(i; 0..length) {\n\
    \        bool currSpace = isAlpha(string[i]) ? false : true;\n        if (currSpace\
    \ && !prevSpace) {\n            words++;\n        }\n        prevSpace = currSpace;\n\
    \    }\n    return words;\n}\n/*\n Return number of lines in string\n    >>> numLines(\"\
    \")\n    0L\n    >>> numLines(\"abc\")\n    1L\n    >>> numLines(\"a\\nb\")\n\
    \    2L\n    >>> numLines(\"a\\n\")\n    2L\n    >>> numLines(\"a\\n\\n\")\n \
    \   3L\n*/\nlong numLines(string string) \n{\n    long lines = 0;\n    long length\
    \ = strlen(string);\n    foreach(i; 0..length) {\n        if (string[i] == '\\\
    n') {\n            lines++;\n        }\n    }\n    return lines;\n}\nunittest\n\
    {\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplob_i9y7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long i = 0;\n    foreach(c; string)\n    {\n        i++;\n    }\n \
    \   return i;\n}\n \n/*\n    Print reverse of string\n    >>> strrev(\"\")\n \
    \   \"\"\n    >>> strrev(\"abc\")\n    \"cba\"\n*/\nstring strrev(string string)\
    \ \n{\n    string result = \"\";\n    foreach(c; string)\n    {\n        result\
    \ = c ~ result;\n    }\n    return result;\n}\n \n/*\n    Generate lower case\
    \ letter\n    >>> lower('A')\n    'a'\n    >>> lower('b')\n    'b'\n*/\nchar lower(char\
    \ letter) \n{\n    return toLower(letter);\n}\n \n/*\n    Generate upper case\
    \ letter\n    >>> upper('a')\n    'A'\n    >>> upper('B')\n    'B'\n*/\nchar upper(char\
    \ letter) \n{\n    return toUpper(letter);\n}\n \n/*\n    Convert string to upper\
    \ case\n    >>> toupper(\"\")\n    \"\"\n    >>> toupper(\"abc\")\n    \"ABC\"\
    \n*/\nstring toupper(string string) \n{\n    string result = \"\";\n    foreach(c;\
    \ string)\n    {\n        result ~= toUpper(c);\n    }\n    return result;\n}\n\
    \ \n/*\n    Convert string to lower case\n    >>> tolower(\"\")\n    \"\"\n  \
    \  >>> tolower(\"abc\")\n    \"abc\"\n*/\nstring tolower(string string) \n{\n\
    \    string result = \"\";\n    foreach(c; string)\n    {\n        result ~= toLower(c);\n\
    \    }\n    return result;\n}\n \n/*\n    Copy characters from source string to\
    \ destination string.\n    >>> strcpy(\"\", \"\")\n    \"\"\n    >>> strcpy(\"\
    abc\", \"\")\n    \"abc\"\n    >>> strcpy(\"\", \"abc\")\n    \"\"\n    >>> strcpy(\"\
    abc\", \"def\")\n    \"def\"\n*/\nstring strcpy(string destination, string source)\
    \ \n{\n    destination = source;\n    return destination;\n}\nunittest\n{\n  \
    \  alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9iouvz_3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    foreach(c; string) \n    {\n        length++;\n\
    \    }\n    return length;\n}\nunittest\n{\n    alias candidate = strlen;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n   \
    \ assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi95ztm1f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len;\n    foreach(c; string)\n    {\n        len++;\n    }\n \
    \   return len;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvwsxirng.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\n/*\n Return the given string reversed\n \
    \   >>> strrev(\"abc\")\n    \"cba\"\n*/\nstring strrev(string string) \n{\n \
    \   string reverse;\n    for (int i = string.length - 1; i >= 0; i--) \n    {\n\
    \        reverse ~= string[i];\n    }\n    return reverse;\n}\n/*\n Return the\
    \ given string truncated to length n\n    >>> truncate(\"abcdef\", 4)\n    \"\
    abcd\"\n*/\nstring truncate(string string, long n) \n{\n    return string[0 ..\
    \ n - 1];\n}\n/*\n Pad given string with space to make it n chars long\n    >>>\
    \ pad(\"abc\", 6)\n    \"abc   \"\n*/\nstring pad(string string, long n) \n{\n\
    \    if (n > string.length) \n    {\n        string ~= new string[];\n       \
    \ string[$ - 1] = \" \";\n        string = pad(string, n);\n    }\n    return\
    \ string;\n}\n/*\n Return string consisting of given char repeated n times\n \
    \   >>> repeat('a', 3)\n    \"aaa\"\n*/\nstring repeat(char c, long n) \n{\n \
    \   string string;\n    for (long i = 0; i < n; i++) \n    {\n        string ~=\
    \ c;\n    }\n    return string;\n}\n/*\n Return string consisting of given string\
    \ repeated n times\n    >>> repeat(\"x\", 3)\n    \"xxx\"\n*/\nstring repeat(string\
    \ string, long n) \n{\n    string repeat;\n    for (long i = 0; i < n; i++) \n\
    \    {\n        repeat ~= string;\n    }\n    return repeat;\n}\n/*\n Return string\
    \ containing letter at index n\n    >>> nth('abc', 0)\n    \"a\"\n*/\nchar nth(string\
    \ string, long n) \n{\n    return string[n];\n}\n/*\n Return string containing\
    \ last letter of given string\n    >>> last('abc')\n    \"c\"\n*/\nchar last(string\
    \ string) \n{\n    return string[$ - 1];\n}\n\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2vrcufcn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 0
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long length = 0;\n    while(string[length] != '\\0')\n    {\n     \
    \   length++;\n    }\n    return length;\n}\nunittest\n{\n    alias candidate\
    \ = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\"\
    ) == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0kskk8b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\n/*\n    Count number of occurences of given\
    \ character in string\n    >>> count_char('a', \"\")\n    0L\n    >>> count_char('a',\
    \ \"abc\")\n    1L\n    >>> count_char('b', \"abc\")\n    1L\n    >>> count_char('c',\
    \ \"abc\")\n    1L\n    >>> count_char('a', \"ababa\")\n    3L\n    >>> count_char('d',\
    \ \"ababa\")\n    0L\n    >>> count_char('d', \"aabbabb\")\n    0L\n*/\nlong count_char(char\
    \ character, string string) \n{\n    long count = 0;\n    foreach(ch; string)\
    \ \n    {\n        if(ch == character) \n        {\n            count++;\n   \
    \     }\n    }\n    return count;\n}\n/*\n   Check if given character is a letter\n\
    \   >>> is_letter('a')\n   true\n   >>> is_letter('A')\n   true\n   >>> is_letter('4')\n\
    \   false\n   >>> is_letter('?')\n   false\n   >>> is_letter('#')\n   false\n\
    */\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydjqg28u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long sz = 0;\n    for (long i = 0; i < string.length; i++)\n    {\n\
    \        sz++;\n    }\n    return sz;\n}\nunittest\n{\n    alias candidate = strlen;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n  \
    \  assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpokb_hb6g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    return string.length;\n}\n/*\n Return length of given string\n    >>>\
    \ strlen(\"\")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen2(const(char)*\
    \ string) \n{\n    long count;\n    while (string[count] != '\\0')\n        count++;\n\
    \    return count;\n}\n/*\n Return length of given string\n    >>> strlen(\"\"\
    )\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen3(char[] string)\
    \ \n{\n    return string.length;\n}\n/*\n Return length of given string\n    >>>\
    \ strlen(\"\")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen4(const(char)[]\
    \ string) \n{\n    return string.length;\n}\n/*\n Return length of given string\n\
    \    >>> strlen(\"\")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong\
    \ strlen5(char* string) \n{\n    return string.length;\n}\n/*\n Return length\
    \ of given string\n    >>> strlen(\"\")\n    0L\n    >>> strlen(\"abc\")\n   \
    \ 3L\n    \n*/\nlong strlen6(const(char)* string) \n{\n    return string.length;\n\
    }\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ml_pxy7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977951
- exit_code: 1
  program: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\
    \")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n    long len = 0;\n    while (string[len] != '\\0')\n        len++;\n \
    \   return len;\n}\nunittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
    ) == 9L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjraxt1gl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659977950
