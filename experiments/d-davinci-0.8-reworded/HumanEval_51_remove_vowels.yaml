name: HumanEval_51_remove_vowels
language: d
prompt: "import std.math;\n/*\n\n    remove_vowels is a function that takes string\
  \ and returns string without vowels.\n    >>> remove_vowels(\"\")\n    \"\"\n  \
  \  >>> remove_vowels(\"abcdef\")\n    \"bcdf\"\n    >>> remove_vowels(\"aaaaa\"\
  )\n    \"\"\n    >>> remove_vowels(\"aaBAA\")\n    \"B\"\n    >>> remove_vowels(\"\
  zbcd\")\n    \"zbcd\"\n    \n*/\nstring remove_vowels(string text) \n"
tests: "unittest\n{\n    alias candidate = remove_vowels;\n\n    assert(candidate(\"\
  \") == \"\");\n    assert(candidate(\"abcdef\nghijklm\") == \"bcdf\nghjklm\");\n\
  \    assert(candidate(\"fedcba\") == \"fdcb\");\n    assert(candidate(\"eeeee\"\
  ) == \"\");\n    assert(candidate(\"acBAA\") == \"cB\");\n    assert(candidate(\"\
  EcBOO\") == \"cB\");\n    assert(candidate(\"ybcd\") == \"ybcd\");\n}\nvoid main(){}"
completions: ["{\n    string vowels = \"aeiouAEIOU\";\n    int k = text.length;\n\
    \    string output = \"\";\n    for (int i = 0; i < k; i++) {\n        bool b\
    \ = false;\n        for (int j = 0; j < vowels.length; j++) {\n            if\
    \ (text[i] == vowels[j]) {\n                b = true;\n                break;\n\
    \            }\n        }\n        if (!b) {\n            output += text[i];\n\
    \        }\n    }\n    return output;\n}", "{\n    string ret = \"\";\n    foreach(c;\
    \ text)\n    {\n        if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n        {\n\
    \            ret ~= c;\n        }\n    }\n    return ret;\n}", "{\n    string\
    \ result;\n    foreach(ch; text) \n    {\n        if (ch == 'a' || ch == 'e' ||\
    \ ch == 'i' || ch == 'o' || ch == 'u' || ch == 'A' || ch == 'E' || ch == 'I' ||\
    \ ch == 'O' || ch == 'U')\n        {\n            result ~= ch;\n        }\n \
    \   }\n    return result;\n}", "{\n    string result;\n    foreach(c; text) \n\
    \    {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\
    \ c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n        {\n     \
    \       result ~= c;\n        }\n    }\n    return result;\n}", "{\n    if(text.length()\
    \ == 0)\n        return \"\";\n    if(text[0] == 'a' || text[0] == 'A' || text[0]\
    \ == 'e' || text[0] == 'E' || text[0] == 'i' || text[0] == 'I' || text[0] == 'o'\
    \ || text[0] == 'O' || text[0] == 'u' || text[0] == 'U')\n        return remove_vowels(text[1..$]);\n\
    \    else\n        return text[0..0] ~ remove_vowels(text[1..$]);\n}", "{\n  \
    \  string result = \"\";\n    foreach(c; text)\n    {\n        if (c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c !=\
    \ 'I' && c != 'O' && c != 'U')\n        {\n            result ~= c;\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    for (int i\
    \ = 0; i < text.length; i++) \n    {\n        char c = text[i];\n        if (c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E'\
    \ && c != 'I' && c != 'O' && c != 'U') \n        {\n            result += c;\n\
    \        }\n    }\n    return result;\n}", "{\n    return filter!(ch => !(\"aeiouAEIOU\"\
    .canFind(ch)))(text);\n}", "{\n\tstring output = \"\";\n\t// Loop through each\
    \ letter.\n\tfor (size_t i = 0; i < text.length(); i++) \n\t{\n\t\t// If the letter\
    \ is a vowel, continue to the next loop.\n\t\tif (text[i] == 'a' || text[i] ==\
    \ 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' ||\n\t\t\ttext[i]\
    \ == 'A' || text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U')\n\
    \t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Add the letter to the\
    \ output string if it is not a vowel.\n\t\t\toutput += text[i];\n\t\t}\n\t}\n\t\
    return output;\n}", "{\n    string result = \"\";\n    foreach(c; text)\n    {\n\
    \        switch(tolower(c)) \n        {\n            case 'a':\n            case\
    \ 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n\
    \                break;\n            default:\n                result ~= c;\n\
    \        }\n    }\n    return result;\n}\n/*", "{\n    string result = \"\";\n\
    \    foreach(c; text)\n    {\n        if (c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c !=\
    \ 'U')\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }", "{\n    string vowel_letters = \"aeiou\";\n    string output = \"\";\n   \
    \ foreach(c; text)\n    {\n        foreach(v; vowel_letters)\n        {\n    \
    \        if(c == v)\n            {\n                goto next_letter;\n      \
    \      }\n        }\n        output ~= c;\n        next_letter:\n    }\n    return\
    \ output;\n}\n/*", "{ \n    if(text == \"\") \n        return \"\";\n    if(text.front\
    \ == 'a' || text.front == 'e' || text.front == 'i' || text.front == 'o' || text.front\
    \ == 'u' || text.front == 'A' || text.front == 'E' || text.front == 'I' || text.front\
    \ == 'O' || text.front == 'U') \n        return remove_vowels(text.popFront);\n\
    \    return text.front ~ remove_vowels(text.popFront);\n}", "{\n    string result\
    \ = \"\";\n    for (int i = 0; i < text.length; i++)\n    {\n        if (text[i]\
    \ != 'a' && text[i] != 'A' && text[i] != 'e' && text[i] != 'E' && text[i] != 'o'\
    \ && text[i] != 'O' && text[i] != 'u' && text[i] != 'U' && text[i] != 'i' && text[i]\
    \ != 'I')\n        {\n            result += text[i];\n        }\n    }\n    return\
    \ result;\n}\n/*", "{\n    return replace_all(text, \"a|e|i|o|u|A|E|I|O|U\", \"\
    \");\n}", "{\n  return text.replace(\"a\", \"\").replace(\"e\", \"\").replace(\"\
    i\", \"\").replace(\"o\", \"\").replace(\"u\", \"\");\n}", "{\n    string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < text.length; i++) {\n        char c =\
    \ text[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            text = text.replace(c, \"\");\n        }\n    }\n    return text;\n\
    }", "{\n    string result = \"\";\n    // your code here\n    foreach(i, c; text)\n\
    \    {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\
    \ c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n        {\n     \
    \       result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; text) \n    {\n        if (c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c\
    \ != 'O' && c != 'U') \n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\n/*", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    foreach(r; text)\n    {\n        if(indexOf(vowels, r) ==\
    \ -1)\n        {\n            result ~= r;\n        }\n    }\n    return result;\n\
    }", "{\n    return text.toUpper().erase(\"AEIOU\");\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; text)\n    {\n        if (c != 'a' && c != 'e' && c\
    \ != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O'\
    \ && c != 'U')\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\n/*", "{\n    string new_string = \"\";\n    foreach(w; text)\n \
    \   {\n        if(!isVowel(w)) \n        {\n            new_string ~= w;\n   \
    \     }\n    }\n    return new_string;\n}\n/*", "{\n    text = lower(text);\n\
    \    string res;\n    foreach(char c; text)\n    {\n        if (c!='a' && c!='e'\
    \ && c!='i' && c!='o' && c!='u')\n            res ~= c;\n    }\n    return res;\n\
    }", "{\n    auto result = \"\";\n    auto vowel = \"aAeEiIoOuU\";\n    auto letters\
    \ = text.split;\n    foreach(letter; letters)\n    {\n        if(vowel.find(letter)\
    \ == -1)\n        {\n            result ~= letter;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    for (size_t i = 0; i < text.length();\
    \ i++) \n    {\n        if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i'\
    \ && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i]\
    \ != 'I' && text[i] != 'O' && text[i] != 'U')\n        {\n            result +=\
    \ text[i];\n        }\n    }\n    return result;\n}", "{\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    foreach(c; consonants)\n\
    \    {\n        text = replace(text, c, \"\");\n    }\n    return text;\n}", "{\n\
    \    string result;\n    foreach(c; text)\n    {\n        if(!(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u'))\n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}", "{\n    return text.replace(\"\
    a\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"o\", \"\").replace(\"\
    u\", \"\");\n}", "{\n    import std.string;\n    import std.stdio;\n    import\
    \ std.array;\n    import std.range;\n    import std.conv;\n    import std.array;\n\
    \    import std.algorithm;\n    import std.math;\n    import std.traits;\n   \
    \ import std.range;\n    import std.file;\n    import std.ascii;\n    import std.math;\n\
    \    import std.range;\n    import std.typecons;\n    import std.conv;\n    import\
    \ std.math;\n    import std.random;\n    import std.algorithm;\n    import std.range;\n\
    \    import std.math;\n    import std.typecons;\n    import std.range;\n    import\
    \ std.math;\n    import std.datetime;\n    import std.math;\n    import std.conv;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.math;\n    import\
    \ std.string;\n    import std.string;\n    import std.algorithm;\n    import std.datetime;\n\
    \    import std.math;\n    import std.random;\n    import std.algorithm;\n   \
    \ import std.range;\n    import std.string;\n    import std.string;\n    import\
    \ std.array;\n    import std.range;\n    import std.math;\n    import std.range;\n\
    \    import std.math;\n    import std.algorithm;\n    import std.math;\n    import\
    \ std.range;\n    import std.conv;\n    import std.range;\n    import std.datetime;\n\
    \    import std.string;\n    import std.string;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.random;\n    import std.range;\n    import std.math;\n\
    \    import std.random;\n    import std.string;\n    import std.algorithm;\n \
    \   import std.range;\n    import std.math;\n    import std.math;\n    import\
    \ std.math;\n    import std.math;\n    import std.conv;\n    import std.math;\n\
    \    import std.array;\n    import std.range;\n    import", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    foreach(char c; text)\n  \
    \  {\n        if (vowels.find(c) == -1)\n        {\n            result += c;\n\
    \        }\n    }\n    return result;\n}", "{\n    char[] vowels = {'a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    string result = \"\";\n    foreach(c;\
    \ text) \n    {\n        if(!any!(char[])((v) => v == c)(vowels)) \n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\n/*", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    foreach(ch;\
    \ text)\n    {\n        if(vowels.find(ch) < 0)\n        {\n            result\
    \ = result ~ ch;\n        }\n    }\n    return result;\n}", "{\n    string result;\n\
    \    bool vowel = false;\n    foreach(char c; text) {\n        c = tolower(c);\n\
    \        switch(c) {\n            case 'a':\n            case 'e':\n         \
    \   case 'i':\n            case 'o':\n            case 'u':\n                vowel\
    \ = true;\n                break;\n            default:\n                result\
    \ ~= c;\n        }\n    }\n    if(vowel) return result;\n    else return text;\n\
    }\n/*", "{\n    string vowels = \"aeiouAEIOU\";\n    string ret = \"\";\n    foreach(c;\
    \ text) {\n        if(vowels.find(c) == -1) {\n            ret ~= c;\n       \
    \ }\n    }\n    return ret;\n}", "{\n    string new_text;\n    foreach(char c;\
    \ text)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n\
    \            continue;\n        }\n        else\n        {\n            new_text\
    \ ~= c;\n        }\n    }\n    return new_text;\n}", "{\n    string listOfVowels\
    \ = \"aeiouAEIOU\";\n    // create a new string from text without vowels\n   \
    \ string withoutVowels = \"\";\n    foreach(int i; 0 .. text.length)\n    {\n\
    \        if (listOfVowels.find(text[i]) == -1)\n        {\n            withoutVowels\
    \ ~= text[i];\n        }\n    }\n    return withoutVowels;\n}\n//@+node:gcross.20110309024201.1468:\
    \ *3* Two-Complement Checksum\n/*", "{\n    string result;\n    foreach(c; text)\
    \ \n    {\n        if (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i'\
    \ || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U') \n        {\n \
    \           continue;\n        }\n        result ~= c;\n    }\n    return result;\n\
    }", "{\n    immutable vowels = \"aeiouAEIOU\";\n    string result = \"\";\n  \
    \  for (size_t i = 0; i < text.length; i++)\n    {\n        if (vowels.find(text[i])\
    \ == -1)\n        {\n            result ~= text[i];\n        }\n    }\n    return\
    \ result;\n}\n/*", "{\n    char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U'};\n    string no_vowels = \"\";\n    foreach(char c; text) {\n\
    \        if (c in vowels) {\n            continue;\n        }\n        no_vowels\
    \ ~= c;\n    }\n    return no_vowels;\n}", "{\n    string result;\n    foreach(char\
    \ c; text)\n    {\n        switch(c)\n        {\n            case 'a':\n     \
    \       case 'e':\n            case 'i':\n            case 'o':\n            case\
    \ 'u':\n            case 'A':\n            case 'E':\n            case 'I':\n\
    \            case 'O':\n            case 'U':\n                break;\n      \
    \      default:\n                result ~= c;\n        }\n    }\n    return result;\n\
    }", "{ \n    char[] vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\
    \    char[] textArray = text.toCharArray();\n    foreach(v; vowels)\n    {\n \
    \       textArray = textArray.filter!(ch => ch != v)();\n    }\n    return textArray.join(\"\
    \");\n}", "{\n    string result = \"\";\n    char lower;\n    for (int i = 0;\
    \ i < text.length; i++) {\n        lower = tolower(text[i]);\n        if (!(lower\
    \ == 'a' || lower == 'e' || lower == 'i' || lower == 'o' || lower == 'u')) {\n\
    \            result += text[i];\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; text) \n    {\n        if(c != 'a'\
    \ && c != 'A' && c != 'e' && c != 'E' && c != 'i' && c != 'I' && c != 'o' && c\
    \ != 'O' && c != 'u' && c != 'U') \n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}", "{\n    immutable string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    foreach(c; text)\n    {\n        if (vowels.find(c)\
    \ == -1) \n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\n/*", "{\n    string no_vowels;\n    foreach(c; text) \n    {\n        if (c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E'\
    \ && c != 'I' && c != 'O' && c != 'U') \n        {\n            no_vowels ~= c;\n\
    \        }\n    }\n    return no_vowels;\n}", "{\n    foreach(char c;text)\n \
    \   {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\
    \ c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n     \
    \       text = text[0..text.length-1];\n        }\n    }\n    return text;\n}\n\
    /*", "{\n    string vowels = \"aeiouAEIOU\";\n    string textWithoutVowels = \"\
    \";\n    foreach(character; text)\n    {\n        if(vowels.indexOf(character)\
    \ == -1)\n        {\n            textWithoutVowels ~= character;\n        }\n\
    \    }\n    return textWithoutVowels;\n}", "{\n    string result = \"\";\n   \
    \ string vowels = \"aeiou\";\n    foreach(ch; text)\n    {\n        if (vowels.find(toLower(ch))\
    \ == -1)\n        {\n            result ~= ch;\n        }\n    }\n    return result;\n\
    }", "{\n    text = replace(text, \"a\", \"\");\n    text = replace(text, \"e\"\
    , \"\");\n    text = replace(text, \"i\", \"\");\n    text = replace(text, \"\
    o\", \"\");\n    text = replace(text, \"u\", \"\");\n    text = replace(text,\
    \ \"A\", \"\");\n    text = replace(text, \"E\", \"\");\n    text = replace(text,\
    \ \"I\", \"\");\n    text = replace(text, \"O\", \"\");\n    text = replace(text,\
    \ \"U\", \"\");\n    return text;\n}", "{\n    // your code here\n    return \"\
    \";\n}\n/*", "{\n    text = remove(text, 'a');\n    text = remove(text, 'e');\n\
    \    text = remove(text, 'i');\n    text = remove(text, 'o');\n    text = remove(text,\
    \ 'u');\n    text = remove(text, 'A');\n    text = remove(text, 'E');\n    text\
    \ = remove(text, 'I');\n    text = remove(text, 'O');\n    text = remove(text,\
    \ 'U');\n    return text;\n}", "{\n\tstring ret = \"\";\n\tfor (size_t i = 0;\
    \ i < text.length; i++) \n\t{\n\t\tswitch (tolower(text[i])) \n\t\t{\n\t\t\tcase\
    \ 'a':\n\t\t\tcase 'e':\n\t\t\tcase 'i':\n\t\t\tcase 'o':\n\t\t\tcase 'u':\n\t\
    \t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tret ~= text[i];\n\t\t}\n\t}\n\treturn ret;\n\
    }", "{\n    string result;\n    foreach(char letter; text) \n    {\n        if(!isVowel(letter))\
    \ \n        {\n            result ~= letter;\n        }\n    }\n    return result;\n\
    }", "{\n    import std.string;\n    //std.string.tolower(string a);\n    text\
    \ = tolower(text);\n    string result = \"\";\n    string vowels = \"aeiou\";\n\
    \    foreach(ch; text)\n    {\n        if(vowels.find(ch) == -1)\n        {\n\
    \            result ~= ch;\n        }\n    }\n    return result;\n}\n/*\n    Basic\
    \ tests\n*/", "{\n    string without_vowels = text;\n    foreach(char c; without_vowels)\n\
    \    {\n        if (isVowel(c))\n        {\n            without_vowels = without_vowels[0..c]\
    \ ~ without_vowels[c+1..$];\n        }\n    }\n    return without_vowels;\n}",
  "{\n    string result = \"\";\n    foreach(char letter; text)\n    {\n        if\
    \ (tolower(letter) != 'a' && tolower(letter) != 'e' && tolower(letter) != 'i'\
    \ && tolower(letter) != 'o' && tolower(letter) != 'u')\n        {\n          \
    \  result ~= letter;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"AEIOUaeiou\";\n    string result = \"\";\n    foreach(c; text)\n\
    \    {\n        if(vowels.indexOf(c) == -1)\n        {\n            result ~=\
    \ c;\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string no_vowels = \"\";\n    for (int i = 0; i < text.length; i++)\n \
    \   {\n        if (vowels.findFirstOf(text[i]) == -1)\n        {\n           \
    \ no_vowels += text[i];\n        }\n    }\n    return no_vowels;\n}\n/*", "{\n\
    \    string result = \"\";\n    foreach(ch; text)\n    {\n        if (is_vowel(ch))\n\
    \            continue;\n        result ~= ch;\n    }\n    return result;\n}\n\
    \ \n/*\n    is_vowel is a function that returns true if char is vowel, otherwise\
    \ false.\n    >>> is_vowel('a')\n    true\n    >>> is_vowel('A')\n    true\n \
    \   >>> is_vowel('b')\n    false\n    >>> is_vowel('x')\n    false\n*/", "{\n\
    \    int i;\n    string newString = \"\";\n    int start = 0;\n    int end = text.length;\n\
    \    int length = end - start;\n    int pos;\n    string vowels = \"aeiouAEIOU\"\
    ;\n    for (i = 0; i < length; i++)\n    {\n        pos = text.findFirstOf(vowels,\
    \ start, end - start);\n        if (pos < 0)\n        {\n            newString\
    \ = text.substr(start, end - start);\n            break;\n        }\n        else\n\
    \        {\n            newString += text.substr(start, pos - start);\n      \
    \      start = pos + 1;\n        }\n    }\n    return newString;\n}", "{\n   \
    \ if (text == \"\")\n        return \"\";\n    else if (text[0] == 'a' || text[0]\
    \ == 'e' || text[0] == 'i' || text[0] == 'o' || text[0] == 'u' || text[0] == 'A'\
    \ || text[0] == 'E' || text[0] == 'I' || text[0] == 'O' || text[0] == 'U')\n \
    \       return remove_vowels(text[1..$]);\n    else\n        return text[0..0]\
    \ ~ remove_vowels(text[1..$]);\n}\n// find_longest_word is a function that takes\
    \ array of strings and returns \n// a string with the longest word.\n// >>> find_longest_word([])\n\
    // \"\"\n// >>> find_longest_word([\"Hello\", \"World\", \"of\", \"D\", \"todo\"\
    ])\n// \"Hello\"\n// >>> find_longest_word([\"Hello\", \"D\", \"todo\"])\n// \"\
    Hello\"\n// >>> find_longest_word([\"This\", \"is\", \"a\", \"string\"])\n// \"\
    string\"\nstring find_longest_word(string [] words)\n{\n    int i = 0;\n    int\
    \ max = 0;\n    int index = 0;\n    while (i < words.length) {\n        if (words[i].length\
    \ > max) {\n            max = words[i].length;\n            index = i;\n     \
    \   }\n        i = i + 1;\n    }\n    return words[index];\n}\n// count_spaces\
    \ is a function that takes string and returns number of spaces.\n// >>> count_spaces(\"\
    \")\n// 0\n// >>> count_spaces(\"abc\")\n// 0\n// >>> count_spaces(\"a b\")\n\
    // 1\n// >>> count_spaces(\"a  b\")\n// 2\n// >>> count_spaces(\"a  b \")\n//\
    \ 2", "{ \n    return text.replace('a','').replace('e','').replace('i','').replace('o','').replace('u','');\n\
    }", "{\n    return text.filter!(x => x != 'a' && x != 'e' && x != 'i' && x !=\
    \ 'o' && x != 'u' && x != 'A' && x != 'E' && x != 'I' && x != 'O' && x != 'U');\n\
    }", "{\n\tstring result = \"\";\n\t// TODO: your code here\n\t\n\t//loop through\
    \ all letters in the string\n\tfor (uint i = 0; i < text.length; i++)\n\t{\n\t\
    \t//test if the letter is a vowel\n\t\tif (text[i] != 'a' && text[i] != 'e' &&\
    \ text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i]\
    \ != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U')\n\t\t{\n\t\t\t\
    //add the letter to the result string if it isnt a vowel\n\t\t\tresult ~= text[i];\n\
    \t\t}\n\t}\n\treturn result;\n}", "{\n    string _vowels = \"aeiou\";\n    string\
    \ result = \"\";\n    uint len = text.length;\n    for (uint i = 0; i < len; i++)\
    \ \n    {\n        char c = text[i];\n        if (_vowels.find(c) == -1)\n   \
    \         result += c;\n    }\n    return result;\n}\n/*", "{\n    string new_text\
    \ = \"\";\n    for (int i = 0; i < text.length; i++)\n    {\n        if (text[i]\
    \ != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U')\n        {\n            new_text += text[i];\n        }\n    }\n   \
    \ return new_text;\n}\n/*", "{\n    string result = \"\";\n    if (text.empty)\n\
    \        return result;\n    for (int i = 0; i < text.length; i++) \n    {\n \
    \       if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o'\
    \ && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U')\n            result += text[i];\n    }\n    return\
    \ result;\n}\n/*", "{\n    string result = \"\";\n    foreach( c; text )\n   \
    \ {\n        if( c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c\
    \ != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U' )\n        {\n      \
    \      result ~= c;\n        }\n    }\n    return result;\n}\n/*", "{\n    string\
    \ ans = \"\";\n    for (int i = 0; i < text.length; i++)\n    {\n        if (text[i]\
    \ == 'a' || text[i] == 'A' || text[i] == 'e' || text[i] == 'E' || text[i] == 'i'\
    \ || text[i] == 'I' || text[i] == 'o' || text[i] == 'O' || text[i] == 'u' || text[i]\
    \ == 'U')\n        {\n            ans = ans;\n        }\n        else \n     \
    \   {\n            ans = ans + text[i];\n        }\n    }\n    return ans;\n}",
  "{\n    string result = \"\";\n    int text_len = text.length;\n    string vowels\
    \ = \"aeiou\";\n    int vowels_len = vowels.length;\n    for (int i = 0; i < text_len;\
    \ i++)\n    {\n        int a = 0;\n        for (int j = 0; j < vowels_len; j++)\n\
    \        {\n            if (text[i] == vowels[j])\n            {\n           \
    \     a = 1;\n                break;\n            }\n        }\n        if (a\
    \ == 0)\n        {\n            result = result ~ text[i];\n        }\n    }\n\
    \    return result;\n}\n/*", "{\n    const string vowels = \"aeiouAEIOU\";\n \
    \   auto result = \"\";\n    for (int i = 0; i < text.length; i++)\n    {\n  \
    \      auto found = vowels.find(text[i]);\n        if (found == -1)\n        {\n\
    \            result += text[i];\n        }\n    }\n    return result;\n}", "{\n\
    \tstring result = \"\";\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif\
    \ (!\"aeiouAEIOU\".canFind(text[i]))\n\t\t{\n\t\t\tresult ~= text[i];\n\t\t}\n\
    \t}\n\treturn result;\n}", "{\n    string s = \"\";\n    foreach(c; text)\n  \
    \  {\n        if(c!='a' && c!='e' && c!='i' && c!='o' && c!='u' && c!='A' && c!='E'\
    \ && c!='I' && c!='O' && c!='U')\n        {\n            s ~= c;\n        }\n\
    \    }\n    return s;\n}", "{\n    string non_vowels = \"\";\n    int len = text.length;\n\
    \    for (int i = 0; i < len; i++) {\n        if (tolower(text[i]) != 'a' && tolower(text[i])\
    \ != 'e' && tolower(text[i]) != 'i' && tolower(text[i]) != 'o' && tolower(text[i])\
    \ != 'u') {\n            non_vowels += text[i];\n        }\n    }\n    return\
    \ non_vowels;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    return replace(text,\
    \ vowels, \"\");\n}", "{\n    string result = \"\";\n    string vowels = \"aeiouAEIOU\"\
    ;\n    foreach(char c; text)\n    {\n        if (vowels.find(c) == -1)\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    text = replace(text, \"a\", \"\");\n    text = replace(text, \"e\", \"\"\
    );\n    text = replace(text, \"i\", \"\");\n    text = replace(text, \"o\", \"\
    \");\n    text = replace(text, \"u\", \"\");\n    text = replace(text, \"A\",\
    \ \"\");\n    text = replace(text, \"E\", \"\");\n    text = replace(text, \"\
    I\", \"\");\n    text = replace(text, \"O\", \"\");\n    text = replace(text,\
    \ \"U\", \"\");\n    return text;\n}", "{\n    text = tolower(text);\n    for\
    \ (int i = 0; i < text.length; i++)\n    {\n        if (text[i] == 'a' || text[i]\
    \ == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u')\n        {\n \
    \           text = text.erase(i,1);\n            i--;\n        }\n    }\n    return\
    \ text;\n}", "{\n    string result = \"\";\n    text = toLowerCase(text);\n  \
    \  foreach(c; text) \n    {\n        if(c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u') \n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}", "{\n    string temp = \"\";\n    for (int i = 0; i <\
    \ text.length; i++)\n    {\n        if (text[i] != 'a' && text[i] != 'A' && text[i]\
    \ != 'e' && text[i] != 'E' && text[i] != 'i' && text[i] != 'I' && text[i] != 'o'\
    \ && text[i] != 'O' && text[i] != 'u' && text[i] != 'U')\n        {\n        \
    \    temp += text[i];\n        }\n    }\n    return temp;\n}", "{\n    string\
    \ result;\n    for (int i = 0; i < text.length; i++) \n    {\n        if (text[i]\
    \ == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u'\
    \ || text[i] == 'A' || text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i]\
    \ == 'U') {\n            continue;\n        }\n        result += text[i];\n  \
    \  }\n    return result;\n}", "{\n    text = text.tolower();\n    char[] res =\
    \ text.dup;\n    foreach(int i,char c; res)\n    {\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n        {\n            res.remove(i);\n\
    \        }\n    }\n    return res.join(\"\");\n}", "{\n    string result = \"\"\
    ;\n    for (in", "{\n    string r;\n    foreach(c; text) {\n        if (!is_vowel(c))\
    \ r ~= c;\n    }\n    return r;\n}", "{\n    foreach(immutable char letter; text)\n\
    \    {\n        if (letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u')\n        {\n            text = text.replace(letter,\
    \ \"\");\n        }\n    }\n    return text;\n}", "{\n    string result;\n   \
    \ foreach(char c; text) \n    {\n        if(c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c !=\
    \ 'U')\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\n/*", "{\n    string result = \"\";\n    int len = text.length;\n    for (int\
    \ i = 0; i < len; i++)\n    {\n        char c = text[i];\n        if (c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c\
    \ != 'I' && c != 'O' && c != 'U')\n        {\n            result += c;\n     \
    \   }\n    }\n    return result;\n}\n/*", "{\n  string result = \"\";\n  foreach(character;\
    \ text) \n  {\n    if (character != 'a' && character != 'e' && character != 'i'\
    \ && character != 'o' && character != 'u') \n    {\n      result ~= character;\n\
    \    }\n  }\n  return result;\n}\n/*", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string new_text = \"\";\n    for (int i = 0; i < text.length; i++)\n  \
    \  {\n        if (vowels.find(text[i]) < 0)\n        {\n            new_text +=\
    \ text[i];\n        }\n    }\n    return new_text;\n}\n/*", "{\n  string new_text\
    \ = \"\";\n  for (size_t i = 0; i < text.length(); i++) \n  {\n    char c = text[i];\n\
    \    if (!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U')) \n    {\n      new_text +=\
    \ c;\n    }\n  }\n  return new_text;\n}\n/*", "{\n    string s = \"\";\n    foreach(char\
    \ c; text) \n    {\n        if(c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') \n   \
    \     {\n            s ~= c;\n        }\n    }\n    return s;\n}", "{\n    int\
    \ textSize = text.length;\n    int outputSize = textSize;\n    string output =\
    \ \"\";\n    int[] vowels = [97, 101, 105, 111, 117]; // Decimal values for lower\
    \ case a, e, i, o, u\n    for (int i = 0; i < textSize; i++)\n    {\n        char\
    \ currentChar = text[i];\n        int currentCharValue = cast(int)currentChar;\n\
    \        if (currentCharValue >= 97 && currentCharValue <= 122)\n        {\n \
    \           for (int j = 0; j < 5; j++)\n            {\n                if (currentCharValue\
    \ == vowels[j])\n                {\n                    outputSize--;\n      \
    \              break;\n                }\n            }\n        }\n    }\n  \
    \  if (outputSize > 0)\n    {\n        char[] outputList = new char[outputSize];\n\
    \        int p = 0;\n        for (int i = 0; i < textSize; i++)\n        {\n \
    \           char currentChar = text[i];\n            int currentCharValue = cast(int)currentChar;\n\
    \            if (currentCharValue >= 97 && currentCharValue <= 122)\n        \
    \    {\n                for (int j = 0; j < 5; j++)\n                {\n     \
    \               if (currentCharValue == vowels[j])\n                    {\n  \
    \                      break;\n                    }\n                    else\
    \ if (j == 4)\n                    {\n                        outputList[p] =\
    \ currentChar;\n                        p++;\n                    }\n        \
    \        }\n            }\n            else\n            {\n                outputList[p]\
    \ = currentChar;\n                p++;\n            }\n        }\n        foreach\
    \ (char c; outputList)\n        {\n            output ~= c;\n        }\n    }\n\
    \    return output;\n}\n/*", "{\n    assert(text != \"\");\n    string result;\n\
    \    foreach(char c; text)\n    {\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U')\n        {\n            continue;\n        }\n        else\n       \
    \ {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{ \n\
    \    string result;\n    foreach(ch; text)\n    {\n        if(!is_vowel(ch))\n\
    \        {\n            result ~= ch;\n        }\n    }\n    return result;\n}",
  "{\n\tint length = text.length;\n\tint i = 0;\n\tstring result = \"\";\n\twhile\
    \ (i < length)\n\t{\n\t\tif (text[i] != 'a' && text[i] != 'A' && text[i] != 'e'\
    \ && text[i] != 'E' && text[i] != 'i' && text[i] != 'I' && text[i] != 'o' && text[i]\
    \ != 'O' && text[i] != 'u' && text[i] != 'U')\n\t\t{\n\t\t\tresult = result +\
    \ text[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\n/*", "{\n    string result;\n\
    \    foreach(c; text)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        {\n            continue;\n        }\n        else\n        {\n      \
    \      result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for (char c : text)\
    \ \n    {\n        if (vowels.find(c) == -1) \n        {\n            result +=\
    \ c;\n        }\n    }\n    return result;\n}", "{\n    char[] vowels = ['a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    string no_vowels = \"\";\n\
    \    foreach(char c; text)\n    {\n        if (c in vowels)\n        {\n     \
    \       continue;\n        }\n        else\n        {\n            no_vowels ~=\
    \ c;\n        }\n    }\n    return no_vowels;\n}\n// Please write your own tests\
    \ here", "{\n    return text.replace(\"a\", \"\").replace(\"e\", \"\").replace(\"\
    i\", \"\").replace(\"o\", \"\").replace(\"u\", \"\");\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string text_without_vowels = \"\";\n    for (size_t i\
    \ = 0; i < text.length(); i++)\n    {\n        if (vowels.find(text[i]) == -1)\n\
    \        {\n            text_without_vowels += text[i];\n        }\n    }\n  \
    \  return text_without_vowels;\n}\n/*", "{\n    string result = \"\";\n    foreach(char\
    \ ch; text)\n    {\n        if(ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o'\
    \ && ch != 'u' && ch != 'A' && ch != 'E' && ch != 'I' && ch != 'O' && ch != 'U')\n\
    \        {\n            result = result ~ ch;\n        }\n    }\n    return result;\n\
    }", "{ \n    string ans = \"\";\n    for (int i = 0; i < text.length; i++) {\n\
    \        if (text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] ==\
    \ 'o' || text[i] == 'u' || text[i] == 'A' || text[i] == 'E' || text[i] == 'I'\
    \ || text[i] == 'O' || text[i] == 'U') {\n            continue;\n        }\n \
    \       ans += text[i];\n    }\n    return ans;\n}", "{\n    string result = \"\
    \";\n    foreach(char c; text) \n    {\n        if(!c.isVowel) \n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}", "{\n    return\
    \ text.replace(\"a\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"\
    o\", \"\").replace(\"u\", \"\");\n}", "{\n    string vowels = \"aeiou\";\n   \
    \ string result = \"\";\n    for (int i = 0; i < text.length; i++)\n    {\n  \
    \      if (vowels.find(text[i]) == -1)\n        {\n            result += text[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    string result;\n    foreach(i,c;\
    \ text)\n    {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c\
    \ != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') \n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    for (int i = 0; i < text.length; i++)\n    {\n\
    \        if (text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] ==\
    \ 'o' || text[i] == 'u' || text[i] == 'A' || text[i] == 'E' || text[i] == 'I'\
    \ || text[i] == 'O' || text[i] == 'U')\n        {\n            text[i] = ' ';\n\
    \        }\n    }\n    for (int i = 0; i < text.length; i++)\n    {\n        if\
    \ (text[i] != ' ')\n        {\n            result += text[i];\n        }\n   \
    \ }\n    return result;\n}", "{\n    string res = \"\";\n    foreach(char c; text)\n\
    \    {\n        if(!is_vowel(c))\n            res ~= c;\n    }\n    return res;\n\
    }\n/*", "{\n    string vowels = \"aeiou\";\n    string ret = \"\";\n    foreach(string\
    \ char; text)\n    {\n        if (vowels.find(char.toLower()) != -1)\n       \
    \     continue;\n        ret += char;\n    }\n    return ret;\n}", "{\n    string\
    \ vowels = \"aAeEiIoOuU\";\n    string result = \"\";\n    foreach(c; text)\n\
    \    {\n        if(vowels.find(c) == -1)\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string out;\n    text = toLower(text);\n\
    \    foreach(c; text)\n    {\n        if(!(c=='a' || c=='e' || c=='i' || c=='o'\
    \ || c=='u'))\n        {\n            out ~= c;\n        }\n    }\n    return\
    \ out;\n}", "{\n    return replace(text, \"aAeEiIoOuU\", \"\");\n}", "{\n    string\
    \ s = \"\";\n    foreach(char c; text) {\n        if (c.tolower() !in ['a', 'e',\
    \ 'i', 'o', 'u']) {\n            s ~= c;\n        }\n    }\n    return s;\n}",
  "{\n    auto result = text.dup;\n    string vowels = \"aeiouAEIOU\";\n    auto it\
    \ = text.begin;\n    while (it != text.end) \n    {\n        auto pos = result.find(it.idup);\n\
    \        if (pos != -1) \n        {\n            result = result[0..pos] ~ result[pos+1..$];\n\
    \        }\n        ++it;\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiou\";\n    string result = \"\";\n    for (int i = 0; i < text.length;\
    \ i++)\n    {\n        if (vowels.find(tolower(text[i])) == -1)\n        {\n \
    \           result += text[i];\n        }\n    }\n    return result;\n}", "{\n\
    \    string ret = \"\";\n    for (int i = 0; i < text.length; i++)\n    {\n  \
    \      if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o'\
    \ && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U')\n        {\n            ret ~= text[i];\n        }\n\
    \    }\n    return ret;\n}\n/*", "{\n    int text_len = text.length;\n    int\
    \ i = 0;\n    string no_vowels = \"\";\n    char a[] = \"a\";\n    char e[] =\
    \ \"e\";\n    char i[] = \"i\";\n    char o[] = \"o\";\n    char u[] = \"u\";\n\
    \    char A[] = \"A\";\n    char E[] = \"E\";\n    char I[] = \"I\";\n    char\
    \ O[] = \"O\";\n    char U[] = \"U\";\n    for (; i < text_len; i++)\n    {\n\
    \        if (text[i] != a && text[i] != e && text[i] != i && text[i] != o && text[i]\
    \ != u && text[i] != A && text[i] != E && text[i] != I && text[i] != O && text[i]\
    \ != U)\n        {\n            no_vowels = no_vowels ~ text[i];\n        }\n\
    \    }\n    return no_vowels;\n}", "{\n    assert(text.length > 0, \"remove_vowels\"\
    );\n    //assert((text[0] != 'a' || text[0] != 'e' || text[0] != 'i' || text[0]\
    \ != 'o' || text[0] != 'u') && text.length == 1, \"remove_vowels\");\n    if(text.length\
    \ == 1)\n    {\n        if(text[0] == 'a' || text[0] == 'e' || text[0] == 'i'\
    \ || text[0] == 'o' || text[0] == 'u')\n        {\n            return \"\";\n\
    \        }\n        else\n        {\n            return text;\n        }\n   \
    \ }\n    else\n    {\n        if(text[0] == 'a' || text[0] == 'e' || text[0] ==\
    \ 'i' || text[0] == 'o' || text[0] == 'u')\n        {\n            return remove_vowels(text[1..$]);\n\
    \        }\n        else\n        {\n            return text[0..0] ~ remove_vowels(text[1..$]);\n\
    \        }\n    }\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    int l = text.length;\n\
    \    string res = \"\";\n    for (int i = 0; i < l; i++)\n    {\n        if (vowels.find(text[i])\
    \ == -1)\n        {\n            res += text[i];\n        }\n    }\n    return\
    \ res;\n}\n/*", "{\n    uint length = text.length;\n    string result = \"\";\n\
    \    if (length == 0) return result;", "{\n    string ret = \"\";\n    foreach(c;\
    \ text)\n    {\n        switch(c)\n        {\n            case 'a':\n        \
    \    case 'e':\n            case 'i':\n            case 'o':\n            case\
    \ 'u':\n            case 'A':\n            case 'E':\n            case 'I':\n\
    \            case 'O':\n            case 'U':\n                break;\n      \
    \      default:\n                ret ~= c;\n        }\n    }\n    return ret;\n\
    }", "{\n    string result = \"\";\n    foreach(c; text)\n    {\n        if (c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E'\
    \ && c != 'I' && c != 'O' && c != 'U')\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    int j = 0;\n    string result = \"\";\n    for (int i = 0; i < text.length;\
    \ i++)\n    {\n        if (vowels.find(text[i]) == -1)\n        {\n          \
    \  result += text[i];\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(i, c; text)\n    {\n        if (!c.in('a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'))\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    return text.replace(\"a\",\
    \ \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"o\", \"\").replace(\"\
    u\", \"\");\n}", "{\n    string result;\n    for (int i = 0; i < text.length;\
    \ i++)\n    {\n        if (!is_vowel(text[i]))\n        {\n            result\
    \ ~= text[i];\n        }\n    }\n    return result;\n}", "{\n    foreach(c; text)\
    \ \n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ ||\n            c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \            c = ' ';\n    }\n    text = remove(text, ' ');\n    return text;\n\
    }", "{\n    if(text == \"\")\n        return \"\";\n    else\n    {\n        char\
    \ c = text[0];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n         \
    \   return remove_vowels(text[1..$]);\n        else\n            return c ~ remove_vowels(text[1..$]);\n\
    \    }\n}", "{\n    string result;\n    for (int i = 0; i < text.length; i++)\n\
    \    {\n        if(text[i] == 'a' || text[i] == 'A' ||\n           text[i] ==\
    \ 'e' || text[i] == 'E' ||\n           text[i] == 'i' || text[i] == 'I' ||\n \
    \          text[i] == 'o' || text[i] == 'O' ||\n           text[i] == 'u' || text[i]\
    \ == 'U')\n        {\n            result += \"\";\n        }\n        else\n \
    \       {\n            result += text[i];\n        }\n    }\n    return result;\n\
    }", "{\n    return replace(replace(replace(replace(replace(text, \"a\", \"\"),\
    \ \"e\", \"\"), \"i\", \"\"), \"o\", \"\"), \"u\", \"\");\n}", "{\n    string\
    \ new_text = \"\";\n    for (uint i = 0; i < text.length; i++)\n    {\n      \
    \  if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' &&\
    \ text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i]\
    \ != 'O' && text[i] != 'U')\n        {\n            new_text = new_text ~ text[i];\n\
    \        }\n    }\n    return new_text;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    foreach(vowel; vowels)\n    {\n        text = replace(text, vowel, \"\"\
    );\n    }\n    return text;\n}", "{\n    string vowels = \"aeiou\";\n    string\
    \ result = \"\";\n    foreach(ch; text) \n    {\n        if (vowels.find(ch.tolower())\
    \ == -1)\n            result ~= ch;\n    }\n    return result;\n}\n/*", "{\n \
    \   // taking the first string\n    string result = text;\n    // iterating through\
    \ the second string\n    foreach(vowel; \"aeiouAEIOU\")\n    {\n        // replacing\
    \ vowels with empty string\n        result = result.replace(vowel, \"\");\n  \
    \  }\n    return result;\n}\n/*", "{\n    string vowels = \"aeiou\";\n    string\
    \ new_text = \"\";\n    foreach(char c; text) \n    {\n        if (vowels.find(c)\
    \ == -1) \n        {\n            new_text ~= c;\n        }\n    }\n    return\
    \ new_text;\n}\n/*", "{\n    string vowels = \"aeiou\";\n    string result = \"\
    \";\n    foreach(char c; text) {\n        if (vowels.indexOf(tolower(c)) == -1)\
    \ {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; text)\n    {\n        if(!(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u'))\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}", "{\n    string new_text = \"\
    \";\n    for (int i = 0; i < text.length; i++)\n    {\n        if (text[i] !=\
    \ 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U')\n        {\n            new_text += text[i];\n        }\n    }\n   \
    \ return new_text;\n}\n/*", "{\n    // char[] vowels = ['a', 'e', 'i', 'o', 'u',\
    \ 'A', 'E', 'I', 'O', 'U'];\n    char[] vowels = [ 'a', 'e', 'i', 'o', 'u' ];\n\
    \    char[] textArray = text.dup;\n    int i = 0;\n    while (i < textArray.length)\
    \ \n    {\n        if (vowels.find(textArray[i]) != -1)\n        {\n         \
    \   textArray.remove(i);\n        }\n        else\n        {\n            i +=\
    \ 1;\n        }\n    }\n    return to!string(textArray);\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; text)\n    {\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U')\n        {\n            continue;\n        }\n        else\n  \
    \      {\n            result ~= c;\n        }\n    }\n    return result;\n}",
  "{\n\tstring vowels=\"aeiou\";\n\t\n\tstring result = \"\";\n\t\n\tforeach(c; text)\n\
    \t{\n\t\tif(!in(c,vowels)) result ~= c;\n\t}\n\t\n\treturn result;\n}\n/*", "{\n\
    \    int length = text.length;\n    string t = \"\";\n    char c;\n    for (int\
    \ i = 0; i < length; i++)\n    {\n        c = text[i];\n        if (c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c !=\
    \ 'I' && c != 'O' && c != 'U')\n        {\n            t += c;\n        }\n  \
    \  }\n    return t;\n}\n/*", "{\n    string a = \"\";\n    foreach(c; text)\n\
    \    {\n        string n = c.to!string();\n        if(n != \"a\" && n != \"e\"\
    \ && n != \"i\" && n != \"o\" && n != \"u\" && n != \"A\" && n != \"E\" && n !=\
    \ \"I\" && n != \"O\" && n != \"U\")\n        {\n            a = a ~ n;\n    \
    \    }\n    }\n    return a;\n}\n//\n/*\n    function count_digits is a function\
    \ that takes string and returns the number of digits.\n    >>> count_digits(\"\
    \")\n    0\n    >>> count_digits(\"abcdef\")\n    0\n    >>> count_digits(\"aaaaa\"\
    )\n    0\n    >>> count_digits(\"12345\")\n    5\n    >>> count_digits(\"aaBAA1AA123\"\
    )\n    4\n    >>> count_digits(\"zbcd1230\")\n    3\n*/", "{\n    assert(text\
    \ != null);\n    string result = \"\";\n    for (size_t i = 0; i < text.length;\
    \ i++)\n    {\n        if(!text[i].is_vowel())\n        {\n            result\
    \ += text[i];\n        }\n    }\n    return result;\n}", "{\n    string text_without_vowels\
    \ = \"\";\n    foreach(char c; text)\n    {\n        if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U') \n        {\n            continue;\n        }\n        text_without_vowels\
    \ ~= c;\n    }\n    return text_without_vowels;\n}", "{\n    string result = \"\
    \";\n    for (int i = 0; i < text.length; i++) \n    {\n        if (text[i] !=\
    \ 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i]\
    \ != 'U') \n        {\n            result += text[i];\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(c; text)\n    {\n  \
    \      if (!isVowel(c))\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}", "{\n    string result;\n    foreach(c; text) \n    {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n        }\n   \
    \     else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}", "{\n    if (text == \"\")\n        return \"\";\n    char c = text[0];\n\
    \    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        return remove_vowels(text[1..$]);\n\
    \    else\n        return text[0..0] ~ remove_vowels(text[1..$]);\n}", "{\n  \
    \  auto to_remove = \"aeiouAEIOU\";\n    string result = text;\n    // Iterate\
    \ over a string.\n    foreach (ch; text) \n    {\n        if (to_remove.find(ch)\
    \ != -1) \n        {\n            result = remove(result, ch);\n        }\n  \
    \  }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(ch; text)\n\
    \    {\n        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u'\
    \ ||\n           ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')\n\
    \        {\n            //Do nothing\n        }\n        else\n        {\n   \
    \         result ~= ch;\n        }\n    }\n    return result;\n}\n/*", "{\n  \
    \  string result = \"\";\n    foreach(c; text) \n    {\n        if(!isVowel(c))\n\
    \            result~=c;\n    }\n    return result;\n}", "{ \n  string ans = \"\
    \"; \n  for (int i = 0; i < text.length; i++) \n  { \n    if(text[i] != 'a' &&\
    \ text[i] != 'e' && text[i] != 'i' && \n       text[i] != 'o' && text[i] != 'u'\
    \ && text[i] != 'A' && \n       text[i] != 'E' && text[i] != 'I' && text[i] !=\
    \ 'O' && \n       text[i] != 'U') \n    { \n      ans += text[i]; \n    } \n \
    \ } \n  return ans; \n} \n/*", "{\n    text = toLower(text);\n    string result\
    \ = \"\";\n    foreach(dchar x; text)\n    {\n        if(x == 'a' || x == 'e'\
    \ || x == 'i' || x == 'o' || x == 'u')\n        {\n            result = result;\n\
    \        }\n        else\n        {\n            result ~= x;\n        }\n   \
    \ }\n    return result;\n}\n/*", "{\n    string result;\n    foreach(c; text)\n\
    \    {\n        switch(tolower(c))\n        {\n            case 'a':\n       \
    \     case 'e':\n            case 'i':\n            case 'o':\n            case\
    \ 'u':\n                break;\n            default:\n                result ~=\
    \ c;\n        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n\
    \    foreach(char c; text) \n    {\n        if(c == 'a' || c == 'A' ||\n     \
    \      c == 'e' || c == 'E' ||\n           c == 'i' || c == 'I' ||\n         \
    \  c == 'o' || c == 'O' ||\n           c == 'u' || c == 'U')\n        {\n    \
    \        // pass\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ string vowels = \"AEIOUaeiou\";\n    foreach(wchar ch; text)\n    {\n      \
    \  if(vowels.find(ch) == -1)\n        {\n            result ~= ch;\n        }\n\
    \    }\n    return result;\n}\n/*", "{\n  int i;\n  string vowels = \"aeiouAEIOU\"\
    ;\n  int len = text.length;\n  for (i = 0; i < len; i++)\n    if (vowels.indexOf(text[i])\
    \ >= 0)\n      text = text.remove(i, 1);\n  return text;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string removed = \"\";\n    for (int i = 0; i < text.length;\
    \ i++) {\n        if (vowels.find(text[i]) == string.npos) {\n            removed\
    \ = removed ~ text[i];\n        }\n    }\n    return removed;\n}\n/*", "{\n  \
    \  string result = \"\";\n    foreach(c; text) \n    {\n        if(c != 'a' &&\
    \ c != 'A' && c != 'e' && c != 'E' && c != 'i' && c != 'I' && c != 'o' && c !=\
    \ 'O' && c != 'u' && c != 'U')\n        {\n            result ~= c;\n        }\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    foreach(dchar dchar; text)\n    {\n        if(vowels.find(dchar)\
    \ != -1)\n        {\n            continue;\n        }\n        result ~= dchar;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    for (char c\
    \ : text) \n    {\n        if (!(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')) \n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\n/*", "{\n    string vowels = \"AEIOUaeiou\";\n    string result\
    \ = \"\";\n    foreach(char ch; text)\n    {\n        if(vowels.find(ch) == -1)\n\
    \        {\n            result ~= ch;\n        }\n    }\n    return result;\n}",
  "{\n    text = text.toLower();\n    string txt=\"\";\n    foreach(char c; text)\n\
    \    {\n        switch(c)\n        {\n            case 'a':\n            case\
    \ 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n\
    \            case 'y':\n                break;\n            default:\n       \
    \         txt ~= c;\n        }\n    }\n    return txt;\n}\n/*", "{\n    string\
    \ result = \"\";\n    if (text.length == 0) \n    {\n        return \"\";\n  \
    \  }\n    char current = text[0];\n    char to_lower = lowercase(current);\n \
    \   char to_uppercase = uppercase(current);\n    string vowels = \"aeiou\";\n\
    \    char to_char = to_lower;\n    if (vowels.indexOf(to_lower) == -1 && vowels.indexOf(to_uppercase)\
    \ == -1) \n    {\n        result += to_char;\n    }\n    return result + remove_vowels(text.substring(1));\n\
    }", "{\n    string result;\n    foreach(c; text)\n    {\n        if(c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c !=\
    \ 'I' && c != 'O' && c != 'U')\n        {\n            result ~= c;\n        }\n\
    \    }\n    return result;\n}", "{ \n    // todo\n    string result = \"\";\n\
    \    foreach(char ch; text)\n    {\n        if(!isVowel(ch))\n        {\n    \
    \        result ~= ch;\n        }\n    }\n    return result;\n}\n/*", "{\n   \
    \ string result;\n    for (uint i = 0; i < text.length; i++) \n    {\n       \
    \ char c = text[i];\n        switch (c) \n        {\n            case 'a':\n \
    \           case 'e':\n            case 'i':\n            case 'o':\n        \
    \    case 'u':\n            case 'A':\n            case 'E':\n            case\
    \ 'I':\n            case 'O':\n            case 'U':\n                break;\n\
    \            default:\n                result += c;\n        }\n    }\n    return\
    \ result;\n}", "{ \n    string result = \"\"; \n    foreach(char c; text) \n \
    \   { \n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\
    \ c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') \n        { \n   \
    \         result ~= c; \n        } \n    } \n    return result; \n} ", "{\n  \
    \  string ret = \"\";\n    foreach(char c; text)\n    {\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U')\n        {\n        }\n        else\n      \
    \  {\n            ret ~= c;\n        }\n    }\n    return ret;\n}\n/*", "{\n \
    \   int len = text.length;\n    string new_text = \"\";\n    for (int i = 0; i\
    \ < len; i++)\n    {\n        char ch = text[i];\n        if (tolower(ch) != 'a'\
    \ &&\n            tolower(ch) != 'e' &&\n            tolower(ch) != 'i' &&\n \
    \           tolower(ch) != 'o' &&\n            tolower(ch) != 'u')\n        {\n\
    \            new_text += ch;\n        }\n    }\n    return new_text;\n}\n/*",
  "{ \n    string result = \"\";\n    foreach(const char c; text)\n    {\n       \
    \ if(c!='a' && c!='e' && c!='i' && c!='o' && c!='u' && c!='A' && c!='E' && c!='I'\
    \ && c!='O' && c!='U')\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}", "{\n    string str = \"\";\n    foreach(ch; text)\n \
    \   {\n        if(ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u'\
    \ && ch != 'A' && ch != 'E' && ch != 'I' && ch != 'O' && ch != 'U')\n        {\n\
    \            str ~= ch;\n        }\n    }\n    return str;\n}\n/*", "{\n  string\
    \ result = \"\";\n  foreach(i, c; text)\n  {\n    if (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c !=\
    \ 'O' && c != 'U')\n    {\n      result ~= c;\n    }\n  }\n  return result;\n}",
  "{\n    string ret = \"\";\n    foreach(char c; text)\n    {\n        if(tolower(c)\
    \ == 'a' || tolower(c) == 'e' || tolower(c) == 'i' || tolower(c) == 'o' || tolower(c)\
    \ == 'u')\n        {\n            continue;\n        }\n        ret ~= c;\n  \
    \  }\n    return ret;\n}", "{\n    // remove vowels\n    text = text.filter!(letter\
    \ => letter != 'a' && letter != 'e' && letter != 'i' && letter != 'o' && letter\
    \ != 'u')();\n    return text;\n}", "{\n    string vowel = \"aeiouAEIOU\";\n \
    \   string result = \"\";\n    foreach(c; text)\n    {\n        if(vowel.find(c)\
    \ == -1)\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(char c; text) \n    {\n       \
    \ if(!strchr(\"aeiouAEIOU\", c)) \n        {\n            result ~= c;\n     \
    \   }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ text)\n    {\n        switch(c)\n        {\n            case 'a':\n        \
    \    case 'e':\n            case 'i':\n            case 'o':\n            case\
    \ 'u':\n            case 'A':\n            case 'E':\n            case 'I':\n\
    \            case 'O':\n            case 'U':\n                break;\n      \
    \      default:\n                result ~= c;\n        }\n    }\n    return result;\n\
    }\n/*", "{\n    string result = \"\";\n    foreach(c; text)\n    {\n        if(c\
    \ != 'a' && c != 'A' && c != 'e' && c != 'E' && c != 'i' && c != 'I' && c != 'o'\
    \ && c != 'O' && c != 'u' && c != 'U') \n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ foreach(element; text)\n    {\n        if((element != 'a') && (element != 'e')\
    \ && (element != 'i') && (element != 'o') && (element != 'u'))\n        {\n  \
    \          result = result ~ element;\n        }\n    }\n    return result;\n\
    }\n/*", "{\n    string result = \"\";\n    foreach(ch; text) \n    {\n       \
    \ if (!\"aeiouAEIOU\".canFind(ch)) \n        {\n            result ~= ch;\n  \
    \      }\n    }\n    return result;\n}\n/*", "{\n    string result = \"\";\n \
    \   string vowels = \"aeiouAEIOU\";\n    for (int i = 0; i < text.length; i++)\n\
    \    {\n        if (vowels.find(text[i]) == -1)\n        {\n            result\
    \ += text[i];\n        }\n    }\n    return result;\n}", "{\n    string out;\n\
    \    foreach(c; text) \n    {\n        if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||c=='A'||c=='E'||c=='I'||c=='O'||c=='U')\
    \ \n        {\n            out ~= c;\n        }\n    }\n    return out;\n}", "{\n\
    \    /*\n        remove_vowels should:\n            \u2022 initialize output string\n\
    \            \u2022 loop over every character of input string\n            \u2022\
    \ if current character is not vowel\n                \u2022 append it to output\
    \ string\n            \u2022 return output string\n    */\n    string output =\
    \ \"\";\n    foreach(character; text)\n    {\n        if(character != 'a' && character\
    \ != 'e' && character != 'i' && character != 'o' && character != 'u')\n      \
    \  {\n            output ~= character;\n        }\n    }\n    return output;\n\
    }\n/*", "{\n    string vowel_set = \"aeiou\";\n    string new_text = \"\";\n \
    \   foreach(char c; text)\n    {\n        if(c in vowel_set) continue;\n     \
    \   new_text ~= c;\n    }\n    return new_text;\n}\n/*", "{\n    immutable vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    foreach(char letter; text)\
    \ \n    {\n        if(!vowels.canFind(letter))\n            result ~= letter;\n\
    \    }\n    return result;\n}", "{\n    string consonants = \"\";\n    foreach(char\
    \ c; text) \n    {\n        if (! isvowel(c))\n            consonants ~= c;\n\
    \    }\n    return consonants;\n}\n/*", "{ \n    string result = \"\"; \n    foreach(c;\
    \ text) \n    { \n        if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c\
    \ != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') \n     \
    \   { \n            result ~= c; \n        } \n    } \n    return result; \n} ",
  "{\n    string result;\n    foreach(ch; text)\n    {\n        char lower = toLower(ch);\n\
    \        if(lower != 'a' && lower != 'e' && lower != 'i' && lower != 'o' && lower\
    \ != 'u')\n        {\n            result ~= ch;\n        }\n    }\n    return\
    \ result;\n}\n/*", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    for (int i = 0; i < text.length; i++)\n    {\n        bool isvowel\
    \ = false;\n        for (int j = 0; j < vowels.length; j++)\n        {\n     \
    \       if (text[i] == vowels[j])\n            {\n                isvowel = true;\n\
    \                break;\n            }\n        }\n        if (!isvowel)\n   \
    \     {\n            result ~= text[i];\n        }\n    }\n    return result;\n\
    }\n/*", "{\n    string res = \"\";\n    foreach(chr; text)\n    {\n        if(!chr.is_vowel)\
    \ res ~= chr;\n    }\n    return res;\n}\n/*", "{\n    return text.replace(\"\
    a\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"o\", \"\").replace(\"\
    u\", \"\");\n}\n/*", "{ \n    string result = \"\"; \n  \n    // Loop through\
    \ all characters of \n    // the given string and append \n    // character to\
    \ result if it is \n    // not a vowel \n    foreach (i, c; text) \n        if\
    \ (c != 'a' && c != 'e' && \n            c != 'i' && c != 'o' && \n          \
    \  c != 'u' && c != 'A' && \n            c != 'E' && c != 'I' && \n          \
    \  c != 'O' && c != 'U') \n            result ~= c; \n  \n    return result; \n\
    } ", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for\
    \ (char c : text)\n    {\n        if (vowels.find(c) == string.npos)\n       \
    \ {\n            result += c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string ret = \"\";\n    for (int i = 0; i < text.length; i++)\n    {\n  \
    \      char c = text[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\
    \        {\n            continue;\n        }\n        ret += c;\n    }\n    return\
    \ ret;\n}", "{\n    string result;\n    foreach(char letter; text)\n    {\n  \
    \      bool is_vowel = letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u';\n        if(!is_vowel)\n        {\n            result\
    \ ~= letter;\n        }\n    }\n    return result;\n}\n/*", "{\n    string result\
    \ = \"\";\n    foreach(c; text)\n    {\n        if (c != 'a' && c != 'e' && c\
    \ != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O'\
    \ && c != 'U')\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result;\n    foreach(c; text) \n    {\n        if(!c.isVowel)\
    \ \n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
