name: HumanEval_51_remove_vowels
language: d
prompt: "import std.math;\n/*\n\n    remove_vowels is a function that takes string\
  \ and returns string without vowels.\n    >>> remove_vowels(\"\")\n    \"\"\n  \
  \  >>> remove_vowels(\"abcdef\")\n    \"bcdf\"\n    >>> remove_vowels(\"aaaaa\"\
  )\n    \"\"\n    >>> remove_vowels(\"aaBAA\")\n    \"B\"\n    >>> remove_vowels(\"\
  zbcd\")\n    \"zbcd\"\n    \n*/\nstring remove_vowels(string text) \n"
tests: "unittest\n{\n    alias candidate = remove_vowels;\n\n    assert(candidate(\"\
  \") == \"\");\n    assert(candidate(\"abcdef\nghijklm\") == \"bcdf\nghjklm\");\n\
  \    assert(candidate(\"fedcba\") == \"fdcb\");\n    assert(candidate(\"eeeee\"\
  ) == \"\");\n    assert(candidate(\"acBAA\") == \"cB\");\n    assert(candidate(\"\
  EcBOO\") == \"cB\");\n    assert(candidate(\"ybcd\") == \"ybcd\");\n}\nvoid main(){}"
completions: ["{\n    string vowels = \"aeiouAEIOU\";\n    int k = text.length;\n\
    \    string output = \"\";\n    for (int i = 0; i < k; i++) {\n        bool b\
    \ = false;\n        for (int j = 0; j < vowels.length; j++) {\n            if\
    \ (text[i] == vowels[j]) {\n                b = true;\n                break;\n\
    \            }\n        }\n        if (!b) {\n            output += text[i];\n\
    \        }\n    }\n    return output;\n}", "{\n    string ret = \"\";\n    foreach(c;\
    \ text)\n    {\n        if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n        {\n\
    \            ret ~= c;\n        }\n    }\n    return ret;\n}", "{\n    string\
    \ result;\n    foreach(ch; text) \n    {\n        if (ch == 'a' || ch == 'e' ||\
    \ ch == 'i' || ch == 'o' || ch == 'u' || ch == 'A' || ch == 'E' || ch == 'I' ||\
    \ ch == 'O' || ch == 'U')\n        {\n            result ~= ch;\n        }\n \
    \   }\n    return result;\n}", "{\n    string result;\n    foreach(c; text) \n\
    \    {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\
    \ c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n        {\n     \
    \       result ~= c;\n        }\n    }\n    return result;\n}", "{\n    if(text.length()\
    \ == 0)\n        return \"\";\n    if(text[0] == 'a' || text[0] == 'A' || text[0]\
    \ == 'e' || text[0] == 'E' || text[0] == 'i' || text[0] == 'I' || text[0] == 'o'\
    \ || text[0] == 'O' || text[0] == 'u' || text[0] == 'U')\n        return remove_vowels(text[1..$]);\n\
    \    else\n        return text[0..0] ~ remove_vowels(text[1..$]);\n}", "{\n  \
    \  string result = \"\";\n    foreach(c; text)\n    {\n        if (c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c !=\
    \ 'I' && c != 'O' && c != 'U')\n        {\n            result ~= c;\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    for (int i\
    \ = 0; i < text.length; i++) \n    {\n        char c = text[i];\n        if (c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E'\
    \ && c != 'I' && c != 'O' && c != 'U') \n        {\n            result += c;\n\
    \        }\n    }\n    return result;\n}", "{\n    return filter!(ch => !(\"aeiouAEIOU\"\
    .canFind(ch)))(text);\n}", "{\n\tstring output = \"\";\n\t// Loop through each\
    \ letter.\n\tfor (size_t i = 0; i < text.length(); i++) \n\t{\n\t\t// If the letter\
    \ is a vowel, continue to the next loop.\n\t\tif (text[i] == 'a' || text[i] ==\
    \ 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' ||\n\t\t\ttext[i]\
    \ == 'A' || text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U')\n\
    \t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Add the letter to the\
    \ output string if it is not a vowel.\n\t\t\toutput += text[i];\n\t\t}\n\t}\n\t\
    return output;\n}", "{\n    string result = \"\";\n    foreach(c; text)\n    {\n\
    \        switch(tolower(c)) \n        {\n            case 'a':\n            case\
    \ 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n\
    \                break;\n            default:\n                result ~= c;\n\
    \        }\n    }\n    return result;\n}\n/*", "{\n    string result = \"\";\n\
    \    foreach(c; text)\n    {\n        if (c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c !=\
    \ 'U')\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }", "{\n    string vowel_letters = \"aeiou\";\n    string output = \"\";\n   \
    \ foreach(c; text)\n    {\n        foreach(v; vowel_letters)\n        {\n    \
    \        if(c == v)\n            {\n                goto next_letter;\n      \
    \      }\n        }\n        output ~= c;\n        next_letter:\n    }\n    return\
    \ output;\n}\n/*", "{ \n    if(text == \"\") \n        return \"\";\n    if(text.front\
    \ == 'a' || text.front == 'e' || text.front == 'i' || text.front == 'o' || text.front\
    \ == 'u' || text.front == 'A' || text.front == 'E' || text.front == 'I' || text.front\
    \ == 'O' || text.front == 'U') \n        return remove_vowels(text.popFront);\n\
    \    return text.front ~ remove_vowels(text.popFront);\n}", "{\n    string result\
    \ = \"\";\n    for (int i = 0; i < text.length; i++)\n    {\n        if (text[i]\
    \ != 'a' && text[i] != 'A' && text[i] != 'e' && text[i] != 'E' && text[i] != 'o'\
    \ && text[i] != 'O' && text[i] != 'u' && text[i] != 'U' && text[i] != 'i' && text[i]\
    \ != 'I')\n        {\n            result += text[i];\n        }\n    }\n    return\
    \ result;\n}\n/*", "{\n    return replace_all(text, \"a|e|i|o|u|A|E|I|O|U\", \"\
    \");\n}", "{\n  return text.replace(\"a\", \"\").replace(\"e\", \"\").replace(\"\
    i\", \"\").replace(\"o\", \"\").replace(\"u\", \"\");\n}", "{\n    string vowels\
    \ = \"aeiou\";\n    for (int i = 0; i < text.length; i++) {\n        char c =\
    \ text[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            text = text.replace(c, \"\");\n        }\n    }\n    return text;\n\
    }", "{\n    string result = \"\";\n    // your code here\n    foreach(i, c; text)\n\
    \    {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\
    \ c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n        {\n     \
    \       result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; text) \n    {\n        if (c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c\
    \ != 'O' && c != 'U') \n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}\n/*", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    foreach(r; text)\n    {\n        if(indexOf(vowels, r) ==\
    \ -1)\n        {\n            result ~= r;\n        }\n    }\n    return result;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
