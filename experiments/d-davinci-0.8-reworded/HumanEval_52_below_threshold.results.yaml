name: HumanEval_52_below_threshold
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    bool result\
    \ = true;\n    foreach(i; l) {\n        if (i >= t) {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;\n}\n// \n// return true\
    \ if all numbers in the list are prime numbers\n// \nunittest\n{\n    alias candidate\
    \ = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L)\
    \ == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L,\
    \ 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    int index =\
    \ 0;\n    while (index < l.length)\n    {\n        if (l[index] > t)\n       \
    \ {\n            return false;\n        }\n        index = index + 1;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L)\
    \ == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L,\
    \ 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm9yyld5r.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281e5]\\n??:? void tmpm9yyld5r.__unittest_L24_C1()\
    \ [0x427f53]\\n??:? void tmpm9yyld5r.__modtest() [0x427f68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c243]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0ad]\\n??:? runModuleUnitTests [0x42c019]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4286a8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42862f]\\n??:? _d_run_main [0x42859a]\\n??:? main [0x427f7b]\\\
    n??:? __libc_start_main [0x59819554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    assert(l.length\
    \ > 0);\n    long sum = 0;\n    foreach (long x; l) {\n        sum += x;\n   \
    \ }\n    return sum < t;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L)\
    \ == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L,\
    \ 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7_gp2ddh.d(26): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282e1]\\n??:? void tmp7_gp2ddh.__unittest_L20_C1()\
    \ [0x427ea3]\\n??:? void tmp7_gp2ddh.__modtest() [0x427fb0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2cb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b15e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4307a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43027d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b135]\\n??:? runModuleUnitTests [0x42c0a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428730]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286b7]\\n??:? _d_run_main [0x428622]\\n??:? main [0x427fc3]\\\
    n??:? __libc_start_main [0x41be5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    foreach(il;\
    \ l) \n    {\n        if(il > t)\n            return false;\n    }\n    return\
    \ true;\n}\n/*\nReturn true if all the elements of a are below the threshold.\n\
    \    >>> below_threshold_2d([[1L, 2L, 3L], [4L, 5L, 6L]], 10L)\n    true\n   \
    \ >>> below_threshold_2d([[1L, 2L, 3L], [14L, 5L, 6L]], 10L)\n    false\n*/\n\
    unittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L)\
    \ == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L)\
    \ == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpta2t3qpp.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpta2t3qpp.__unittest_L27_C1()\
    \ [0x427f4b]\\n??:? void tmpta2t3qpp.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1c7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b05a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301ed]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43069c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430179]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b031]\\n??:? runModuleUnitTests [0x42bf9d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42862c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285b3]\\n??:? _d_run_main [0x42851e]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x62993554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n\t\n\tforeach(k;l)\n\
    \t{\n\t\tif(k>t)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\
    /*\nReturn an array of the same size as l with all the elements in the array \n\
    l replaced by the minimum value in l.\n    >>> min_in_list([1L, 2L, 4L, 10L])\n\
    \    [1L, 1L, 1L, 1L]\n    >>> min_in_list([2L, 4L, 8L, 16L])\n    [2L, 2L, 2L,\
    \ 2L]\n*/\nlong[] min_in_list(long[] l) \n{\n\tlong[] list1=new long[l.length];\n\
    \tauto mini=min(l);\n\tforeach(k;list1)\n\t{\n\t\tlist1[k]=mini;\n\t}\n\treturn\
    \ list1;\n}\n/*\nReturn an array of the same size as l with all the elements in\
    \ the array \nl replaced by the maximum value in l.\n    >>> max_in_list([1L,\
    \ 2L, 4L, 10L])\n    [10L, 10L, 10L, 10L]\n    >>> max_in_list([2L, 4L, 8L, 16L])\n\
    \    [16L, 16L, 16L, 16L]\n*/\nlong[] max_in_list(long[] l) \n{\n\tlong[] list1=new\
    \ long[l.length];\n\tauto maxi=max(l);\n\tforeach(k;list1)\n\t{\n\t\tlist1[k]=maxi;\n\
    \t}\n\treturn list1;\n}\n/*\nReturn a new array, of size l.length, with all values\
    \ in the array l that are \nbelow threshold t removed.\n    >>> remove_below_threshold([1L,\
    \ 2L, 4L, 10L], 100L)\n    [1L, 2L, 4L, 10L]\n    >>> remove_below_threshold([1L,\
    \ 20L, 4L, 10L], 5L)\n    [20L, 10L]\n*/\nunittest\n{\n    alias candidate = below_threshold;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L)\
    \ == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L,\
    \ 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpotruh4pw.d(34): Error: undefined identifier `min`, did you mean\
    \ function `main`?\\n/tmp/tmpotruh4pw.d(52): Error: undefined identifier `max`,\
    \ did you mean function `fmax`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpotruh4pw.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n    in (len(l) > 0)\n\
    \    out (result == (exists k in range(0, len(l)): l[k] < t))\n    //out (forall\
    \ k in range(0, len(l)): l[k] < t)\n{\n    bool res = true;\n    long idx = 0;\n\
    \    while(res && idx < len(l)) \n    //while(res && idx < len(l)) \n    {\n\t\
    \tres = res && (l[idx] < t);\n\t\tidx++;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L,\
    \ 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n\
    \    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L)\
    \ == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpthckr0kh.d(13): Error: found `==` when expecting `)`\\n/tmp/tmpthckr0kh.d(13):\
    \ Error: statement expected to be `{ }`, not `(`\\n/tmp/tmpthckr0kh.d(13): Error:\
    \ found `k` when expecting `)`\\n/tmp/tmpthckr0kh.d(13): Error: found `:` when\
    \ expecting `;` following statement\\n/tmp/tmpthckr0kh.d(13): Error: no identifier\
    \ for declarator `l[k]`\\n/tmp/tmpthckr0kh.d(13): Error: declaration expected,\
    \ not `<`\\n/tmp/tmpthckr0kh.d(18): Error: declaration expected, not `while`\\\
    n/tmp/tmpthckr0kh.d(22): Error: no identifier for declarator `idx`\\n/tmp/tmpthckr0kh.d(22):\
    \ Error: declaration expected, not `++`\\n/tmp/tmpthckr0kh.d(23): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpthckr0kh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    foreach(i;\
    \ l)\n    {\n        if(i > t) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L,\
    \ 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n\
    \    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L)\
    \ == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdw7mwayu.d(28): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpdw7mwayu.__unittest_L19_C1()\
    \ [0x427f4b]\\n??:? void tmpdw7mwayu.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1c7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b05a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301ed]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43069c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430179]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b031]\\n??:? runModuleUnitTests [0x42bf9d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42862c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285b3]\\n??:? _d_run_main [0x42851e]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0xb755a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    assert(t >\
    \ 0);\n    foreach(x; l)\n    {\n        if(x > t)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L)\
    \ == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L,\
    \ 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr4xcxs21.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282d9]\\n??:? void tmpr4xcxs21.__unittest_L23_C1()\
    \ [0x427f8f]\\n??:? void tmpr4xcxs21.__modtest() [0x427fa4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c2c3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b156]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4302e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430798]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430275]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b12d]\\n??:? runModuleUnitTests [0x42c099]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428728]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4286af]\\n??:? _d_run_main [0x42861a]\\n??:? main [0x427fb7]\\\
    n??:? __libc_start_main [0xa092e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    foreach(long\
    \ i; l)\n    {\n        if(i > t)\n            return false;\n    }\n    return\
    \ true;\n}\n/*\nAdd 1 to each number in the array and return the array.\n    >>>\
    \ add_one([1L, 2L, 4L, 10L])\n    [2L, 3L, 5L, 11L]\n    >>> add_one([])\n   \
    \ []\n*/\nlong[] add_one(long[] l) \n{\n    long[] ret = new long[0];\n    foreach(long\
    \ i; l)\n    {\n        ret ~= i + 1;\n    }\n    return ret;\n}\n/*\nThe sum\
    \ of the numbers in l. Return zero if the array is empty.\n    >>> sum_numbers([1L,\
    \ 2L, 4L, 10L])\n    17L\n    >>> sum_numbers([])\n    0L\n*/\nlong sum_numbers(long[]\
    \ l) \n{\n    long sum = 0;\n    foreach(long i; l)\n    {\n        sum += i;\n\
    \    }\n    return sum;\n}\n/*\nReturn the element e of the array a at index i.\n\
    \    >>> get_element([1L, 2L, 4L, 10L], 2)\n    4L\n    >>> get_element([1L, 2L,\
    \ 4L, 10L], 0)\n    1L\n*/\nlong get_element(long[] a, long i) \n{\n    return\
    \ a[i];\n}\n/*\nReturn the index of e in the array a.\n    >>> get_index(4L, [1L,\
    \ 2L, 4L, 10L])\n    2L\n    >>> get_index(1L, [1L, 2L, 4L, 10L])\n    0L\n*/\n\
    long get_index(long e, long[] a) \n{\n    return a.indexOf(e);\n}\n/*\nCreate\
    \ an array with the Fibonacci sequence. The sequence starts with 1, 1. Every following\
    \ element is the sum of the two previous elements. The array should have n elements.\n\
    \    >>> fibonacci(8)\n    [1L, 1L\nunittest\n{\n    alias candidate = below_threshold;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L)\
    \ == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L,\
    \ 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjrerl9el.d(74): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjrerl9el.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n  foreach(a; l)\n\
    \    if(a > t) return false;\n  return true;\n}\n/*\nReturn true if all strings\
    \ in the array l are shorter than the length of string s.\n    >>> below_length([\"\
    aa\", \"bb\", \"c\"], \"cc\")\n    true\n    >>> below_length([\"aa\", \"bb\"\
    , \"c\"], \"a\")\n    false\n    \n*/\nunittest\n{\n    alias candidate = below_threshold;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L)\
    \ == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L,\
    \ 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnwd8fq40.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpnwd8fq40.__unittest_L25_C1()\
    \ [0x427f4b]\\n??:? void tmpnwd8fq40.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1c7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b05a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301ed]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43069c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430179]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b031]\\n??:? runModuleUnitTests [0x42bf9d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42862c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285b3]\\n??:? _d_run_main [0x42851e]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0xc22c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    foreach(i;\
    \ l) \n    {\n        if(i >= t) \n        {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n/*\nsum all elements in the array l.\n   \
    \ >>> sum_array([1L, 2L, 4L, 10L])\n    17L\n    >>> sum_array([1L, 2L, 4L, 10L,\
    \ 10L])\n    27L\n*/\nlong sum_array(long[] l) \n{\n    long acc = 0L;\n    foreach(i;\
    \ l) \n    {\n        acc += i;\n    }\n    return acc;\n}\n/*\nReturn the element\
    \ from the array l with the highest value.\n    >>> max_array([1L, 2L, 4L, 10L])\n\
    \    10L\n    >>> max_array([1L, 2L, 4L, 10L, 10L])\n    10L\n    >>> max_array([1L,\
    \ -2L, 4L, -10L, 10L])\n    10L\n*/\nlong max_array(long[] l) \n{\n    long acc\
    \ = l[0];\n    foreach(i; l) \n    {\n        if(i > acc) \n        {\n      \
    \      acc = i;\n        }\n    }\n    return acc;\n}\n/*\nReturn the element\
    \ from the array l with the lowest value.\n    >>> min_array([1L, 2L, 4L, 10L])\n\
    \    1L\n    >>> min_array([1L, 2L, 4L, 10L, 10L])\n    1L\n    >>> min_array([1L,\
    \ -2L, 4L, -10L, 10L])\n    -10L\n*/\nlong min_array(long[] l) \n{\n    long acc\
    \ = l[0];\n    foreach(i; l) \n    {\n        if(i < acc) \n        {\n      \
    \      acc = i;\n        }\n    }\n    return acc;\n}\n/*\nReturn the array l\
    \ minus the first element.\n    >>> tail([1L, 2L, 4L, 10L])\n    [2L\nunittest\n\
    {\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L,\
    \ 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n\
    \    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L)\
    \ == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9b_68pko.d(80): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9b_68pko.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    foreach(int\
    \ i; l) \n    {\n        if(l[i] >= t) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L)\
    \ == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L,\
    \ 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp072c_oz7.d(13): Error: cannot implicitly convert expression `__r73[__key74]`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmp072c_oz7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \nin\n{\n    assert(t\
    \ > 0);\n    bool[] result = new bool[l.length];\n    foreach (i, ref x; l) \n\
    \    {\n        result[i] = x < t;\n    }\n    return all(result);\n}\nunittest\n\
    {\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L,\
    \ 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n\
    \    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L)\
    \ == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgvkic3o9.d(11): Error: function `tmpgvkic3o9.below_threshold`\
    \ `in` and `out` contracts can only appear without a body when they are virtual\
    \ interface functions or abstract\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpgvkic3o9.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    foreach(x;\
    \ l) \n    {\n        if(x >= t) \n        {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = below_threshold;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L)\
    \ == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L,\
    \ 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl8f0lw1b.d(22): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl8f0lw1b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    // Return true\
    \ if all numbers in the array l are below threshold t.\n    foreach(n; l)\n  \
    \  {\n        if(n >= t)\n        {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L)\
    \ == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L,\
    \ 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n  foreach(i; l)\
    \ \n  {\n    if(i > t) \n    {\n      return false;\n    }\n  }\n  return true;\n\
    }\nunittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L)\
    \ == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L)\
    \ == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnxran2oj.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpnxran2oj.__unittest_L22_C1()\
    \ [0x427f4b]\\n??:? void tmpnxran2oj.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1c7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b05a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301ed]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43069c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430179]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b031]\\n??:? runModuleUnitTests [0x42bf9d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42862c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285b3]\\n??:? _d_run_main [0x42851e]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x6156c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n\tint i = 0;\n\t\
    for (i=0; i<l.length; i++) \n\t{\n\t\tif (l[i] >= t) \n\t\t{\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L)\
    \ == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L,\
    \ 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \nin\n{\n    foreach\
    \ (i; l)\n    {\n        assert(i >= 0L);\n    }\n}\nout\n{\n    assert(foreach((long\
    \ i; l)) (i < t));\n}\n{\n    foreach (i; l)\n    {\n        if (!(i < t)) \n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L)\
    \ == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L)\
    \ == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk1tkrf90.d(21): Error: expression expected, not `foreach`\\n/tmp/tmpk1tkrf90.d(21):\
    \ Error: found `i` when expecting `.` following long\\n/tmp/tmpk1tkrf90.d(21):\
    \ Error: found `;` when expecting identifier following `long`.\\n/tmp/tmpk1tkrf90.d(21):\
    \ Error: found `l` when expecting `)`\\n/tmp/tmpk1tkrf90.d(21): Error: found `)`\
    \ when expecting `;` following statement\\n/tmp/tmpk1tkrf90.d(21): Deprecation:\
    \ use `{ }` for an empty statement, not `;`\\n/tmp/tmpk1tkrf90.d(23): Error: missing\
    \ `do { ... }` after `in` or `out`\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmpk1tkrf90.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    return all(l.map!(x\
    \ => x < t));\n}\n/*\nReturn true if any element of l is equal to e.\n    >>>\
    \ any_eq([\"cat\", \"dog\", \"pig\"], \"dog\")\n    true\n    >>> any_eq([\"cat\"\
    , \"dog\", \"pig\"], \"monkey\")\n    false\n*/\nunittest\n{\n    alias candidate\
    \ = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L)\
    \ == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L,\
    \ 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvia4bgde.d(13): Error: undefined identifier `all`\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvia4bgde.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers\
    \ in the array l are below threshold t.\n    >>> below_threshold([1L, 2L, 4L,\
    \ 10L], 100L)\n    true\n    >>> below_threshold([1L, 20L, 4L, 10L], 5L)\n   \
    \ false\n    \n*/\nbool below_threshold(long[] l, long t) \n{\n    foreach(x;\
    \ l) \n    {\n        if(x > t) \n        {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = below_threshold;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L)\
    \ == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L,\
    \ 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjlri34r8.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4281dd]\\n??:? void tmpjlri34r8.__unittest_L22_C1()\
    \ [0x427f4b]\\n??:? void tmpjlri34r8.__modtest() [0x427f60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c1c7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b05a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4301ed]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x43069c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430179]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b031]\\n??:? runModuleUnitTests [0x42bf9d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42862c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285b3]\\n??:? _d_run_main [0x42851e]\\n??:? main [0x427f73]\\\
    n??:? __libc_start_main [0x468a9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
