name: HumanEval_100_make_a_pile
language: d
results:
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] res = new\
    \ long[n];\n    res[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n       \
    \ if (res[i-1] % 2 == 0)\n            res[i] = res[i-1] + 2;\n        else\n \
    \           res[i] = res[i-1] + 1;\n    }\n    return res;\n}\nunittest\n{\n \
    \   alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp76df3j4i.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmp76df3j4i.__unittest_L30_C1()\
    \ [0x427fc2]\\n??:? void tmp76df3j4i.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0xf357a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] ans = new\
    \ long[n];\n    long count = n;\n    for (long i = 0; i < n; i++)\n    {\n   \
    \     ans[i] = count;\n        if (count % 2 == 0)\n            count++;\n   \
    \     else\n            count += 2;\n    }\n    return ans;\n}\nunittest\n{\n\
    \    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpumbesqsb.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42844d]\\n??:? void tmpumbesqsb.__unittest_L31_C1()\
    \ [0x427f8b]\\n??:? void tmpumbesqsb.__modtest() [0x4281cc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c507]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b39a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430625]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ad4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b371]\\n??:? runModuleUnitTests [0x42c2dd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428910]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428897]\\n??:? _d_run_main [0x428802]\\n??:? main [0x4281df]\\\
    n??:? __libc_start_main [0xfebbc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    return iota(n).map!(i\
    \ => n + i + i + 1L)().array();\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqfbyesn3.d(19): Error: undefined identifier `iota`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqfbyesn3.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] arr;\n \
    \   arr ~= n;\n    long level = n;\n    while(n--) {\n        if(level % 2 ==\
    \ 0) {\n            arr ~= arr[$-1] + 2;\n        } else {\n            arr ~=\
    \ arr[$-1] + 1;\n        }\n        level--;\n    }\n    return arr;\n}\n/*\n\
    \    This function is intended to help to solve the following problem:\n    Given\
    \ a positive integer n, you have to make a pile of n levels of stones.\n    The\
    \ first level has n stones.\n    The number of stones in the next level is:\n\
    \        - the next odd number if n is odd.\n        - the next even number if\
    \ n is even.\n    Return the number of stones in each level in an array, where\
    \ element at index\n    i represents the number of stones in the level (i+1).\n\
    unittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) ==\
    \ [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuxrr9b00.d(32): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxrr9b00.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] res = new\
    \ long[n];\n    res[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n        res[i]\
    \ = res[i-1] + (res[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpm26cc4im.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284ad]\\n??:? void tmpm26cc4im.__unittest_L27_C1()\
    \ [0x427f76]\\n??:? void tmpm26cc4im.__modtest() [0x428230]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c567]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430685]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430611]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d1]\\n??:? runModuleUnitTests [0x42c33d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428970]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288f7]\\n??:? _d_run_main [0x428862]\\n??:? main [0x428243]\\\
    n??:? __libc_start_main [0xb5df6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    immutable m = n;\n\
    \    long[] result = new long[m];\n    result[0] = n;\n    for (int i = 1; i <\
    \ m; i++)\n    {\n        if (modulo(n, 2) == 0)\n        {\n            result[i]\
    \ = result[i-1] + 2;\n        }\n        else\n        {\n            result[i]\
    \ = result[i-1] + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n\
    \    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) ==\
    \ [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
    \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6aux4jsk.d(24): Error: undefined identifier `modulo`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6aux4jsk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++) {\n     \
    \   if (n % 2 == 0) {\n            result[i] = n + 2;\n        } else {\n    \
    \        result[i] = n + 1;\n        }\n        n = result[i];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpbqs5fn6i.d(23): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42856e]\\n??:? long[] tmpbqs5fn6i.make_a_pile(long) [0x427e7d]\\\
    n??:? void tmpbqs5fn6i.__unittest_L31_C1() [0x427f21]\\n??:? void tmpbqs5fn6i.__modtest()\
    \ [0x428240]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c577]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b40a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430695]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b44]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430621]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3e1]\\n??:? runModuleUnitTests [0x42c34d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428980]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428907]\\n??:? _d_run_main [0x428872]\\n??:? main [0x428253]\\\
    n??:? __libc_start_main [0x92eb7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    /*\n        The\
    \ result array is initialized to be n elements long.\n        The first element\
    \ is n.\n        There are n elements, so n levels.\n    */\n    long[] result\
    \ = new long[n];\n    /*\n        The result array is populated in a loop.\n \
    \       The loop counter \"i\" starts from zero.\n        The number of iterations\
    \ is n.\n        The type of \"i\" is long.\n    */\n    for (long i = 0L; i <\
    \ n; i = i + 1L)\n    {\n        /*\n            If the value of i is odd, then\
    \ the previous value\n            of i is even.\n            1L is added to the\
    \ previous value of i\n            and stored in the result array at the index\
    \ i.\n        */\n        if (i % 2L == 1L)\n        {\n            result[i]\
    \ = i + 1L;\n        }\n        /*\n            If the value of i is even, then\
    \ the previous value\n            of i is odd.\n            2L is added to the\
    \ previous value of i\n            and stored in the result array at the index\
    \ i.\n        */\n        else\n        {\n            result[i] = i + 2L;\n \
    \       }\n    }\n    /*\n        The array is returned.\n    */\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbk47eos2.d(63): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42847d]\\n??:? void tmpbk47eos2.__unittest_L59_C1()\
    \ [0x427f42]\\n??:? void tmpbk47eos2.__modtest() [0x4281fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c537]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430655]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b04]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305e1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3a1]\\n??:? runModuleUnitTests [0x42c30d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428940]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c7]\\n??:? _d_run_main [0x428832]\\n??:? main [0x42820f]\\\
    n??:? __libc_start_main [0x81f7b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    auto size = (int)log2(n)\
    \ + 1;\n    auto result = new long[size];\n    result[0] = n;\n    auto current\
    \ = n;\n    foreach (i; 1 .. size)\n    {\n        current = ((current % 2) ?\
    \ (current + 2) : (current + 1));\n        result[i] = current;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4jcwpg2j.d(19): Error: C style cast illegal, use `cast(int)log2(n)`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jcwpg2j.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    int size = int(n);\n\
    \    long[] result = new long[n];\n    result[0] = n;\n    for (int i = 1; i <\
    \ size; i++) {\n        if (n % 2 == 0) {\n            result[i] = n + 2;\n  \
    \      } else {\n            result[i] = n + 1;\n        }\n        n = result[i];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuif2i1ue.d(19): Error: cannot implicitly convert expression `n`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpuif2i1ue.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    long level = 1;\n    while (level < n)\n\
    \    {\n        result[level] = result[level-1] + (level % 2 == 0 ? 2 : 1);\n\
    \        level++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi6z3s5pb.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428495]\\n??:? void tmpi6z3s5pb.__unittest_L29_C1()\
    \ [0x427f5a]\\n??:? void tmpi6z3s5pb.__modtest() [0x428214]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c54f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3e2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43066d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b1c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b9]\\n??:? runModuleUnitTests [0x42c325]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428958]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288df]\\n??:? _d_run_main [0x42884a]\\n??:? main [0x428227]\\\
    n??:? __libc_start_main [0xb5faa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    result[0] = n;\n    long i = 1;\n    while (i < n)\n    {\n\
    \        if (result[i-1]%2 == 0)\n            result[i] = result[i-1] + 2;\n \
    \       else\n            result[i] = result[i-1] + 1;\n        i++;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\n  \
    \  assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L,\
    \ 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdxd2bqes.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284fd]\\n??:? void tmpdxd2bqes.__unittest_L32_C1()\
    \ [0x427fc2]\\n??:? void tmpdxd2bqes.__modtest() [0x42827c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5b7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b44a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306d5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b84]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430661]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b421]\\n??:? runModuleUnitTests [0x42c38d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289c0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428947]\\n??:? _d_run_main [0x4288b2]\\n??:? main [0x42828f]\\\
    n??:? __libc_start_main [0x47091554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] pile = new\
    \ long[n];\n    pile[0] = n;\n    for (size_t i = 1; i < n; i++)\n    {\n    \
    \    pile[i] = pile[i-1] + 2*(i%2==0?1:-1);\n    }\n    return pile;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6ovvtofb.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42847d]\\n??:? void tmp6ovvtofb.__unittest_L27_C1()\
    \ [0x427f42]\\n??:? void tmp6ovvtofb.__modtest() [0x4281fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c537]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ca]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430655]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b04]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305e1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3a1]\\n??:? runModuleUnitTests [0x42c30d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428940]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288c7]\\n??:? _d_run_main [0x428832]\\n??:? main [0x42820f]\\\
    n??:? __libc_start_main [0x13704554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    auto result = new\
    \ long[](n);\n    for (int i = 0; i < n; i++)\n    {\n        result[i] = n;\n\
    \        if (n % 2 == 0)\n            n += 1;\n        else\n            n +=\
    \ 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmp0tt4lsxg.d(22): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4284ee]\\n??:? long[] tmp0tt4lsxg.make_a_pile(long) [0x427e42]\\\
    n??:? void tmp0tt4lsxg.__unittest_L30_C1() [0x427ea1]\\n??:? void tmp0tt4lsxg.__modtest()\
    \ [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c4f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b38a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430615]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ac4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305a1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b361]\\n??:? runModuleUnitTests [0x42c2cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428900]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428887]\\n??:? _d_run_main [0x4287f2]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x8b5d9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long a = n;\n \
    \   long b = a % 2 == 0 ? a + 2 : a + 1;\n    long c = b % 2 == 0 ? b + 2 : b\
    \ + 1;\n    return [a, b, c];\n}\n/*\nunittest\n{\n    alias candidate = make_a_pile;\n\
    \n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L,\
    \ 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L)\
    \ == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L,\
    \ 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi_hzo3yb.d(24): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi_hzo3yb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[n];\n    long count = n;\n    foreach(i; 0..n)\n    {\n        result[i]\
    \ = count;\n        if(count % 2 == 0)\n            count++;\n        else\n \
    \           count+=2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L)\
    \ == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n\
    \    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L)\
    \ == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpl_dpz9gt.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428455]\\n??:? void tmpl_dpz9gt.__unittest_L31_C1()\
    \ [0x427f97]\\n??:? void tmpl_dpz9gt.__modtest() [0x4281d8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c50f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3a2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43062d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430adc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305b9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b379]\\n??:? runModuleUnitTests [0x42c2e5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428918]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42889f]\\n??:? _d_run_main [0x42880a]\\n??:? main [0x4281eb]\\\
    n??:? __libc_start_main [0xa28d7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    auto pile = [n](inout\
    \ long[] result)\n    {\n        long k = 0;\n        while (n > 0)\n        {\n\
    \            result ~= n;\n            if (n & 1)\n                n = n + 2;\n\
    \            else\n                n = n + 1;\n        }\n    };\n    auto arr\
    \ = appender!(long[])();\n    pile(arr);\n    return arr.data;\n}\nunittest\n\
    {\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L,\
    \ 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpka7lraxx.d(19): Error: `(arguments)` expected following `inout(long)`\\\
    n/tmp/tmpka7lraxx.d(19): Error: found `[` when expecting `,`\\n/tmp/tmpka7lraxx.d(19):\
    \ Error: expression expected, not `]`\\n/tmp/tmpka7lraxx.d(19): Error: found `result`\
    \ when expecting `,`\\n/tmp/tmpka7lraxx.d(20): Error: semicolon expected following\
    \ auto declaration, not `{`\\n/tmp/tmpka7lraxx.d(30): Deprecation: use `{ }` for\
    \ an empty statement, not `;`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpka7lraxx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    long[] result =\
    \ new long[(int)n];\n    long levelNum = n;\n    result[0] = n;\n    for (long\
    \ i = 1; i < n; i++) {\n        levelNum = (levelNum % 2 == 0) ? levelNum + 1\
    \ : levelNum + 2;\n        result[(int)i] = levelNum;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp85olwelv.d(19): Error: C style cast illegal, use `cast(int)n`\\\
    n/tmp/tmp85olwelv.d(24): Error: C style cast illegal, use `cast(int)i`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp85olwelv.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n    import std.range;\n\
    \    return iota(n).map!(a => n += n%2 ? 2 : 1).array;\n}\nunittest\n{\n    alias\
    \ candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n   \
    \ assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L,\
    \ 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n\
    \    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyf5u64ga.d(20): Error: no property `map` for type `Result`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyf5u64ga.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    Return the number of stones\
    \ in each level in an array, where element at index\n    i represents the number\
    \ of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n  \
    \  [3L, 5L, 7L]\n    \n*/\nlong[] make_a_pile(long n) \n{\n  // (2x + 1)**2 +\
    \ x*(x+1)\n  auto s = n * (n + 1) / 2;\n  return [s + n * n, s + n * (n + 1)];\n\
    }\nunittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
    \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
    \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L,\
    \ 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L,\
    \ 22L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeb799bvr.d(27): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42840d]\\n??:? void tmpeb799bvr.__unittest_L23_C1()\
    \ [0x427ed6]\\n??:? void tmpeb799bvr.__modtest() [0x428190]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c3f7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b28a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43041d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4308cc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4303a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b261]\\n??:? runModuleUnitTests [0x42c1cd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42885c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287e3]\\n??:? _d_run_main [0x42874e]\\n??:? main [0x4281a3]\\\
    n??:? __libc_start_main [0xffe40554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
