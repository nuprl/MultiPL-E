language: d
name: HumanEval_58_common
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n    if (l1.length > l2.length) {\n        auto tmp = l1;\n        l1 = l2;\n\
    \        l2 = tmp;\n    }\n    return sort(array(l1).map!(a => a in l2).filter!(a\
    \ => a).keys);\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplxaxfhca.d(13): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmplxaxfhca.d(13): Error: declaration expected, not `if`

    /tmp/tmplxaxfhca.d(15): Error: no identifier for declarator `l1`

    /tmp/tmplxaxfhca.d(15): Error: declaration expected, not `=`

    /tmp/tmplxaxfhca.d(16): Error: no identifier for declarator `l2`

    /tmp/tmplxaxfhca.d(16): Error: declaration expected, not `=`

    /tmp/tmplxaxfhca.d(17): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplxaxfhca.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] ret = new long[];\n    auto i1 = l1.dup.sort;\n    auto i2 =\
    \ l2.dup.sort;\n    foreach(i, x; i1)\n    {\n        foreach(j, y; i2)\n    \
    \    {\n            if(x == y)\n            {\n                i2.remove(j);\n\
    \                ret ~= x;\n                break;\n            }\n        }\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\n   \
    \ assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr2jm79j9.d(14): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpr2jm79j9.d(15): Error: no property `sort` for type `long[]`

    /tmp/tmpr2jm79j9.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr2jm79j9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    size_t l1s = l1.length;\n    size_t l2s = l2.length;\n    if(l1s ==\
    \ 0 || l2s == 0)\n    {\n        return [];\n    }\n    if(l1s > l2s)\n    {\n\
    \        long[] temp = l1;\n        l1 = l2;\n        l2 = temp;\n    }\n    size_t\
    \ l2s2 = l2.length;\n    Map!(long, bool) l1_m = Map!(long, bool)();\n    foreach(item;\
    \ l1)\n    {\n        l1_m[item] = true;\n    }\n    long[] ret_arr = [];\n  \
    \  foreach(item; l2)\n    {\n        if(l1_m.contains(item))\n        {\n    \
    \        ret_arr ~= item;\n        }\n    }\n    return ret_arr;\n}\n//difference\
    \ of two lists\nlong[] difference(long[] l1, long[] l2) \n{\n    size_t l1s =\
    \ l1.length;\n    size_t l2s = l2.length;\n    if(l1s == 0 || l2s == 0)\n    {\n\
    \        return [];\n    }\n    if(l1s > l2s)\n    {\n        long[] temp = l1;\n\
    \        l1 = l2;\n        l2 = temp;\n    }\n    size_t l2s2 = l2.length;\n \
    \   Map!(long, bool) l1_m = Map!(long, bool)();\n    foreach(item; l1)\n    {\n\
    \        l1_m[item] = true;\n    }\n    long[] ret_arr = [];\n    foreach(item;\
    \ l2)\n    {\n        if(!l1_m.contains(item))\n        {\n            ret_arr\
    \ ~= item;\n        }\n    }\n    return ret_arr;\n}\n/*\nReturn sorted unique\
    \ common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L,\n\
    unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L,\
    \ 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdz2effwe.d(73): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdz2effwe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n     if (l1.length == 0 || l2.length == 0) return new long[0];\n    auto\
    \ lSet = new HashSet!(long)(l1);\n    auto lOut = [];\n    foreach (e; l2)\n \
    \   {\n        if (lSet.contains(e))\n        {\n            lOut ~= e;\n    \
    \    }\n    }\n    lOut.sort;\n    return lOut;\n}\n/*\nReturn sorted unique elements\
    \ that are in one of the arrays but not both.\n    >>> extra([1L, 4L, 3L, 34L,\
    \ 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [2L, 3L, 4L, 7L, 9L, 34L,\
    \ 121L]\n    >>> extra([5L, 3L, 2L, 8L], [3L, 2L])\n    [5L, 8L]\n*/\nlong[] extra(long[]\
    \ l1, long[] l2) \n{\n    if (l1.length == 0 && l2.length == 0) return new long[0];\n\
    \    if (l1.length == 0) return l2;\n    if (l2.length == 0) return l1;\n    auto\
    \ lSet = new HashSet!(long)(l1);\n    auto lOut = [];\n    foreach (e; l2)\n \
    \   {\n        if (!lSet.contains(e))\n        {\n            lOut ~= e;\n   \
    \     }\n    }\n    lOut.sort;\n    return lOut;\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphzg63up5.d(15): Error: template instance `HashSet!long` template
    `HashSet` is not defined

    /tmp/tmphzg63up5.d(21): Error: cannot append type `long` to type `void[]`

    /tmp/tmphzg63up5.d(24): Error: no property `sort` for type `void[]`

    /tmp/tmphzg63up5.d(25): Error: cannot implicitly convert expression `lOut` of
    type `void[]` to `long[]`

    /tmp/tmphzg63up5.d(39): Error: template instance `HashSet!long` template `HashSet`
    is not defined

    /tmp/tmphzg63up5.d(45): Error: cannot append type `long` to type `void[]`

    /tmp/tmphzg63up5.d(48): Error: no property `sort` for type `void[]`

    /tmp/tmphzg63up5.d(49): Error: cannot implicitly convert expression `lOut` of
    type `void[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphzg63up5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    SortedRange!long set1 = l1;\n    SortedRange!long set2 = l2;\n    ulong[]\
    \ common = new ulong[](min(set1.length, set2.length));\n    ulong[] common_out\
    \ = common.dup;\n    ulong c;\n    c = set1.common(set2, common);\n    common_out.length\
    \ = c;\n    return common_out;\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzmzj0i7r.d(14): Error: template instance `SortedRange!long` template
    `SortedRange` is not defined

    /tmp/tmpzmzj0i7r.d(15): Error: template instance `SortedRange!long` template `SortedRange`
    is not defined

    /tmp/tmpzmzj0i7r.d(16): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmpzmzj0i7r.d(21): Error: cannot implicitly convert expression `common_out`
    of type `ulong[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzmzj0i7r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] ret = null;\n    long[] l = merge(l1, l2);\n    l = sort(l);\n\
    \    l = unique(l);\n    if (l.length == 0)\n    {\n        return ret;\n    }\n\
    \    else\n    {\n        ulong cnt = l.length;\n        foreach (i; l)\n    \
    \    {\n            if (cnt == l.length)\n            {\n                ret ~=\
    \ i;\n            }\n            else\n            {\n                if (i !=\
    \ ret[$ - 1])\n                {\n                    ret ~= i;\n            \
    \    }\n            }\n            cnt--;\n        }\n        return ret;\n  \
    \  }\n}\n/*\nReturn sorted unique elements from both arrays.\n    >>> merge([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 2L,\
    \ 3L, 4L, 5L, 653L, 7L, 9L, 121L, 34L]\n    >>> merge([4L, 3L, 2L, 8L], [3L, 2L])\n\
    \    [2L, 3L, 4L, 8L]\n    >>> merge([1L, 2L, 3L], [1L, 2L, 3L])\n    [1L, 2L,\
    \ 3L]\n*/\nlong[] merge(long[] l1, long[] l2) \n{\n    long[] ret = null;\n  \
    \  foreach (i; l1)\n    {\n        ret ~= i;\n    }\n    foreach (i; l2)\n   \
    \ {\n        ret ~= i;\n    }\n    ret = sort(ret);\n    ret = unique(ret);\n\
    \    return ret;\n}\n/*\nReturn sorted unique elements from array.\n    >>> unique([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L])\n    [1L, 2L, 3L, 4L, 5L, 34L, 653L]\n    >>> unique([5L,\
    \ 7L, 1L, 5L\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsh5bd_ef.d(67): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsh5bd_ef.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] result = null;\n    long length = 0;\n    if (l1.length > l2.length)\
    \ \n    {\n        result = l1.dup;\n        length = l2.length;\n    }\n    else\
    \ \n    {\n        result = l2.dup;\n        length = l1.length;\n    }\n    for\
    \ (int i = 0; i < length; i++) \n    {\n        if (l1[i] != l2[i]) \n       \
    \ {\n            result = result[0..$-1];\n        }\n    }\n    return result.sort.unique;\n\
    }\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L,\
    \ 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfeajr1y_.d(35): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfeajr1y_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tauto l3 = l1.sorted;\n\tauto l4 = l2.sorted;\n\tlong[] result;\n\twhile(l3.length\
    \ != 0 && l4.length != 0)\n\t{\n\t\tif(l3[0] == l4[0])\n\t\t{\n\t\t\tresult ~=\
    \ l3[0];\n\t\t\tl3 = l3[1..$];\n\t\t\tl4 = l4[1..$];\n\t\t}\n\t\telse if(l3[0]\
    \ < l4[0])\n\t\t{\n\t\t\tl3 = l3[1..$];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl4 = l4[1..$];\n\
    \t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = common;\n\n\
    \    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4k_7gu42.d(14): Error: no property `sorted` for type `long[]`

    /tmp/tmp4k_7gu42.d(15): Error: no property `sorted` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4k_7gu42.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    Map!(dchar, size_t) map1 = new Map!(dchar, size_t)();\n    size_t[]\
    \ l1_uniq = new size_t[];\n    foreach (i, v; l1) \n    {\n        map1[v] = i;\n\
    \        l1_uniq ~= v;\n    }\n    long[] l1_uniq_sorted = sort(l1_uniq);\n  \
    \  long[] res = new long[];\n    foreach (i, v; l2) \n    {\n        if (map1.count(v))\
    \ \n        {\n            res ~= v;\n        }\n    }\n    return sort(res);\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn_u3nswj.d(14): Error: template instance `Map!(dchar, size_t)`
    template `Map` is not defined

    /tmp/tmpn_u3nswj.d(14): Error: template instance `Map!(dchar, size_t)` template
    `Map` is not defined

    /tmp/tmpn_u3nswj.d(15): Error: new can only create structs, dynamic arrays or
    class objects, not `ulong[]`''s

    /tmp/tmpn_u3nswj.d(21): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpn_u3nswj.d(22): Error: new can only create structs, dynamic arrays or
    class objects, not `long[]`''s

    /tmp/tmpn_u3nswj.d(30): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn_u3nswj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long len1 = l1.length;\n    long len2 = l2.length;\n    if (len1 ==\
    \ 0L || len2 == 0L)\n    {\n        return new long[0L];\n    }\n    if (len1\
    \ == 1L)\n    {\n        if (cast(long)l2.count(l1[0L]) > 0L)\n        {\n   \
    \         return l1;\n        }\n        else\n        {\n            return new\
    \ long[0L];\n        }\n    }\n    if (len2 == 1L)\n    {\n        if (cast(long)l1.count(l2[0L])\
    \ > 0L)\n        {\n            return l2;\n        }\n        else\n        {\n\
    \            return new long[0L];\n        }\n    }\n    return std.algorithm.setIntersection(l1,\
    \ l2).array();\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuc0qvzrn.d(22): Error: no property `count` for type `long[]`

    /tmp/tmpuc0qvzrn.d(33): Error: no property `count` for type `long[]`

    /tmp/tmpuc0qvzrn.d(42): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuc0qvzrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tstatic if (__VERSION__ >= 2060) \n    {\n        auto hash = new HashTable!(long,\
    \ long);\n        foreach (i; 0 .. l1.length) hash[l1[i]] = 1;\n        foreach\
    \ (i; 0 .. l2.length) hash[l2[i]] = hash[l2[i]] == 1 ? 2 : 0;\n        hash.popFront();\n\
    \        return hash.byKey.sort.filter!(a => a.value > 1).map!(a => a.key).array;\n\
    \    } \n    else \n    {\n        sort(l1);\n        sort(l2);\n        return\
    \ filter!(a => a[0] == a[1])(zip(l1, l2)).map!(a => a[0]).array;\n    }\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaszgq8pr.d(16): Error: template instance `HashTable!(long, long)`
    template `HashTable` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaszgq8pr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    assert(l1.length > 0);\n    assert(l2.length > 0);\n    auto s1 = l1.sort();\n\
    \    auto s2 = l2.sort();\n    long[][] tmp = [s1, s2];\n    auto s3 = tmp.sort();\n\
    \    long[] c1 = l1.sort();\n    long[] c2 = l2.sort();\n    long[] c3 = [];\n\
    \    for (int i = 0; i < s1.length; i++)\n    {\n        if (s1[i] == s2[i])\n\
    \        {\n            c3 ~= s1[i];\n        }\n    }\n    return c3;\n}\n/*\n\
    Create a 2-D array from 1-D\n    >>> create_2d([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L,\
    \ 9L], 3L)\n    [[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]\n*/\nlong[][] create_2d(long[]\
    \ data, size_t dim1) \n{\n    assert(data.length > 0);\n    long[][] res = [];\n\
    \    size_t i = 0;\n    while (i < data.length)\n    {\n        res ~= data[i..i\
    \ + dim1];\n        i += dim1;\n    }\n    return res;\n}\n/*\nPair an array with\
    \ the cumulative sum of its elements\n    >>> cumulate([1L, 2L, 3L, 4L])\n   \
    \ [(1L, 1L), (2L, 3L), (3L, 6L), (4L, 10L)]\n    >>> cumulate([5L, 6L, 7L, 8L,\
    \ 9L])\n    [(5L, 5L), (6L, 11L), (7L, 18L), (8L, 26L), (9L, 35L)]\n*/\nTuple!(long,\
    \ long)[][] cumulate(long[] data) \n{\n    assert(data.length > 0);\n    Tuple!(long,\
    \ long)[][]\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsmbpx6kw.d(60): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpsmbpx6kw.d(69): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsmbpx6kw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\treturn std.algorithm.setIntersection(l1, l2).array();\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr0pde00u.d(14): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr0pde00u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto us = union(l1, l2);\n    auto is = intersection(l1, l2);\n   \
    \ return(is);\n}\n/*\nRemove all duplicate elements.\n    >>> unique([1L, 4L,\
    \ 3L, 2L, 34L, 653L, 2L, 5L])\n    [1L, 4L, 3L, 2L, 34L, 653L, 5L]\n    >>> unique([2L,\
    \ 3L, 2L, 3L, 2L, 3L])\n    [2L, 3L]\n*/\nlong[] unique(long[] l) \n{\n    l.sort();\n\
    \    return(l.uniq);\n}\n/*\nGiven two arrays, return all of the elements that\
    \ are in both arrays.\n    >>> intersection([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> intersection([5L,\
    \ 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n*/\nlong[] intersection(long[] l1, long[]\
    \ l2) \n{\n    auto us = union(l1, l2);\n    return(us.uniq);\n}\n/*\nGiven two\
    \ arrays, return all of the elements that are in only one array.\n    >>> difference([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [4L, 3L,\
    \ 34L, 2L]\n    >>> difference([5L, 3L, 2L, 8L], [3L, 2L])\n    [5L, 8L]\n*/\n\
    long[] difference(long[] l1, long[] l2) \n{\n    auto us = union(l1, l2);\n  \
    \  auto is = intersection(l1, l2);\n    return(us.difference(is));\n}\n/*\nReturn\
    \ the elements that are only in one array.\n    >>>\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps5uk6pzr.d(14): Error: expression expected, not `union`

    /tmp/tmps5uk6pzr.d(15): Error: basic type expected, not `is`

    /tmp/tmps5uk6pzr.d(15): Error: no identifier for declarator `_error_`

    /tmp/tmps5uk6pzr.d(15): Error: `type identifier : specialization` expected following
    `is`

    /tmp/tmps5uk6pzr.d(15): Error: found `intersection` when expecting `;` following
    statement

    /tmp/tmps5uk6pzr.d(16): Error: `type identifier : specialization` expected following
    `is`

    /tmp/tmps5uk6pzr.d(16): Error: found `;` when expecting `)`

    /tmp/tmps5uk6pzr.d(17): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmps5uk6pzr.d(39): Error: expression expected, not `union`

    /tmp/tmps5uk6pzr.d(51): Error: expression expected, not `union`

    /tmp/tmps5uk6pzr.d(52): Error: basic type expected, not `is`

    /tmp/tmps5uk6pzr.d(52): Error: no identifier for declarator `_error_`

    /tmp/tmps5uk6pzr.d(52): Error: `type identifier : specialization` expected following
    `is`

    /tmp/tmps5uk6pzr.d(52): Error: found `intersection` when exp'
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    l1.sort;\n    l2.sort;\n    return l1.uniq.filter!(x => x in l2.uniq).idup;\n\
    }\n/*\nYou have a function rand7() that generates a random integer from 1 to 7.\
    \ Use it to write a function rand5() that generates a random integer from 1 to\
    \ 5.\n    rand7() returns each integer with equal probability. rand5() must also\
    \ return each integer with equal probability.\n    >>> rand5() in [1L, 2L, 3L,\
    \ 4L, 5L]\n    True\n    >>> rand5() in [1L, 2L, 3L, 4L, 5L]\n    True\n    >>>\
    \ rand5() in [1L, 2L, 3L, 4L, 5L]\n    True\n    >>> rand5() in [1L, 2L, 3L, 4L,\
    \ 5L]\n    True\n    >>> rand5() in [1L, 2L, 3L, 4L, 5L]\n    True\n    >>> rand5()\
    \ in [1L, 2L, 3L, 4L, 5L]\n    True\n    >>> rand5() in [1L, 2L, 3L, 4L, 5L]\n\
    \    True\n    >>> rand5() in [1L, 2L, 3L, 4L, 5L]\n    True\n    >>> rand5()\
    \ in [1L, 2L, 3L, 4L, 5L]\n    True\n    >>> rand5() in [1L, 2L, 3L, 4L, 5L]\n\
    \    True\n*/\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzpj3xz2k.d(14): Error: no property `sort` for type `long[]`

    /tmp/tmpzpj3xz2k.d(15): Error: no property `sort` for type `long[]`

    /tmp/tmpzpj3xz2k.d(16): Error: no property `uniq` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzpj3xz2k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    size_t n1 = l1.length;\n    size_t n2 = l2.length;\n    long[][] arr\
    \ = [l1, l2];\n    size_t[] n = [n1, n2];\n    size_t[] idx = [0, 0];\n    long[]\
    \ value = [l1[0], l2[0]];\n    size_t m = 0;\n    long[] result = new long[min(n1,\
    \ n2)];\n    while(true) \n    {\n        if (idx[0] == n[0] || idx[1] == n[1])\n\
    \            break;\n        auto a = idx[0];\n        auto b = idx[1];\n    \
    \    if (value[0] == value[1]) \n        {\n            result[m] = value[0];\n\
    \            value[0] = arr[0][++a];\n            value[1] = arr[1][++b];\n  \
    \          idx[0] = a;\n            idx[1] = b;\n            m++;\n        }\n\
    \        else if (value[0] < value[1]) \n        {\n            value[0] = arr[0][++a];\n\
    \            idx[0] = a;\n        }\n        else \n        {\n            value[1]\
    \ = arr[1][++b];\n            idx[1] = b;\n        }\n    }\n    return result[0..m];\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq26bregf.d(21): Error: undefined identifier `min`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq26bregf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto unique1 = set(l1);\n    auto unique2 = set(l2);\n    return unique1.intersection(unique2).array;\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__byuwrm.d(14): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmp__byuwrm.d(15): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__byuwrm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto result = l1.dup;\n    foreach(e; l2)\n    {\n        auto index\
    \ = result.indexOf(e);\n        if(index > -1)\n        {\n            result[index]\
    \ = 0;\n        }\n    }\n    return result.filter!(x => x > 0).array;\n}\n/*\n\
    Return sorted unique common elements for two arrays.\n    >>> common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5,\
    \ 3, 2, 8], [3, 2])\n    [2, 3]\nunittest\n{\n    alias candidate = common;\n\n\
    \    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr98ivejw.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98ivejw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n  return sort(toSet(l1) & toSet(l2));\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmparehglbj.d(14): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmparehglbj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    \n    long[] first = l1.sort.unique;\n    long[] second = l2.sort.unique;\n\
    \    auto res = long[].init;\n    for (int i = 0; i < first.length; i++) \n  \
    \  {\n        for (int j = 0; j < second.length; j++) \n        {\n          \
    \  if (first[i] == second[j]) \n            {\n                res ~= first[i];\n\
    \            }\n        }\n    }\n    return res;\n}\n/*\nFind if string is made\
    \ up of number characters.\n    >>> is_number(\"123\")\n    true\n    >>> is_number(\"\
    123abc\")\n    false\n    >>> is_number(\"12 3\")\n    false\n*/\nunittest\n{\n\
    \    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj0qyvl3r.d(17): Error: found `[` when expecting `.` following long

    /tmp/tmpj0qyvl3r.d(17): Error: found `]` when expecting identifier following `long`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj0qyvl3r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] s1 = l1.sorted;\n    long[] s2 = l2.sorted;\n    size_t i =\
    \ 0;\n    size_t j = 0;\n    auto result = new long[](0);\n    while (i < s1.length\
    \ && j < s2.length)\n    {\n        if (s1[i] == s2[j])\n        {\n         \
    \   result ~= s1[i];\n            i++;\n            j++;\n        }\n        else\
    \ if (s1[i] < s2[j])\n        {\n            i++;\n        }\n        else \n\
    \        {\n            j++;\n        }\n    }\n    return result;\n}\n/*\nReturns\
    \ sorted unique elements that are not in the other array.\n    >>> extra([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [2L, 3L,\
    \ 4L, 34L]\n    >>> extra([5L, 3L, 2L, 8L], [3L, 2L])\n    [5L, 8L]\n    \n*/\n\
    long[] extra(long[] l1, long[] l2) \n{\n    long[] s1 = l1.sorted;\n    long[]\
    \ s2 = l2.sorted;\n    size_t i = 0;\n    size_t j = 0;\n    auto result = new\
    \ long[](0);\n    while (i < s1.length)\n    {\n        if (j == s2.length)\n\
    \        {\n            result ~= s1[i];\n            i++;\n        }\n      \
    \  else if (s1[i] == s2[j])\n        {\n            i++;\n            j++;\n \
    \       }\n        else if (s1[i] < s2[j])\n        {\n            result ~= s1[i];\n\
    \            i++;\n        }\n        else \n        {\n            j++;\n   \
    \     }\n    }\n    return result;\n}\n/*\nReturns sorted unique elements that\
    \ are in the first array but not in the other array.\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj0_0c9ew.d(77): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj0_0c9ew.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n  l1.sort();\n  l2.sort();\n  long[] l3 = new long[l1.length > l2.length\
    \ ? l1.length : l2.length];\n  long n = 0;\n  for (size_t i = 0; i < l1.length;\
    \ i++)\n  {\n    for (size_t j = 0; j < l2.length; j++)\n    {\n      if (l1[i]\
    \ == l2[j])\n      {\n        l3[n] = l1[i];\n        n++;\n      }\n    }\n \
    \ }\n  if (n > 0)\n  {\n    long[] l4 = new long[n];\n    if (n > 1)\n    {\n\
    \      l3 = sort(l3);\n      long f = l3[0];\n      l4[0] = f;\n      size_t m\
    \ = 1;\n      for (size_t i = 1; i < n; i++)\n      {\n        if (l3[i] != f)\n\
    \        {\n          l4[m] = l3[i];\n          f = l3[i];\n          m++;\n \
    \       }\n      }\n    }\n    else\n    {\n      l4[0] = l3[0];\n    }\n    return\
    \ l4;\n  }\n  else\n  {\n    return l3;\n  }\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpozr7mj5y.d(14): Error: no property `sort` for type `long[]`

    /tmp/tmpozr7mj5y.d(15): Error: no property `sort` for type `long[]`

    /tmp/tmpozr7mj5y.d(34): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpozr7mj5y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] lret = new long[0];\n    long[] l1copy = l1.dup;\n    for (int\
    \ i=0; i<l2.length; i++)\n    {\n        if (l1copy.find(l2[i]) >= 0)\n      \
    \  {\n            lret ~= l2[i];\n            l1copy.remove(l2[i]);\n        }\n\
    \    }\n    lret.sort;\n    return lret;\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppadt9j7w.d(18): Error: no property `find` for type `long[]`

    /tmp/tmppadt9j7w.d(21): Error: no property `remove` for type `long[]`

    /tmp/tmppadt9j7w.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppadt9j7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return std.algorithm.sort(std.algorithm.unique(l1.intersect(l2)));\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr_na95hq.d(14): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr_na95hq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return std.sort(std.uniq(std.array(std.setintersection(l1, l2))));\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpodbk3wgk.d(14): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpodbk3wgk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    immutable l3 = set(l1) & set(l2);\n    return typeof(l3) == set[long]\
    \ ?\n        [ (typeof(l3) is set[long]) ? l3.popFront().get : l3.popFront() \n\
    \            while (l3.length != 0) ] : null;\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmorlszts.d(15): Error: found `]` when expecting `.` following long

    /tmp/tmpmorlszts.d(15): Error: found `?` when expecting identifier following `long`.

    /tmp/tmpmorlszts.d(16): Error: found `]` when expecting `.` following long

    /tmp/tmpmorlszts.d(16): Error: found `)` when expecting identifier following `long`.

    /tmp/tmpmorlszts.d(17): Error: found `while` when expecting `,`

    /tmp/tmpmorlszts.d(16): Error: found `:` when expecting `)`

    /tmp/tmpmorlszts.d(17): Error: found `null` when expecting `,`

    /tmp/tmpmorlszts.d(17): Error: expression expected, not `;`

    /tmp/tmpmorlszts.d(18): Error: found `}` when expecting `,`

    /tmp/tmpmorlszts.d(19): Error: expression expected, not `unittest`

    /tmp/tmpmorlszts.d(20): Error: found `{` when expecting `,`

    /tmp/tmpmorlszts.d(21): Error: expression expected, not `alias`

    /tmp/tmpmorlszts.d(21): Error: found `candidate` when expecting `,`

    /tmp/tmpmorlszts.d(21): Error: expression expected, not `=`

    /tmp/tmpmorlszts.d(21): Error: found `common` when expecting `,`

    /tmp/tmpmorls'
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    l1.sort();\n    l2.sort();\n    long[] big, small;\n    if (l1.length\
    \ > l2.length) {\n        big = l1;\n        small = l2;\n    } else {\n     \
    \   big = l2;\n        small = l1;\n    }\n    auto res = new typeof(null) * ();\n\
    \    foreach (i, r; small) {\n        auto it = std.algorithm.lower_bound(big,\
    \ r);\n        if (it != big.length && *it == r) {\n            res ~= r;\n  \
    \      }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpek_21dtd.d(14): Error: no property `sort` for type `long[]`

    /tmp/tmpek_21dtd.d(15): Error: no property `sort` for type `long[]`

    /tmp/tmpek_21dtd.d(26): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpek_21dtd.d(28): Error: cannot append type `long` to type `typeof(null)**`

    /tmp/tmpek_21dtd.d(31): Error: cannot implicitly convert expression `res` of type
    `typeof(null)**` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpek_21dtd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\timport std.algorithm.comparison;\n\talias cmp = (a, b) => a - b;\n\t\
    return l1.dup.intersect(l2, cmp).sort(cmp).dup;\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp61__42ij.d(16): Error: no property `intersect` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61__42ij.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto s = new SortedSet!(long)();\n    foreach (e; l1)\n    {\n    \
    \    if (e in l2)\n            s.insert(e);\n    }\n    return s.array;\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdy6wv1qd.d(14): Error: template instance `SortedSet!long` template
    `SortedSet` is not defined

    /tmp/tmpdy6wv1qd.d(17): Error: incompatible types for `(e) in (l2)`: `long` and
    `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdy6wv1qd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto v = l1.array.sort().uniq.intersect(l2.array.sort().uniq);\n  \
    \  return v.length == 0 ? null : v.array;\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp39kq5iug.d(14): Error: no property `array` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp39kq5iug.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return sorted(to(l1).intersection(to(l2)));\n}\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplx4hk142.d(14): Error: undefined identifier `sorted`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplx4hk142.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return Array!(long)(typeof(l1).init).opApply!((n) {if (l1.canFind(n)\
    \ && l2.canFind(n)) return n; else return 0L;}).filter!((n) => n != 0L).sort().uniq();\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphfxli9_b.d(14): Error: template instance `Array!long` template
    `Array` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphfxli9_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    l1.sort();\n    l2.sort();\n    auto r1 = l1.uniq;\n    auto r2 = l2.uniq;\n\
    \    auto r = new long[];\n    foreach(e1; r1)\n    {\n        foreach(e2; r2)\n\
    \        {\n            if(e1 == e2)\n            {\n                r ~= e1;\n\
    \            }\n        }\n    }\n    return r;\n}\n/*\nReturn sorted unique elements\
    \ in first array that are not in the second.\n    \n    >>> difference([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [2L, 3L, 4L,\
    \ 34L]\n    >>> difference([5L, 3L, 2L, 8L], [3L, 2L])\n    [5L, 8L]\n    \n*/\n\
    long[] difference(long[] l1, long[] l2) \n{\n    l1.sort();\n    l2.sort();\n\
    \    auto r1 = l1.uniq;\n    auto r2 = l2.uniq;\n    auto r = new long[];\n  \
    \  foreach(e1; r1)\n    {\n        foreach(e2; r2)\n        {\n            if(e1\
    \ == e2)\n            {\n                break;\n            }\n            else\
    \ if(e1 != e2 && e2 == r2.back)\n            {\n                r ~= e1;\n   \
    \         }\n        }\n    }\n    return r;\n}\n/*\nReturn sorted unique elements\
    \ that are in either of the arrays.\n    \n    >>> union([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 2L, 3L, 4L, 5L, 653L, 7L,\
    \ 9L, 34L, 121L]\n    >>> union([5L, 3L, 2L, 8L],\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp36khmdr0.d(63): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36khmdr0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return array(sort(array(union(array(l1), array(l2)))).length, {index\
    \ =>\n        count(l1, x => x == sort(array(union(array(l1), array(l2)))).length[index])\n\
    \        ==\n        count(l2, x => x == sort(array(union(array(l1), array(l2)))).length[index])\n\
    \        }).filter!(x => x).map!(x => sort(array(union(array(l1), array(l2)))).length[x]).array;\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp60ppn4dg.d(14): Error: expression expected, not `union`

    /tmp/tmp60ppn4dg.d(15): Error: expression expected, not `union`

    /tmp/tmp60ppn4dg.d(17): Error: expression expected, not `union`

    /tmp/tmp60ppn4dg.d(18): Error: found `}` when expecting `;` following statement

    /tmp/tmp60ppn4dg.d(18): Error: found `)` instead of statement

    /tmp/tmp60ppn4dg.d(20): Error: found `unittest` when expecting `,`

    /tmp/tmp60ppn4dg.d(29): Error: found `void` when expecting `,`

    /tmp/tmp60ppn4dg.d(29): Error: found `{` when expecting `,`

    /tmp/tmp60ppn4dg.d(29): Error: expression expected, not `}`

    /tmp/tmp60ppn4dg.d(29): Error: found `End of File` when expecting `,`

    /tmp/tmp60ppn4dg.d(29): Error: found `End of File` when expecting `)`

    /tmp/tmp60ppn4dg.d(29): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmp60ppn4dg.d(29): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp60ppn4dg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] l1_uniq = uniq(l1);\n    long[] l2_uniq = uniq(l2);\n    long[]\
    \ l1_l2_intersect = intersect(l1_uniq, l2_uniq);\n    long[] l1_l2_intersect_sorted\
    \ = sort(l1_l2_intersect);\n    return l1_l2_intersect_sorted;\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvescr_ey.d(14): Error: undefined identifier `uniq`

    /tmp/tmpvescr_ey.d(15): Error: undefined identifier `uniq`

    /tmp/tmpvescr_ey.d(16): Error: undefined identifier `intersect`

    /tmp/tmpvescr_ey.d(17): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvescr_ey.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] res = [];\n    auto map1 = l1.unique;\n    auto map2 = l2.unique;\n\
    \    foreach(int i; 0..map1.length) \n    {\n        if(map2.find(map1[i]) !=\
    \ map2.end) \n        {\n            res ~= map1[i];\n        }\n    }\n    return\
    \ res.sort;\n}\n/*\nReturn sorted unique elements for array.\n    >>> unique([5L,\
    \ 3L, 2L, 3L, 2L, 8L])\n    [2L, 3L, 5L, 8L]\n*/\nlong[] unique(long[] l) \n{\n\
    \    return l.sort.array;\n}\n/*\nReturn the mean of the elements of an array.\n\
    \    >>> mean([1L, 2L, 3L, 4L, 5L])\n    3L\n*/\nlong mean(long[] l) \n{\n   \
    \ return l.sum / l.length;\n}\n/*\nReturn the harmonic mean of the elements of\
    \ an array.\n    >>> harmonic_mean([1L, 2L, 3L, 4L, 5L])\n    1.8708286933869707L\n\
    */\nlong harmonic_mean(long[] l) \n{\n    return l.length / l.map!(x => 1L / x).sum;\n\
    }\n/*\nReturn the median of the elements of an array.\n    >>> median([1L, 2L,\
    \ 3L, 4L, 5L])\n    3L\n    >>> median([1L, 2L, 3L, 4L, 5L, 6L])\n    3L\n*/\n\
    long median(long[] l) \n{\n    int l_length = l.length;\n    if(l_length % 2 ==\
    \ 0) \n    {\n        return (l[l_length / 2 - 1] + l[l_length / 2]) / 2;\n  \
    \  }\n    else \n    {\n        return l[l_length / 2];\n    }\n}\n/*\nReturn\
    \ the mode of the elements of an array.\n    >>> mode([1L, 2L, 3L, 4L, 4L, 5L\n\
    unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L,\
    \ 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3rwixq23.d(72): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3rwixq23.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return join(intersect(l1, l2));\n}\n/*\nReturn unique elements of the\
    \ iterable.\n    >>> unique([1L, 2L, 4L, 2L, 1L, 4L, 3L, 2L, 4L, 1L, 2L, 4L, 3L,\
    \ 1L, 2L, 3L, 3L, 3L, 3L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L,\
    \ 2L, 2L, 1L, 1L, 1L, 2L, 3L, 3L, 3L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 2L, 2L, 2L,\
    \ 2L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 3L, 3L, 3L, 2L, 1L, 1L, 1L, 2L, 1L, 2L,\
    \ 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 3L, 3L, 3L, 2L, 1L, 1L, 1L,\
    \ 2L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 3L, 3L, 3L, 2L,\
    \ 1L, 1L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 3L,\
    \ 3L, 3L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 1L, 1L,\
    \ 1L, 2L, 3L, 3L, 3L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 2L, 2\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7237azl0.d(16): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7237azl0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    // Remove duplicate elements and sort.\n    l1 = l1.uniq.sort;\n  \
    \  l2 = l2.uniq.sort;\n    // Binary search to find common elements.\n    long[]\
    \ common = new long[](l1.length);\n    int n = 0;\n    foreach (item; l1) \n \
    \   {\n        if (item in l2) \n        {\n            common[n] = item;\n  \
    \          n++;\n        }\n    }\n    // Resize array to the correct size.\n\
    \    common = common[0 .. n];\n    return common;\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxquk6so8.d(15): Error: no property `uniq` for type `long[]`

    /tmp/tmpxquk6so8.d(16): Error: no property `uniq` for type `long[]`

    /tmp/tmpxquk6so8.d(22): Error: incompatible types for `(item) in (l2)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxquk6so8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto s1 = std.algorithm.uniq(std.algorithm.sort(l1));\n    auto s2\
    \ = std.algorithm.uniq(std.algorithm.sort(l2));\n    auto l = std.algorithm.uniq(s1.intersection(s2));\n\
    \    return l.array;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6xrdiykj.d(14): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmp6xrdiykj.d(15): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmp6xrdiykj.d(16): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6xrdiykj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    import std.algorithm.comparison : equal;\n    return unique(l1.intersect(l2).sort());\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpldig5rux.d(15): Error: undefined identifier `unique`, did you mean
    struct `Unique(T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpldig5rux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] l3;\n    if (l1.length > l2.length)\n    {\n        l3 = l1;\n\
    \        l1 = l2;\n        l2 = l3;\n    }\n    l3 = l1.dup;\n    l3.sort;\n \
    \   for (int i = 0; i < l1.length; i++)\n    {\n        foreach (j; 0 .. l2.length)\n\
    \        {\n            if (l1[i] == l2[j])\n            {\n                continue;\n\
    \            }\n            l3 -= l1[i];\n        }\n    }\n    return l3;\n}\n\
    /*\nRemove null values from an array.\n    >>> removeNull([null, 4L, 2L, null,\
    \ 6L, null, 8L])\n    [4L, 2L, 6L, 8L]\n*/\nT[] removeNull(T)(T[] in) \n{\n  \
    \  in.remove(null);\n    return in;\n}\n/*\nReturn a sorted array without duplicate\
    \ elements.\n    >>> unique([1L, 4L, 3L, 34L, 653L, 2L, 5L])\n    [1L, 2L, 3L,\
    \ 4L, 5L, 34L, 653L]\n    >>> unique([1L, 3L, 1L, 3L, 5L, 3L, 7L])\n    [1L, 3L,\
    \ 5L, 7L]\n*/\nT[] unique(T)(T[] a) \n{\n    return a.assumeUnique;\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nkwdvok.d(41): Error: found `in` when expecting `)`

    /tmp/tmp6nkwdvok.d(41): Error: semicolon expected following function declaration

    /tmp/tmp6nkwdvok.d(41): Error: declaration expected, not `)`

    /tmp/tmp6nkwdvok.d(44): Error: declaration expected, not `return`

    /tmp/tmp6nkwdvok.d(45): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nkwdvok.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    alias M = Map!(long, int);\n    M cnt1 = M(l1.length), cnt2 = M(l2.length);\n\
    \    foreach (x; l1) cnt1[x]++;\n    foreach (x; l2) cnt2[x]++;\n    M res;\n\
    \    foreach (k; cnt1.keys) if (cnt2.byKey.get(k)) res[k] = min(cnt1[k], cnt2[k]);\n\
    \    return res.keys.sort;\n}\nunittest\n{\n    alias candidate = common;\n\n\
    \    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn5vbkv3p.d(14): Error: template instance `Map!(long, int)` template
    `Map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn5vbkv3p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tl1.sort;\n\tl2.sort;\n\tauto c1 = l1.unique;\n\tauto c2 = l2.unique;\n\
    \treturn c1.intersection(c2);\n}\n/*\nReturn sorted unique common elements for\
    \ two tuples.\n    >>> common(tuple(1L, 4L, 3L, 34L, 653L, 2L, 5L), tuple(5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L))\n    (1L, 5L, 653L)\n    >>> common(tuple(5L, 3L,\
    \ 2L, 8L), tuple(3L, 2L))\n    (2L, 3L)\n*/\nTuple!(long[]) common(Tuple!(long[])\
    \ t1, Tuple!(long[]) t2)\n{\n\tauto c1 = common(t1[0], t2[0]);\n\tauto c2 = common(t1[1],\
    \ t2[1]);\n\treturn tuple(c1, c2);\n}\n/*\nReturn sorted unique common elements\
    \ for two tuples.\n    >>> common(array(1L, 4L, 3L, 34L, 653L, 2L, 5L), array(5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L))\n    [1L, 5L, 653L]\n    >>> common(array(5L, 3L,\
    \ 2L, 8L), array(3L, 2L))\n    [2L, 3L]\n*/\nlong[] common(Array!(long) a1, Array!(long)\
    \ a2)\n{\n\tauto c1 = common(a1.array, a2.array);\n\treturn c1;\n}\n/*\nReturn\
    \ sorted unique common elements for two tuples.\n    >>> common(tuple(1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L), tuple(5L, 7L, 1L, 5L, 9L, 653L, 121L))\n    (1L, 5L,\
    \ 653L)\n    >>> common(tuple(5L, 3L,\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt2ug354s.d(45): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt2ug354s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] res;\n    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n\
    \        {\n            if (e1 == e2)\n            {\n                res ~= e1;\n\
    \            }\n        }\n    }\n    res = sort(res);\n    return uniq(res);\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2no_xvsw.d(25): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp2no_xvsw.d(26): Error: undefined identifier `uniq`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2no_xvsw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[long[]] hash = new long[long[]][](max(l1.length, l2.length));\n\
    \    foreach (elem; l1)\n    {\n        hash[elem] ~= elem;\n    }\n    foreach\
    \ (elem; l2)\n    {\n        hash[elem] ~= elem;\n    }\n    long[] r = [];\n\
    \    foreach (k,v; hash)\n    {\n        if (v.length == 2)\n        {\n     \
    \       r ~= k;\n        }\n    }\n    r.sort();\n    return r;\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdmfue29q.d(14): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpdmfue29q.d(17): Error: cannot implicitly convert expression `elem` of
    type `long` to `const(long)[]`

    /tmp/tmpdmfue29q.d(21): Error: cannot implicitly convert expression `elem` of
    type `long` to `const(long)[]`

    /tmp/tmpdmfue29q.d(26): Error: no property `length` for type `long`

    /tmp/tmpdmfue29q.d(31): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdmfue29q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n  auto result = new long[0];\n  foreach (a; l1) \n  {\n    auto i = l2.countUntil(a);\n\
    \    if (i != l2.length) \n    {\n      result ~= a;\n      l2 = l2[0 .. i] ~\
    \ l2[i + 1 .. $];\n    }\n  }\n  return sort(result);\n}\nlong[] common(long[]\
    \ l1, in[] l2) \n{\n  return common(l1, cast(long[]) l2);\n}\nlong[] common(in[]\
    \ l1, long[] l2) \n{\n  return common(cast(long[]) l1, l2);\n}\nlong[] common(in[]\
    \ l1, in[] l2) \n{\n  return common(cast(long[]) l1, cast(long[]) l2);\n}\n/*\n\
    Return sorted unique common elements for two arrays.\n    >>> common([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n\
    \    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpvfzctk.d(26): Error: basic type expected, not `[`

    /tmp/tmprpvfzctk.d(30): Error: basic type expected, not `[`

    /tmp/tmprpvfzctk.d(34): Error: basic type expected, not `[`

    /tmp/tmprpvfzctk.d(34): Error: basic type expected, not `[`

    /tmp/tmprpvfzctk.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpvfzctk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return common(l1, l2, Tuple!(long,long)(compare, compare));\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp01ie7mlf.d(14): Error: undefined identifier `compare`

    /tmp/tmp01ie7mlf.d(14): Error: undefined identifier `compare`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp01ie7mlf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto result = long[];\n    ulong size = l1.length;\n    for (ulong\
    \ i = 0; i < size; i++) \n    {\n        if (l1[i] in l2) \n        {\n      \
    \      result ~= l1[i];\n        }\n    }\n    // sort\n    result.sort;\n   \
    \ // unique\n    auto unique = result.dup;\n    unique.length = unique.dup.length;\n\
    \    foreach (ulong i, long e; result) \n    {\n        if (e in unique) \n  \
    \      {\n            result[i] = 0;\n        } \n        else \n        {\n \
    \           unique ~= e;\n        }\n    }\n    return result.dup;\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo8_eltsg.d(14): Error: found `[` when expecting `.` following long

    /tmp/tmpo8_eltsg.d(14): Error: found `]` when expecting identifier following `long`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo8_eltsg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto nums1 = sort(l1);\n    auto nums2 = sort(l2);\n    auto list =\
    \ [];\n    for (size_t i = 0; i < nums1.length; i++) \n    {\n        auto num\
    \ = nums1[i];\n        if (num in nums2 && num !in list) \n        {\n       \
    \     list ~= num;\n        }\n    }\n    return list;\n}\n \nunittest\n{\n  \
    \  alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L,\
    \ 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdqayvtvb.d(14): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpdqayvtvb.d(15): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpdqayvtvb.d(25): Error: cannot implicitly convert expression `list` of
    type `void[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdqayvtvb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] unique = unique(l1, l2);\n    long[] sorted = sort(unique);\n\
    \    long[] r;\n    size_t i = 0;\n    foreach (v; sorted)\n    {\n        if\
    \ (find(l1, v) != -1 && find(l2, v) != -1)\n        {\n            r ~= v;\n \
    \       }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpylx4biqa.d(14): Error: undefined identifier `unique`, did you mean
    struct `Unique(T)`?

    /tmp/tmpylx4biqa.d(15): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpylx4biqa.d(20): Error: undefined identifier `find`, did you mean template
    `Bind(alias Template, args1...)`?

    /tmp/tmpylx4biqa.d(20): Error: undefined identifier `find`, did you mean template
    `Bind(alias Template, args1...)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpylx4biqa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tl1.sort();\n\tl2.sort();\n\tauto ret = [];\n\tforeach(a,b; zip(l1,l2))\n\
    \t{\n\t\tif(a == b) ret ~= a;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp57vyxlqa.d(14): Error: no property `sort` for type `long[]`

    /tmp/tmp57vyxlqa.d(15): Error: no property `sort` for type `long[]`

    /tmp/tmp57vyxlqa.d(17): Error: undefined identifier `zip`

    /tmp/tmp57vyxlqa.d(21): Error: cannot implicitly convert expression `ret` of type
    `void[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp57vyxlqa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n  if (l1.length > l2.length) \n  {\n    return common(l2, l1);\n  }\n \
    \ return l1.retain!((a) => l2.canFind(a));\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdmobakuv.d(18): Error: no property `retain` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdmobakuv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    if(l1.length < l2.length)\n        return common(l2, l1);\n    HashSet!(long)\
    \ hashSet = new HashSet!(long)(l2);\n    Array result = new Array!(long)();\n\
    \    foreach(i; l1)\n    {\n        if(hashSet.remove(i))\n            result.push(i);\n\
    \    }\n    return sort(result);\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7pjqozpb.d(16): Error: template instance `HashSet!long` template
    `HashSet` is not defined

    /tmp/tmp7pjqozpb.d(16): Error: template instance `HashSet!long` template `HashSet`
    is not defined

    /tmp/tmp7pjqozpb.d(17): Error: undefined identifier `Array`

    /tmp/tmp7pjqozpb.d(17): Error: template instance `Array!long` template `Array`
    is not defined

    /tmp/tmp7pjqozpb.d(23): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pjqozpb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return SortedSet!(long)(l1).intersection(SortedSet!(long)(l2)).array;\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnjetl_f8.d(14): Error: template instance `SortedSet!long` template
    `SortedSet` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnjetl_f8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] l3 = [] ; \n    foreach(e1 ; l1)\n    {\n        foreach(e2\
    \ ; l2)\n        {\n            if(e1 == e2)\n            {\n                l3\
    \ ~= e1;\n            } \n        }\n    }\n    l3 = uniq(l3);\n    std.algorithm.sort(l3);\n\
    \    return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzdu365t8.d(25): Error: undefined identifier `uniq`

    /tmp/tmpzdu365t8.d(26): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzdu365t8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n   \n    return sort(to!(long[])(intersect(l1, l2)));\nunittest\n{\n  \
    \  alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L,\
    \ 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcigzwuqh.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcigzwuqh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\treturn enum(l1).intersect(l2).array();\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxgkgd7aw.d(14): Error: expression expected, not `enum`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxgkgd7aw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return l1.filter!(x => l2.count(x)).sort;\n}\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplygztvee.d(14): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplygztvee.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto l3 = l1.filter!(l2.canFind)();\n    std.array.sort(l3);\n    return\
    \ l3.dedup();\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4uolplrr.d(14): Error: no property `filter` for type `long[]`

    /tmp/tmp4uolplrr.d(15): Error: undefined identifier `array` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4uolplrr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tlong[] u1 = [l1[0]];\n\tforeach(e; l1[1..$]) {\n\t\tif(e != u1[$-1])\
    \ {\n\t\t\tu1 ~= e;\n\t\t}\n\t}\n\t\n\tlong[] u2 = [l2[0]];\n\tforeach(e; l2[1..$])\
    \ {\n\t\tif(e != u2[$-1]) {\n\t\t\tu2 ~= e;\n\t\t}\n\t}\n\t\n\tif(u1.length >\
    \ u2.length) {\n\t\tlong[] t = u1;\n\t\tu1 = u2;\n\t\tu2 = t;\n\t}\n\t\n\tlong[]\
    \ r = [];\n\t\n\tforeach(e; u1) {\n\t\tif(u2.canFind(e)) {\n\t\t\tr ~= e;\n\t\t\
    }\n\t}\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate = common;\n\n   \
    \ assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt0qvfzez.d(37): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt0qvfzez.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    if (l1.length == 0 || l2.length == 0) \n    {\n        return new long[0];\n\
    \    }\n    int[] i1, i2;\n    long[] l;\n    if (l1.length > l2.length) \n  \
    \  {\n        i1 = l1.idup;\n        i2 = l2.idup;\n        l = l2;\n    } \n\
    \    else \n    {\n        i1 = l2.idup;\n        i2 = l1.idup;\n        l = l1;\n\
    \    }\n    i1.sort;\n    i2.sort;\n    size_t[] indices;\n    size_t numIdx =\
    \ i2.lowerBound(i1, 0, cast(size_t)l.length, &indices);\n    auto result = new\
    \ long[numIdx];\n    foreach (idx; indices[0..numIdx]) \n    {\n        result[idx]\
    \ = l[idx];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L,\
    \ 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L,\
    \ 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L,\
    \ 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpczr1veq5.d(22): Error: cannot implicitly convert expression `idup(l1)`
    of type `immutable(long)[]` to `int[]`

    /tmp/tmpczr1veq5.d(23): Error: cannot implicitly convert expression `idup(l2)`
    of type `immutable(long)[]` to `int[]`

    /tmp/tmpczr1veq5.d(28): Error: cannot implicitly convert expression `idup(l2)`
    of type `immutable(long)[]` to `int[]`

    /tmp/tmpczr1veq5.d(29): Error: cannot implicitly convert expression `idup(l1)`
    of type `immutable(long)[]` to `int[]`

    /tmp/tmpczr1veq5.d(32): Error: no property `sort` for type `int[]`

    /tmp/tmpczr1veq5.d(33): Error: no property `sort` for type `int[]`

    /tmp/tmpczr1veq5.d(35): Error: no property `lowerBound` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpczr1veq5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] result = new long[0L];\n    auto s1 = set(l1);\n    auto s2\
    \ = set(l2);\n    for (a; s1.byKey()) \n    {\n        if (s2.byKey()) \n    \
    \    {\n            if (a.key == s2.get().key) \n            {\n             \
    \   result ~= a.key;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L,\
    \ 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt4kjo279.d(17): Error: found `)` when expecting `;` following `for`
    condition

    /tmp/tmpt4kjo279.d(27): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4kjo279.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto rez = l1.filter!(a => l2.canFind(a)).array;\n    rez.sort;\n \
    \   rez.unique;\n    return rez;\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0q24tf8o.d(14): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0q24tf8o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto s1 = set(l1);\n    auto s2 = set(l2);\n    auto intersect = s1.intersection(s2);\n\
    \    return to!(long[])(intersect);\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwupct7w5.d(14): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmpwupct7w5.d(15): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmpwupct7w5.d(17): Error: template instance `to!(long[])` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwupct7w5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    if (l1.length < l2.length) \n    {\n        return common(l2, l1);\n\
    \    }\n    return l1.filter!(a => l2.canFind(a)).sort().uniq;\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4yykqxqw.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4yykqxqw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tlong[] l = [];\n\tsort(l1);\n\tsort(l2);\n\tforeach(a; l1)\n\t{\n\t\t\
    foreach(b; l2)\n\t\t{\n\t\t\tif(a == b)\n\t\t\t{\n\t\t\t\tl ~= a;\n\t\t\t}\n\t\
    \t}\n\t}\n\tlong[] fin;\n\tforeach(i;l)\n\t{\n\t\tif(i !in fin)\n\t\t{\n\t\t\t\
    fin ~= i;\n\t\t}\n\t}\n\treturn fin;\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6itiguis.d(15): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp6itiguis.d(16): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp6itiguis.d(30): Error: incompatible types for `(i) in (fin)`: `long` and
    `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6itiguis.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] ret = new long[0L];\n    foreach (n; l1)\n    {\n        if\
    \ (std.algorithm.binarySearch(l2, n)) \n        {\n            ret ~= n;\n   \
    \     }\n    }\n    return ret.sort().uniq;\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzy0qk06.d(17): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpmzy0qk06.d(22): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzy0qk06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    if (l1.length == 0 || l2.length == 0)\n    {\n        return null;\n\
    \    }\n    long[] result = null;\n    std.array.sort(l1);\n    std.array.sort(l2);\n\
    \    foreach (long a; l1)\n    {\n        if (std.algorithm.find(l2, a) != l2.length)\n\
    \        {\n            l2 = std.algorithm.remove(l2, a);\n            result\
    \ ~= a;\n        }\n    }\n    return result;\n}\n/*\n    >>> common([], [])\n\
    \    null\n*/\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbwye0up7.d(19): Error: undefined identifier `array` in package
    `std`

    /tmp/tmpbwye0up7.d(20): Error: undefined identifier `array` in package `std`

    /tmp/tmpbwye0up7.d(23): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpbwye0up7.d(25): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbwye0up7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    // https://stackoverflow.com/questions/1403877/how-do-i-find-the-common-values-in-two-arrays-in-php\n\
    \    // main difference is we don't care about the number of elements in each\
    \ array.\n    long[] l3 = new long[max(l1.length, l2.length)];\n    int total\
    \ = 0;\n    for (int i = 0; i < l1.length; i++) {\n        bool found = false;\n\
    \        long l1_i = l1[i];\n        for (int j = 0; j < l2.length; j++) {\n \
    \           if (l1_i == l2[j]) {\n                found = true;\n            \
    \    break;\n            }\n        }\n        if (found) {\n            l3[total]\
    \ = l1_i;\n            total++;\n        }\n    }\n    return l3[0..total];\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwv8eys40.d(16): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwv8eys40.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto output = [];\n    for (size_t i = 0; i < l1.length; i++)\n   \
    \ {\n        for (size_t j = 0; j < l2.length; j++)\n        {\n            if\
    \ (l1[i] == l2[j]) \n            {\n                output ~= l1[i];\n       \
    \     }\n        }\n    }\n    return output.sort().uniq;\n}\n \nunittest\n{\n\
    \    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpix0oyr2u.d(21): Error: cannot append type `long` to type `void[]`

    /tmp/tmpix0oyr2u.d(25): Error: no property `sort` for type `void[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpix0oyr2u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto s1 = set(l1);\n    auto s2 = set(l2);\n    auto common = s1.intersection(s2);\n\
    \    return common.array;\n}\n/*\nCreate enumerated tuple from input parameters.\n\
    \    >>> tupleEnum([\"one\", \"two\", \"three\", \"four\"])\n    [((0, \"one\"\
    ), 1), ((1, \"two\"), 2), ((2, \"three\"), 3), ((3, \"four\"), 4)]\n    >>> tupleEnum([\"\
    one\", \"two\", \"three\", \"four\"], start=5)\n    [((5, \"one\"), 6), ((6, \"\
    two\"), 7), ((7, \"three\"), 8), ((8, \"four\"), 9)]\n*/\nTuple!(int,string)[][2]\
    \ tupleEnum(string[] l, size_t start=0) \n{\n    auto ret = appender!(Tuple!(int,string)[][2])();\n\
    \    foreach(i, s; l)\n    {\n        ret.put((tuple(i+start, s), i+start+1));\n\
    \    }\n    return ret.data;\n}\n/*\n  Convert string to integer.\n  >>> stringToInt(\"\
    1024\")\n  1024\n  >>> stringToInt(\"-1024\")\n  -1024\n  >>> stringToInt(\"ten\"\
    )\n  0\n  >>> stringToInt(\"3.14\")\n  0\n*/\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnl5tqa46.d(14): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmpnl5tqa46.d(15): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmpnl5tqa46.d(28): Error: template instance `appender!(Tuple!(int, string)[][2])`
    template `appender` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnl5tqa46.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return sort(l1).retain(l2);\n}\nunittest\n{\n    alias candidate =\
    \ common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L,\
    \ 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L,\
    \ 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L,\
    \ 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8uxiokm.d(14): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8uxiokm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    bool[] seen = bool[l1.length];\n    long[] result = [];\n    foreach\
    \ (int i; 0 .. l1.length) \n    {\n        if (l1[i] in l2) \n        {\n    \
    \        if (!seen[i]) \n            {\n                seen[i] = true;\n    \
    \            result ~= l1[i];\n            }\n        }\n    }\n    return result.sort();\n\
    }\n/*\nReturn sorted unique elements in l1 that are not in l2.\n    >>> difference([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [2L, 3L,\
    \ 4L, 34L]\n    >>> difference([5L, 3L, 2L, 8L], [3L, 2L])\n    [5L, 8L]\n*/\n\
    long[] difference(long[] l1, long[] l2) \n{\n    bool[] seen = bool[l1.length];\n\
    \    long[] result = [];\n    foreach (int i; 0 .. l1.length) \n    {\n      \
    \  if (!(l1[i] in l2)) \n        {\n            if (!seen[i]) \n            {\n\
    \                seen[i] = true;\n                result ~= l1[i];\n         \
    \   }\n        }\n    }\n    return result.sort();\n}\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpssqlu0e7.d(14): Error: found `[` when expecting `.` following bool

    /tmp/tmpssqlu0e7.d(14): Error: semicolon expected, not `]`

    /tmp/tmpssqlu0e7.d(14): Error: found `]` instead of statement

    /tmp/tmpssqlu0e7.d(38): Error: found `[` when expecting `.` following bool

    /tmp/tmpssqlu0e7.d(38): Error: semicolon expected, not `]`

    /tmp/tmpssqlu0e7.d(38): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpssqlu0e7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    int s1 = l1.length;\n    int s2 = l2.length;\n    if (s1 < s2) \n \
    \   {\n        return common(l2, l1);\n    }\n    else \n    {\n        l1.sort;\n\
    \        l2.sort;\n        long[] res = new long[s2];\n        int j = 0;\n  \
    \      for (int i = 0; i < s2; i++) \n        {\n            if (l1.binarySearch(l2[i])\
    \ != -1) \n            {\n                res[j] = l2[i];\n                j++;\n\
    \            }\n        }\n        return res[0..j];\n    }\n}\n// another implementation\n\
    long[] common2(long[] l1, long[] l2) \n{\n    l1.sort;\n    l2.sort;\n    long[]\
    \ l3 = new long[max(l1.length, l2.length)];\n    int res = l1.binaryUnion(l2,\
    \ l3);\n    return l3[0..res];\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzgzue5pl.d(14): Error: cannot implicitly convert expression `l1.length`
    of type `ulong` to `int`

    /tmp/tmpzgzue5pl.d(15): Error: cannot implicitly convert expression `l2.length`
    of type `ulong` to `int`

    /tmp/tmpzgzue5pl.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmpzgzue5pl.d(23): Error: no property `sort` for type `long[]`

    /tmp/tmpzgzue5pl.d(28): Error: no property `binarySearch` for type `long[]`

    /tmp/tmpzgzue5pl.d(40): Error: no property `sort` for type `long[]`

    /tmp/tmpzgzue5pl.d(41): Error: no property `sort` for type `long[]`

    /tmp/tmpzgzue5pl.d(42): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpzgzue5pl.d(43): Error: no property `binaryUnion` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgzue5pl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    \n    long[] result = new long[0L];\n    auto unique_l1 = unique(l1);\n\
    \    auto unique_l2 = unique(l2);\n    if (l1.length < l2.length)\n    {\n   \
    \     foreach (i, value; unique_l1)\n        {\n            if (exists(unique_l2,\
    \ value))\n            {\n                result ~= value;\n            }\n  \
    \      }\n    }\n    else\n    {\n        foreach (i, value; unique_l2)\n    \
    \    {\n            if (exists(unique_l1, value))\n            {\n           \
    \     result ~= value;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfpxf3x5n.d(16): Error: undefined identifier `unique`, did you mean
    struct `Unique(T)`?

    /tmp/tmpfpxf3x5n.d(17): Error: undefined identifier `unique`, did you mean struct
    `Unique(T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpxf3x5n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n  auto indices = appender!(ubyte[])();\n  foreach (index, const e; l1)\
    \ {\n    if (l2.indexOf(e) != -1) {\n      indices.put(cast(ubyte)index);\n  \
    \  }\n  }\n  auto sorted = indices.data.sort(std.array.sort!(\"a < b\"));\n  auto\
    \ unique = sorted.dup.unique;\n  auto l = sort!((a, b) => a < b)(l1.array.get(unique));\n\
    \  return l;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjyfdiree.d(14): Error: template instance `appender!(ubyte[])` template
    `appender` is not defined

    /tmp/tmpjyfdiree.d(16): Error: no property `indexOf` for type `long[]`

    /tmp/tmpjyfdiree.d(22): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjyfdiree.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    // Iterate over unique values of l1.\n    // If l2 contains that value,\
    \ add to common.\n    return l1.dup.retain!(a => l2.retain!(b => a == b)).uniq;\n\
    }\n/*\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdc6temh3.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdc6temh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return sort!(\"a-b\")(cast(shared long[])l1 & cast(shared long[])l2);\n\
    }\n/*\nReturn sorted unique elements for a random array.\n    >>> unique([5L,\
    \ 3L, 2L, 8L, 3L, 2L])\n    [2L, 3L, 5L, 8L]\n    >>> unique([])\n    []\n   \
    \ >>> unique([1L])\n    [1L]\n*/\nlong[] unique(long[] arr) \n{\n    return sort!(\"\
    a-b\")(cast(shared long[])arr);\n}\n/*\nGenerate a random array of integers.\n\
    \    >>> random_array(10)\n    [703L, 1L, 846L, 663L, 896L, 521L, 175L, 801L,\
    \ 726L, 590L]\n    >>> random_array(0)\n    []\n    >>> random_array(5)\n    [958L,\
    \ 434L, 7L, 4L, 694L]\n    >>> random_array(1)\n    [962L]\n*/\nlong[] random_array(long\
    \ n) \n{\n    long[] ret;\n    ret.length = n;\n    foreach (i, ref e; ret) {\n\
    \        e = uniform(0L, 1000L);\n    }\n    return ret;\n}\n/*\nReturn the sum\
    \ of a random array.\n    >>> sum_array([5L, 3L, 2L, 8L, 3L, 2L])\n    23L\n \
    \   >>> sum_array([])\n    0L\n    >>> sum_array([1L])\n    1L\n*/\nlong sum_array(long[]\
    \ arr) \n{\n    long ret = 0L;\n    foreach (e; arr) {\n        ret += e;\n  \
    \  }\n    return ret;\n}\n/*\nReturn the average of a random array.\n    >>> average([5L,\
    \ 3L, 2L, 8L, 3L, 2L])\n    3.8333333333333335L\n    >>> average([])\n    0L\n\
    \    >>> average([1L])\n    1L\n*/\nlong average(long[]\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk0nj3vja.d(76): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk0nj3vja.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n  long[] res = [];\n  sort(l1);\n  sort(l2);\n  long j = 0L;\n  foreach\
    \ (i; 0L .. l1.length) \n  {\n    while (j < l2.length && l2[j] < l1[i]) \n  \
    \  {\n      j++;\n    }\n    if (j < l2.length && l2[j] == l1[i]) \n    {\n  \
    \    res ~= l1[i];\n    }\n  }\n  return res;\n}\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([4L, 1L, 1L, 6L, 6L, 5L, 7L, 8L, 1L,\
    \ 3L, 2L, 9L], [1L, 5L, 6L, 2L, 3L, 3L, 1L, 7L, 4L, 5L, 1L, 1L])\n    [1L, 2L,\
    \ 3L, 4L, 5L, 6L, 7L]\n    >>> common([2L, 3L, 3L, 5L, 7L, 1L, 5L, 4L, 4L, 9L,\
    \ 4L, 5L], [5L, 4L, 5L, 4L, 9L, 3L, 3L, 4L, 5L, 7L, 2L, 1L])\n    [1L, 2L, 3L,\
    \ 4L, 5L, 7L, 9L]\n    \n*/\nlong[] common(ref long[] l1, ref long[] l2) \n{\n\
    \  long[] res = [];\n  sort(l1);\n  sort(l2);\n  long j = 0L;\n  foreach (i; 0L\
    \ .. l1.length) \n  {\n    while (j < l2.length && l2[j] < l1[i]) \n    {\n  \
    \    j++;\n    }\n    if (j < l2.length && l2[j] == l1[i]) \n    {\n      res\
    \ ~= l1[i];\n      j++;\n    }\n  }\n  return res;\n}\n/*\nReturn sorted unique\n\
    unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L,\
    \ 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdgmada7i.d(59): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdgmada7i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    immutable long[] result = array(1L, 2L, 2L, 3L, 4L);\n    immutable\
    \ long[] result2 = array(2L, 3L, 3L, 3L, 5L);\n    if (l1.length < l2.length)\n\
    \    {\n        foreach (immutable i, immutable j; l1)\n        {\n          \
    \  immutable m = l2.contains(i);\n            if (m != -1)\n            {\n  \
    \              result ~= l1[j];\n            }\n        }\n    }\n    else \n\
    \    {\n        foreach (immutable k, immutable v; l2)\n        {\n          \
    \  immutable n = l1.contains(k);\n            if (n != -1)\n            {\n  \
    \              result2 ~= l2[v];\n            }\n        }\n    }\n    return\
    \ (result == null) ? result2 : result;\n}\nunittest\n{\n    alias candidate =\
    \ common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L,\
    \ 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L,\
    \ 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L,\
    \ 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5hp0owy.d(14): Error: undefined identifier `array`

    /tmp/tmpu5hp0owy.d(15): Error: undefined identifier `array`

    /tmp/tmpu5hp0owy.d(20): Error: no property `contains` for type `long[]`

    /tmp/tmpu5hp0owy.d(23): Error: cannot modify `immutable` expression `result`

    /tmp/tmpu5hp0owy.d(31): Error: no property `contains` for type `long[]`

    /tmp/tmpu5hp0owy.d(34): Error: cannot modify `immutable` expression `result2`

    /tmp/tmpu5hp0owy.d(38): Error: cannot implicitly convert expression `result ==
    null ? result2 : result` of type `immutable(long[])` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5hp0owy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto m = new std.unordered_map!long();\n    foreach(e; l1) m[e] = 1;\n\
    \    foreach(e; l2) m[e] = m[e]==1 ? 2 : 1;\n    return std.array.array(std.sort).unique!(e\
    \ => e > 1, m.keys);\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeqd4_go2.d(14): Error: template identifier `unordered_map` is not
    a member of import `tmpeqd4_go2.std`

    /tmp/tmpeqd4_go2.d(17): Error: undefined identifier `array` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeqd4_go2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] result = long[]();\n    foreach(element; l1)\n    {\n      \
    \  foreach(element2; l2)\n        {\n            if(element == element2)\n   \
    \         {\n                result ~= element;\n            }\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n  \
    \  assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp99z0ilim.d(14): Error: found `[` when expecting `.` following long

    /tmp/tmp99z0ilim.d(14): Error: found `]` when expecting identifier following `long`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99z0ilim.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[][] combined = [l1, l2];\n    auto a = combine(combined);\n  \
    \  a.sort();\n    auto b = a.dup;\n    b.removeDups();\n    return b;\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx9cmhn60.d(15): Error: undefined identifier `combine`, did you
    mean variable `combined`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx9cmhn60.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    \n    if (l1.length == 0 || l2.length == 0)\n    {\n        return\
    \ new long[0];\n    }\n    else\n    {\n        auto s1 = new SortedSet!(long)(l1);\n\
    \        auto s2 = new SortedSet!(long)(l2);\n        s1.findUnion(s2);\n    \
    \    return s1.data;\n    }\n}\n \n /*\n \n Return sorted unique common elements\
    \ for n arrays.\n     >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L,\
    \ 5L, 9L, 653L, 121L])\n     [1L, 5L, 653L]\n     >>> common([5L, 3L, 2L, 8L],\
    \ [3L, 2L])\n     [2L, 3L]\n     >>> common([1L,4L,3L],[5L,7L,1L],[1L,7L,9L])\n\
    \     [1L]\n     \n     \n  */\n long[] common(long[][] l)\n {\n     if (l.length\
    \ == 0)\n     {\n         return new long[0];\n     }\n     else\n     {\n   \
    \      auto s = new SortedSet!(long)(l[0]);\n         foreach(i; 1..l.length)\n\
    \         {\n             auto n = new SortedSet!(long)(l[i]);\n             s.findIntersection(n);\n\
    \         }\n         return s.data;\n     }\n }\n \n \nstruct SortedSet(T) if\
    \ (is(T : long))\n{\n    T[] data;\n    // Add elements from another array.\n\
    \    void findUnion(SortedSet!(T) l)\n    {\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        while (i1 < data.length && i2 < l.data.length)\n        {\n\
    \            if (data[i1] == l.data[i2])\n            {\n                i1++;\n\
    \                i2++;\n            }\n            else if (data[i1]\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp147lrg7t.d(75): Error: found `unittest` when expecting `)`

    /tmp/tmp147lrg7t.d(84): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp147lrg7t.d(84): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp147lrg7t.d(84): Error: `}` expected following members in `struct` declaration
    at /tmp/tmp147lrg7t.d(59)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp147lrg7t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto r = set(l1) & set(l2);\n    return r.array();\n}\nunittest\n{\n\
    \    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvr7aft36.d(14): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmpvr7aft36.d(14): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvr7aft36.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    l1.sort;\n    l2.sort;\n    long[] l3 = new long[];\n    foreach(n1;\
    \ l1)\n    {\n        foreach(n2; l2)\n        {\n            if(n1 == n2)\n \
    \           {\n                l3 ~= n1;\n            }\n        }\n    }\n  \
    \  return l3;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgcohwaxe.d(14): Error: no property `sort` for type `long[]`

    /tmp/tmpgcohwaxe.d(15): Error: no property `sort` for type `long[]`

    /tmp/tmpgcohwaxe.d(16): Error: new can only create structs, dynamic arrays or
    class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgcohwaxe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto s1 = l1.sort();\n    auto s2 = l2.sort();\n    auto r = s1.retain(s2);\n\
    \    return r;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4ejrvbp2.d(14): Error: no property `sort` for type `long[]`

    /tmp/tmp4ejrvbp2.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ejrvbp2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n    if (is(typeof(l1) == long[], typeof(l2) == long[]))\n{\n    long[][] sortedArrays\
    \ = [sort(l1), sort(l2)];\n    long[] result;\n    bool add = false;\n    foreach(index,\
    \ val; sort(l1)) \n    {\n        if(val == sortedArrays[1][index]) \n       \
    \ {\n            result ~= val;\n            add = true;\n        } \n       \
    \ else if(add) \n        {\n            break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjs_axaou.d(13): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmpjs_axaou.d(13): Error: declaration expected, not `if`

    /tmp/tmpjs_axaou.d(18): Error: declaration expected, not `foreach`

    /tmp/tmpjs_axaou.d(18): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpjs_axaou.d(18): Error: no identifier for declarator `sort(l1)`

    /tmp/tmpjs_axaou.d(18): Error: semicolon expected following function declaration

    /tmp/tmpjs_axaou.d(18): Error: declaration expected, not `)`

    /tmp/tmpjs_axaou.d(23): Error: no identifier for declarator `add`

    /tmp/tmpjs_axaou.d(23): Error: declaration expected, not `=`

    /tmp/tmpjs_axaou.d(24): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjs_axaou.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    std.algorithm.sort(l1);\n    std.algorithm.sort(l2);\n    long[] result\
    \ = new long[];\n    foreach(l; l1) \n    {\n        if (std.range.binarySearch(l2,\
    \ l) != l2.length && result.length==0 ||\n            std.range.binarySearch(l2,\
    \ l) != l2.length && result[$-1] != l )\n            result ~= l;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwygb2jwp.d(14): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpwygb2jwp.d(15): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpwygb2jwp.d(16): Error: new can only create structs, dynamic arrays or
    class objects, not `long[]`''s

    /tmp/tmpwygb2jwp.d(19): Deprecation: package `std.range` is not accessible here

    /tmp/tmpwygb2jwp.d(19): Error: undefined identifier `binarySearch` in package
    `std.range`

    /tmp/tmpwygb2jwp.d(20): Deprecation: package `std.range` is not accessible here

    /tmp/tmpwygb2jwp.d(20): Error: undefined identifier `binarySearch` in package
    `std.range`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwygb2jwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto s1 = set(l1);\n    auto s2 = set(l2);\n    alias common = s1 &\
    \ s2;\n    return common.array;\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkp0ck2fr.d(16): Error: semicolon expected to close `alias` declaration

    /tmp/tmpkp0ck2fr.d(16): Error: found `&` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkp0ck2fr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163947
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto hash1 = long.init;\n    auto hash2 = long.init;\n    foreach (element;\
    \ l1)\n    {\n        hash1[element] = 1;\n    }\n    foreach (element; l2)\n\
    \    {\n        hash2[element] = 1;\n    }\n    auto common_arr = long[];\n  \
    \  foreach (key, val; hash1)\n    {\n        if (hash2.count(key))\n        {\n\
    \            common_arr ~= key;\n        }\n    }\n    return common_arr;\n}\n\
    unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L,\
    \ 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp20cfyx_b.d(24): Error: found `[` when expecting `.` following long

    /tmp/tmp20cfyx_b.d(24): Error: found `]` when expecting identifier following `long`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp20cfyx_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return set(l1).intersection(set(l2)).toArray();\n}\nunittest\n{\n \
    \   alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1wm5llba.d(14): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wm5llba.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] ret = new long[](0);\n    size_t i, j;\n    foreach (item; l1)\
    \ {\n        foreach (item2; l2) {\n            if (item == item2) {\n       \
    \         ret ~= item;\n                break;\n            }\n        }\n   \
    \ }\n    ret = uniq(ret);\n    ret.sort();\n    return ret;\n}\nunittest\n{\n\
    \    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoqsc6yhn.d(24): Error: undefined identifier `uniq`

    /tmp/tmpoqsc6yhn.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoqsc6yhn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tauto s1 = set(l1);\n\tauto s2 = set(l2);\n\tlong[] res = new long[](min(s1.length,\
    \ s2.length));\n\tauto it = map.common(s1.byKey, s2.byKey);\n\tint cnt = 0;\n\t\
    while(it.moveNext())\n\t{\n\t\tauto key = it.current;\n\t\tres[cnt] = key;\n\t\
    \tcnt++;\n\t}\n\tres.length = cnt;\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyrop7eqq.d(14): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmpyrop7eqq.d(15): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmpyrop7eqq.d(16): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmpyrop7eqq.d(17): Error: undefined identifier `map`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyrop7eqq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] result = uniq(sort(l1.intersect(l2)));\n    return result;\n\
    }\n/*\nMerge several arrays into one.\n    >>> interweave([[1L, 2L, 3L], [4L,\
    \ 5L, 6L], [7L, 8L, 9L]])\n    [1L, 4L, 7L, 2L, 5L, 8L, 3L, 6L, 9L]\n*/\nlong[]\
    \ interweave(long[][] lists) \n{\n    long[] result = new long[lists.reduce!((a,\
    \ b) => a + b.length)(0)];\n    for (long i = 0; i < lists.length; i++) \n   \
    \ {\n        foreach (long k; 0 .. lists[i].length) \n        {\n            result[i\
    \ + k * lists.length] = lists[i][k];\n        }\n    }\n    return result;\n}\n\
    /*\nBreak a collection into n groups of equal size.\n    >>> chunks(3L, [10L,\
    \ 20L, 30L, 40L, 50L, 60L, 70L, 80L, 90L])\n    [[10L, 20L, 30L], [40L, 50L, 60L],\
    \ [70L, 80L, 90L]]\n    >>> chunks(4L, [10L, 20L, 30L, 40L, 50L, 60L, 70L, 80L,\
    \ 90L])\n    [[10L, 20L, 30L], [40L, 50L, 60L], [70L, 80L, 90L], []]\n*/\nlong[][]\
    \ chunks(long groupSize, long[] array) \n{\n    long[] result = new long[groupSize][$];\n\
    \    foreach (long i; 0 .. array.length) \n    {\n        result[i % groupSize\
    \ ~= []].insert(array[i]);\n    }\n    return result;\n}\n/*\nFlatten nested arrays.\n\
    \    >>> flatten([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]])\n    [1L, 2L\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmponrlfzl2.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmponrlfzl2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    enum n = l1.length + l2.length;\n    long[] l = new long[n];\n    int\
    \ num = 0;\n    // compare l1 and l2\n    for (int i = 0; i < l1.length; i++)\n\
    \    {\n        for (int j = 0; j < l2.length; j++)\n        {\n            if\
    \ (l1[i] == l2[j])\n            {\n                l[num] = l1[i];\n         \
    \       num++;\n            }\n        }\n    }\n    // delete duplicate elements\n\
    \    long[] l3 = new long[num];\n    if (num > 0)\n    {\n        l3[0] = l[0];\n\
    \        int num1 = 1;\n        for (int i = 1; i < num; i++)\n        {\n   \
    \         if (l[i] != l[i - 1])\n            {\n                l3[num1] = l[i];\n\
    \                num1++;\n            }\n        }\n    }\n    // sort the array\n\
    \    sort(l3);\n    return l3;\n}\n/*\nReturn sorted unique elements in list1\
    \ and list2.\n    >>> uncommon([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L,\
    \ 9L, 653L, 121L])\n    [2L, 3L, 4L, 7L, 9L, 34L, 121L]\n    >>> uncommon([5L,\
    \ 3L, 2L, 8L], [3L, 2L])\n    [5L, 8L]\n    \n*/\nlong[] uncommon(long[] l1, long[]\
    \ l2) \n{\n    // combine the two arrays\n    enum n = l1.length + l2.length;\n\
    \    long[] l = new long[n];\n    int num = 0;\n    for (int i = 0; i < l1.length;\
    \ i++)\n    {\n        l[num] = l1[i];\n        num++;\n    }\n    for (int i\
    \ = 0; i < l2.length; i++)\n    {\n        l[num]\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp939jwfny.d(70): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp939jwfny.d(79): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp939jwfny.d(79): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp939jwfny.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return to!(long[])(sort(to!(ulong[])(set[ulong](chain(l1), chain(l2)))));\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplvr_8k5d.d(14): Error: found `]` when expecting `.` following ulong

    /tmp/tmplvr_8k5d.d(14): Error: found `(` when expecting identifier following `ulong`.

    /tmp/tmplvr_8k5d.d(14): Error: found `chain` when expecting `,`

    /tmp/tmplvr_8k5d.d(14): Error: found `)` when expecting `,`

    /tmp/tmplvr_8k5d.d(14): Error: expression expected, not `)`

    /tmp/tmplvr_8k5d.d(14): Error: found `)` when expecting `,`

    /tmp/tmplvr_8k5d.d(14): Error: expression expected, not `)`

    /tmp/tmplvr_8k5d.d(14): Error: found `;` when expecting `,`

    /tmp/tmplvr_8k5d.d(15): Error: expression expected, not `}`

    /tmp/tmplvr_8k5d.d(16): Error: found `unittest` when expecting `,`

    /tmp/tmplvr_8k5d.d(25): Error: found `void` when expecting `,`

    /tmp/tmplvr_8k5d.d(25): Error: found `{` when expecting `,`

    /tmp/tmplvr_8k5d.d(25): Error: expression expected, not `}`

    /tmp/tmplvr_8k5d.d(25): Error: found `End of File` when expecting `,`

    /tmp/tmplvr_8k5d.d(25): Error: found `End of File` when expecting `]`

    /tmp/tmplvr_8k5d.d(25): Error: found `End of Fil'
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    if (l1.length==0 || l2.length==0)\n    {\n        return [];\n    }\n\
    \    auto a1 = l1.sort;\n    auto a2 = l2.sort;\n    long[] output = [];\n   \
    \ for (int i = 0; i < a1.length; i++)\n    {\n        if (a1[i] == a2[i])\n  \
    \      {\n            output.append(a1[i]);\n        }\n    }\n    return output;\n\
    }\n// bool are_anagrams(string s1, string s2) {\n//     auto cmp = (const ref\
    \ dchar a, const ref dchar b) {\n//         return toLower(a) < toLower(b);\n\
    //     };\n//     auto sorted1 = s1.dup.idup.sort(cmp);\n//     auto sorted2 =\
    \ s2.dup.idup.sort(cmp);\n//     return sorted1 == sorted2;\n// }\n/*\nReturn\
    \ sorted unique common elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L,\
    \ 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>>\
    \ common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1gz6fo46.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1gz6fo46.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\treturn unique(sort(l1 & l2));\n}\nunittest\n{\n    alias candidate =\
    \ common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L,\
    \ 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L,\
    \ 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L,\
    \ 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwo7tmqhu.d(14): Error: undefined identifier `unique`, did you mean
    struct `Unique(T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwo7tmqhu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tauto l1_set = std.algorithm.uniq(l1);\n\tauto l2_set = std.algorithm.uniq(l2);\n\
    \tlong[] res;\n\tforeach(el; l1_set) {\n\t\tif(l2_set.count(el)) {\n\t\t\tres\
    \ ~= el;\n\t\t}\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzaq9ea20.d(14): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpzaq9ea20.d(15): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzaq9ea20.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] lcommon = new long[];\n    foreach(l1l; l1)\n    {\n       \
    \ foreach(l2l; l2)\n        {\n            if(l1l == l2l)\n            {\n   \
    \             lcommon ~= l1l;\n            }\n        }\n    }\n    return sorted(uniq(lcommon));\n\
    }\n/*\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6w6hw0ha.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6w6hw0ha.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return to!(long[])(std.algorithm.intersection(l1, l2));\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6tuc620.d(14): Error: template instance `to!(long[])` template
    `to` is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6tuc620.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    if (l1.length < l2.length) \n    {\n        return common(l2, l1);\n\
    \    }\n    else \n    {\n        return l1.filter!(i => i in l2).array.sort.array;\n\
    \    }\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiked7dk3.d(20): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiked7dk3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    \n    long[] l3 = std.algorithm.sort(std.algorithm.setIntersection(l1,\
    \ l2));\n    // l3.retain(unique);\n    return l3;\n}\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgabj7tk2.d(15): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgabj7tk2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tauto s = set(l1);\n\treturn s.intersection(l2).array();\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4jluz3yr.d(14): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4jluz3yr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    Tuple!(long[], long[]) t = sortTuple!(long[], long[])(l1, l2);\n  \
    \  long[] l3 = t[0];\n    long[] l4 = t[1];\n    long[] ret = new long[0];\n \
    \   int l3i = 0;\n    int l4i = 0;\n    while (l3i < l3.length && l4i < l4.length)\
    \ \n    {\n        if (l3[l3i] == l4[l4i]) \n        {\n            long[] temp\
    \ = new long[ret.length + 1];\n            temp[0] = l3[l3i];\n            for\
    \ (int i = 0; i < ret.length; i++) \n            {\n                temp[i + 1]\
    \ = ret[i];\n            }\n            ret = temp;\n            l3i++;\n    \
    \        l4i++;\n        }\n        else if (l3[l3i] < l4[l4i]) \n        {\n\
    \            l3i++;\n        }\n        else \n        {\n            l4i++;\n\
    \        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpak7nw6v8.d(14): Error: template instance `sortTuple!(long[], long[])`
    template `sortTuple` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpak7nw6v8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto result = new long[][]{l1, l2}.popFront().reduce!q{a,b=>a.intersect(b)};\
    \ \n    return result.sort();\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_a6rhdut.d(14): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmp_a6rhdut.d(14): Error: found `}` when expecting `;` following statement

    /tmp/tmp_a6rhdut.d(17): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_a6rhdut.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return sorted(__zip(l1, l2).map!(x => tupleof(x[0], x[1])).filter!(x\
    \ => x[0] == x[1]).map!(x => x[0]));\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo24j0roc.d(14): Error: undefined identifier `sorted`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo24j0roc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return unique(l1.intersect(l2));\n}\n/*\nReturn sorted unique common\
    \ elements for many arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L], [1L, 4L, 3L, 34L, 653L, 2L, 5L])\n    [1L, 5L,\
    \ 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L], [5L, 3L, 2L, 8L])\n    [2L,\
    \ 3L, 5L, 8L]\n*/\nlong[] common(long[][] ll) \n{\n    long[] res = new long[1];\n\
    \    foreach(i, l; ll) \n    {\n        if (i == 0) \n        {\n            res\
    \ = unique(l);\n        }\n        else \n        {\n            res = unique(res.intersect(l));\n\
    \        }\n    }\n    return res;\n}\n/*\nReturn the elements that are in both\
    \ tuples.\n    >>> common((1L, 4L, 3L, 34L, 653L, 2L, 5L), (5L, 7L, 1L, 5L, 9L,\
    \ 653L, 121L))\n    (1L, 5L, 653L)\n    >>> common((5L, 3L, 2L, 8L), (3L, 2L))\n\
    \    (2L, 3L)\n*/\nTuple!(long[]) common(Tuple!(long[]) l1, Tuple!(long[]) l2)\
    \ \n{\n    return tuple(common(l1[0], l2[0]));\n}\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n  \
    \  [2, 3\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjk5uchlw.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjk5uchlw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto g1 = groupby(l1);\n    auto g2 = groupby(l2);\n    auto d1 = [filter!((a){return\
    \ a[1] > 1;}) (g1)];\n    auto d2 = [filter!((a){return a[1] > 1;}) (g2)];\n \
    \   auto k1 = [a[0] for (a) in d1];\n    auto k2 = [a[0] for (a) in d2];\n   \
    \ auto commonKeys = [filter!((a){return a in k2;}) (k1)];\n    return sort(commonKeys);\n\
    }\n \n// BEGIN TEMPLATE\n// A toy\n// - represents a slice of pizza\n// - can\
    \ be cut into 2 parts\n// - displays a nice ASCII art of the pizza\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnz65335v.d(18): Error: comma expected separating array initializers,
    not `for`

    /tmp/tmpnz65335v.d(18): Error: semicolon expected following auto declaration,
    not `(`

    /tmp/tmpnz65335v.d(18): Error: found `]` when expecting `;` following statement

    /tmp/tmpnz65335v.d(18): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpnz65335v.d(19): Error: comma expected separating array initializers, not
    `for`

    /tmp/tmpnz65335v.d(19): Error: semicolon expected following auto declaration,
    not `(`

    /tmp/tmpnz65335v.d(19): Error: found `]` when expecting `;` following statement

    /tmp/tmpnz65335v.d(19): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnz65335v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    immutable set2 = to!(Set)(l2);\n    long[] result = [];\n    foreach(l;\
    \ l1)\n    {\n        if(l in set2)\n        {\n            result ~= l;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8zr1oe4l.d(14): Error: template instance `to!Set` template `to`
    is not defined, did you mean No?

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tl1.sort;\n\tl2.sort;\n\tlong[] res;\n\tforeach(el; l1) \n\t{\n\t\tif\
    \ (el in l2) \n\t\t{\n\t\t\tres ~= el;\n\t\t}\n\t}\n\treturn res.uniq;\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoz_yah56.d(14): Error: no property `sort` for type `long[]`

    /tmp/tmpoz_yah56.d(15): Error: no property `sort` for type `long[]`

    /tmp/tmpoz_yah56.d(19): Error: incompatible types for `(el) in (l2)`: `long` and
    `long[]`

    /tmp/tmpoz_yah56.d(24): Error: no property `uniq` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoz_yah56.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto d1 = l1.dup;\n    auto d2 = l2.dup;\n    sort(d1);\n    sort(d2);\n\
    \    return d1.intersection(d2);\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpinlrksrt.d(16): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpinlrksrt.d(17): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpinlrksrt.d(18): Error: no property `intersection` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpinlrksrt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    if (l1.length == 0 || l2.length == 0) \n    {\n        return [];\n\
    \    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps8c513jx.d(18): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8c513jx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] l_res = new long[0];\n    if(l1.length > l2.length) \n    {\n\
    \        foreach(i; l1) \n        {\n            if (l2.canFind(i)) \n       \
    \     {\n                l_res ~= i;\n            }\n        }\n    } \n    else\
    \ \n    {\n        foreach(i; l2) \n        {\n            if (l1.canFind(i))\
    \ \n            {\n                l_res ~= i;\n            }\n        }\n   \
    \ }\n    l_res.sort();\n    return l_res.uniq;\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3sgvd713.d(19): Error: no property `canFind` for type `long[]`

    /tmp/tmp3sgvd713.d(29): Error: no property `canFind` for type `long[]`

    /tmp/tmp3sgvd713.d(35): Error: no property `sort` for type `long[]`

    /tmp/tmp3sgvd713.d(36): Error: no property `uniq` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3sgvd713.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] l3;\n    auto i1 = l1.length;\n    auto i2 = l2.length;\n  \
    \  if (i1 < i2) \n    {\n        l3 = l1;\n        l1 = l2;\n        l2 = l3;\n\
    \    }\n    l3 = l1.dup;\n    l3.sort;\n    l3.unique;\n    for (long i=0; i<l3.length;\
    \ i++) \n    {\n        if (l2.count(l3[i]) == 0) \n        {\n            l3.remove(i);\n\
    \            i--;\n        }\n    }\n    return l3;\n}\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpddoo_nrw.d(24): Error: no property `sort` for type `long[]`

    /tmp/tmpddoo_nrw.d(25): Error: no property `unique` for type `long[]`

    /tmp/tmpddoo_nrw.d(28): Error: no property `count` for type `long[]`

    /tmp/tmpddoo_nrw.d(30): Error: no property `remove` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpddoo_nrw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    immutable(long)[] common;\n    foreach (x; zip(l1, l2)) \n    {\n \
    \       if (x[0] is x[1]) \n        {\n            common ~= x[0];\n        }\n\
    \    }\n    return common.sort().uniq;\n}\nunittest\n{\n    alias candidate =\
    \ common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L,\
    \ 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L,\
    \ 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L,\
    \ 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqlci58cw.d(15): Error: undefined identifier `zip`

    /tmp/tmpqlci58cw.d(22): Error: no property `sort` for type `immutable(long)[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqlci58cw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto ret = l1.dup;\n    ret.sort;\n    foreach(l;l2) \n    {\n    \
    \    if(l1.contains(l))\n            ret ~= l;\n    }\n    ret.sort;\n    ret\
    \ = ret.uniq;\n    return ret;\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv0qao3pu.d(15): Error: no property `sort` for type `long[]`

    /tmp/tmpv0qao3pu.d(18): Error: no property `contains` for type `long[]`

    /tmp/tmpv0qao3pu.d(21): Error: no property `sort` for type `long[]`

    /tmp/tmpv0qao3pu.d(22): Error: no property `uniq` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv0qao3pu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n { \n  auto h = new HashSet!(typeof(l1[0]));\n  foreach (e; l1) h.insert(e);\n\
    \  foreach (e; l2) if (h.find(e) !is null) h.remove(e);\n  return h.keys;\n }\n\
    unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L,\
    \ 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn_h3at0v.d(14): Error: template instance `HashSet!(typeof(l1[0]))`
    template `HashSet` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn_h3at0v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] r = new long[0];\n    for (long i = 0; i < l1.length; i++)\n\
    \    {\n        for (long j = 0; j < l2.length; j++)\n        {\n            if\
    \ (l1[i] == l2[j])\n            {\n                r ~= l1[i];\n            }\n\
    \        }\n    }\n    return sort(unique(r));\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuqavjuxh.d(25): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tlong[] l3 = new long[l1.length];\n\tlong[] l4 = new long[l2.length];\n\
    \tlong[] l5 = new long[l3.length+l4.length];\n\tlong[] l6 = new long[l5.length];\n\
    \tlong[] l7 = new long[l6.length];\n\tl3=l1.dup;\n\tl4=l2.dup;\n\tl5=l3~l4;\n\t\
    l6=l5.sort;\n\tl7=l6.uniq;\n\treturn l7;\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0hiubcpl.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmp0hiubcpl.d(23): Error: no property `uniq` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hiubcpl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return set(l1) & set(l2);\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgzhnfwkb.d(14): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmpgzhnfwkb.d(14): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgzhnfwkb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] r = new long[0L];\n    foreach (l; uniq(l1))\n    {\n      \
    \  foreach (r2; uniq(l2))\n        {\n            if (l == r2)\n            {\n\
    \                r ~= l;\n            }\n        }\n    }\n    return sort(r);\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxnmlbyrl.d(15): Error: undefined identifier `uniq`

    /tmp/tmpxnmlbyrl.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxnmlbyrl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\treturn set(l1) & set(l2);\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuzx9ngzg.d(14): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmpuzx9ngzg.d(14): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuzx9ngzg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n  auto u1 = makeSortedArray(l1);\n  auto u2 = makeSortedArray(l2);\n  return\
    \ intersection(u1, u2);\n}\n/*\nReturn unique common elements for two arrays.\n\
    \    >>> intersection([5L, 1L, 2L, 3L], [3L, 4L, 2L, 5L])\n    [2L, 3L, 5L]\n\
    \    >>> intersection([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n    >>> intersection([1L,\
    \ 2L, 3L, 4L], [2L, 3L, 5L, 6L])\n    [2L, 3L]\n    >>> intersection([1L, 2L,\
    \ 3L, 4L], [])\n    []\n    \n*/\nlong[] intersection(long[] l1, long[] l2) \n\
    {\n  auto u1 = makeSortedArray(l1);\n  auto u2 = makeSortedArray(l2);\n  return\
    \ u1.intersection(u2);\n}\n/*\nReturn SortedArray of unique elements.\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_qe_ngbh.d(36): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qe_ngbh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto t1 = tuple(l1);\n    auto t2 = tuple(l2);\n    auto t3 = set(t1).intersection(t2);\n\
    \    //unittest{auto res = [1L, 5L, 653L]; assert(t3 == res);}\n    return [t3];\n\
    }\n/*\nReturn a list of unique elements which appear in either of two arrays.\n\
    \    >>> union([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n\
    \    [1L, 4L, 3L, 34L, 653L, 2L, 5L, 7L, 9L, 121L]\n    >>> union([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [5L, 3L, 2L, 8L]\n*/\nlong[] union(long[] l1, long[] l2)\
    \ \n{\n    auto t1 = tuple(l1);\n    auto t2 = tuple(l2);\n    auto t3 = set(t1).union(t2);\n\
    \    //unittest{auto res = [1L, 4L, 3L, 34L, 653L, 2L, 5L, 7L, 9L, 121L]; assert(t3\
    \ == res);}\n    return [t3];\n}\n/*\nReturn the difference between two lists.\
    \ Elements that are in both lists are omitted.\n    >>> difference([1L, 4L, 3L,\
    \ 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [4L, 3L, 34L, 2L]\n\
    \    >>> difference([5L, 3L, 2L, 8L], [3L, 2L])\n    [5L, 8L]\n*/\nlong[] difference(long[]\
    \ l1, long[] l2) \n{\n    auto t1 = tuple(l1);\n    auto t2 = tuple(l2);\n   \
    \ auto t3 = set(t1).difference(t2);\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl9qw6vmg.d(27): Error: no identifier for declarator `long[]`

    /tmp/tmpl9qw6vmg.d(27): Error: { } expected following `union` declaration

    /tmp/tmpl9qw6vmg.d(27): Error: declaration expected, not `(`

    /tmp/tmpl9qw6vmg.d(31): Error: identifier expected following `.`, not `union`

    /tmp/tmpl9qw6vmg.d(33): Error: declaration expected, not `return`

    /tmp/tmpl9qw6vmg.d(34): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9qw6vmg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    import std.algorithm;\n    import std.range;\n    import std.array;\n\
    \    return l1.sort().uniq().intersect(l2.sort().uniq()).array;\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp60dmrw93.d(17): Error: no property `intersect` for type `UniqResult!(binaryFun,
    SortedRange!(long[], "a < b"))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp60dmrw93.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    l1.sort();\n    l2.sort();\n    long[] l3 = new long[l1.length];\n\
    \    int k = 0;\n    int pos = 0;\n    for (int i = 0; i < l1.length; i++)\n \
    \   {\n        while (pos < l2.length && l2[pos] < l1[i])\n            pos++;\n\
    \        if (pos < l2.length && l2[pos] == l1[i])\n            l3[k++] = l1[i];\n\
    \    }\n    return l3[0..k];\n}\nlong[] common(long[] l1, long[] l2)\n{\n    int[]\
    \ counts = new int[l1.length];\n    for (int i = 0; i < l1.length; i++)\n    {\n\
    \        for (int j = 0; j < l2.length; j++)\n        {\n            if (l1[i]\
    \ == l2[j])\n                counts[i]++;\n        }\n    }\n    long[] l3 = new\
    \ long[l1.length];\n    int k = 0;\n    for (int i = 0; i < l1.length; i++)\n\
    \    {\n        if (counts[i] != 0)\n            l3[k++] = l1[i];\n    }\n   \
    \ return l3[0..k];\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn28hq57k.d(14): Error: no property `sort` for type `long[]`

    /tmp/tmpn28hq57k.d(15): Error: no property `sort` for type `long[]`

    /tmp/tmpn28hq57k.d(52): Error: `tmpn28hq57k.common` called with argument types
    `(long[], long[])` matches both:

    /tmp/tmpn28hq57k.d(12):     `tmpn28hq57k.common(long[] l1, long[] l2)`

    and:

    /tmp/tmpn28hq57k.d(28):     `tmpn28hq57k.common(long[] l1, long[] l2)`

    /tmp/tmpn28hq57k.d(53): Error: `tmpn28hq57k.common` called with argument types
    `(long[], long[])` matches both:

    /tmp/tmpn28hq57k.d(12):     `tmpn28hq57k.common(long[] l1, long[] l2)`

    and:

    /tmp/tmpn28hq57k.d(28):     `tmpn28hq57k.common(long[] l1, long[] l2)`

    /tmp/tmpn28hq57k.d(54): Error: `tmpn28hq57k.common` called with argument types
    `(long[], long[])` matches both:

    /tmp/tmpn28hq57k.d(12):     `tmpn28hq57k.common(long[] l1, long[] l2)`

    and:

    /tmp/tmpn28hq57k.d(28):     `tmpn28hq57k.common(long[] l1, long[] l2)`

    /tmp/tmpn28hq57k.d(55): Error: `tmpn28hq57k.common` called with argument types
    `(long[], void[])` matches both:'
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return common(l1, l2, (l1, l2) => l1 - l2);\n}\n/*\nReturn sorted unique\
    \ common elements for two arrays.\n    >>> common([-3.3, 0.5, -0.7, 2.1, 2.0,\
    \ 2.3], [0.5, 2.2, -0.7, -0.8, -0.6, 2.1])\n    [-0.7, 0.5, 2.1]\n    >>> common([0.5,\
    \ 2.3, 2.1, 1.7], [1.5, 2.0, 1.8, 2.4])\n    []\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1by6a5wx.d(16): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1by6a5wx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return set(l1) & set(l2);\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgzhnfwkb.d(14): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmpgzhnfwkb.d(14): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgzhnfwkb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    alias lt = (long x, long y) => (x < y);\n    long[] lr = l1.dup;\n\
    \    lr ~= l2;\n    lr.sort(lt);\n    long[] lr_u = lr.uniq;\n    //lr_u.sort(lt);\n\
    \    return lr_u;\n}\n/*\nlong[][] common(long[][] l1, long[][] l2) \n{\n    alias\
    \ lt = (long x, long y) => (x < y);\n    long[][] lr = l1.dup;\n    lr ~= l2;\n\
    \    lr.sort(lt);\n    long[][] lr_u = lr.uniq;\n    //lr_u.sort(lt);\n    return\
    \ lr_u;\n}\n*/\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpylwjux3m.d(17): Error: no property `sort` for type `long[]`

    /tmp/tmpylwjux3m.d(18): Error: no property `uniq` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpylwjux3m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[long[]] t1 = tupleof(l1);\n    long[long[]] t2 = tupleof(l2);\n\
    \    long[] l = [_ for (_, v) in t1 if v in t2];\n    l.sort();\n    return l;\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzzdnritp.d(16): Error: comma expected separating array initializers,
    not `for`

    /tmp/tmpzzdnritp.d(16): Error: semicolon expected, not `(`

    /tmp/tmpzzdnritp.d(16): Error: found `if` when expecting `;` following statement

    /tmp/tmpzzdnritp.d(16): Error: found `]` when expecting `;` following statement

    /tmp/tmpzzdnritp.d(16): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzzdnritp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return (sort(uniq(l1)) & sort(uniq(l2)));\n}\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfilvm5zk.d(14): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpfilvm5zk.d(14): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfilvm5zk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\treturn sorted(uniq(intersect(l1, l2)));\n}\n/*\nReturn unique elements\
    \ from both sequences.\n    >>> from std.algorithm import unique, intersect;\n\
    \    >>> a = [1L, 3L, 4L, 5L, 4L, 9L, 4L, 4L, 2L, 4L, 8L, 6L, 2L, 8L, 7L, 5L,\
    \ 2L, 9L, 1L, 3L, 3L, 4L, 7L, 5L, 2L, 9L, 1L, 3L, 4L, 1L, 7L, 5L, 2L, 9L, 1L,\
    \ 3L, 3L, 4L, 7L, 5L, 2L, 9L, 1L, 3L, 3L, 4L, 7L, 5L, 2L, 9L, 1L, 3L, 3L, 4L,\
    \ 7L, 5L, 2L, 9L, 1L, 3L, 3L, 4L, 7L, 5L, 2L, 9L, 1L, 3L, 3L, 4L, 7L, 5L, 2L,\
    \ 9L, 1L, 3L, 3L, 4L, 7L, 5L, 2L, 9L, 1L, 3L, 3L, 4L, 7L, 5L, 2L, 9L, 1L, 3L,\
    \ 3L, 4L, 7L, 5L, 2L, 9L, 1L, 3L, 3L, 4L, 7L, 5L, 2L, 9L, 1L, 3L, 3L, 4L, 7L,\
    \ 5L, 2L, 9L, 1L, 3L, 3L, 4L, 7L, 5L, 2L, 9L, 1L, 3L, 3L, 4L, 7L, 5L, 2L, 9L,\
    \ 1L, 3L, 3L, 4L, 7L, 5L, 2L, 9L, 1L, 3L, 3L, 4L, 7L, 5L, 2L, 9L, 1L, 3L, 3L,\
    \ 4L, 7L, 5L, 2L, 9L\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfuvo3xkl.d(16): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfuvo3xkl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] l3 = [9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L,\
    \ 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L,\
    \ 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L,\
    \ 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L,\
    \ 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L,\
    \ 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L,\
    \ 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L,\
    \ 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L,\
    \ 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L,\
    \ 9L, 9\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp685xnle6.d(15): Error: comma expected separating array initializers,
    not `unittest`

    /tmp/tmp685xnle6.d(16): Error: semicolon expected, not `{`

    /tmp/tmp685xnle6.d(24): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp685xnle6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return sort(toSet(l1) & toSet(l2));\n}\nlong[] common(int[] l1, int[]\
    \ l2) \n{\n    return common(cast(long[])(l1), cast(long[])(l2));\n}\nlong[] common(uint[]\
    \ l1, uint[] l2) \n{\n    return common(cast(long[])(l1), cast(long[])(l2));\n\
    }\ndouble[] common(double[] l1, double[] l2) \n{\n    return sort(toSet(l1) &\
    \ toSet(l2));\n}\nfloat[] common(float[] l1, float[] l2) \n{\n    return common(cast(double[])(l1),\
    \ cast(double[])(l2));\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpznmme6er.d(14): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpznmme6er.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpznmme6er.d(30): Error: cannot implicitly convert expression `common(cast(double[])l1,
    cast(double[])l2)` of type `double[]` to `float[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpznmme6er.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    int[] ret = [];\n    l1.sort();\n    l2.sort();\n    int i = 0;\n \
    \   int j = 0;\n    while(i < l1.length && j < l2.length)\n    {\n        if(l1[i]\
    \ == l2[j])\n        {\n            ret ~= l1[i];\n            i++;\n        \
    \    j++;\n        }\n        else if(l1[i] < l2[j])\n        {\n            i++;\n\
    \        }\n        else\n        {\n            j++;\n        }\n    }\n    return\
    \ ret;\n}\n/*\nSum all values in tuple.\n    >>> sum_tuple((1, 1, 2, 3, 5, 8,\
    \ 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\
    \ 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986,\
    \ 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903,\
    \ 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173,\
    \ 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041,\
    \ 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723,\
    \ 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994,\
    \ 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657,\
    \ 2111485077978050, 34164546229\nunittest\n{\n    alias candidate = common;\n\n\
    \    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkk_0ipzy.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkk_0ipzy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] res = new long[1];\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfkigvpkh.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284b5]

    ??:? void tmpfkigvpkh.__unittest_L17_C1() [0x427f3a]

    ??:? void tmpfkigvpkh.__modtest() [0x428234]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4fb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b38e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430619]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ac8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b365]

    ??:? runModuleUnitTests [0x42c2d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428904]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return (\n        __duplicate(\n            array(\n              \
    \  __duplicate(l1).filter!(e =>\n                    l2.canFind(e))\n        \
    \    ).sort())\n    );\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_c2_ibj2.d(15): Error: undefined identifier `__duplicate`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_c2_ibj2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] l = null;\n    long[] l3 = (l1.length >= l2.length ? l1 : l2);\n\
    \    long[] l4 = (l1.length >= l2.length ? l2 : l1);\n    l = l3.dup.sort;\n \
    \   l = l.filter!((x) => (x in l4));\n    l = l.unique;\n    return l;\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp07qallm1.d(17): Error: no property `sort` for type `long[]`

    /tmp/tmp07qallm1.d(18): Error: no property `filter` for type `long[]`

    /tmp/tmp07qallm1.d(19): Error: no property `unique` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp07qallm1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return l1.filter!(a => l2.filter!(b => a == b).length).sort();\n}\n\
    unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L,\
    \ 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj9ub360z.d(14): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj9ub360z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[l1.length] out;\n    foreach(l; l1)\n    {\n        foreach(r;\
    \ l2)\n        {\n            if(l == r)\n            {\n                out ~=\
    \ l;\n            }\n        }\n    }\n    return sort(uniq(out));\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpncv0i_g7.d(14): Error: no identifier for declarator `long[l1.length]`

    /tmp/tmpncv0i_g7.d(14): Error: found `out` instead of statement

    /tmp/tmpncv0i_g7.d(21): Error: found `out` instead of statement

    /tmp/tmpncv0i_g7.d(25): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpncv0i_g7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] tmp = new long[l1.length]; \n    int i = 0;\n    foreach(a;\
    \ l1) \n    {\n        if (a in l2) \n        {\n            tmp[i] = a;\n   \
    \         i++;\n        }\n    }\n    long[] ret = new long[i];\n    ret = tmp[0..i];\n\
    \    ret.sort;\n    ret = ret.dup;\n    return ret;\n}\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagpruq4_.d(18): Error: incompatible types for `(a) in (l2)`: `long`
    and `long[]`

    /tmp/tmpagpruq4_.d(26): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagpruq4_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] res = [];\n    int i1 = 0;\n    int i2 = 0;\n    int l1_len\
    \ = l1.length;\n    int l2_len = l2.length;\n    while (i1 < l1_len && i2 < l2_len)\
    \ \n    {\n        if (l1[i1] < l2[i2]) \n        {\n            i1++;\n     \
    \   } \n        else if (l1[i1] > l2[i2]) \n        {\n            i2++;\n   \
    \     } \n        else \n        {\n            res ~= l1[i1];\n            i1++;\n\
    \            i2++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6vkt37dq.d(17): Error: cannot implicitly convert expression `l1.length`
    of type `ulong` to `int`

    /tmp/tmp6vkt37dq.d(18): Error: cannot implicitly convert expression `l2.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6vkt37dq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] l3 = [];\n    int diff = (l1.length > l2.length) ? (l1.length\
    \ - l2.length) : (l2.length - l1.length);\n    long[] l4 = (l1.length > l2.length)\
    \ ? l1 : l2;\n    long[] l5 = (l1.length > l2.length) ? l2 : l1;\n    for (int\
    \ i = 0; i < l5.length; i++) \n    {\n        for (int j = 0; j < l4.length; j++)\
    \ \n        {\n            if (l5[i] == l4[j])\n            {\n              \
    \  l3 ~= l5[i];\n            }\n        }\n    }\n    return l3;\n}\n/*\n */\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] l3 = [];\n    int diff = (l1.length\
    \ > l2.length) ? (l1.length - l2.length) : (l2.length - l1.length);\n    long[]\
    \ l4 = (l1.length > l2.length) ? l1 : l2;\n    long[] l5 = (l1.length > l2.length)\
    \ ? l2 : l1;\n    for (int i = 0; i < l5.length; i++) \n    {\n        for (int\
    \ j = 0; j < l4.length; j++) \n        {\n            if (l5[i] == l4[j])\n  \
    \          {\n                l3 ~= l5[i];\n            }\n        }\n    }\n\
    \    return l3;\n}\n/*\n */\nlong[] common(long[] l1, long[] l2) \n{\n    long[]\
    \ l3 = [];\n    int diff = (l1.length > l2.length) ? (l1.length - l2.length) :\
    \ (l2.length - l1.length);\n    long[] l4 = (l1.length > l2.length) ? l1 : l2;\n\
    \    long[] l5 = (l1.length > l2.length\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt5byei_7.d(57): Error: found `unittest` when expecting `)`

    /tmp/tmpt5byei_7.d(59): Error: semicolon expected, not `{`

    /tmp/tmpt5byei_7.d(67): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt5byei_7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n   return sort(setItems(l1).intersection(setItems(l2)));\n}\n//: Add docs\
    \ and tests\n//: \n/*\nBased on an input array, return the value that has the\
    \ largest count. If there are multiple values with the same maximum count, the\
    \ first of those values is returned.\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2y4ntx4o.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2y4ntx4o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] res = [];\n    for (int i = 0; i < l1.length; i++)\n    {\n\
    \        for (int j = 0; j < l2.length; j++)\n        {\n            if (l1[i]\
    \ == l2[j])\n            {\n                res ~= l1[i];\n            }\n   \
    \     }\n    }\n    res.sort();\n    return res.unique;\n}\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpanok8spo.d(25): Error: no property `sort` for type `long[]`

    /tmp/tmpanok8spo.d(26): Error: no property `unique` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpanok8spo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    immutable int i1 = l1.length;\n    immutable int i2 = l2.length;\n\
    \    if (i1 < i2) \n    {\n        immutable l = l1;\n        l1 = l2;\n     \
    \   l2 = l;\n    }\n    immutable s = l1.dup;\n    s.sort;\n    auto a = new long[];\n\
    \    foreach (e; l2) \n    {\n        if (lowerBound(s, e) == upperBound(s, e))\n\
    \            continue;\n        a ~= e;\n    }\n    return a;\n}\nunittest\n{\n\
    \    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp05uqqbwx.d(14): Error: cannot implicitly convert expression `l1.length`
    of type `ulong` to `immutable(int)`

    /tmp/tmp05uqqbwx.d(15): Error: cannot implicitly convert expression `l2.length`
    of type `ulong` to `immutable(int)`

    /tmp/tmp05uqqbwx.d(18): Error: cannot implicitly convert expression `l1` of type
    `long[]` to `immutable(long[])`

    /tmp/tmp05uqqbwx.d(20): Error: cannot implicitly convert expression `l` of type
    `immutable(long[])` to `long[]`

    /tmp/tmp05uqqbwx.d(23): Error: no property `sort` for type `immutable(long[])`

    /tmp/tmp05uqqbwx.d(24): Error: new can only create structs, dynamic arrays or
    class objects, not `long[]`''s

    /tmp/tmp05uqqbwx.d(27): Error: undefined identifier `lowerBound`

    /tmp/tmp05uqqbwx.d(27): Error: undefined identifier `upperBound`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05uqqbwx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    if (l1.length == 0 || l2.length == 0) return new long[0];\n    long[]\
    \ res = std.algorithm.setIntersection(l1, l2);\n    return std.algorithm.sort(res);\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplavul46k.d(15): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmplavul46k.d(16): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplavul46k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    const long[] s1 = l1.array.sort.uniq;\n    const long[] s2 = l2.array.sort.uniq;\n\
    \    long[] result = long[](0);\n    foreach(idx, e1; s1) \n    {\n        foreach(e2;\
    \ s2) \n        {\n            if(e1 == e2) \n            {\n                result\
    \ ~= e1;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp27i9dugu.d(16): Error: found `[` when expecting `.` following long

    /tmp/tmp27i9dugu.d(16): Error: found `]` when expecting identifier following `long`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp27i9dugu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tTuple!(long[], long[]) t = Tuple!(long[], long[])([l1], [l2]);\n\treturn\
    \ common(t).item1;\n}\n/*\nReturn sorted unique common elements for two sets.\n\
    \    >>> common(set(['c', 'd', 'b']), set(['a', 'b', 'c']))\n    ['b', 'c']\n\
    */\nstring[] common(string[] l1, string[] l2) \n{\n\tTuple!(string[], string[])\
    \ t = Tuple!(string[], string[])([l1], [l2]);\n\treturn common(t).item1;\n}\n\
    /*\nReturn sorted unique common elements for two arrays.\n*/\nTuple!(long[], long[])\
    \ common(Tuple!(long[], long[]) t) \n{\n\tint index = 0;\n\tauto result = new\
    \ long[][](t.item1.length + t.item2.length);\n\tforeach(i;t.item1)\n\t{\n\t\t\
    foreach(j;t.item2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tresult[index] =\
    \ i;\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t}\n\treturn Tuple!(long[], long[])([result[0..index]],\
    \ []);\n}\n/*\nReturn sorted unique common elements for two sets.\n*/\nTuple!(string[],\
    \ string[]) common(Tuple!(string[], string[]) t) \n{\n\tint index = 0;\n\tauto\
    \ result = new string[][](t.item1.length + t.item2.length);\n\tforeach(i;t.item1)\n\
    \t{\n\t\tforeach(j;t.item2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tresult[index]\
    \ = i;\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t}\n\treturn Tuple!(string[], string[])([result[0..index]],\
    \ []);\n}\n\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpicp8tycc.d(14): Error: none of the overloads of `this` are callable
    using argument types `(long[][], long[][])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(668):        `std.typecons.Tuple!(long[],
    long[]).Tuple.this(long[], long[])`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(689):        `std.typecons.Tuple!(long[],
    long[]).Tuple.__ctor(U, ulong n)(U[n] values) if (n == Types.length && allSatisfy!(isBuildableFrom!U,
    Types))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(715):        `std.typecons.Tuple!(long[],
    long[]).Tuple.__ctor(U)(U another) if (areBuildCompatibleTuples!(typeof(this),
    U))`

    /tmp/tmpicp8tycc.d(15): Error: no property `item1` for type `Tuple!(long[], long[])`

    /tmp/tmpicp8tycc.d(24): Error: none of the overloads of `this` are callable using
    argument types `(string[][], string[][])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(668):        `std.typecons.Tuple!(string[],
    string[]).Tuple.this(string[], string[])`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(689):        `std.typecons.Tuple!(string[],
    string[]).Tuple.__ctor(U, ulong n)(U[n] values) if (n == Types.length && allSatisfy!(isBuildableFrom!U,
    Types))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(715):        `std.typecons.Tuple!(string[],
    string[]).Tuple.__ctor(U)(U another) if (areBuildCompatibleTuples!(typeof(this),
    U))`

    /tmp/tmpicp8tycc.d('
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tlong[long[]] m1 = array(zip(l1, map!(a => 0L)(l1)));\n\tlong[long[]]\
    \ m2 = array(zip(l2, map!(a => 0L)(l2)));\n\t\n\tforeach(elem; m1)\n\t{\n\t\t\
    foreach(elem2; m2)\n\t\t{\n\t\t\tif(elem[0] == elem2[0])\n\t\t\t{\n\t\t\t\telem[1]\
    \ = 1L;\n\t\t\t\telem2[1] = 1L;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong[] res = map!(a\
    \ => a[0])(filter!(a => a[1] == 1L)(m1));\n\treturn res;\n}\nunittest\n{\n   \
    \ alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L,\
    \ 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgqxh2cbx.d(14): Error: undefined identifier `array`

    /tmp/tmpgqxh2cbx.d(15): Error: undefined identifier `array`

    /tmp/tmpgqxh2cbx.d(21): Error: only one index allowed to index `long`

    /tmp/tmpgqxh2cbx.d(21): Error: only one index allowed to index `long`

    /tmp/tmpgqxh2cbx.d(23): Error: only one index allowed to index `long`

    /tmp/tmpgqxh2cbx.d(24): Error: only one index allowed to index `long`

    /tmp/tmpgqxh2cbx.d(29): Error: template instance `map!((a) => a[0])` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgqxh2cbx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    bool[] inL2 = new bool[l1.length];\n    bool[] inL1 = new bool[l2.length];\n\
    \    foreach(l1Element; l1) \n    {\n        foreach(l2Element; l2) \n       \
    \ {\n            if(l1Element == l2Element) \n            {\n                if(!inL2[l1Element])\
    \ \n                {\n                    inL2[l1Element] = true;\n         \
    \       }\n                if(!inL1[l2Element]) \n                {\n        \
    \            inL1[l2Element] = true;\n                }\n            }\n     \
    \   }\n    }\n    long[] commonL = [];\n    long counter = 0;\n    foreach(l1Element;\
    \ l1) \n    {\n        if(inL2[l1Element]) \n        {\n            commonL ~=\
    \ l1Element;\n            counter++;\n        }\n    }\n    return commonL;\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp9pn0llce.d(22): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428976]

    ??:? long[] tmp9pn0llce.common(long[], long[]) [0x428078]

    ??:? void tmp9pn0llce.__unittest_L45_C1() [0x4282eb]

    ??:? void tmp9pn0llce.__modtest() [0x428644]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d3ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c23e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430d89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431238]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430d15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c215]

    ??:? runModuleUnitTests [0x42d181]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functi'
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    import std.algorithm.comparison : equal;\n    import std.algorithm.setops;\n\
    \    l1.sort();\n    l2.sort();\n    return l1.intersection(l2).array;\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp58n4r2m8.d(16): Error: no property `sort` for type `long[]`

    /tmp/tmp58n4r2m8.d(17): Error: no property `sort` for type `long[]`

    /tmp/tmp58n4r2m8.d(18): Error: no property `intersection` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp58n4r2m8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tauto it = l1.dup;\n\tit.sort;\n\tauto jt = l2.dup;\n\tjt.sort;\n\treturn\
    \ it.intersection(jt);\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfaerfrc.d(15): Error: no property `sort` for type `long[]`

    /tmp/tmpsfaerfrc.d(17): Error: no property `sort` for type `long[]`

    /tmp/tmpsfaerfrc.d(18): Error: no property `intersection` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfaerfrc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] _common = [];\n    foreach(l; sort(l1))\n    {\n        if(binarySearch(l2,\
    \ l))\n        {\n            if(!binarySearch(_common, l))\n            {\n \
    \               _common ~= l;\n            }\n        }\n    }\n    return _common;\n\
    }\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L,\
    \ 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zly2ev6.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zly2ev6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    if (l1.length == 0 || l2.length == 0)\n    {\n        return new long[0];\n\
    \    }\n    return sort(l1).filter!(l2.canFind)();\n}\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyvu0_px4.d(18): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyvu0_px4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    //return set(l1) & set(l2);\n    return set(l1) & set(l2);\n}\n/*\n\
    Return a sorted unique array of all elements that are present in at least two\
    \ arrays.\n*/\nlong[] commonAll(long[][] l) \n{\n    //return set(l[0]) & set(l[1]);\n\
    \    return set(l[0]) & set(l[1]);\n}\n/*\nReturn sorted unique elements of the\
    \ first array that are not in the second array.\n    >>> difference([4L, 2L, 5L,\
    \ 7L, 8L, 1L, 2L], [2L, 3L, 5L])\n    [1L, 4L, 7L, 8L]\n*/\nlong[] difference(long[]\
    \ l1, long[] l2) \n{\n    //return set(l1) - set(l2);\n    return set(l1) - set(l2);\n\
    }\n/*\nReturn sorted unique elements of the first array that are not in any other\
    \ array.\n*/\nlong[] differenceAll(long[][] l) \n{\n    //return set(l[0]) - set(l[1]);\n\
    \    return set(l[0]) - set(l[1]);\n}\n/*\nCompare two lists, return true if they\
    \ have the same items in the same order.\n    >>> same([2L, 3L, 5L], [2L, 3L,\
    \ 5L])\n    true\n    >>> same([2L, 3L, 5L], [5L, 3L, 2L])\n    false\n*/\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0oz15ow.d(15): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmph0oz15ow.d(15): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmph0oz15ow.d(23): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmph0oz15ow.d(23): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmph0oz15ow.d(33): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmph0oz15ow.d(33): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmph0oz15ow.d(41): Error: undefined identifier `set`, did you mean template
    `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmph'
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    Tuple!(long[],long[]) o = opApplyMulti(l1, l2);\n    long[] l1 = o[0];\n\
    \    long[] l2 = o[1];\n    long[] out;\n    long[] result;\n    int len_l1 =\
    \ l1.length;\n    int len_l2 = l2.length;\n    int len_result = 0;\n    int count\
    \ = 0;\n    int found = 0;\n    int p = 0;\n    if (len_l1 > len_l2) \n    {\n\
    \        out = l1;\n        result = l2;\n    } \n    else \n    {\n        out\
    \ = l2;\n        result = l1;\n    }\n    foreach (j; result) \n    {\n      \
    \  foreach (i; out) \n        {\n            if (j == i) \n            {\n   \
    \             count++;\n                break;\n            }\n        }\n   \
    \ }\n    len_result = count;\n    long[] output = new long[len_result];\n    foreach\
    \ (j; result) \n    {\n        foreach (i; out) \n        {\n            if (j\
    \ == i) \n            {\n                output[p] = j;\n                p++;\n\
    \                break;\n            }\n        }\n    }\n    return output;\n\
    }\n/*\nFor arrays of equal length, return a sorted array of elements that appear\n\
    in both arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L,\
    \ 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L, 8L], [3L,\
    \ 2L])\n    [2L, 3L]\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplbfqlabi.d(17): Error: no identifier for declarator `long[]`

    /tmp/tmplbfqlabi.d(17): Error: found `out` instead of statement

    /tmp/tmplbfqlabi.d(27): Error: found `out` instead of statement

    /tmp/tmplbfqlabi.d(32): Error: found `out` instead of statement

    /tmp/tmplbfqlabi.d(37): Error: expression expected, not `out`

    /tmp/tmplbfqlabi.d(50): Error: expression expected, not `out`

    /tmp/tmplbfqlabi.d(62): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplbfqlabi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    Tuple!(long[], long[]) parts = sort(l1, l2);\n    return common_helper(parts[0],\
    \ parts[1]);\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprffnm0hr.d(14): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmprffnm0hr.d(15): Error: undefined identifier `common_helper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprffnm0hr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    l1.sort;\n    l2.sort;\n    long[] l1_s = unique(l1);\n    long[] l2_s\
    \ = unique(l2);\n    long[] res = [];\n    for (i in 0 .. l1_s.length)\n    {\n\
    \        for (j in 0 .. l2_s.length)\n        {\n            if (l1_s[i] == l2_s[j])\n\
    \            {\n                res ~= l1_s[i];\n            }\n        }\n  \
    \  }\n    return res;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz0x74mmb.d(19): Error: found `..` when expecting `;` following
    statement

    /tmp/tmpz0x74mmb.d(19): Error: found `)` when expecting `;` following `for` condition

    /tmp/tmpz0x74mmb.d(21): Error: found `..` when expecting `;` following statement

    /tmp/tmpz0x74mmb.d(21): Error: found `)` when expecting `;` following `for` condition

    /tmp/tmpz0x74mmb.d(28): Error: found `}` when expecting `)`

    /tmp/tmpz0x74mmb.d(31): Error: found `unittest` when expecting `)`

    /tmp/tmpz0x74mmb.d(40): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0x74mmb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n    if (l1.length == 0 || l2.length == 0) return new long[](0);\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnharhf68.d(13): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmpnharhf68.d(13): Error: declaration expected, not `if`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnharhf68.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n    if (isInputRange!(typeof(l1)) && isInputRange!(typeof(l2)))\n{\n    return\
    \ sort(unique(intersect(l1, l2)));\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmawyaj0m.d(13): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmpmawyaj0m.d(13): Error: declaration expected, not `if`

    /tmp/tmpmawyaj0m.d(16): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmawyaj0m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    immutable int i, j;\n    immutable int sz = l1.length;\n    immutable\
    \ int sz2 = l2.length;\n    int[] found = new int[sz];\n    int szout = 0;\n \
    \   for (i = 0; i < sz; i++) \n    {\n        for (j = 0; j < sz2; j++) \n   \
    \     {\n            if (l1[i] == l2[j]) \n            {\n                found[szout]\
    \ = l1[i];\n                szout++;\n                break;\n            }\n\
    \        }\n    }\n    long[] ret = new long[szout];\n    for (i = 0; i < szout;\
    \ i++) \n    {\n        ret[i] = found[i];\n    }\n    sort(ret);\n    return\
    \ ret;\n}\n/*\nReturn sorted unique elements of an array.\n    >>> unique([1L,\
    \ 2L, 3L, 3L, 2L, 5L, 7L, 4L, 3L, 6L, 5L, 9L, 8L, 5L, 7L,\n        11L, 10L, 10L,\
    \ 10L, 10L, 12L, 9L, 11L, 5L, 7L, 12L, 12L, 12L, 10L,\n        8L, 11L, 6L, 8L,\
    \ 8L, 7L, 13L, 11L, 13L, 14L, 13L, 14L, 13L, 12L, 11L,\n        12L, 12L, 12L,\
    \ 13L, 8L, 13L, 8L, 13L, 8L, 13L, 8L, 13L, 8L, 13L, 8L,\n        13L, 8L, 13L,\
    \ 8L, 13L, 8L, 13L, 8L, 13L, 8L, 13L, 8L, 13L, 8L, 13L, 8L,\n        13L, 8L,\
    \ 13L, 8L, 13L, 8L, 13L, 8L, 13L, 8L, 13L, 8L, 13L, 8L, 13L, 8L,\n        13L,\
    \ 8\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjlc9nfwl.d(39): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjlc9nfwl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto result = long[];\n    auto s = long[](l1);\n    s.sort();\n  \
    \  foreach(e; l2)\n    {\n        if(s.binarySearch(e) != s.length)\n        {\n\
    \            if(result.binarySearch(e) == result.length)\n            {\n    \
    \            result ~= e;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8e875moz.d(14): Error: found `[` when expecting `.` following long

    /tmp/tmp8e875moz.d(14): Error: found `]` when expecting identifier following `long`.

    /tmp/tmp8e875moz.d(15): Error: found `[` when expecting `.` following long

    /tmp/tmp8e875moz.d(15): Error: found `]` when expecting identifier following `long`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8e875moz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return map!(a => a[0])(group(sort(l1.array)) & group(sort(l2.array)));\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkbxypfn1.d(14): Error: template instance `map!((a) => a[0])` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkbxypfn1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto set1 = to(l1);\n    auto set2 = to(l2);\n    return set1.intersection(set2).array;\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1mppa7hx.d(14): Error: undefined identifier `to`, did you mean
    struct `No`?

    /tmp/tmp1mppa7hx.d(15): Error: undefined identifier `to`, did you mean struct
    `No`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1mppa7hx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tauto m1 = l1.sort().uniq;\n\tauto m2 = l2.sort().uniq;\n\tlong[] new_m1;\n\
    \tlong[] new_m2;\n\tforeach(i, val; m1)\n\t{\n\t\t//TODO: \n\t\t//\tAdd try/catch\
    \ to prevent segfault if val = null\n\t\tif(val is in m2)\n\t\t{\n\t\t\tnew_m1\
    \ ~= val;\n\t\t\tnew_m2 ~= val;\n\t\t}\n\t}\n\treturn new_m1;\n}\nunittest\n{\n\
    \    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr7ospzx0.d(22): Error: expression expected, not `in`

    /tmp/tmpr7ospzx0.d(22): Error: found `m2` when expecting `)`

    /tmp/tmpr7ospzx0.d(22): Error: found `)` instead of statement

    /tmp/tmpr7ospzx0.d(28): Error: declaration expected, not `return`

    /tmp/tmpr7ospzx0.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr7ospzx0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    import std.algorithm.comparison : equal;\n    import std.algorithm.searching\
    \ : canFind;\n    auto set1 = set(l1);\n    auto set2 = set(l2);\n    return l1.filter!(x\
    \ => set2.canFind(x))\n        .sort!((a, b) => a > b)\n        .uniq!equal;\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpau3ze_8x.d(16): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmpau3ze_8x.d(17): Error: undefined identifier `set`, did you mean variable
    `set1`?

    /tmp/tmpau3ze_8x.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpau3ze_8x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto r1 = 0L.iota.array;\n    auto r2 = 0L.iota.array;\n    foreach(i,\
    \ element; l1)\n    {\n        if(element in l2)\n        {\n            r1 ~=\
    \ element;\n        }\n    }\n    auto c = 0L;\n    auto rc = 0L;\n    auto cc\
    \ = 0L;\n    auto g = 0L;\n    auto j = 0L;\n    auto i = 0L;\n    auto k = 0L;\n\
    \    auto q = 0L;\n    auto r = 0L;\n    auto d = 0L;\n    auto f = 0L;\n    auto\
    \ x = 0L;\n    auto p = 0L;\n    auto e = 0L;\n    auto h = 0L;\n    auto m =\
    \ 0L;\n    auto b = 0L;\n    auto t = 0L;\n    auto z = 0L;\n    auto s = 0L;\n\
    \    auto a = 0L;\n    auto v = 0L;\n    auto w = 0L;\n    auto u = 0L;\n    auto\
    \ o = 0L;\n    auto n = 0L;\n    auto y = 0L;\n    auto l = 0L;\n    auto o2 =\
    \ 0L;\n    auto rr = 0L;\n    auto oo = 0L;\n    auto oo2 = 0L;\n    auto oo3\
    \ = 0L;\n    auto oo4 = 0L;\n    auto oo5 = 0L;\n    auto oo6 = 0L;\n    auto\
    \ oo7 = 0L;\n    auto oo8 = 0L;\n    auto oo9 = 0L;\n    auto oo10 = 0L;\n   \
    \ auto oo11 = 0L;\n    auto oo12 = 0L;\n    auto oo13 = 0L;\n    auto oo14 = 0L;\n\
    \    auto oo15 = 0L;\n    auto oo16 = 0L;\n    auto oo17 = 0L;\n    auto oo18\
    \ = 0L;\n    auto oo19 = 0L;\n    auto oo20 = 0L;\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpraim7bxd.d(73): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpraim7bxd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] l3 = [];\n    long max = std.math.max(l1.length, l2.length);\n\
    \    for (long i = 0; i < max; i++)\n    {\n        if (i < l1.length && i < l2.length)\n\
    \        {\n            if (l1[i] == l2[i])\n            {\n                l3\
    \ ~= l1[i];\n            }\n        }\n    }\n    return l3;\n}\n/*\nReturn unique\
    \ elements that are in all arrays.\n    >>> commonAll([1L, 3L, 2L, 4L], [1L, 4L,\
    \ 5L], [1L, 2L, 5L])\n    [1L]\n    >>> commonAll([1L, 3L, 2L, 4L], [4L, 3L, 5L],\
    \ [5L, 2L, 1L])\n    [1L, 2L, 3L, 4L, 5L]\n*/\nlong[] commonAll(long[][] n) \n\
    {\n    auto n2 = n.dup;\n    long[] l = n[0];\n    for (long i = 1; i < n.length;\
    \ i++)\n    {\n        l = common(l, n[i]);\n    }\n    return l;\n}\n/*\nReturn\
    \ unique elements that are in any of the arrays.\n    >>> commonAny([1L, 3L, 2L,\
    \ 4L], [1L, 4L, 5L], [1L, 2L, 5L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> commonAny([1L,\
    \ 3L, 2L, 4L], [4L, 3L, 5L], [5L, 2L, 1L])\n    [1L, 2L, 3L, 4L, 5L]\n*/\nlong[]\
    \ commonAny(long[][] n) \n{\n    auto n2 = n.dup;\n    return n.flatten;\n}\n\
    /*\nReturn which of the first array's elements are also in the second array.\n\
    \    >>> commonIndex([5L, 4L, 3L, 2L, 1L], [\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7azzxlix.d(57): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7azzxlix.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] result = [];\n    foreach (index, elem; l1) \n    {\n      \
    \  if (l2.canFind(elem)) \n        {\n            result ~= elem;\n        }\n\
    \    }\n    return result;\n}\n/*\n    >>> intersection([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> intersection([5L,\
    \ 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n*/\nlong[] intersection(long[] l1, long[]\
    \ l2) \n{\n    long[] result = [];\n    foreach (index, elem; l1) \n    {\n  \
    \      if (l2.canFind(elem)) \n        {\n            result ~= elem;\n      \
    \  }\n    }\n    return result;\n}\n/*\n    >>> unique([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L])\n    [1L, 4L, 3L, 34L, 653L, 2L, 5L]\n    >>> unique([1L, 4L, 3L, 34L,\
    \ 653L, 2L, 1L, 5L])\n    [1L, 4L, 3L, 34L, 653L, 2L, 5L]\n*/\nlong[] unique(long[]\
    \ l1) \n{\n    long[] result = [];\n    foreach (index, elem; l1) \n    {\n  \
    \      if (!result.canFind(elem)) \n        {\n            result ~= elem;\n \
    \       }\n    }\n    return result;\n}\n/*\n    >>> countEqual([1L, 4L, 3L, 34L,\
    \ 653L, 2L, 5L])\n    [1L, 4L, 3L, 34L, 653L, 2L, 5L]\n    >>> countEqual([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 1\nunittest\n{\n    alias candidate = common;\n\n   \
    \ assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw9wzbgkm.d(60): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw9wzbgkm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return unique(l1.intersect(l2)).sort();\n}\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2vs29rxu.d(14): Error: undefined identifier `unique`, did you mean
    struct `Unique(T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2vs29rxu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    if(l1.length < l2.length) \n    {\n        return common(l2, l1);\n\
    \    }\n    return l1.filter!(x => l2.canFind(x)).sort.uniq;\n}\n/*\nReturn sorted\
    \ unique common elements for two arrays.\n    >>> common([5L, 3L, 2L, 8L], [3L,\
    \ 2L])\n    [2L, 3L]\n    >>> common([5L, 3L, 2L, 8L], [3L, 2L])\n    [2L, 3L]\n\
    */\nstring[] common(string[] l1, string[] l2) \n{\n    if(l1.length < l2.length)\
    \ \n    {\n        return common(l2, l1);\n    }\n    return l1.filter!(x => l2.canFind(x)).sort.uniq;\n\
    }\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([[1L,\
    \ 2L], [2L, 3L]], [[1L, 2L], [3L, 4L]])\n    [[1L, 2L], [2L, 3L]]\n    >>> common([[1L,\
    \ 2L], [2L, 3L]], [[1L, 2L], [3L, 4L]])\n    [[1L, 2L], [2L, 3L]]\n*/\nlong[][]\
    \ common(long[][] l1, long[][] l2) \n{\n    if(l1.length < l2.length) \n    {\n\
    \        return common(l2, l1);\n    }\n    return l1.filter!(x => l2.canFind(x)).sort.uniq;\n\
    }\n/*\nReturn sorted unique common elements for two arrays.\n    >>> common([[1L,\
    \ 2L], [2L, 3L]], [[1L, 2L], [3L, 4L]])\n    [[1L, 2L], [2L, 3L]]\n    >>> common([[1L,\
    \ 2L], [2L, 3L]], [[1L, 2L], [3L, 4L]])\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvvrmh8vi.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvvrmh8vi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    //const long[] l1;\n    //const long[] l2;\n    long[long] s2;\n  \
    \  foreach (x; l2)\n    {\n        s2[x] = 1;\n    }\n    long[] result;\n   \
    \ foreach (x; l1)\n    {\n        if (x in s2)\n        {\n            result\
    \ ~= x;\n        }\n    }\n    return sort(result);\n}\n/*\nReturn True if 2 arrays\
    \ have any common element, False otherwise.\n    >>> has_common([3L, 2L, 1L],\
    \ [8L, 5L, 7L])\n    False\n    >>> has_common([3L, 2L, 1L], [1L, 5L, 7L])\n \
    \   True\n*/\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpszirvwt4.d(29): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpszirvwt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    return sort(array(uniq(l1) & uniq(l2)));\n}\n/*\nReturn the union of\
    \ two arrays.\n    >>> union([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L,\
    \ 9L, 653L, 121L])\n    [1L, 4L, 3L, 34L, 653L, 2L, 5L, 7L, 9L, 121L]\n    >>>\
    \ union([5L, 3L, 2L, 8L], [3L, 2L])\n    [5L, 3L, 2L, 8L]\n*/\nlong[] union(long[]\
    \ l1, long[] l2)\n{\n    return sort(array(uniq(l1) | uniq(l2)));\n}\n/*\nReturn\
    \ the difference of two arrays.\n    >>> difference([1L, 4L, 3L, 34L, 653L, 2L,\
    \ 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [4L, 3L, 34L, 2L]\n    >>> difference([5L,\
    \ 3L, 2L, 8L], [3L, 2L])\n    [5L, 8L]\n*/\nlong[] difference(long[] l1, long[]\
    \ l2)\n{\n    return sort(array(uniq(l1) - uniq(l2)));\n}\n/*\nReturn a random\
    \ element from the given array\n    >>> randomElement([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L])\n    3L\n*/\nlong randomElement(long[] l)\n{\n    return l[uniform(0,\
    \ l.length)];\n}\n/*\nConvert tuple to list\n    >>> tupleToList((1L, 2L, 3L))\n\
    \    [1L, 2L, 3L]\n*/\nlong[] tupleToList(long[] t)\n{\n    return t;\n}\n/*\n\
    Subset of the array\n    >>> sample([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n\n\
    unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L,\
    \ 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4nh3r20s.d(23): Error: no identifier for declarator `long[]`

    /tmp/tmp4nh3r20s.d(23): Error: { } expected following `union` declaration

    /tmp/tmp4nh3r20s.d(23): Error: declaration expected, not `(`

    /tmp/tmp4nh3r20s.d(26): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4nh3r20s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] commonArray = [];\n    foreach(l; l1)\n    {\n        if(l2.count(l)\
    \ != 0)\n        {\n            commonArray ~= l;\n        }\n    }\n    commonArray.sort;\n\
    \    return commonArray.dup.unique;\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4tsps5f8.d(17): Error: no property `count` for type `long[]`

    /tmp/tmp4tsps5f8.d(22): Error: no property `sort` for type `long[]`

    /tmp/tmp4tsps5f8.d(23): Error: no property `unique` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4tsps5f8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    enum long[] al1 = l1.dup.sort().unique();\n    enum long[] al2 = l2.dup.sort().unique();\n\
    \    enum long[] aa1 = al1.length < al2.length ? al1 : al2;\n    enum long[] aa2\
    \ = al1.length < al2.length ? al2 : al1;\n    enum long[] result = [];\n    foreach\
    \ (i, v; aa1)\n    {\n        if (aa2.canFind(v))\n        {\n            result\
    \ ~= v;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9lzrn3mn.d(14): Error: no property `sort` for type `long[]`

    /tmp/tmp9lzrn3mn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9lzrn3mn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tauto set1 = set(l1);\n\treturn sort(array(l2.retain!(a => set1.find(a)\
    \ !is null)));\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpknobofi6.d(14): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    /tmp/tmpknobofi6.d(15): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpknobofi6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto sorted1 = l1.array;\n    auto sorted2 = l2.array;\n    sorted1.sort();\n\
    \    sorted2.sort();\n    auto result = new long[];\n    auto i = 0, j = 0;\n\
    \    for (; i < sorted1.length && j < sorted2.length;)\n    {\n        if (sorted1[i]\
    \ < sorted2[j])\n        {\n            i++;\n        }\n        else if (sorted1[i]\
    \ > sorted2[j])\n        {\n            j++;\n        }\n        else\n      \
    \  {\n            result ~= sorted1[i];\n            i++;\n            j++;\n\
    \        }\n    }\n    return result;\n}\n/*\nCombine two arrays.\n    >>> combine_unique([1L,\
    \ 2L, 3L], [3L, 4L, 5L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> combine_unique([1L,\
    \ 2L, 3L], [3L, 4L, 5L, 2L])\n    [1L, 2L, 3L, 4L, 5L]\n*/\nlong[] combine_unique(long[]\
    \ l1, long[] l2) \n{\n    auto sorted1 = l1.array;\n    auto sorted2 = l2.array;\n\
    \    sorted1.sort();\n    sorted2.sort();\n    auto result = new long[];\n   \
    \ auto i = 0, j = 0;\n    for (; i < sorted1.length && j < sorted2.length;)\n\
    \    {\n        if (sorted1[i] < sorted2[j])\n        {\n            result ~=\
    \ sorted1[i];\n            i++;\n        }\n        else if (sorted1[i] > sorted2[j])\n\
    \        {\n            result ~= sorted2[j];\n            j++;\n        }\n \
    \       else\n        {\n            result ~= sorted1[i];\n            i++;\n\
    \            j++;\n        }\n    }\n    for (; i < sorted1.length; i++)\n   \
    \ {\n        result ~= sorted1[i];\n    }\n    for (; j < sorted\nunittest\n{\n\
    \    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyz5lug6w.d(78): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmpyz5lug6w.d(87): Error: found `void` when expecting `)`

    /tmp/tmpyz5lug6w.d(87): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyz5lug6w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto l3 = new long[](l1.length + l2.length); \n    l3 = l1 ~ l2;\n\
    \    l3.sort;\n    l3.uniq;\n    return l3;\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6f1l0rhl.d(16): Error: no property `sort` for type `long[]`

    /tmp/tmp6f1l0rhl.d(17): Error: no property `uniq` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6f1l0rhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto s = set(l1);\n    s.intersect(l2);\n    return s.array;\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc0vhdcit.d(14): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc0vhdcit.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n    if (isInputRange!(typeof(l1)) && isInputRange!(typeof(l2)))\n{\n    long[]\
    \ l3 = new long[l1.length];\n    foreach (i, e; l1)\n    {\n        if (l2.canFind(e))\n\
    \        {\n            l3[i] = e;\n        }\n    }\n    return l3.uniq;\n}\n\
    /*\nReturn sorted unique elements not present in both arrays.\n    >>> uncommon([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [2L, 3L,\
    \ 4L, 34L, 7L, 9L, 121L]\n    >>> uncommon([5L, 3L, 2L, 8L], [3L, 2L])\n    [5L,\
    \ 8L]\n    \n*/\nlong[] uncommon(long[] l1, long[] l2) \n    if (isInputRange!(typeof(l1))\
    \ && isInputRange!(typeof(l2)))\n{\n    return (l1 ~ l2).uniq;\n}\n/*\nDivide\
    \ an array into `n` equal chunks.\n    >>> arraySlice([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L, 9L, 10L], 3)\n    [[1L, 2L, 3L, 4L], [5L, 6L, 7L], [8L, 9L, 10L]]\n\
    */\nlong[][] arraySlice(long[] arr, size_t len) \n    if (isInputRange!(typeof(arr)))\n\
    {\n    assert(len > 0, \"chunk length cannot be 0 or less\");\n    size_t q =\
    \ arr.length / len;\n    size_t r = arr.length % len;\n    return arr.chunks(len).filter!(ch\
    \ => ch.length == q).chain(arr.chunks(len).filter!(ch => ch.length == q + 1)).array;\n\
    }\n/*\nReturn the first duplicate item in an array\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_wieo19l.d(13): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmp_wieo19l.d(13): Error: declaration expected, not `if`

    /tmp/tmp_wieo19l.d(16): Error: declaration expected, not `foreach`

    /tmp/tmp_wieo19l.d(16): Error: no identifier for declarator `l1`

    /tmp/tmp_wieo19l.d(16): Error: declaration expected, not `)`

    /tmp/tmp_wieo19l.d(21): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_wieo19l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] r = [];\n    long[long] h1 = [i : l1[i]];\n    foreach(k,v;l2)\n\
    \    {\n        if(h1.count(v))\n        {\n            r ~= v;\n        }\n \
    \   }\n    return r.sort().unique;\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9b6zf51q.d(15): Error: undefined identifier `i`

    /tmp/tmp9b6zf51q.d(15): Error: undefined identifier `i`

    /tmp/tmp9b6zf51q.d(18): Error: no property `count` for type `long[long]`

    /tmp/tmp9b6zf51q.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9b6zf51q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto res = new long[](l1.length);\n    auto i = 0;\n    foreach(x;\
    \ l1)\n    {\n        foreach(y; l2)\n        {\n            if(x == y)\n    \
    \        {\n                res[i] = x;\n                i++;\n            }\n\
    \        }\n    }\n    return res[0..i];\n}\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgvuvkhtl.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4285bd]

    ??:? void tmpgvuvkhtl.__unittest_L29_C1() [0x428046]

    ??:? void tmpgvuvkhtl.__modtest() [0x428340]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c677]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b50a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430795]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430721]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e1]

    ??:? runModuleUnitTests [0x42c44d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a80]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n\tlong[ulong] m1 = [1L: 1L];\n\tforeach(el; l1)\n\t\tm1[el] = 1L;\n\tlong[]\
    \ res = [];\n\tforeach(el; l2)\n\t\tif(m1[el])\n\t\t\tres ~= el;\n\treturn res;\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmppw_y9clb.d(19): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4290f2]

    ??:? long[] tmppw_y9clb.common(long[], long[]) [0x428064]

    ??:? void tmppw_y9clb.__unittest_L23_C1() [0x428187]

    ??:? void tmppw_y9clb.__modtest() [0x4284e0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ef87]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428e9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42bc99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42bd28]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42bc25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e75]

    ??:? runModuleUnitTests [0x42ed5d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int functi'
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \nin\n{\n    foreach (e; l1) assert(e >= 0);\n    foreach (e; l2) assert(e >=\
    \ 0);\n}\nout\n(result)\n{\n    foreach (e; result) assert(e >= 0);\n}\nbody\n\
    {\n    long[long] count;\n    foreach (e; l1)\n    {\n        count[e] = 1;\n\
    \    }\n    foreach (e; l2)\n    {\n        if (count.exists(e))\n        {\n\
    \            count[e] = count[e] + 1;\n        }\n    }\n    long[] result;\n\
    \    foreach (e; count)\n    {\n        if (e[1] == 2)\n        {\n          \
    \  result ~= e[0];\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L,\
    \ 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv0yodwg8.d(32): Error: no property `exists` for type `long[long]`

    /tmp/tmpv0yodwg8.d(40): Error: only one index allowed to index `long`

    /tmp/tmpv0yodwg8.d(42): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv0yodwg8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto result = new long[](0);\n    int j = 0;\n    int counter = 0;\n\
    \    auto temp1 = sort(l1);\n    auto temp2 = sort(l2);\n    bool flag = false;\n\
    \    foreach(elem1; temp1)\n    {\n        foreach(elem2; temp2)\n        {\n\
    \            if(elem1 == elem2)\n            {\n                flag = true;\n\
    \                break;\n            }\n        }\n        if(flag)\n        {\n\
    \            result = result ~ elem1;\n            flag = false;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = common;\n\n\
    \    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpimzzfyeq.d(17): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpimzzfyeq.d(18): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpimzzfyeq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] res;\n    auto hash1 = new HashSet!(long)();\n    foreach(elem;\
    \ l1)\n    {\n        hash1.insert(elem);\n    }\n    auto hash2 = new HashSet!(long)();\n\
    \    foreach(elem; l2)\n    {\n        hash2.insert(elem);\n    }\n    hash1.intersect(hash2);\n\
    \    res = hash1.values;\n    res.sort;\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L,\
    \ 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphgvkmpka.d(15): Error: template instance `HashSet!long` template
    `HashSet` is not defined

    /tmp/tmphgvkmpka.d(20): Error: template instance `HashSet!long` template `HashSet`
    is not defined

    /tmp/tmphgvkmpka.d(27): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphgvkmpka.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto ret = new long[](0);\n    size_t i = 0, j = 0;\n    while (i <\
    \ l1.length && j < l2.length) \n    {\n        if (l1[i] < l2[j]) \n        {\n\
    \            i++;\n        }\n        else if (l1[i] > l2[j]) \n        {\n  \
    \          j++;\n        }\n        else \n        {\n            if (ret.length\
    \ == 0 || ret[$-1] != l1[i]) \n            {\n                ret ~= l1[i];\n\
    \            }\n            i++;\n            j++;\n        }\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0jcip_0n.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x42867d]

    ??:? void tmp0jcip_0n.__unittest_L38_C1() [0x428102]

    ??:? void tmp0jcip_0n.__modtest() [0x4283fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d123]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bfb6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430b01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430fb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf8d]

    ??:? runModuleUnitTests [0x42cef9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b40]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] l3 = new long[l1.length];\n    int counter = 0;\n    foreach(l1element;\
    \ l1)\n    {\n        foreach(l2element; l2)\n        {\n            if(l1element\
    \ == l2element)\n            {\n                l3[counter] = l1element;\n   \
    \             counter++;\n            }\n        }\n    }\n    return l3[0..counter];\n\
    }\n/*\nReturn sorted unique elements for array.\n    >>> unique([1L, 2L, 3L, 1L,\
    \ 2L, 3L, 5L, 6L, 7L, 8L, 9L, 1L, 2L, 3L, 1L, 4L, 5L, 6L, 7L, 8L, 9L, 3L, 2L,\
    \ 3L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1\nunittest\n{\n    alias candidate\
    \ = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L,\
    \ 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L,\
    \ 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L,\
    \ 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz72bfzwd.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz72bfzwd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163948
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n        long[long[]] ret = [];\n        ret = new long[long[]];\n     \
    \   long[] tmp = [];\n        tmp = new long[];\n        sort(l1);\n        sort(l2);\n\
    \        ulong i = 0UL;\n        while (i < l1.length)\n        {\n          \
    \  ulong j = 0UL;\n            while (j < l2.length)\n            {\n        \
    \        if (l1[i] == l2[j])\n                {\n                    ret.insertBack(l1[i]);\n\
    \                    i++;\n                    while (i < l1.length && l1[i] ==\
    \ l1[i - 1UL])\n                    {\n                        i++;\n        \
    \            }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphyunodoh.d(15): Error: need size of rightmost array, not type `long[]`

    /tmp/tmphyunodoh.d(34): Error: found `unittest` instead of statement

    /tmp/tmphyunodoh.d(43): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmphyunodoh.d(43): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmphyunodoh.d(43): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphyunodoh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] l = new long[l1.length];\n    int c = 0;\n    foreach(i1;l1)\n\
    \    {\n        foreach(i2;l2)\n        {\n            if(i1 == i2)\n        \
    \    {\n                l[c] = i1;\n                c++;\n            }\n    \
    \    }\n    }\n    return l[0..c];\n}\nunittest\n{\n    alias candidate = common;\n\
    \n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L,\
    \ 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L])\
    \ == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L,\
    \ 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdrmpo3wa.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4285bd]

    ??:? void tmpdrmpo3wa.__unittest_L29_C1() [0x428046]

    ??:? void tmpdrmpo3wa.__modtest() [0x428340]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c677]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b50a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430795]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430721]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e1]

    ??:? runModuleUnitTests [0x42c44d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a80]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    long[] u1 = l1.dup.sort;\n    long[] u2 = l2.dup.sort;\n    long[]\
    \ common;\n    foreach(n; u1) {\n        if(u2.canFind(n)) {\n            if(common\
    \ is null) {\n                common = new long[0];\n            }\n         \
    \   common ~= n;\n        }\n    }\n    return common;\n}\nunittest\n{\n    alias\
    \ candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L],\
    \ [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprp9qkljz.d(14): Error: no property `sort` for type `long[]`

    /tmp/tmprp9qkljz.d(15): Error: no property `sort` for type `long[]`

    /tmp/tmprp9qkljz.d(18): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp9qkljz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    if (l1.length < l2.length) \n    {\n        return common(l2, l1);\n\
    \    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1xj710k4.d(18): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1xj710k4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    auto result = []();\n    foreach (n; l1) \n    {\n        if (n in\
    \ l2) \n        {\n            result ~= n;\n        }\n    }\n    return sort(result);\n\
    }\n/*\nReturn the difference of two arrays.\n    >>> difference([1L, 4L, 3L, 34L,\
    \ 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n    [2L, 3L, 4L, 34L]\n  \
    \  >>> difference([5L, 3L, 2L, 8L], [3L, 2L])\n    [5L, 8L]\n    >>> difference([5L,\
    \ 3L, 2L, 8L], [3L, 2L])\n    [5L, 8L]\n    \n*/\nlong[] difference(long[] l1,\
    \ long[] l2) \n{\n    auto result = []();\n    foreach (n; l1) \n    {\n     \
    \   if (!(n in l2)) \n        {\n            result ~= n;\n        }\n    }\n\
    \    return sort(result);\n}\n/*\nReturn the difference of two arrays.\n    >>>\
    \ difference([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n\
    \    [2L, 3L, 4L, 34L]\n    >>> difference([5L, 3L, 2L, 8L], [3L, 2L])\n    [5L,\
    \ 8L]\n    >>> difference([5L, 3L, 2L, 8L], [3L, 2L])\n    [5L, 8L]\n    \n*/\n\
    long[] difference(long[] l1, long[] l2) \n{\n    auto result = []();\n    foreach\
    \ (n; l1) \n    {\n        if (!(n in l2)) \n            result ~= n;\n    }\n\
    \    return sort(result);\n}\n/*\nReturn the elements in two arrays that are not\
    \ in both.\n    >>> notIn\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L,\
    \ 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn93uz61q.d(66): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn93uz61q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n {\n  return to!(long[])( sort(std.algorithm.uniq( intersect( l1, l2 ))));\n\
    \ }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkqwoapvm.d(14): Error: template instance `to!(long[])` template
    `to` is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkqwoapvm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n    if (allSatisfy!(a => is(typeof(a) == long), l1) && allSatisfy!(a => is(typeof(a)\
    \ == long), l2)) {\n    return l1.filter!(a => l2.count(a) > 0).uniq;\n}\nunittest\n\
    {\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L,\
    \ 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L,\
    \ 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L],\
    \ [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], [])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp027horfm.d(13): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmp027horfm.d(13): Error: declaration expected, not `if`

    /tmp/tmp027horfm.d(15): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp027horfm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n{\n    ArrayList!long lst = new ArrayList!long();\n    foreach(l; l1)\n  \
    \  {\n        if(l2.canFind(l))\n        {\n            lst.insert(l);\n     \
    \   }\n    }\n    lst.sort();\n    lst.unique();\n    return lst.toArray();\n\
    }\nunittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
    \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwdt3zwjf.d(14): Error: template instance `ArrayList!long` template
    `ArrayList` is not defined

    /tmp/tmpwdt3zwjf.d(14): Error: template instance `ArrayList!long` template `ArrayList`
    is not defined

    /tmp/tmpwdt3zwjf.d(17): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwdt3zwjf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common\
    \ elements for two arrays.\n    >>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L,\
    \ 7L, 1L, 5L, 9L, 653L, 121L])\n    [1L, 5L, 653L]\n    >>> common([5L, 3L, 2L,\
    \ 8L], [3L, 2L])\n    [2L, 3L]\n\n    \n*/\nlong[] common(long[] l1, long[] l2)\
    \ \n    {\n    auto r = new long[](0);\n    r.length = map!((a, b) => a == b ?\
    \ 1 : 0)(l1, l2).sum();\n    r[0] = 0;\n    auto it = new long[](0);\n    it.length\
    \ = map!((a, b) => a == b ? 1 : 0)(l1, l2).sum();\n    it[0] = 0;\n    foreach\
    \ (i, e; map!((a, b) => a == b ? 1 : 0)(l1, l2))\n        {\n        if (e ==\
    \ 1)\n            {\n            r[it[0]] = l1[i];\n            it[0] += 1;\n\
    \            }\n        }\n    sort(r);\n    return r[0 .. r.length];\n    }\n\
    unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L,\
    \ 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
    \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
    \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L,\
    \ 2L, 8L], []) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsq3h62h_.d(15): Error: template instance `map!((a, b) => a == b
    ? 1 : 0)` template `map` is not defined

    /tmp/tmpsq3h62h_.d(18): Error: template instance `map!((a, b) => a == b ? 1 :
    0)` template `map` is not defined

    /tmp/tmpsq3h62h_.d(20): Error: template instance `map!((a, b) => a == b ? 1 :
    0)` template `map` is not defined

    /tmp/tmpsq3h62h_.d(28): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsq3h62h_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163949
