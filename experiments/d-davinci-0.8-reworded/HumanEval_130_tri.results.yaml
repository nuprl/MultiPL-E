language: d
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long prev = 0, a = 1, b = 1, c =\
    \ 1;\n    while (n >= 3)\n    {\n        prev = a;\n        a = b;\n        b\
    \ = c;\n        c = prev + a + b;\n        n--;\n    }\n    if (n == 2)\n    \
    \    return new long[] { 1, a, b, c };\n    if (n == 1)\n        return new long[]\
    \ { 1, a, b };\n    return new long[] { 1, a };\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92jiz8iz.d(34): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp92jiz8iz.d(34): Error: found `}` when expecting `;` following statement

    /tmp/tmp92jiz8iz.d(34): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp92jiz8iz.d(36): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp92jiz8iz.d(36): Error: found `}` when expecting `;` following statement

    /tmp/tmp92jiz8iz.d(36): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp92jiz8iz.d(37): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp92jiz8iz.d(37): Error: found `}` when expecting `;` following statement

    /tmp/tmp92jiz8iz.d(37): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92jiz8iz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n <= 2)\n        return repeat(1L,\
    \ 3);\n    auto t = long[0];\n    t ~= 1;\n    t ~= 3;\n    t ~= 2;\n    foreach\
    \ (ind; 3..n)\n    {\n        if (ind % 2 == 0)\n            t ~= 1 + ind / 2;\n\
    \        else\n            t ~= t[$ - 3] + t[$ - 2] + t[$ - 1];\n    }\n    return\
    \ t;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) ==\
    \ [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n   \
    \ assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp03h8yfaq.d(26): Error: found `[` when expecting `.` following long

    /tmp/tmp03h8yfaq.d(26): Error: found `0` when expecting identifier following `long`.

    /tmp/tmp03h8yfaq.d(26): Error: semicolon expected following auto declaration,
    not `]`

    /tmp/tmp03h8yfaq.d(26): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp03h8yfaq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return [1L, 3L, 2L, 8L];\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8c19h8b9.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428715]

    ??:? void tmp8c19h8b9.__unittest_L26_C1() [0x427f4a]

    ??:? void tmp8c19h8b9.__modtest() [0x428498]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6ff]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b592]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430725]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b569]

    ??:? runModuleUnitTests [0x42c4d5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b64]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tribonacci = new long[(int)n\
    \ + 1];\n    if (n >= 1)\n        tribonacci[1] = 3;\n    if (n >= 2)\n      \
    \  tribonacci[2] = 2;\n    if (n >= 3)\n        tribonacci[3] = 8;\n    for (int\
    \ i = 4; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            tribonacci[i]\
    \ = 1 + i / 2;\n        else\n            tribonacci[i] = tribonacci[i - 1] +\
    \ tribonacci[i - 2] + tribonacci[i + 1];\n    }\n    return tribonacci;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpom5huevx.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpom5huevx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto retVal = new long[](n+1);\n\
    \    retVal[0] = 1;\n    retVal[1] = 3;\n    retVal[2] = 2;\n    for(long i =\
    \ 3; i <= n; i++)\n    {\n        retVal[i] = i % 2 == 0 ? 1 + i / 2 : retVal[i-1]\
    \ + retVal[i-2] + retVal[i+1];\n    }\n    return retVal;\n}\n// best practice\n\
    long[] tri(long n)\n{\n    auto t = [3,1,2];\n    auto next = [](auto ref t) {\n\
    \        auto x = t[0] + t[1] + t[2];\n        t[0] = t[1];\n        t[1] = t[2];\n\
    \        t[2] = x;\n    };\n    return iota(n+1).map!(i => i < 3 ? t[i] : (next(t),\
    \ t[2])).array;\n}\n// best practice\nlong[] tri(long n)\n{\n    auto t = [3,1,2];\n\
    \    auto next = [](auto ref t) {\n        auto x = t[0] + t[1] + t[2];\n    \
    \    t[0] = t[1];\n        t[1] = t[2];\n        t[2] = x;\n    };\n    return\
    \ iota(n+1).map!(i => i < 3 ? t[i] : (next(t), t[2])).array;\n}\n// best practice\n\
    long[] tri(long n)\n{\n    auto t = [3,1,2];\n    auto next = [](auto ref t) {\n\
    \        auto x = t[0] + t[1] + t[2];\n        t[0] = t[1];\n        t[1] = t[2];\n\
    \        t[2] = x;\n    };\n    return iota(n+1).map!(i => i < 3 ? t[i] : (next(t),\
    \ t[2])).array;\n}\n// from user r.s\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo1aaja2d.d(38): Error: expression expected, not `auto`

    /tmp/tmpo1aaja2d.d(38): Error: found `ref` when expecting `,`

    /tmp/tmpo1aaja2d.d(38): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpo1aaja2d.d(43): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpo1aaja2d.d(50): Error: expression expected, not `auto`

    /tmp/tmpo1aaja2d.d(50): Error: found `ref` when expecting `,`

    /tmp/tmpo1aaja2d.d(50): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpo1aaja2d.d(55): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpo1aaja2d.d(62): Error: expression expected, not `auto`

    /tmp/tmpo1aaja2d.d(62): Error: found `ref` when expecting `,`

    /tmp/tmpo1aaja2d.d(62): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpo1aaja2d.d(67): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1aaja2d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 1L ? new long[] {} : n\
    \ < 2L ? new long[] {3L} : n < 3L ? new long[] {1L, 3L} : n < 4L ? new long[]\
    \ {1L, 3L, 2L} : new long[] {1L, 3L, 2L, 8L};\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0sl2l8ky.d(24): Error: found `{` when expecting `:`

    /tmp/tmp0sl2l8ky.d(24): Error: expression expected, not `}`

    /tmp/tmp0sl2l8ky.d(24): Error: found `:` when expecting `;` following `return`
    statement

    /tmp/tmp0sl2l8ky.d(24): Error: found `{` when expecting `:`

    /tmp/tmp0sl2l8ky.d(24): Error: found `}` when expecting `;` following statement

    /tmp/tmp0sl2l8ky.d(24): Error: found `:` instead of statement

    /tmp/tmp0sl2l8ky.d(24): Error: declaration expected, not `:`

    /tmp/tmp0sl2l8ky.d(25): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0sl2l8ky.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n\t/*\n\t3\n\t2\n\t1\n\t*/\n\tauto a =\
    \ new ulong[n + 1];\n\ta[0] = 0;\n\ta[1] = 3;\n\tif (n == 1) return a;\n\ta[2]\
    \ = 2;\n\tif (n == 2) return a;\n\ta[3] = 8;\n\tif (n == 3) return a;\n\t//n >\
    \ 3\n\tfor (int i = 4; i <= n; i++)\n\t{\n\t\tif (i % 2 == 0) a[i] = i / 2;\n\t\
    \telse a[i] = a[i - 1] + a[i - 2] + a[i + 1];\n\t}\n\treturn a;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcdkxeath.d(32): Error: cannot implicitly convert expression `a`
    of type `ulong[]` to `long[]`

    /tmp/tmpcdkxeath.d(34): Error: cannot implicitly convert expression `a` of type
    `ulong[]` to `long[]`

    /tmp/tmpcdkxeath.d(36): Error: cannot implicitly convert expression `a` of type
    `ulong[]` to `long[]`

    /tmp/tmpcdkxeath.d(43): Error: cannot implicitly convert expression `a` of type
    `ulong[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdkxeath.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto result = new long[n+1];\n  \
    \  foreach(i; 0..n+1)\n    {\n        if(i == 0)\n        {\n            result[i]\
    \ = 1;\n        }\n        else if(i == 1)\n        {\n            result[i] =\
    \ 3;\n        }\n        else if(i == 2)\n        {\n            result[i] = 2;\n\
    \        }\n        else if(i % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + result[i-2] + result[i-3];\n        }\n        else\n        {\n         \
    \   result[i] = 1 + i / 2;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq_m_f4_i.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288e5]

    ??:? void tmpq_m_f4_i.__unittest_L50_C1() [0x428091]

    ??:? void tmpq_m_f4_i.__modtest() [0x428664]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c99f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b832]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430abd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a49]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b809]

    ??:? runModuleUnitTests [0x42c775]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428da8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] Result = new long[cast(int)n\
    \ + 1];\n    if (n == 0)\n    {\n        return Result;\n    }\n    else\n   \
    \ {\n        Result[0] = 1;\n        Result[1] = 3;\n        Result[2] = 2;\n\
    \        for (long i = 3; i <= n; i++)\n        {\n            if (i % 2 == 0)\n\
    \            {\n                Result[cast(int)i] = cast(long)(1 + i / 2);\n\
    \            }\n            else\n            {\n                Result[cast(int)i]\
    \ = cast(long)(Result[cast(int)i - 1] + Result[cast(int)i - 2] + Result[cast(int)i\
    \ + 1]);\n            }\n        }\n        return Result;\n    }\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpl95gi9i5.d(42): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42895e]

    ??:? long[] tmpl95gi9i5.tri(long) [0x427fa1]

    ??:? void tmpl95gi9i5.__unittest_L48_C1() [0x427fdf]

    ??:? void tmpl95gi9i5.__modtest() [0x42862c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c967]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7d1]

    ??:? runModuleUnitTests [0x42c73d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n > 0L ? [ 1L ] ~ tri(n -\
    \ 1L).retro : [];\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2i4klr02.d(24): Error: no property `retro` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2i4klr02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[(int)n+1];\n\
    \    arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    if(n>2)\n    {\n     \
    \ for(int i = 3; i<=n;i++)\n      {\n          if(i%2==0)\n          {\n     \
    \         arr[i] = i/2;\n          }\n          else\n          {\n          \
    \    arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n          }\n      }  \n    }\n\
    \    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc7w_6ldb.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc7w_6ldb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[n+1];\n   \
    \ if(n == 0)\n    {\n        return arr;\n    }\n    arr[0] = 1;\n    if(n ==\
    \ 1)\n    {\n        return arr;\n    }\n    arr[1] = 3;\n    if(n == 2)\n   \
    \ {\n        return arr;\n    }\n    arr[2] = 2;\n    for(long i = 3; i <= n;\
    \ i++)\n    {\n        if(i % 2 == 0)\n        {\n            arr[i] = 1 + i /\
    \ 2;\n        }\n        else\n        {\n            arr[i] = arr[i-1] + arr[i-2]\
    \ + arr[i+1];\n        }\n    }\n    return arr;\n}\nlong[] tri(long n) \n{\n\
    \    long[] arr = new long[n+1];\n    if(n == 0)\n    {\n        return arr;\n\
    \    }\n    arr[0] = 1;\n    if(n == 1)\n    {\n        return arr;\n    }\n \
    \   arr[1] = 3;\n    if(n == 2)\n    {\n        return arr;\n    }\n    arr[2]\
    \ = 2;\n    for(long i = 3; i <= n; i++)\n    {\n        if(i % 2 == 0)\n    \
    \    {\n            arr[i] = 1 + i / 2;\n        }\n        else\n        {\n\
    \            arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n        }\n    }\n    return\
    \ arr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxag2alai.d(88): Error: `tmpxag2alai.tri` called with argument types
    `(long)` matches both:

    /tmp/tmpxag2alai.d(22):     `tmpxag2alai.tri(long n)`

    and:

    /tmp/tmpxag2alai.d(53):     `tmpxag2alai.tri(long n)`

    /tmp/tmpxag2alai.d(89): Error: `tmpxag2alai.tri` called with argument types `(long)`
    matches both:

    /tmp/tmpxag2alai.d(22):     `tmpxag2alai.tri(long n)`

    and:

    /tmp/tmpxag2alai.d(53):     `tmpxag2alai.tri(long n)`

    /tmp/tmpxag2alai.d(90): Error: `tmpxag2alai.tri` called with argument types `(long)`
    matches both:

    /tmp/tmpxag2alai.d(22):     `tmpxag2alai.tri(long n)`

    and:

    /tmp/tmpxag2alai.d(53):     `tmpxag2alai.tri(long n)`

    /tmp/tmpxag2alai.d(91): Error: `tmpxag2alai.tri` called with argument types `(long)`
    matches both:

    /tmp/tmpxag2alai.d(22):     `tmpxag2alai.tri(long n)`

    and:

    /tmp/tmpxag2alai.d(53):     `tmpxag2alai.tri(long n)`

    /tmp/tmpxag2alai.d(92): Error: `tmpxag2alai.tri` called with argument types `(long)`
    matches both:

    /tmp/tmpxag2alai.d(22):     `tmpxag2alai.tri(long n)`

    and:

    /tmp/tmpxag2alai.d'
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    //Non-recursive\n    auto r = new\
    \ long[n+1];\n    r[0] = 1;\n    r[1] = 3;\n    r[2] = 2;\n    for(size_t i =\
    \ 3; i <= n; i++)\n    {\n        if(i % 2) //i is odd\n            r[i] = r[i-1]\
    \ + r[i-2] + r[i+1];\n        else //i is even\n            r[i] = 1 + i / 2;\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpeimybc0d.d(32): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428926]

    ??:? long[] tmpeimybc0d.tri(long) [0x427f37]

    ??:? void tmpeimybc0d.__unittest_L38_C1() [0x427fa7]

    ??:? void tmpeimybc0d.__modtest() [0x4285f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c92f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a4d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430efc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b799]

    ??:? runModuleUnitTests [0x42c705]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] array;\n    int i;\n    int\
    \ j;\n    int k;\n    int l;\n    k = 1;\n    l = 1;\n    j = 1;\n    if (n ==\
    \ 1)\n    {\n        array = new long[1];\n        array[0] = 3;\n        return\
    \ array;\n    }\n    else if (n == 2)\n    {\n        array = new long[2];\n \
    \       array[0] = 1;\n        array[1] = 3;\n        return array;\n    }\n \
    \   else if (n == 3)\n    {\n        array = new long[3];\n        array[0] =\
    \ 1;\n        array[1] = 3;\n        array[2] = 2;\n        return array;\n  \
    \  }\n    else\n    {\n        array = new long[n + 1];\n        array[0] = 1;\n\
    \        array[1] = 3;\n        array[2] = 2;\n        for (i = 3; i < n + 1;\
    \ i++)\n        {\n            if (i % 2 == 0)\n            {\n              \
    \  array[i] = (1 + (i / 2));\n            }\n            else\n            {\n\
    \                k = array[i - 1];\n                l = array[i - 2];\n      \
    \          j = array[i - 3];\n                array[i] = k + l + j;\n        \
    \    }\n        }\n        return array;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnnke6gfl.d(67): Error: cannot implicitly convert expression `array[cast(ulong)(i
    - 1)]` of type `long` to `int`

    /tmp/tmpnnke6gfl.d(68): Error: cannot implicitly convert expression `array[cast(ulong)(i
    - 2)]` of type `long` to `int`

    /tmp/tmpnnke6gfl.d(69): Error: cannot implicitly convert expression `array[cast(ulong)(i
    - 3)]` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnnke6gfl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 2 ?\n      new long[]{1L,\
    \ 3L, 2L, 8L} :\n      new long[]{1L, 3L, 2L, 8L}.put(3, tri(n - 1).back + tri(n\
    \ - 2).back + tri(n + 1).back);\n}\nunittest\n{\n    alias candidate = tri;\n\n\
    \    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb0ho2hk2.d(25): Error: found `{` when expecting `:`

    /tmp/tmpb0ho2hk2.d(25): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmpb0ho2hk2.d(25): Error: found `:` instead of statement

    /tmp/tmpb0ho2hk2.d(26): Error: unexpected `(` in declarator

    /tmp/tmpb0ho2hk2.d(26): Error: basic type expected, not `3`

    /tmp/tmpb0ho2hk2.d(26): Error: found `3` when expecting `)`

    /tmp/tmpb0ho2hk2.d(26): Error: no identifier for declarator `.put(_error_)`

    /tmp/tmpb0ho2hk2.d(26): Error: semicolon expected following function declaration

    /tmp/tmpb0ho2hk2.d(26): Error: declaration expected, not `,`

    /tmp/tmpb0ho2hk2.d(27): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb0ho2hk2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto len = n + 1;\n    auto a = new\
    \ long[len];\n    a[0] = 1;\n    a[1] = 3;\n    a[2] = 2;\n    foreach(i; 3..len)\n\
    \    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpren72178.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428845]

    ??:? void tmpren72178.__unittest_L35_C1() [0x427ff1]

    ??:? void tmpren72178.__modtest() [0x4285c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8ff]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b792]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ecc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b769]

    ??:? runModuleUnitTests [0x42c6d5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d08]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto fib = to!(long[])([]);\n   \
    \ fib ~= 0;\n    fib ~= 1;\n    fib ~= 1;\n    for(int i = 3; i <= n; i++)\n \
    \   {\n        if(i % 2 == 0)\n        {\n            fib ~= 1 + i / 2;\n    \
    \    }\n        else\n        {\n            fib ~= fib[i - 1] + fib[i - 2] +\
    \ fib[i + 1];\n        }\n    }\n    return fib;\n}\n/*\n    These examples have\
    \ been converted from Python to D. The original examples \n    can be found on\
    \ Codewars.\n*/\nunittest\n{\n    assert(tri(3L) == [1L, 3L, 2L, 8L]);\n    assert(tri(4L)\
    \ == [1L, 3L, 2L, 8L, 13L]);\n    assert(tri(0L) == [1L]);\n    assert(tri(1L)\
    \ == [1L, 3L]);\n    assert(tri(2L) == [1L, 3L, 2L]);\n    assert(tri(11L) ==\
    \ [1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L]);\n    assert(tri(15L)\
    \ == [1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L, 610L, 987L, 1597L,\
    \ 2584L]);\n    assert(tri(20L) == [1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L,\
    \ 233L, 377L, 610L, 987L, 1597L, 2584L, 4181L, 6765L, 10946L, 17711L, 28657L]);\n\
    \    assert(tri(30L) == [1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L,\
    \ 377L, 610L, 987L, 1597L, 2584\nunittest\n{\n    alias candidate = tri;\n\n \
    \   assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo97lzmel.d(56): Error: found `unittest` when expecting `,`

    /tmp/tmpo97lzmel.d(71): Error: found `void` when expecting `,`

    /tmp/tmpo97lzmel.d(71): Error: found `{` when expecting `,`

    /tmp/tmpo97lzmel.d(71): Error: expression expected, not `}`

    /tmp/tmpo97lzmel.d(71): Error: found `End of File` when expecting `,`

    /tmp/tmpo97lzmel.d(55): Error: found `End of File` when expecting `]`

    /tmp/tmpo97lzmel.d(71): Error: found `End of File` when expecting `)`

    /tmp/tmpo97lzmel.d(71): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpo97lzmel.d(71): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo97lzmel.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int i;\n    long[] myarr;\n    myarr\
    \ = new long[n+1];\n    myarr[0] = 1;\n    myarr[1] = 3;\n    myarr[2] = 2;\n\
    \    for(i = 3; i < n + 1; i++)\n    {\n        if( i % 2 == 0)\n        {\n \
    \           myarr[i] = 1 + i / 2;\n        }\n        else\n        {\n      \
    \      myarr[i] = myarr[i-1] + myarr[i-2] + myarr[i-3];\n        }\n    }\n  \
    \  return myarr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfv0e9e15.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288a5]

    ??:? void tmpfv0e9e15.__unittest_L43_C1() [0x428055]

    ??:? void tmpfv0e9e15.__modtest() [0x428628]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c95f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f2c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7c9]

    ??:? runModuleUnitTests [0x42c735]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d68]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] array;\n    if (n <= 1)\n\
    \    {\n        array = new long[3];\n        array[0] = 1;\n        array[1]\
    \ = 3;\n        array[2] = 2;\n    }\n    else\n    {\n        array = new long[n\
    \ + 1];\n        array[0] = 1;\n        array[1] = 3;\n        array[2] = 2;\n\
    \        for (long i = 3; i <= n; i++)\n        {\n            if (i % 2 == 0)\n\
    \            {\n                array[i] = (1 + i / 2);\n            }\n     \
    \       else\n            {\n                array[i] = (array[i - 1] + array[i\
    \ - 2] + array[i + 1]);\n            }\n        }\n    }\n    return array;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpyjpdjoq3.d(46): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4289de]

    ??:? long[] tmpyjpdjoq3.tri(long) [0x428024]

    ??:? void tmpyjpdjoq3.__unittest_L52_C1() [0x428063]

    ??:? void tmpyjpdjoq3.__modtest() [0x4286b0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9e7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b87a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430b05]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430fb4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a91]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b851]

    ??:? runModuleUnitTests [0x42c7bd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    import std.algorithm;\n    import\
    \ std.conv;\n    import std.range;\n    if (n == 0) return [1];\n    else if (n\
    \ == 1) return [1, 3];\n    else if (n == 2) return [1, 3, 2];\n    else\n   \
    \ {\n        long[] res = [1, 3, 2];\n        long first = 1, second = 3, third\
    \ = 2;\n        foreach (num; 3 .. n)\n        {\n            if (num % 2 == 0)\
    \ res ~= 1 + num / 2;\n            else\n            {\n                res ~=\
    \ first + second + third;\n                first = second;\n                second\
    \ = third;\n                third = res[$ - 1];\n            }\n        }\n  \
    \      return res;\n    }\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6dfirxdi.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x428915]

    ??:? void tmp6dfirxdi.__unittest_L48_C1() [0x4280c1]

    ??:? void tmp6dfirxdi.__modtest() [0x428694]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d35f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c45]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430bd1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c1c9]

    ??:? runModuleUnitTests [0x42d135]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dd8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  if (n == 0)\n    return new long[0];\n\
    \  if (n == 1)\n    return new long[] {1};\n  if (n == 2)\n    return new long[]\
    \ {1, 3};\n  long a = 1, b = 3, c = 2;\n  long[] res = new long[n + 1];\n  res[0]\
    \ = 1;\n  res[1] = 3;\n  res[2] = 2;\n  for (long i = 3; i <= n; i++)\n  {\n \
    \   res[i] = isEven(i) ? 1 + i / 2 : res[i - 1] + res[i - 2] + res[i + 1];\n \
    \ }\n  return res;\n}\n \nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9gljgwso.d(27): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp9gljgwso.d(27): Error: found `}` when expecting `;` following statement

    /tmp/tmp9gljgwso.d(27): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp9gljgwso.d(29): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp9gljgwso.d(29): Error: found `}` when expecting `;` following statement

    /tmp/tmp9gljgwso.d(29): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gljgwso.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return [1L, 3L, 2L, 8L];\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8c19h8b9.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428715]

    ??:? void tmp8c19h8b9.__unittest_L26_C1() [0x427f4a]

    ??:? void tmp8c19h8b9.__modtest() [0x428498]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6ff]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b592]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430725]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b569]

    ??:? runModuleUnitTests [0x42c4d5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b64]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n < 0)\n        return new long[0];\n\
    \    if (n == 0)\n        return new long[1];\n    if (n == 1)\n        return\
    \ new long[2];\n    if (n == 2)\n        return new long[3];\n    if (n == 3)\n\
    \        return new long[4];\n    if (n == 4)\n        return new long[5];\n \
    \   if (n == 5)\n        return new long[6];\n    if (n == 6)\n        return\
    \ new long[7];\n    if (n == 7)\n        return new long[8];\n    if (n == 8)\n\
    \        return new long[9];\n    if (n == 9)\n        return new long[10];\n\
    \    if (n == 10)\n        return new long[11];\n    if (n == 11)\n        return\
    \ new long[12];\n    if (n == 12)\n        return new long[13];\n    if (n ==\
    \ 13)\n        return new long[14];\n    if (n == 14)\n        return new long[15];\n\
    \    if (n == 15)\n        return new long[16];\n    if (n == 16)\n        return\
    \ new long[17];\n    if (n == 17)\n        return new long[18];\n    if (n ==\
    \ 18)\n        return new long[19];\n    if (n == 19)\n        return new long[20];\n\
    \    if (n == 20)\n        return new long[21];\n    if (n == 21)\n        return\
    \ new long[22];\n    if (n == 22)\n        return new long[23];\n    if (n ==\
    \ 23)\n        return new long[24];\n    if (n == 24)\n        return new long[25];\n\
    \    if (n == 25)\n        return new long[26];\n    if (n == 26)\n        return\
    \ new long[27];\n    if (n == 27)\n        return new long[28];\n    if (n ==\
    \ 28)\n        return new long[29];\n    if (n == 29)\n        return new long[30];\n\
    \    if (n == 30)\n        return new long[\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3pqjelx7.d(88): Error: expression expected, not `unittest`

    /tmp/tmp3pqjelx7.d(89): Error: found `{` when expecting `]`

    /tmp/tmp3pqjelx7.d(90): Error: found `alias` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3pqjelx7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto res = new long[n + 1];\n   \
    \ if (n == 0)\n        return res;\n    res[0] = 1;\n    res[1] = 3;\n    for\
    \ (size_t i = 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            res[i]\
    \ = 1 + i / 2;\n        else\n            res[i] = res[i - 1] + res[i - 2] + res[i\
    \ + 1];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = tri;\n\n\
    \    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpyi7zzcfb.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428916]

    ??:? long[] tmpyi7zzcfb.tri(long) [0x427f5d]

    ??:? void tmpyi7zzcfb.__unittest_L38_C1() [0x427f9b]

    ??:? void tmpyi7zzcfb.__modtest() [0x4285e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c91f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a3d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430eec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b789]

    ??:? runModuleUnitTests [0x42c6f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n==0L ? new long[]() : \n\
    \        n < 3L ? new long[] {1L, 3L, 2L} : \n        n < 4L ? new long[] {1L,\
    \ 3L, 2L, 8L} : \n        n < 5L ? new long[] {1L, 3L, 2L, 8L, 13L} : \n     \
    \   n < 6L ? new long[] {1L, 3L, 2L, 8L, 13L, 21L} : \n        n < 7L ? new long[]\
    \ {1L, 3L, 2L, 8L, 13L, 21L, 34L} : \n        n < 8L ? new long[] {1L, 3L, 2L,\
    \ 8L, 13L, 21L, 34L, 55L} : \n        n < 9L ? new long[] {1L, 3L, 2L, 8L, 13L,\
    \ 21L, 34L, 55L, 89L} : \n        n < 10L ? new long[] {1L, 3L, 2L, 8L, 13L, 21L,\
    \ 34L, 55L, 89L, 144L} : \n        n < 11L ? new long[] {1L, 3L, 2L, 8L, 13L,\
    \ 21L, 34L, 55L, 89L, 144L, 233L} : \n        n < 12L ? new long[] {1L, 3L, 2L,\
    \ 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L} : \n        n < 13L ? new long[]\
    \ {1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L, 610L} : \n     \
    \   n < 14L ? new long[] {1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L,\
    \ 377L, 610L, 987L} : \n        n < 15L ? new long[] {1L, 3L, 2L, 8L, 13L, 21L,\
    \ 34L, 55\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf0cwigsn.d(25): Error: found `{` when expecting `:`

    /tmp/tmpf0cwigsn.d(25): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmpf0cwigsn.d(25): Error: found `:` instead of statement

    /tmp/tmpf0cwigsn.d(26): Error: declaration expected, not `:`

    /tmp/tmpf0cwigsn.d(42): Error: declaration expected, not `assert`

    /tmp/tmpf0cwigsn.d(43): Error: declaration expected, not `assert`

    /tmp/tmpf0cwigsn.d(44): Error: declaration expected, not `assert`

    /tmp/tmpf0cwigsn.d(45): Error: declaration expected, not `assert`

    /tmp/tmpf0cwigsn.d(46): Error: declaration expected, not `assert`

    /tmp/tmpf0cwigsn.d(47): Error: declaration expected, not `assert`

    /tmp/tmpf0cwigsn.d(48): Error: declaration expected, not `assert`

    /tmp/tmpf0cwigsn.d(49): Error: declaration expected, not `assert`

    /tmp/tmpf0cwigsn.d(50): Error: declaration expected, not `assert`

    /tmp/tmpf0cwigsn.d(51): Error: declaration expected, not `assert`

    /tmp/tmpf0cwigsn.d(52): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "'
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    switch(n)\n    {\n        case 0:\n\
    \            return new long[1];\n        case 1:\n            return new long[2];\n\
    \        case 2:\n            return new long[3];\n        default:\n        \
    \    long[] arr = new long[n + 1];\n            arr[0] = 1;\n            arr[1]\
    \ = 3;\n            arr[2] = 2;\n            for(int i = 3; i < n + 1; i++)\n\
    \            {\n                if(i % 2 == 0)\n                {\n          \
    \          arr[i] = 1 + i / 2;\n                }\n                else\n    \
    \            {\n                    arr[i] = arr[i - 1] + arr[i - 2] + arr[i +\
    \ 1];\n                }\n            }\n            return arr;\n    }\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpzqkexi22.d(45): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428996]

    ??:? long[] tmpzqkexi22.tri(long) [0x427fda]

    ??:? void tmpzqkexi22.__unittest_L51_C1() [0x428017]

    ??:? void tmpzqkexi22.__modtest() [0x428664]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c99f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b832]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430abd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a49]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b809]

    ??:? runModuleUnitTests [0x42c775]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    // Write your code here\n    long[]\
    \ tri = new long[n + 1];\n    tri[0] = 1;\n    tri[1] = 3;\n    tri[2] = 2;\n\
    \    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            tri[i] = 1 + i / 2;\n        }\n        else\n        {\n       \
    \     tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1];\n        }\n    }\n    return\
    \ tri;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp2mb4qt6p.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmp2mb4qt6p.tri(long) [0x427f7c]

    ??:? void tmp2mb4qt6p.__unittest_L42_C1() [0x427fbb]

    ??:? void tmp2mb4qt6p.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tribonacciArray = new long[n\
    \ + 1];\n    int count = 0;\n    while(count < n + 1)\n    {\n        if(count\
    \ == 0)\n        {\n            tribonacciArray[count] = 1;\n        }\n     \
    \   else if(count == 1)\n        {\n            tribonacciArray[count] = 3;\n\
    \        }\n        else if(count == 2)\n        {\n            tribonacciArray[count]\
    \ = 2;\n        }\n        else if(count % 2 == 0)\n        {\n            tribonacciArray[count]\
    \ = 1 + (count / 2);\n        }\n        else\n        {\n            tribonacciArray[count]\
    \ = tribonacciArray[count - 1] + tribonacciArray[count - 2] + tribonacciArray[count\
    \ + 1];\n        }\n        count++;\n    }\n    return tribonacciArray;\n}\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpasv3nvq5.d(46): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42897e]

    ??:? long[] tmpasv3nvq5.tri(long) [0x427fc0]

    ??:? void tmpasv3nvq5.__unittest_L52_C1() [0x427fff]

    ??:? void tmpasv3nvq5.__modtest() [0x42864c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c987]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b81a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aa5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a31]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f1]

    ??:? runModuleUnitTests [0x42c75d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret = new long[n + 1];\n \
    \   ret[0] = 1;\n    ret[1] = 3;\n    ret[2] = 2;\n    if (n > 2)\n    {\n   \
    \     for (int i = 3; i <= n; i++)\n        {\n            if (i % 2 == 0)\n \
    \           {\n                ret[i] = 1 + i / 2;\n            }\n          \
    \  else\n            {\n                ret[i] = ret[i - 1] + ret[i - 2] + ret[i\
    \ + 1];\n            }\n        }\n    }\n    return ret;\n}\nunittest\n{\n  \
    \  alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpk55pg722.d(38): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpk55pg722.tri(long) [0x427f85]

    ??:? void tmpk55pg722.__unittest_L44_C1() [0x427fc3]

    ??:? void tmpk55pg722.__modtest() [0x428610]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n < 2) \n    {\n        return\
    \ n == 0 ? new long[]() : new long[] { 1 };\n    }\n    long[] res = new long[n\
    \ + 1];\n    res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for (long i =\
    \ 3; i <= n; i++) \n    {\n        res[i] = res[i - 1] + res[i - 2] + (n & 1 ==\
    \ 1 ? res[i + 1] : i / 2);\n    }\n    return res;\n}\n/*\n    >>> tri(3L)\n \
    \   [1L, 3L, 2L, 8L]\n    >>> tri(4L)\n    [1L, 3L, 2L, 8L, 5L]\n    >>> tri(5L)\n\
    \    [1L, 3L, 2L, 8L, 5L, 13L]\n    >>> tri(6L)\n    [1L, 3L, 2L, 8L, 5L, 13L,\
    \ 21L]\n    >>> tri(7L)\n    [1L, 3L, 2L, 8L, 5L, 13L, 21L, 34L]\n    >>> tri(10L)\n\
    \    [1L, 3L, 2L, 8L, 5L, 13L, 21L, 34L, 55L, 89L, 144L]\n    >>> tri(20L)\n \
    \   [1L, 3L, 2L, 8L, 5L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L, 610L, 987L,\
    \ 1597L, 2584L, 4181L, 6765L, 10946L, 17711L]\n    >>> tri(100L)\n    [1L, 3L,\
    \ 2L, 8L, 5L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L, 610L, 987L, 1597L, 2584L,\
    \ 4181L, 6765L, 10946L, 17711L, 28657L, 46368L, 75025L, 121393L\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5fvpm03a.d(26): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp5fvpm03a.d(26): Error: found `}` when expecting `;` following statement

    /tmp/tmp5fvpm03a.d(26): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp5fvpm03a.d(34): Error: `1 == 1` must be parenthesized when next to operator
    `&`

    /tmp/tmp5fvpm03a.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5fvpm03a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] r = new long[n + 1];\n   \
    \ r[0] = 1;\n    r[1] = 3;\n    r[2] = 2;\n    for (long i = 3; i <= n; i++) \n\
    \    {\n        if ((i % 2) == 0)\n            r[i] = 1 + (i / 2);\n        else\n\
    \            r[i] = r[i - 1] + r[i - 2] + r[i + 1];\n    }\n    return r;\n}\n\
    long[] tri1(long n) \n{\n    long[] tri = new long[n + 1];\n    tri[0] = 1;\n\
    \    tri[1] = 3;\n    tri[2] = 2;\n    foreach (i; 3..n + 1)\n        tri[i] =\
    \ i % 2 ? tri[i - 1] + tri[i - 2] + tri[i + 1] : 1 + i / 2;\n    return tri;\n\
    }\nlong[] tri2(long n) \n{\n    long[] out = new long[n + 1];\n    out[0] = 1;\n\
    \    out[1] = 3;\n    out[2] = 2;\n    foreach (i; 3..n + 1)\n        out[i] =\
    \ i % 2 ? out[i - 1] + out[i - 2] + out[i + 1] : 1 + i / 2;\n    return out;\n\
    }\nlong[] tri3(long n) \n{\n    long[] out = new long[n + 1];\n    out[0] = 1;\n\
    \    out[1] = 3;\n    out[2] = 2;\n    foreach (i; 3..n + 1)\n        out[i] =\
    \ i % 2 ? out[i - 1] + out[i - 2] + out[i + 1] : 1 + i / 2;\n    return out;\n\
    }\nlong[] tri4(long n) \n{\n    long[] out = new long[n + 1];\n    out[0] = 1;\n\
    \    out[1] = 3;\n    out[2] = 2;\n    foreach\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoywyadaw.d(49): Error: no identifier for declarator `long[]`

    /tmp/tmpoywyadaw.d(49): Error: found `out` instead of statement

    /tmp/tmpoywyadaw.d(50): Error: found `out` instead of statement

    /tmp/tmpoywyadaw.d(51): Error: found `out` instead of statement

    /tmp/tmpoywyadaw.d(52): Error: found `out` instead of statement

    /tmp/tmpoywyadaw.d(54): Error: found `out` instead of statement

    /tmp/tmpoywyadaw.d(55): Error: expression expected, not `out`

    /tmp/tmpoywyadaw.d(59): Error: no identifier for declarator `long[]`

    /tmp/tmpoywyadaw.d(59): Error: found `out` instead of statement

    /tmp/tmpoywyadaw.d(60): Error: found `out` instead of statement

    /tmp/tmpoywyadaw.d(61): Error: found `out` instead of statement

    /tmp/tmpoywyadaw.d(62): Error: found `out` instead of statement

    /tmp/tmpoywyadaw.d(64): Error: found `out` instead of statement

    /tmp/tmpoywyadaw.d(65): Error: expression expected, not `out`

    /tmp/tmpoywyadaw.d(69): Error: no identifier for declarator `long[]`

    /tmp/tmpoywyadaw.d(69): Error: found `out` instead of'
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n\
    \    if(n == 0)\n        return new long[0];\n    else if(n == 1)\n        return\
    \ new long[]{1};\n    else if(n == 2)\n        return new long[]{1,3};\n    else\
    \ if(n == 3)\n        return new long[]{1,3,2};\n    else\n    {\n        result[0]\
    \ = 1;\n        result[1] = 3;\n        result[2] = 2;\n        for(int i = 3;\
    \ i <= n; i++)\n        {\n            if(i % 2 == 0)\n                result[i]\
    \ = 1 + i / 2;\n            else\n                result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptqmsp8xd.d(28): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmptqmsp8xd.d(28): Error: found `}` when expecting `;` following statement

    /tmp/tmptqmsp8xd.d(28): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmptqmsp8xd.d(29): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmptqmsp8xd.d(31): Error: declaration expected, not `else`

    /tmp/tmptqmsp8xd.d(33): Error: declaration expected, not `else`

    /tmp/tmptqmsp8xd.d(36): Error: no identifier for declarator `result[1]`

    /tmp/tmptqmsp8xd.d(36): Error: declaration expected, not `=`

    /tmp/tmptqmsp8xd.d(37): Error: no identifier for declarator `result[2]`

    /tmp/tmptqmsp8xd.d(37): Error: declaration expected, not `=`

    /tmp/tmptqmsp8xd.d(38): Error: declaration expected, not `for`

    /tmp/tmptqmsp8xd.d(38): Error: no identifier for declarator `i`

    /tmp/tmptqmsp8xd.d(38): Error: declaration expected, not `<=`

    /tmp/tmptqmsp8xd.d(38): Error: no identifier for declarator `i`

    /tmp/tmptqmsp8xd.d(38): '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[(int)n + 1];\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    res[0] = a;\n    res[1]\
    \ = b;\n    res[2] = c;\n    for (int i = 3; i <= n; i++)\n    {\n        res[i]\
    \ = res[i - 1] + res[i - 2] + res[i - 3];\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx3h0z96c.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3h0z96c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    //auto t =\n        //generate!((a,\
    \ b, c) => cast(long)a)(3L)(tuple(3L, 2L, 8L));\n    //return t.take(n + 1).array;\n\
    \    static struct tribonacci(T)\n    {\n        static struct TupleType(T)\n\
    \        {\n            private T a, b, c;\n            T a() { return a; }\n\
    \            T b() { return b; }\n            T c() { return c; }\n          \
    \  this(T a, T b, T c)\n            {\n                this.a = a;\n         \
    \       this.b = b;\n                this.c = c;\n            }\n        }\n \
    \       TupleType!T init() { return TupleType!T(3, 2, 8); }\n        TupleType!T\
    \ next(TupleType!T t)\n        {\n            static if (is(T == long))\n    \
    \            return TupleType!T(t.b, t.c, t.a + t.b + t.c);\n            else\n\
    \                return TupleType!T(t.b, t.c, cast(T)(t.a + t.b + t.c));\n   \
    \     }\n    }\n    auto t =\n        generate!(tribonacci!long)(tribonacci!long.init());\n\
    \    return t.take(n + 1).array;\n}\n//long[] tri(long n) \n//{\n//    struct\
    \ tribonacci\n//    {\n//        static struct tuple\n//        {\n//        \
    \    private long a, b, c;\n//            long a() { return a; }\n//         \
    \   long b() { return b; }\n//            long c() { return c; }\n//         \
    \   this(long a, long b, long c)\n//            {\n//                this.a =\
    \ a;\n//                this.b = b;\n//                this.c = c;\n//       \
    \     }\n//        }\n//        tuple init() { return tuple(3, 2, 8); }\n//  \
    \      tuple next(tuple t)\n//        {\n//            return tuple(t.b, t.c,\
    \ t\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq8fis1fw.d(52): Error: template instance `generate!(tribonacci!long)`
    template `generate` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq8fis1fw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tribonacci = new long[n +\
    \ 1];\n    for (int i = 0; i <= n; i++)\n    {\n        tribonacci[i] = tribonacciSequence(i);\n\
    \    }\n    return tribonacci;\n}\nlong tribonacciSequence(long n)\n{\n    if\
    \ (n == 0)\n    {\n        return 1;\n    }\n    else if (n == 1)\n    {\n   \
    \     return 3;\n    }\n    else if (n == 2)\n    {\n        return 2;\n    }\n\
    \    else if (n % 2 == 0)\n    {\n        return 1 + n / 2;\n    }\n    else\n\
    \    {\n        return tribonacciSequence(n - 1) + tribonacciSequence(n - 2) +\
    \ tribonacciSequence(n + 1);\n    }\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    // your code here\n    long[] tribonacci\
    \ = new long[n+1];\n    if(n==0) return tribonacci;\n    else if(n==1) {\n   \
    \     tribonacci[0] = 1;\n        return tribonacci;\n    }\n    else if(n==2)\
    \ {\n        tribonacci[0] = 1;\n        tribonacci[1] = 3;\n        return tribonacci;\n\
    \    }\n    else {\n        tribonacci[0] = 1;\n        tribonacci[1] = 3;\n \
    \       tribonacci[2] = 2;\n        for(int i = 3; i < n; i++) {\n           \
    \ tribonacci[i] = tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3];\n     \
    \   }\n        return tribonacci;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphbm4piwi.d(50): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288f5]

    ??:? void tmphbm4piwi.__unittest_L46_C1() [0x4280a1]

    ??:? void tmphbm4piwi.__modtest() [0x428674]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b842]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430acd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f7c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a59]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b819]

    ??:? runModuleUnitTests [0x42c785]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428db8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tri = new long[n + 1];\n \
    \   tri[0] = 1;\n    tri[1] = 3;\n    tri[2] = 2;\n    for (long i = 3; i <= n;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            tri[i] = 1 + i\
    \ / 2;\n        }\n        else\n        {\n            tri[i] = tri[i - 1] +\
    \ tri[i - 2] + tri[i + 1];\n        }\n    }\n    return tri;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpsq5p_4ta.d(36): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpsq5p_4ta.tri(long) [0x427f7f]

    ??:? void tmpsq5p_4ta.__unittest_L41_C1() [0x427fbf]

    ??:? void tmpsq5p_4ta.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n <= 0)\n        return [1];\n\
    \    return array(tuple(1,1,1))\n           .retro(n)\n           .map!(a =>\n\
    \            reduce!q{a[0] + a[1] + a[2]}\n           )\n           .array;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiw54crvh.d(26): Error: undefined identifier `array`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiw54crvh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto b = [](long x) \n    {\n   \
    \     return 1L + (x / 2L);\n    };\n    auto a = [=](long x)\n    {\n       \
    \ return b(x) + b(x + 1L) + b(x - 1L);\n    };\n    auto even = [=](long x) \n\
    \    {\n        return x % 2L == 0L;\n    };\n    auto max = n + 1L;\n    long[max]\
    \ res;\n    for (long i = 0L; i < max; i++) \n    {\n        res[i] = even(i)\
    \ ? b(i) : a(i);\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgo4xfwyb.d(24): Error: found `x` when expecting `.` following long

    /tmp/tmpgo4xfwyb.d(24): Error: found `)` when expecting identifier following `long`.

    /tmp/tmpgo4xfwyb.d(25): Error: found `{` when expecting `,`

    /tmp/tmpgo4xfwyb.d(26): Error: expression expected, not `return`

    /tmp/tmpgo4xfwyb.d(26): Error: found `1L` when expecting `,`

    /tmp/tmpgo4xfwyb.d(26): Error: found `;` when expecting `,`

    /tmp/tmpgo4xfwyb.d(27): Error: expression expected, not `}`

    /tmp/tmpgo4xfwyb.d(27): Error: found `;` when expecting `,`

    /tmp/tmpgo4xfwyb.d(28): Error: expression expected, not `auto`

    /tmp/tmpgo4xfwyb.d(28): Error: found `a` when expecting `,`

    /tmp/tmpgo4xfwyb.d(28): Error: expression expected, not `=`

    /tmp/tmpgo4xfwyb.d(28): Error: expression expected, not `=`

    /tmp/tmpgo4xfwyb.d(28): Error: found `x` when expecting `.` following long

    /tmp/tmpgo4xfwyb.d(28): Error: found `)` when expecting identifier following `long`.

    /tmp/tmpgo4xfwyb.d(29): Error: found `{` when expecting `,`

    /tmp/tmpgo4xfwyb.d(30): Error: expr'
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[n+1];\n   \
    \ arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            arr[i] = 1 + (i / 2);\n\
    \        }\n        else\n        {\n            arr[i] = arr[i-1] + arr[i-2]\
    \ + arr[i+1];\n        }\n    }\n    return arr;\n}\n//Test Cases:\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpc7b8qrh2.d(36): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpc7b8qrh2.tri(long) [0x427f82]

    ??:? void tmpc7b8qrh2.__unittest_L42_C1() [0x427fbf]

    ??:? void tmpc7b8qrh2.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[cast(int)\
    \ n + 1];\n    if (n >= 0)\n    {\n        result[0] = 1;\n        if (n >= 1)\n\
    \        {\n            result[1] = 3;\n            if (n >= 2)\n            {\n\
    \                result[2] = 2;\n                for (long i = 3; i <= n; i++)\n\
    \                {\n                    if (i % 2 == 0)\n                    {\n\
    \                        result[cast(int) i] = 1 + i / 2;\n                  \
    \  }\n                    else\n                    {\n                      \
    \  result[cast(int) i] = result[cast(int) i - 1] + result[cast(int) i - 2] + result[cast(int)\
    \ i + 1];\n                    }\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpzbvwddsg.d(42): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428976]

    ??:? long[] tmpzbvwddsg.tri(long) [0x427fb8]

    ??:? void tmpzbvwddsg.__unittest_L50_C1() [0x427ff7]

    ??:? void tmpzbvwddsg.__modtest() [0x428644]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c97f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b812]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a9d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f4c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a29]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7e9]

    ??:? runModuleUnitTests [0x42c755]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] y = new long[n+1];\n    if(n\
    \ == 0) \n    {\n        y[0] = 1;\n        return y;\n    }\n    long[] x = new\
    \ long[n+1];\n    x[0] = 1;\n    x[1] = 3;\n    x[2] = 2;\n    for(int i = 3;\
    \ i <= n; i++) \n    {\n        if(i % 2 == 0) \n        {\n            x[i] =\
    \ 1 + i / 2;\n        }\n        else \n        {\n            x[i] = x[i-1] +\
    \ x[i-2] + x[i+1];\n        }\n    }\n    return x;\n}\n/*\n/////////////////////////////\n\
    ///   Binary Truth Table  ///\n/////////////////////////////\n*/\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp9g75a25r.d(42): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmp9g75a25r.tri(long) [0x427fd1]

    ??:? void tmp9g75a25r.__unittest_L52_C1() [0x42800f]

    ??:? void tmp9g75a25r.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tri_arr;\n    long nth_tri;\n\
    \    long i;\n    // TODO\n    //if (n == 0)\n    //{\n    //    tri_arr = [1];\n\
    \    //}\n    //else if (n == 1)\n    //{\n    //    tri_arr = [1, 3];\n    //}\n\
    \    //else if (n == 2)\n    //{\n    //    tri_arr = [1, 3, 2];\n    //}\n  \
    \  //else if (n == 3)\n    //{\n    //    tri_arr = [1, 3, 2, 8];\n    //}\n \
    \   //else\n    //{\n    //    tri_arr = [1, 3, 2, 8];\n    //    for (i = 4;\
    \ i <= n; i++)\n    //    {\n    //        if (i % 2 == 0)\n    //        {\n\
    \    //            nth_tri = 1 + (i / 2);\n    //        }\n    //        else\n\
    \    //        {\n    //            nth_tri = tri_arr[i - 1] + tri_arr[i - 2]\
    \ + tri_arr[i + 1];\n    //        }\n    //        tri_arr ~= nth_tri;\n    //\
    \    }\n    //}\n    tri_arr = [1, 3, 2, 8];\n    if (n <= 3)\n    {\n       \
    \ tri_arr = tri_arr[0..n+1];\n    }\n    else\n    {\n        for (i = 4; i <=\
    \ n; i++)\n        {\n            if (i % 2 == 0)\n            {\n           \
    \     nth_tri = 1 + (i / 2);\n            }\n            else\n            {\n\
    \                nth_tri = tri_arr[i - 1] + tri_arr[i - 2] + tri_arr[i + 1];\n\
    \            }\n            tri_arr ~= nth_tri;\n        }\n    }\n    return\
    \ tri_arr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmps8oh46og.d(75): Range violation

    ----------------'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    /* \n    constant time and memory\n\
    \    */\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    if (n == 0)\n        return take(result, 1);\n    if (n == 1)\n  \
    \      return take(result, 2);\n    result[2] = 2;\n    for (long i = 3; i <=\
    \ n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n\
    \        else\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpodpqudyc.d(31): Error: undefined identifier `take`, did you mean
    function `tan`?

    /tmp/tmpodpqudyc.d(33): Error: undefined identifier `take`, did you mean function
    `tan`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpodpqudyc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] n1 = new long[(int)n + 1];\n\
    \    if (n == 0) return n1;\n    n1[0] = 1;\n    n1[1] = 3;\n    n1[2] = 2;\n\
    \    for (int i = 3; i < n + 1; i++)\n    {\n        n1[i] = n1[i - 1] + n1[i\
    \ - 2] + n1[i - 3];\n    }\n    return n1;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp33x1rolb.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp33x1rolb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int arraySize = (int)n + 1;\n   \
    \ long[] tribonacci = new long[arraySize];\n    tribonacci[0] = 1; // tri(1) =\
    \ 3\n    for (int i = 1; i < arraySize; i++)\n    {\n        tribonacci[i] = tribonacci[i\
    \ - 1] + tribonacci[i - 2] + tribonacci[i - 3];\n    }\n    return tribonacci;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4duhztwg.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4duhztwg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n == 0 ? new long[]{0L}\n\
    \                  : n == 1 ? new long[]{1L, 3L}\n                           :\
    \ n == 2 ? new long[]{1L, 3L, 2L}\n                                    : tribonacci(n\
    \ + 1);\n}\nlong[] tribonacci(long n)\n{\n    long[] result = new long[n];\n \
    \   result[0] = 1L;\n    result[1] = 3L;\n    result[2] = 2L;\n    for (long i\
    \ = 3; i < n; i++)\n    {\n        result[i] = 1 + i / 2;\n        if (i % 2 ==\
    \ 1)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu47qlha_.d(24): Error: found `{` when expecting `:`

    /tmp/tmpu47qlha_.d(24): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmpu47qlha_.d(25): Error: found `:` instead of statement

    /tmp/tmpu47qlha_.d(26): Error: declaration expected, not `:`

    /tmp/tmpu47qlha_.d(28): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu47qlha_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[n + 1];\n \
    \   res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for (long i = 3; i <= n;\
    \ i++)\n    {\n        if (i%2 == 0) res[i] = 1 + i / 2;\n        else res[i]\
    \ = res[i - 1] + res[i - 2] + res[i + 1];\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpa07d5c0z.d(31): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpa07d5c0z.tri(long) [0x427f7f]

    ??:? void tmpa07d5c0z.__unittest_L35_C1() [0x427fbf]

    ??:? void tmpa07d5c0z.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 1L ? new long[] { 1L }\
    \ : take(n + 1L, trib);\n}\n/*\n    trib = unfoldr (\\(a, b, c) -> Just (a, (b,\
    \ c, a + b + c))) (1, 3, 2)\n*/\nauto trib = unfoldr!((tup2!long, tup2!long, long)\
    \ => Just(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2r8_rck4.d(24): Error: found `{` when expecting `:`

    /tmp/tmp2r8_rck4.d(24): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmp2r8_rck4.d(24): Error: found `:` instead of statement

    /tmp/tmp2r8_rck4.d(30): Error: found `unittest` when expecting `,`

    /tmp/tmp2r8_rck4.d(45): Error: found `void` when expecting `,`

    /tmp/tmp2r8_rck4.d(45): Error: found `{` when expecting `,`

    /tmp/tmp2r8_rck4.d(45): Error: expression expected, not `}`

    /tmp/tmp2r8_rck4.d(45): Error: found `End of File` when expecting `,`

    /tmp/tmp2r8_rck4.d(45): Error: found `End of File` when expecting `)`

    /tmp/tmp2r8_rck4.d(45): Error: found `End of File` when expecting `,`

    /tmp/tmp2r8_rck4.d(45): Error: found `End of File` when expecting `)`

    /tmp/tmp2r8_rck4.d(45): Error: found `End of File` when expecting `,`

    /tmp/tmp2r8_rck4.d(45): Error: found `End of File` when expecting `)`

    /tmp/tmp2r8_rck4.d(45): Error: found `End of File` when expecting `,`

    /tmp/tmp2r8_rck4.d(45): Error: found `End of File` when expecting `)`

    /tm'
  stdout: ''
  timestamp: 1660161383
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  auto r = new long[n+1];\n  r[0] = 1;\n\
    \  r[1] = 3;\n  r[2] = 2;\n  foreach(e; 3..n+1)\n  {\n    r[e] = e % 2 == 0 \n\
    \        ? 1 + e / 2 \n        : r[e-1] + r[e-2] + r[e+1];\n  }\n  return r;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpy73e2j58.d(32): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428926]

    ??:? long[] tmpy73e2j58.tri(long) [0x427f56]

    ??:? void tmpy73e2j58.__unittest_L36_C1() [0x427fa7]

    ??:? void tmpy73e2j58.__modtest() [0x4285f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c92f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a4d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430efc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b799]

    ??:? runModuleUnitTests [0x42c705]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    // your code\n    long[] res = new\
    \ long[n+1];\n    if(n==0)\n    {\n        return [1];\n    }\n    else if(n==1)\n\
    \    {\n        return [1,3];\n    }\n    else if(n==2)\n    {\n        return\
    \ [1,3,2];\n    }\n    else\n    {\n        res[0] = 1;\n        res[1] = 3;\n\
    \        res[2] = 2;\n        foreach(i;3..n+1)\n        {\n            if(i%2==0)\n\
    \            {\n                res[i] = res[i-2]+res[i-1]+res[i-3];\n       \
    \     }\n            else\n            {\n                res[i] = 1+i/2;\n  \
    \          }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpki9xdyb2.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x428945]

    ??:? void tmpki9xdyb2.__unittest_L57_C1() [0x4280f5]

    ??:? void tmpki9xdyb2.__modtest() [0x4286c8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9ff]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b892]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430b1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430fcc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430aa9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b869]

    ??:? runModuleUnitTests [0x42c7d5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e08]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    if (n == 0) return result;\n    result[1] = 3;\n    if\
    \ (n == 1) return result;\n    result[2] = 2;\n    if (n == 2) return result;\n\
    \    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = 1 + i / 2;\n        }\n        else\n        {\n    \
    \        result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n\
    \    }\n    return result;\n}\n/*\nfunction tri(n){\n  var a = new Array(n+1);\n\
    \  a[0] = 1;\n  if (n > 0) a[1] = 3;\n  if (n > 1) a[2] = 2;\n  for (var i = 3;\
    \ i <= n; i++) {\n    if (i % 2 == 0) {\n      a[i] = 1 + i / 2;\n    } else {\n\
    \      a[i] = a[i-1] + a[i-2] + a[i+1];\n    }\n  }\n  return a;\n}\n*/\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp5q12irt9.d(39): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428986]

    ??:? long[] tmp5q12irt9.tri(long) [0x427fc7]

    ??:? void tmp5q12irt9.__unittest_L60_C1() [0x428007]

    ??:? void tmp5q12irt9.__modtest() [0x428654]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c98f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b822]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7f9]

    ??:? runModuleUnitTests [0x42c765]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n <= 0)\n        return [0];\n\
    \    if (n == 1)\n        return [1, 3];\n    if (n == 2)\n        return [1,\
    \ 3, 2];\n    auto res = [1, 3, 2];\n    for (int i = 3; i <= n; i++)\n    {\n\
    \        if (i % 2 == 0)\n            res ~= 1 + (i / 2);\n        else\n    \
    \        res ~= res[$ - 1] + res[$ - 2] + res[$ - 3];\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu1jj9gf8.d(38): Error: cannot implicitly convert expression `res`
    of type `int[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu1jj9gf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    //create a long array of length n\
    \ + 1 to store the tribonacci sequence\n    long[] arr = new long[n + 1];\n  \
    \  //the first three elements of the array are the first three tribonacci numbers\n\
    \    arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    //loop through each element\
    \ in the array\n    for(int i = 3; i < n + 1; i++)\n    {\n        //if the element's\
    \ index is even, set the element to 1 + (i / 2)\n        if(i % 2 == 0)\n    \
    \    {\n            arr[i] = 1 + (i / 2);\n        }\n        //if the element's\
    \ index is odd, set the element to the sum of the previous \n        //    three\
    \ elements in the array\n        else\n        {\n            arr[i] = arr[i -\
    \ 1] + arr[i - 2] + arr[i + 1];\n        }\n    }\n    //return the tribonacci\
    \ sequence array\n    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpxq97a9pe.d(42): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpxq97a9pe.tri(long) [0x427f82]

    ??:? void tmpxq97a9pe.__unittest_L48_C1() [0x427fbf]

    ??:? void tmpxq97a9pe.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n\tlong[] res = new long[n + 1];\n\tres[0]\
    \ = 1;\n\tres[1] = 3;\n\tres[2] = 2;\n\tfor (int i = 3; i <= n; i++) \n\t{\n\t\
    \tres[i] = (n % 2 == 0) ? 1 + n / 2 : res[i - 1] + res[i - 2] + res[i + 1];\n\t\
    }\n\treturn res;\n}\n/*\nBest Practices:\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbloc73st.d(34): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbloc73st.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return iota(n+1).map!((long i) =>\
    \ i.isEven? 1 + i/2 : 3).scan!((long a, long b) => a + b).array();\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2tpxvdy.d(24): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2tpxvdy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[n];\n    res[0]\
    \ = 1;\n    res[1] = 3;\n    if(n == 1)\n        return res;\n    res[2] = 2;\n\
    \    if(n == 2)\n        return res;\n    res[3] = 8;\n    if(n == 3)\n      \
    \  return res;\n    for(int i = 4; i < n; i++)\n    {\n        if(i % 2 == 0)\n\
    \            res[i] = 1 + i / 2;\n        else\n            res[i] = res[i - 1]\
    \ + res[i - 2] + res[i + 1];\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpu8rhvxsm.d(32): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4289a6]

    ??:? long[] tmpu8rhvxsm.tri(long) [0x427ecd]

    ??:? void tmpu8rhvxsm.__unittest_L44_C1() [0x428027]

    ??:? void tmpu8rhvxsm.__modtest() [0x428674]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b842]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430acd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f7c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a59]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b819]

    ??:? runModuleUnitTests [0x42c785]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n > 0 ? typeof(return).array(n\
    \ + 1) : [0];\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4347keo9.d(24): Error: no property `array` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4347keo9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 1 ? new long[]{1L} : n\
    \ == 1 ? new long[]{1L, 3L} : \n                    n == 2 ? new long[]{1L, 3L,\
    \ 2L} : \n                    new long[]{1L, 3L, 2L, 8L} ~ [8L, 7L] ~ \n     \
    \               iota(n - 2).map!((i) => i.isEven ? 3 + i / 2 : tri(i - 1)[$ -\
    \ 1] + tri(i - 2)[$ - 1] + tri(i + 1)[$ - 1]).array;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpss0wchas.d(24): Error: found `{` when expecting `:`

    /tmp/tmpss0wchas.d(24): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmpss0wchas.d(24): Error: found `:` instead of statement

    /tmp/tmpss0wchas.d(24): Error: declaration expected, not `:`

    /tmp/tmpss0wchas.d(28): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpss0wchas.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int len = cast(int) n + 1;\n    long[]\
    \ r = new long[len];\n    r[0] = 1;\n    r[1] = 3;\n    r[2] = 2;\n    for (int\
    \ i = 3; i < len; i++) \n    {\n        r[i] = r[i - 1] + r[i - 2] + r[i - 3];\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoje83laa.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428835]

    ??:? void tmpoje83laa.__unittest_L35_C1() [0x427fe1]

    ??:? void tmpoje83laa.__modtest() [0x4285b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b782]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a0d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ebc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430999]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b759]

    ??:? runModuleUnitTests [0x42c6c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428cf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret = new long[n+1];\n   \
    \ ret[0] = 1;\n    ret[1] = 3;\n    for(int i = 2; i < n; i++)\n    {\n      \
    \  if(i % 2 == 0)\n        {\n            ret[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            ret[i] = ret[i-1] + ret[i-2] + ret[i-3];\n\
    \        }\n    }\n    return ret;\n}\n/*\nTribonacci sequence can be defined\
    \ in a more compact manner:\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfdqldao6.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdqldao6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto all = new long[n+1];\n    all[0]\
    \ = 1;\n    all[1] = 3;\n    all[2] = 2;\n    for(int i = 3; i < n+1; i++)\n \
    \   {\n        if(i%2==0)\n        {\n            all[i] = all[i-1] + all[i-2]\
    \ + all[i-3];\n        }\n        else\n        {\n            all[i] = 1 + i/2;\n\
    \        }\n    }\n    return all;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgj0wr3r5.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x42888d]

    ??:? void tmpgj0wr3r5.__unittest_L41_C1() [0x42803d]

    ??:? void tmpgj0wr3r5.__modtest() [0x428610]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] start = new long[]{1L, 3L,\
    \ 2L};\n    if (n == 0) return new long[]{0L};\n    if (n < 4) return take(start,\
    \ n+1);\n    return take(iterate!(a => [a[$-1]+a[$-2]+a[$-3]])(start), n+1);\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa25omt4c.d(24): Error: semicolon expected, not `{`

    /tmp/tmpa25omt4c.d(24): Error: found `}` when expecting `;` following statement

    /tmp/tmpa25omt4c.d(24): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpa25omt4c.d(25): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpa25omt4c.d(25): Error: found `}` when expecting `;` following statement

    /tmp/tmpa25omt4c.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpa25omt4c.d(29): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa25omt4c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0)\n        return [1];\n\
    \    return reduce!((a, b) => [a[1], a[2], a[0] + a[1] + a[2]])([1, 3, 2])(iota(n\
    \ - 1));\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp31ux39fo.d(26): Error: template instance `reduce!((a, b) => [a[1],
    a[2], a[0] + a[1] + a[2]])` template `reduce` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp31ux39fo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  long[] result = new long[n + 1];\n\
    \  result[0] = 1;\n  result[1] = 3;\n  result[2] = 2;\n  foreach(int i; 0..n)\n\
    \  {\n    if(i > 2)\n    {\n      if(i % 2 == 0)\n      {\n        result[i] =\
    \ 1 + i / 2;\n      }\n      else\n      {\n        result[i] = result[i - 1]\
    \ + result[i - 2] + result[i + 1];\n      }\n    }\n  }\n  return result;\n}\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu8xrfyo3.d(28): Error: cannot implicitly convert expression `n`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu8xrfyo3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  return n < 2 ?\n      new long[]{1L,\
    \ 3L} :\n      new long[]{1L, 3L} ~\n      new long[]{iota(n).map!((x) => ((x\
    \ & 1) == 0 ? x/2 : 1 + tri(x-1)[$-1] + tri(x-2)[$-1] + tri(x+1)[$-1]))}[0..$-1];\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmdlua9pt.d(25): Error: found `{` when expecting `:`

    /tmp/tmpmdlua9pt.d(25): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmpmdlua9pt.d(25): Error: found `:` instead of statement

    /tmp/tmpmdlua9pt.d(27): Error: found `new` when expecting `this`

    /tmp/tmpmdlua9pt.d(27): Error: found `long` when expecting `(`

    /tmp/tmpmdlua9pt.d(27): Error: found `[` when expecting `)`

    /tmp/tmpmdlua9pt.d(27): Error: semicolon expected following function declaration

    /tmp/tmpmdlua9pt.d(27): Error: declaration expected, not `]`

    /tmp/tmpmdlua9pt.d(28): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmdlua9pt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] fibs = new long[n+1];\n  \
    \  fibs[0] = 1;\n    fibs[1] = 3;\n    fibs[2] = 2;\n    if(n == 0) return fibs[0..0];\n\
    \    if(n == 1) return fibs[0..1];\n    if(n == 2) return fibs[0..2];\n    for(int\
    \ i = 3; i < n+1; i++)\n    {\n        if(i%2 == 0)\n        {\n            fibs[i]\
    \ = fibs[i-1] + fibs[i-2] + 1;\n        }\n        else\n        {\n         \
    \   fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3];\n        }\n    }\n    return\
    \ fibs;\n}\n/*\n    Once again, meow.\n    You are given an array with two numbers\
    \ - your cats' IDs. Write a function that returns \n    the sum of their IDs.\n\
    \    Examples:\n    >>> meow(new int[]{1, 2})\n    3\n    >>> meow(new int[]{1,\
    \ 2, 3})\n    6\n*/\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc782867p.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x428955]

    ??:? void tmpc782867p.__unittest_L54_C1() [0x428101]

    ??:? void tmpc782867p.__modtest() [0x4286d4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca0f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b8a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430b2d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430fdc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430ab9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b879]

    ??:? runModuleUnitTests [0x42c7e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e18]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return (n == 0L ? [] : tri(n - 1)\
    \ ~ n % 2 == 0 ? 1L + n / 2 : \n        cast(long[])tri(n - 1)[$ - 1 .. $] ~ tri(n\
    \ - 2) ~ tri(n + 1)).array;\n}\n/*\n#Alternative\nlong[] tri(long n) \n{\n   \
    \ long[] result = [1L, 3L, 2L];\n    while (n-- > 0)\n    {\n        switch (result.length)\n\
    \        {\n            case 0: result ~= 1L; break;\n            case 1: result\
    \ ~= 3L; break;\n            case 2: result ~= 2L; break;\n            default:\n\
    \                result ~= result[$ - 1] + result[$ - 2] + result[$ - 3];\n  \
    \      }\n    }\n    return result;\n}\n*/\nunittest\n{\n    alias candidate =\
    \ tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw12jkr1f.d(24): Error: incompatible types for `(tri(n - 1L) ~ n
    % 2L) == (0)`: `long[]` and `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw12jkr1f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n < 0) \n        return [];\n\
    \    int[] ret = new int[n + 1];\n    ret[0] = 1;\n    if (n > 0) \n        ret[1]\
    \ = 3;\n    if (n > 1) \n        ret[2] = 2;\n    for (int i = 3; i <= n; i++)\
    \ \n        ret[i] = i % 2 == 0 ? ret[i - 1] + ret[i - 2] + ret[i - 3] + 1 : ret[i\
    \ - 1] + ret[i - 2] + ret[i - 3];\n    return ret;\n}\n/*\n# First, define a recursive\
    \ function that can calculate the n-th item of the sequence:\n# Then calculate\
    \ the items recursively:\n*/\nlong[] tri(long n) \n{\n    long calc(long k)\n\
    \    {\n        if (k < 0)\n            return 0;\n        else if (k < 2)\n \
    \           return 1;\n        else if (k < 3)\n            return 3;\n      \
    \  else if (k % 2 == 0)\n            return calc(k - 1) + calc(k - 2) + calc(k\
    \ - 3) + 1;\n        else\n            return calc(k - 1) + calc(k - 2) + calc(k\
    \ - 3);\n    }\n    return iota(n + 1).map!(i => calc(i));\n}\n/*\n    def tri(n):\n\
    \    t = [1, 3, 2]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n    \
    \        t.append(t[i-1] + t[i-2] + t[i-3] + 1)\n        else:\n            t.append(t[i-1]\
    \ + t[i-2] + t[i-3])\n    return t[:n+1]\n*/\n/*\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmvf1f92x.d(67): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmvf1f92x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto result = new long[];\n    result\
    \ ~= 1;\n    if (n >= 2)\n    {\n        result ~= 3;\n        if (n >= 3)\n \
    \       {\n            result ~= 2;\n            foreach (i; 3..=n)\n        \
    \    {\n                result ~= (i % 2 == 0) ? 1 + i / 2 : result[$ - 1] + result[$\
    \ - 2] + result[$ - 3];\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf4h_kn1r.d(32): Error: expression expected, not `=`

    /tmp/tmpf4h_kn1r.d(32): Error: found `n` when expecting `)`

    /tmp/tmpf4h_kn1r.d(32): Error: found `)` instead of statement

    /tmp/tmpf4h_kn1r.d(38): Error: declaration expected, not `return`

    /tmp/tmpf4h_kn1r.d(39): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf4h_kn1r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[n+1];\n   \
    \ if(n < 1) return res;\n    long a = 1, b = 3, c = 2;\n    res[0] = 1;\n    res[1]\
    \ = 3;\n    res[2] = 2;\n    for(int i = 3; i <= n; i++)\n    {\n        res[i]\
    \ = (i % 2 == 0) ? (1 + i / 2) : (a + b + c);\n        a = b;\n        b = c;\n\
    \        c = res[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppqzedyiw.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x42885d]

    ??:? void tmppqzedyiw.__unittest_L39_C1() [0x428009]

    ??:? void tmppqzedyiw.__modtest() [0x4285dc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c917]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a35]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ee4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b781]

    ??:? runModuleUnitTests [0x42c6ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d20]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return sequence!(long)(n + 1, x =>\
    \ x ? \n                           (x % 2 ? \n                           tri(x\
    \ - 1)[$ - 1] + tri(x - 2)[$ - 1] + tri(x + 1)[$ - 1] : \n                   \
    \        1 + x / 2) : \n                           1);\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe6m_2f64.d(24): Error: template instance `sequence!long` template
    `sequence` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe6m_2f64.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) return new long[0];\n\
    \    long[] result = new long[n+1];\n    result[0] = 1;\n    result[1] = 3;\n\
    \    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i %\
    \ 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n        else\n\
    \        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuwfsykui.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428956]

    ??:? long[] tmpuwfsykui.tri(long) [0x427f9b]

    ??:? void tmpuwfsykui.__unittest_L42_C1() [0x427fdb]

    ??:? void tmpuwfsykui.__modtest() [0x428628]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c95f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f2c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7c9]

    ??:? runModuleUnitTests [0x42c735]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return sequence!(a => \n        \
    \    a.length < 3 ? 3L : \n                a[a.length - 3] + a[a.length - 2] +\
    \ a[a.length - 1]\n            )\n        ([1L])\n        .take(n + 1);\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6j4bb3pl.d(24): Error: template instance `sequence!((a) => a.length
    < 3 ? 3L : a[a.length - 3] + a[a.length - 2] + a[a.length - 1])` template `sequence`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6j4bb3pl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[n + 1];\n \
    \   if (n > 1)\n    {\n        arr[0] = 1;\n        arr[1] = 3;\n        arr[2]\
    \ = 2;\n        for (int i = 3; i < n + 1; i++)\n        {\n            if (i\
    \ % 2 == 0)\n            {\n                arr[i] = 1 + i / 2;\n            }\n\
    \            else\n            {\n                arr[i] = arr[i - 1] + arr[i\
    \ - 2] + arr[i + 1];\n            }\n        }\n    }\n    else\n    {\n     \
    \   arr[0] = 1;\n        arr[1] = 3;\n    }\n    return arr;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp2sgzeiwv.d(38): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42899e]

    ??:? long[] tmp2sgzeiwv.tri(long) [0x427f93]

    ??:? void tmp2sgzeiwv.__unittest_L49_C1() [0x428023]

    ??:? void tmp2sgzeiwv.__modtest() [0x428670]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b83a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ac5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b811]

    ??:? runModuleUnitTests [0x42c77d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return map!(a => nth!(a, Tuple!(long,\
    \ 0L, 1L, 3L, 2L)))(iota(n + 1));\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ge950tw.d(24): Error: template instance `map!((a) => nth!(a, Tuple!(long,
    0L, 1L, 3L, 2L)))` template `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ge950tw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[(int)n+1];\n\
    \    for(int i = 1; i <= n; i++) \n    {\n        if(i == 1) \n        {\n   \
    \         arr[i] = 3;\n        } \n        else if(i == 2) \n        {\n     \
    \       arr[i] = 1;\n        } \n        else if(i % 2 == 0) \n        {\n   \
    \         arr[i] = 1 + i / 2;\n        } \n        else \n        {\n        \
    \    arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n        }\n    }\n    return arr;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpef0gmwr4.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpef0gmwr4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto fib = iota(n + 1)\n        .map!((i)\
    \ => (i == 1) ? 3 : (i == 2) ? 2 : 1)\n        .scan!((a, b) => a + b)\n     \
    \   .array();\n    return fib;\n}\nunittest\n{\n    alias candidate = tri;\n\n\
    \    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp833yvc8o.d(24): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp833yvc8o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n == 0 ? [1L] : \n       \
    \    n == 1 ? [1L, 3L] : \n           n == 2 ? [1L, 3L, 2L] :\n              \
    \      [1L, 3L, 2L] ~ [iota(3, n).map!(n => (n & 1) ? tri(n - 1)[$ - 1] + tri(n\
    \ - 2)[$ - 1] + tri(n + 1)[$ - 1] \n                                         \
    \                  : 1 + (n / 2)).array];\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpth7kr1qa.d(27): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpth7kr1qa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 0 ? new long[0] : new\
    \ long[n + 1].map!(a => a < 3 ? 1 : a.tri(a - 1) + a.tri(a - 2) + a.tri(a + 1))[];\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2mrj4dj5.d(24): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2mrj4dj5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 2 ? new long[]{1L, 3L}\
    \ :\n           n == 2 ? new long[]{1L, 3L, 2L} :\n           [1L, 3L, 2L] ~ take((int)n\
    \ + 1).map!(a => a[$ - 1] + a[$ - 2] + a[$ - 3]).array;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpggr68tdt.d(24): Error: found `{` when expecting `:`

    /tmp/tmpggr68tdt.d(24): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmpggr68tdt.d(24): Error: found `:` instead of statement

    /tmp/tmpggr68tdt.d(25): Error: declaration expected, not `:`

    /tmp/tmpggr68tdt.d(27): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpggr68tdt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[n + 1];\n \
    \   arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    for (long i = 3; i <= n;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            arr[i] = 1 + i\
    \ / 2;\n        }\n        else\n        {\n            arr[i] = arr[i - 1] +\
    \ arr[i - 2] + arr[i + 1];\n        }\n    }\n    return arr;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpiltmkco3.d(36): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpiltmkco3.tri(long) [0x427f7f]

    ??:? void tmpiltmkco3.__unittest_L41_C1() [0x427fbf]

    ??:? void tmpiltmkco3.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n == 0 ? new long[] {0} :\n\
    \        n == 1 ? new long[] {1, 3} :\n        new long[] {1, 3, 2} ~ n.iota().map!(n\
    \ => n.isEven ? (1 + n / 2) : tri(n-1)[$-1] + tri(n-2)[$-1] + tri(n+1)[$-1]);\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy87mmfza.d(24): Error: found `{` when expecting `:`

    /tmp/tmpy87mmfza.d(24): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmpy87mmfza.d(24): Error: found `:` instead of statement

    /tmp/tmpy87mmfza.d(25): Error: declaration expected, not `:`

    /tmp/tmpy87mmfza.d(27): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy87mmfza.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tribonacci;\n    tribonacci.length\
    \ = n + 1;\n    int i = 0;\n    for (; i < tribonacci.length; ++i)\n    {\n  \
    \      tribonacci[i] = (n + 1) / 2;\n    }\n    if (n > 1)\n    {\n        tribonacci[0]\
    \ = 1;\n        tribonacci[1] = 3;\n        tribonacci[2] = 2;\n        for (i\
    \ = 3; i < tribonacci.length; ++i)\n        {\n            tribonacci[i] = tribonacci[i\
    \ - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n    }\n    else\n\
    \    {\n        tribonacci[0] = 1;\n    }\n    return tribonacci;\n}\n//beforehand\n\
    long[] tri(long n) \n{\n    long[] tribonacci;\n    tribonacci.length = n + 1;\n\
    \    int i = 0;\n    for (; i < tribonacci.length; ++i)\n    {\n        tribonacci[i]\
    \ = (n + 1) / 2;\n    }\n    if (n > 1)\n    {\n        tribonacci[0] = 1;\n \
    \       tribonacci[1] = 3;\n        tribonacci[2] = 2;\n        for (i = 3; i\
    \ < tribonacci.length; ++i)\n        {\n            tribonacci[i] = tribonacci[i\
    \ - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n    }\n    else\n\
    \    {\n        tribonacci[0] = 1;\n    }\n    return tribonacci;\n}\n//afterward\n\
    long[] tri(long n) \n{\n    long[] tribonacci;\n    tribonacci.length = n + 1;\n\
    \    int i = 0;\n    for (; i < tribonacci.length; ++i)\n    {\n        tribonacci[i]\
    \ = (n + 1) / 2;\n    }\n    if (n > 1)\n   \nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcikw5m36.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcikw5m36.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) \n    {\n        return\
    \ [1];\n    }\n    if (n == 1) \n    {\n        return [1, 3];\n    }\n    if\
    \ (n == 2) \n    {\n        return [1, 3, 2];\n    }\n    long[] res = [1, 3,\
    \ 2];\n    auto odd = res[2] + res[1] + res[0];\n    res ~= odd;\n    foreach\
    \ (i; 2 .. n) \n    {\n        auto even = 1 + i / 2;\n        res ~= even;\n\
    \        auto odd = res[$ - 1] + res[$ - 2] + res[$ - 3];\n        res ~= odd;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps3by1ufk.d(43): Error: variable `odd` is shadowing variable `tmps3by1ufk.tri.odd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps3by1ufk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int[] arr = new int[n+1];\n    arr[0]\
    \ = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    for(int i = 3; i <= n; i++) \n \
    \   {\n        arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n    }\n    return arr;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_8zgji_c.d(32): Error: cannot implicitly convert expression `arr`
    of type `int[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_8zgji_c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    if (n > 0)\n    {\n        result[0] = 1;\n        result[1] = 3;\n     \
    \   result[2] = 2;\n        for (long i = 3; i <= n; i++)\n        {\n       \
    \     if (i % 2 == 0)\n            {\n                result[i] = 1 + i / 2;\n\
    \            }\n            else\n            {\n                result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpb4w0fe24.d(38): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42894e]

    ??:? long[] tmpb4w0fe24.tri(long) [0x427f90]

    ??:? void tmpb4w0fe24.__unittest_L44_C1() [0x427fcf]

    ??:? void tmpb4w0fe24.__modtest() [0x42861c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c957]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7ea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f24]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7c1]

    ??:? runModuleUnitTests [0x42c72d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n == 0 ? new long[]{1L} \n\
    \         : n == 1 ? new long[]{1L, 3L} \n         : n == 2 ? new long[]{1L, 3L,\
    \ 2L} \n         : n > 2 ? (n % 2 == 0 ? tri(n - 1) ~= 2 + n / 2 : tri(n - 1)\
    \ ~= tri(n - 2)[$ - 1] + tri(n - 2)[$ - 2] + tri(n - 2)[$ - 3])\n         : null;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd0896ofn.d(24): Error: found `{` when expecting `:`

    /tmp/tmpd0896ofn.d(24): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmpd0896ofn.d(25): Error: found `:` instead of statement

    /tmp/tmpd0896ofn.d(26): Error: declaration expected, not `:`

    /tmp/tmpd0896ofn.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd0896ofn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tri = new long[(int)n + 1];\n\
    \    for (long i = 0; i <= n; i++) \n    {\n        if (i < 3) \n        {\n \
    \           tri[(int)i] = 1;\n        } \n        else \n        {\n         \
    \   tri[(int)i] = (i % 2 == 0) ? (i / 2) : tri[(int)i - 1] + tri[(int)i - 2] +\
    \ tri[(int)i - 3];\n        }\n    }\n    return tri;\n}\n/*\nauto tri(long n)\
    \ \n{\n    struct S\n    {\n        long operator()(long n)\n        {\n     \
    \       return (n < 3) ? 1 : (n % 2 == 0) ? (n / 2) : (*this)(n - 1) + (*this)(n\
    \ - 2) + (*this)(n - 3);\n        }\n    };\n    return iota(S(), n + 1);\n}\n\
    */\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp25v2okij.d(24): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmp25v2okij.d(29): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp25v2okij.d(33): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp25v2okij.d(33): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp25v2okij.d(33): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp25v2okij.d(33): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp25v2okij.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  return map!((x){return 1 + x / 2;})(iota(n\
    \ + 1)).array();\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw6k4gn1h.d(24): Error: template instance `map!((x)

    {

    return 1 + x / 2;

    }

    )` template `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6k4gn1h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    // your code\n    long[] res = new\
    \ long[n+1];\n    res[0] = 1;\n    if(n > 0)\n        res[1] = 3;\n    if(n >\
    \ 1)\n        res[2] = 2;\n    long triN = 0;\n    long triN_1 = 0;\n    long\
    \ triN_2 = 0;\n    long triN_3 = 0;\n    for(long i = 3; i <= n; i++)\n    {\n\
    \        if(i % 2 == 0)\n        {\n            triN = 1 + i / 2;\n        }\n\
    \        else\n        {\n            triN_1 = res[i-1];\n            triN_2 =\
    \ res[i-2];\n            triN_3 = res[i-3];\n            triN = triN_1 + triN_2\
    \ + triN_3;\n        }\n        res[i] = triN;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6o77cemf.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x428895]

    ??:? void tmp6o77cemf.__unittest_L52_C1() [0x428045]

    ??:? void tmp6o77cemf.__modtest() [0x428618]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c94f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7e2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a6d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b9]

    ??:? runModuleUnitTests [0x42c725]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d58]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  auto r = new long[n + 1];\n  r[0] =\
    \ 1;\n  r[1] = 3;\n  r[2] = 2;\n  for (long i = 3; i <= n; i++)\n  {\n    r[i]\
    \ = i % 2 == 0 ? 1 + i / 2 : r[i - 1] + r[i - 2] + r[i + 1];\n  }\n  return r;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp_0u5ur84.d(30): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42890e]

    ??:? long[] tmp_0u5ur84.tri(long) [0x427f41]

    ??:? void tmp_0u5ur84.__unittest_L34_C1() [0x427f93]

    ??:? void tmp_0u5ur84.__modtest() [0x4285e0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c917]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a35]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ee4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b781]

    ??:? runModuleUnitTests [0x42c6ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto tr = new long[n+1];\n    tr[0]\
    \ = 1;\n    tr[1] = 3;\n    if(n==0) return tr[0..1];\n    if(n==1) return tr[0..2];\n\
    \    foreach(i;2..n+1)\n    {\n        if(i.isEven) tr[i] = 1 + i / 2;\n     \
    \   else tr[i] = tr[i-1] + tr[i-2] + tr[i+1];\n    }\n    return tr;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph7nd9m9f.d(31): Error: no property `isEven` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7nd9m9f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n\tauto result = new long[n + 1];\n\t\
    result[0] = 1;\n\tresult[1] = 3;\n\tresult[2] = 2;\n\tfor (int i = 3; i <= n;\
    \ i++)\n\t{\n\t\tresult[i] = result[i - 1] + result[i - 2] + result[i - 3];\n\t\
    }\n\treturn result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb8zpgxw_.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x428835]

    ??:? void tmpb8zpgxw_.__unittest_L34_C1() [0x427fe5]

    ??:? void tmpb8zpgxw_.__modtest() [0x4285b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b782]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a0d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ebc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430999]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b759]

    ??:? runModuleUnitTests [0x42c6c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428cf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n +\
    \ 1];\n    if (n < 1) \n    {\n        return result;\n    }\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    if (n > 2) \n    {\n       \
    \ foreach (i; 3 .. n + 1) \n        {\n            if (isEven(i)) \n         \
    \   {\n                result[i] = 1 + i / 2;\n            }\n            else\
    \ \n            {\n                result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpscarskk8.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpscarskk8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n < 0)\n    {\n        return\
    \ null;\n    }\n    long[] result = new long[(int)n + 1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\n \n/*\nYou are\
    \ given a non-negative integer number n, you have to a return an array of the\
    \ \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>>\
    \ tri(3L)\n    [1L, 3L, 2L, 8L]\n    \nlong[] tri(long n) \n{\n    if (n < 0)\n\
    \    {\n        return null;\n    }\n    long[] result = new long[(int)n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i =\
    \ 3; i < n + 1; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }*/\n \n//Tests \nimport std.typecons;\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwdyag4gv.d(28): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwdyag4gv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  long[] ret = new long[(int)n+1];\n\
    \  ret[0] = 1;\n  ret[1] = 3;\n  ret[2] = 2;\n  foreach(l;3..n+1)\n  {\n    if(l\
    \ % 2 == 0)\n    {\n      ret[l] = ret[l-1] + (l/2);\n    }\n    else\n    {\n\
    \      ret[l] = ret[l-1] + ret[l-2] + ret[l-3];\n    }\n  }\n  return ret;\n}\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptfdgpqnc.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptfdgpqnc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] nums = new long[n + 1];\n\
    \    nums[0] = 1;\n    nums[1] = 3;\n    nums[2] = 2;\n    if (n > 2)\n    {\n\
    \        for (int i = 3; i <= n; i++)\n        {\n            if (i % 2 == 0)\n\
    \            {\n                nums[i] = 1 + i / 2;\n            }\n        \
    \    else\n            {\n                nums[i] = nums[i - 1] + nums[i - 2]\
    \ + nums[i + 1];\n            }\n        }\n    }\n    return nums;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp0zig7m7r.d(38): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmp0zig7m7r.tri(long) [0x427f85]

    ??:? void tmp0zig7m7r.__unittest_L44_C1() [0x427fc3]

    ??:? void tmp0zig7m7r.__modtest() [0x428610]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] t = new long[(cast(int)n)+1];\n\
    \    t[0] = 1;\n    if(n>0)\n        t[1] = 3;\n    if(n>1)\n        t[2] = 2;\n\
    \    for(int i = 3; i<(cast(int)n)+1; i++)\n    {\n        if(i%2 == 0)\n    \
    \        t[i] = 1 + (i/2);\n        else\n            t[i] = t[i-1] + t[i-2] +\
    \ t[i+1];\n    }\n    return t;\n}\nunittest\n{\n    alias candidate = tri;\n\n\
    \    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpwushy7fe.d(35): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42894e]

    ??:? long[] tmpwushy7fe.tri(long) [0x427f96]

    ??:? void tmpwushy7fe.__unittest_L39_C1() [0x427fd3]

    ??:? void tmpwushy7fe.__modtest() [0x428620]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c957]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7ea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f24]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7c1]

    ??:? runModuleUnitTests [0x42c72d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return iota(n+1).map!((n){\n    \
    \        if(n <= 1) return 3;\n            else if(n == 2) return 2;\n       \
    \     else\n                return tri(n-1)[n-1] + tri(n-1)[n-2] + tri(n-1)[n+1];\n\
    \        }).array;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp02sa309i.d(24): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp02sa309i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[(int) n\
    \ + 1];\n    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    int i\
    \ = 3;\n    while (i <= n)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = 1 + i / 2;\n        }\n        else\n        {\n          \
    \  result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n   \
    \     i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd6zitryi.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd6zitryi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) \n    {\n        return\
    \ [1];\n    }\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++) \n    {\n      \
    \  if (i % 2 == 0) \n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else \n        {\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp9djs991b.d(40): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428966]

    ??:? long[] tmp9djs991b.tri(long) [0x427fad]

    ??:? void tmp9djs991b.__unittest_L45_C1() [0x427feb]

    ??:? void tmp9djs991b.__modtest() [0x428638]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c96f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b802]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f3c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7d9]

    ??:? runModuleUnitTests [0x42c745]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    import std.bigint : BigInt;\n   \
    \ if (n == 0)\n        return [1L];\n    if (n == 1)\n        return [1L, 3L];\n\
    \    BigInt a = BigInt(1);\n    BigInt b = BigInt(3);\n    BigInt c = BigInt(2);\n\
    \    BigInt temp;\n    BigInt[] result = [a, b, c];\n    for (n; n > 2; n--)\n\
    \    {\n        if (n.isEven)\n        {\n            result ~= 1 + n / 2;\n \
    \       }\n        else\n        {\n            result ~= a + b + c;\n       \
    \     temp = a;\n            a = b;\n            b = c;\n            c = temp;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_1oche8k.d(34): Error: `n` has no effect

    /tmp/tmp_1oche8k.d(36): Error: no property `isEven` for type `long`

    /tmp/tmp_1oche8k.d(38): Error: cannot append type `long` to type `BigInt[]`

    /tmp/tmp_1oche8k.d(49): Error: cannot implicitly convert expression `result` of
    type `BigInt[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1oche8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[n + 1];\n \
    \   res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for (long i = 3; i <= n;\
    \ i++) \n    {\n        if (i % 2 == 0) \n        {\n            res[i] = 1 +\
    \ i / 2;\n        }\n        else \n        {\n            res[i] = res[i - 1]\
    \ + res[i - 2] + res[i + 1];\n        }\n    }\n    return res;\n}\n/*\n    1.\u89E3\
    \u6CD5\uFF1A\n        \u601D\u8DEF\u8FD8\u662F\u50CF\u6590\u6CE2\u90A3\u5951\u6570\
    \u5217\u4E00\u6837\uFF0C\u53EA\u4E0D\u8FC7\u8FD9\u6B21\u8981\u7528\u5230\u6570\
    \u7EC4\u3002\u56E0\u4E3A\u9898\u76EE\u8981\u6C42\u524Dn\u4E2A\u6570\u5B57\uFF0C\
    \u6240\u4EE5\u6211\u4EEC\u628An+1\u4E2A\u6570\u5B57\u90FD\u5B58\u8FDB\u6570\u7EC4\
    \u91CC\u3002\u7136\u540E\u5F53n\u7684\u503C\u5927\u4E8E\u7B49\u4E8E3\u7684\u65F6\
    \u5019\uFF0C\n        \u6211\u4EEC\u5C31\u628A\u5B83\u548C\u524D\u4E24\u4E2A\u6570\
    \u5B57\u52A0\u8D77\u6765\u8D4B\u503C\u7ED9n\u4F4D\u7F6E\u4E0A\u7684\u6570\u5B57\
    \uFF0C\u5982\u679Cn\u7684\u503C\u662F\u5076\u6570\u7684\u8BDD\uFF0C\u90A3\u4E48\
    \u6211\u4EEC\u5C31\u628A\u5B83\u9664\u4EE52\u518D\u52A01\uFF0C\u5982\u679Cn\u7684\
    \u503C\u662F\u5947\u6570\u7684\u8BDD\uFF0C\u90A3\u4E48\u6211\u4EEC\u5C31\u628A\
    \u5B83\u52A0\u4E0A\u524D\u4E24\u4E2A\u6570\u5B57\u8D4B\u503C\u7ED9n\u4F4D\u7F6E\
    \u4E0A\u7684\u6570\u5B57\u3002\n*/\nunittest\n{\n    alias candidate = tri;\n\n\
    \    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpxnzp7awr.d(36): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42893e]

    ??:? long[] tmpxnzp7awr.tri(long) [0x427f7f]

    ??:? void tmpxnzp7awr.__unittest_L46_C1() [0x427fbf]

    ??:? void tmpxnzp7awr.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n == 0 ? [1L] : \n       \
    \    n == 1 ? [1L, 3L] : \n           n == 2 ? [1L, 3L, 2L] : \n           [1L,\
    \ 3L, 2L] ~ tri(n - 3).map!(a => a + 3 * n);\n}\n/*\n    TASK:\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsi8nz2za.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsi8nz2za.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return iota(n + 1).map!(a => (a <\
    \ 3) ? 3 : \n                                   (a % 2) ? tri(a - 1) + tri(a -\
    \ 2) + tri(a + 1) :\n                                            1 + a / 2).array;\n\
    }\n/*\n    Python solution:\n    def tri(n):\n        return range(n + 1) if n\
    \ <= 1 else [3] + [1 + n / 2 if n % 2 == 0 else tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) for n in range(1, n + 1)]\n*/\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxpci1k9j.d(24): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxpci1k9j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] a;\n    a = new long[n + 1];\n\
    \    a[0] = 1;\n    a[1] = 3;\n    a[2] = 2;\n    int i = 2;\n    while (i <=\
    \ n)\n    {\n        long temp = 0;\n        temp = (i % 2 == 0) ? (1 + i / 2)\
    \ : (a[i - 1] + a[i - 2] + a[i + 1]);\n        a[i] = temp;\n        i++;\n  \
    \  }\n    return a;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpsds32g0l.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428926]

    ??:? long[] tmpsds32g0l.tri(long) [0x427f30]

    ??:? void tmpsds32g0l.__unittest_L39_C1() [0x427fab]

    ??:? void tmpsds32g0l.__modtest() [0x4285f8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c92f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a4d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430efc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b799]

    ??:? runModuleUnitTests [0x42c705]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) \n    {\n        return\
    \ [1L];\n    }\n    return tri(n-1) ~ [3L, 2L, 8L][iota(n) % 3];\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgw1ljhsu.d(28): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgw1ljhsu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  return n == 0 ? empty : unfold!(b =>\
    \ \n  {\n    if (b.n == 1)\n      return tuple(3L, tuple(b.n + 1, tuple(b.sum\
    \ + 3, 3L)));\n    else if (b.n % 2 == 0)\n      return tuple(b.sum + b.n / 2,\
    \ tuple(b.n + 1, tuple(b.sum + b.n / 2, b.sum)));\n    else\n      return tuple(b.sum\
    \ + b.n - 1 + b.n - 2 + b.n + 1, tuple(b.n + 1, tuple(b.sum + b.n - 1 + b.n -\
    \ 2 + b.n + 1, b.sum)));\n  }, tuple(0L, tuple(1L, tuple(0L, 0L))), n + 1).dropOne.array;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2y3xo31e.d(24): Error: undefined identifier `empty`

    /tmp/tmp2y3xo31e.d(24): Error: template instance `unfold!((b) => ()

    {

    if (b.n == 1)

    return tuple(3L, tuple(b.n + 1, tuple(b.sum + 3, 3L)));

    else if (b.n % 2 == 0)

    return tuple(b.sum + b.n / 2, tuple(b.n + 1, tuple(b.sum + b.n / 2, b.sum)));

    else

    return tuple(b.sum + b.n - 1 + b.n - 2 + b.n + 1, tuple(b.n + 1, tuple(b.sum +
    b.n - 1 + b.n - 2 + b.n + 1, b.sum)));

    }

    , tuple(0L, tuple(1L, tuple(0L, 0L))), n + 1)` template `unfold` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2y3xo31e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 2 \n        ? [1L, 3L,\
    \ 2L] \n        : tri(n - 1).dup.append(\n            n % 2\n                ?\
    \ tri(n - 1).back + tri(n - 2).back + tri(n + 1).back\n                : 1 + n\
    \ / 2\n            );\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ouxltow.d(26): Error: no property `append` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ouxltow.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    // long[] fib = new long[int.max];\n\
    \    long[] tri = [ 1, 3, 2 ];\n    // return tri[0..$];\n    return tri[0..min(n,\
    \ 2)];\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnlreujsg.d(27): Error: undefined identifier `min`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnlreujsg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    /* \n    */\n    long[] trib;\n \
    \   auto x = new Tuple!(long, long, long)(1,3,2);\n    trib = [1,3,2];\n    for(int\
    \ i = 3; i < n; i++)\n    {\n        if(i % 2 == 0)\n        {\n            trib\
    \ ~= x[0] + x[1] + x[2];\n        }\n        else\n        {\n            trib\
    \ ~= x[0] + (i/2);\n        }\n    }\n    trib ~= x[0] + x[1] + x[2];\n    return\
    \ trib;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyi6mrwxo.d(33): Error: incompatible types for `(x[0]) + (x[1])`:
    both operands are of type `Tuple!(long, long, long)`

    /tmp/tmpyi6mrwxo.d(37): Error: incompatible types for `(x[0]) + (i / 2)`: `Tuple!(long,
    long, long)` and `int`

    /tmp/tmpyi6mrwxo.d(40): Error: incompatible types for `(x[0]) + (x[1])`: both
    operands are of type `Tuple!(long, long, long)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyi6mrwxo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    // Will be implemented later.\n \
    \   return new long[1];\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5ugf2676.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286ed]

    ??:? void tmp5ugf2676.__unittest_L27_C1() [0x427e9d]

    ??:? void tmp5ugf2676.__modtest() [0x428470]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c733]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430851]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d00]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b59d]

    ??:? runModuleUnitTests [0x42c509]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b3c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int size = (int)n+1;\n    long[]\
    \ result = new long[size];\n    if(n==0)\n    {\n        return result;\n    }\n\
    \    result[0] = 1;\n    if(n==1)\n    {\n        return result;\n    }\n    result[1]\
    \ = 3;\n    if(n==2)\n    {\n        return result;\n    }\n    result[2] = 2;\n\
    \    for(int i = 3; i < size; i++)\n    {\n        if(i%2==0)\n        {\n   \
    \         result[i] = (1+(i/2));\n        }\n        else\n        {\n       \
    \     result[i] = result[i-1]+result[i-2]+result[i+1];\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv1v1us_5.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1v1us_5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  long[] result = new long[n + 1];\n\
    \  for (int i = 0; i <= n; i++) \n  {\n    if (i == 0) \n    {\n      result[i]\
    \ = 1;\n    } \n    else if (i == 1) \n    {\n      result[i] = 3;\n    } \n \
    \   else if (i == 2) \n    {\n      result[i] = 2;\n    } \n    else if (i ==\
    \ 3) \n    {\n      result[i] = 8;\n    } \n    else if (i % 2 == 0) \n    {\n\
    \      result[i] = 1 + i / 2;\n    } \n    else \n    {\n      result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n  }\n  return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp3h2e6qs2.d(49): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4289ae]

    ??:? long[] tmp3h2e6qs2.tri(long) [0x427ff3]

    ??:? void tmp3h2e6qs2.__unittest_L54_C1() [0x428138]

    ??:? void tmp3h2e6qs2.__modtest() [0x42867c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b84a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ad5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a61]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b821]

    ??:? runModuleUnitTests [0x42c78d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int N = (int) n;\n    long[] result\
    \ = new long[N + 1];\n    result[0] = 1;\n    result[1] = 3;\n    result[2] =\
    \ 2;\n    if (n <= 2) \n    {\n        return result[0..$];\n    }\n    int i\
    \ = 3;\n    while (i <= N) \n    {\n        if (i & 1) \n        {\n         \
    \   result[i] = 1 + i / 2;\n        } \n        else \n        {\n           \
    \ result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    \
    \    i++;\n    }\n    return result[0..$];\n}\n/*\nTest.describe(\"tri\")\n{\n\
    \    Test.it(\"Basic tests\")\n    {\n        long[] trib1 = [1L, 3L, 2L, 8L];\n\
    \        Test.assertSimilar(tri(3L), trib1);\n        long[] trib2 = [1L, 3L,\
    \ 2L, 8L, 6L, 15L, 13L, 34L, 29L, 80L, 71L, 188L, 163L, 430L, 373L, 947L, 810L,\
    \ 2057L, 1777L, 4415L, 3780L, 9171L, 7807L, 19162L, 16383L, 40408L, 34527L, 83380L,\
    \ 70890L, 168601L, 144791L, 337147L, 293826L, 662146L, 573763L, 1272807L, 1103635L,\
    \ 2409384L, 2108253L, 4489949L, 3957265L, 8327200L, 7381685L, 15424085L, 13600388L,\
    \ 27783048L, 24474728L, 50133449L, 44278613L, 89343588L, 79187843L, 158404064L,\
    \ 141750970L, 281445079L, 252267221L, 493870315L, 441844824L, 868368096L, 777618075\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaibs8x2t.d(24): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpaibs8x2t.d(48): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaibs8x2t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret = new long[n + 1];\n \
    \   for (long i = 0; i <= n; i++) \n    {\n        if (i == 0) ret[i] = 1;\n \
    \       else if (i <= 2) ret[i] = 3;\n        else ret[i] = ret[i - 1] + ret[i\
    \ - 2] + ret[i - 3];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw1kjtu31.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42883d]

    ??:? void tmpw1kjtu31.__unittest_L33_C1() [0x427fed]

    ??:? void tmpw1kjtu31.__modtest() [0x4285c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b78a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a15]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ec4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309a1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b761]

    ??:? runModuleUnitTests [0x42c6cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d00]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n <= 1) return [1L, 3L];\n  \
    \  if (n == 2) return [1L, 3L, 2L];\n    long[] seq = [1L, 3L, 2L];\n    foreach\
    \ (i; 2..n)\n    {\n        seq ~= !(i % 2) ? 1 + i / 2 : seq[$ - 1] + seq[$ -\
    \ 2] + seq[$ - 3];\n    }\n    return seq;\n}\n/*\n    >>> tri(1L)\n    [1L, 3L]\n\
    \    >>> tri(2L)\n    [1L, 3L, 2L]\n    >>> tri(5L)\n    [1L, 3L, 2L, 8L, 3L,\
    \ 10L]\n    >>> tri(7L)\n    [1L, 3L, 2L, 8L, 3L, 10L, 4L, 19L]\n    >>> tri(20L)\n\
    \    [1L, 3L, 2L, 8L, 3L, 10L, 4L, 19L, 11L, 5L, 13L, 20L, 7L, 17L, 12L, 9L, 22L,\
    \ 6L, 14L, 23L]\n*/\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2bzj_kq7.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288b5]

    ??:? void tmp2bzj_kq7.__unittest_L45_C1() [0x428061]

    ??:? void tmp2bzj_kq7.__modtest() [0x428634]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d2ff]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c192]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430be5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431094]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430b71]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c169]

    ??:? runModuleUnitTests [0x42d0d5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d78]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 1L ? new long[] {1L} :\
    \ n < 2L ? new long[] {1L, 3L} : n < 3L ? new long[] {1L, 3L, 2L} : n < 4L ? new\
    \ long[] {1L, 3L, 2L, 8L} : \n        (n > 2L ? (n - 1L) / 2L * (n - 2L) / 2L\
    \ * (n + 1L) / 2L : (n - 1L) / 2L * (n - 2L) / 2L * (n + 1L) / 2L) + \n      \
    \  (n > 2L ? (n - 2L) / 2L * (n - 1L) / 2L * (n + 1L) / 2L : (n - 2L) / 2L * (n\
    \ - 1L) / 2L * (n + 1L) / 2L) + \n        (n > 2L ? (n - 1L) / 2L * (n - 2L) /\
    \ 2L * (n + 1L) / 2L : (n - 1L) / 2L * (n - 2L) / 2L * (n + 1L) / 2L) +\n    \
    \    (n > 2L ? (n - 2L) / 2L * (n - 1L) / 2L * (n + 1L) / 2L : (n - 2L) / 2L *\
    \ (n - 1L) / 2L * (n + 1L) / 2L) +\n        (n > 2L ? (n - 1L) / 2L * (n - 2L)\
    \ / 2L * (n + 1L) / 2L : (n - 1L) / 2L * (n - 2L) / 2L * (n + 1L) / 2L) +\n  \
    \      (n > 2L ? (n - 2L) / 2L * (n - 1L) / 2L * (n + 1L) / 2L : (n - 2L) / 2L\
    \ * (n - 1L) / 2L * (n + 1L) / 2L) +\n        (n > 2L ? (n - 1L) / 2L * (n\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_31ys0fa.d(24): Error: found `{` when expecting `:`

    /tmp/tmp_31ys0fa.d(24): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmp_31ys0fa.d(24): Error: found `:` instead of statement

    /tmp/tmp_31ys0fa.d(24): Error: declaration expected, not `:`

    /tmp/tmp_31ys0fa.d(36): Error: declaration expected, not `assert`

    /tmp/tmp_31ys0fa.d(37): Error: declaration expected, not `assert`

    /tmp/tmp_31ys0fa.d(38): Error: declaration expected, not `assert`

    /tmp/tmp_31ys0fa.d(39): Error: declaration expected, not `assert`

    /tmp/tmp_31ys0fa.d(40): Error: declaration expected, not `assert`

    /tmp/tmp_31ys0fa.d(41): Error: declaration expected, not `assert`

    /tmp/tmp_31ys0fa.d(42): Error: declaration expected, not `assert`

    /tmp/tmp_31ys0fa.d(43): Error: declaration expected, not `assert`

    /tmp/tmp_31ys0fa.d(44): Error: declaration expected, not `assert`

    /tmp/tmp_31ys0fa.d(45): Error: declaration expected, not `assert`

    /tmp/tmp_31ys0fa.d(46): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  long[] res = new long[n+1];\n  res[0]\
    \ = 1;\n  res[1] = 3;\n  res[2] = 2;\n  for(long i = 3; i <= n; i++) \n  {\n \
    \   res[i] = (i % 2 == 0) ? 1 + i / 2 : res[i-1] + res[i-2] + res[i+1];\n  }\n\
    \  return res;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpmawxhepi.d(30): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42890e]

    ??:? long[] tmpmawxhepi.tri(long) [0x427f41]

    ??:? void tmpmawxhepi.__unittest_L34_C1() [0x427f93]

    ??:? void tmpmawxhepi.__modtest() [0x4285e0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c917]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a35]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ee4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b781]

    ??:? runModuleUnitTests [0x42c6ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n\tauto result = new long[n + 1];\n\t\
    result[0] = 1;\n\tresult[1] = 3;\n\tresult[2] = 2;\n\tforeach(i; 3 .. n + 1)\n\
    \t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tresult[i] = 1 + i / 2;\n\t\t}\n\t\telse\n\
    \t\t{\n\t\t\tresult[i] = result[i - 1] + result[i - 2] + result[i + 1];\n\t\t\
    }\n\t}\n\treturn result;\n}\n/*\nFormal Inputs & Outputs\nInput description\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uznb8_k.d(41): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uznb8_k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret;\n    if (n == 0) {\n\
    \        ret = new long[0];\n    } else if (n == 1) {\n        ret = new long[1];\n\
    \        ret[0] = 3;\n    } else {\n        ret = new long[n + 1];\n        ret[0]\
    \ = 1;\n        ret[1] = 3;\n        ret[2] = 2;\n        if (n > 2) {\n     \
    \       for (size_t i = 3; i < n + 1; i++) {\n                if (i % 2 == 0)\
    \ {\n                    ret[i] = 1 + i / 2;\n                } else {\n     \
    \               ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1];\n             \
    \   }\n            }\n        }\n    }\n    return ret;\n}\n/*\nHow to run:\n\
    \    rdmd --main -unittest Tribonacci.d\n*/\nunittest\n{\n    assert(tri(0L) ==\
    \ []);\n    assert(tri(1L) == [3L]);\n    assert(tri(2L) == [1L, 3L, 2L]);\n \
    \   assert(tri(3L) == [1L, 3L, 2L, 8L]);\n    assert(tri(4L) == [1L, 3L, 2L, 8L,\
    \ 3L]);\n    assert(tri(5L) == [1L, 3L, 2L, 8L, 3L, 9L]);\n    assert(tri(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 9L, 5L]);\n    assert(tri(7L) == [1L, 3L, 2L, 8L, 3L,\
    \ 9L, 5L, 17L]);\n    assert(tri(8L) == [1L, 3L, 2L, 8L, 3L, 9L, 5L, 17L, 6L]);\n\
    \    assert(tri(9L) == [1L, 3L, 2L, 8L, 3L, 9L, 5L, 17L, 6L, 15L]);\n    assert(tri(10L)\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsgu3mekr.d(64): Error: found `unittest` when expecting `)`

    /tmp/tmpsgu3mekr.d(65): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsgu3mekr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) \n    {\n        return\
    \ [1L];\n    }\n    if (n == 1) \n    {\n        return [1L, 3L];\n    }\n   \
    \ auto tri = tuple(1L, 3L, 2L);\n    auto half = 0L;\n    auto tmp = 0L;\n   \
    \ auto result = long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    result[2]\
    \ = 2L;\n    for (long i = 3; i <= n; i++) \n    {\n        if (i % 2 == 0) \n\
    \        {\n            half = i / 2;\n            result[i] = half + 1;\n   \
    \     }\n        else \n        {\n            tmp = get!(tri, 2) + get!(tri,\
    \ 1) + get!(tri, 0);\n            tri[0] = get!(tri, 1);\n            tri[1] =\
    \ get!(tri, 2);\n            tri[2] = tmp;\n            result[i] = tmp;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsxscldda.d(35): Error: found `[` when expecting `.` following long

    /tmp/tmpsxscldda.d(35): Error: semicolon expected following auto declaration,
    not `]`

    /tmp/tmpsxscldda.d(35): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsxscldda.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret = n == 0 ? new long[0]\
    \ : new long[(int)n + 1];\n    ret[0] = 1;\n    ret[1] = 3;\n    for (int i =\
    \ 2; i < n; i++)\n    {\n        ret[i] = i % 2 == 0 ? 1 + i / 2 : ret[i - 1]\
    \ + ret[i - 2] + ret[i + 1];\n    }\n    return ret;\n}\n/*\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkl0s6bum.d(24): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpkl0s6bum.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkl0s6bum.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161384
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  long[] n2 = new long[0];\n  long[]\
    \ n1 = new long[0];\n  long[] n0 = new long[0];\n  long[] t;\n  int i;\n  if (n\
    \ == 0)\n  {\n    return [1L];\n  }\n  if (n == 1)\n  {\n    return [1L, 3L];\n\
    \  }\n  if (n == 2)\n  {\n    return [1L, 3L, 2L];\n  }\n  t = [1L, 3L, 2L];\n\
    \  for (i = 3; i <= n; i++)\n  {\n    if (i % 2 == 0)\n    {\n      t ~= (1 +\
    \ i / 2);\n    }\n    else\n    {\n      t ~= (t[$ - 3] + t[$ - 2] + t[$ - 1]);\n\
    \    }\n  }\n  return t;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp38awgo8u.d(59): unittest failure

    ----------------

    ??:? _d_unittestp [0x42893d]

    ??:? void tmp38awgo8u.__unittest_L55_C1() [0x4280e9]

    ??:? void tmp38awgo8u.__modtest() [0x4286bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d3e3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c276]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430dc1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431270]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430d4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c24d]

    ??:? runModuleUnitTests [0x42d1b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e00]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[(int)n + 1];\n\
    \    arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    for(int i = 3; i < arr.length;\
    \ i++)\n    {\n        if(i % 2 == 0)\n        {\n            arr[i] = 1 + i /\
    \ 2;\n        }\n        else\n        {\n            arr[i] = arr[i - 1] + arr[i\
    \ - 2] + arr[i + 1];\n        }\n    }\n    return arr;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu72rych0.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu72rych0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] r=new long[n+1];\n    r[0]=1;\n\
    \    r[1]=3;\n    r[2]=2;\n    for(int i=3;i<=n;i++)\n    {\n        if(i%2==0)\n\
    \            r[i]=1+(i/2);\n        else\n            r[i]=r[i-1]+r[i-2]+r[i+1];\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpm5v71lob.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428936]

    ??:? long[] tmpm5v71lob.tri(long) [0x427f7c]

    ??:? void tmpm5v71lob.__unittest_L37_C1() [0x427fbb]

    ??:? void tmpm5v71lob.__modtest() [0x428608]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7a9]

    ??:? runModuleUnitTests [0x42c715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long t1 = 1;\n    long t2 = 3;\n\
    \    long t3 = 2;\n    long t;\n    long[] rv = new long[(int)n + 1];\n    rv[0]\
    \ = t1;\n    rv[1] = t2;\n    rv[2] = t3;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        t = i % 2 != 0 ? t1 + t2 + t3 : 1 + i / 2;\n        t1 = t2;\n\
    \        t2 = t3;\n        t3 = t;\n        rv[(int)i] = t;\n    }\n    return\
    \ rv;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy5a6v790.d(28): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpy5a6v790.d(38): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy5a6v790.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) return new long[0];\n\
    \    long[] res = new long[(int)n + 1];\n    res[0] = 1;\n    res[1] = 3;\n  \
    \  res[2] = 2;\n    int len = (int)n;\n    for (int i = 3; i < len; i++)\n   \
    \ {\n        res[i] = res[i - 3] + res[i - 2] + res[i - 1];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdmkaylnw.d(25): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpdmkaylnw.d(29): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdmkaylnw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n < 1) return new long[0];\n\
    \    long[] r = new long[n + 1];\n    r[0] = 1;\n    r[1] = 3;\n    bool odd =\
    \ true;\n    for (int i = 2; i < n + 1; i++)\n    {\n        if (odd)\n      \
    \  {\n            r[i] = r[i - 1] + r[i - 2] + r[i + 1];\n        }\n        else\n\
    \        {\n            r[i] = 1 + i / 2;\n        }\n        odd = !odd;\n  \
    \  }\n    return r;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphrdrswiz.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x42888d]

    ??:? void tmphrdrswiz.__unittest_L43_C1() [0x428039]

    ??:? void tmphrdrswiz.__modtest() [0x42860c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c947]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7b1]

    ??:? runModuleUnitTests [0x42c71d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d50]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    switch(n)\n    {\n        case 0:\
    \ return [0L];\n        case 1: return [1L];\n        case 2: return [1L, 3L];\n\
    \        default: break;\n    }\n    return [1L, 3L, 2L] ~ take(n-2) ~ [0L]\n\
    \                .reduce!((a,b)=>a.zip(b).map!(mixin(a,b)=>a+b).array()).array();\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx7zrkf5b.d(32): Error: found `,` when expecting `)`

    /tmp/tmpx7zrkf5b.d(32): Error: found `b` when expecting `)` following template
    argument list

    /tmp/tmpx7zrkf5b.d(32): Error: found `=>` when expecting `;` following `return`
    statement

    /tmp/tmpx7zrkf5b.d(32): Error: found `)` when expecting `;` following statement

    /tmp/tmpx7zrkf5b.d(32): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx7zrkf5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return map!((x) => (n == 1L) ? 3L\
    \ : \n                                  (n % 2L == 0L) ? 1L + n / 2L : 1L,\n \
    \                                 iota(1L, n + 1L)).array;\n}\nunittest\n{\n \
    \   alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result;\n    long[] result1;\n\
    \    if(n == 0)\n    {\n        result = new long[0];\n        return result;\n\
    \    }\n    else if(n == 1)\n    {\n        result = new long[1];\n        result[0]\
    \ = 1;\n        return result;\n    }\n    else if(n == 2)\n    {\n        result\
    \ = new long[2];\n        result[0] = 1;\n        result[1] = 3;\n        return\
    \ result;\n    }\n    else\n    {\n        result = new long[n + 1];\n       \
    \ result[0] = 1;\n        result[1] = 3;\n        result[2] = 2;\n        if(n\
    \ % 2 == 0)\n        {\n            result[3] = 1 + (n / 2);\n            n =\
    \ n - 1;\n        }\n        else\n        {\n            result[3] = 3;\n   \
    \     }\n        if(n > 3)\n        {\n            for(int i = 4; i <= n; i++)\n\
    \            {\n                if(i % 2 == 0)\n                {\n          \
    \          result[i] = 1 + (i / 2);\n                }\n                else\n\
    \                {\n                    result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n                }\n            }\n        }\n        return\
    \ result;\n    }\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9rhdinx1.d(80): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a15]

    ??:? void tmp9rhdinx1.__unittest_L76_C1() [0x4281c5]

    ??:? void tmp9rhdinx1.__modtest() [0x428798]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cacf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b962]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430bed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43109c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430b79]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b939]

    ??:? runModuleUnitTests [0x42c8a5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ed8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret = new long[n + 1];\n \
    \   ret[0] = 1;\n    ret[1] = 3;\n    ret[2] = 2;\n    long next = 8;\n    for\
    \ (int i = 3; i < n + 1; i++)\n    {\n        ret[i] = next;\n        next = tri(i\
    \ - 1) + tri(i - 2) + tri(i + 1);\n    }\n    return ret;\n}\nunittest\n{\n  \
    \  alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps6zgyco6.d(32): Error: invalid array operation `tri(cast(long)(i
    - 1)) + tri(cast(long)(i - 2))` (possible missing [])

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps6zgyco6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  long[] r;\n  long a = 1;\n  long b\
    \ = 3;\n  long c = 2;\n  long d = 0;\n  for(int i = 0; i < n + 1; i++)\n  {\n\
    \    if(i == 0)\n    {\n      r ~= a;\n    }\n    else if(i == 1)\n    {\n   \
    \   r ~= b;\n    }\n    else if(i == 2)\n    {\n      r ~= c;\n    }\n    else\n\
    \    {\n      if(i % 2 == 0)\n      {\n        d = 1 + i / 2;\n      }\n     \
    \ else\n      {\n        d = r[i - 1] + r[i - 2] + r[i - 3];\n      }\n      r\
    \ ~= d;\n    }\n  }\n  return r;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaxf4i87k.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x42890d]

    ??:? void tmpaxf4i87k.__unittest_L58_C1() [0x4280bd]

    ??:? void tmpaxf4i87k.__modtest() [0x428690]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d357]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1ea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c3d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430bc9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c1c1]

    ??:? runModuleUnitTests [0x42d12d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dd0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n+1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3;\
    \ i <= n; i++)\n    {\n        result[i] = n % 2 == 0 ? 1+ n/2 : result[i-1] +\
    \ result[i-2] + result[i+1];\n    }\n    return result;\n}\n/*\nNotes: \n    The\
    \ first 3 elements are 1, 3, 2\n    If the integer is odd, the number is the sum\
    \ of the next 3 elements\n    If the integer is even, the number is 1 + n/2\n\
    \    The result array is the length of n + 1 to hold the correct number of elements\n\
    \    The initial array elements are 1, 3, 2\n    The loop iterates through the\
    \ initial 3 elements\n    If the integer is even, the number is 1 + n/2\n    If\
    \ the integer is odd, the number is the sum of the next 3 elements\n*/\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7d0xqmzh.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7d0xqmzh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = n == 0 ? new long[0]\
    \ : new long[n+1];\n    if(n == 0) return arr;\n    arr[0] = 1;\n    if(n == 1)\
    \ return arr;\n    arr[1] = 3;\n    if(n == 2) return arr;\n    arr[2] = 2;\n\
    \    if(n == 3) return arr;\n    for(long i = 3; i <= n; i++)\n    {\n       \
    \ if(i % 2 == 0)\n        {\n            arr[i] = 1 + i / 2;\n        }\n    \
    \    else\n        {\n            arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n \
    \       }\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmply7wgp6t.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x42890d]

    ??:? void tmply7wgp6t.__unittest_L45_C1() [0x4280b9]

    ??:? void tmply7wgp6t.__modtest() [0x42868c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9c7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b85a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ae5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f94]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a71]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b831]

    ??:? runModuleUnitTests [0x42c79d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dd0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result;\n    result.length\
    \ = 0;\n    foreach(i; 1 .. n + 1)\n    {\n        if(i == 1)\n        {\n   \
    \         result ~= 3;\n        }\n        else if(i % 2 == 0)\n        {\n  \
    \          result ~= (1 + i / 2);\n        }\n        else\n        {\n      \
    \      result ~= (result[$ - 1] + result[$ - 2] + result[$ - 3]);\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpe6rzfyms.d(38): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428956]

    ??:? long[] tmpe6rzfyms.tri(long) [0x427f67]

    ??:? void tmpe6rzfyms.__unittest_L43_C1() [0x427fd7]

    ??:? void tmpe6rzfyms.__modtest() [0x428624]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e3bf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d252]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431ca5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432154]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431c31]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d229]

    ??:? runModuleUnitTests [0x42e195]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n   int[] result = new int[(int)n+1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3;\
    \ i <= n; i++)\n    {\n      if(i % 2 == 0) result[i] = i / 2;\n      else result[i]\
    \ = result[i-1] + result[i-2] + result[i+1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp37_kf16e.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37_kf16e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret = new long[n+1];\n   \
    \ ret[0] = 1;\n    if(n > 0)\n        ret[1] = 3;\n    if(n > 1)\n        ret[2]\
    \ = 2;\n    if(n > 2)\n    {\n        for(int i = 3; i <= n; i++)\n        {\n\
    \            if(i % 2 == 0)\n                ret[i] = 1 + i / 2;\n           \
    \ else\n                ret[i] = ret[i-1] + ret[i-2] + ret[i+1];\n        }\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuguxjnrz.d(37): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428956]

    ??:? long[] tmpuguxjnrz.tri(long) [0x427f9b]

    ??:? void tmpuguxjnrz.__unittest_L42_C1() [0x427fd7]

    ??:? void tmpuguxjnrz.__modtest() [0x428624]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c95f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f2c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7c9]

    ??:? runModuleUnitTests [0x42c735]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int nn = cast(int)n;\n    long[]\
    \ arr = new long[nn+1];\n    arr[0] = 1;\n    if(n == 0)\n        return arr;\n\
    \    arr[1] = 3;\n    if(n == 1)\n        return arr;\n    arr[2] = 2;\n    for(int\
    \ i = 3; i <= nn; i++)\n    {\n        if(i%2 == 0)\n            arr[i] = 1 +\
    \ i/2;\n        else\n            arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n \
    \   }\n    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpdsnq1h0m.d(38): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42896e]

    ??:? long[] tmpdsnq1h0m.tri(long) [0x427fb1]

    ??:? void tmpdsnq1h0m.__unittest_L42_C1() [0x427fef]

    ??:? void tmpdsnq1h0m.__modtest() [0x42863c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c977]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b80a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a95]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a21]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7e1]

    ??:? runModuleUnitTests [0x42c74d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int i;\n    long[] ret = new long[n+1];\n\
    \    ret[0] = 1;\n    ret[1] = 3;\n    for(i = 2; i < n; i++)\n    {\n       \
    \ if(i % 2 == 0)\n        {\n            ret[i] = (1 + i / 2);\n        }\n  \
    \      else\n        {\n            ret[i] = ret[i-1] + ret[i-2] + ret[i+1];\n\
    \        }\n    }\n    return ret;\n}\n/*\nIn mathematics, the Fibonacci numbers\
    \ or Fibonacci sequence are the numbers in the \n    following integer sequence:\n\
    \    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\n    By definition, the\
    \ first two numbers in the Fibonacci sequence are 0 and 1, and each \n    subsequent\
    \ number is the sum of the previous two.\n    Example:\n    >>> [fibonacci(n)\
    \ for n in range(1, 11)]\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n*/\nlong fibonacci(long\
    \ n)\n{\n    int i;\n    long[] ret = new long[n+1];\n    ret[0] = 0;\n    ret[1]\
    \ = 1;\n    for(i = 2; i < n; i++)\n    {\n        ret[i] = ret[i-1] + ret[i-2];\n\
    \    }\n    return ret[n-1];\n}\n/*\nThe prime numbers are the numbers greater\
    \ than 1 which are divisible only by themselves \n    and 1.\n    The first prime\
    \ numbers are: 2, 3, 5, 7, 11, 13, 17, 19, 23...\n    You will be given a number\
    \ and your task is to return the closest prime number.\n    Examples:\n    closest_prime(1)\
    \ == 2\n    closest_prime(100) == 101\n*/\nlong closest_prime(long num)\n{\n \
    \   long ret = num;\n    bool flag = false;\n    int i;\n    if(num <= 2)\n  \
    \  {\n        return 2;\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8hkxgal0.d(80): Error: found `unittest` instead of statement

    /tmp/tmp8hkxgal0.d(95): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8hkxgal0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[(int)n+1];\n\
    \    res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for(int i = 3; i <= n;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            res[i] = 1 + i\
    \ / 2;\n        }\n        else\n        {\n            res[i] = res[i-1] + res[i-2]\
    \ + res[i+1];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplirstfc0.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplirstfc0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0)\n        return new long[];\n\
    \    if (n == 1)\n        return [1L];\n    if (n == 2)\n        return [1L,3L];\n\
    \    if (n == 3)\n        return [1L,3L,2L];\n    long[] fib = [1L,3L,2L];\n \
    \   while (fib.length < n + 1)\n    {\n        int last = fib.length - 1;\n  \
    \      if (last % 2 == 0)\n            fib ~= 1 + last / 2;\n        else\n  \
    \          fib ~= fib[last - 1] + fib[last - 2] + fib[last + 1];\n    }\n    return\
    \ fib;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp29kl8wpf.d(25): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp29kl8wpf.d(35): Error: cannot implicitly convert expression `fib.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp29kl8wpf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  int size = (int)n+1;\n  long[] res\
    \ = new long[size];\n  if(n<=0)\n    return [1L];\n  if(n<=1)\n    return [1L,3L];\n\
    \  res[0] = 1L;\n  res[1] = 3L;\n  res[2] = 2L;\n  if(n>2)\n  {\n    for(int i=3;i<size;i++)\n\
    \    {\n      if(i%2 == 0)\n        res[i] = (1 + (i / 2));\n      else\n    \
    \    res[i] = res[i-1] + res[i-2] + res[i+1];\n    }\n  }\n  return res;\n}\n\
    /*\n    long[] tri(long n) \n    {\n      long[] res = new long[n+1];\n      res[0]\
    \ = 1;\n      if(n==0)\n        return res;\n      res[1] = 3;\n      if(n==1)\n\
    \        return res;\n      res[2] = 2;\n      if(n==2)\n        return res;\n\
    \      for(int i=3;i<=n;i++)\n      {\n        if(i%2==0)\n          res[i] =\
    \ 1 + (i / 2);\n        else\n          res[i] = res[i-1] + res[i-2] + res[i+1];\n\
    \      }\n      return res;\n    }\n*/\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj71hke4i.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj71hke4i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    if(n==0) return\
    \ take(result, 0);\n    if(n==1) return take(result, 1);\n    if(n==2) return\
    \ take(result, 2);\n    foreach(i; 3..n+1)\n    {\n        if(i%2==0)\n      \
    \  {\n            result[i] = 1 + i/2;\n        }\n        else\n        {\n \
    \           result[i] = result[i-1] + result[i-2] + result[i+1];\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg_e5s0y_.d(28): Error: undefined identifier `take`, did you mean
    function `tan`?

    /tmp/tmpg_e5s0y_.d(29): Error: undefined identifier `take`, did you mean function
    `tan`?

    /tmp/tmpg_e5s0y_.d(30): Error: undefined identifier `take`, did you mean function
    `tan`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg_e5s0y_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    if (n > 0)\n    {\n        result[1] = 3;\n        if\
    \ (n > 1)\n        {\n            result[2] = 2;\n            for (long i = 3;\
    \ i <= n; i++)\n            {\n                if (i % 2 == 0)\n             \
    \   {\n                    result[i] = 1 + i / 2;\n                }\n       \
    \         else\n                {\n                    result[i] = result[i -\
    \ 1] + result[i - 2] + result[i + 1];\n                }\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp96_0d2io.d(40): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428956]

    ??:? long[] tmp96_0d2io.tri(long) [0x427f9e]

    ??:? void tmp96_0d2io.__unittest_L47_C1() [0x427fdb]

    ??:? void tmp96_0d2io.__modtest() [0x428628]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c95f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f2c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7c9]

    ??:? runModuleUnitTests [0x42c735]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret;\n    if (n < 0) \n  \
    \  {\n        return ret;\n    } \n    else \n    {\n        ret ~= 1;\n     \
    \   if (n == 0) \n        {\n            return ret;\n        } \n        else\
    \ \n        {\n            ret ~= 3;\n            if (n == 1) \n            {\n\
    \                return ret;\n            } \n            else \n            {\n\
    \                ret ~= 2;\n                for (int i = 2; i < n; i++) \n   \
    \             {\n                    if (i % 2 == 0) \n                    {\n\
    \                        ret ~= 1 + i / 2;\n                    } \n         \
    \           else \n                    {\n                        ret ~= ret[$\
    \ - 1] + ret[$ - 2] + ret[$ - 3];\n                    }\n                }\n\
    \                return ret;\n            }\n        }\n    }\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbzrri50n.d(66): unittest failure

    ----------------

    ??:? _d_unittestp [0x428905]

    ??:? void tmpbzrri50n.__unittest_L62_C1() [0x4280b5]

    ??:? void tmpbzrri50n.__modtest() [0x428688]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d34f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1e2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c35]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430bc1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c1b9]

    ??:? runModuleUnitTests [0x42d125]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dc8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n\tlong[] t = new long[(cast(int)n)+1];\n\
    \tif(n < 0) return t;\n\tt[0] = 1;\n\tt[1] = 3;\n\tfor(int i = 2; i < n; i++)\n\
    \t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tt[i] = 1 + i / 2;\n\t\t}\n\t\telse\n\t\t\
    {\n\t\t\tt[i] = t[i-1] + t[i-2] + t[i+1];\n\t\t}\n\t}\n\treturn t;\n}\n/*\nDnaStrand(\"\
    ATTGC\") // return \"TAACG\"\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7502p6r.d(41): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7502p6r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr=new long[n+1];\n    if(n==0)return\
    \ new long[0];\n    if(n==1)return [1];\n    if(n==2)return [1,1];\n    arr[0]=1;\n\
    \    arr[1]=1;\n    arr[2]=1;\n    for(long i=3;i<=n;i++)\n    {\n        if(i%2==0)\n\
    \        {\n            arr[i]=1+i/2;\n        }\n        else\n        {\n  \
    \          arr[i]=arr[i-1]+arr[i-2]+arr[i+1];\n        }\n    }\n    return arr;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp2j611s6h.d(39): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4289de]

    ??:? long[] tmp2j611s6h.tri(long) [0x428026]

    ??:? void tmp2j611s6h.__unittest_L44_C1() [0x428063]

    ??:? void tmp2j611s6h.__modtest() [0x4286b0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b89e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430b29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430fd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430ab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b875]

    ??:? runModuleUnitTests [0x42c7e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr;\n    arr ~= 1L;\n   \
    \ arr ~= 3L;\n    arr ~= 2L;\n    //arr ~= 1L;\n    foreach(i;1..n)\n    {\n \
    \       if(i % 2 == 0)\n        {\n            arr ~= 1L + i / 2;\n        }\n\
    \        else\n        {\n            arr ~= arr[$-3] + arr[$-2] + arr[$-1];\n\
    \        }\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp677j4iu3.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x42890d]

    ??:? void tmp677j4iu3.__unittest_L42_C1() [0x4280bd]

    ??:? void tmp677j4iu3.__modtest() [0x428690]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d357]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1ea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c3d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430bc9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c1c1]

    ??:? runModuleUnitTests [0x42d12d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dd0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return true ? iota(0, n + 1).map!((i)\
    \ => i == 0 ? 1 : i < 3 ? i * 3 : tri(i - 1)[$ - 1] + tri(i - 2)[$ - 1] + tri(i\
    \ + 1)[$ - 1]).array : null;\n}\nunittest\n{\n    alias candidate = tri;\n\n \
    \   assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8vu4zuav.d(24): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8vu4zuav.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] A = new long[(int)n+1];\n\
    \    A[0] = 1;\n    A[1] = 3;\n    A[2] = 2;\n    for(int i = 3; i < A.length;\
    \ i++)\n    {\n        if(i % 2 == 0)\n        {\n            A[i] = 1 + (i /\
    \ 2);\n        }\n        else\n        {\n            A[i] = A[i-1] + A[i-2]\
    \ + A[i+1];\n        }\n    }\n    return A;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvkcon7vf.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkcon7vf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto result = long[](n + 1);\n  \
    \  result[0] = 1;\n    if (n >= 1)\n        result[1] = 3;\n    for (auto i =\
    \ 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] = 1 +\
    \ i / 2;\n        else\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp49ju698o.d(24): Error: found `[` when expecting `.` following long

    /tmp/tmp49ju698o.d(24): Error: found `]` when expecting identifier following `long`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp49ju698o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  return n == 0 ? new long[] { 0 } \n\
    \       : n == 1 ? new long[] { 1, 3 } \n       : n == 2 ? new long[] { 1, 3,\
    \ 2 } \n       : n % 2 == 0 ? tri(n - 1) ~ cast(long) (1 + n / 2) \n       : tri(n\
    \ - 1) ~ tri(n - 2) ~ tri(n + 1);\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl4f60dnj.d(24): Error: found `{` when expecting `:`

    /tmp/tmpl4f60dnj.d(24): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmpl4f60dnj.d(25): Error: found `:` instead of statement

    /tmp/tmpl4f60dnj.d(26): Error: declaration expected, not `:`

    /tmp/tmpl4f60dnj.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl4f60dnj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] rslt = new long[n + 1];\n\
    \    for (long i = 0; i <= n; i++)\n    {\n        long r = i % 2;\n        if\
    \ (r == 0)\n        {\n            rslt[i] = 1 + i / 2;\n        }\n        else\n\
    \        {\n            rslt[i] = rslt[i - 1] + rslt[i - 2] + rslt[i + 1];\n \
    \       }\n    }\n    return rslt;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpy39qkp44.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4288ce]

    ??:? long[] tmpy39qkp44.tri(long) [0x427ef4]

    ??:? void tmpy39qkp44.__unittest_L39_C1() [0x427f53]

    ??:? void tmpy39qkp44.__modtest() [0x4285a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b76a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4309f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ea4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430981]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b741]

    ??:? runModuleUnitTests [0x42c6ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 0 ? new long[0] : n ==\
    \ 0 ? [1L] : n == 1 ? [1L, 3L] : n == 2 ? [1L, 3L, 2L] : n == 3 ? [1L, 3L, 2L,\
    \ 8L] : n == 4 ? [1L, 3L, 2L, 8L, 5L] : n == 5 ? [1L, 3L, 2L, 8L, 5L, 13L] : n\
    \ == 6 ? [1L, 3L, 2L, 8L, 5L, 13L, 21L] : n == 7 ? [1L, 3L, 2L, 8L, 5L, 13L, 21L,\
    \ 34L] : n == 8 ? [1L, 3L, 2L, 8L, 5L, 13L, 21L, 34L, 55L] : n == 9 ? [1L, 3L,\
    \ 2L, 8L, 5L, 13L, 21L, 34L, 55L, 89L] : n == 10 ? [1L, 3L, 2L, 8L, 5L, 13L, 21L,\
    \ 34L, 55L, 89L, 144L] : new long[0];\n}\nlong[] tri2(long n)\n{\n    return n\
    \ < 0 ? new long[0] : n == 0 ? [1L] : n == 1 ? [1L, 3L] : n == 2 ? [1L, 3L, 2L]\
    \ : n == 3 ? [1L, 3L, 2L, 8L] : n == 4 ? [1L, 3L, 2L, 8L, 5L] : n == 5 ? [1L,\
    \ 3L, 2L, 8L, 5L, 13L] : n == 6 ? [1L, 3L, 2L, 8L, 5L, 13L, 21L] : n == 7 ? [1L,\
    \ 3L, 2L, 8L, 5L, 13L, 21L, 34L] : n == 8 ? [1L, 3L, 2L, 8L, 5L, 13L, 21L, 34L,\
    \ 55L] : n == 9 ? [1L, 3L, 2L\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn19y0dt9.d(29): Error: found `unittest` when expecting `,`

    /tmp/tmpn19y0dt9.d(44): Error: found `void` when expecting `,`

    /tmp/tmpn19y0dt9.d(44): Error: found `{` when expecting `,`

    /tmp/tmpn19y0dt9.d(44): Error: expression expected, not `}`

    /tmp/tmpn19y0dt9.d(44): Error: found `End of File` when expecting `,`

    /tmp/tmpn19y0dt9.d(28): Error: found `End of File` when expecting `]`

    /tmp/tmpn19y0dt9.d(44): Error: found `End of File` when expecting `:`

    /tmp/tmpn19y0dt9.d(44): Error: expression expected, not `End of File`

    /tmp/tmpn19y0dt9.d(44): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmpn19y0dt9.d(44): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn19y0dt9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  return iota(n+1).map!(x => x <= 1 ?\
    \ 3 : (x & 1 ? x - 1 : x / 2) + 1).array;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqoc6m72c.d(24): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqoc6m72c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto myTuple = tuple(1L, 3L, 2L);\n\
    \    if (n == 0) \n    {\n        return myTuple.take(0).array;\n    } \n    else\
    \ if (n == 1) \n    {\n        return myTuple.take(1).array;\n    } \n    else\
    \ if (n == 2) \n    {\n        return myTuple.take(2).array;\n    } \n    else\
    \ \n    {\n        auto myArray = new long[](n + 1);\n        myArray[0] = myTuple[0];\n\
    \        myArray[1] = myTuple[1];\n        myArray[2] = myTuple[2];\n        auto\
    \ i = 3;\n        while (i <= n) \n        {\n            myArray[i] = myArray[i\
    \ - 1] + myArray[i - 2] + myArray[i - 3];\n            i++;\n        }\n     \
    \   return myArray;\n    }\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7kx7r9di.d(27): Error: no property `take` for type `Tuple!(long,
    long, long)`

    /tmp/tmp7kx7r9di.d(31): Error: no property `take` for type `Tuple!(long, long,
    long)`

    /tmp/tmp7kx7r9di.d(35): Error: no property `take` for type `Tuple!(long, long,
    long)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7kx7r9di.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return null;\n}\nunittest\n{\n  \
    \  alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq_4stgbt.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmpq_4stgbt.__unittest_L26_C1() [0x427e91]

    ??:? void tmpq_4stgbt.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6cf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b562]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430681]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b539]

    ??:? runModuleUnitTests [0x42c4a5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b34]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n == 0 ? new long[] { 1L }\
    \ : n == 1 ? new long[] { 1L, 3L } : n == 2 ? new long[] { 1L, 3L, 2L } : \n \
    \          take(loop(Tuple!(1L, 3L, 2L), 0L, tup => tup[2] == n + 1 ? tup[0] :\
    \ tup[2] % 2 == 0 ? \n                    Tuple!(tup[0], tup[1], tup[2] + 1, 1\
    \ + tup[2] / 2) : tup[2] % 2 == 1 ? \n                    Tuple!(tup[0], tup[1],\
    \ tup[2] + 1, tup[0] + tup[1] + tup[2] + 1) : null\n                    ), n +\
    \ 1);\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplz9h023i.d(24): Error: found `{` when expecting `:`

    /tmp/tmplz9h023i.d(24): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmplz9h023i.d(24): Error: found `:` instead of statement

    /tmp/tmplz9h023i.d(24): Error: declaration expected, not `:`

    /tmp/tmplz9h023i.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplz9h023i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long t1 = 1;\n    long t2 = 3;\n\
    \    long t3 = 2;\n    long t4 = 8;\n    long temp;\n    long[] lst = new long[n\
    \ + 1];\n    lst[0] = t1;\n    lst[1] = t2;\n    lst[2] = t3;\n    for (int i\
    \ = 3; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            temp\
    \ = i / 2;\n            t4 = 1 + temp;\n        }\n        else\n        {\n \
    \           t4 = t3 + t2 + t1;\n        }\n        t1 = t2;\n        t2 = t3;\n\
    \        t3 = t4;\n        lst[i] = t4;\n    }\n    return lst;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp47b9aies.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x42883d]

    ??:? void tmp47b9aies.__unittest_L51_C1() [0x427fe9]

    ??:? void tmp47b9aies.__modtest() [0x4285bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b78a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a15]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ec4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309a1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b761]

    ??:? runModuleUnitTests [0x42c6cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d00]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return iota(n + 1).map!(x => x ==\
    \ 1 ? 3 : (x % 2 == 0 ? (1 + x / 2) : \n                                     \
    \                       (tri(x - 1)[$ - 1] + tri(x - 2)[$ - 1] + tri(x + 1)[$\
    \ - 1])));\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4ob45cv_.d(24): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ob45cv_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[n+1];\n   \
    \ for(int i = 1; i <= n; i++)\n    {\n        if(i == 1)\n        {\n        \
    \    arr[i] = 3;\n        }\n        else if(i == 2)\n        {\n            arr[i]\
    \ = 2;\n        }\n        else if(i == 3)\n        {\n            arr[i] = 8;\n\
    \        }\n        else if(i % 2 == 0)\n        {\n            arr[i] = 1 + (i\
    \ / 2);\n        }\n        else\n        {\n            arr[i] = arr[i-1] + arr[i-2]\
    \ + arr[i+1];\n        }\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8xg1q38i.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288c5]

    ??:? void tmp8xg1q38i.__unittest_L50_C1() [0x428071]

    ??:? void tmp8xg1q38i.__modtest() [0x428644]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c97f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b812]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a9d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f4c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a29]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7e9]

    ??:? runModuleUnitTests [0x42c755]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d88]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret = new long[n + 1];\n \
    \   if (n == 0) return ret;\n    ret[0] = 1;\n    if (n == 1) return ret;\n  \
    \  ret[1] = 3;\n    if (n == 2) return ret;\n    ret[2] = 2;\n    for (long i\
    \ = 3; i <= n; i++)\n    {\n        if (i % 2 == 0) ret[i] = 1 + i / 2;\n    \
    \    else ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1];\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpiino7man.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpiino7man.tri(long) [0x427fcf]

    ??:? void tmpiino7man.__unittest_L38_C1() [0x42800f]

    ??:? void tmpiino7man.__modtest() [0x42865c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tribonacci = new long[n +\
    \ 1];\n    for (int i = 0; i <= n; i++) \n    {\n        if (i == 0) tribonacci[i]\
    \ = 1;\n        else if (i == 1) tribonacci[i] = 3;\n        else if (i == 2)\
    \ tribonacci[i] = 2;\n        else tribonacci[i] = tribonacci[i - 1] + tribonacci[i\
    \ - 2] + tribonacci[i - 3];\n    }\n    return tribonacci;\n}\nunittest\n{\n \
    \   alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmyhklj5f.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x428875]

    ??:? void tmpmyhklj5f.__unittest_L34_C1() [0x428021]

    ??:? void tmpmyhklj5f.__modtest() [0x4285f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c92f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a4d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430efc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b799]

    ??:? runModuleUnitTests [0x42c705]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d38]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n+1];\n\
    \    foreach(i;0..n)\n    {\n        if(i == 0)\n        {\n            result[i]\
    \ = 1;\n        }\n        else if(i == 1)\n        {\n            result[i] =\
    \ 3;\n        }\n        else if(i == 2)\n        {\n            result[i] = 2;\n\
    \        }\n        else if(i%2 == 0)\n        {\n            result[i] = i/2\
    \ + 1;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + result[i-2] + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjaxqqm28.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjaxqqm28.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[(int)n + 1];\n\
    \    res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for (int i = 3; i <= n;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            res[i] = 1 + i\
    \ / 2;\n        }\n        else\n        {\n            res[i] = res[i - 1] +\
    \ res[i - 2] + res[i + 1];\n        }\n    }\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprilndxxj.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprilndxxj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] output = new long[n + 1];\n\
    \    output[0] = 1;\n    if (n > 0)\n    {\n        output[1] = 3;\n        if\
    \ (n > 1)\n        {\n            output[2] = 2;\n            if (n > 2)\n   \
    \         {\n                foreach (i; 3 .. n + 1)\n                {\n    \
    \                if (i % 2 == 0)\n                    {\n                    \
    \    output[i] = 1 + i / 2;\n                    }\n                    else\n\
    \                    {\n                        output[i] = output[i - 1] + output[i\
    \ - 2] + output[i + 1];\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return output;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpc3ew6se7.d(42): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428976]

    ??:? long[] tmpc3ew6se7.tri(long) [0x427fbb]

    ??:? void tmpc3ew6se7.__unittest_L50_C1() [0x427ffb]

    ??:? void tmpc3ew6se7.__modtest() [0x428648]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c97f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b812]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a9d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f4c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a29]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7e9]

    ??:? runModuleUnitTests [0x42c755]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 1 ? new long[]{1L} :\n\
    \           n < 2 ? new long[]{1L, 3L} :\n           n < 3 ? new long[]{1L, 3L,\
    \ 2L} :\n           new long[] {1L, 3L, 2L} \n                   ~ new long[]\
    \ \n                   {\n                       n % 2 == 0 ? (n / 2) + 1 :\n\
    \                       tri(n - 1)[$ - 1] + tri(n - 2)[$ - 1] + tri(n + 1)[$ -\
    \ 1]\n                   }.\n                   front(n - 2);\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppqn5wcoc.d(24): Error: found `{` when expecting `:`

    /tmp/tmppqn5wcoc.d(24): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmppqn5wcoc.d(24): Error: found `:` instead of statement

    /tmp/tmppqn5wcoc.d(25): Error: declaration expected, not `:`

    /tmp/tmppqn5wcoc.d(34): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppqn5wcoc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto arr = new long[n + 1];\n   \
    \ foreach(i; 0 .. n + 1)\n    {\n        if(i == 0)\n        {\n            arr[i]\
    \ = 1;\n        }\n        else if(i == 1)\n        {\n            arr[i] = 3;\n\
    \        }\n        else if(i == 2)\n        {\n            arr[i] = 2;\n    \
    \    }\n        else if(i % 2 == 0)\n        {\n            arr[i] = 1 + (i /\
    \ 2);\n        }\n        else\n        {\n            arr[i] = arr[i - 1] + arr[i\
    \ - 2] + arr[i + 1];\n        }\n    }\n    return arr;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpt04iayrf.d(45): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42898e]

    ??:? long[] tmpt04iayrf.tri(long) [0x427fd3]

    ??:? void tmpt04iayrf.__unittest_L50_C1() [0x428013]

    ??:? void tmpt04iayrf.__modtest() [0x428660]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c997]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b801]

    ??:? runModuleUnitTests [0x42c76d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n==0)\n        return [1L];\n\
    \    return iota(n).map!((x)=>(x==0)?1L:(x<=2)?3L:tri(x-1)[$-1]+tri(x-2)[$-1]+tri(x+1)[$-1]).array;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjdabxvvc.d(26): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjdabxvvc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) \n    {\n        return\
    \ [1];\n    }\n    else if (n == 1) \n    {\n        return [1, 3];\n    }\n \
    \   else if (n == 2) \n    {\n        return [1, 3, 2];\n    }\n    else \n  \
    \  {\n        auto t = tri(n - 1);\n        auto a = t[$ - 1];\n        auto b\
    \ = t[$ - 2];\n        auto c = t[$ - 3];\n        if (n % 2 == 0) \n        {\n\
    \            t ~= 1 + n / 2;\n        }\n        else \n        {\n          \
    \  t ~= a + b + c;\n        }\n        return t;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn_lfmv81.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288dd]

    ??:? void tmpn_lfmv81.__unittest_L53_C1() [0x42808d]

    ??:? void tmpn_lfmv81.__modtest() [0x428660]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d327]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c0d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310bc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430b99]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c191]

    ??:? runModuleUnitTests [0x42d0fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428da0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    if(n == 1)\n        return result;\n\
    \    result[2] = 2;\n    for(long i = 3; i <= n; i++)\n    {\n        if(i % 2\
    \ == 0)\n            result[i] = 1 + i / 2;\n        else\n            result[i]\
    \ = result[i-1] + result[i-2] + result[i+1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpzyd0a74d.d(35): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428956]

    ??:? long[] tmpzyd0a74d.tri(long) [0x427f9d]

    ??:? void tmpzyd0a74d.__unittest_L39_C1() [0x427fdb]

    ??:? void tmpzyd0a74d.__modtest() [0x428628]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c95f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f2c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7c9]

    ??:? runModuleUnitTests [0x42c735]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto ans = appender!(long[])();\n\
    \    ans.put(1L);\n    ans.put(3L);\n    if (n <= 1) return ans.data;\n    ans.put(2L);\n\
    \    if (n == 2) return ans.data;\n    ans.put(8L);\n    foreach (i; 3 .. n)\n\
    \    {\n        auto last_1 = ans[$ - 1];\n        auto last_2 = ans[$ - 2];\n\
    \        auto last_3 = ans[$ - 3];\n        if (i % 2 == 0)\n        {\n     \
    \       ans.put(last_3 + last_2 + last_1);\n        }\n        else\n        {\n\
    \            ans.put(1 + (i / 2));\n        }\n    }\n    return ans.data;\n}\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp914npmue.d(24): Error: template instance `appender!(long[])` template
    `appender` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp914npmue.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    foreach(i;3..result.length)\n\
    \    {\n        if(i.isEven)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzhn87q0b.d(30): Error: no property `isEven` for type `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzhn87q0b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    import std.array;\n    if (n == 0)\
    \ return [1L];\n    auto res = [1L, 3L, 2L];\n    while (res.length < n + 1)\n\
    \    {\n        auto n = res.length;\n        res ~= ((n % 2 == 0) ? 1L + n /\
    \ 2 : res[n - 1] + res[n - 2] + res[n + 1]);\n    }\n    return res;\n}\n//................................................................................................\n\
    /*\nWrite a function that returns the index of the first element in array that\
    \ is bigger than \n    its neighbors, or -1, if there's no such element.\n   \
    \ Input array will always contain at least 2 and no more than 100 elements.\n\
    \    Indexing starts from zero.\n    Examples:\n    >>> first_larger_than_neighbors(1,\
    \ 2, 1)\n    1\n    >>> first_larger_than_neighbors(2, 1, 2)\n    -1\n*/\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp76xe7pv3.d(29): Error: variable `n` is shadowing variable `tmp76xe7pv3.tri.n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp76xe7pv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[(int)n+1];\n\
    \    res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for(int i = 3; i < n;\
    \ i++)\n    {\n        if(i % 2 == 0)\n        {\n            res[i] = (1 + i)\
    \ / 2;\n        }\n        else\n        {\n            res[i] = res[i-1] + res[i-2]\
    \ + res[i+1];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_c83xygu.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_c83xygu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] list = new long[(int)n + 1];\n\
    \    if(n > 0)\n    {\n        for(int i = 0; i < list.length; i++)\n        {\n\
    \            if(i == 0)\n            {\n                list[i] = 1;\n       \
    \     }\n            else if(i == 1)\n            {\n                list[i] =\
    \ 3;\n            }\n            else if(i == 2)\n            {\n            \
    \    list[i] = 2;\n            }\n            else if(i % 2 == 0)\n          \
    \  {\n                list[i] = 1 + (i / 2);\n            }\n            else\n\
    \            {\n                list[i] = list[i - 1] + list[i - 2] + list[i +\
    \ 1];\n            }\n        }\n    }\n    return list;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1sxi3v2d.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1sxi3v2d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n\
    \    result[0] = 1;\n    if(n>0) result[1] = 3;\n    for(int i = 2; i<result.length;\
    \ i++)\n    {\n        if(n%2==0) result[i] = 1 + n/2;\n        else result[i]\
    \ = result[i-1] + result[i-2] + result[i+1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp7i2bh_dc.d(30): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42891e]

    ??:? long[] tmp7i2bh_dc.tri(long) [0x427f64]

    ??:? void tmp7i2bh_dc.__unittest_L34_C1() [0x427fa3]

    ??:? void tmp7i2bh_dc.__modtest() [0x4285f0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c927]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a45]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ef4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b791]

    ??:? runModuleUnitTests [0x42c6fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] array = new long[(int)n +\
    \ 1];\n    if (n < 0)\n        return array;\n    array[0] = 1;\n    array[1]\
    \ = 3;\n    array[2] = 2;\n    for (int i = 3; i < array.length; i++)\n    {\n\
    \        if (i % 2 == 0)\n            array[i] = 1 + i / 2;\n        else\n  \
    \          array[i] = array[i - 1] + array[i - 2] + array[i + 1];\n    }\n   \
    \ return array;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5q1q277k.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5q1q277k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161385
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n +\
    \ 1];\n    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++) \n    {\n        if (i % 2 == 0) \n        {\n         \
    \   result[(int)i] = 1 + i / 2;\n        } \n        else \n        {\n      \
    \      result[(int)i] = result[(int)i - 1] + result[(int)i - 2] + result[(int)i\
    \ + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfle08rb6.d(24): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpfle08rb6.d(32): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpfle08rb6.d(36): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpfle08rb6.d(36): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpfle08rb6.d(36): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpfle08rb6.d(36): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfle08rb6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] r;\n    if (n > 0)\n    {\n\
    \        r ~= 1;\n        if (n > 1)\n        {\n            r ~= 3;\n       \
    \     if (n > 2)\n            {\n                r ~= 2;\n                for\
    \ (long i = 3; i <= n; i++)\n                {\n                    r ~= (i %\
    \ 2) ? (r[i - 1] + r[i - 2] + r[i + 1]) : 1 + (i / 2);\n                }\n  \
    \          }\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpvpzv2r95.d(36): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42895e]

    ??:? long[] tmpvpzv2r95.tri(long) [0x427f5e]

    ??:? void tmpvpzv2r95.__unittest_L43_C1() [0x427fdf]

    ??:? void tmpvpzv2r95.__modtest() [0x42862c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d2f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c18a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430bdd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43108c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430b69]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c161]

    ??:? runModuleUnitTests [0x42d0cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] array = new long[n+1];\n \
    \   for(int i = 0; i < n; i++)\n    {\n        if(i == 0)\n        {\n       \
    \     array[i] = 1;\n        }\n        else if(i == 1)\n        {\n         \
    \   array[i] = 3;\n        }\n        else if(i == 2)\n        {\n           \
    \ array[i] = 2;\n        }\n        else if(i%2 == 0)\n        {\n           \
    \ array[i] = 1 + i/2;\n        }\n        else\n        {\n            array[i]\
    \ = array[i-1] + array[i-2] + array[i+1];\n        }\n    }\n    return array;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphtgybrhe.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288c5]

    ??:? void tmphtgybrhe.__unittest_L50_C1() [0x428071]

    ??:? void tmphtgybrhe.__modtest() [0x428644]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c97f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b812]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a9d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f4c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a29]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7e9]

    ??:? runModuleUnitTests [0x42c755]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d88]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n <= 0) return new long[0];\n\
    \    if (n == 1) return new long[] { 3 };\n    long[] a = new long[n + 1];\n \
    \   a[0] = 1;\n    a[1] = 3;\n    a[2] = 2;\n    long t = 2;\n    for (int i =\
    \ 3; i <= n; i++)\n    {\n        if (t % 2 == 0) \n        {\n            a[i]\
    \ = 1 + t / 2;\n        }\n        else \n        {\n            a[i] = a[i -\
    \ 1] + a[i - 2] + a[i + 1];\n        }\n        t++;\n    }\n    return a;\n}\n\
    \ \n \n/*\n    An isogram is a word that has no repeating letters, consecutive\
    \ or non-consecutive. \n    Implement a function that determines whether a string\
    \ that contains only letters is an isogram. \n    Assume the empty string is an\
    \ isogram. Ignore letter case.\n    \n    true\n    isIsogram( \"Dermatoglyphics\"\
    \ ) == true\n    isIsogram( \"aba\" ) == false\n    isIsogram( \"moOse\" ) ==\
    \ false // -- ignore letter case\n*/\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2r9z1euo.d(25): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp2r9z1euo.d(25): Error: found `}` when expecting `;` following statement

    /tmp/tmp2r9z1euo.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2r9z1euo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto arr = new long[n + 1];\n   \
    \ arr[0] = 1;\n    if (n >= 1) \n    {\n        arr[1] = 3;\n        arr[2] =\
    \ 2;\n        for (long i = 3; i <= n; i++) \n        {\n            if (i % 2)\
    \ \n            {\n                arr[i] = arr[i - 1] + arr[i - 2] + arr[i +\
    \ 1];\n            }\n            else \n            {\n                arr[i]\
    \ = 1 + i / 2;\n            }\n        }\n    }\n    return arr;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpguohlwrp.d(34): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42894e]

    ??:? long[] tmpguohlwrp.tri(long) [0x427f51]

    ??:? void tmpguohlwrp.__unittest_L44_C1() [0x427fcf]

    ??:? void tmpguohlwrp.__modtest() [0x42861c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c957]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7ea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f24]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7c1]

    ??:? runModuleUnitTests [0x42c72d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) return new long[0];\n\
    \    long[] a = new long[(int)n + 1];\n    a[0] = 1;\n    a[1] = 3;\n    if (n\
    \ == 1) return a;\n    a[2] = 2;\n    if (n == 2) return a;\n    for (long i =\
    \ 3; i <= n; i++)\n    {\n        a[(int)i] = ((i + 1) % 2 == 0) ? (1 + (i / 2))\
    \ : (a[(int)i - 1] + a[(int)i - 2] + a[(int)i + 1]);\n    }\n    return a;\n}\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyzn857of.d(25): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpyzn857of.d(33): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpyzn857of.d(33): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpyzn857of.d(33): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpyzn857of.d(33): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyzn857of.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    immutable long[] first5 = [1L, 3L,\
    \ 2L, 8L, 4L];\n    immutable long[] first20 = [1L, 3L, 2L, 8L, 4L, 9L, 6L, 16L,\
    \ 5L, 13L, 11L, 24L, 7L, 19L, 22L, 41L, 10L, 31L, 26L, 52L];\n    if (n < 5)\n\
    \        return first5[0..n + 1];\n    if (n < 20)\n        return first20[0..n\
    \ + 1];\n    immutable long[] result = first20;\n    for (int i = 20; i <= n;\
    \ i++)\n    {\n        immutable long[] newresult = result ~ [result[$ - 3] +\
    \ result[$ - 2] + result[$ - 1]];\n        result = newresult;\n    }\n    return\
    \ result;\n}\n/*\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4fkebozq.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4fkebozq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return 0..n + 1L\n        .map!(a\
    \ => \n        {\n            if (a <= 3L) return a;\n            else if (a %\
    \ 2L == 0L) return 1L + a / 2L;\n            else return tri(a - 1L)[a - 1L] +\
    \ tri(a - 2L)[a - 2L] + tri(a + 1L)[a + 1L];\n        }).array;\n}\n/*\n    Tests:\n\
    \    >>> tri(10L)\n    [1L, 3L, 2L, 8L, 5L, 6L, 5L, 3L, 9L, 5L, 4L]\n    >>> tri(100L)\n\
    \    [1L, 3L, 2L, 8L, 5L, 6L, 5L, 3L, 9L, 5L, 4L, 3L, 9L, 5L, 6L, 2L, 8L, 9L,\
    \ 5L, 2L, 7L, 5L, 4L, 9L, 3L, 6L, 5L, 2L, 7L, 5L, 6L, 9L, 8L, 9L, 5L, 2L, 7L,\
    \ 5L, 4L, 9L, 3L, 6L, 5L, 2L, 7L, 5L, 6L, 9L, 8L, 9L, 5L, 2L, 7L, 5L, 4L, 9L,\
    \ 3L, 6L, 5L, 2L, 7L, 5L, 6L, 9L, 8L, 9L, 5L, 2L, 7L, 5L, 4L, 9L, 3L, 6L, 5L,\
    \ 2L, 7L, 5L, 6L, 9L, 8L, 9L, 5L, 2L, 7L, 5L, 4L, 9L, 3L, 6L, 5L, 2L, 7L, 5L,\
    \ 6L, 9L, 8L, 9L, 5L, 2L, 7L, 5L, 4L, 9L, 3L, 6L, 5L, 2L, 7L, 5L, 6L, 9L, 8L,\
    \ 9L, 5L\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzqybgr9c.d(24): Error: found `..` when expecting `;` following
    `return` statement

    /tmp/tmpzqybgr9c.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzqybgr9c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[n + 1];\n \
    \   if (n == 0) \n    {\n        return res;\n    }\n    res[0] = 1;\n    res[1]\
    \ = 3;\n    if (n == 1) \n    {\n        return res;\n    }\n    res[2] = 2;\n\
    \    for (int i = 3; i <= n; i++) \n    {\n        if (i % 2 == 0) \n        {\n\
    \            res[i] = 1 + i / 2;\n        }\n        else \n        {\n      \
    \      res[i] = res[i - 1] + res[i - 2] + res[i + 1];\n        }\n    }\n    return\
    \ res;\n}\nlong[] tri(long n) \n{\n    return n == 0 ? \n        new long[0] :\
    \ \n        n == 1 ? \n            new long[] {1, 3} : \n            n == 2 ?\
    \ \n                new long[] {1, 3, 2} : \n                n == 3 ? \n     \
    \               new long[] {1, 3, 2, 8} : \n                    n == 4 ? \n  \
    \                      new long[] {1, 3, 2, 8, 11} : \n                      \
    \  n == 5 ? \n                            new long[] {1, 3, 2, 8, 11, 14} : \n\
    \                            n == 6 ? \n                                new long[]\
    \ {1, 3, 2, 8, 11, 14, 18} : \n                                n == 7 ? \n   \
    \                                 new long[] {1, 3, 2, 8, 11, 14, 18, 26} : \n\
    \                                    n == 8 ? \n                             \
    \           new long[] {1, 3, 2, 8, 11, 14, 18, 26, 35} : \n                 \
    \                       n == 9 ? \n                                          \
    \  new long[] {1, 3, 2, 8, 11, 14, 18, 26, 35, 48} : \n                      \
    \                      n == 10 ? \n                                          \
    \      new long[] {1, 3, 2, 8, 11, 14, 18, 26, 35, 48, 64} : \n              \
    \                                  n == 11 ? \n                              \
    \  \nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpluhnw3rw.d(54): Error: found `{` when expecting `:`

    /tmp/tmpluhnw3rw.d(54): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmpluhnw3rw.d(54): Error: found `:` instead of statement

    /tmp/tmpluhnw3rw.d(56): Error: declaration expected, not `:`

    /tmp/tmpluhnw3rw.d(79): Error: declaration expected, not `assert`

    /tmp/tmpluhnw3rw.d(80): Error: declaration expected, not `assert`

    /tmp/tmpluhnw3rw.d(81): Error: declaration expected, not `assert`

    /tmp/tmpluhnw3rw.d(82): Error: declaration expected, not `assert`

    /tmp/tmpluhnw3rw.d(83): Error: declaration expected, not `assert`

    /tmp/tmpluhnw3rw.d(84): Error: declaration expected, not `assert`

    /tmp/tmpluhnw3rw.d(85): Error: declaration expected, not `assert`

    /tmp/tmpluhnw3rw.d(86): Error: declaration expected, not `assert`

    /tmp/tmpluhnw3rw.d(87): Error: declaration expected, not `assert`

    /tmp/tmpluhnw3rw.d(88): Error: declaration expected, not `assert`

    /tmp/tmpluhnw3rw.d(89): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tribonacci = new long[(int)\
    \ n + 1];\n    tribonacci[0] = 1;\n    tribonacci[1] = 3;\n    for (int i = 2;\
    \ i < tribonacci.length; i++) \n    {\n        tribonacci[i] = (tribonacci[i -\
    \ 1] + tribonacci[i - 2] + tribonacci[i - 3]) / 2;\n    }\n    return tribonacci;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvi24ewbp.d(24): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvi24ewbp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[n + 1];\n \
    \   arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    for (int i = 3; i < n +\
    \ 1; i++)\n    {\n        arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n   \
    \ }\n    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcc6pk9oj.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42883d]

    ??:? void tmpcc6pk9oj.__unittest_L34_C1() [0x427fe9]

    ??:? void tmpcc6pk9oj.__modtest() [0x4285bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b78a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a15]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ec4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309a1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b761]

    ??:? runModuleUnitTests [0x42c6cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d00]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret;\n    if (n <= 1)\n  \
    \  {\n        return [1L, 3L];\n    }\n    ret = [1L, 3L];\n    for (long i =\
    \ 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            ret\
    \ ~= 1 + i / 2;\n        }\n        else\n        {\n            ret ~= ret[$\
    \ - 3] + ret[$ - 2] + ret[$ - 1];\n        }\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpumpsv2ju.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x42889d]

    ??:? void tmpumpsv2ju.__unittest_L43_C1() [0x42804d]

    ??:? void tmpumpsv2ju.__modtest() [0x428620]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d2e7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c17a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430bcd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43107c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430b59]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c151]

    ??:? runModuleUnitTests [0x42d0bd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d60]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n <= 0) \n    {\n        return\
    \ [1L];\n    }\n    // Deque!\n    auto f = array(1L, 3L, 2L);\n    foreach (i;\
    \ 1 .. n) \n    {\n        f[0] = f[1];\n        f[1] = f[2];\n        f[2] =\
    \ f[0] + f[1] + f[2];\n    }\n    return f;\n}\n/*\n    \"World's Greatest\" is\
    \ a team of superheroes and it's one of the most popular teams \n    in the world.\
    \ They have a great press office and they are always sending out press \n    releases,\
    \ congratulating their members on various achievements. The press office is \n\
    \    also in charge of updating the leaderboard, which tracks the members' personal\
    \ records.\n    The team has decided that they want to track their members' records\
    \ in three \n    categories: strength, speed and endurance. A member's record\
    \ in each category is \n    represented by the corresponding positive integer.\
    \ Your task is to help the press \n    office by writing a function, which will\
    \ update the leaderboard, given the information \n    about the new record. The\
    \ leaderboard has to be represented as a sorted list of all \n    records in descending\
    \ order. If there are several members with the same record, keep \n    them in\
    \ the order, in which they were originally.\n    Example:\n    >>> update_leaderboard([[1,\
    \ 2, 3], [2, 3, 1], [1, 1, 2]], [3, 1, 2])\n    [[3, 1, 2], [2, 3, 1], [1, 1,\
    \ 2]]\n*/\nlong[][] update_leaderboard(long[][] leaderboard, long[] new_record)\
    \ \n{\n    // insert into leaderboard the new_record\n    // sort leaderboard\n\
    \    leaderboard ~= new_record;\n    leaderboard.sort!((a, b) => \n    {\n   \
    \     foreach (i; 0 .. a.length) \n        {\n            if (a[i] > b[i]) \n\
    \            {\n                return 1;\n            }\n            else if\
    \ (a[i] < b[i])\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj1cqz3m6.d(68): Error: found `unittest` instead of statement

    /tmp/tmpj1cqz3m6.d(83): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpj1cqz3m6.d(83): Error: found `End of File` when expecting `)` following
    template argument list

    /tmp/tmpj1cqz3m6.d(83): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpj1cqz3m6.d(83): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj1cqz3m6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto res = new long[].init;\n   \
    \ if (n < 0)\n        return res;\n    res.length = n + 1;\n    foreach (i, e;\
    \ res)\n    {\n        if (i == 0)\n            e = 1;\n        else if (i ==\
    \ 1)\n            e = 3;\n        else if (i == 2)\n            e = 2;\n     \
    \   else if (i % 2 == 0)\n            e = 1 + i / 2;\n        else\n         \
    \   e = res[i - 1] + res[i - 2] + res[i + 1];\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzyujya9g.d(24): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzyujya9g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  long[] r = new long[n+1];\n  for(int\
    \ i = 0; i <= n; i++)\n    r[i] = i == 0 ? 1 : i == 1 ? 3 : i == 2 ? 2 : r[i-1]\
    \ + r[i-2] + r[i-3];\n  return r;\n}\n \n \nlong[] tri(long n) \n{\n  long[] r\
    \ = new long[n+1];\n  r[0] = 1;\n  r[1] = 3;\n  r[2] = 2;\n  foreach(i; 1..n)\n\
    \    r[i] = r[i-1] + r[i-2] + r[i-3];\n  return r;\n}\n \n \nlong[] tri(long n)\
    \ \n{\n  long[] r = new long[n+1];\n  r[0] = 1;\n  r[1] = 3;\n  r[2] = 2;\n  for(int\
    \ i = 3; i <= n; i++)\n    r[i] = r[i-1] + r[i-2] + r[i-3];\n  return r;\n}\n\
    \ \n \n \nlong[] tri(long n) \n{\n  long[] r = new long[n+1];\n  r[0] = 1;\n \
    \ r[1] = 3;\n  r[2] = 2;\n  while(r.length <= n)\n    r ~= r[$-1] + r[$-2] + r[$-3];\n\
    \  return r;\n}\n \n \nlong[] tri(long n) \n{\n  long[] r = new long[n+1];\n \
    \ while(r.length <= n)\n    r ~= (r.length - 1) % 2 ? r[$-1] + r[$-2] + r[$-3]\
    \ : 1 + (r.length - 1) / 2;\n  return r;\n}\n \n \nlong[] tri(long n) \n{\n  long[]\
    \ r = new long[n+1];\n  r[0]\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp563o403m.d(81): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp563o403m.d(96): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp563o403m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  return (n>=1 ?\n    n % 2 == 0\n  \
    \    ? [ n / 2 ] \n      : [ tri(n-1)[$-1] + tri(n-2)[$-1] + tri(n+1)[$-1] ] \n\
    \  : [])\n  .expand(n+1);\n}\n/*\nimport std.math : pow;\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphghhahmk.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphghhahmk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n<1?null:n>=20?[1L,3L,2L,8L,5L,6L,11L,18L,24L,40L,55L,83L,118L,171L,238L,339L,474L,661L,924L,1285L,1819L,2557L,3588L,5023L,7072L,9922L,13943L,19504L,27411L,38502L,54034L,75681L,106106L,148767L,207842L,291583L,408873L,573827L,804202L,1124523L,1570753L,2199240L,3081043L,4325606L,6058936L,8530699L,11987667L,16769817L,23426614L,32853331L,46159627L,64854545L,91341536L,128044007L,179377542L,251833263L,352611357L,495976667L,696812901L,977296820L,1368141327L,1926490174L,2712090375L,3815780664L,5352063979L,7516864713L,10526509645L,14848679322L,20832036607L,29265686928L,41182427377L,57959989735L,81451328625L,114577464564L,160624058495L,225512797096L,317450842713L,445799195681L,624596724673L,876838657572L,1229354858656L,1722948266897L,2418229635680L,3397422262383L,4780139571362L,6702107597180L,9394486667395L,13178591742676L,18425475039403L,25859049916611L,36293556780293L,5078362620\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppemnlmv0.d(25): Error: found `unittest` when expecting `,`

    /tmp/tmppemnlmv0.d(40): Error: found `void` when expecting `,`

    /tmp/tmppemnlmv0.d(40): Error: found `{` when expecting `,`

    /tmp/tmppemnlmv0.d(40): Error: expression expected, not `}`

    /tmp/tmppemnlmv0.d(40): Error: found `End of File` when expecting `,`

    /tmp/tmppemnlmv0.d(24): Error: found `End of File` when expecting `]`

    /tmp/tmppemnlmv0.d(40): Error: found `End of File` when expecting `:`

    /tmp/tmppemnlmv0.d(40): Error: expression expected, not `End of File`

    /tmp/tmppemnlmv0.d(40): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmppemnlmv0.d(40): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppemnlmv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n < 0) return null;\n    if (n\
    \ == 0) return new long[]{1};\n    if (n == 1) return new long[]{1, 3};\n    if\
    \ (n == 2) return new long[]{1, 3, 2};\n    long[] res = new long[n + 1];\n  \
    \  res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for (int i = 3; i <= n;\
    \ i++)\n    {\n        if (i % 2 == 0) res[i] = 1 + i / 2;\n        else res[i]\
    \ = res[i - 1] + res[i - 2] + res[i + 1];\n    }\n    return res;\n}\nlong[] tri2(long\
    \ n) \n{\n    if (n < 0) return null;\n    if (n == 0) return new long[]{1};\n\
    \    if (n == 1) return new long[]{1, 3};\n    if (n == 2) return new long[]{1,\
    \ 3, 2};\n    long[] res = new long[n + 1];\n    res[0] = 1;\n    res[1] = 3;\n\
    \    res[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 ==\
    \ 0) res[i] = 1 + i / 2;\n        else res[i] = res[i - 1] + res[i - 2] + res[i\
    \ - 3];\n    }\n    return res;\n}\nlong[] tri3(long n) \n{\n    if (n < 0) return\
    \ null;\n    if (n == 0) return new long[]{1};\n    if (n == 1) return new long[]{1,\
    \ 3};\n    if (n == 2) return new long[]{1, 3, 2};\n    long[] res = new long[n\
    \ + 1];\n    res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    long s, t, u;\n\
    \    for (int i = 3; i <= n; i++)\n   \nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0biq8_mn.d(25): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp0biq8_mn.d(25): Error: found `}` when expecting `;` following statement

    /tmp/tmp0biq8_mn.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp0biq8_mn.d(26): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp0biq8_mn.d(26): Error: found `}` when expecting `;` following statement

    /tmp/tmp0biq8_mn.d(26): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp0biq8_mn.d(27): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp0biq8_mn.d(27): Error: found `}` when expecting `;` following statement

    /tmp/tmp0biq8_mn.d(27): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp0biq8_mn.d(42): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp0biq8_mn.d(42): Error: found `}` when expecting `;` following statement

    /tmp/tmp0biq8_mn.d(42): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp0biq8_mn.d(43): Error: f'
  stdout: ''
  timestamp: 1660161386
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return [];\n}\n/*\nIn mathematics,\
    \ a semiprime number is an integer which can be expressed as the product of two\
    \ prime numbers. \nA semiprime number is the product of two (not necessarily distinct)\
    \ prime numbers. \nFor example 15 = 3 * 5 is a semiprime number but 9 = 3 * 3\
    \ is not .\nGiven an array of integers.\nreturn how many of those integers are\
    \ semiprimes.\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptvv64hb1.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptvv64hb1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660161386
