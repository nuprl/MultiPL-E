language: d
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long prev = 0, a = 1, b = 1, c =\
    \ 1;\n    while (n >= 3)\n    {\n        prev = a;\n        a = b;\n        b\
    \ = c;\n        c = prev + a + b;\n        n--;\n    }\n    if (n == 2)\n    \
    \    return new long[] { 1, a, b, c };\n    if (n == 1)\n        return new long[]\
    \ { 1, a, b };\n    return new long[] { 1, a };\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5g47g99y.d(34): Error: found `{` when expecting `;` following
    `return` statement\n/tmp/tmp5g47g99y.d(34): Error: found `}` when expecting `;`
    following statement\n/tmp/tmp5g47g99y.d(34): Deprecation: use `{ }` for an empty
    statement, not `;`\n/tmp/tmp5g47g99y.d(36): Error: found `{` when expecting `;`
    following `return` statement\n/tmp/tmp5g47g99y.d(36): Error: found `}` when expecting
    `;` following statement\n/tmp/tmp5g47g99y.d(36): Deprecation: use `{ }` for an
    empty statement, not `;`\n/tmp/tmp5g47g99y.d(37): Error: found `{` when expecting
    `;` following `return` statement\n/tmp/tmp5g47g99y.d(37): Error: found `}` when
    expecting `;` following statement\n/tmp/tmp5g47g99y.d(37): Deprecation: use `{
    }` for an empty statement, not `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp5g47g99y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n <= 2)\n        return repeat(1L,\
    \ 3);\n    auto t = long[0];\n    t ~= 1;\n    t ~= 3;\n    t ~= 2;\n    foreach\
    \ (ind; 3..n)\n    {\n        if (ind % 2 == 0)\n            t ~= 1 + ind / 2;\n\
    \        else\n            t ~= t[$ - 3] + t[$ - 2] + t[$ - 1];\n    }\n    return\
    \ t;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) ==\
    \ [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n   \
    \ assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpimnv0n59.d(26): Error: found `[` when expecting `.` following
    long\n/tmp/tmpimnv0n59.d(26): Error: found `0` when expecting identifier following
    `long`.\n/tmp/tmpimnv0n59.d(26): Error: semicolon expected following auto declaration,
    not `]`\n/tmp/tmpimnv0n59.d(26): Error: found `]` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpimnv0n59.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return [1L, 3L, 2L, 8L];\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpn0yt96c2.d(31): unittest failure\n----------------\n??:?
    _d_unittestp [0x428715]\n??:? void tmpn0yt96c2.__unittest_L26_C1() [0x427f4a]\n??:?
    void tmpn0yt96c2.__modtest() [0x428498]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b592]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430725]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4306b1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b569]\n??:? runModuleUnitTests [0x42c4d5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b64]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428aeb]\n??:? _d_run_main [0x428a56]\n??:? main [0x4284ab]\n??:?
    __libc_start_main [0x84b32554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tribonacci = new long[(int)n\
    \ + 1];\n    if (n >= 1)\n        tribonacci[1] = 3;\n    if (n >= 2)\n      \
    \  tribonacci[2] = 2;\n    if (n >= 3)\n        tribonacci[3] = 8;\n    for (int\
    \ i = 4; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            tribonacci[i]\
    \ = 1 + i / 2;\n        else\n            tribonacci[i] = tribonacci[i - 1] +\
    \ tribonacci[i - 2] + tribonacci[i + 1];\n    }\n    return tribonacci;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnrvgibme.d(24): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnrvgibme.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto retVal = new long[](n+1);\n\
    \    retVal[0] = 1;\n    retVal[1] = 3;\n    retVal[2] = 2;\n    for(long i =\
    \ 3; i <= n; i++)\n    {\n        retVal[i] = i % 2 == 0 ? 1 + i / 2 : retVal[i-1]\
    \ + retVal[i-2] + retVal[i+1];\n    }\n    return retVal;\n}\n// best practice\n\
    long[] tri(long n)\n{\n    auto t = [3,1,2];\n    auto next = [](auto ref t) {\n\
    \        auto x = t[0] + t[1] + t[2];\n        t[0] = t[1];\n        t[1] = t[2];\n\
    \        t[2] = x;\n    };\n    return iota(n+1).map!(i => i < 3 ? t[i] : (next(t),\
    \ t[2])).array;\n}\n// best practice\nlong[] tri(long n)\n{\n    auto t = [3,1,2];\n\
    \    auto next = [](auto ref t) {\n        auto x = t[0] + t[1] + t[2];\n    \
    \    t[0] = t[1];\n        t[1] = t[2];\n        t[2] = x;\n    };\n    return\
    \ iota(n+1).map!(i => i < 3 ? t[i] : (next(t), t[2])).array;\n}\n// best practice\n\
    long[] tri(long n)\n{\n    auto t = [3,1,2];\n    auto next = [](auto ref t) {\n\
    \        auto x = t[0] + t[1] + t[2];\n        t[0] = t[1];\n        t[1] = t[2];\n\
    \        t[2] = x;\n    };\n    return iota(n+1).map!(i => i < 3 ? t[i] : (next(t),\
    \ t[2])).array;\n}\n// from user r.s\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsi2w4dja.d(38): Error: expression expected, not `auto`\n/tmp/tmpsi2w4dja.d(38):
    Error: found `ref` when expecting `,`\n/tmp/tmpsi2w4dja.d(38): Error: semicolon
    expected following auto declaration, not `{`\n/tmp/tmpsi2w4dja.d(43): Deprecation:
    use `{ }` for an empty statement, not `;`\n/tmp/tmpsi2w4dja.d(50): Error: expression
    expected, not `auto`\n/tmp/tmpsi2w4dja.d(50): Error: found `ref` when expecting
    `,`\n/tmp/tmpsi2w4dja.d(50): Error: semicolon expected following auto declaration,
    not `{`\n/tmp/tmpsi2w4dja.d(55): Deprecation: use `{ }` for an empty statement,
    not `;`\n/tmp/tmpsi2w4dja.d(62): Error: expression expected, not `auto`\n/tmp/tmpsi2w4dja.d(62):
    Error: found `ref` when expecting `,`\n/tmp/tmpsi2w4dja.d(62): Error: semicolon
    expected following auto declaration, not `{`\n/tmp/tmpsi2w4dja.d(67): Deprecation:
    use `{ }` for an empty statement, not `;`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsi2w4dja.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 1L ? new long[] {} : n\
    \ < 2L ? new long[] {3L} : n < 3L ? new long[] {1L, 3L} : n < 4L ? new long[]\
    \ {1L, 3L, 2L} : new long[] {1L, 3L, 2L, 8L};\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjs4vztln.d(24): Error: found `{` when expecting `:`\n/tmp/tmpjs4vztln.d(24):
    Error: expression expected, not `}`\n/tmp/tmpjs4vztln.d(24): Error: found `:`
    when expecting `;` following `return` statement\n/tmp/tmpjs4vztln.d(24): Error:
    found `{` when expecting `:`\n/tmp/tmpjs4vztln.d(24): Error: found `}` when expecting
    `;` following statement\n/tmp/tmpjs4vztln.d(24): Error: found `:` instead of statement\n/tmp/tmpjs4vztln.d(24):
    Error: declaration expected, not `:`\n/tmp/tmpjs4vztln.d(25): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjs4vztln.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n\t/*\n\t3\n\t2\n\t1\n\t*/\n\tauto a =\
    \ new ulong[n + 1];\n\ta[0] = 0;\n\ta[1] = 3;\n\tif (n == 1) return a;\n\ta[2]\
    \ = 2;\n\tif (n == 2) return a;\n\ta[3] = 8;\n\tif (n == 3) return a;\n\t//n >\
    \ 3\n\tfor (int i = 4; i <= n; i++)\n\t{\n\t\tif (i % 2 == 0) a[i] = i / 2;\n\t\
    \telse a[i] = a[i - 1] + a[i - 2] + a[i + 1];\n\t}\n\treturn a;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpys5umgo2.d(32): Error: cannot implicitly convert expression
    `a` of type `ulong[]` to `long[]`\n/tmp/tmpys5umgo2.d(34): Error: cannot implicitly
    convert expression `a` of type `ulong[]` to `long[]`\n/tmp/tmpys5umgo2.d(36):
    Error: cannot implicitly convert expression `a` of type `ulong[]` to `long[]`\n/tmp/tmpys5umgo2.d(43):
    Error: cannot implicitly convert expression `a` of type `ulong[]` to `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpys5umgo2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto result = new long[n+1];\n  \
    \  foreach(i; 0..n+1)\n    {\n        if(i == 0)\n        {\n            result[i]\
    \ = 1;\n        }\n        else if(i == 1)\n        {\n            result[i] =\
    \ 3;\n        }\n        else if(i == 2)\n        {\n            result[i] = 2;\n\
    \        }\n        else if(i % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + result[i-2] + result[i-3];\n        }\n        else\n        {\n         \
    \   result[i] = 1 + i / 2;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpoaih9jfv.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x4288e5]\n??:? void tmpoaih9jfv.__unittest_L50_C1() [0x428091]\n??:?
    void tmpoaih9jfv.__modtest() [0x428664]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c99f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b832]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430abd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f6c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430a49]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b809]\n??:? runModuleUnitTests [0x42c775]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428da8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428d2f]\n??:? _d_run_main [0x428c9a]\n??:? main [0x428677]\n??:?
    __libc_start_main [0x9abf5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] Result = new long[cast(int)n\
    \ + 1];\n    if (n == 0)\n    {\n        return Result;\n    }\n    else\n   \
    \ {\n        Result[0] = 1;\n        Result[1] = 3;\n        Result[2] = 2;\n\
    \        for (long i = 3; i <= n; i++)\n        {\n            if (i % 2 == 0)\n\
    \            {\n                Result[cast(int)i] = cast(long)(1 + i / 2);\n\
    \            }\n            else\n            {\n                Result[cast(int)i]\
    \ = cast(long)(Result[cast(int)i - 1] + Result[cast(int)i - 2] + Result[cast(int)i\
    \ + 1]);\n            }\n        }\n        return Result;\n    }\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpa5b6itut.d(42): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42895e]\n??:? long[] tmpa5b6itut.tri(long) [0x427fa1]\n??:?
    void tmpa5b6itut.__unittest_L48_C1() [0x427fdf]\n??:? void tmpa5b6itut.__modtest()
    [0x42862c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c967]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a85]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f34]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430a11]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7d1]\n??:? runModuleUnitTests [0x42c73d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d70]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cf7]\n??:? _d_run_main [0x428c62]\n??:? main [0x42863f]\n??:?
    __libc_start_main [0x7fdf0554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n > 0L ? [ 1L ] ~ tri(n -\
    \ 1L).retro : [];\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6u812g7r.d(24): Error: no property `retro` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6u812g7r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[(int)n+1];\n\
    \    arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    if(n>2)\n    {\n     \
    \ for(int i = 3; i<=n;i++)\n      {\n          if(i%2==0)\n          {\n     \
    \         arr[i] = i/2;\n          }\n          else\n          {\n          \
    \    arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n          }\n      }  \n    }\n\
    \    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpefhvryw_.d(24): Error: C style cast illegal, use `cast(int)n`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefhvryw_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[n+1];\n   \
    \ if(n == 0)\n    {\n        return arr;\n    }\n    arr[0] = 1;\n    if(n ==\
    \ 1)\n    {\n        return arr;\n    }\n    arr[1] = 3;\n    if(n == 2)\n   \
    \ {\n        return arr;\n    }\n    arr[2] = 2;\n    for(long i = 3; i <= n;\
    \ i++)\n    {\n        if(i % 2 == 0)\n        {\n            arr[i] = 1 + i /\
    \ 2;\n        }\n        else\n        {\n            arr[i] = arr[i-1] + arr[i-2]\
    \ + arr[i+1];\n        }\n    }\n    return arr;\n}\nlong[] tri(long n) \n{\n\
    \    long[] arr = new long[n+1];\n    if(n == 0)\n    {\n        return arr;\n\
    \    }\n    arr[0] = 1;\n    if(n == 1)\n    {\n        return arr;\n    }\n \
    \   arr[1] = 3;\n    if(n == 2)\n    {\n        return arr;\n    }\n    arr[2]\
    \ = 2;\n    for(long i = 3; i <= n; i++)\n    {\n        if(i % 2 == 0)\n    \
    \    {\n            arr[i] = 1 + i / 2;\n        }\n        else\n        {\n\
    \            arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n        }\n    }\n    return\
    \ arr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpndi4p3ky.d(88): Error: `tmpndi4p3ky.tri` called with argument
    types `(long)` matches both:\n/tmp/tmpndi4p3ky.d(22):     `tmpndi4p3ky.tri(long
    n)`\nand:\n/tmp/tmpndi4p3ky.d(53):     `tmpndi4p3ky.tri(long n)`\n/tmp/tmpndi4p3ky.d(89):
    Error: `tmpndi4p3ky.tri` called with argument types `(long)` matches both:\n/tmp/tmpndi4p3ky.d(22):     `tmpndi4p3ky.tri(long
    n)`\nand:\n/tmp/tmpndi4p3ky.d(53):     `tmpndi4p3ky.tri(long n)`\n/tmp/tmpndi4p3ky.d(90):
    Error: `tmpndi4p3ky.tri` called with argument types `(long)` matches both:\n/tmp/tmpndi4p3ky.d(22):     `tmpndi4p3ky.tri(long
    n)`\nand:\n/tmp/tmpndi4p3ky.d(53):     `tmpndi4p3ky.tri(long n)`\n/tmp/tmpndi4p3ky.d(91):
    Error: `tmpndi4p3ky.tri` called with argument types `(long)` matches both:\n/tmp/tmpndi4p3ky.d(22):     `tmpndi4p3ky.tri(long
    n)`\nand:\n/tmp/tmpndi4p3ky.d(53):     `tmpndi4p3ky.tri(long n)`\n/tmp/tmpndi4p3ky.d(92):
    Error: `tmpndi4p3ky.tri` called with argument types `(long)` matches both:\n/tmp/tmpndi4p3ky.d(22):     `tmpndi4p3ky.tri(long
    n)`\nand:\n/tmp/tmpndi4p3ky.d(53):     `tmpndi4p3ky.tri(long n)`\n/tmp/tmpndi4p3ky.d(93):
    Error: `tmpndi4p3ky.tri` called with argument types `(long)` matches both:\n/tmp/tmpndi4p3ky.d(22):     `tmpndi4p3ky.tri(long
    n)`\nand:\n/tmp/tmpndi4p3ky.d(53):     `tmpndi4p3ky.tri(long n)`\n/tmp/tmpndi4p3ky.d(94):
    Error: `tmpndi4p3ky.tri` called with argument types `(long)` matches both:\n/tmp/tmpndi4p3ky.d(22):     `tmpndi4p3ky.tri(long
    n)`\nand:\n/tmp/tmpndi4p3ky.d(53):     `tmpndi4p3ky.tri(long n)`\n/tmp/tmpndi4p3ky.d(95):
    Error: `tmpndi4p3ky.tri` called with argument types `(long)` matches both:\n/tmp/tmpndi4p3ky.d(22):     `tmpndi4p3ky.tri(long
    n)`\nand:\n/tmp/tmpndi4p3ky.d(53):     `tmpndi4p3ky.tri(long n)`\n/tmp/tmpndi4p3ky.d(96):
    Error: `tmpndi4p3ky.tri` called with argument types `(long)` matches both:\n/tmp/tmpndi4p3ky.d(22):     `tmpndi4p3ky.tri(long
    n)`\nand:\n/tmp/tmpndi4p3ky.d(53):     `tmpndi4p3ky.tri(long n)`\n/tmp/tmpndi4p3ky.d(97):
    Error: `tmpndi4p3ky.tri` called with argument types `(long)` matches both:\n/t'
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    //Non-recursive\n    auto r = new\
    \ long[n+1];\n    r[0] = 1;\n    r[1] = 3;\n    r[2] = 2;\n    for(size_t i =\
    \ 3; i <= n; i++)\n    {\n        if(i % 2) //i is odd\n            r[i] = r[i-1]\
    \ + r[i-2] + r[i+1];\n        else //i is even\n            r[i] = 1 + i / 2;\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpdeu3c9zl.d(32): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428926]\n??:? long[] tmpdeu3c9zl.tri(long) [0x427f37]\n??:?
    void tmpdeu3c9zl.__unittest_L38_C1() [0x427fa7]\n??:? void tmpdeu3c9zl.__modtest()
    [0x4285f4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c92f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a4d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430efc]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309d9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b799]\n??:? runModuleUnitTests [0x42c705]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d38]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cbf]\n??:? _d_run_main [0x428c2a]\n??:? main [0x428607]\n??:?
    __libc_start_main [0xc91a9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] array;\n    int i;\n    int\
    \ j;\n    int k;\n    int l;\n    k = 1;\n    l = 1;\n    j = 1;\n    if (n ==\
    \ 1)\n    {\n        array = new long[1];\n        array[0] = 3;\n        return\
    \ array;\n    }\n    else if (n == 2)\n    {\n        array = new long[2];\n \
    \       array[0] = 1;\n        array[1] = 3;\n        return array;\n    }\n \
    \   else if (n == 3)\n    {\n        array = new long[3];\n        array[0] =\
    \ 1;\n        array[1] = 3;\n        array[2] = 2;\n        return array;\n  \
    \  }\n    else\n    {\n        array = new long[n + 1];\n        array[0] = 1;\n\
    \        array[1] = 3;\n        array[2] = 2;\n        for (i = 3; i < n + 1;\
    \ i++)\n        {\n            if (i % 2 == 0)\n            {\n              \
    \  array[i] = (1 + (i / 2));\n            }\n            else\n            {\n\
    \                k = array[i - 1];\n                l = array[i - 2];\n      \
    \          j = array[i - 3];\n                array[i] = k + l + j;\n        \
    \    }\n        }\n        return array;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbyq98k7i.d(67): Error: cannot implicitly convert expression
    `array[cast(ulong)(i - 1)]` of type `long` to `int`\n/tmp/tmpbyq98k7i.d(68): Error:
    cannot implicitly convert expression `array[cast(ulong)(i - 2)]` of type `long`
    to `int`\n/tmp/tmpbyq98k7i.d(69): Error: cannot implicitly convert expression
    `array[cast(ulong)(i - 3)]` of type `long` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpbyq98k7i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 2 ?\n      new long[]{1L,\
    \ 3L, 2L, 8L} :\n      new long[]{1L, 3L, 2L, 8L}.put(3, tri(n - 1).back + tri(n\
    \ - 2).back + tri(n + 1).back);\n}\nunittest\n{\n    alias candidate = tri;\n\n\
    \    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa2n94zol.d(25): Error: found `{` when expecting `:`\n/tmp/tmpa2n94zol.d(25):
    Error: found `}` when expecting `;` following `return` statement\n/tmp/tmpa2n94zol.d(25):
    Error: found `:` instead of statement\n/tmp/tmpa2n94zol.d(26): Error: unexpected
    `(` in declarator\n/tmp/tmpa2n94zol.d(26): Error: basic type expected, not `3`\n/tmp/tmpa2n94zol.d(26):
    Error: found `3` when expecting `)`\n/tmp/tmpa2n94zol.d(26): Error: no identifier
    for declarator `.put(_error_)`\n/tmp/tmpa2n94zol.d(26): Error: semicolon expected
    following function declaration\n/tmp/tmpa2n94zol.d(26): Error: declaration expected,
    not `,`\n/tmp/tmpa2n94zol.d(27): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpa2n94zol.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto len = n + 1;\n    auto a = new\
    \ long[len];\n    a[0] = 1;\n    a[1] = 3;\n    a[2] = 2;\n    foreach(i; 3..len)\n\
    \    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp81rlwmjj.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x428845]\n??:? void tmp81rlwmjj.__unittest_L35_C1() [0x427ff1]\n??:?
    void tmp81rlwmjj.__modtest() [0x4285c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b792]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a1d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430ecc]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4309a9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b769]\n??:? runModuleUnitTests [0x42c6d5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d08]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428c8f]\n??:? _d_run_main [0x428bfa]\n??:? main [0x4285d7]\n??:?
    __libc_start_main [0x4d851554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto fib = to!(long[])([]);\n   \
    \ fib ~= 0;\n    fib ~= 1;\n    fib ~= 1;\n    for(int i = 3; i <= n; i++)\n \
    \   {\n        if(i % 2 == 0)\n        {\n            fib ~= 1 + i / 2;\n    \
    \    }\n        else\n        {\n            fib ~= fib[i - 1] + fib[i - 2] +\
    \ fib[i + 1];\n        }\n    }\n    return fib;\n}\n/*\n    These examples have\
    \ been converted from Python to D. The original examples \n    can be found on\
    \ Codewars.\n*/\nunittest\n{\n    assert(tri(3L) == [1L, 3L, 2L, 8L]);\n    assert(tri(4L)\
    \ == [1L, 3L, 2L, 8L, 13L]);\n    assert(tri(0L) == [1L]);\n    assert(tri(1L)\
    \ == [1L, 3L]);\n    assert(tri(2L) == [1L, 3L, 2L]);\n    assert(tri(11L) ==\
    \ [1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L]);\n    assert(tri(15L)\
    \ == [1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L, 610L, 987L, 1597L,\
    \ 2584L]);\n    assert(tri(20L) == [1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L,\
    \ 233L, 377L, 610L, 987L, 1597L, 2584L, 4181L, 6765L, 10946L, 17711L, 28657L]);\n\
    \    assert(tri(30L) == [1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L,\
    \ 377L, 610L, 987L, 1597L, 2584\nunittest\n{\n    alias candidate = tri;\n\n \
    \   assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3a3rjo88.d(56): Error: found `unittest` when expecting `,`\n/tmp/tmp3a3rjo88.d(71):
    Error: found `void` when expecting `,`\n/tmp/tmp3a3rjo88.d(71): Error: found `{`
    when expecting `,`\n/tmp/tmp3a3rjo88.d(71): Error: expression expected, not `}`\n/tmp/tmp3a3rjo88.d(71):
    Error: found `End of File` when expecting `,`\n/tmp/tmp3a3rjo88.d(55): Error:
    found `End of File` when expecting `]`\n/tmp/tmp3a3rjo88.d(71): Error: found `End
    of File` when expecting `)`\n/tmp/tmp3a3rjo88.d(71): Error: found `End of File`
    when expecting `;` following statement\n/tmp/tmp3a3rjo88.d(71): Error: found `End
    of File` when expecting `}` following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp3a3rjo88.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int i;\n    long[] myarr;\n    myarr\
    \ = new long[n+1];\n    myarr[0] = 1;\n    myarr[1] = 3;\n    myarr[2] = 2;\n\
    \    for(i = 3; i < n + 1; i++)\n    {\n        if( i % 2 == 0)\n        {\n \
    \           myarr[i] = 1 + i / 2;\n        }\n        else\n        {\n      \
    \      myarr[i] = myarr[i-1] + myarr[i-2] + myarr[i-3];\n        }\n    }\n  \
    \  return myarr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmprg5s7fp7.d(47): unittest failure\n----------------\n??:?
    _d_unittestp [0x4288a5]\n??:? void tmprg5s7fp7.__unittest_L43_C1() [0x428055]\n??:?
    void tmprg5s7fp7.__modtest() [0x428628]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c95f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a7d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430f2c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430a09]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b7c9]\n??:? runModuleUnitTests [0x42c735]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d68]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428cef]\n??:? _d_run_main [0x428c5a]\n??:? main [0x42863b]\n??:?
    __libc_start_main [0xfa496554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] array;\n    if (n <= 1)\n\
    \    {\n        array = new long[3];\n        array[0] = 1;\n        array[1]\
    \ = 3;\n        array[2] = 2;\n    }\n    else\n    {\n        array = new long[n\
    \ + 1];\n        array[0] = 1;\n        array[1] = 3;\n        array[2] = 2;\n\
    \        for (long i = 3; i <= n; i++)\n        {\n            if (i % 2 == 0)\n\
    \            {\n                array[i] = (1 + i / 2);\n            }\n     \
    \       else\n            {\n                array[i] = (array[i - 1] + array[i\
    \ - 2] + array[i + 1]);\n            }\n        }\n    }\n    return array;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpljqrnciz.d(46): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x4289de]\n??:? long[] tmpljqrnciz.tri(long) [0x428024]\n??:?
    void tmpljqrnciz.__unittest_L52_C1() [0x428063]\n??:? void tmpljqrnciz.__modtest()
    [0x4286b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b87a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430b05]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430fb4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430a91]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b851]\n??:? runModuleUnitTests [0x42c7bd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428df0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428d77]\n??:? _d_run_main [0x428ce2]\n??:? main [0x4286c3]\n??:?
    __libc_start_main [0x59a0e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    import std.algorithm;\n    import\
    \ std.conv;\n    import std.range;\n    if (n == 0) return [1];\n    else if (n\
    \ == 1) return [1, 3];\n    else if (n == 2) return [1, 3, 2];\n    else\n   \
    \ {\n        long[] res = [1, 3, 2];\n        long first = 1, second = 3, third\
    \ = 2;\n        foreach (num; 3 .. n)\n        {\n            if (num % 2 == 0)\
    \ res ~= 1 + num / 2;\n            else\n            {\n                res ~=\
    \ first + second + third;\n                first = second;\n                second\
    \ = third;\n                third = res[$ - 1];\n            }\n        }\n  \
    \      return res;\n    }\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpifk7gpaf.d(52): unittest failure\n----------------\n??:?
    _d_unittestp [0x428915]\n??:? void tmpifk7gpaf.__unittest_L48_C1() [0x4280c1]\n??:?
    void tmpifk7gpaf.__modtest() [0x428694]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d35f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c45]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4310f4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430bd1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42c1c9]\n??:? runModuleUnitTests [0x42d135]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dd8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428d5f]\n??:? _d_run_main [0x428cca]\n??:? main [0x4286a7]\n??:?
    __libc_start_main [0xbc0fc554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  if (n == 0)\n    return new long[0];\n\
    \  if (n == 1)\n    return new long[] {1};\n  if (n == 2)\n    return new long[]\
    \ {1, 3};\n  long a = 1, b = 3, c = 2;\n  long[] res = new long[n + 1];\n  res[0]\
    \ = 1;\n  res[1] = 3;\n  res[2] = 2;\n  for (long i = 3; i <= n; i++)\n  {\n \
    \   res[i] = isEven(i) ? 1 + i / 2 : res[i - 1] + res[i - 2] + res[i + 1];\n \
    \ }\n  return res;\n}\n \nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkrjetx26.d(27): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmpkrjetx26.d(27): Error: found \''}\'' when
    expecting \'';\'' following statement\n/tmp/tmpkrjetx26.d(29): Error: found \''{\''
    when expecting \'';\'' following return statement\n/tmp/tmpkrjetx26.d(29): Error:
    found \''}\'' when expecting \'';\'' following statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpkrjetx26.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return [1L, 3L, 2L, 8L];\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpn0yt96c2.d(31): unittest failure\n----------------\n??:?
    _d_unittestp [0x428715]\n??:? void tmpn0yt96c2.__unittest_L26_C1() [0x427f4a]\n??:?
    void tmpn0yt96c2.__modtest() [0x428498]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b592]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430725]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4306b1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b569]\n??:? runModuleUnitTests [0x42c4d5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b64]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428aeb]\n??:? _d_run_main [0x428a56]\n??:? main [0x4284ab]\n??:?
    __libc_start_main [0x84b32554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n < 0)\n        return new long[0];\n\
    \    if (n == 0)\n        return new long[1];\n    if (n == 1)\n        return\
    \ new long[2];\n    if (n == 2)\n        return new long[3];\n    if (n == 3)\n\
    \        return new long[4];\n    if (n == 4)\n        return new long[5];\n \
    \   if (n == 5)\n        return new long[6];\n    if (n == 6)\n        return\
    \ new long[7];\n    if (n == 7)\n        return new long[8];\n    if (n == 8)\n\
    \        return new long[9];\n    if (n == 9)\n        return new long[10];\n\
    \    if (n == 10)\n        return new long[11];\n    if (n == 11)\n        return\
    \ new long[12];\n    if (n == 12)\n        return new long[13];\n    if (n ==\
    \ 13)\n        return new long[14];\n    if (n == 14)\n        return new long[15];\n\
    \    if (n == 15)\n        return new long[16];\n    if (n == 16)\n        return\
    \ new long[17];\n    if (n == 17)\n        return new long[18];\n    if (n ==\
    \ 18)\n        return new long[19];\n    if (n == 19)\n        return new long[20];\n\
    \    if (n == 20)\n        return new long[21];\n    if (n == 21)\n        return\
    \ new long[22];\n    if (n == 22)\n        return new long[23];\n    if (n ==\
    \ 23)\n        return new long[24];\n    if (n == 24)\n        return new long[25];\n\
    \    if (n == 25)\n        return new long[26];\n    if (n == 26)\n        return\
    \ new long[27];\n    if (n == 27)\n        return new long[28];\n    if (n ==\
    \ 28)\n        return new long[29];\n    if (n == 29)\n        return new long[30];\n\
    \    if (n == 30)\n        return new long[\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnp7k__0n.d(88): Error: expression expected, not \''unittest\''\n/tmp/tmpnp7k__0n.d(89):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmpnp7k__0n.d(90): Error: found
    \''alias\'' when expecting \'';\'' following return statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnp7k__0n.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto res = new long[n + 1];\n   \
    \ if (n == 0)\n        return res;\n    res[0] = 1;\n    res[1] = 3;\n    for\
    \ (size_t i = 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            res[i]\
    \ = 1 + i / 2;\n        else\n            res[i] = res[i - 1] + res[i - 2] + res[i\
    \ + 1];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = tri;\n\n\
    \    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp004127ll.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n==0L ? new long[]() : \n\
    \        n < 3L ? new long[] {1L, 3L, 2L} : \n        n < 4L ? new long[] {1L,\
    \ 3L, 2L, 8L} : \n        n < 5L ? new long[] {1L, 3L, 2L, 8L, 13L} : \n     \
    \   n < 6L ? new long[] {1L, 3L, 2L, 8L, 13L, 21L} : \n        n < 7L ? new long[]\
    \ {1L, 3L, 2L, 8L, 13L, 21L, 34L} : \n        n < 8L ? new long[] {1L, 3L, 2L,\
    \ 8L, 13L, 21L, 34L, 55L} : \n        n < 9L ? new long[] {1L, 3L, 2L, 8L, 13L,\
    \ 21L, 34L, 55L, 89L} : \n        n < 10L ? new long[] {1L, 3L, 2L, 8L, 13L, 21L,\
    \ 34L, 55L, 89L, 144L} : \n        n < 11L ? new long[] {1L, 3L, 2L, 8L, 13L,\
    \ 21L, 34L, 55L, 89L, 144L, 233L} : \n        n < 12L ? new long[] {1L, 3L, 2L,\
    \ 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L} : \n        n < 13L ? new long[]\
    \ {1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L, 610L} : \n     \
    \   n < 14L ? new long[] {1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L,\
    \ 377L, 610L, 987L} : \n        n < 15L ? new long[] {1L, 3L, 2L, 8L, 13L, 21L,\
    \ 34L, 55\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf39hqlh8.d(25): Error: found \''{\'' when expecting \'':\''\n/tmp/tmpf39hqlh8.d(25):
    Error: found \''}\'' when expecting \'';\'' following return statement\n/tmp/tmpf39hqlh8.d(25):
    Error: found \'':\'' instead of statement\n/tmp/tmpf39hqlh8.d(26): Error: Declaration
    expected, not \'':\''\n/tmp/tmpf39hqlh8.d(42): Error: Declaration expected, not
    \''assert\''\n/tmp/tmpf39hqlh8.d(43): Error: Declaration expected, not \''assert\''\n/tmp/tmpf39hqlh8.d(44):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpf39hqlh8.d(45): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpf39hqlh8.d(46): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpf39hqlh8.d(47): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpf39hqlh8.d(48): Error: Declaration expected, not \''assert\''\n/tmp/tmpf39hqlh8.d(49):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpf39hqlh8.d(50): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpf39hqlh8.d(51): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpf39hqlh8.d(52): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf39hqlh8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    switch(n)\n    {\n        case 0:\n\
    \            return new long[1];\n        case 1:\n            return new long[2];\n\
    \        case 2:\n            return new long[3];\n        default:\n        \
    \    long[] arr = new long[n + 1];\n            arr[0] = 1;\n            arr[1]\
    \ = 3;\n            arr[2] = 2;\n            for(int i = 3; i < n + 1; i++)\n\
    \            {\n                if(i % 2 == 0)\n                {\n          \
    \          arr[i] = 1 + i / 2;\n                }\n                else\n    \
    \            {\n                    arr[i] = arr[i - 1] + arr[i - 2] + arr[i +\
    \ 1];\n                }\n            }\n            return arr;\n    }\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw027xyco.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    // Write your code here\n    long[]\
    \ tri = new long[n + 1];\n    tri[0] = 1;\n    tri[1] = 3;\n    tri[2] = 2;\n\
    \    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            tri[i] = 1 + i / 2;\n        }\n        else\n        {\n       \
    \     tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1];\n        }\n    }\n    return\
    \ tri;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqif6nw0j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tribonacciArray = new long[n\
    \ + 1];\n    int count = 0;\n    while(count < n + 1)\n    {\n        if(count\
    \ == 0)\n        {\n            tribonacciArray[count] = 1;\n        }\n     \
    \   else if(count == 1)\n        {\n            tribonacciArray[count] = 3;\n\
    \        }\n        else if(count == 2)\n        {\n            tribonacciArray[count]\
    \ = 2;\n        }\n        else if(count % 2 == 0)\n        {\n            tribonacciArray[count]\
    \ = 1 + (count / 2);\n        }\n        else\n        {\n            tribonacciArray[count]\
    \ = tribonacciArray[count - 1] + tribonacciArray[count - 2] + tribonacciArray[count\
    \ + 1];\n        }\n        count++;\n    }\n    return tribonacciArray;\n}\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp56qiw2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret = new long[n + 1];\n \
    \   ret[0] = 1;\n    ret[1] = 3;\n    ret[2] = 2;\n    if (n > 2)\n    {\n   \
    \     for (int i = 3; i <= n; i++)\n        {\n            if (i % 2 == 0)\n \
    \           {\n                ret[i] = 1 + i / 2;\n            }\n          \
    \  else\n            {\n                ret[i] = ret[i - 1] + ret[i - 2] + ret[i\
    \ + 1];\n            }\n        }\n    }\n    return ret;\n}\nunittest\n{\n  \
    \  alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpet794ao5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n < 2) \n    {\n        return\
    \ n == 0 ? new long[]() : new long[] { 1 };\n    }\n    long[] res = new long[n\
    \ + 1];\n    res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for (long i =\
    \ 3; i <= n; i++) \n    {\n        res[i] = res[i - 1] + res[i - 2] + (n & 1 ==\
    \ 1 ? res[i + 1] : i / 2);\n    }\n    return res;\n}\n/*\n    >>> tri(3L)\n \
    \   [1L, 3L, 2L, 8L]\n    >>> tri(4L)\n    [1L, 3L, 2L, 8L, 5L]\n    >>> tri(5L)\n\
    \    [1L, 3L, 2L, 8L, 5L, 13L]\n    >>> tri(6L)\n    [1L, 3L, 2L, 8L, 5L, 13L,\
    \ 21L]\n    >>> tri(7L)\n    [1L, 3L, 2L, 8L, 5L, 13L, 21L, 34L]\n    >>> tri(10L)\n\
    \    [1L, 3L, 2L, 8L, 5L, 13L, 21L, 34L, 55L, 89L, 144L]\n    >>> tri(20L)\n \
    \   [1L, 3L, 2L, 8L, 5L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L, 610L, 987L,\
    \ 1597L, 2584L, 4181L, 6765L, 10946L, 17711L]\n    >>> tri(100L)\n    [1L, 3L,\
    \ 2L, 8L, 5L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L, 610L, 987L, 1597L, 2584L,\
    \ 4181L, 6765L, 10946L, 17711L, 28657L, 46368L, 75025L, 121393L\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmq18xv11.d(26): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmpmq18xv11.d(26): Error: found \''}\'' when
    expecting \'';\'' following statement\n/tmp/tmpmq18xv11.d(34): Error: 1 == 1 must
    be parenthesized when next to operator &\n/tmp/tmpmq18xv11.d(38): Error: unterminated
    /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmq18xv11.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] r = new long[n + 1];\n   \
    \ r[0] = 1;\n    r[1] = 3;\n    r[2] = 2;\n    for (long i = 3; i <= n; i++) \n\
    \    {\n        if ((i % 2) == 0)\n            r[i] = 1 + (i / 2);\n        else\n\
    \            r[i] = r[i - 1] + r[i - 2] + r[i + 1];\n    }\n    return r;\n}\n\
    long[] tri1(long n) \n{\n    long[] tri = new long[n + 1];\n    tri[0] = 1;\n\
    \    tri[1] = 3;\n    tri[2] = 2;\n    foreach (i; 3..n + 1)\n        tri[i] =\
    \ i % 2 ? tri[i - 1] + tri[i - 2] + tri[i + 1] : 1 + i / 2;\n    return tri;\n\
    }\nlong[] tri2(long n) \n{\n    long[] out = new long[n + 1];\n    out[0] = 1;\n\
    \    out[1] = 3;\n    out[2] = 2;\n    foreach (i; 3..n + 1)\n        out[i] =\
    \ i % 2 ? out[i - 1] + out[i - 2] + out[i + 1] : 1 + i / 2;\n    return out;\n\
    }\nlong[] tri3(long n) \n{\n    long[] out = new long[n + 1];\n    out[0] = 1;\n\
    \    out[1] = 3;\n    out[2] = 2;\n    foreach (i; 3..n + 1)\n        out[i] =\
    \ i % 2 ? out[i - 1] + out[i - 2] + out[i + 1] : 1 + i / 2;\n    return out;\n\
    }\nlong[] tri4(long n) \n{\n    long[] out = new long[n + 1];\n    out[0] = 1;\n\
    \    out[1] = 3;\n    out[2] = 2;\n    foreach\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfu5mrgh8.d(49): Error: no identifier for declarator long[]\n/tmp/tmpfu5mrgh8.d(49):
    Error: found \''out\'' instead of statement\n/tmp/tmpfu5mrgh8.d(50): Error: found
    \''out\'' instead of statement\n/tmp/tmpfu5mrgh8.d(51): Error: found \''out\''
    instead of statement\n/tmp/tmpfu5mrgh8.d(52): Error: found \''out\'' instead of
    statement\n/tmp/tmpfu5mrgh8.d(54): Error: found \''out\'' instead of statement\n/tmp/tmpfu5mrgh8.d(55):
    Error: expression expected, not \''out\''\n/tmp/tmpfu5mrgh8.d(59): Error: no identifier
    for declarator long[]\n/tmp/tmpfu5mrgh8.d(59): Error: found \''out\'' instead
    of statement\n/tmp/tmpfu5mrgh8.d(60): Error: found \''out\'' instead of statement\n/tmp/tmpfu5mrgh8.d(61):
    Error: found \''out\'' instead of statement\n/tmp/tmpfu5mrgh8.d(62): Error: found
    \''out\'' instead of statement\n/tmp/tmpfu5mrgh8.d(64): Error: found \''out\''
    instead of statement\n/tmp/tmpfu5mrgh8.d(65): Error: expression expected, not
    \''out\''\n/tmp/tmpfu5mrgh8.d(69): Error: no identifier for declarator long[]\n/tmp/tmpfu5mrgh8.d(69):
    Error: found \''out\'' instead of statement\n/tmp/tmpfu5mrgh8.d(70): Error: found
    \''out\'' instead of statement\n/tmp/tmpfu5mrgh8.d(71): Error: found \''out\''
    instead of statement\n/tmp/tmpfu5mrgh8.d(72): Error: found \''out\'' instead of
    statement\n/tmp/tmpfu5mrgh8.d(74): Error: found \''unittest\'' when expecting
    \''(\''\n/tmp/tmpfu5mrgh8.d(75): Error: basic type expected, not {\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpfu5mrgh8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n\
    \    if(n == 0)\n        return new long[0];\n    else if(n == 1)\n        return\
    \ new long[]{1};\n    else if(n == 2)\n        return new long[]{1,3};\n    else\
    \ if(n == 3)\n        return new long[]{1,3,2};\n    else\n    {\n        result[0]\
    \ = 1;\n        result[1] = 3;\n        result[2] = 2;\n        for(int i = 3;\
    \ i <= n; i++)\n        {\n            if(i % 2 == 0)\n                result[i]\
    \ = 1 + i / 2;\n            else\n                result[i] = result[i-1] + result[i-2]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwb32hol9.d(28): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmpwb32hol9.d(28): Error: found \''}\'' when
    expecting \'';\'' following statement\n/tmp/tmpwb32hol9.d(29): Error: found \''else\''
    instead of statement\n/tmp/tmpwb32hol9.d(31): Error: Declaration expected, not
    \''else\''\n/tmp/tmpwb32hol9.d(33): Error: Declaration expected, not \''else\''\n/tmp/tmpwb32hol9.d(36):
    Error: no identifier for declarator result[1]\n/tmp/tmpwb32hol9.d(36): Error:
    Declaration expected, not \''=\''\n/tmp/tmpwb32hol9.d(37): Error: no identifier
    for declarator result[2]\n/tmp/tmpwb32hol9.d(37): Error: Declaration expected,
    not \''=\''\n/tmp/tmpwb32hol9.d(38): Error: Declaration expected, not \''for\''\n/tmp/tmpwb32hol9.d(38):
    Error: no identifier for declarator i\n/tmp/tmpwb32hol9.d(38): Error: Declaration
    expected, not \''<=\''\n/tmp/tmpwb32hol9.d(38): Error: no identifier for declarator
    i\n/tmp/tmpwb32hol9.d(38): Error: Declaration expected, not \''++\''\n/tmp/tmpwb32hol9.d(42):
    Error: Declaration expected, not \''else\''\n/tmp/tmpwb32hol9.d(44): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwb32hol9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[(int)n + 1];\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    res[0] = a;\n    res[1]\
    \ = b;\n    res[2] = c;\n    for (int i = 3; i <= n; i++)\n    {\n        res[i]\
    \ = res[i - 1] + res[i - 2] + res[i - 3];\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwfe5cm05.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfe5cm05.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    //auto t =\n        //generate!((a,\
    \ b, c) => cast(long)a)(3L)(tuple(3L, 2L, 8L));\n    //return t.take(n + 1).array;\n\
    \    static struct tribonacci(T)\n    {\n        static struct TupleType(T)\n\
    \        {\n            private T a, b, c;\n            T a() { return a; }\n\
    \            T b() { return b; }\n            T c() { return c; }\n          \
    \  this(T a, T b, T c)\n            {\n                this.a = a;\n         \
    \       this.b = b;\n                this.c = c;\n            }\n        }\n \
    \       TupleType!T init() { return TupleType!T(3, 2, 8); }\n        TupleType!T\
    \ next(TupleType!T t)\n        {\n            static if (is(T == long))\n    \
    \            return TupleType!T(t.b, t.c, t.a + t.b + t.c);\n            else\n\
    \                return TupleType!T(t.b, t.c, cast(T)(t.a + t.b + t.c));\n   \
    \     }\n    }\n    auto t =\n        generate!(tribonacci!long)(tribonacci!long.init());\n\
    \    return t.take(n + 1).array;\n}\n//long[] tri(long n) \n//{\n//    struct\
    \ tribonacci\n//    {\n//        static struct tuple\n//        {\n//        \
    \    private long a, b, c;\n//            long a() { return a; }\n//         \
    \   long b() { return b; }\n//            long c() { return c; }\n//         \
    \   this(long a, long b, long c)\n//            {\n//                this.a =\
    \ a;\n//                this.b = b;\n//                this.c = c;\n//       \
    \     }\n//        }\n//        tuple init() { return tuple(3, 2, 8); }\n//  \
    \      tuple next(tuple t)\n//        {\n//            return tuple(t.b, t.c,\
    \ t\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvuclwtus.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tribonacci = new long[n +\
    \ 1];\n    for (int i = 0; i <= n; i++)\n    {\n        tribonacci[i] = tribonacciSequence(i);\n\
    \    }\n    return tribonacci;\n}\nlong tribonacciSequence(long n)\n{\n    if\
    \ (n == 0)\n    {\n        return 1;\n    }\n    else if (n == 1)\n    {\n   \
    \     return 3;\n    }\n    else if (n == 2)\n    {\n        return 2;\n    }\n\
    \    else if (n % 2 == 0)\n    {\n        return 1 + n / 2;\n    }\n    else\n\
    \    {\n        return tribonacciSequence(n - 1) + tribonacciSequence(n - 2) +\
    \ tribonacciSequence(n + 1);\n    }\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr27_h0lh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    // your code here\n    long[] tribonacci\
    \ = new long[n+1];\n    if(n==0) return tribonacci;\n    else if(n==1) {\n   \
    \     tribonacci[0] = 1;\n        return tribonacci;\n    }\n    else if(n==2)\
    \ {\n        tribonacci[0] = 1;\n        tribonacci[1] = 3;\n        return tribonacci;\n\
    \    }\n    else {\n        tribonacci[0] = 1;\n        tribonacci[1] = 3;\n \
    \       tribonacci[2] = 2;\n        for(int i = 3; i < n; i++) {\n           \
    \ tribonacci[i] = tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3];\n     \
    \   }\n        return tribonacci;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnrr_kvsc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tri = new long[n + 1];\n \
    \   tri[0] = 1;\n    tri[1] = 3;\n    tri[2] = 2;\n    for (long i = 3; i <= n;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            tri[i] = 1 + i\
    \ / 2;\n        }\n        else\n        {\n            tri[i] = tri[i - 1] +\
    \ tri[i - 2] + tri[i + 1];\n        }\n    }\n    return tri;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp33rb_pk8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n <= 0)\n        return [1];\n\
    \    return array(tuple(1,1,1))\n           .retro(n)\n           .map!(a =>\n\
    \            reduce!q{a[0] + a[1] + a[2]}\n           )\n           .array;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgrjjazzq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto b = [](long x) \n    {\n   \
    \     return 1L + (x / 2L);\n    };\n    auto a = [=](long x)\n    {\n       \
    \ return b(x) + b(x + 1L) + b(x - 1L);\n    };\n    auto even = [=](long x) \n\
    \    {\n        return x % 2L == 0L;\n    };\n    auto max = n + 1L;\n    long[max]\
    \ res;\n    for (long i = 0L; i < max; i++) \n    {\n        res[i] = even(i)\
    \ ? b(i) : a(i);\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqn45flwe.d(24): Error: found \''x\'' when expecting \''.\''
    following long\n/tmp/tmpqn45flwe.d(24): Error: found \'')\'' when expecting identifier
    following \''long.\''\n/tmp/tmpqn45flwe.d(25): Error: found \''{\'' when expecting
    \'',\''\n/tmp/tmpqn45flwe.d(26): Error: expression expected, not \''return\''\n/tmp/tmpqn45flwe.d(26):
    Error: found \''1L\'' when expecting \'',\''\n/tmp/tmpqn45flwe.d(26): Error: found
    \'';\'' when expecting \'',\''\n/tmp/tmpqn45flwe.d(27): Error: expression expected,
    not \''}\''\n/tmp/tmpqn45flwe.d(27): Error: found \'';\'' when expecting \'',\''\n/tmp/tmpqn45flwe.d(28):
    Error: expression expected, not \''auto\''\n/tmp/tmpqn45flwe.d(28): Error: found
    \''a\'' when expecting \'',\''\n/tmp/tmpqn45flwe.d(28): Error: expression expected,
    not \''=\''\n/tmp/tmpqn45flwe.d(28): Error: expression expected, not \''=\''\n/tmp/tmpqn45flwe.d(28):
    Error: found \''x\'' when expecting \''.\'' following long\n/tmp/tmpqn45flwe.d(28):
    Error: found \'')\'' when expecting identifier following \''long.\''\n/tmp/tmpqn45flwe.d(29):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpqn45flwe.d(30): Error: expression
    expected, not \''return\''\n/tmp/tmpqn45flwe.d(30): Error: found \''b\'' when
    expecting \'',\''\n/tmp/tmpqn45flwe.d(30): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpqn45flwe.d(31): Error: expression expected, not \''}\''\n/tmp/tmpqn45flwe.d(31):
    Error: found \'';\'' when expecting \'',\''\n/tmp/tmpqn45flwe.d(32): Error: expression
    expected, not \''auto\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqn45flwe.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[n+1];\n   \
    \ arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    for(int i = 3; i < n+1; i++)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            arr[i] = 1 + (i / 2);\n\
    \        }\n        else\n        {\n            arr[i] = arr[i-1] + arr[i-2]\
    \ + arr[i+1];\n        }\n    }\n    return arr;\n}\n//Test Cases:\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfwj162he.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[cast(int)\
    \ n + 1];\n    if (n >= 0)\n    {\n        result[0] = 1;\n        if (n >= 1)\n\
    \        {\n            result[1] = 3;\n            if (n >= 2)\n            {\n\
    \                result[2] = 2;\n                for (long i = 3; i <= n; i++)\n\
    \                {\n                    if (i % 2 == 0)\n                    {\n\
    \                        result[cast(int) i] = 1 + i / 2;\n                  \
    \  }\n                    else\n                    {\n                      \
    \  result[cast(int) i] = result[cast(int) i - 1] + result[cast(int) i - 2] + result[cast(int)\
    \ i + 1];\n                    }\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4plg5uj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] y = new long[n+1];\n    if(n\
    \ == 0) \n    {\n        y[0] = 1;\n        return y;\n    }\n    long[] x = new\
    \ long[n+1];\n    x[0] = 1;\n    x[1] = 3;\n    x[2] = 2;\n    for(int i = 3;\
    \ i <= n; i++) \n    {\n        if(i % 2 == 0) \n        {\n            x[i] =\
    \ 1 + i / 2;\n        }\n        else \n        {\n            x[i] = x[i-1] +\
    \ x[i-2] + x[i+1];\n        }\n    }\n    return x;\n}\n/*\n/////////////////////////////\n\
    ///   Binary Truth Table  ///\n/////////////////////////////\n*/\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41xzy1ky.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tri_arr;\n    long nth_tri;\n\
    \    long i;\n    // TODO\n    //if (n == 0)\n    //{\n    //    tri_arr = [1];\n\
    \    //}\n    //else if (n == 1)\n    //{\n    //    tri_arr = [1, 3];\n    //}\n\
    \    //else if (n == 2)\n    //{\n    //    tri_arr = [1, 3, 2];\n    //}\n  \
    \  //else if (n == 3)\n    //{\n    //    tri_arr = [1, 3, 2, 8];\n    //}\n \
    \   //else\n    //{\n    //    tri_arr = [1, 3, 2, 8];\n    //    for (i = 4;\
    \ i <= n; i++)\n    //    {\n    //        if (i % 2 == 0)\n    //        {\n\
    \    //            nth_tri = 1 + (i / 2);\n    //        }\n    //        else\n\
    \    //        {\n    //            nth_tri = tri_arr[i - 1] + tri_arr[i - 2]\
    \ + tri_arr[i + 1];\n    //        }\n    //        tri_arr ~= nth_tri;\n    //\
    \    }\n    //}\n    tri_arr = [1, 3, 2, 8];\n    if (n <= 3)\n    {\n       \
    \ tri_arr = tri_arr[0..n+1];\n    }\n    else\n    {\n        for (i = 4; i <=\
    \ n; i++)\n        {\n            if (i % 2 == 0)\n            {\n           \
    \     nth_tri = 1 + (i / 2);\n            }\n            else\n            {\n\
    \                nth_tri = tri_arr[i - 1] + tri_arr[i - 2] + tri_arr[i + 1];\n\
    \            }\n            tri_arr ~= nth_tri;\n        }\n    }\n    return\
    \ tri_arr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp799l_6yg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    /* \n    constant time and memory\n\
    \    */\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    if (n == 0)\n        return take(result, 1);\n    if (n == 1)\n  \
    \      return take(result, 2);\n    result[2] = 2;\n    for (long i = 3; i <=\
    \ n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] = 1 + i / 2;\n\
    \        else\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgvbghtrz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] n1 = new long[(int)n + 1];\n\
    \    if (n == 0) return n1;\n    n1[0] = 1;\n    n1[1] = 3;\n    n1[2] = 2;\n\
    \    for (int i = 3; i < n + 1; i++)\n    {\n        n1[i] = n1[i - 1] + n1[i\
    \ - 2] + n1[i - 3];\n    }\n    return n1;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptv_hyux2.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptv_hyux2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int arraySize = (int)n + 1;\n   \
    \ long[] tribonacci = new long[arraySize];\n    tribonacci[0] = 1; // tri(1) =\
    \ 3\n    for (int i = 1; i < arraySize; i++)\n    {\n        tribonacci[i] = tribonacci[i\
    \ - 1] + tribonacci[i - 2] + tribonacci[i - 3];\n    }\n    return tribonacci;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphpv39m4h.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphpv39m4h.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n == 0 ? new long[]{0L}\n\
    \                  : n == 1 ? new long[]{1L, 3L}\n                           :\
    \ n == 2 ? new long[]{1L, 3L, 2L}\n                                    : tribonacci(n\
    \ + 1);\n}\nlong[] tribonacci(long n)\n{\n    long[] result = new long[n];\n \
    \   result[0] = 1L;\n    result[1] = 3L;\n    result[2] = 2L;\n    for (long i\
    \ = 3; i < n; i++)\n    {\n        result[i] = 1 + i / 2;\n        if (i % 2 ==\
    \ 1)\n        {\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpspnf12_r.d(24): Error: found \''{\'' when expecting \'':\''\n/tmp/tmpspnf12_r.d(24):
    Error: found \''}\'' when expecting \'';\'' following return statement\n/tmp/tmpspnf12_r.d(25):
    Error: found \'':\'' instead of statement\n/tmp/tmpspnf12_r.d(26): Error: Declaration
    expected, not \'':\''\n/tmp/tmpspnf12_r.d(28): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpspnf12_r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[n + 1];\n \
    \   res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for (long i = 3; i <= n;\
    \ i++)\n    {\n        if (i%2 == 0) res[i] = 1 + i / 2;\n        else res[i]\
    \ = res[i - 1] + res[i - 2] + res[i + 1];\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpifcq00fx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 1L ? new long[] { 1L }\
    \ : take(n + 1L, trib);\n}\n/*\n    trib = unfoldr (\\(a, b, c) -> Just (a, (b,\
    \ c, a + b + c))) (1, 3, 2)\n*/\nauto trib = unfoldr!((tup2!long, tup2!long, long)\
    \ => Just(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup2!long(tup\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkgrsgyfg.d(24): Error: found \''{\'' when expecting \'':\''\n/tmp/tmpkgrsgyfg.d(24):
    Error: found \''}\'' when expecting \'';\'' following return statement\n/tmp/tmpkgrsgyfg.d(24):
    Error: found \'':\'' instead of statement\n/tmp/tmpkgrsgyfg.d(30): Error: found
    \''unittest\'' when expecting \'',\''\n/tmp/tmpkgrsgyfg.d(45): Error: found \''void\''
    when expecting \'',\''\n/tmp/tmpkgrsgyfg.d(45): Error: found \''{\'' when expecting
    \'',\''\n/tmp/tmpkgrsgyfg.d(45): Error: expression expected, not \''}\''\n/tmp/tmpkgrsgyfg.d(45):
    Error: found \''EOF\'' when expecting \'',\''\n/tmp/tmpkgrsgyfg.d(45): Error:
    found \''EOF\'' when expecting \'')\''\n/tmp/tmpkgrsgyfg.d(45): Error: found \''EOF\''
    when expecting \'',\''\n/tmp/tmpkgrsgyfg.d(45): Error: found \''EOF\'' when expecting
    \'')\''\n/tmp/tmpkgrsgyfg.d(45): Error: found \''EOF\'' when expecting \'',\''\n/tmp/tmpkgrsgyfg.d(45):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpkgrsgyfg.d(45): Error:
    found \''EOF\'' when expecting \'',\''\n/tmp/tmpkgrsgyfg.d(45): Error: found \''EOF\''
    when expecting \'')\''\n/tmp/tmpkgrsgyfg.d(45): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpkgrsgyfg.d(45): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpkgrsgyfg.d(45):
    Error: found \''EOF\'' when expecting \'',\''\n/tmp/tmpkgrsgyfg.d(45): Error:
    found \''EOF\'' when expecting \'')\''\n/tmp/tmpkgrsgyfg.d(45): Error: found \''EOF\''
    when expecting \'',\''\n/tmp/tmpkgrsgyfg.d(45): Error: found \''EOF\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkgrsgyfg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  auto r = new long[n+1];\n  r[0] = 1;\n\
    \  r[1] = 3;\n  r[2] = 2;\n  foreach(e; 3..n+1)\n  {\n    r[e] = e % 2 == 0 \n\
    \        ? 1 + e / 2 \n        : r[e-1] + r[e-2] + r[e+1];\n  }\n  return r;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprczlnoj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    // your code\n    long[] res = new\
    \ long[n+1];\n    if(n==0)\n    {\n        return [1];\n    }\n    else if(n==1)\n\
    \    {\n        return [1,3];\n    }\n    else if(n==2)\n    {\n        return\
    \ [1,3,2];\n    }\n    else\n    {\n        res[0] = 1;\n        res[1] = 3;\n\
    \        res[2] = 2;\n        foreach(i;3..n+1)\n        {\n            if(i%2==0)\n\
    \            {\n                res[i] = res[i-2]+res[i-1]+res[i-3];\n       \
    \     }\n            else\n            {\n                res[i] = 1+i/2;\n  \
    \          }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6qfygqn7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    if (n == 0) return result;\n    result[1] = 3;\n    if\
    \ (n == 1) return result;\n    result[2] = 2;\n    if (n == 2) return result;\n\
    \    for (long i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = 1 + i / 2;\n        }\n        else\n        {\n    \
    \        result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n\
    \    }\n    return result;\n}\n/*\nfunction tri(n){\n  var a = new Array(n+1);\n\
    \  a[0] = 1;\n  if (n > 0) a[1] = 3;\n  if (n > 1) a[2] = 2;\n  for (var i = 3;\
    \ i <= n; i++) {\n    if (i % 2 == 0) {\n      a[i] = 1 + i / 2;\n    } else {\n\
    \      a[i] = a[i-1] + a[i-2] + a[i+1];\n    }\n  }\n  return a;\n}\n*/\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2f1_1my9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n <= 0)\n        return [0];\n\
    \    if (n == 1)\n        return [1, 3];\n    if (n == 2)\n        return [1,\
    \ 3, 2];\n    auto res = [1, 3, 2];\n    for (int i = 3; i <= n; i++)\n    {\n\
    \        if (i % 2 == 0)\n            res ~= 1 + (i / 2);\n        else\n    \
    \        res ~= res[$ - 1] + res[$ - 2] + res[$ - 3];\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjeoyck0j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    //create a long array of length n\
    \ + 1 to store the tribonacci sequence\n    long[] arr = new long[n + 1];\n  \
    \  //the first three elements of the array are the first three tribonacci numbers\n\
    \    arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    //loop through each element\
    \ in the array\n    for(int i = 3; i < n + 1; i++)\n    {\n        //if the element's\
    \ index is even, set the element to 1 + (i / 2)\n        if(i % 2 == 0)\n    \
    \    {\n            arr[i] = 1 + (i / 2);\n        }\n        //if the element's\
    \ index is odd, set the element to the sum of the previous \n        //    three\
    \ elements in the array\n        else\n        {\n            arr[i] = arr[i -\
    \ 1] + arr[i - 2] + arr[i + 1];\n        }\n    }\n    //return the tribonacci\
    \ sequence array\n    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplmclpbcj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n\tlong[] res = new long[n + 1];\n\tres[0]\
    \ = 1;\n\tres[1] = 3;\n\tres[2] = 2;\n\tfor (int i = 3; i <= n; i++) \n\t{\n\t\
    \tres[i] = (n % 2 == 0) ? 1 + n / 2 : res[i - 1] + res[i - 2] + res[i + 1];\n\t\
    }\n\treturn res;\n}\n/*\nBest Practices:\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp06z7gm2x.d(34): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp06z7gm2x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return iota(n+1).map!((long i) =>\
    \ i.isEven? 1 + i/2 : 3).scan!((long a, long b) => a + b).array();\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44avvl10.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[n];\n    res[0]\
    \ = 1;\n    res[1] = 3;\n    if(n == 1)\n        return res;\n    res[2] = 2;\n\
    \    if(n == 2)\n        return res;\n    res[3] = 8;\n    if(n == 3)\n      \
    \  return res;\n    for(int i = 4; i < n; i++)\n    {\n        if(i % 2 == 0)\n\
    \            res[i] = 1 + i / 2;\n        else\n            res[i] = res[i - 1]\
    \ + res[i - 2] + res[i + 1];\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpawkd4a06.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n > 0 ? typeof(return).array(n\
    \ + 1) : [0];\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ibp9y8n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 1 ? new long[]{1L} : n\
    \ == 1 ? new long[]{1L, 3L} : \n                    n == 2 ? new long[]{1L, 3L,\
    \ 2L} : \n                    new long[]{1L, 3L, 2L, 8L} ~ [8L, 7L] ~ \n     \
    \               iota(n - 2).map!((i) => i.isEven ? 3 + i / 2 : tri(i - 1)[$ -\
    \ 1] + tri(i - 2)[$ - 1] + tri(i + 1)[$ - 1]).array;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1898obe7.d(24): Error: found \''{\'' when expecting \'':\''\n/tmp/tmp1898obe7.d(24):
    Error: found \''}\'' when expecting \'';\'' following return statement\n/tmp/tmp1898obe7.d(24):
    Error: found \'':\'' instead of statement\n/tmp/tmp1898obe7.d(24): Error: Declaration
    expected, not \'':\''\n/tmp/tmp1898obe7.d(28): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1898obe7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int len = cast(int) n + 1;\n    long[]\
    \ r = new long[len];\n    r[0] = 1;\n    r[1] = 3;\n    r[2] = 2;\n    for (int\
    \ i = 3; i < len; i++) \n    {\n        r[i] = r[i - 1] + r[i - 2] + r[i - 3];\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfvp3t2fs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret = new long[n+1];\n   \
    \ ret[0] = 1;\n    ret[1] = 3;\n    for(int i = 2; i < n; i++)\n    {\n      \
    \  if(i % 2 == 0)\n        {\n            ret[i] = 1 + i / 2;\n        }\n   \
    \     else\n        {\n            ret[i] = ret[i-1] + ret[i-2] + ret[i-3];\n\
    \        }\n    }\n    return ret;\n}\n/*\nTribonacci sequence can be defined\
    \ in a more compact manner:\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv_vo8ua7.d(40): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpv_vo8ua7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto all = new long[n+1];\n    all[0]\
    \ = 1;\n    all[1] = 3;\n    all[2] = 2;\n    for(int i = 3; i < n+1; i++)\n \
    \   {\n        if(i%2==0)\n        {\n            all[i] = all[i-1] + all[i-2]\
    \ + all[i-3];\n        }\n        else\n        {\n            all[i] = 1 + i/2;\n\
    \        }\n    }\n    return all;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5dv64rbg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] start = new long[]{1L, 3L,\
    \ 2L};\n    if (n == 0) return new long[]{0L};\n    if (n < 4) return take(start,\
    \ n+1);\n    return take(iterate!(a => [a[$-1]+a[$-2]+a[$-3]])(start), n+1);\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfl1nkkz5.d(24): Error: semicolon expected, not \''{\''\n/tmp/tmpfl1nkkz5.d(24):
    Error: found \''}\'' when expecting \'';\'' following statement\n/tmp/tmpfl1nkkz5.d(25):
    Error: found \''{\'' when expecting \'';\'' following return statement\n/tmp/tmpfl1nkkz5.d(25):
    Error: found \''}\'' when expecting \'';\'' following statement\n/tmp/tmpfl1nkkz5.d(29):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpfl1nkkz5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0)\n        return [1];\n\
    \    return reduce!((a, b) => [a[1], a[2], a[0] + a[1] + a[2]])([1, 3, 2])(iota(n\
    \ - 1));\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsjzac2b2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  long[] result = new long[n + 1];\n\
    \  result[0] = 1;\n  result[1] = 3;\n  result[2] = 2;\n  foreach(int i; 0..n)\n\
    \  {\n    if(i > 2)\n    {\n      if(i % 2 == 0)\n      {\n        result[i] =\
    \ 1 + i / 2;\n      }\n      else\n      {\n        result[i] = result[i - 1]\
    \ + result[i - 2] + result[i + 1];\n      }\n    }\n  }\n  return result;\n}\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp53rn90gh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  return n < 2 ?\n      new long[]{1L,\
    \ 3L} :\n      new long[]{1L, 3L} ~\n      new long[]{iota(n).map!((x) => ((x\
    \ & 1) == 0 ? x/2 : 1 + tri(x-1)[$-1] + tri(x-2)[$-1] + tri(x+1)[$-1]))}[0..$-1];\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl_qe7cfs.d(25): Error: found \''{\'' when expecting \'':\''\n/tmp/tmpl_qe7cfs.d(25):
    Error: found \''}\'' when expecting \'';\'' following return statement\n/tmp/tmpl_qe7cfs.d(25):
    Error: found \'':\'' instead of statement\n/tmp/tmpl_qe7cfs.d(27): Error: found
    \''new\'' when expecting \''this\''\n/tmp/tmpl_qe7cfs.d(27): Error: found \''long\''
    when expecting \''(\''\n/tmp/tmpl_qe7cfs.d(27): Error: found \''[\'' when expecting
    \'')\''\n/tmp/tmpl_qe7cfs.d(27): Error: semicolon expected following function
    declaration\n/tmp/tmpl_qe7cfs.d(27): Error: Declaration expected, not \'']\''\n/tmp/tmpl_qe7cfs.d(28):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_qe7cfs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] fibs = new long[n+1];\n  \
    \  fibs[0] = 1;\n    fibs[1] = 3;\n    fibs[2] = 2;\n    if(n == 0) return fibs[0..0];\n\
    \    if(n == 1) return fibs[0..1];\n    if(n == 2) return fibs[0..2];\n    for(int\
    \ i = 3; i < n+1; i++)\n    {\n        if(i%2 == 0)\n        {\n            fibs[i]\
    \ = fibs[i-1] + fibs[i-2] + 1;\n        }\n        else\n        {\n         \
    \   fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3];\n        }\n    }\n    return\
    \ fibs;\n}\n/*\n    Once again, meow.\n    You are given an array with two numbers\
    \ - your cats' IDs. Write a function that returns \n    the sum of their IDs.\n\
    \    Examples:\n    >>> meow(new int[]{1, 2})\n    3\n    >>> meow(new int[]{1,\
    \ 2, 3})\n    6\n*/\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpll2trn1u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return (n == 0L ? [] : tri(n - 1)\
    \ ~ n % 2 == 0 ? 1L + n / 2 : \n        cast(long[])tri(n - 1)[$ - 1 .. $] ~ tri(n\
    \ - 2) ~ tri(n + 1)).array;\n}\n/*\n#Alternative\nlong[] tri(long n) \n{\n   \
    \ long[] result = [1L, 3L, 2L];\n    while (n-- > 0)\n    {\n        switch (result.length)\n\
    \        {\n            case 0: result ~= 1L; break;\n            case 1: result\
    \ ~= 3L; break;\n            case 2: result ~= 2L; break;\n            default:\n\
    \                result ~= result[$ - 1] + result[$ - 2] + result[$ - 3];\n  \
    \      }\n    }\n    return result;\n}\n*/\nunittest\n{\n    alias candidate =\
    \ tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpebjy1ibq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n < 0) \n        return [];\n\
    \    int[] ret = new int[n + 1];\n    ret[0] = 1;\n    if (n > 0) \n        ret[1]\
    \ = 3;\n    if (n > 1) \n        ret[2] = 2;\n    for (int i = 3; i <= n; i++)\
    \ \n        ret[i] = i % 2 == 0 ? ret[i - 1] + ret[i - 2] + ret[i - 3] + 1 : ret[i\
    \ - 1] + ret[i - 2] + ret[i - 3];\n    return ret;\n}\n/*\n# First, define a recursive\
    \ function that can calculate the n-th item of the sequence:\n# Then calculate\
    \ the items recursively:\n*/\nlong[] tri(long n) \n{\n    long calc(long k)\n\
    \    {\n        if (k < 0)\n            return 0;\n        else if (k < 2)\n \
    \           return 1;\n        else if (k < 3)\n            return 3;\n      \
    \  else if (k % 2 == 0)\n            return calc(k - 1) + calc(k - 2) + calc(k\
    \ - 3) + 1;\n        else\n            return calc(k - 1) + calc(k - 2) + calc(k\
    \ - 3);\n    }\n    return iota(n + 1).map!(i => calc(i));\n}\n/*\n    def tri(n):\n\
    \    t = [1, 3, 2]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n    \
    \        t.append(t[i-1] + t[i-2] + t[i-3] + 1)\n        else:\n            t.append(t[i-1]\
    \ + t[i-2] + t[i-3])\n    return t[:n+1]\n*/\n/*\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpro29avgb.d(67): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpro29avgb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto result = new long[];\n    result\
    \ ~= 1;\n    if (n >= 2)\n    {\n        result ~= 3;\n        if (n >= 3)\n \
    \       {\n            result ~= 2;\n            foreach (i; 3..=n)\n        \
    \    {\n                result ~= (i % 2 == 0) ? 1 + i / 2 : result[$ - 1] + result[$\
    \ - 2] + result[$ - 3];\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx13j9wmg.d(32): Error: expression expected, not \''=\''\n/tmp/tmpx13j9wmg.d(32):
    Error: found \''n\'' when expecting \'')\''\n/tmp/tmpx13j9wmg.d(32): Error: found
    \'')\'' instead of statement\n/tmp/tmpx13j9wmg.d(38): Error: Declaration expected,
    not \''return\''\n/tmp/tmpx13j9wmg.d(39): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx13j9wmg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[n+1];\n   \
    \ if(n < 1) return res;\n    long a = 1, b = 3, c = 2;\n    res[0] = 1;\n    res[1]\
    \ = 3;\n    res[2] = 2;\n    for(int i = 3; i <= n; i++)\n    {\n        res[i]\
    \ = (i % 2 == 0) ? (1 + i / 2) : (a + b + c);\n        a = b;\n        b = c;\n\
    \        c = res[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_lobtao.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return sequence!(long)(n + 1, x =>\
    \ x ? \n                           (x % 2 ? \n                           tri(x\
    \ - 1)[$ - 1] + tri(x - 2)[$ - 1] + tri(x + 1)[$ - 1] : \n                   \
    \        1 + x / 2) : \n                           1);\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp634mz_9q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) return new long[0];\n\
    \    long[] result = new long[n+1];\n    result[0] = 1;\n    result[1] = 3;\n\
    \    result[2] = 2;\n    for (long i = 3; i <= n; i++)\n    {\n        if (i %\
    \ 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n        else\n\
    \        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmp2g3z1h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return sequence!(a => \n        \
    \    a.length < 3 ? 3L : \n                a[a.length - 3] + a[a.length - 2] +\
    \ a[a.length - 1]\n            )\n        ([1L])\n        .take(n + 1);\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0p7g4ij9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[n + 1];\n \
    \   if (n > 1)\n    {\n        arr[0] = 1;\n        arr[1] = 3;\n        arr[2]\
    \ = 2;\n        for (int i = 3; i < n + 1; i++)\n        {\n            if (i\
    \ % 2 == 0)\n            {\n                arr[i] = 1 + i / 2;\n            }\n\
    \            else\n            {\n                arr[i] = arr[i - 1] + arr[i\
    \ - 2] + arr[i + 1];\n            }\n        }\n    }\n    else\n    {\n     \
    \   arr[0] = 1;\n        arr[1] = 3;\n    }\n    return arr;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmoovv0fl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return map!(a => nth!(a, Tuple!(long,\
    \ 0L, 1L, 3L, 2L)))(iota(n + 1));\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmjnveabq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[(int)n+1];\n\
    \    for(int i = 1; i <= n; i++) \n    {\n        if(i == 1) \n        {\n   \
    \         arr[i] = 3;\n        } \n        else if(i == 2) \n        {\n     \
    \       arr[i] = 1;\n        } \n        else if(i % 2 == 0) \n        {\n   \
    \         arr[i] = 1 + i / 2;\n        } \n        else \n        {\n        \
    \    arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n        }\n    }\n    return arr;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplp6pvu0e.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplp6pvu0e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto fib = iota(n + 1)\n        .map!((i)\
    \ => (i == 1) ? 3 : (i == 2) ? 2 : 1)\n        .scan!((a, b) => a + b)\n     \
    \   .array();\n    return fib;\n}\nunittest\n{\n    alias candidate = tri;\n\n\
    \    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wzwp5pp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n == 0 ? [1L] : \n       \
    \    n == 1 ? [1L, 3L] : \n           n == 2 ? [1L, 3L, 2L] :\n              \
    \      [1L, 3L, 2L] ~ [iota(3, n).map!(n => (n & 1) ? tri(n - 1)[$ - 1] + tri(n\
    \ - 2)[$ - 1] + tri(n + 1)[$ - 1] \n                                         \
    \                  : 1 + (n / 2)).array];\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzt41wnbk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 0 ? new long[0] : new\
    \ long[n + 1].map!(a => a < 3 ? 1 : a.tri(a - 1) + a.tri(a - 2) + a.tri(a + 1))[];\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmput5vbb1t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 2 ? new long[]{1L, 3L}\
    \ :\n           n == 2 ? new long[]{1L, 3L, 2L} :\n           [1L, 3L, 2L] ~ take((int)n\
    \ + 1).map!(a => a[$ - 1] + a[$ - 2] + a[$ - 3]).array;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjexmygk1.d(24): Error: found \''{\'' when expecting \'':\''\n/tmp/tmpjexmygk1.d(24):
    Error: found \''}\'' when expecting \'';\'' following return statement\n/tmp/tmpjexmygk1.d(24):
    Error: found \'':\'' instead of statement\n/tmp/tmpjexmygk1.d(25): Error: Declaration
    expected, not \'':\''\n/tmp/tmpjexmygk1.d(27): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjexmygk1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[n + 1];\n \
    \   arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    for (long i = 3; i <= n;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            arr[i] = 1 + i\
    \ / 2;\n        }\n        else\n        {\n            arr[i] = arr[i - 1] +\
    \ arr[i - 2] + arr[i + 1];\n        }\n    }\n    return arr;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyjo4x2j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n == 0 ? new long[] {0} :\n\
    \        n == 1 ? new long[] {1, 3} :\n        new long[] {1, 3, 2} ~ n.iota().map!(n\
    \ => n.isEven ? (1 + n / 2) : tri(n-1)[$-1] + tri(n-2)[$-1] + tri(n+1)[$-1]);\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpynw3z7oy.d(24): Error: found \''{\'' when expecting \'':\''\n/tmp/tmpynw3z7oy.d(24):
    Error: found \''}\'' when expecting \'';\'' following return statement\n/tmp/tmpynw3z7oy.d(24):
    Error: found \'':\'' instead of statement\n/tmp/tmpynw3z7oy.d(25): Error: Declaration
    expected, not \'':\''\n/tmp/tmpynw3z7oy.d(27): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpynw3z7oy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tribonacci;\n    tribonacci.length\
    \ = n + 1;\n    int i = 0;\n    for (; i < tribonacci.length; ++i)\n    {\n  \
    \      tribonacci[i] = (n + 1) / 2;\n    }\n    if (n > 1)\n    {\n        tribonacci[0]\
    \ = 1;\n        tribonacci[1] = 3;\n        tribonacci[2] = 2;\n        for (i\
    \ = 3; i < tribonacci.length; ++i)\n        {\n            tribonacci[i] = tribonacci[i\
    \ - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n    }\n    else\n\
    \    {\n        tribonacci[0] = 1;\n    }\n    return tribonacci;\n}\n//beforehand\n\
    long[] tri(long n) \n{\n    long[] tribonacci;\n    tribonacci.length = n + 1;\n\
    \    int i = 0;\n    for (; i < tribonacci.length; ++i)\n    {\n        tribonacci[i]\
    \ = (n + 1) / 2;\n    }\n    if (n > 1)\n    {\n        tribonacci[0] = 1;\n \
    \       tribonacci[1] = 3;\n        tribonacci[2] = 2;\n        for (i = 3; i\
    \ < tribonacci.length; ++i)\n        {\n            tribonacci[i] = tribonacci[i\
    \ - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n        }\n    }\n    else\n\
    \    {\n        tribonacci[0] = 1;\n    }\n    return tribonacci;\n}\n//afterward\n\
    long[] tri(long n) \n{\n    long[] tribonacci;\n    tribonacci.length = n + 1;\n\
    \    int i = 0;\n    for (; i < tribonacci.length; ++i)\n    {\n        tribonacci[i]\
    \ = (n + 1) / 2;\n    }\n    if (n > 1)\n   \nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmryzx6gz.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmryzx6gz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) \n    {\n        return\
    \ [1];\n    }\n    if (n == 1) \n    {\n        return [1, 3];\n    }\n    if\
    \ (n == 2) \n    {\n        return [1, 3, 2];\n    }\n    long[] res = [1, 3,\
    \ 2];\n    auto odd = res[2] + res[1] + res[0];\n    res ~= odd;\n    foreach\
    \ (i; 2 .. n) \n    {\n        auto even = 1 + i / 2;\n        res ~= even;\n\
    \        auto odd = res[$ - 1] + res[$ - 2] + res[$ - 3];\n        res ~= odd;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpay_a9ipo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int[] arr = new int[n+1];\n    arr[0]\
    \ = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    for(int i = 3; i <= n; i++) \n \
    \   {\n        arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n    }\n    return arr;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwu147kdc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    if (n > 0)\n    {\n        result[0] = 1;\n        result[1] = 3;\n     \
    \   result[2] = 2;\n        for (long i = 3; i <= n; i++)\n        {\n       \
    \     if (i % 2 == 0)\n            {\n                result[i] = 1 + i / 2;\n\
    \            }\n            else\n            {\n                result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z56esmr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n == 0 ? new long[]{1L} \n\
    \         : n == 1 ? new long[]{1L, 3L} \n         : n == 2 ? new long[]{1L, 3L,\
    \ 2L} \n         : n > 2 ? (n % 2 == 0 ? tri(n - 1) ~= 2 + n / 2 : tri(n - 1)\
    \ ~= tri(n - 2)[$ - 1] + tri(n - 2)[$ - 2] + tri(n - 2)[$ - 3])\n         : null;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqzsojo98.d(24): Error: found \''{\'' when expecting \'':\''\n/tmp/tmpqzsojo98.d(24):
    Error: found \''}\'' when expecting \'';\'' following return statement\n/tmp/tmpqzsojo98.d(25):
    Error: found \'':\'' instead of statement\n/tmp/tmpqzsojo98.d(26): Error: Declaration
    expected, not \'':\''\n/tmp/tmpqzsojo98.d(29): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqzsojo98.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tri = new long[(int)n + 1];\n\
    \    for (long i = 0; i <= n; i++) \n    {\n        if (i < 3) \n        {\n \
    \           tri[(int)i] = 1;\n        } \n        else \n        {\n         \
    \   tri[(int)i] = (i % 2 == 0) ? (i / 2) : tri[(int)i - 1] + tri[(int)i - 2] +\
    \ tri[(int)i - 3];\n        }\n    }\n    return tri;\n}\n/*\nauto tri(long n)\
    \ \n{\n    struct S\n    {\n        long operator()(long n)\n        {\n     \
    \       return (n < 3) ? 1 : (n % 2 == 0) ? (n / 2) : (*this)(n - 1) + (*this)(n\
    \ - 2) + (*this)(n - 3);\n        }\n    };\n    return iota(S(), n + 1);\n}\n\
    */\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3pgg84xo.d(24): Error: C style cast illegal, use cast(int)n\n/tmp/tmp3pgg84xo.d(29):
    Error: C style cast illegal, use cast(int)i\n/tmp/tmp3pgg84xo.d(33): Error: C
    style cast illegal, use cast(int)i\n/tmp/tmp3pgg84xo.d(33): Error: C style cast
    illegal, use cast(int)i\n/tmp/tmp3pgg84xo.d(33): Error: C style cast illegal,
    use cast(int)i\n/tmp/tmp3pgg84xo.d(33): Error: C style cast illegal, use cast(int)i\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3pgg84xo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  return map!((x){return 1 + x / 2;})(iota(n\
    \ + 1)).array();\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujizcrcr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    // your code\n    long[] res = new\
    \ long[n+1];\n    res[0] = 1;\n    if(n > 0)\n        res[1] = 3;\n    if(n >\
    \ 1)\n        res[2] = 2;\n    long triN = 0;\n    long triN_1 = 0;\n    long\
    \ triN_2 = 0;\n    long triN_3 = 0;\n    for(long i = 3; i <= n; i++)\n    {\n\
    \        if(i % 2 == 0)\n        {\n            triN = 1 + i / 2;\n        }\n\
    \        else\n        {\n            triN_1 = res[i-1];\n            triN_2 =\
    \ res[i-2];\n            triN_3 = res[i-3];\n            triN = triN_1 + triN_2\
    \ + triN_3;\n        }\n        res[i] = triN;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxyxq9fec.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  auto r = new long[n + 1];\n  r[0] =\
    \ 1;\n  r[1] = 3;\n  r[2] = 2;\n  for (long i = 3; i <= n; i++)\n  {\n    r[i]\
    \ = i % 2 == 0 ? 1 + i / 2 : r[i - 1] + r[i - 2] + r[i + 1];\n  }\n  return r;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp98zde9ti.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto tr = new long[n+1];\n    tr[0]\
    \ = 1;\n    tr[1] = 3;\n    if(n==0) return tr[0..1];\n    if(n==1) return tr[0..2];\n\
    \    foreach(i;2..n+1)\n    {\n        if(i.isEven) tr[i] = 1 + i / 2;\n     \
    \   else tr[i] = tr[i-1] + tr[i-2] + tr[i+1];\n    }\n    return tr;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7gwkgttb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n\tauto result = new long[n + 1];\n\t\
    result[0] = 1;\n\tresult[1] = 3;\n\tresult[2] = 2;\n\tfor (int i = 3; i <= n;\
    \ i++)\n\t{\n\t\tresult[i] = result[i - 1] + result[i - 2] + result[i - 3];\n\t\
    }\n\treturn result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpib6efir1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n +\
    \ 1];\n    if (n < 1) \n    {\n        return result;\n    }\n    result[0] =\
    \ 1;\n    result[1] = 3;\n    result[2] = 2;\n    if (n > 2) \n    {\n       \
    \ foreach (i; 3 .. n + 1) \n        {\n            if (isEven(i)) \n         \
    \   {\n                result[i] = 1 + i / 2;\n            }\n            else\
    \ \n            {\n                result[i] = result[i - 1] + result[i - 2] +\
    \ result[i + 1];\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9vgqt9kk.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9vgqt9kk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n < 0)\n    {\n        return\
    \ null;\n    }\n    long[] result = new long[(int)n + 1];\n    result[0] = 1;\n\
    \    result[1] = 3;\n    result[2] = 2;\n    for (int i = 3; i < n + 1; i++)\n\
    \    {\n        if (i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\n \n/*\nYou are\
    \ given a non-negative integer number n, you have to a return an array of the\
    \ \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>>\
    \ tri(3L)\n    [1L, 3L, 2L, 8L]\n    \nlong[] tri(long n) \n{\n    if (n < 0)\n\
    \    {\n        return null;\n    }\n    long[] result = new long[(int)n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (int i =\
    \ 3; i < n + 1; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }*/\n \n//Tests \nimport std.typecons;\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcr0h3d64.d(28): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcr0h3d64.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  long[] ret = new long[(int)n+1];\n\
    \  ret[0] = 1;\n  ret[1] = 3;\n  ret[2] = 2;\n  foreach(l;3..n+1)\n  {\n    if(l\
    \ % 2 == 0)\n    {\n      ret[l] = ret[l-1] + (l/2);\n    }\n    else\n    {\n\
    \      ret[l] = ret[l-1] + ret[l-2] + ret[l-3];\n    }\n  }\n  return ret;\n}\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnwotlokj.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnwotlokj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] nums = new long[n + 1];\n\
    \    nums[0] = 1;\n    nums[1] = 3;\n    nums[2] = 2;\n    if (n > 2)\n    {\n\
    \        for (int i = 3; i <= n; i++)\n        {\n            if (i % 2 == 0)\n\
    \            {\n                nums[i] = 1 + i / 2;\n            }\n        \
    \    else\n            {\n                nums[i] = nums[i - 1] + nums[i - 2]\
    \ + nums[i + 1];\n            }\n        }\n    }\n    return nums;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2qz1xkn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] t = new long[(cast(int)n)+1];\n\
    \    t[0] = 1;\n    if(n>0)\n        t[1] = 3;\n    if(n>1)\n        t[2] = 2;\n\
    \    for(int i = 3; i<(cast(int)n)+1; i++)\n    {\n        if(i%2 == 0)\n    \
    \        t[i] = 1 + (i/2);\n        else\n            t[i] = t[i-1] + t[i-2] +\
    \ t[i+1];\n    }\n    return t;\n}\nunittest\n{\n    alias candidate = tri;\n\n\
    \    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7o_gruc7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return iota(n+1).map!((n){\n    \
    \        if(n <= 1) return 3;\n            else if(n == 2) return 2;\n       \
    \     else\n                return tri(n-1)[n-1] + tri(n-1)[n-2] + tri(n-1)[n+1];\n\
    \        }).array;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa_v0f5lx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[(int) n\
    \ + 1];\n    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    int i\
    \ = 3;\n    while (i <= n)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = 1 + i / 2;\n        }\n        else\n        {\n          \
    \  result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n   \
    \     i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1_f3oo8p.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_f3oo8p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) \n    {\n        return\
    \ [1];\n    }\n    long[] result = new long[n + 1];\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (long i = 3; i <= n; i++) \n    {\n      \
    \  if (i % 2 == 0) \n        {\n            result[i] = 1 + i / 2;\n        }\n\
    \        else \n        {\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe2lj0mcn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    import std.bigint : BigInt;\n   \
    \ if (n == 0)\n        return [1L];\n    if (n == 1)\n        return [1L, 3L];\n\
    \    BigInt a = BigInt(1);\n    BigInt b = BigInt(3);\n    BigInt c = BigInt(2);\n\
    \    BigInt temp;\n    BigInt[] result = [a, b, c];\n    for (n; n > 2; n--)\n\
    \    {\n        if (n.isEven)\n        {\n            result ~= 1 + n / 2;\n \
    \       }\n        else\n        {\n            result ~= a + b + c;\n       \
    \     temp = a;\n            a = b;\n            b = c;\n            c = temp;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmlqem218.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[n + 1];\n \
    \   res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for (long i = 3; i <= n;\
    \ i++) \n    {\n        if (i % 2 == 0) \n        {\n            res[i] = 1 +\
    \ i / 2;\n        }\n        else \n        {\n            res[i] = res[i - 1]\
    \ + res[i - 2] + res[i + 1];\n        }\n    }\n    return res;\n}\n/*\n    1.\u89E3\
    \u6CD5\uFF1A\n        \u601D\u8DEF\u8FD8\u662F\u50CF\u6590\u6CE2\u90A3\u5951\u6570\
    \u5217\u4E00\u6837\uFF0C\u53EA\u4E0D\u8FC7\u8FD9\u6B21\u8981\u7528\u5230\u6570\
    \u7EC4\u3002\u56E0\u4E3A\u9898\u76EE\u8981\u6C42\u524Dn\u4E2A\u6570\u5B57\uFF0C\
    \u6240\u4EE5\u6211\u4EEC\u628An+1\u4E2A\u6570\u5B57\u90FD\u5B58\u8FDB\u6570\u7EC4\
    \u91CC\u3002\u7136\u540E\u5F53n\u7684\u503C\u5927\u4E8E\u7B49\u4E8E3\u7684\u65F6\
    \u5019\uFF0C\n        \u6211\u4EEC\u5C31\u628A\u5B83\u548C\u524D\u4E24\u4E2A\u6570\
    \u5B57\u52A0\u8D77\u6765\u8D4B\u503C\u7ED9n\u4F4D\u7F6E\u4E0A\u7684\u6570\u5B57\
    \uFF0C\u5982\u679Cn\u7684\u503C\u662F\u5076\u6570\u7684\u8BDD\uFF0C\u90A3\u4E48\
    \u6211\u4EEC\u5C31\u628A\u5B83\u9664\u4EE52\u518D\u52A01\uFF0C\u5982\u679Cn\u7684\
    \u503C\u662F\u5947\u6570\u7684\u8BDD\uFF0C\u90A3\u4E48\u6211\u4EEC\u5C31\u628A\
    \u5B83\u52A0\u4E0A\u524D\u4E24\u4E2A\u6570\u5B57\u8D4B\u503C\u7ED9n\u4F4D\u7F6E\
    \u4E0A\u7684\u6570\u5B57\u3002\n*/\nunittest\n{\n    alias candidate = tri;\n\n\
    \    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c4vgqpf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n == 0 ? [1L] : \n       \
    \    n == 1 ? [1L, 3L] : \n           n == 2 ? [1L, 3L, 2L] : \n           [1L,\
    \ 3L, 2L] ~ tri(n - 3).map!(a => a + 3 * n);\n}\n/*\n    TASK:\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy8zli7wl.d(29): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpy8zli7wl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return iota(n + 1).map!(a => (a <\
    \ 3) ? 3 : \n                                   (a % 2) ? tri(a - 1) + tri(a -\
    \ 2) + tri(a + 1) :\n                                            1 + a / 2).array;\n\
    }\n/*\n    Python solution:\n    def tri(n):\n        return range(n + 1) if n\
    \ <= 1 else [3] + [1 + n / 2 if n % 2 == 0 else tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) for n in range(1, n + 1)]\n*/\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzmhtcr96.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] a;\n    a = new long[n + 1];\n\
    \    a[0] = 1;\n    a[1] = 3;\n    a[2] = 2;\n    int i = 2;\n    while (i <=\
    \ n)\n    {\n        long temp = 0;\n        temp = (i % 2 == 0) ? (1 + i / 2)\
    \ : (a[i - 1] + a[i - 2] + a[i + 1]);\n        a[i] = temp;\n        i++;\n  \
    \  }\n    return a;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5gdi5tw1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) \n    {\n        return\
    \ [1L];\n    }\n    return tri(n-1) ~ [3L, 2L, 8L][iota(n) % 3];\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sva94p8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  return n == 0 ? empty : unfold!(b =>\
    \ \n  {\n    if (b.n == 1)\n      return tuple(3L, tuple(b.n + 1, tuple(b.sum\
    \ + 3, 3L)));\n    else if (b.n % 2 == 0)\n      return tuple(b.sum + b.n / 2,\
    \ tuple(b.n + 1, tuple(b.sum + b.n / 2, b.sum)));\n    else\n      return tuple(b.sum\
    \ + b.n - 1 + b.n - 2 + b.n + 1, tuple(b.n + 1, tuple(b.sum + b.n - 1 + b.n -\
    \ 2 + b.n + 1, b.sum)));\n  }, tuple(0L, tuple(1L, tuple(0L, 0L))), n + 1).dropOne.array;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfhgtpfu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 2 \n        ? [1L, 3L,\
    \ 2L] \n        : tri(n - 1).dup.append(\n            n % 2\n                ?\
    \ tri(n - 1).back + tri(n - 2).back + tri(n + 1).back\n                : 1 + n\
    \ / 2\n            );\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp53_wakk3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    // long[] fib = new long[int.max];\n\
    \    long[] tri = [ 1, 3, 2 ];\n    // return tri[0..$];\n    return tri[0..min(n,\
    \ 2)];\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpffhgifo4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    /* \n    */\n    long[] trib;\n \
    \   auto x = new Tuple!(long, long, long)(1,3,2);\n    trib = [1,3,2];\n    for(int\
    \ i = 3; i < n; i++)\n    {\n        if(i % 2 == 0)\n        {\n            trib\
    \ ~= x[0] + x[1] + x[2];\n        }\n        else\n        {\n            trib\
    \ ~= x[0] + (i/2);\n        }\n    }\n    trib ~= x[0] + x[1] + x[2];\n    return\
    \ trib;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4m9fro3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    // Will be implemented later.\n \
    \   return new long[1];\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxhewz86v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int size = (int)n+1;\n    long[]\
    \ result = new long[size];\n    if(n==0)\n    {\n        return result;\n    }\n\
    \    result[0] = 1;\n    if(n==1)\n    {\n        return result;\n    }\n    result[1]\
    \ = 3;\n    if(n==2)\n    {\n        return result;\n    }\n    result[2] = 2;\n\
    \    for(int i = 3; i < size; i++)\n    {\n        if(i%2==0)\n        {\n   \
    \         result[i] = (1+(i/2));\n        }\n        else\n        {\n       \
    \     result[i] = result[i-1]+result[i-2]+result[i+1];\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl7ij4xr4.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl7ij4xr4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  long[] result = new long[n + 1];\n\
    \  for (int i = 0; i <= n; i++) \n  {\n    if (i == 0) \n    {\n      result[i]\
    \ = 1;\n    } \n    else if (i == 1) \n    {\n      result[i] = 3;\n    } \n \
    \   else if (i == 2) \n    {\n      result[i] = 2;\n    } \n    else if (i ==\
    \ 3) \n    {\n      result[i] = 8;\n    } \n    else if (i % 2 == 0) \n    {\n\
    \      result[i] = 1 + i / 2;\n    } \n    else \n    {\n      result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n  }\n  return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcqy98ekk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int N = (int) n;\n    long[] result\
    \ = new long[N + 1];\n    result[0] = 1;\n    result[1] = 3;\n    result[2] =\
    \ 2;\n    if (n <= 2) \n    {\n        return result[0..$];\n    }\n    int i\
    \ = 3;\n    while (i <= N) \n    {\n        if (i & 1) \n        {\n         \
    \   result[i] = 1 + i / 2;\n        } \n        else \n        {\n           \
    \ result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    \
    \    i++;\n    }\n    return result[0..$];\n}\n/*\nTest.describe(\"tri\")\n{\n\
    \    Test.it(\"Basic tests\")\n    {\n        long[] trib1 = [1L, 3L, 2L, 8L];\n\
    \        Test.assertSimilar(tri(3L), trib1);\n        long[] trib2 = [1L, 3L,\
    \ 2L, 8L, 6L, 15L, 13L, 34L, 29L, 80L, 71L, 188L, 163L, 430L, 373L, 947L, 810L,\
    \ 2057L, 1777L, 4415L, 3780L, 9171L, 7807L, 19162L, 16383L, 40408L, 34527L, 83380L,\
    \ 70890L, 168601L, 144791L, 337147L, 293826L, 662146L, 573763L, 1272807L, 1103635L,\
    \ 2409384L, 2108253L, 4489949L, 3957265L, 8327200L, 7381685L, 15424085L, 13600388L,\
    \ 27783048L, 24474728L, 50133449L, 44278613L, 89343588L, 79187843L, 158404064L,\
    \ 141750970L, 281445079L, 252267221L, 493870315L, 441844824L, 868368096L, 777618075\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpohdncqki.d(24): Error: C style cast illegal, use cast(int)n\n/tmp/tmpohdncqki.d(48):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpohdncqki.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret = new long[n + 1];\n \
    \   for (long i = 0; i <= n; i++) \n    {\n        if (i == 0) ret[i] = 1;\n \
    \       else if (i <= 2) ret[i] = 3;\n        else ret[i] = ret[i - 1] + ret[i\
    \ - 2] + ret[i - 3];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4lhf7uz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n <= 1) return [1L, 3L];\n  \
    \  if (n == 2) return [1L, 3L, 2L];\n    long[] seq = [1L, 3L, 2L];\n    foreach\
    \ (i; 2..n)\n    {\n        seq ~= !(i % 2) ? 1 + i / 2 : seq[$ - 1] + seq[$ -\
    \ 2] + seq[$ - 3];\n    }\n    return seq;\n}\n/*\n    >>> tri(1L)\n    [1L, 3L]\n\
    \    >>> tri(2L)\n    [1L, 3L, 2L]\n    >>> tri(5L)\n    [1L, 3L, 2L, 8L, 3L,\
    \ 10L]\n    >>> tri(7L)\n    [1L, 3L, 2L, 8L, 3L, 10L, 4L, 19L]\n    >>> tri(20L)\n\
    \    [1L, 3L, 2L, 8L, 3L, 10L, 4L, 19L, 11L, 5L, 13L, 20L, 7L, 17L, 12L, 9L, 22L,\
    \ 6L, 14L, 23L]\n*/\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfqt7omow.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 1L ? new long[] {1L} :\
    \ n < 2L ? new long[] {1L, 3L} : n < 3L ? new long[] {1L, 3L, 2L} : n < 4L ? new\
    \ long[] {1L, 3L, 2L, 8L} : \n        (n > 2L ? (n - 1L) / 2L * (n - 2L) / 2L\
    \ * (n + 1L) / 2L : (n - 1L) / 2L * (n - 2L) / 2L * (n + 1L) / 2L) + \n      \
    \  (n > 2L ? (n - 2L) / 2L * (n - 1L) / 2L * (n + 1L) / 2L : (n - 2L) / 2L * (n\
    \ - 1L) / 2L * (n + 1L) / 2L) + \n        (n > 2L ? (n - 1L) / 2L * (n - 2L) /\
    \ 2L * (n + 1L) / 2L : (n - 1L) / 2L * (n - 2L) / 2L * (n + 1L) / 2L) +\n    \
    \    (n > 2L ? (n - 2L) / 2L * (n - 1L) / 2L * (n + 1L) / 2L : (n - 2L) / 2L *\
    \ (n - 1L) / 2L * (n + 1L) / 2L) +\n        (n > 2L ? (n - 1L) / 2L * (n - 2L)\
    \ / 2L * (n + 1L) / 2L : (n - 1L) / 2L * (n - 2L) / 2L * (n + 1L) / 2L) +\n  \
    \      (n > 2L ? (n - 2L) / 2L * (n - 1L) / 2L * (n + 1L) / 2L : (n - 2L) / 2L\
    \ * (n - 1L) / 2L * (n + 1L) / 2L) +\n        (n > 2L ? (n - 1L) / 2L * (n\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6oisxzya.d(24): Error: found \''{\'' when expecting \'':\''\n/tmp/tmp6oisxzya.d(24):
    Error: found \''}\'' when expecting \'';\'' following return statement\n/tmp/tmp6oisxzya.d(24):
    Error: found \'':\'' instead of statement\n/tmp/tmp6oisxzya.d(24): Error: Declaration
    expected, not \'':\''\n/tmp/tmp6oisxzya.d(36): Error: Declaration expected, not
    \''assert\''\n/tmp/tmp6oisxzya.d(37): Error: Declaration expected, not \''assert\''\n/tmp/tmp6oisxzya.d(38):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp6oisxzya.d(39): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp6oisxzya.d(40): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp6oisxzya.d(41): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp6oisxzya.d(42): Error: Declaration expected, not \''assert\''\n/tmp/tmp6oisxzya.d(43):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp6oisxzya.d(44): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp6oisxzya.d(45): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp6oisxzya.d(46): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6oisxzya.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  long[] res = new long[n+1];\n  res[0]\
    \ = 1;\n  res[1] = 3;\n  res[2] = 2;\n  for(long i = 3; i <= n; i++) \n  {\n \
    \   res[i] = (i % 2 == 0) ? 1 + i / 2 : res[i-1] + res[i-2] + res[i+1];\n  }\n\
    \  return res;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbjon7fta.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n\tauto result = new long[n + 1];\n\t\
    result[0] = 1;\n\tresult[1] = 3;\n\tresult[2] = 2;\n\tforeach(i; 3 .. n + 1)\n\
    \t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tresult[i] = 1 + i / 2;\n\t\t}\n\t\telse\n\
    \t\t{\n\t\t\tresult[i] = result[i - 1] + result[i - 2] + result[i + 1];\n\t\t\
    }\n\t}\n\treturn result;\n}\n/*\nFormal Inputs & Outputs\nInput description\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa9h1rwom.d(41): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpa9h1rwom.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret;\n    if (n == 0) {\n\
    \        ret = new long[0];\n    } else if (n == 1) {\n        ret = new long[1];\n\
    \        ret[0] = 3;\n    } else {\n        ret = new long[n + 1];\n        ret[0]\
    \ = 1;\n        ret[1] = 3;\n        ret[2] = 2;\n        if (n > 2) {\n     \
    \       for (size_t i = 3; i < n + 1; i++) {\n                if (i % 2 == 0)\
    \ {\n                    ret[i] = 1 + i / 2;\n                } else {\n     \
    \               ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1];\n             \
    \   }\n            }\n        }\n    }\n    return ret;\n}\n/*\nHow to run:\n\
    \    rdmd --main -unittest Tribonacci.d\n*/\nunittest\n{\n    assert(tri(0L) ==\
    \ []);\n    assert(tri(1L) == [3L]);\n    assert(tri(2L) == [1L, 3L, 2L]);\n \
    \   assert(tri(3L) == [1L, 3L, 2L, 8L]);\n    assert(tri(4L) == [1L, 3L, 2L, 8L,\
    \ 3L]);\n    assert(tri(5L) == [1L, 3L, 2L, 8L, 3L, 9L]);\n    assert(tri(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 9L, 5L]);\n    assert(tri(7L) == [1L, 3L, 2L, 8L, 3L,\
    \ 9L, 5L, 17L]);\n    assert(tri(8L) == [1L, 3L, 2L, 8L, 3L, 9L, 5L, 17L, 6L]);\n\
    \    assert(tri(9L) == [1L, 3L, 2L, 8L, 3L, 9L, 5L, 17L, 6L, 15L]);\n    assert(tri(10L)\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm87tqz9x.d(64): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmpm87tqz9x.d(65):
    Error: found \''{\'' when expecting \'';\'' following statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpm87tqz9x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) \n    {\n        return\
    \ [1L];\n    }\n    if (n == 1) \n    {\n        return [1L, 3L];\n    }\n   \
    \ auto tri = tuple(1L, 3L, 2L);\n    auto half = 0L;\n    auto tmp = 0L;\n   \
    \ auto result = long[n + 1];\n    result[0] = 1L;\n    result[1] = 3L;\n    result[2]\
    \ = 2L;\n    for (long i = 3; i <= n; i++) \n    {\n        if (i % 2 == 0) \n\
    \        {\n            half = i / 2;\n            result[i] = half + 1;\n   \
    \     }\n        else \n        {\n            tmp = get!(tri, 2) + get!(tri,\
    \ 1) + get!(tri, 0);\n            tri[0] = get!(tri, 1);\n            tri[1] =\
    \ get!(tri, 2);\n            tri[2] = tmp;\n            result[i] = tmp;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuuj0qy0g.d(35): Error: found \''[\'' when expecting \''.\''
    following long\n/tmp/tmpuuj0qy0g.d(35): Error: semicolon expected following auto
    declaration, not \'']\''\n/tmp/tmpuuj0qy0g.d(35): Error: found \'']\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuj0qy0g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret = n == 0 ? new long[0]\
    \ : new long[(int)n + 1];\n    ret[0] = 1;\n    ret[1] = 3;\n    for (int i =\
    \ 2; i < n; i++)\n    {\n        ret[i] = i % 2 == 0 ? 1 + i / 2 : ret[i - 1]\
    \ + ret[i - 2] + ret[i + 1];\n    }\n    return ret;\n}\n/*\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmuuqeycj.d(24): Error: C style cast illegal, use cast(int)n\n/tmp/tmpmuuqeycj.d(33):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmuuqeycj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  long[] n2 = new long[0];\n  long[]\
    \ n1 = new long[0];\n  long[] n0 = new long[0];\n  long[] t;\n  int i;\n  if (n\
    \ == 0)\n  {\n    return [1L];\n  }\n  if (n == 1)\n  {\n    return [1L, 3L];\n\
    \  }\n  if (n == 2)\n  {\n    return [1L, 3L, 2L];\n  }\n  t = [1L, 3L, 2L];\n\
    \  for (i = 3; i <= n; i++)\n  {\n    if (i % 2 == 0)\n    {\n      t ~= (1 +\
    \ i / 2);\n    }\n    else\n    {\n      t ~= (t[$ - 3] + t[$ - 2] + t[$ - 1]);\n\
    \    }\n  }\n  return t;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkv4p8lwt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[(int)n + 1];\n\
    \    arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    for(int i = 3; i < arr.length;\
    \ i++)\n    {\n        if(i % 2 == 0)\n        {\n            arr[i] = 1 + i /\
    \ 2;\n        }\n        else\n        {\n            arr[i] = arr[i - 1] + arr[i\
    \ - 2] + arr[i + 1];\n        }\n    }\n    return arr;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpno9s1_kq.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpno9s1_kq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] r=new long[n+1];\n    r[0]=1;\n\
    \    r[1]=3;\n    r[2]=2;\n    for(int i=3;i<=n;i++)\n    {\n        if(i%2==0)\n\
    \            r[i]=1+(i/2);\n        else\n            r[i]=r[i-1]+r[i-2]+r[i+1];\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5aplr4yv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long t1 = 1;\n    long t2 = 3;\n\
    \    long t3 = 2;\n    long t;\n    long[] rv = new long[(int)n + 1];\n    rv[0]\
    \ = t1;\n    rv[1] = t2;\n    rv[2] = t3;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        t = i % 2 != 0 ? t1 + t2 + t3 : 1 + i / 2;\n        t1 = t2;\n\
    \        t2 = t3;\n        t3 = t;\n        rv[(int)i] = t;\n    }\n    return\
    \ rv;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph_aki1p2.d(28): Error: C style cast illegal, use cast(int)n\n/tmp/tmph_aki1p2.d(38):
    Error: C style cast illegal, use cast(int)i\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmph_aki1p2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) return new long[0];\n\
    \    long[] res = new long[(int)n + 1];\n    res[0] = 1;\n    res[1] = 3;\n  \
    \  res[2] = 2;\n    int len = (int)n;\n    for (int i = 3; i < len; i++)\n   \
    \ {\n        res[i] = res[i - 3] + res[i - 2] + res[i - 1];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2v14uq5g.d(25): Error: C style cast illegal, use cast(int)n\n/tmp/tmp2v14uq5g.d(29):
    Error: C style cast illegal, use cast(int)n\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2v14uq5g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n < 1) return new long[0];\n\
    \    long[] r = new long[n + 1];\n    r[0] = 1;\n    r[1] = 3;\n    bool odd =\
    \ true;\n    for (int i = 2; i < n + 1; i++)\n    {\n        if (odd)\n      \
    \  {\n            r[i] = r[i - 1] + r[i - 2] + r[i + 1];\n        }\n        else\n\
    \        {\n            r[i] = 1 + i / 2;\n        }\n        odd = !odd;\n  \
    \  }\n    return r;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8rqmslu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    switch(n)\n    {\n        case 0:\
    \ return [0L];\n        case 1: return [1L];\n        case 2: return [1L, 3L];\n\
    \        default: break;\n    }\n    return [1L, 3L, 2L] ~ take(n-2) ~ [0L]\n\
    \                .reduce!((a,b)=>a.zip(b).map!(mixin(a,b)=>a+b).array()).array();\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpln1w8k_t.d(32): Error: found \'',\'' when expecting \'')\''\n/tmp/tmpln1w8k_t.d(32):
    Error: found \''b\'' when expecting \'')\'' following template argument list\n/tmp/tmpln1w8k_t.d(32):
    Error: found \''=>\'' when expecting \'';\'' following return statement\n/tmp/tmpln1w8k_t.d(32):
    Error: found \'')\'' when expecting \'';\'' following statement\n/tmp/tmpln1w8k_t.d(32):
    Error: found \'')\'' when expecting \'';\'' following statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpln1w8k_t.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return map!((x) => (n == 1L) ? 3L\
    \ : \n                                  (n % 2L == 0L) ? 1L + n / 2L : 1L,\n \
    \                                 iota(1L, n + 1L)).array;\n}\nunittest\n{\n \
    \   alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1k8yeaoa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result;\n    long[] result1;\n\
    \    if(n == 0)\n    {\n        result = new long[0];\n        return result;\n\
    \    }\n    else if(n == 1)\n    {\n        result = new long[1];\n        result[0]\
    \ = 1;\n        return result;\n    }\n    else if(n == 2)\n    {\n        result\
    \ = new long[2];\n        result[0] = 1;\n        result[1] = 3;\n        return\
    \ result;\n    }\n    else\n    {\n        result = new long[n + 1];\n       \
    \ result[0] = 1;\n        result[1] = 3;\n        result[2] = 2;\n        if(n\
    \ % 2 == 0)\n        {\n            result[3] = 1 + (n / 2);\n            n =\
    \ n - 1;\n        }\n        else\n        {\n            result[3] = 3;\n   \
    \     }\n        if(n > 3)\n        {\n            for(int i = 4; i <= n; i++)\n\
    \            {\n                if(i % 2 == 0)\n                {\n          \
    \          result[i] = 1 + (i / 2);\n                }\n                else\n\
    \                {\n                    result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1];\n                }\n            }\n        }\n        return\
    \ result;\n    }\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6w4ipno.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret = new long[n + 1];\n \
    \   ret[0] = 1;\n    ret[1] = 3;\n    ret[2] = 2;\n    long next = 8;\n    for\
    \ (int i = 3; i < n + 1; i++)\n    {\n        ret[i] = next;\n        next = tri(i\
    \ - 1) + tri(i - 2) + tri(i + 1);\n    }\n    return ret;\n}\nunittest\n{\n  \
    \  alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8osxou29.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  long[] r;\n  long a = 1;\n  long b\
    \ = 3;\n  long c = 2;\n  long d = 0;\n  for(int i = 0; i < n + 1; i++)\n  {\n\
    \    if(i == 0)\n    {\n      r ~= a;\n    }\n    else if(i == 1)\n    {\n   \
    \   r ~= b;\n    }\n    else if(i == 2)\n    {\n      r ~= c;\n    }\n    else\n\
    \    {\n      if(i % 2 == 0)\n      {\n        d = 1 + i / 2;\n      }\n     \
    \ else\n      {\n        d = r[i - 1] + r[i - 2] + r[i - 3];\n      }\n      r\
    \ ~= d;\n    }\n  }\n  return r;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4uy3am07.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n+1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3;\
    \ i <= n; i++)\n    {\n        result[i] = n % 2 == 0 ? 1+ n/2 : result[i-1] +\
    \ result[i-2] + result[i+1];\n    }\n    return result;\n}\n/*\nNotes: \n    The\
    \ first 3 elements are 1, 3, 2\n    If the integer is odd, the number is the sum\
    \ of the next 3 elements\n    If the integer is even, the number is 1 + n/2\n\
    \    The result array is the length of n + 1 to hold the correct number of elements\n\
    \    The initial array elements are 1, 3, 2\n    The loop iterates through the\
    \ initial 3 elements\n    If the integer is even, the number is 1 + n/2\n    If\
    \ the integer is odd, the number is the sum of the next 3 elements\n*/\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfaiwj1vf.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfaiwj1vf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = n == 0 ? new long[0]\
    \ : new long[n+1];\n    if(n == 0) return arr;\n    arr[0] = 1;\n    if(n == 1)\
    \ return arr;\n    arr[1] = 3;\n    if(n == 2) return arr;\n    arr[2] = 2;\n\
    \    if(n == 3) return arr;\n    for(long i = 3; i <= n; i++)\n    {\n       \
    \ if(i % 2 == 0)\n        {\n            arr[i] = 1 + i / 2;\n        }\n    \
    \    else\n        {\n            arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n \
    \       }\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwbeyn22.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result;\n    result.length\
    \ = 0;\n    foreach(i; 1 .. n + 1)\n    {\n        if(i == 1)\n        {\n   \
    \         result ~= 3;\n        }\n        else if(i % 2 == 0)\n        {\n  \
    \          result ~= (1 + i / 2);\n        }\n        else\n        {\n      \
    \      result ~= (result[$ - 1] + result[$ - 2] + result[$ - 3]);\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp662r8w0m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n   int[] result = new int[(int)n+1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for(int i = 3;\
    \ i <= n; i++)\n    {\n      if(i % 2 == 0) result[i] = i / 2;\n      else result[i]\
    \ = result[i-1] + result[i-2] + result[i+1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcuoydjfr.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcuoydjfr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret = new long[n+1];\n   \
    \ ret[0] = 1;\n    if(n > 0)\n        ret[1] = 3;\n    if(n > 1)\n        ret[2]\
    \ = 2;\n    if(n > 2)\n    {\n        for(int i = 3; i <= n; i++)\n        {\n\
    \            if(i % 2 == 0)\n                ret[i] = 1 + i / 2;\n           \
    \ else\n                ret[i] = ret[i-1] + ret[i-2] + ret[i+1];\n        }\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3dryo38x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int nn = cast(int)n;\n    long[]\
    \ arr = new long[nn+1];\n    arr[0] = 1;\n    if(n == 0)\n        return arr;\n\
    \    arr[1] = 3;\n    if(n == 1)\n        return arr;\n    arr[2] = 2;\n    for(int\
    \ i = 3; i <= nn; i++)\n    {\n        if(i%2 == 0)\n            arr[i] = 1 +\
    \ i/2;\n        else\n            arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n \
    \   }\n    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpezxa_o0z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int i;\n    long[] ret = new long[n+1];\n\
    \    ret[0] = 1;\n    ret[1] = 3;\n    for(i = 2; i < n; i++)\n    {\n       \
    \ if(i % 2 == 0)\n        {\n            ret[i] = (1 + i / 2);\n        }\n  \
    \      else\n        {\n            ret[i] = ret[i-1] + ret[i-2] + ret[i+1];\n\
    \        }\n    }\n    return ret;\n}\n/*\nIn mathematics, the Fibonacci numbers\
    \ or Fibonacci sequence are the numbers in the \n    following integer sequence:\n\
    \    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\n    By definition, the\
    \ first two numbers in the Fibonacci sequence are 0 and 1, and each \n    subsequent\
    \ number is the sum of the previous two.\n    Example:\n    >>> [fibonacci(n)\
    \ for n in range(1, 11)]\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n*/\nlong fibonacci(long\
    \ n)\n{\n    int i;\n    long[] ret = new long[n+1];\n    ret[0] = 0;\n    ret[1]\
    \ = 1;\n    for(i = 2; i < n; i++)\n    {\n        ret[i] = ret[i-1] + ret[i-2];\n\
    \    }\n    return ret[n-1];\n}\n/*\nThe prime numbers are the numbers greater\
    \ than 1 which are divisible only by themselves \n    and 1.\n    The first prime\
    \ numbers are: 2, 3, 5, 7, 11, 13, 17, 19, 23...\n    You will be given a number\
    \ and your task is to return the closest prime number.\n    Examples:\n    closest_prime(1)\
    \ == 2\n    closest_prime(100) == 101\n*/\nlong closest_prime(long num)\n{\n \
    \   long ret = num;\n    bool flag = false;\n    int i;\n    if(num <= 2)\n  \
    \  {\n        return 2;\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjmulq640.d(80): Error: found \''unittest\'' instead of statement\n/tmp/tmpjmulq640.d(95):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjmulq640.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[(int)n+1];\n\
    \    res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for(int i = 3; i <= n;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            res[i] = 1 + i\
    \ / 2;\n        }\n        else\n        {\n            res[i] = res[i-1] + res[i-2]\
    \ + res[i+1];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpesvh87qk.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpesvh87qk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0)\n        return new long[];\n\
    \    if (n == 1)\n        return [1L];\n    if (n == 2)\n        return [1L,3L];\n\
    \    if (n == 3)\n        return [1L,3L,2L];\n    long[] fib = [1L,3L,2L];\n \
    \   while (fib.length < n + 1)\n    {\n        int last = fib.length - 1;\n  \
    \      if (last % 2 == 0)\n            fib ~= 1 + last / 2;\n        else\n  \
    \          fib ~= fib[last - 1] + fib[last - 2] + fib[last + 1];\n    }\n    return\
    \ fib;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjgex9yg3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  int size = (int)n+1;\n  long[] res\
    \ = new long[size];\n  if(n<=0)\n    return [1L];\n  if(n<=1)\n    return [1L,3L];\n\
    \  res[0] = 1L;\n  res[1] = 3L;\n  res[2] = 2L;\n  if(n>2)\n  {\n    for(int i=3;i<size;i++)\n\
    \    {\n      if(i%2 == 0)\n        res[i] = (1 + (i / 2));\n      else\n    \
    \    res[i] = res[i-1] + res[i-2] + res[i+1];\n    }\n  }\n  return res;\n}\n\
    /*\n    long[] tri(long n) \n    {\n      long[] res = new long[n+1];\n      res[0]\
    \ = 1;\n      if(n==0)\n        return res;\n      res[1] = 3;\n      if(n==1)\n\
    \        return res;\n      res[2] = 2;\n      if(n==2)\n        return res;\n\
    \      for(int i=3;i<=n;i++)\n      {\n        if(i%2==0)\n          res[i] =\
    \ 1 + (i / 2);\n        else\n          res[i] = res[i-1] + res[i-2] + res[i+1];\n\
    \      }\n      return res;\n    }\n*/\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppsejpk7q.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppsejpk7q.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    if(n==0) return\
    \ take(result, 0);\n    if(n==1) return take(result, 1);\n    if(n==2) return\
    \ take(result, 2);\n    foreach(i; 3..n+1)\n    {\n        if(i%2==0)\n      \
    \  {\n            result[i] = 1 + i/2;\n        }\n        else\n        {\n \
    \           result[i] = result[i-1] + result[i-2] + result[i+1];\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsw1n44gh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    if (n > 0)\n    {\n        result[1] = 3;\n        if\
    \ (n > 1)\n        {\n            result[2] = 2;\n            for (long i = 3;\
    \ i <= n; i++)\n            {\n                if (i % 2 == 0)\n             \
    \   {\n                    result[i] = 1 + i / 2;\n                }\n       \
    \         else\n                {\n                    result[i] = result[i -\
    \ 1] + result[i - 2] + result[i + 1];\n                }\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi0tf6piz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret;\n    if (n < 0) \n  \
    \  {\n        return ret;\n    } \n    else \n    {\n        ret ~= 1;\n     \
    \   if (n == 0) \n        {\n            return ret;\n        } \n        else\
    \ \n        {\n            ret ~= 3;\n            if (n == 1) \n            {\n\
    \                return ret;\n            } \n            else \n            {\n\
    \                ret ~= 2;\n                for (int i = 2; i < n; i++) \n   \
    \             {\n                    if (i % 2 == 0) \n                    {\n\
    \                        ret ~= 1 + i / 2;\n                    } \n         \
    \           else \n                    {\n                        ret ~= ret[$\
    \ - 1] + ret[$ - 2] + ret[$ - 3];\n                    }\n                }\n\
    \                return ret;\n            }\n        }\n    }\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp86_pu5lm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n\tlong[] t = new long[(cast(int)n)+1];\n\
    \tif(n < 0) return t;\n\tt[0] = 1;\n\tt[1] = 3;\n\tfor(int i = 2; i < n; i++)\n\
    \t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tt[i] = 1 + i / 2;\n\t\t}\n\t\telse\n\t\t\
    {\n\t\t\tt[i] = t[i-1] + t[i-2] + t[i+1];\n\t\t}\n\t}\n\treturn t;\n}\n/*\nDnaStrand(\"\
    ATTGC\") // return \"TAACG\"\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp87dw5wnv.d(41): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp87dw5wnv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr=new long[n+1];\n    if(n==0)return\
    \ new long[0];\n    if(n==1)return [1];\n    if(n==2)return [1,1];\n    arr[0]=1;\n\
    \    arr[1]=1;\n    arr[2]=1;\n    for(long i=3;i<=n;i++)\n    {\n        if(i%2==0)\n\
    \        {\n            arr[i]=1+i/2;\n        }\n        else\n        {\n  \
    \          arr[i]=arr[i-1]+arr[i-2]+arr[i+1];\n        }\n    }\n    return arr;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppf8ks0m5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr;\n    arr ~= 1L;\n   \
    \ arr ~= 3L;\n    arr ~= 2L;\n    //arr ~= 1L;\n    foreach(i;1..n)\n    {\n \
    \       if(i % 2 == 0)\n        {\n            arr ~= 1L + i / 2;\n        }\n\
    \        else\n        {\n            arr ~= arr[$-3] + arr[$-2] + arr[$-1];\n\
    \        }\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpos8i148f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return true ? iota(0, n + 1).map!((i)\
    \ => i == 0 ? 1 : i < 3 ? i * 3 : tri(i - 1)[$ - 1] + tri(i - 2)[$ - 1] + tri(i\
    \ + 1)[$ - 1]).array : null;\n}\nunittest\n{\n    alias candidate = tri;\n\n \
    \   assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg6zisme5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] A = new long[(int)n+1];\n\
    \    A[0] = 1;\n    A[1] = 3;\n    A[2] = 2;\n    for(int i = 3; i < A.length;\
    \ i++)\n    {\n        if(i % 2 == 0)\n        {\n            A[i] = 1 + (i /\
    \ 2);\n        }\n        else\n        {\n            A[i] = A[i-1] + A[i-2]\
    \ + A[i+1];\n        }\n    }\n    return A;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpormqblqh.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpormqblqh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto result = long[](n + 1);\n  \
    \  result[0] = 1;\n    if (n >= 1)\n        result[1] = 3;\n    for (auto i =\
    \ 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result[i] = 1 +\
    \ i / 2;\n        else\n            result[i] = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2fzqbwad.d(24): Error: found \''[\'' when expecting \''.\''
    following long\n/tmp/tmp2fzqbwad.d(24): Error: found \'']\'' when expecting identifier
    following \''long.\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2fzqbwad.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  return n == 0 ? new long[] { 0 } \n\
    \       : n == 1 ? new long[] { 1, 3 } \n       : n == 2 ? new long[] { 1, 3,\
    \ 2 } \n       : n % 2 == 0 ? tri(n - 1) ~ cast(long) (1 + n / 2) \n       : tri(n\
    \ - 1) ~ tri(n - 2) ~ tri(n + 1);\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsbtszc_n.d(24): Error: found \''{\'' when expecting \'':\''\n/tmp/tmpsbtszc_n.d(24):
    Error: found \''}\'' when expecting \'';\'' following return statement\n/tmp/tmpsbtszc_n.d(25):
    Error: found \'':\'' instead of statement\n/tmp/tmpsbtszc_n.d(26): Error: Declaration
    expected, not \'':\''\n/tmp/tmpsbtszc_n.d(29): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsbtszc_n.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] rslt = new long[n + 1];\n\
    \    for (long i = 0; i <= n; i++)\n    {\n        long r = i % 2;\n        if\
    \ (r == 0)\n        {\n            rslt[i] = 1 + i / 2;\n        }\n        else\n\
    \        {\n            rslt[i] = rslt[i - 1] + rslt[i - 2] + rslt[i + 1];\n \
    \       }\n    }\n    return rslt;\n}\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzluzrr5j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 0 ? new long[0] : n ==\
    \ 0 ? [1L] : n == 1 ? [1L, 3L] : n == 2 ? [1L, 3L, 2L] : n == 3 ? [1L, 3L, 2L,\
    \ 8L] : n == 4 ? [1L, 3L, 2L, 8L, 5L] : n == 5 ? [1L, 3L, 2L, 8L, 5L, 13L] : n\
    \ == 6 ? [1L, 3L, 2L, 8L, 5L, 13L, 21L] : n == 7 ? [1L, 3L, 2L, 8L, 5L, 13L, 21L,\
    \ 34L] : n == 8 ? [1L, 3L, 2L, 8L, 5L, 13L, 21L, 34L, 55L] : n == 9 ? [1L, 3L,\
    \ 2L, 8L, 5L, 13L, 21L, 34L, 55L, 89L] : n == 10 ? [1L, 3L, 2L, 8L, 5L, 13L, 21L,\
    \ 34L, 55L, 89L, 144L] : new long[0];\n}\nlong[] tri2(long n)\n{\n    return n\
    \ < 0 ? new long[0] : n == 0 ? [1L] : n == 1 ? [1L, 3L] : n == 2 ? [1L, 3L, 2L]\
    \ : n == 3 ? [1L, 3L, 2L, 8L] : n == 4 ? [1L, 3L, 2L, 8L, 5L] : n == 5 ? [1L,\
    \ 3L, 2L, 8L, 5L, 13L] : n == 6 ? [1L, 3L, 2L, 8L, 5L, 13L, 21L] : n == 7 ? [1L,\
    \ 3L, 2L, 8L, 5L, 13L, 21L, 34L] : n == 8 ? [1L, 3L, 2L, 8L, 5L, 13L, 21L, 34L,\
    \ 55L] : n == 9 ? [1L, 3L, 2L\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm8imlpne.d(29): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpm8imlpne.d(44):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpm8imlpne.d(44): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpm8imlpne.d(44): Error: expression
    expected, not \''}\''\n/tmp/tmpm8imlpne.d(44): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpm8imlpne.d(28): Error: found \''EOF\'' when expecting \'']\''\n/tmp/tmpm8imlpne.d(44):
    Error: found \''EOF\'' when expecting \'':\''\n/tmp/tmpm8imlpne.d(44): Error:
    expression expected, not \''EOF\''\n/tmp/tmpm8imlpne.d(44): Error: found \''EOF\''
    when expecting \'';\'' following return statement\n/tmp/tmpm8imlpne.d(44): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpm8imlpne.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  return iota(n+1).map!(x => x <= 1 ?\
    \ 3 : (x & 1 ? x - 1 : x / 2) + 1).array;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd48vzko1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto myTuple = tuple(1L, 3L, 2L);\n\
    \    if (n == 0) \n    {\n        return myTuple.take(0).array;\n    } \n    else\
    \ if (n == 1) \n    {\n        return myTuple.take(1).array;\n    } \n    else\
    \ if (n == 2) \n    {\n        return myTuple.take(2).array;\n    } \n    else\
    \ \n    {\n        auto myArray = new long[](n + 1);\n        myArray[0] = myTuple[0];\n\
    \        myArray[1] = myTuple[1];\n        myArray[2] = myTuple[2];\n        auto\
    \ i = 3;\n        while (i <= n) \n        {\n            myArray[i] = myArray[i\
    \ - 1] + myArray[i - 2] + myArray[i - 3];\n            i++;\n        }\n     \
    \   return myArray;\n    }\n}\nunittest\n{\n    alias candidate = tri;\n\n   \
    \ assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1w690gvs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return null;\n}\nunittest\n{\n  \
    \  alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp28dvlb1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n == 0 ? new long[] { 1L }\
    \ : n == 1 ? new long[] { 1L, 3L } : n == 2 ? new long[] { 1L, 3L, 2L } : \n \
    \          take(loop(Tuple!(1L, 3L, 2L), 0L, tup => tup[2] == n + 1 ? tup[0] :\
    \ tup[2] % 2 == 0 ? \n                    Tuple!(tup[0], tup[1], tup[2] + 1, 1\
    \ + tup[2] / 2) : tup[2] % 2 == 1 ? \n                    Tuple!(tup[0], tup[1],\
    \ tup[2] + 1, tup[0] + tup[1] + tup[2] + 1) : null\n                    ), n +\
    \ 1);\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu75o1ei4.d(24): Error: found \''{\'' when expecting \'':\''\n/tmp/tmpu75o1ei4.d(24):
    Error: found \''}\'' when expecting \'';\'' following return statement\n/tmp/tmpu75o1ei4.d(24):
    Error: found \'':\'' instead of statement\n/tmp/tmpu75o1ei4.d(24): Error: Declaration
    expected, not \'':\''\n/tmp/tmpu75o1ei4.d(29): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu75o1ei4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long t1 = 1;\n    long t2 = 3;\n\
    \    long t3 = 2;\n    long t4 = 8;\n    long temp;\n    long[] lst = new long[n\
    \ + 1];\n    lst[0] = t1;\n    lst[1] = t2;\n    lst[2] = t3;\n    for (int i\
    \ = 3; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            temp\
    \ = i / 2;\n            t4 = 1 + temp;\n        }\n        else\n        {\n \
    \           t4 = t3 + t2 + t1;\n        }\n        t1 = t2;\n        t2 = t3;\n\
    \        t3 = t4;\n        lst[i] = t4;\n    }\n    return lst;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpbx1s3e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return iota(n + 1).map!(x => x ==\
    \ 1 ? 3 : (x % 2 == 0 ? (1 + x / 2) : \n                                     \
    \                       (tri(x - 1)[$ - 1] + tri(x - 2)[$ - 1] + tri(x + 1)[$\
    \ - 1])));\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3poybaao.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[n+1];\n   \
    \ for(int i = 1; i <= n; i++)\n    {\n        if(i == 1)\n        {\n        \
    \    arr[i] = 3;\n        }\n        else if(i == 2)\n        {\n            arr[i]\
    \ = 2;\n        }\n        else if(i == 3)\n        {\n            arr[i] = 8;\n\
    \        }\n        else if(i % 2 == 0)\n        {\n            arr[i] = 1 + (i\
    \ / 2);\n        }\n        else\n        {\n            arr[i] = arr[i-1] + arr[i-2]\
    \ + arr[i+1];\n        }\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprw1pqz6x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret = new long[n + 1];\n \
    \   if (n == 0) return ret;\n    ret[0] = 1;\n    if (n == 1) return ret;\n  \
    \  ret[1] = 3;\n    if (n == 2) return ret;\n    ret[2] = 2;\n    for (long i\
    \ = 3; i <= n; i++)\n    {\n        if (i % 2 == 0) ret[i] = 1 + i / 2;\n    \
    \    else ret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1];\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbbo5tbl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tribonacci = new long[n +\
    \ 1];\n    for (int i = 0; i <= n; i++) \n    {\n        if (i == 0) tribonacci[i]\
    \ = 1;\n        else if (i == 1) tribonacci[i] = 3;\n        else if (i == 2)\
    \ tribonacci[i] = 2;\n        else tribonacci[i] = tribonacci[i - 1] + tribonacci[i\
    \ - 2] + tribonacci[i - 3];\n    }\n    return tribonacci;\n}\nunittest\n{\n \
    \   alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbv1xfhww.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n+1];\n\
    \    foreach(i;0..n)\n    {\n        if(i == 0)\n        {\n            result[i]\
    \ = 1;\n        }\n        else if(i == 1)\n        {\n            result[i] =\
    \ 3;\n        }\n        else if(i == 2)\n        {\n            result[i] = 2;\n\
    \        }\n        else if(i%2 == 0)\n        {\n            result[i] = i/2\
    \ + 1;\n        }\n        else\n        {\n            result[i] = result[i-1]\
    \ + result[i-2] + result[i+1];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_5lf0r0.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_5lf0r0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[(int)n + 1];\n\
    \    res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for (int i = 3; i <= n;\
    \ i++)\n    {\n        if (i % 2 == 0)\n        {\n            res[i] = 1 + i\
    \ / 2;\n        }\n        else\n        {\n            res[i] = res[i - 1] +\
    \ res[i - 2] + res[i + 1];\n        }\n    }\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp76dbhybt.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp76dbhybt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] output = new long[n + 1];\n\
    \    output[0] = 1;\n    if (n > 0)\n    {\n        output[1] = 3;\n        if\
    \ (n > 1)\n        {\n            output[2] = 2;\n            if (n > 2)\n   \
    \         {\n                foreach (i; 3 .. n + 1)\n                {\n    \
    \                if (i % 2 == 0)\n                    {\n                    \
    \    output[i] = 1 + i / 2;\n                    }\n                    else\n\
    \                    {\n                        output[i] = output[i - 1] + output[i\
    \ - 2] + output[i + 1];\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return output;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbq3416p5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 1 ? new long[]{1L} :\n\
    \           n < 2 ? new long[]{1L, 3L} :\n           n < 3 ? new long[]{1L, 3L,\
    \ 2L} :\n           new long[] {1L, 3L, 2L} \n                   ~ new long[]\
    \ \n                   {\n                       n % 2 == 0 ? (n / 2) + 1 :\n\
    \                       tri(n - 1)[$ - 1] + tri(n - 2)[$ - 1] + tri(n + 1)[$ -\
    \ 1]\n                   }.\n                   front(n - 2);\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp47buovo5.d(24): Error: found \''{\'' when expecting \'':\''\n/tmp/tmp47buovo5.d(24):
    Error: found \''}\'' when expecting \'';\'' following return statement\n/tmp/tmp47buovo5.d(24):
    Error: found \'':\'' instead of statement\n/tmp/tmp47buovo5.d(25): Error: Declaration
    expected, not \'':\''\n/tmp/tmp47buovo5.d(34): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47buovo5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto arr = new long[n + 1];\n   \
    \ foreach(i; 0 .. n + 1)\n    {\n        if(i == 0)\n        {\n            arr[i]\
    \ = 1;\n        }\n        else if(i == 1)\n        {\n            arr[i] = 3;\n\
    \        }\n        else if(i == 2)\n        {\n            arr[i] = 2;\n    \
    \    }\n        else if(i % 2 == 0)\n        {\n            arr[i] = 1 + (i /\
    \ 2);\n        }\n        else\n        {\n            arr[i] = arr[i - 1] + arr[i\
    \ - 2] + arr[i + 1];\n        }\n    }\n    return arr;\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbie4ii4k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n==0)\n        return [1L];\n\
    \    return iota(n).map!((x)=>(x==0)?1L:(x<=2)?3L:tri(x-1)[$-1]+tri(x-2)[$-1]+tri(x+1)[$-1]).array;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvlaguk5d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) \n    {\n        return\
    \ [1];\n    }\n    else if (n == 1) \n    {\n        return [1, 3];\n    }\n \
    \   else if (n == 2) \n    {\n        return [1, 3, 2];\n    }\n    else \n  \
    \  {\n        auto t = tri(n - 1);\n        auto a = t[$ - 1];\n        auto b\
    \ = t[$ - 2];\n        auto c = t[$ - 3];\n        if (n % 2 == 0) \n        {\n\
    \            t ~= 1 + n / 2;\n        }\n        else \n        {\n          \
    \  t ~= a + b + c;\n        }\n        return t;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnanits5b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    if(n == 1)\n        return result;\n\
    \    result[2] = 2;\n    for(long i = 3; i <= n; i++)\n    {\n        if(i % 2\
    \ == 0)\n            result[i] = 1 + i / 2;\n        else\n            result[i]\
    \ = result[i-1] + result[i-2] + result[i+1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47dxsgb8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto ans = appender!(long[])();\n\
    \    ans.put(1L);\n    ans.put(3L);\n    if (n <= 1) return ans.data;\n    ans.put(2L);\n\
    \    if (n == 2) return ans.data;\n    ans.put(8L);\n    foreach (i; 3 .. n)\n\
    \    {\n        auto last_1 = ans[$ - 1];\n        auto last_2 = ans[$ - 2];\n\
    \        auto last_3 = ans[$ - 3];\n        if (i % 2 == 0)\n        {\n     \
    \       ans.put(last_3 + last_2 + last_1);\n        }\n        else\n        {\n\
    \            ans.put(1 + (i / 2));\n        }\n    }\n    return ans.data;\n}\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvowawo_b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n + 1];\n\
    \    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    foreach(i;3..result.length)\n\
    \    {\n        if(i.isEven)\n        {\n            result[i] = 1 + i / 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdodm2n5n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    import std.array;\n    if (n == 0)\
    \ return [1L];\n    auto res = [1L, 3L, 2L];\n    while (res.length < n + 1)\n\
    \    {\n        auto n = res.length;\n        res ~= ((n % 2 == 0) ? 1L + n /\
    \ 2 : res[n - 1] + res[n - 2] + res[n + 1]);\n    }\n    return res;\n}\n//................................................................................................\n\
    /*\nWrite a function that returns the index of the first element in array that\
    \ is bigger than \n    its neighbors, or -1, if there's no such element.\n   \
    \ Input array will always contain at least 2 and no more than 100 elements.\n\
    \    Indexing starts from zero.\n    Examples:\n    >>> first_larger_than_neighbors(1,\
    \ 2, 1)\n    1\n    >>> first_larger_than_neighbors(2, 1, 2)\n    -1\n*/\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpar2rlf7s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[(int)n+1];\n\
    \    res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for(int i = 3; i < n;\
    \ i++)\n    {\n        if(i % 2 == 0)\n        {\n            res[i] = (1 + i)\
    \ / 2;\n        }\n        else\n        {\n            res[i] = res[i-1] + res[i-2]\
    \ + res[i+1];\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm9qx5yoz.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9qx5yoz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] list = new long[(int)n + 1];\n\
    \    if(n > 0)\n    {\n        for(int i = 0; i < list.length; i++)\n        {\n\
    \            if(i == 0)\n            {\n                list[i] = 1;\n       \
    \     }\n            else if(i == 1)\n            {\n                list[i] =\
    \ 3;\n            }\n            else if(i == 2)\n            {\n            \
    \    list[i] = 2;\n            }\n            else if(i % 2 == 0)\n          \
    \  {\n                list[i] = 1 + (i / 2);\n            }\n            else\n\
    \            {\n                list[i] = list[i - 1] + list[i - 2] + list[i +\
    \ 1];\n            }\n        }\n    }\n    return list;\n}\nunittest\n{\n   \
    \ alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n \
    \   assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) ==\
    \ [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0g9etp7l.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0g9etp7l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[n+1];\n\
    \    result[0] = 1;\n    if(n>0) result[1] = 3;\n    for(int i = 2; i<result.length;\
    \ i++)\n    {\n        if(n%2==0) result[i] = 1 + n/2;\n        else result[i]\
    \ = result[i-1] + result[i-2] + result[i+1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpok8rn4wi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] array = new long[(int)n +\
    \ 1];\n    if (n < 0)\n        return array;\n    array[0] = 1;\n    array[1]\
    \ = 3;\n    array[2] = 2;\n    for (int i = 3; i < array.length; i++)\n    {\n\
    \        if (i % 2 == 0)\n            array[i] = 1 + i / 2;\n        else\n  \
    \          array[i] = array[i - 1] + array[i - 2] + array[i + 1];\n    }\n   \
    \ return array;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3n_xhwip.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3n_xhwip.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] result = new long[(int)n +\
    \ 1];\n    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n    for (long\
    \ i = 3; i <= n; i++) \n    {\n        if (i % 2 == 0) \n        {\n         \
    \   result[(int)i] = 1 + i / 2;\n        } \n        else \n        {\n      \
    \      result[(int)i] = result[(int)i - 1] + result[(int)i - 2] + result[(int)i\
    \ + 1];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxz_5pi0j.d(24): Error: C style cast illegal, use cast(int)n\n/tmp/tmpxz_5pi0j.d(32):
    Error: C style cast illegal, use cast(int)i\n/tmp/tmpxz_5pi0j.d(36): Error: C
    style cast illegal, use cast(int)i\n/tmp/tmpxz_5pi0j.d(36): Error: C style cast
    illegal, use cast(int)i\n/tmp/tmpxz_5pi0j.d(36): Error: C style cast illegal,
    use cast(int)i\n/tmp/tmpxz_5pi0j.d(36): Error: C style cast illegal, use cast(int)i\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxz_5pi0j.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] r;\n    if (n > 0)\n    {\n\
    \        r ~= 1;\n        if (n > 1)\n        {\n            r ~= 3;\n       \
    \     if (n > 2)\n            {\n                r ~= 2;\n                for\
    \ (long i = 3; i <= n; i++)\n                {\n                    r ~= (i %\
    \ 2) ? (r[i - 1] + r[i - 2] + r[i + 1]) : 1 + (i / 2);\n                }\n  \
    \          }\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5rv88ip.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] array = new long[n+1];\n \
    \   for(int i = 0; i < n; i++)\n    {\n        if(i == 0)\n        {\n       \
    \     array[i] = 1;\n        }\n        else if(i == 1)\n        {\n         \
    \   array[i] = 3;\n        }\n        else if(i == 2)\n        {\n           \
    \ array[i] = 2;\n        }\n        else if(i%2 == 0)\n        {\n           \
    \ array[i] = 1 + i/2;\n        }\n        else\n        {\n            array[i]\
    \ = array[i-1] + array[i-2] + array[i+1];\n        }\n    }\n    return array;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphmdxhv_0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n <= 0) return new long[0];\n\
    \    if (n == 1) return new long[] { 3 };\n    long[] a = new long[n + 1];\n \
    \   a[0] = 1;\n    a[1] = 3;\n    a[2] = 2;\n    long t = 2;\n    for (int i =\
    \ 3; i <= n; i++)\n    {\n        if (t % 2 == 0) \n        {\n            a[i]\
    \ = 1 + t / 2;\n        }\n        else \n        {\n            a[i] = a[i -\
    \ 1] + a[i - 2] + a[i + 1];\n        }\n        t++;\n    }\n    return a;\n}\n\
    \ \n \n/*\n    An isogram is a word that has no repeating letters, consecutive\
    \ or non-consecutive. \n    Implement a function that determines whether a string\
    \ that contains only letters is an isogram. \n    Assume the empty string is an\
    \ isogram. Ignore letter case.\n    \n    true\n    isIsogram( \"Dermatoglyphics\"\
    \ ) == true\n    isIsogram( \"aba\" ) == false\n    isIsogram( \"moOse\" ) ==\
    \ false // -- ignore letter case\n*/\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7e4to9u4.d(25): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmp7e4to9u4.d(25): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7e4to9u4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto arr = new long[n + 1];\n   \
    \ arr[0] = 1;\n    if (n >= 1) \n    {\n        arr[1] = 3;\n        arr[2] =\
    \ 2;\n        for (long i = 3; i <= n; i++) \n        {\n            if (i % 2)\
    \ \n            {\n                arr[i] = arr[i - 1] + arr[i - 2] + arr[i +\
    \ 1];\n            }\n            else \n            {\n                arr[i]\
    \ = 1 + i / 2;\n            }\n        }\n    }\n    return arr;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ompy5j5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n == 0) return new long[0];\n\
    \    long[] a = new long[(int)n + 1];\n    a[0] = 1;\n    a[1] = 3;\n    if (n\
    \ == 1) return a;\n    a[2] = 2;\n    if (n == 2) return a;\n    for (long i =\
    \ 3; i <= n; i++)\n    {\n        a[(int)i] = ((i + 1) % 2 == 0) ? (1 + (i / 2))\
    \ : (a[(int)i - 1] + a[(int)i - 2] + a[(int)i + 1]);\n    }\n    return a;\n}\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpstexaof4.d(25): Error: C style cast illegal, use cast(int)n\n/tmp/tmpstexaof4.d(33):
    Error: C style cast illegal, use cast(int)i\n/tmp/tmpstexaof4.d(33): Error: C
    style cast illegal, use cast(int)i\n/tmp/tmpstexaof4.d(33): Error: C style cast
    illegal, use cast(int)i\n/tmp/tmpstexaof4.d(33): Error: C style cast illegal,
    use cast(int)i\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpstexaof4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    immutable long[] first5 = [1L, 3L,\
    \ 2L, 8L, 4L];\n    immutable long[] first20 = [1L, 3L, 2L, 8L, 4L, 9L, 6L, 16L,\
    \ 5L, 13L, 11L, 24L, 7L, 19L, 22L, 41L, 10L, 31L, 26L, 52L];\n    if (n < 5)\n\
    \        return first5[0..n + 1];\n    if (n < 20)\n        return first20[0..n\
    \ + 1];\n    immutable long[] result = first20;\n    for (int i = 20; i <= n;\
    \ i++)\n    {\n        immutable long[] newresult = result ~ [result[$ - 3] +\
    \ result[$ - 2] + result[$ - 1]];\n        result = newresult;\n    }\n    return\
    \ result;\n}\n/*\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm0i3o7lu.d(38): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpm0i3o7lu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return 0..n + 1L\n        .map!(a\
    \ => \n        {\n            if (a <= 3L) return a;\n            else if (a %\
    \ 2L == 0L) return 1L + a / 2L;\n            else return tri(a - 1L)[a - 1L] +\
    \ tri(a - 2L)[a - 2L] + tri(a + 1L)[a + 1L];\n        }).array;\n}\n/*\n    Tests:\n\
    \    >>> tri(10L)\n    [1L, 3L, 2L, 8L, 5L, 6L, 5L, 3L, 9L, 5L, 4L]\n    >>> tri(100L)\n\
    \    [1L, 3L, 2L, 8L, 5L, 6L, 5L, 3L, 9L, 5L, 4L, 3L, 9L, 5L, 6L, 2L, 8L, 9L,\
    \ 5L, 2L, 7L, 5L, 4L, 9L, 3L, 6L, 5L, 2L, 7L, 5L, 6L, 9L, 8L, 9L, 5L, 2L, 7L,\
    \ 5L, 4L, 9L, 3L, 6L, 5L, 2L, 7L, 5L, 6L, 9L, 8L, 9L, 5L, 2L, 7L, 5L, 4L, 9L,\
    \ 3L, 6L, 5L, 2L, 7L, 5L, 6L, 9L, 8L, 9L, 5L, 2L, 7L, 5L, 4L, 9L, 3L, 6L, 5L,\
    \ 2L, 7L, 5L, 6L, 9L, 8L, 9L, 5L, 2L, 7L, 5L, 4L, 9L, 3L, 6L, 5L, 2L, 7L, 5L,\
    \ 6L, 9L, 8L, 9L, 5L, 2L, 7L, 5L, 4L, 9L, 3L, 6L, 5L, 2L, 7L, 5L, 6L, 9L, 8L,\
    \ 9L, 5L\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp46a3j3m_.d(24): Error: found \''..\'' when expecting \'';\''
    following return statement\n/tmp/tmp46a3j3m_.d(32): Error: unterminated /* */
    comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp46a3j3m_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] res = new long[n + 1];\n \
    \   if (n == 0) \n    {\n        return res;\n    }\n    res[0] = 1;\n    res[1]\
    \ = 3;\n    if (n == 1) \n    {\n        return res;\n    }\n    res[2] = 2;\n\
    \    for (int i = 3; i <= n; i++) \n    {\n        if (i % 2 == 0) \n        {\n\
    \            res[i] = 1 + i / 2;\n        }\n        else \n        {\n      \
    \      res[i] = res[i - 1] + res[i - 2] + res[i + 1];\n        }\n    }\n    return\
    \ res;\n}\nlong[] tri(long n) \n{\n    return n == 0 ? \n        new long[0] :\
    \ \n        n == 1 ? \n            new long[] {1, 3} : \n            n == 2 ?\
    \ \n                new long[] {1, 3, 2} : \n                n == 3 ? \n     \
    \               new long[] {1, 3, 2, 8} : \n                    n == 4 ? \n  \
    \                      new long[] {1, 3, 2, 8, 11} : \n                      \
    \  n == 5 ? \n                            new long[] {1, 3, 2, 8, 11, 14} : \n\
    \                            n == 6 ? \n                                new long[]\
    \ {1, 3, 2, 8, 11, 14, 18} : \n                                n == 7 ? \n   \
    \                                 new long[] {1, 3, 2, 8, 11, 14, 18, 26} : \n\
    \                                    n == 8 ? \n                             \
    \           new long[] {1, 3, 2, 8, 11, 14, 18, 26, 35} : \n                 \
    \                       n == 9 ? \n                                          \
    \  new long[] {1, 3, 2, 8, 11, 14, 18, 26, 35, 48} : \n                      \
    \                      n == 10 ? \n                                          \
    \      new long[] {1, 3, 2, 8, 11, 14, 18, 26, 35, 48, 64} : \n              \
    \                                  n == 11 ? \n                              \
    \  \nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2saa1ust.d(54): Error: found \''{\'' when expecting \'':\''\n/tmp/tmp2saa1ust.d(54):
    Error: found \''}\'' when expecting \'';\'' following return statement\n/tmp/tmp2saa1ust.d(54):
    Error: found \'':\'' instead of statement\n/tmp/tmp2saa1ust.d(56): Error: Declaration
    expected, not \'':\''\n/tmp/tmp2saa1ust.d(79): Error: Declaration expected, not
    \''assert\''\n/tmp/tmp2saa1ust.d(80): Error: Declaration expected, not \''assert\''\n/tmp/tmp2saa1ust.d(81):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp2saa1ust.d(82): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp2saa1ust.d(83): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp2saa1ust.d(84): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp2saa1ust.d(85): Error: Declaration expected, not \''assert\''\n/tmp/tmp2saa1ust.d(86):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp2saa1ust.d(87): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp2saa1ust.d(88): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp2saa1ust.d(89): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2saa1ust.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979108
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tribonacci = new long[(int)\
    \ n + 1];\n    tribonacci[0] = 1;\n    tribonacci[1] = 3;\n    for (int i = 2;\
    \ i < tribonacci.length; i++) \n    {\n        tribonacci[i] = (tribonacci[i -\
    \ 1] + tribonacci[i - 2] + tribonacci[i - 3]) / 2;\n    }\n    return tribonacci;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcm40aw6k.d(24): Error: C style cast illegal, use cast(int)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcm40aw6k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[n + 1];\n \
    \   arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    for (int i = 3; i < n +\
    \ 1; i++)\n    {\n        arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n   \
    \ }\n    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpox5csmh1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] ret;\n    if (n <= 1)\n  \
    \  {\n        return [1L, 3L];\n    }\n    ret = [1L, 3L];\n    for (long i =\
    \ 2; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            ret\
    \ ~= 1 + i / 2;\n        }\n        else\n        {\n            ret ~= ret[$\
    \ - 3] + ret[$ - 2] + ret[$ - 1];\n        }\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp81cx82j7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n <= 0) \n    {\n        return\
    \ [1L];\n    }\n    // Deque!\n    auto f = array(1L, 3L, 2L);\n    foreach (i;\
    \ 1 .. n) \n    {\n        f[0] = f[1];\n        f[1] = f[2];\n        f[2] =\
    \ f[0] + f[1] + f[2];\n    }\n    return f;\n}\n/*\n    \"World's Greatest\" is\
    \ a team of superheroes and it's one of the most popular teams \n    in the world.\
    \ They have a great press office and they are always sending out press \n    releases,\
    \ congratulating their members on various achievements. The press office is \n\
    \    also in charge of updating the leaderboard, which tracks the members' personal\
    \ records.\n    The team has decided that they want to track their members' records\
    \ in three \n    categories: strength, speed and endurance. A member's record\
    \ in each category is \n    represented by the corresponding positive integer.\
    \ Your task is to help the press \n    office by writing a function, which will\
    \ update the leaderboard, given the information \n    about the new record. The\
    \ leaderboard has to be represented as a sorted list of all \n    records in descending\
    \ order. If there are several members with the same record, keep \n    them in\
    \ the order, in which they were originally.\n    Example:\n    >>> update_leaderboard([[1,\
    \ 2, 3], [2, 3, 1], [1, 1, 2]], [3, 1, 2])\n    [[3, 1, 2], [2, 3, 1], [1, 1,\
    \ 2]]\n*/\nlong[][] update_leaderboard(long[][] leaderboard, long[] new_record)\
    \ \n{\n    // insert into leaderboard the new_record\n    // sort leaderboard\n\
    \    leaderboard ~= new_record;\n    leaderboard.sort!((a, b) => \n    {\n   \
    \     foreach (i; 0 .. a.length) \n        {\n            if (a[i] > b[i]) \n\
    \            {\n                return 1;\n            }\n            else if\
    \ (a[i] < b[i])\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ze7avis.d(68): Error: found \''unittest\'' instead of statement\n/tmp/tmp4ze7avis.d(83):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp4ze7avis.d(83):
    Error: found \''EOF\'' when expecting \'')\'' following template argument list\n/tmp/tmp4ze7avis.d(83):
    Error: found \''EOF\'' when expecting \'';\'' following statement\n/tmp/tmp4ze7avis.d(83):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ze7avis.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto res = new long[].init;\n   \
    \ if (n < 0)\n        return res;\n    res.length = n + 1;\n    foreach (i, e;\
    \ res)\n    {\n        if (i == 0)\n            e = 1;\n        else if (i ==\
    \ 1)\n            e = 3;\n        else if (i == 2)\n            e = 2;\n     \
    \   else if (i % 2 == 0)\n            e = 1 + i / 2;\n        else\n         \
    \   e = res[i - 1] + res[i - 2] + res[i + 1];\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcy7b2es1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  long[] r = new long[n+1];\n  for(int\
    \ i = 0; i <= n; i++)\n    r[i] = i == 0 ? 1 : i == 1 ? 3 : i == 2 ? 2 : r[i-1]\
    \ + r[i-2] + r[i-3];\n  return r;\n}\n \n \nlong[] tri(long n) \n{\n  long[] r\
    \ = new long[n+1];\n  r[0] = 1;\n  r[1] = 3;\n  r[2] = 2;\n  foreach(i; 1..n)\n\
    \    r[i] = r[i-1] + r[i-2] + r[i-3];\n  return r;\n}\n \n \nlong[] tri(long n)\
    \ \n{\n  long[] r = new long[n+1];\n  r[0] = 1;\n  r[1] = 3;\n  r[2] = 2;\n  for(int\
    \ i = 3; i <= n; i++)\n    r[i] = r[i-1] + r[i-2] + r[i-3];\n  return r;\n}\n\
    \ \n \n \nlong[] tri(long n) \n{\n  long[] r = new long[n+1];\n  r[0] = 1;\n \
    \ r[1] = 3;\n  r[2] = 2;\n  while(r.length <= n)\n    r ~= r[$-1] + r[$-2] + r[$-3];\n\
    \  return r;\n}\n \n \nlong[] tri(long n) \n{\n  long[] r = new long[n+1];\n \
    \ while(r.length <= n)\n    r ~= (r.length - 1) % 2 ? r[$-1] + r[$-2] + r[$-3]\
    \ : 1 + (r.length - 1) / 2;\n  return r;\n}\n \n \nlong[] tri(long n) \n{\n  long[]\
    \ r = new long[n+1];\n  r[0]\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmgncsr1e.d(81): Error: found \''unittest\'' when expecting \'';\''
    following statement\n/tmp/tmpmgncsr1e.d(96): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpmgncsr1e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n  return (n>=1 ?\n    n % 2 == 0\n  \
    \    ? [ n / 2 ] \n      : [ tri(n-1)[$-1] + tri(n-2)[$-1] + tri(n+1)[$-1] ] \n\
    \  : [])\n  .expand(n+1);\n}\n/*\nimport std.math : pow;\nunittest\n{\n    alias\
    \ candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz0ymk5bl.d(31): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpz0ymk5bl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n<1?null:n>=20?[1L,3L,2L,8L,5L,6L,11L,18L,24L,40L,55L,83L,118L,171L,238L,339L,474L,661L,924L,1285L,1819L,2557L,3588L,5023L,7072L,9922L,13943L,19504L,27411L,38502L,54034L,75681L,106106L,148767L,207842L,291583L,408873L,573827L,804202L,1124523L,1570753L,2199240L,3081043L,4325606L,6058936L,8530699L,11987667L,16769817L,23426614L,32853331L,46159627L,64854545L,91341536L,128044007L,179377542L,251833263L,352611357L,495976667L,696812901L,977296820L,1368141327L,1926490174L,2712090375L,3815780664L,5352063979L,7516864713L,10526509645L,14848679322L,20832036607L,29265686928L,41182427377L,57959989735L,81451328625L,114577464564L,160624058495L,225512797096L,317450842713L,445799195681L,624596724673L,876838657572L,1229354858656L,1722948266897L,2418229635680L,3397422262383L,4780139571362L,6702107597180L,9394486667395L,13178591742676L,18425475039403L,25859049916611L,36293556780293L,5078362620\n\
    unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L,\
    \ 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwwpu4mmt.d(25): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpwwpu4mmt.d(40):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpwwpu4mmt.d(40): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpwwpu4mmt.d(40): Error: expression
    expected, not \''}\''\n/tmp/tmpwwpu4mmt.d(40): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpwwpu4mmt.d(24): Error: found \''EOF\'' when expecting \'']\''\n/tmp/tmpwwpu4mmt.d(40):
    Error: found \''EOF\'' when expecting \'':\''\n/tmp/tmpwwpu4mmt.d(40): Error:
    expression expected, not \''EOF\''\n/tmp/tmpwwpu4mmt.d(40): Error: found \''EOF\''
    when expecting \'';\'' following return statement\n/tmp/tmpwwpu4mmt.d(40): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwwpu4mmt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n < 0) return null;\n    if (n\
    \ == 0) return new long[]{1};\n    if (n == 1) return new long[]{1, 3};\n    if\
    \ (n == 2) return new long[]{1, 3, 2};\n    long[] res = new long[n + 1];\n  \
    \  res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    for (int i = 3; i <= n;\
    \ i++)\n    {\n        if (i % 2 == 0) res[i] = 1 + i / 2;\n        else res[i]\
    \ = res[i - 1] + res[i - 2] + res[i + 1];\n    }\n    return res;\n}\nlong[] tri2(long\
    \ n) \n{\n    if (n < 0) return null;\n    if (n == 0) return new long[]{1};\n\
    \    if (n == 1) return new long[]{1, 3};\n    if (n == 2) return new long[]{1,\
    \ 3, 2};\n    long[] res = new long[n + 1];\n    res[0] = 1;\n    res[1] = 3;\n\
    \    res[2] = 2;\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 ==\
    \ 0) res[i] = 1 + i / 2;\n        else res[i] = res[i - 1] + res[i - 2] + res[i\
    \ - 3];\n    }\n    return res;\n}\nlong[] tri3(long n) \n{\n    if (n < 0) return\
    \ null;\n    if (n == 0) return new long[]{1};\n    if (n == 1) return new long[]{1,\
    \ 3};\n    if (n == 2) return new long[]{1, 3, 2};\n    long[] res = new long[n\
    \ + 1];\n    res[0] = 1;\n    res[1] = 3;\n    res[2] = 2;\n    long s, t, u;\n\
    \    for (int i = 3; i <= n; i++)\n   \nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1vozlado.d(25): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmp1vozlado.d(25): Error: found \''}\'' when
    expecting \'';\'' following statement\n/tmp/tmp1vozlado.d(26): Error: found \''{\''
    when expecting \'';\'' following return statement\n/tmp/tmp1vozlado.d(26): Error:
    found \''}\'' when expecting \'';\'' following statement\n/tmp/tmp1vozlado.d(27):
    Error: found \''{\'' when expecting \'';\'' following return statement\n/tmp/tmp1vozlado.d(27):
    Error: found \''}\'' when expecting \'';\'' following statement\n/tmp/tmp1vozlado.d(42):
    Error: found \''{\'' when expecting \'';\'' following return statement\n/tmp/tmp1vozlado.d(42):
    Error: found \''}\'' when expecting \'';\'' following statement\n/tmp/tmp1vozlado.d(43):
    Error: found \''{\'' when expecting \'';\'' following return statement\n/tmp/tmp1vozlado.d(43):
    Error: found \''}\'' when expecting \'';\'' following statement\n/tmp/tmp1vozlado.d(44):
    Error: found \''{\'' when expecting \'';\'' following return statement\n/tmp/tmp1vozlado.d(44):
    Error: found \''}\'' when expecting \'';\'' following statement\n/tmp/tmp1vozlado.d(59):
    Error: found \''{\'' when expecting \'';\'' following return statement\n/tmp/tmp1vozlado.d(59):
    Error: found \''}\'' when expecting \'';\'' following statement\n/tmp/tmp1vozlado.d(60):
    Error: found \''{\'' when expecting \'';\'' following return statement\n/tmp/tmp1vozlado.d(60):
    Error: found \''}\'' when expecting \'';\'' following statement\n/tmp/tmp1vozlado.d(61):
    Error: found \''{\'' when expecting \'';\'' following return statement\n/tmp/tmp1vozlado.d(61):
    Error: found \''}\'' when expecting \'';\'' following statement\n/tmp/tmp1vozlado.d(69):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp1vozlado.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return [];\n}\n/*\nIn mathematics,\
    \ a semiprime number is an integer which can be expressed as the product of two\
    \ prime numbers. \nA semiprime number is the product of two (not necessarily distinct)\
    \ prime numbers. \nFor example 15 = 3 * 5 is a semiprime number but 9 = 3 * 3\
    \ is not .\nGiven an array of integers.\nreturn how many of those integers are\
    \ semiprimes.\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpryne_saq.d(26): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpryne_saq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659979109
