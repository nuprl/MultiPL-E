name: HumanEval_130_tri
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long prev = 0, a = 1, b = 1, c =\
    \ 1;\n    while (n >= 3)\n    {\n        prev = a;\n        a = b;\n        b\
    \ = c;\n        c = prev + a + b;\n        n--;\n    }\n    if (n == 2)\n    \
    \    return new long[] { 1, a, b, c };\n    if (n == 1)\n        return new long[]\
    \ { 1, a, b };\n    return new long[] { 1, a };\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5g47g99y.d(34): Error: found `{` when expecting `;` following\
    \ `return` statement\\n/tmp/tmp5g47g99y.d(34): Error: found `}` when expecting\
    \ `;` following statement\\n/tmp/tmp5g47g99y.d(34): Deprecation: use `{ }` for\
    \ an empty statement, not `;`\\n/tmp/tmp5g47g99y.d(36): Error: found `{` when\
    \ expecting `;` following `return` statement\\n/tmp/tmp5g47g99y.d(36): Error:\
    \ found `}` when expecting `;` following statement\\n/tmp/tmp5g47g99y.d(36): Deprecation:\
    \ use `{ }` for an empty statement, not `;`\\n/tmp/tmp5g47g99y.d(37): Error: found\
    \ `{` when expecting `;` following `return` statement\\n/tmp/tmp5g47g99y.d(37):\
    \ Error: found `}` when expecting `;` following statement\\n/tmp/tmp5g47g99y.d(37):\
    \ Deprecation: use `{ }` for an empty statement, not `;`\\nFailed: [\"dmd\", \"\
    -unittest\", \"-v\", \"-o-\", \"/tmp/tmp5g47g99y.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    if (n <= 2)\n        return repeat(1L,\
    \ 3);\n    auto t = long[0];\n    t ~= 1;\n    t ~= 3;\n    t ~= 2;\n    foreach\
    \ (ind; 3..n)\n    {\n        if (ind % 2 == 0)\n            t ~= 1 + ind / 2;\n\
    \        else\n            t ~= t[$ - 3] + t[$ - 2] + t[$ - 1];\n    }\n    return\
    \ t;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) ==\
    \ [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n   \
    \ assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpimnv0n59.d(26): Error: found `[` when expecting `.` following\
    \ long\\n/tmp/tmpimnv0n59.d(26): Error: found `0` when expecting identifier following\
    \ `long`.\\n/tmp/tmpimnv0n59.d(26): Error: semicolon expected following auto declaration,\
    \ not `]`\\n/tmp/tmpimnv0n59.d(26): Error: found `]` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimnv0n59.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return [1L, 3L, 2L, 8L];\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn0yt96c2.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428715]\\n??:? void tmpn0yt96c2.__unittest_L26_C1()\
    \ [0x427f4a]\\n??:? void tmpn0yt96c2.__modtest() [0x428498]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c6ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b592]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430725]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306b1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b569]\\n??:? runModuleUnitTests [0x42c4d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428b64]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428aeb]\\n??:? _d_run_main [0x428a56]\\n??:? main [0x4284ab]\\\
    n??:? __libc_start_main [0x84b32554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] tribonacci = new long[(int)n\
    \ + 1];\n    if (n >= 1)\n        tribonacci[1] = 3;\n    if (n >= 2)\n      \
    \  tribonacci[2] = 2;\n    if (n >= 3)\n        tribonacci[3] = 8;\n    for (int\
    \ i = 4; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            tribonacci[i]\
    \ = 1 + i / 2;\n        else\n            tribonacci[i] = tribonacci[i - 1] +\
    \ tribonacci[i - 2] + tribonacci[i + 1];\n    }\n    return tribonacci;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnrvgibme.d(24): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrvgibme.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto retVal = new long[](n+1);\n\
    \    retVal[0] = 1;\n    retVal[1] = 3;\n    retVal[2] = 2;\n    for(long i =\
    \ 3; i <= n; i++)\n    {\n        retVal[i] = i % 2 == 0 ? 1 + i / 2 : retVal[i-1]\
    \ + retVal[i-2] + retVal[i+1];\n    }\n    return retVal;\n}\n// best practice\n\
    long[] tri(long n)\n{\n    auto t = [3,1,2];\n    auto next = [](auto ref t) {\n\
    \        auto x = t[0] + t[1] + t[2];\n        t[0] = t[1];\n        t[1] = t[2];\n\
    \        t[2] = x;\n    };\n    return iota(n+1).map!(i => i < 3 ? t[i] : (next(t),\
    \ t[2])).array;\n}\n// best practice\nlong[] tri(long n)\n{\n    auto t = [3,1,2];\n\
    \    auto next = [](auto ref t) {\n        auto x = t[0] + t[1] + t[2];\n    \
    \    t[0] = t[1];\n        t[1] = t[2];\n        t[2] = x;\n    };\n    return\
    \ iota(n+1).map!(i => i < 3 ? t[i] : (next(t), t[2])).array;\n}\n// best practice\n\
    long[] tri(long n)\n{\n    auto t = [3,1,2];\n    auto next = [](auto ref t) {\n\
    \        auto x = t[0] + t[1] + t[2];\n        t[0] = t[1];\n        t[1] = t[2];\n\
    \        t[2] = x;\n    };\n    return iota(n+1).map!(i => i < 3 ? t[i] : (next(t),\
    \ t[2])).array;\n}\n// from user r.s\nunittest\n{\n    alias candidate = tri;\n\
    \n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) ==\
    \ [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsi2w4dja.d(38): Error: expression expected, not `auto`\\n/tmp/tmpsi2w4dja.d(38):\
    \ Error: found `ref` when expecting `,`\\n/tmp/tmpsi2w4dja.d(38): Error: semicolon\
    \ expected following auto declaration, not `{`\\n/tmp/tmpsi2w4dja.d(43): Deprecation:\
    \ use `{ }` for an empty statement, not `;`\\n/tmp/tmpsi2w4dja.d(50): Error: expression\
    \ expected, not `auto`\\n/tmp/tmpsi2w4dja.d(50): Error: found `ref` when expecting\
    \ `,`\\n/tmp/tmpsi2w4dja.d(50): Error: semicolon expected following auto declaration,\
    \ not `{`\\n/tmp/tmpsi2w4dja.d(55): Deprecation: use `{ }` for an empty statement,\
    \ not `;`\\n/tmp/tmpsi2w4dja.d(62): Error: expression expected, not `auto`\\n/tmp/tmpsi2w4dja.d(62):\
    \ Error: found `ref` when expecting `,`\\n/tmp/tmpsi2w4dja.d(62): Error: semicolon\
    \ expected following auto declaration, not `{`\\n/tmp/tmpsi2w4dja.d(67): Deprecation:\
    \ use `{ }` for an empty statement, not `;`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpsi2w4dja.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 1L ? new long[] {} : n\
    \ < 2L ? new long[] {3L} : n < 3L ? new long[] {1L, 3L} : n < 4L ? new long[]\
    \ {1L, 3L, 2L} : new long[] {1L, 3L, 2L, 8L};\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjs4vztln.d(24): Error: found `{` when expecting `:`\\n/tmp/tmpjs4vztln.d(24):\
    \ Error: expression expected, not `}`\\n/tmp/tmpjs4vztln.d(24): Error: found `:`\
    \ when expecting `;` following `return` statement\\n/tmp/tmpjs4vztln.d(24): Error:\
    \ found `{` when expecting `:`\\n/tmp/tmpjs4vztln.d(24): Error: found `}` when\
    \ expecting `;` following statement\\n/tmp/tmpjs4vztln.d(24): Error: found `:`\
    \ instead of statement\\n/tmp/tmpjs4vztln.d(24): Error: declaration expected,\
    \ not `:`\\n/tmp/tmpjs4vztln.d(25): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjs4vztln.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n\t/*\n\t3\n\t2\n\t1\n\t*/\n\tauto a =\
    \ new ulong[n + 1];\n\ta[0] = 0;\n\ta[1] = 3;\n\tif (n == 1) return a;\n\ta[2]\
    \ = 2;\n\tif (n == 2) return a;\n\ta[3] = 8;\n\tif (n == 3) return a;\n\t//n >\
    \ 3\n\tfor (int i = 4; i <= n; i++)\n\t{\n\t\tif (i % 2 == 0) a[i] = i / 2;\n\t\
    \telse a[i] = a[i - 1] + a[i - 2] + a[i + 1];\n\t}\n\treturn a;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpys5umgo2.d(32): Error: cannot implicitly convert expression `a`\
    \ of type `ulong[]` to `long[]`\\n/tmp/tmpys5umgo2.d(34): Error: cannot implicitly\
    \ convert expression `a` of type `ulong[]` to `long[]`\\n/tmp/tmpys5umgo2.d(36):\
    \ Error: cannot implicitly convert expression `a` of type `ulong[]` to `long[]`\\\
    n/tmp/tmpys5umgo2.d(43): Error: cannot implicitly convert expression `a` of type\
    \ `ulong[]` to `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpys5umgo2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto result = new long[n+1];\n  \
    \  foreach(i; 0..n+1)\n    {\n        if(i == 0)\n        {\n            result[i]\
    \ = 1;\n        }\n        else if(i == 1)\n        {\n            result[i] =\
    \ 3;\n        }\n        else if(i == 2)\n        {\n            result[i] = 2;\n\
    \        }\n        else if(i % 2 == 0)\n        {\n            result[i] = result[i-1]\
    \ + result[i-2] + result[i-3];\n        }\n        else\n        {\n         \
    \   result[i] = 1 + i / 2;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoaih9jfv.d(54): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4288e5]\\n??:? void tmpoaih9jfv.__unittest_L50_C1()\
    \ [0x428091]\\n??:? void tmpoaih9jfv.__modtest() [0x428664]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c99f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b832]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430abd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f6c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a49]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b809]\\n??:? runModuleUnitTests [0x42c775]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428da8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d2f]\\n??:? _d_run_main [0x428c9a]\\n??:? main [0x428677]\\\
    n??:? __libc_start_main [0x9abf5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] Result = new long[cast(int)n\
    \ + 1];\n    if (n == 0)\n    {\n        return Result;\n    }\n    else\n   \
    \ {\n        Result[0] = 1;\n        Result[1] = 3;\n        Result[2] = 2;\n\
    \        for (long i = 3; i <= n; i++)\n        {\n            if (i % 2 == 0)\n\
    \            {\n                Result[cast(int)i] = cast(long)(1 + i / 2);\n\
    \            }\n            else\n            {\n                Result[cast(int)i]\
    \ = cast(long)(Result[cast(int)i - 1] + Result[cast(int)i - 2] + Result[cast(int)i\
    \ + 1]);\n            }\n        }\n        return Result;\n    }\n}\nunittest\n\
    {\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n\
    \    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpa5b6itut.d(42): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x42895e]\\n??:? long[] tmpa5b6itut.tri(long) [0x427fa1]\\\
    n??:? void tmpa5b6itut.__unittest_L48_C1() [0x427fdf]\\n??:? void tmpa5b6itut.__modtest()\
    \ [0x42862c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c967]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7fa]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a85]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f34]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a11]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7d1]\\n??:? runModuleUnitTests [0x42c73d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d70]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cf7]\\n??:? _d_run_main [0x428c62]\\n??:? main [0x42863f]\\\
    n??:? __libc_start_main [0x7fdf0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n > 0L ? [ 1L ] ~ tri(n -\
    \ 1L).retro : [];\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6u812g7r.d(24): Error: no property `retro` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6u812g7r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[(int)n+1];\n\
    \    arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    if(n>2)\n    {\n     \
    \ for(int i = 3; i<=n;i++)\n      {\n          if(i%2==0)\n          {\n     \
    \         arr[i] = i/2;\n          }\n          else\n          {\n          \
    \    arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n          }\n      }  \n    }\n\
    \    return arr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpefhvryw_.d(24): Error: C style cast illegal, use `cast(int)n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpefhvryw_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] arr = new long[n+1];\n   \
    \ if(n == 0)\n    {\n        return arr;\n    }\n    arr[0] = 1;\n    if(n ==\
    \ 1)\n    {\n        return arr;\n    }\n    arr[1] = 3;\n    if(n == 2)\n   \
    \ {\n        return arr;\n    }\n    arr[2] = 2;\n    for(long i = 3; i <= n;\
    \ i++)\n    {\n        if(i % 2 == 0)\n        {\n            arr[i] = 1 + i /\
    \ 2;\n        }\n        else\n        {\n            arr[i] = arr[i-1] + arr[i-2]\
    \ + arr[i+1];\n        }\n    }\n    return arr;\n}\nlong[] tri(long n) \n{\n\
    \    long[] arr = new long[n+1];\n    if(n == 0)\n    {\n        return arr;\n\
    \    }\n    arr[0] = 1;\n    if(n == 1)\n    {\n        return arr;\n    }\n \
    \   arr[1] = 3;\n    if(n == 2)\n    {\n        return arr;\n    }\n    arr[2]\
    \ = 2;\n    for(long i = 3; i <= n; i++)\n    {\n        if(i % 2 == 0)\n    \
    \    {\n            arr[i] = 1 + i / 2;\n        }\n        else\n        {\n\
    \            arr[i] = arr[i-1] + arr[i-2] + arr[i+1];\n        }\n    }\n    return\
    \ arr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpndi4p3ky.d(88): Error: `tmpndi4p3ky.tri` called with argument\
    \ types `(long)` matches both:\\n/tmp/tmpndi4p3ky.d(22):     `tmpndi4p3ky.tri(long\
    \ n)`\\nand:\\n/tmp/tmpndi4p3ky.d(53):     `tmpndi4p3ky.tri(long n)`\\n/tmp/tmpndi4p3ky.d(89):\
    \ Error: `tmpndi4p3ky.tri` called with argument types `(long)` matches both:\\\
    n/tmp/tmpndi4p3ky.d(22):     `tmpndi4p3ky.tri(long n)`\\nand:\\n/tmp/tmpndi4p3ky.d(53):\
    \     `tmpndi4p3ky.tri(long n)`\\n/tmp/tmpndi4p3ky.d(90): Error: `tmpndi4p3ky.tri`\
    \ called with argument types `(long)` matches both:\\n/tmp/tmpndi4p3ky.d(22):\
    \     `tmpndi4p3ky.tri(long n)`\\nand:\\n/tmp/tmpndi4p3ky.d(53):     `tmpndi4p3ky.tri(long\
    \ n)`\\n/tmp/tmpndi4p3ky.d(91): Error: `tmpndi4p3ky.tri` called with argument\
    \ types `(long)` matches both:\\n/tmp/tmpndi4p3ky.d(22):     `tmpndi4p3ky.tri(long\
    \ n)`\\nand:\\n/tmp/tmpndi4p3ky.d(53):     `tmpndi4p3ky.tri(long n)`\\n/tmp/tmpndi4p3ky.d(92):\
    \ Error: `tmpndi4p3ky.tri` called with argument types `(long)` matches both:\\\
    n/tmp/tmpndi4p3ky.d(22):     `tmpndi4p3ky.tri(long n)`\\nand:\\n/tmp/tmpndi4p3ky.d(53):\
    \     `tmpndi4p3ky.tri(long n)`\\n/tmp/tmpndi4p3ky.d(93): Error: `tmpndi4p3ky.tri`\
    \ called with argument types `(long)` matches both:\\n/tmp/tmpndi4p3ky.d(22):\
    \     `tmpndi4p3ky.tri(long n)`\\nand:\\n/tmp/tmpndi4p3ky.d(53):     `tmpndi4p3ky.tri(long\
    \ n)`\\n/tmp/tmpndi4p3ky.d(94): Error: `tmpndi4p3ky.tri` called with argument\
    \ types `(long)` matches both:\\n/tmp/tmpndi4p3ky.d(22):     `tmpndi4p3ky.tri(long\
    \ n)`\\nand:\\n/tmp/tmpndi4p3ky.d(53):     `tmpndi4p3ky.tri(long n)`\\n/tmp/tmpndi4p3ky.d(95):\
    \ Error: `tmpndi4p3ky.tri` called with argument types `(long)` matches both:\\\
    n/tmp/tmpndi4p3ky.d(22):     `tmpndi4p3ky.tri(long n)`\\nand:\\n/tmp/tmpndi4p3ky.d(53):\
    \     `tmpndi4p3ky.tri(long n)`\\n/tmp/tmpndi4p3ky.d(96): Error: `tmpndi4p3ky.tri`\
    \ called with argument types `(long)` matches both:\\n/tmp/tmpndi4p3ky.d(22):\
    \     `tmpndi4p3ky.tri(long n)`\\nand:\\n/tmp/tmpndi4p3ky.d(53):     `tmpndi4p3ky.tri(long\
    \ n)`\\n/tmp/tmpndi4p3ky.d(97): Error: `tmpndi4p3ky.tri` called with argument\
    \ types `(long)` matches both:\\n/t"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    //Non-recursive\n    auto r = new\
    \ long[n+1];\n    r[0] = 1;\n    r[1] = 3;\n    r[2] = 2;\n    for(size_t i =\
    \ 3; i <= n; i++)\n    {\n        if(i % 2) //i is odd\n            r[i] = r[i-1]\
    \ + r[i-2] + r[i+1];\n        else //i is even\n            r[i] = 1 + i / 2;\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpdeu3c9zl.d(32): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x428926]\\n??:? long[] tmpdeu3c9zl.tri(long) [0x427f37]\\\
    n??:? void tmpdeu3c9zl.__unittest_L38_C1() [0x427fa7]\\n??:? void tmpdeu3c9zl.__modtest()\
    \ [0x4285f4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c92f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7c2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a4d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430efc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b799]\\n??:? runModuleUnitTests [0x42c705]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d38]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cbf]\\n??:? _d_run_main [0x428c2a]\\n??:? main [0x428607]\\\
    n??:? __libc_start_main [0xc91a9554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] array;\n    int i;\n    int\
    \ j;\n    int k;\n    int l;\n    k = 1;\n    l = 1;\n    j = 1;\n    if (n ==\
    \ 1)\n    {\n        array = new long[1];\n        array[0] = 3;\n        return\
    \ array;\n    }\n    else if (n == 2)\n    {\n        array = new long[2];\n \
    \       array[0] = 1;\n        array[1] = 3;\n        return array;\n    }\n \
    \   else if (n == 3)\n    {\n        array = new long[3];\n        array[0] =\
    \ 1;\n        array[1] = 3;\n        array[2] = 2;\n        return array;\n  \
    \  }\n    else\n    {\n        array = new long[n + 1];\n        array[0] = 1;\n\
    \        array[1] = 3;\n        array[2] = 2;\n        for (i = 3; i < n + 1;\
    \ i++)\n        {\n            if (i % 2 == 0)\n            {\n              \
    \  array[i] = (1 + (i / 2));\n            }\n            else\n            {\n\
    \                k = array[i - 1];\n                l = array[i - 2];\n      \
    \          j = array[i - 3];\n                array[i] = k + l + j;\n        \
    \    }\n        }\n        return array;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L)\
    \ == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L,\
    \ 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbyq98k7i.d(67): Error: cannot implicitly convert expression `array[cast(ulong)(i\
    \ - 1)]` of type `long` to `int`\\n/tmp/tmpbyq98k7i.d(68): Error: cannot implicitly\
    \ convert expression `array[cast(ulong)(i - 2)]` of type `long` to `int`\\n/tmp/tmpbyq98k7i.d(69):\
    \ Error: cannot implicitly convert expression `array[cast(ulong)(i - 3)]` of type\
    \ `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyq98k7i.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    return n < 2 ?\n      new long[]{1L,\
    \ 3L, 2L, 8L} :\n      new long[]{1L, 3L, 2L, 8L}.put(3, tri(n - 1).back + tri(n\
    \ - 2).back + tri(n + 1).back);\n}\nunittest\n{\n    alias candidate = tri;\n\n\
    \    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa2n94zol.d(25): Error: found `{` when expecting `:`\\n/tmp/tmpa2n94zol.d(25):\
    \ Error: found `}` when expecting `;` following `return` statement\\n/tmp/tmpa2n94zol.d(25):\
    \ Error: found `:` instead of statement\\n/tmp/tmpa2n94zol.d(26): Error: unexpected\
    \ `(` in declarator\\n/tmp/tmpa2n94zol.d(26): Error: basic type expected, not\
    \ `3`\\n/tmp/tmpa2n94zol.d(26): Error: found `3` when expecting `)`\\n/tmp/tmpa2n94zol.d(26):\
    \ Error: no identifier for declarator `.put(_error_)`\\n/tmp/tmpa2n94zol.d(26):\
    \ Error: semicolon expected following function declaration\\n/tmp/tmpa2n94zol.d(26):\
    \ Error: declaration expected, not `,`\\n/tmp/tmpa2n94zol.d(27): Error: unrecognized\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa2n94zol.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto len = n + 1;\n    auto a = new\
    \ long[len];\n    a[0] = 1;\n    a[1] = 3;\n    a[2] = 2;\n    foreach(i; 3..len)\n\
    \    {\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3];\n    }\n    return a;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp81rlwmjj.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428845]\\n??:? void tmp81rlwmjj.__unittest_L35_C1()\
    \ [0x427ff1]\\n??:? void tmp81rlwmjj.__modtest() [0x4285c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c8ff]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b792]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a1d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ecc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4309a9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b769]\\n??:? runModuleUnitTests [0x42c6d5]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d08]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428c8f]\\n??:? _d_run_main [0x428bfa]\\n??:? main [0x4285d7]\\\
    n??:? __libc_start_main [0x4d851554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    auto fib = to!(long[])([]);\n   \
    \ fib ~= 0;\n    fib ~= 1;\n    fib ~= 1;\n    for(int i = 3; i <= n; i++)\n \
    \   {\n        if(i % 2 == 0)\n        {\n            fib ~= 1 + i / 2;\n    \
    \    }\n        else\n        {\n            fib ~= fib[i - 1] + fib[i - 2] +\
    \ fib[i + 1];\n        }\n    }\n    return fib;\n}\n/*\n    These examples have\
    \ been converted from Python to D. The original examples \n    can be found on\
    \ Codewars.\n*/\nunittest\n{\n    assert(tri(3L) == [1L, 3L, 2L, 8L]);\n    assert(tri(4L)\
    \ == [1L, 3L, 2L, 8L, 13L]);\n    assert(tri(0L) == [1L]);\n    assert(tri(1L)\
    \ == [1L, 3L]);\n    assert(tri(2L) == [1L, 3L, 2L]);\n    assert(tri(11L) ==\
    \ [1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L]);\n    assert(tri(15L)\
    \ == [1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L, 377L, 610L, 987L, 1597L,\
    \ 2584L]);\n    assert(tri(20L) == [1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L,\
    \ 233L, 377L, 610L, 987L, 1597L, 2584L, 4181L, 6765L, 10946L, 17711L, 28657L]);\n\
    \    assert(tri(30L) == [1L, 3L, 2L, 8L, 13L, 21L, 34L, 55L, 89L, 144L, 233L,\
    \ 377L, 610L, 987L, 1597L, 2584\nunittest\n{\n    alias candidate = tri;\n\n \
    \   assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L,\
    \ 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n\
    \    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L,\
    \ 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n\
    \    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3a3rjo88.d(56): Error: found `unittest` when expecting `,`\\\
    n/tmp/tmp3a3rjo88.d(71): Error: found `void` when expecting `,`\\n/tmp/tmp3a3rjo88.d(71):\
    \ Error: found `{` when expecting `,`\\n/tmp/tmp3a3rjo88.d(71): Error: expression\
    \ expected, not `}`\\n/tmp/tmp3a3rjo88.d(71): Error: found `End of File` when\
    \ expecting `,`\\n/tmp/tmp3a3rjo88.d(55): Error: found `End of File` when expecting\
    \ `]`\\n/tmp/tmp3a3rjo88.d(71): Error: found `End of File` when expecting `)`\\\
    n/tmp/tmp3a3rjo88.d(71): Error: found `End of File` when expecting `;` following\
    \ statement\\n/tmp/tmp3a3rjo88.d(71): Error: found `End of File` when expecting\
    \ `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\",\
    \ \"-o-\", \"/tmp/tmp3a3rjo88.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    int i;\n    long[] myarr;\n    myarr\
    \ = new long[n+1];\n    myarr[0] = 1;\n    myarr[1] = 3;\n    myarr[2] = 2;\n\
    \    for(i = 3; i < n + 1; i++)\n    {\n        if( i % 2 == 0)\n        {\n \
    \           myarr[i] = 1 + i / 2;\n        }\n        else\n        {\n      \
    \      myarr[i] = myarr[i-1] + myarr[i-2] + myarr[i-3];\n        }\n    }\n  \
    \  return myarr;\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprg5s7fp7.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4288a5]\\n??:? void tmprg5s7fp7.__unittest_L43_C1()\
    \ [0x428055]\\n??:? void tmprg5s7fp7.__modtest() [0x428628]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c95f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b7f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430a7d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430f2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a09]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b7c9]\\n??:? runModuleUnitTests [0x42c735]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428d68]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428cef]\\n??:? _d_run_main [0x428c5a]\\n??:? main [0x42863b]\\\
    n??:? __libc_start_main [0xfa496554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    long[] array;\n    if (n <= 1)\n\
    \    {\n        array = new long[3];\n        array[0] = 1;\n        array[1]\
    \ = 3;\n        array[2] = 2;\n    }\n    else\n    {\n        array = new long[n\
    \ + 1];\n        array[0] = 1;\n        array[1] = 3;\n        array[2] = 2;\n\
    \        for (long i = 3; i <= n; i++)\n        {\n            if (i % 2 == 0)\n\
    \            {\n                array[i] = (1 + i / 2);\n            }\n     \
    \       else\n            {\n                array[i] = (array[i - 1] + array[i\
    \ - 2] + array[i + 1]);\n            }\n        }\n    }\n    return array;\n\
    }\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L,\
    \ 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L,\
    \ 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n\
    \    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L,\
    \ 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L)\
    \ == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.RangeError@/tmp/tmpljqrnciz.d(46): Range violation\\n----------------\\\
    n??:? _d_arrayboundsp [0x4289de]\\n??:? long[] tmpljqrnciz.tri(long) [0x428024]\\\
    n??:? void tmpljqrnciz.__unittest_L52_C1() [0x428063]\\n??:? void tmpljqrnciz.__modtest()\
    \ [0x4286b0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c9e7]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b87a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430b05]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430fb4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430a91]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b851]\\n??:? runModuleUnitTests [0x42c7bd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428df0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d77]\\n??:? _d_run_main [0x428ce2]\\n??:? main [0x4286c3]\\\
    n??:? __libc_start_main [0x59a0e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence,\
    \ it was studied deeply by mathematicians in \n    the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence\
    \ is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n\
    \ is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\
    \    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) =\
    \ tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative\
    \ integer number n, you have to a return an array of the \n    first n + 1 numbers\
    \ of the Tribonacci sequence.\n    Examples:\n    >>> tri(3L)\n    [1L, 3L, 2L,\
    \ 8L]\n    \n*/\nlong[] tri(long n) \n{\n    import std.algorithm;\n    import\
    \ std.conv;\n    import std.range;\n    if (n == 0) return [1];\n    else if (n\
    \ == 1) return [1, 3];\n    else if (n == 2) return [1, 3, 2];\n    else\n   \
    \ {\n        long[] res = [1, 3, 2];\n        long first = 1, second = 3, third\
    \ = 2;\n        foreach (num; 3 .. n)\n        {\n            if (num % 2 == 0)\
    \ res ~= 1 + num / 2;\n            else\n            {\n                res ~=\
    \ first + second + third;\n                first = second;\n                second\
    \ = third;\n                third = res[$ - 1];\n            }\n        }\n  \
    \      return res;\n    }\n}\nunittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L)\
    \ == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n\
    \    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L)\
    \ == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L,\
    \ 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L,\
    \ 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L,\
    \ 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L)\
    \ == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpifk7gpaf.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428915]\\n??:? void tmpifk7gpaf.__unittest_L48_C1()\
    \ [0x4280c1]\\n??:? void tmpifk7gpaf.__modtest() [0x428694]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d35f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c1f2]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430c45]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4310f4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430bd1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c1c9]\\n??:? runModuleUnitTests [0x42d135]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428dd8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d5f]\\n??:? _d_run_main [0x428cca]\\n??:? main [0x4286a7]\\\
    n??:? __libc_start_main [0xbc0fc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
