language: d
name: HumanEval_47_median
results:
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n    if (l.length % 2 ==\
    \ 0) \n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2.0;\n    else\
    \ \n        return l[l.length / 2];\n        \n// return the median of \nfloat\
    \ median(float[] l) \n    if (l.length % 2 == 0) \n        return (l[l.length\
    \ / 2 - 1] + l[l.length / 2]) / 2.0;\n    else \n        return l[l.length / 2];\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp62kfkasm.d(11): Error: semicolon expected following function
    declaration\n/tmp/tmp62kfkasm.d(11): Error: Declaration expected, not \''if\''\n/tmp/tmp62kfkasm.d(13):
    Error: Declaration expected, not \''else\''\n/tmp/tmp62kfkasm.d(18): Error: semicolon
    expected following function declaration\n/tmp/tmp62kfkasm.d(18): Error: Declaration
    expected, not \''if\''\n/tmp/tmp62kfkasm.d(20): Error: Declaration expected, not
    \''else\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp62kfkasm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if(l.length == 0)\n\
    \    {\n        return 0.0;\n    }\n    long[] l2 = l.dup;\n    l2.sort;\n   \
    \ if(l2.length%2 == 0)\n    {\n        return (l2[l2.length/2] + l2[l2.length/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l2[l2.length/2];\n    }\n    \n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_ptastg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    // Returns the median\
    \ of a list of numbers\n    int length = l.length;\n    auto index = length /\
    \ 2;\n    if (index % 2 == 0) \n    {\n        int index2 = index - 1;\n     \
    \   return (l[index] + l[index2]) / 2.0;\n    }\n    else \n    {\n        return\
    \ l[index];\n    }\n}\n// Functions to generate random strings and numbers\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqoru1mm3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n    long[] lp = l[0..$];\n\
    \    if (lp.length % 2 == 0) \n        return (lp[lp.length / 2 - 1] + lp[lp.length\
    \ / 2]) / 2.0;\n    else \n        return lp[lp.length / 2];\nunittest\n{\n  \
    \  alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn_oy7f4g.d(11): Error: semicolon expected following function
    declaration\n/tmp/tmpn_oy7f4g.d(12): Error: Declaration expected, not \''if\''\n/tmp/tmpn_oy7f4g.d(14):
    Error: Declaration expected, not \''else\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpn_oy7f4g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if(l.length == 0)\n\
    \        return 0.0;\n    if(l.length%2 == 0)\n        return 0.5*(l[l.length/2-1]\
    \ + l[l.length/2]);\n    else\n        return l[l.length/2];\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2svx1rmj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float n = l.length;\n\
    \    auto copy = to!(float[])(l[0 .. n]);\n    std.algorithm.sort(copy);\n   \
    \ if (n % 2 == 0)\n    {\n        return (copy[n / 2 - 1] + copy[n / 2]) / 2;\n\
    \    }\n    else\n    {\n        return copy[n / 2];\n    }\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps76ikzk0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    if (l.length ==\
    \ 0) \n    { \n        throw new IllegalArgumentException(\"Empty list!\"); \n\
    \    } \n    l.sort(); \n    if (l.length % 2 == 0) \n    { \n        return (l[l.length\
    \ / 2] + l[l.length / 2 - 1]) / 2.0; \n    } \n    else \n    { \n        return\
    \ l[l.length / 2]; \n    } \n}\n/*\nmain() Function\n*/\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjicmp7xz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    // sort(l);\n   \
    \ long[] l2 = sort(l);\n    int n = l2.length;\n    //assert(n > 0);\n    if (n\
    \ == 0) \n    {\n        __ct_assert(false);\n    }\n    else if (n == 1) \n \
    \   {\n        return float(l2[0]);\n    }\n    else if (n % 2 == 1) \n    {\n\
    \        return float(l2[n / 2]);\n    }\n    else \n    {\n        return (float(l2[n\
    \ / 2 - 1]) + float(l2[n / 2])) / 2.0f;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyme5w48n.d(22): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpyme5w48n.d(22): Error: found \'')\'' when expecting \'';\''
    following return statement\n/tmp/tmpyme5w48n.d(26): Error: found \''(\'' when
    expecting \''.\'' following float\n/tmp/tmpyme5w48n.d(26): Error: found \'')\''
    when expecting \'';\'' following return statement\n/tmp/tmpyme5w48n.d(30): Error:
    found \''(\'' when expecting \''.\'' following float\n/tmp/tmpyme5w48n.d(30):
    Error: found \''(\'' when expecting \''.\'' following float\n/tmp/tmpyme5w48n.d(30):
    Error: found \'')\'' when expecting \'';\'' following return statement\n/tmp/tmpyme5w48n.d(30):
    Error: found \'')\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpyme5w48n.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\t/*\n\tThe function\
    \ call to sort() causes the elements of the array l to be sorted into ascending\
    \ order.\n\t*/\n\tl.sort();\n\t\n\t/*\n\tTo select the median of an array with\
    \ an odd number of elements, choose the element that is in the middle of the list\
    \ after sorting.\n\t*/\n\tint middle = (l.length - 1) / 2;\n\tif (l.length % 2\
    \ == 1)\n\t{\n\t\treturn l[middle];\n\t}\n\t\n\t/*\n\tTo select the median of\
    \ an array with an even number of elements, take the mean of the two middle elements.\n\
    \t*/\n\telse\n\t{\n\t\treturn (l[middle] + l[middle + 1]) / 2.0;\n\t}\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsyxrppic.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort;\n    auto\
    \ i = l.length / 2;\n    if (l.length % 2 == 0) \n    {\n        return (l[i]\
    \ + l[i-1]) / 2.0;\n    }\n    else \n    {\n        return l[i];\n    }\n}\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2kvn1f0v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n    return (float)median_temp(l);\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdi8y5kiu.d(11): Error: semicolon expected following function
    declaration\n/tmp/tmpdi8y5kiu.d(11): Error: Declaration expected, not \''return\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdi8y5kiu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] tmp = l[0..$];\n\
    \    tmp.sort();\n    size_t len = tmp.length;\n    if (len % 2 == 0)\n      \
    \  return (float)(tmp[len / 2 - 1] + tmp[len / 2]) / 2;\n    else\n        return\
    \ (float)tmp[len / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdtadrlxn.d(16): Error: C style cast illegal, use cast(float)(tmp[len
    / 2 - 1] + tmp[len / 2])\n/tmp/tmpdtadrlxn.d(18): Error: C style cast illegal,
    use cast(float)tmp[len / 2]\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtadrlxn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] temp_l = l.dup;\n\
    \    sort(temp_l);\n    long temp_v = temp_l[temp_l.length / 2];\n    if(temp_l.length\
    \ % 2 == 0)\n    {\n        float val = (temp_l[temp_l.length / 2] + temp_l[temp_l.length\
    \ / 2 - 1]) / 2.0;\n        return val;\n    }\n    else\n    {\n        return\
    \ temp_v;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprt2sgn5a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort();\n    uint\
    \ l_size = l.length;\n    return (float) (l_size % 2 == 0 ? (l[(l_size / 2) -\
    \ 1] + l[l_size / 2]) / 2.0 : l[l_size / 2]);\n}\n/*\nParses the input string\
    \ into a list of elements.\n    >>> parse(\"[1, 2, 3, 4, 5]\")\n    [1L, 2L, 3L,\
    \ 4L, 5L]\n*/\nlong[] parse(string s)\n{\n    long[] l;\n    ubyte[] chars = cast(ubyte[])\
    \ s;\n    uint start = 0;\n    uint end = 0;\n    for (uint i = 0; i < chars.length;\
    \ i++) {\n        if (chars[i] == ' ' || chars[i] == ',') {\n            end =\
    \ i;\n            l ~= to!long(s[start..end]);\n            start = i + 1;\n \
    \       }\n    }\n    l ~= to!long(s[start..$]);\n    return l;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv4_unkoi.d(14): Error: C style cast illegal, use cast(float)(l_size
    % 2 == 0 ? (l[l_size / 2 - 1] + l[l_size / 2]) / 2.00000 : l[l_size / 2])\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4_unkoi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float m;\n    l.sort;\n\
    \    if (l.length % 2 == 0) \n    {\n        m = (l[l.length / 2 - 1] + l[l.length\
    \ / 2]) / 2.0;\n    }\n    else \n    {\n        m = l[l.length / 2];\n    }\n\
    \    return m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjsq1x0yl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    if (l.length & 1)\
    \ \n        return l[l.length / 2]; \n    else \n        return (l[l.length /\
    \ 2 - 1] + l[l.length / 2]) / 2.0; \n} \n/*\n * Return median of elements in the\
    \ array l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6,\
    \ 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(int[] l) \n{ \n    if (l.length\
    \ & 1) \n        return l[l.length / 2]; \n    else \n        return (l[l.length\
    \ / 2 - 1] + l[l.length / 2]) / 2.0; \n} \n/*\n Return median of elements in the\
    \ array l.\n    >>> median([3.0, 1.0, 2.0, 4.0, 5.0])\n    3.0\n    >>> median([-10.0,\
    \ 4.0, 6.0, 1000.0, 10.0, 20.0])\n    15.0\n    \n*/\nfloat median(float[] l)\
    \ \n{ \n    if (l.length & 1) \n        return l[l.length / 2]; \n    else \n\
    \        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2.0; \n} \n/*\n * Return\
    \ median of elements in the array l.\n    >>> median([3.0, 1.0, 2.0, 4.0, 5.0])\n\
    \    3.0\n    >>> median([-10.0, 4.0, 6.0, 1000.0, 10.0, 20.0])\n    15.0\n  \
    \  \n*/\nfloat median(double[] l) \n{ \n    if (l.length & 1) \n        return\
    \ l[l.length / 2]; \n    else \n        return (l[l.length / 2 - 1] + l[l.length\
    \ / 2]) / 2.0; \n} \n/*\n * Return median of elements in the array l.\n    >>>\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdlz69bk7.d(62): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdlz69bk7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n    in \n    {\n       \
    \ assert(l.length >= 0);\n    }\n    out \n    (result)\n    {\n        assert(result\
    \ >= l[0]);\n        assert(result <= l[l.length - 1]);\n    }\n    do \n    {\n\
    \        long[] indices = [for (i in 0..l.length) yield i];\n        std.sort.quickSort(l,\
    \ indices);\n        if (l.length % 2 == 0)\n        {\n            return (l[l.length\
    \ / 2 - 1] + l[l.length / 2]) / 2;\n        }\n        else\n        {\n     \
    \       return l[l.length / 2];\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp62wrsnqz.d(21): Error: Declaration expected, not \''do\''\n/tmp/tmp62wrsnqz.d(24):
    Error: function declaration without return type. (Note that constructors are always
    named \''this\'')\n/tmp/tmp62wrsnqz.d(24): Error: no identifier for declarator
    std.sort.quickSort(l, indices)\n/tmp/tmp62wrsnqz.d(25): Error: Declaration expected,
    not \''if\''\n/tmp/tmp62wrsnqz.d(28): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp62wrsnqz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tint n = l.length;\n\
    \tif (n % 2 == 1) \n\t{\n\t\treturn l[n / 2];\n\t} \n\telse \n\t{\n\t\treturn\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0;\n\t}\n}\nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw3d6dt86.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n\tlong[] l2 = l.dup;\n\
    \tl2.sort;\n\tint n = l2.length;\n\tif (n % 2)\n\t{\n\t\treturn cast(float)l2[n\
    \ / 2];\n\t}\n\telse\n\t{\n\t\treturn (cast(float)l2[n / 2 - 1] + cast(float)l2[n\
    \ / 2]) / 2;\n\t}\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeni_25e7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort();\n    int\
    \ len_l = l.length;\n    int mid = cast(int)(len_l/2);\n    if(len_l % 2 == 0)\
    \ {\n        return (l[mid] + l[mid-1])/2.0;\n    }\n    else {\n        return\
    \ l[mid];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5xgw9zjp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n  long[] nl = copy(l);\n\
    \  size_t i;\n  size_t j;\n  long n;\n  for (i = 0; i < nl.length; i++) {\n  \
    \  for (j = i + 1; j < nl.length; j++) {\n      if (nl[i] > nl[j]) {\n       \
    \ n = nl[i];\n        nl[i] = nl[j];\n        nl[j] = n;\n      }\n    }\n  }\n\
    \  if (nl.length % 2 == 0) {\n    return (nl[nl.length / 2] + nl[nl.length / 2\
    \ - 1]) / 2.0;\n  } else {\n    return nl[nl.length / 2];\n  }\n}\n/*\nReturn\
    \ mean of elements in the array l.\n    >>> mean([3L, 1L, 2L, 4L, 5L])\n    3.0\n\
    \    >>> mean([-10L, 4L, 6L, 1000L, 10L, 20L])\n    10.0\n*/\nfloat mean(long[]\
    \ l) \n{\n  long[] nl = copy(l);\n  size_t i;\n  long s = 0;\n  for (i = 0; i\
    \ < nl.length; i++) {\n    s += nl[i];\n  }\n  return s / nl.length;\n}\n/*\n\
    Return standard deviation of elements in the array l.\n    >>> stddev([3L, 1L,\
    \ 2L, 4L, 5L])\n    1.5811388300841898\n    >>> stddev([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    388.86712463946497\n*/\nfloat stddev(long[] l) \n{\n  long[] nl =\
    \ copy(l);\n  size_t i;\n  long s = 0;\n  float m = mean(nl);\n  for (i = 0; i\
    \ < nl.length; i++) {\n    s += (nl[i] - m) * (nl[i] - m);\n  }\n\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp32lvm_wj.d(65): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32lvm_wj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l = sort(l);\n  \
    \  auto len = l.length;\n    if (len % 2) \n    {\n        return cast(float)l[len\
    \ / 2];\n    } \n    else \n    {\n        return (cast(float)l[len / 2 - 1] +\
    \ cast(float)l[len / 2]) / 2;\n    }\n}\n/*\nReturn the mode of elements in the\
    \ array l.\n    >>> mode([1L, 1L, 2L, 3L, 3L, 4L, 4L, 5L])\n    (1L, 2)\n    >>>\
    \ mode([3L, 3L, 3L, 3L, 3L, 6L, 7L, 8L])\n    (3L, 5)\n    \n*/\ntuple!(long,\
    \ int) mode(long[] l)\n{\n    l = sort(l);\n    auto len = l.length;\n    long\
    \ current = l[0];\n    long mode = current;\n    int count = 1;\n    int modeCount\
    \ = 1;\n    foreach (i, e; l[1 .. $]) \n    {\n        if (e == current) \n  \
    \      {\n            count++;\n        } \n        else \n        {\n       \
    \     if (count > modeCount) \n            {\n                mode = current;\n\
    \                modeCount = count;\n            }\n            current = e;\n\
    \            count = 1;\n        }\n    }\n    if (count > modeCount) \n    {\n\
    \        mode = current;\n        modeCount = count;\n    }\n    return tuple(mode,\
    \ modeCount);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps4zmmsei.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] l1 = new long[l.length];\n\
    \    foreach (e; l)\n    {\n        l1 ~= e;\n    }\n    sort(l1);\n    size_t\
    \ n = l1.length;\n    size_t mid = n / 2;\n    if (n % 2 == 0)\n    {\n      \
    \  return (l1[mid - 1] + l1[mid]) / 2.0;\n    }\n    else\n    {\n        return\
    \ l1[mid];\n    }\n}\n \nlong[][] val_arr;\nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4sxpo74z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort;\n    immutable\
    \ size = l.length;\n    return (size % 2 == 0) ? l[size / 2 - 1] + l[size / 2]\
    \ / 2.0 : l[size / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnn6m49cz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    // sort array into\
    \ ascending order\n    l.sort();\n    // get length of array\n    int len = l.length;\n\
    \    // if length is odd, return value at index of half the length\n    if (len\
    \ % 2 == 1)\n    {\n        return l[len / 2];\n    }\n    // otherwise return\
    \ the average of two values around the middle\n    else\n    {\n        return\
    \ (l[len / 2 - 1] + l[len / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxvktvdbo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    return median(cast(long[])l);\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv7xapwaj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tif (l.length == 0)\
    \ \n    {\n        return 0;\n    }\n    import std.math;\n    l.sort();\n   \
    \ long mid = (l.length - 1) / 2;\n    if (l.length % 2 == 0) \n    {\n       \
    \ return float(l[mid] + l[mid + 1]) / 2;\n    }\n    else \n    {\n        return\
    \ l[mid];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsiru7149.d(21): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpsiru7149.d(21): Error: found \'')\'' when expecting \'';\''
    following return statement\n/tmp/tmpsiru7149.d(21): Error: found \''/\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsiru7149.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] b = l.dup;\n\
    \    b.sort;\n    float m = b.length/2;\n    if (m - cast(int)m == 0) {\n    \
    \    return b[m];\n    }\n    return (b[cast(int)m] + b[cast(int)m+1])/2;\n}\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxnsj69qh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] l2 = l[$-1\
    \ .. $];\n    sort(l2);\n    int mid = l2.length / 2;\n    return l2.length %\
    \ 2 == 0\n        ? (l2[mid - 1] + l2[mid]) / 2.0\n        : l2[mid];\n}\n/*\n\
    \        >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n        15.0\n        >>>\
    \ min_max_median([-10L, 4L, 6L, 1000L, 10L, 20L])\n        (-10L, 1000L, 15.0)\n\
    \        >>> min_max_median([])\n        (None, None, None)\n*/\n// min, max,\
    \ median\nauto min_max_median(long[] l) \n{\n    if (l.length == 0) \n    {\n\
    \        return (null, null, null);\n    }\n    return (min(l), max(l), median(l));\n\
    }\n/*\n        >>> ['%s:%s' % (x, min_max_median(data[x])) for x in data]\n  \
    \      ['Car:(-12L, 2000L, 2.0)', 'Date:(-10L, 1000L, 1.0)', 'Eggs:(1L, 20L, 2.0)',\
    \ 'Frogs:(0L, 2000L, 2.0)', 'Grape:(0L, 20L, 1.0)', 'Heap:(0L, 20L, 1.0)', 'Item:(0L,\
    \ 20L, 2.0)', 'Job:(0L, 20L, 2.0)', 'Kite:(0L, 20L, 1.0)', 'List:(0L, 20L, 1.0)',\
    \ 'Name:(0L, 20L, 2.0)', 'Xylophone:(0L, 20L, 1.0)']\n*/\n// name: (min, max,\
    \ median)\nauto data = [\"Car\": [-12L, -5L, -3L, -1L, 0L, 1L, 1L, 1L, 2L, 2L,\
    \ 4L,\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1fkpime.d(42): Error: expression expected, not \''unittest\''\n/tmp/tmps1fkpime.d(43):
    Error: comma expected separating array initializers, not {\n/tmp/tmps1fkpime.d(52):
    Error: comma expected separating array initializers, not void\n/tmp/tmps1fkpime.d(52):
    Error: comma expected separating array initializers, not main\n/tmp/tmps1fkpime.d(52):
    Error: semicolon expected following auto declaration, not \''(\''\n/tmp/tmps1fkpime.d(52):
    Error: Declaration expected, not \''(\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmps1fkpime.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    auto t = l.dup;\n\
    \    t.sort;\n    auto half = t.length / 2;\n    return t.length % 2 ? t[half]\
    \ : float(t[half - 1] + t[half]) / 2;\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg944cjey.d(15): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpg944cjey.d(15): Error: found \'')\'' when expecting \'';\''
    following return statement\n/tmp/tmpg944cjey.d(15): Error: found \''/\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg944cjey.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float[] a = float.init(l.length);\n\
    \    foreach (idx, val; l)\n    {\n        a[idx] = val;\n    }\n    //float[]\
    \ a = float.init(l);\n    a.sort();\n    if (a.length % 2 == 1)\n    {\n     \
    \   return a[a.length / 2];\n    }\n    else\n    {\n        return (a[a.length\
    \ / 2 - 1] + a[a.length / 2]) / 2;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdqi1md_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    long[] sorted =\
    \ l[]; \n    sort(sorted); \n    size_t n = l.length; \n    if(n == 0) \n    {\
    \ \n        throw new Exception(\"median on empty array\"); \n    } \n    else\
    \ if(n % 2) // odd\n    { \n        return float(sorted[n / 2]); \n    } \n  \
    \  else \n    { \n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0; \n\
    \    } \n} \n/*\nReturn the sum of elements in the array l.\n    >>> sum([3L,\
    \ 1L, 2L, 4L, 5L])\n    15L\n    >>> sum([-10L, 4L, 6L, 1000L, 10L, 20L])\n  \
    \  1040L\n    \n*/\nlong sum(long[] l) \n{ \n    long s = 0L; \n    foreach(long\
    \ x; l) \n    { \n        s += x; \n    } \n    return s; \n} \n/*\nReturn the\
    \ range of the elements in the array l, which is the difference \nbetween the\
    \ largest and smallest elements.\n    >>> range([3L, 1L, 2L, 4L, 5L])\n    4L\n\
    \    >>> range([-10L, 4L, 6L, 1000L, 10L, 20L])\n    1010L\n    \n*/\nlong range(long[]\
    \ l) \n{ \n    long min, max; \n    if(l.length == 0) \n    { \n        throw\
    \ new Exception(\"range on empty array\"); \n    } \n    min = max = l[0]; \n\
    \    foreach(long x; l) \n    { \n        if(x < min) \n        { \n         \
    \   min = x; \n        } \n        if(x > max) \n        { \n            max =\
    \ x; \n        } \n    } \n    return max - min; \n} \n/*\nReturn the number of\
    \ elements in the array l that are in the range [lo, hi).\n    >>> count\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpojvh0wkq.d(21): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpojvh0wkq.d(21): Error: found \'')\'' when expecting \'';\''
    following return statement\n/tmp/tmpojvh0wkq.d(75): Error: unterminated /* */
    comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpojvh0wkq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    auto len = l.length;\
    \ \n    long tmp; \n    foreach (i,j; l) \n    { \n        if (j > i) \n     \
    \   { \n            tmp = l[i]; \n            l[i] = l[j]; \n            l[j]\
    \ = tmp; \n        } \n    } \n    if (len%2) \n        return cast(float)l[len/2];\
    \ \n    else \n        return (cast(float)l[len/2] + cast(float)l[len/2-1])/2;\
    \ \n} \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1aymkihb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    return (l.length\
    \ & 1) == 0 ? mean(l[$/2-1], l[$/2]) : l[$/2];\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprkps66on.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    long[] l2 = new long[n];\n    int i = 0;\n    for (long x : l)\n        l2[i++]\
    \ = x;\n    std.sort(l2);\n    if (n % 2 == 1)\n        return l2[n / 2];\n  \
    \  else\n        return 0.5 * (l2[n / 2 - 1] + l2[n / 2]);\n}\nunittest\n{\n \
    \   alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw8vrehbe.d(15): Error: semicolon expected, not \'':\''\n/tmp/tmpw8vrehbe.d(15):
    Error: expression expected, not \'':\''\n/tmp/tmpw8vrehbe.d(15): Error: found
    \''l\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpw8vrehbe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n    in(l)\n{\n    if(l.length\
    \ == 0)\n        return 0;\n    long[] s = l.dup;\n    s.sort;\n    size_t mid\
    \ = s.length / 2;\n    if(s.length % 2 == 0)\n        return (s[mid] + s[mid -\
    \ 1]) / 2.0;\n    else\n        return s[mid];\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpamo0pyfn.d(11): Error: statement expected to be { }, not (\n/tmp/tmpamo0pyfn.d(23):
    Error: found \''unittest\'' when expecting \'';\'' following statement\n/tmp/tmpamo0pyfn.d(24):
    Error: missing body { ... } after in or out\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpamo0pyfn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length % 2\
    \ == 0) \n    {\n        return l[l.length / 2] + l[l.length / 2 - 1] / 2;\n \
    \   }\n    else \n    {\n        return l[l.length / 2];\n    }\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbjbn9xjh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] l2 = l.dup;\n\
    \    l2.sort;\n    int i = l2.length;\n    if (i % 2 == 0) \n    {\n        float\
    \ x = cast(float) l2[i / 2];\n        float y = cast(float) l2[i / 2 - 1];\n \
    \       return (x + y) / 2;\n    }\n    else \n    {\n        return cast(float)\
    \ l2[i / 2];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpla722644.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort();\n    int\
    \ n = l.length;\n    if (n % 2 == 1) {\n        return l[n / 2];\n    }\n    else\
    \ {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n\
    \    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(int[]\
    \ l) \n{\n    l.sort();\n    int n = l.length;\n    if (n % 2 == 1) {\n      \
    \  return l[n / 2];\n    }\n    else {\n        return (l[n / 2 - 1] + l[n / 2])\
    \ / 2.0;\n    }\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\nfloat median(float[] l) \n{\n    l.sort();\n    int n = l.length;\n\
    \    if (n % 2 == 1) {\n        return l[n / 2];\n    }\n    else {\n        return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n/*\nReturn median of elements in\
    \ the array l.\n    >>> median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    15.0\n    \n*/\nfloat median(double[] l) \n{\n\
    \    l.sort();\n    int n = l.length;\n    if (n % 2 == 1) {\n        return l[n\
    \ / 2];\n    }\n    else {\n        return (l[n / 2 - 1] + l[\nunittest\n{\n \
    \   alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8mqs39je.d(76): Error: expression expected, not \''unittest\''\n/tmp/tmp8mqs39je.d(77):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmp8mqs39je.d(75): Error: found
    \''alias\'' when expecting \'')\''\n/tmp/tmp8mqs39je.d(78): Error: found \''candidate\''
    when expecting \'';\'' following return statement\n/tmp/tmp8mqs39je.d(78): Error:
    found \''=\'' instead of statement\n/tmp/tmp8mqs39je.d(86): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp8mqs39je.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    auto n = l.length;\
    \ \n    if (n == 0) \n    { \n        return cast(float)0; \n    } \n    else\
    \ if (n & 1) \n    { \n        return l[n / 2]; \n    } \n    else \n    { \n\
    \        return (l[n / 2 - 1] + l[n / 2]) / 2.0; \n    } \n} \nunittest\n{\n \
    \   alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphd9jlwdb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004119
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float avg = 0.0;\n\
    \    long[] temp;\n    temp.length = l.length;\n    // copy l to temp\n    foreach(i,\
    \ v; l)\n    {\n        temp[i] = v;\n    }\n    // sort temp\n    sort(temp);\n\
    \    if (temp.length % 2 == 0)\n    {\n        avg = ((temp[(temp.length / 2)\
    \ - 1] + temp[temp.length / 2]) / 2.0);\n    }\n    else\n    {\n        avg =\
    \ temp[(temp.length - 1) / 2];\n    }\n    return avg;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4eq3a8hd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] s = l[0..$];\n\
    \    s.sort();\n    size_t n = s.length;\n    if(n % 2 != 0) \n    {\n       \
    \ return s[n / 2];\n    }\n    else \n    {\n        size_t m = n / 2;\n     \
    \   return (s[m] + s[m - 1]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtt99ruw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l = sort(l);\n  \
    \  int len = l.length;\n    if (len % 2 == 0)\n        return (l[len / 2 - 1]\
    \ + l[len / 2]) / 2.0;\n    else\n        return l[len / 2];\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujzpana4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    l.sort();\n    long\
    \ middle = l.length / 2;\n    float result = l.length % 2 == 0 ? (l[middle] +\
    \ l[middle - 1]) / 2.0f : l[middle];\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6f0fak38.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tint i;\n\tlong[] l1;\n\
    \tfloat med;\n\tl1 = l[0..$];\n\tstd.algorithm.sort(l1);\n\ti = l1.length/2;\n\
    \tif (l1.length % 2 == 0) \n\t{\n\t\tmed = (l1[i]+l1[i-1])/2.0;\n\t}\n\telse \n\
    \t{\n\t\tmed = l1[i];\n\t}\n\treturn med;\n}\n/*\nReturn median of elements in\
    \ the array l.\n    >>> median([3.0, 1.0, 2.0, 4.0, 5.0])\n    3.0\n    >>> median([-10.0,\
    \ 4.0, 6.0, 1000.0, 10.0, 20.0])\n    15.0\n    \n*/\nfloat median(float[] l)\
    \ \n{\n\tint i;\n\tfloat[] l1;\n\tfloat med;\n\tl1 = l[0..$];\n\tstd.algorithm.sort(l1);\n\
    \ti = l1.length/2;\n\tif (l1.length % 2 == 0) \n\t{\n\t\tmed = (l1[i]+l1[i-1])/2.0;\n\
    \t}\n\telse \n\t{\n\t\tmed = l1[i];\n\t}\n\treturn med;\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3.0, 1.0, 2.0, 4.0, 5.0])\n   \
    \ 3.0\n    >>> median([-10.0, 4.0, 6.0, 1000.0, 10.0, 20.0])\n    15.0\n    \n\
    */\nfloat median(double[] l) \n{\n\tint i;\n\tdouble[] l1;\n\tfloat med;\n\tl1\
    \ = l[0..$];\n\tstd.algorithm.sort(l1);\n\ti = l1.length/2;\n\tif (l1.length %\
    \ 2 == 0) \n\t{\n\t\tmed = (l1[i]+l1[i-\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp95avglxl.d(73): Error: expression expected, not \''unittest\''\n/tmp/tmp95avglxl.d(74):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmp95avglxl.d(72): Error: found
    \''alias\'' when expecting \'')\''\n/tmp/tmp95avglxl.d(75): Error: found \''candidate\''
    when expecting \'';\'' following statement\n/tmp/tmp95avglxl.d(75): Error: found
    \''=\'' instead of statement\n/tmp/tmp95avglxl.d(83): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp95avglxl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    /* float avg = \n\
    \    float med = */\n    float avg = 0;\n    float med = 0;\n    float sum = 0;\n\
    \    float cnt = 0;\n    float temp;\n    long n = l.length;\n    if (n == 0)\n\
    \    {\n        return 0;\n    }\n    foreach (long element; l)\n    {\n     \
    \   if (element < l[0])\n        {\n            l[0] = element;\n        }\n \
    \       if (element > l[n - 1])\n        {\n            l[n - 1] = element;\n\
    \        }\n    }\n    if (n % 2 == 0)\n    {\n        avg = (l[n / 2] + l[(n\
    \ / 2) - 1]) / 2;\n        return avg;\n    }\n    else\n    {\n        med =\
    \ l[n / 2];\n        return med;\n    }\n    /*\n    for (long i = 0; i < n; i++)\n\
    \    {\n        foreach (long element; l)\n        {\n            if (element\
    \ > l[i])\n            {\n                cnt++;\n            }\n        }\n \
    \       if (cnt == (n - 1) / 2)\n        {\n            med = l[i];\n        }\n\
    \        if (cnt == (n - 1) / 2 - 1)\n        {\n            med = med + l[i];\n\
    \            med = med / 2;\n        }\n        if (cnt == (n - 1) / 2 + 1)\n\
    \        {\n            med = med + l[i];\n            med = med / 2;\n      \
    \  }\n        cnt = 0;\n    }\n    return med;*/\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnx5wim0x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n    if (l.length == 0)\n\
    \        return 0.0;\n    else\n        long[] n = l.sort();\n        return n.length\
    \ % 2 == 0 ? (n[n.length / 2 - 1] + n[n.length / 2]) / 2.0 : n[n.length / 2];\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeuuvbal5.d(11): Error: semicolon expected following function
    declaration\n/tmp/tmpeuuvbal5.d(11): Error: Declaration expected, not \''if\''\n/tmp/tmpeuuvbal5.d(13):
    Error: Declaration expected, not \''else\''\n/tmp/tmpeuuvbal5.d(15): Error: Declaration
    expected, not \''return\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeuuvbal5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    uint len_ = len(l);\n\
    \    qsort(l);\n    auto mid = len_ / 2;\n    if(len_ % 2 == 0)\n    {\n     \
    \   auto left = l[mid - 1];\n        auto right = l[mid];\n        return (left\
    \ + right) / 2.0;\n    }\n    else\n    {\n        return l[mid];\n    }\n}\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcblyjcq9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n == 0) return 0.0;\n    long[] m = new long[n];\n    long size = 0;\n\
    \    for (long x : l)\n    {\n        int i = size - 1;\n        for (; i > -1\
    \ && m[i] > x; i--) \n            m[i + 1] = m[i];\n        m[i + 1] = x;\n  \
    \      size++;\n    }\n    if (n % 2 == 1) \n        return cast(float) m[n /\
    \ 2];\n    else \n        return (m[n / 2 - 1] + m[n / 2]) / 2.0;\n}\n/*\nReturn\
    \ a list of elements in l, but without the element e.\n    >>> remove(3L, [3L,\
    \ 4L, 5L])\n    [4L, 5L]\n    >>> remove(3L, [3L, 3L, 3L])\n    []\n*/\nlong[]\
    \ remove(long e, long[] l)\n{\n    int size = 0;\n    long[] m = new long[l.length];\n\
    \    for (long x : l)\n    {\n        if (x != e)\n        {\n            m[size]\
    \ = x;\n            size++;\n        }\n    }\n    return m[0..size];\n}\n/*\n\
    Return a list of elements in l, but without the element at index i.\n    >>> removeAt(1L,\
    \ [3L, 4L, 5L])\n    [3L, 5L]\n    >>> removeAt(1L, [3L, 3L, 3L])\n    [3L, 3L]\n\
    */\nlong[] removeAt(long i, long[] l)\n{\n    int size = 0;\n    long[] m = new\
    \ long[l.length];\n    for (long x : l)\n    {\n        if (size != i)\n     \
    \   {\n            m[size] = x;\n            size++;\n        }\n        else\n\
    \        {\n            size++;\n        }\n    }\n    return m[0..size];\n}\n\
    /*\nReturn a list of elements in l,\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp31b73xfz.d(16): Error: semicolon expected, not \'':\''\n/tmp/tmp31b73xfz.d(16):
    Error: expression expected, not \'':\''\n/tmp/tmp31b73xfz.d(16): Error: found
    \''l\'' when expecting \'';\'' following for condition\n/tmp/tmp31b73xfz.d(40):
    Error: semicolon expected, not \'':\''\n/tmp/tmp31b73xfz.d(40): Error: expression
    expected, not \'':\''\n/tmp/tmp31b73xfz.d(40): Error: found \''l\'' when expecting
    \'';\'' following for condition\n/tmp/tmp31b73xfz.d(61): Error: semicolon expected,
    not \'':\''\n/tmp/tmp31b73xfz.d(61): Error: expression expected, not \'':\''\n/tmp/tmp31b73xfz.d(61):
    Error: found \''l\'' when expecting \'';\'' following for condition\n/tmp/tmp31b73xfz.d(75):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp31b73xfz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    if (l.length ==\
    \ 0) \n    { \n        return 0; \n    }\n    if (l.length % 2 == 0) \n    { \n\
    \        return (l[(l.length/2)-1] + l[l.length/2])/2.0; \n    } \n    else \n\
    \    { \n        return l[l.length/2]; \n    } \n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdfcp9kkz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort();\n    int\
    \ len = l.length;\n    if ((len % 2) == 0) {\n        return (l[len / 2] + l[(len\
    \ / 2) - 1]) / 2.0;\n    } else {\n        return l[len / 2];\n    }\n}\n/*\n\
    Return the average of l.\n    >>> average([1L, 2L, 3L, 4L, 5L])\n    3.0\n*/\n\
    float average(long[] l) \n{\n    long sum = 0;\n    foreach (x; l) \n    {\n \
    \       sum += x;\n    }\n    return sum / float(l.length);\n}\n/*\nReturn standard\
    \ deviation of l.\n    >>> stddev([1L, 2L, 3L, 4L, 5L])\n    1.5811388300841898\n\
    */\nfloat stddev(long[] l) \n{\n    float avg = average(l);\n    float sum_squares\
    \ = 0;\n    foreach (x; l) \n    {\n        sum_squares += (x - avg) ^^ 2;\n \
    \   }\n    return sqrt(sum_squares / l.length);\n}\n/*\nReturn the length of the\
    \ longest prefix of s that does not contain c.\n    >>> index(\"banana\", 'a')\n\
    \    1\n    >>> index(\"banana\", 'b')\n    0\n    >>> index(\"banana\", 'z')\n\
    \    6\n*/\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjw54co2i.d(32): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpjw54co2i.d(32): Error: found \'')\'' when expecting \'';\''
    following return statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjw54co2i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if(l.length == 0)\n\
    \        return 0;\n    l = l.sort;\n    if(l.length % 2 == 0)\n        return\
    \ (l[l.length / 2] + l[l.length / 2 - 1]) / 2.0;\n    else\n        return l[l.length\
    \ / 2];\n}\n/*\nReturn variance of elements in the array l.\n    >>> var([3L,\
    \ 1L, 2L, 4L, 5L])\n    2.5\n    >>> var([-10L, 4L, 6L, 1000L, 10L, 20L])\n  \
    \  313333.3333333333\n*/\nfloat var(long[] l) \n{\n    auto sum = 0;\n    auto\
    \ avg = avg(l);\n    foreach(i; l)\n        sum += (i - avg) ^^ 2;\n    return\
    \ sum / l.length;\n}\n/*\nReturn stddev of elements in the array l.\n    >>> stddev([3L,\
    \ 1L, 2L, 4L, 5L])\n    1.5811388300841898\n    >>> stddev([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    562.5\n*/\nfloat stddev(long[] l) \n{\n    return sqrt(var(l));\n\
    }\n/*\nReturn mode of elements in the array l.\n    >>> mode([3L, 1L, 2L, 4L,\
    \ 5L])\n    3L\n    >>> mode([-10L, 4L, 6L, 4L, 1000L, 10L, 20L])\n    4L\n*/\n\
    long mode(long[] l) \n{\n    import std.algorithm.comparison : max;\n    import\
    \ std.algorithm.iteration : count;\n    long ans = 0;\n    auto ans_count = 0;\n\
    \    foreach(i; l)\n    {\n        auto icount = l.count(i);\n        if(icount\
    \ > ans_count)\n        {\n            ans = i;\n            ans_count = icount;\n\
    \        }\n    }\n    return ans;\n}\nlong nl\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbp9_o7hj.d(71): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbp9_o7hj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n    if (l.length == 0) return\
    \ -1.0;\n    l.sort;\n    if (l.length % 2 == 1) \n        return l[l.length /\
    \ 2];\n    else \n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2.0;\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3jy2dekq.d(11): Error: semicolon expected following function
    declaration\n/tmp/tmp3jy2dekq.d(11): Error: Declaration expected, not \''if\''\n/tmp/tmp3jy2dekq.d(12):
    Error: no identifier for declarator l.sort\n/tmp/tmp3jy2dekq.d(13): Error: Declaration
    expected, not \''if\''\n/tmp/tmp3jy2dekq.d(15): Error: Declaration expected, not
    \''else\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3jy2dekq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    assert(l.length >\
    \ 0);\n    long[] copy = copy(l);\n    quicksort(copy);\n    return (copy[copy.length\
    \ / 2] + copy[(copy.length - 1) / 2]) / 2.0;\n}\n \n /*\n Return a copy of array\
    \ s, sorted.\n    >>> qsort([3L, 1L, 2L, 4L, 5L])\n    [1L, 2L, 3L, 4L, 5L]\n\
    \    >>> qsort([-10L, 4L, 6L, 1000L, 10L, 20L])\n    [-10L, 4L, 6L, 10L, 20L,\
    \ 1000L]\n    \n    */\n    long[] quicksort(long[] s)\n    {\n        if (s.length\
    \ <= 1)\n        {\n            return s;\n        }\n        long p = s[s.length\
    \ / 2];\n        s = s[$ - s.length / 2 .. $];\n        auto l = filter!(a =>\
    \ a < p)(s);\n        auto e = filter!(a => a == p)(s);\n        auto g = filter!(a\
    \ => a > p)(s);\n        return quicksort(l) ~ e ~ quicksort(g);\n    }\n    ////////////////////////\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    // Add a function here.\n//    \n//    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ////////////////////////////////////////////////\n    ////////////////////////////////////////////////\n\
    \    ////////////////////////////////////////////////\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzqzrrktw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    if (l.length ==\
    \ 0)\n    {\n        return -1.0;\n    }\n    else if (l.length == 1)\n    {\n\
    \        return l[0];\n    }\n    else if (l.length == 2)\n    {\n        return\
    \ (l[0] + l[1]) / 2.0;\n    }\n    else\n    {\n        int mid = l.length / 2;\n\
    \        long left = l[mid - 1];\n        long right = l[mid];\n        return\
    \ (left + right) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1d981wke.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted = sort(l);\n\
    \    if (sorted.length % 2 == 1)\n    {\n        return sorted[sorted.length /\
    \ 2];\n    }\n    else\n    {\n        return (sorted[sorted.length / 2 - 1] +\
    \ sorted[sorted.length / 2]) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqha0pso6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    size_t i, j;\n  \
    \  int median;\n    size_t len = len(l);\n    foreach (i; 0 .. len)\n    {\n \
    \       foreach (j; 0 .. len)\n        {\n            if (l[i] < l[j])\n     \
    \       {\n                l[i] = l[i] ^ l[j];\n                l[j] = l[i] ^\
    \ l[j];\n                l[i] = l[i] ^ l[j];\n            }\n        }\n    }\n\
    \    if (len % 2 == 0)\n    {\n        median = (l[len / 2] + l[len / 2 - 1])\
    \ / 2;\n    }\n    else\n    {\n        median = l[len / 2];\n    }\n    return\
    \ median;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb9jvdvr9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    auto n = l.length;\n\
    \    if (n == 0) \n    {\n        return 0.0;\n    }\n    else if (n == 1) \n\
    \    {\n        return l[0];\n    }\n    else \n    {\n        long[] temp = l.dup;\n\
    \        temp.sort;\n        if (n % 2 == 0) \n        {\n            float a\
    \ = temp[(n - 1) / 2];\n            float b = temp[n / 2];\n            return\
    \ (a + b) / 2.0;\n        }\n        else \n        {\n            return temp[n\
    \ / 2];\n        }\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpee476czx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\treturn ((l.length %\
    \ 2) == 0) ? mean(l[(l.length / 2 - 1) .. (l.length / 2 + 1)]) : float(l[l.length\
    \ / 2]);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph_1g67kl.d(12): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmph_1g67kl.d(12): Error: found \'')\'' when expecting \'';\''
    following return statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_1g67kl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n\
    \    {\n        return 0.0;\n    }\n    l = l.sort(l.__cmp);\n    size_t h = l.length\
    \ / 2;\n    if (l.length % 2 == 0)\n    {\n        return (float)(l[h] + l[h -\
    \ 1]) / 2;\n    }\n    else\n    {\n        return (float)l[h];\n    }\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzpjnar_y.d(20): Error: C style cast illegal, use cast(float)(l[h]
    + l[h - 1])\n/tmp/tmpzpjnar_y.d(24): Error: C style cast illegal, use cast(float)l[h]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzpjnar_y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] copy = l[0..$];\n\
    \    sort(copy);\n    float med = 0.0;\n    size_t half = copy.length / 2;\n \
    \   if (copy.length % 2 == 0) \n    {\n        med = (copy[half] + copy[half-1])\
    \ / 2.0;\n    }\n    else \n    {\n        med = copy[half];\n    }\n    return\
    \ med;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1khpi0ad.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] s = l.idup;\n\
    \    int n = s.length;\n    int half = n / 2;\n    s.sort();\n    if (n & 1)\n\
    \    {\n        return s[half];\n    }\n    else\n    {\n        return (s[half]\
    \ + s[half - 1]) / 2.0;\n    }\n}\n/*\nReturn the (population) variance of the\
    \ elements in the array l.\n    >>> variance([3L, 1L, 2L, 4L, 5L])\n    2.5\n\
    \    >>> variance([-10L, 4L, 6L, 1000L, 10L, 20L])\n    81708.16666666667\n*/\n\
    float variance(long[] l) \n{\n    long[] s = l.idup;\n    int n = s.length;\n\
    \    float m = s.average;\n    float v = 0.0;\n    foreach (long x; s)\n    {\n\
    \        v += (x - m) * (x - m);\n    }\n    return v / n;\n}\n/*\nReturn the\
    \ (population) standard deviation of the elements in the array l.\n    >>> stddev([3L,\
    \ 1L, 2L, 4L, 5L])\n    1.5811388300841898\n    >>> stddev([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    286.433713351675\n*/\nfloat stddev(long[] l) \n{\n    return\
    \ variance(l).sqrt;\n}\n/*\nReturn the (population) standard error of the elements\
    \ in the array l.\n    >>> stderr([3L, 1L, 2L, 4L, 5L])\n    0.7905694150420949\n\
    \    >>> stderr([-10L, 4L, 6L, 1000L, 10L, 20L])\n    143.21685667583749\n*/\n\
    float stderr(long[] l) \n{\n    long[] s = l.idup;\n    int n = s.length;\n  \
    \  return stddev(s) / n.sqrt;\n}\n/*\n\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxiaowk74.d(68): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxiaowk74.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] tmp = l.dup;\n\
    \    tmp.sort;\n    if (tmp.length % 2 == 0)\n    {\n        return (tmp[tmp.length\
    \ / 2 - 1] + tmp[tmp.length / 2]) / 2.0;\n    }\n    else\n    {\n        return\
    \ tmp[tmp.length / 2];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxp5kvbjf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n    {\n    int n = len(l);\n\
    \    if (n%2==0) \n        {\n        return (l[n/2] + l[n/2-1]) / 2.0;\n    \
    \    }\n    else \n        {\n        return l[n/2];\n        }\n    }\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfvt92rxf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    l = l.dup.sort;\
    \ \n    return (l.length % 2 == 0) ? (l[cast(int)(l.length / 2)] + l[cast(int)(l.length\
    \ / 2) - 1]) / 2.0 : l[cast(int)(l.length / 2)]; \n} \n \n \n/*\nReturn average\
    \ of elements in the array l.\n    >>> average([3L, 1L, 2L, 4L, 5L])\n    3.0\n\
    \    >>> average([-10L, 4L, 6L, 1000L, 10L, 20L])\n    197.5\nunittest\n{\n  \
    \  alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpedsqnyzg.d(17): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpedsqnyzg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tint len = l.length;\n\
    \tint half = len / 2;\n\t/* even */\n\tif (len % 2 == 0)\n\t{\n\t\treturn (l[half]\
    \ + l[half - 1]) / 2.0;\n\t}\n\t/* odd */\n\telse\n\t{\n\t\treturn l[half];\n\t\
    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcfe6dwqc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l = sort(l);\n  \
    \  int len = l.length;\n    if (len % 2 == 0)\n    {\n        return cast(float)(l[len\
    \ / 2] + l[len / 2 - 1]) / 2;\n    }\n    else\n    {\n        return cast(float)l[len\
    \ / 2];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi3oqji6g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    int a = l.length;\n\
    \    long[] l1 = l.dup;\n    long temp = 0;\n    foreach(int k; 0 .. a) \n   \
    \ {\n        for(int i = 0; i < a - 1; i++) \n        {\n            if(l1[i]\
    \ > l1[i + 1]) \n            {\n                temp = l1[i];\n              \
    \  l1[i] = l1[i + 1];\n                l1[i + 1] = temp;\n            }\n    \
    \    }\n    }\n    if(a % 2 == 0) \n    {\n        return (l1[a / 2] + l1[a /\
    \ 2 - 1]) / 2.0;\n    } \n    else \n    {\n        return l1[a / 2];\n    }\n\
    }\n/*\nReturn the mean of elements in the array l.\n    >>> mean([3L, 1L, 2L,\
    \ 4L, 5L])\n    3.0\n    >>> mean([-10L, 4L, 6L, 1000L, 10L, 20L])\n    148.33333333333334\n\
    */\nfloat mean(long[] l) \n{\n    int a = l.length;\n    float sum = 0;\n    foreach(int\
    \ i; 0 .. a) \n    {\n        sum += l[i];\n    }\n    return sum / a;\n}\n/*\n\
    Return the standard deviation of elements in the array l.\n    >>> stddev([3L,\
    \ 1L, 2L, 4L, 5L])\n    1.5811388300841898\n    >>> stddev([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    507.64366565291954\n*/\nfloat stddev(long[] l) \n{\n    float\
    \ f = mean(l);\n    int a = l.length;\n    float sum = 0;\n    foreach(int i;\
    \ 0 .. a) \n    {\n        sum += pow(l[i] - f, 2);\n    }\n    return sqrt(sum\
    \ / a);\n}\n/*\nReturn the\nunittest\n{\n    alias candidate = median;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4i20m3h0.d(71): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp4i20m3h0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    long[] temp = l.dup;\n\
    \    sort(temp); \n    size_t mid = temp.length / 2;\n    if (temp.length % 2\
    \ == 0) {\n        return (temp[mid - 1] + temp[mid]) / 2.0;\n    } else {\n \
    \       return temp[mid];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwyvnlz9p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n  if (l.length % 2 ==\
    \ 0) \n  {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2.0;\n  }\n \
    \ else \n  {\n    return l[l.length / 2];\n  }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1d717meq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort();\n    long\
    \ n = l.length;\n    if (n % 2 == 1) {\n        return l[n / 2];\n    } else {\n\
    \        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>>\
    \ median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(int[] l)\
    \ \n{\n    l.sort();\n    long n = l.length;\n    if (n % 2 == 1) {\n        return\
    \ l[n / 2];\n    } else {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n \
    \   }\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3.0,\
    \ 1.0, 2.0, 4.0, 5.0])\n    3.0\n    >>> median([-10.0, 4.0, 6.0, 1000.0, 10.0,\
    \ 20.0])\n    15.0\n    \n*/\nfloat median(float[] l) \n{\n    l.sort();\n   \
    \ long n = l.length;\n    if (n % 2 == 1) {\n        return l[n / 2];\n    } else\
    \ {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n/*\nReturn median\
    \ of elements in the array l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>>\
    \ median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat median(double[]\
    \ l) \n{\n    l.sort();\n    long n = l.length;\n    if (n % 2 == 1) {\n     \
    \   return l[n / 2];\n    } else {\n        return (l[n / 2 - 1] + l[n / 2]) /\
    \ 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1ulxbwu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\
    \ \n    {\n        return 0.0;\n    }\n    long[] n = l[].dup;\n    n.sort;\n\
    \    int m = n.length;\n    int med = m / 2;\n    if (m % 2 == 0) \n    {\n  \
    \      return (n[med] + n[med - 1]) / 2.0;\n    }\n    else \n    {\n        return\
    \ n[med];\n    }\n}\n/*\nReturn the maximum value in the list l, or raise a ValueError\
    \ if l is empty.\n    >>> max_list([1L, 2L, 3L])\n    3L\n    >>> max_list([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    1000L\n*/\nlong max_list(long[] l) \n{\n    if\
    \ (l.length == 0) \n    {\n        throw new Error(\"Can't find maximum of empty\
    \ list\");\n    }\n    long max = l[0];\n    foreach (x; l) \n    {\n        if\
    \ (x > max) \n        {\n            max = x;\n        }\n    }\n    return max;\n\
    }\n/*\nReturn the minimum value in the list l, or raise a ValueError if l is empty.\n\
    \    >>> min_list([1L, 2L, 3L])\n    1L\n    >>> min_list([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    -10L\n*/\nlong min_list(long[] l) \n{\n    if (l.length == 0)\
    \ \n    {\n        throw new Error(\"Can't find minimum of empty list\");\n  \
    \  }\n    long min = l[0];\n    foreach (x; l) \n    {\n        if (x < min) \n\
    \        {\n            min = x;\n        }\n    }\n    return min;\n}\n/*\nReturn\
    \ the sum of the elements in the list l.\n    >>> sum_list([3L, 1L, 2L, 4L, 5L])\n\
    \    15L\n    >>> sum_list([-10L,\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvfdx4879.d(75): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpvfdx4879.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    \n    \n    //sorts\
    \ l and copies it to li\n    long[] li = l.dup;\n    std.algorithm.sort(li);\n\
    \    \n    //checks if the list is even\n    if (li.length % 2 == 0)\n    {\n\
    \        int one = li.length / 2;\n        int two = one - 1;\n        return\
    \ (li[one] + li[two]) / 2.0;\n    }\n    else\n    {\n        int k = li.length\
    \ / 2;\n        return li[k];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppmi7ib5_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    float m = 0;\n \
    \   long[] lm = sort(l);\n    int s = lm.length;\n    if(s % 2) \n    {\n    \
    \    m = cast(float)lm[s / 2];\n    } \n    else \n    {\n        m = (cast(float)lm[s\
    \ / 2] + cast(float)lm[s / 2 - 1]) / 2;\n    }\n    return m;\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4e1q0g2v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort();\n    size_t\
    \ n = l.length;\n    float m = 0.0;\n    if (n % 2 == 0) \n    {\n        m =\
    \ float(l[n / 2] + l[n / 2 - 1]) / 2;\n    } \n    else \n    {\n        m = l[n\
    \ / 2];\n    }\n    return m;\n}\n \n/*\nReturn the number of elements in the\
    \ array l that are at least as large as m.\n    >>> num_large(long[](3L, 1L, 2L,\
    \ 4L, 5L), 0L)\n    5\n    >>> num_large(long[](-10L, 4L, 6L, 1000L, 10L, 20L),\
    \ 5L)\n    4\n*/\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpak3p5un9.d(17): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpak3p5un9.d(17): Error: found \'')\'' when expecting \'';\''
    following statement\n/tmp/tmpak3p5un9.d(17): Error: found \''/\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpak3p5un9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    n /= 2;\n    int m = nth(l, n, 5);\n    if(l.length%2 == 0)\n    {\n    \
    \    int m2 = nth(l, n-1, 5);\n        return (m+m2)/2.0;\n    }\n    return m;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpav0g5p2k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\
    \ {\n        throw new Error(\"You have given me an empty list.\");\n    }\n \
    \   long[] m = l.sort();\n    if (m.length % 2 == 0) {\n        return float(m[(m.length\
    \ / 2) - 1]) / 2 + float(m[m.length / 2]) / 2;\n    }\n    else {\n        return\
    \ float(m[m.length / 2]);\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6u38o_tn.d(17): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmp6u38o_tn.d(17): Error: found \'')\'' when expecting \'';\''
    following return statement\n/tmp/tmp6u38o_tn.d(17): Error: found \''/\'' instead
    of statement\n/tmp/tmp6u38o_tn.d(20): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmp6u38o_tn.d(20): Error: found \'')\'' when expecting \'';\''
    following return statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6u38o_tn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    return float.max(l.sort).average(float.min(l.sort));\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpluquk5zk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    int l_len = l.length;\n\
    \    long[] l2 = new long[l_len];\n    foreach (i, l_len; l) \n    {\n       \
    \ l2[i] = l[i];\n    }\n    quickSort(l2);\n    float middle;\n    if (l_len %\
    \ 2 == 0)\n    {\n        middle = (float)(l2[l_len / 2] + l2[l_len / 2 - 1])\
    \ / 2;\n    }\n    else\n    {\n        middle = (float)l2[l_len / 2];\n    }\n\
    \    return middle;\n}\n/*\nReturn the standard deviation of the numbers in l.\n\
    \    >>> stddev([1L, 1L, 1L, 1L, 1L])\n    0.0\n    >>> stddev([1L, 2L, 3L, 4L,\
    \ 5L])\n    1.5811388300841898\n*/\nfloat stddev(long[] l) \n{\n    float m =\
    \ median(l);\n    int l_len = l.length;\n    float sum = 0.0;\n    foreach (i,\
    \ l_len; l) \n    {\n        sum += pow((float)l[i] - m, 2);\n    }\n    return\
    \ sqrt(sum / l_len);\n}\n/*\nMake the test cases pass.\n*/\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8_z3vr3p.d(22): Error: C style cast illegal, use cast(float)(l2[l_len
    / 2] + l2[l_len / 2 - 1])\n/tmp/tmp8_z3vr3p.d(26): Error: C style cast illegal,
    use cast(float)l2[l_len / 2]\n/tmp/tmp8_z3vr3p.d(44): Error: C style cast illegal,
    use cast(float)l[i]\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8_z3vr3p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    int half = l.length\
    \ / 2; \n    if (l.length % 2 == 1)\n        return l[half]; \n    else \n   \
    \     return (l[half - 1] + l[half]) / 2.0; \n} \nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpavyr7yab.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    long[] sorted =\
    \ l.dup;\n    sort(sorted);\n    if (sorted.length % 2 == 1)\n    {\n        return\
    \ sorted[(sorted.length-1)/2];\n    }\n    else\n    {\n        return (sorted[sorted.length/2]\
    \ + sorted[sorted.length/2-1])/2.0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2rfbradf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    auto n = l.length;\n\
    \    auto middle = n / 2;\n    if(n % 2) {\n        return l[middle];\n    } else\
    \ {\n        return (l[middle - 1] + l[middle]) / 2.0;\n    }\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp011w675z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort();\n    long\
    \ n = l.length;\n    if(n % 2 == 1) {\n        return cast(float)l[n / 2];\n \
    \   }\n    else {\n        long mid = n / 2;\n        return cast(float)(l[mid]\
    \ + l[mid - 1]) / 2;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd1fesm2d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int i = 0;\n    int\
    \ j = 0;\n    int k = 0;\n    int mid = 0;\n    long temp = 0;\n    float med\
    \ = 0;\n    int m = l.length;\n    while (i < m) \n    {\n        k = i;\n   \
    \     j = i;\n        while (j < m) \n        {\n            if (l[j] < l[k])\
    \ \n            {\n                k = j;\n            }\n            j += 1;\n\
    \        }\n        temp = l[i];\n        l[i] = l[k];\n        l[k] = temp;\n\
    \        i += 1;\n    }\n    mid = m / 2;\n    if (m % 2 == 0) \n    {\n     \
    \   med = float(l[mid - 1] + l[mid]) / 2;\n    }\n    else \n    {\n        med\
    \ = l[mid];\n    }\n    return med;\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt44l45rj.d(39): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpt44l45rj.d(39): Error: found \'')\'' when expecting \'';\''
    following statement\n/tmp/tmpt44l45rj.d(39): Error: found \''/\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt44l45rj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if(l.length == 0)\
    \ \n    {\n        return 0;\n    }\n    else if(l.length == 1) \n    {\n    \
    \    return cast(float)l[0];\n    }\n    else \n    {\n        long[] l1 = l.dup;\n\
    \        float n = cast(float)l1.length;\n        l1.sort;\n        int m = cast(int)(n\
    \ / 2.0);\n        if (n % 2 == 0) \n        {\n            return (l1[m] + l1[m-1])\
    \ / 2.0;\n        }\n        else \n        {\n            return l1[m];\n   \
    \     }\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp62y0gg4m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] m = new long[l.length];\n\
    \    for (long i = 0; i < l.length; i++) \n    {\n        m[i] = l[i];\n    }\n\
    \    //sort\n    for (long i = 0; i < m.length; i++) \n    {\n        for (long\
    \ j = i + 1; j < m.length; j++) \n        {\n            if (m[i] > m[j]) \n \
    \           {\n                long temp = m[i];\n                m[i] = m[j];\n\
    \                m[j] = temp;\n            }\n        }\n    }\n    if (m.length\
    \ % 2 == 0) \n    {\n        return (float)(m[(m.length / 2) - 1] + m[m.length\
    \ / 2]) / 2.0f;\n    }\n    else \n    {\n        return m[(m.length - 1) / 2];\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz8p8u8ts.d(32): Error: C style cast illegal, use cast(float)(m[m.length
    / 2 - 1] + m[m.length / 2])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz8p8u8ts.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    if (l.length ==\
    \ 0) \n    { \n        return 0.0; \n    } \n  \n    sort(l); \n  \n    if (l.length\
    \ % 2 != 0) \n    { \n        return l[l.length / 2]; \n    } \n  \n    return\
    \ (l[(l.length - 1) / 2] +  \n            l[l.length / 2]) / 2.0; \n} \nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_xamrccw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    unsigned length =\
    \ l.length;\n    long[] l2 = new long[l.length];\n    l2 = l;\n    if (length\
    \ == 0) \n    {\n        return 0.0;\n    } \n    else if (length == 1) \n   \
    \ {\n        return l[0];\n    } \n    else \n    {\n        l2.sort;\n      \
    \  if (length % 2 == 0) \n        {\n            return (l2[length / 2 - 1] +\
    \ l2[length / 2]) / 2.0;\n        } \n        else \n        {\n            return\
    \ l2[length / 2];\n        }\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgvqb6zfl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l = l.sort(l);\n\
    \    long i = cast(long)(len(l)/2);\n    float median;\n    if (len(l)%2 == 0)\n\
    \    {\n        median = (l[i] + l[i-1])/2.0;\n    }\n    else\n    {\n      \
    \  median = l[i];\n    }\n    return median;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp112okg5g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    const long n = l.length;\n\
    \    const long n2 = n / 2;\n    if (n % 2) \n    {\n        return (float)sort(l)[n2];\n\
    \    }\n    else \n    {\n        const long n2_1 = n2 - 1;\n        float l1\
    \ = (float)sort(l)[n2_1];\n        float l2 = (float)sort(l)[n2];\n        return\
    \ (l1 + l2) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n \
    \   assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp428qav4h.d(16): Error: C style cast illegal, use cast(float)sort(l)[n2]\n/tmp/tmp428qav4h.d(21):
    Error: C style cast illegal, use cast(float)sort(l)[n2_1]\n/tmp/tmp428qav4h.d(22):
    Error: C style cast illegal, use cast(float)sort(l)[n2]\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp428qav4h.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    std.sort(l);\n  \
    \  long n = l.length;\n    if (n % 2 == 1)\n    {\n        return l[n / 2];\n\
    \    }\n    else\n    {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn_f6d8_9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tint[] idx = new int[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) {\n\t\tidx[i] = i;\n\t}\n\tquickSort(l, idx);\n\
    \tint i = idx.length / 2;\n\tif (idx.length % 2 == 0) {\n\t\treturn (l[idx[i -\
    \ 1]] + l[idx[i]]) / 2.0;\n\t} else {\n\t\treturn l[idx[i]];\n\t}\n}\n/*\n   \
    \ >>> s = \"123 45 678\"\n    >>> split(s)\n    [\"123\", \"45\", \"678\"]\n \
    \   >>> split(\"123\")\n    [\"123\"]\n    >>> split(\"\")\n    []\n    >>> split(\"\
    \ 1 2 3 \")\n    [\"1\", \"2\", \"3\"]\n    >>> split(\" 1 2 3 \", \"2\")\n  \
    \  [\"1 \", \" 3 \"]\n*/\nstring[] split(string s) \n{\n\treturn split(s, \"\"\
    );\n}\nstring[] split(string s, string sep) \n{\n\tif (s == \"\") {\n\t\treturn\
    \ new string[0];\n\t}\n\tint n = 1;\n\tfor (int i = 0; i < s.length; i++) {\n\t\
    \tif (sep.contains(s[i].toString())) {\n\t\t\tn++;\n\t\t}\n\t}\n\tstring[] result\
    \ = new string[n];\n\tint[] next = new int[n];\n\tint start = 0;\n\tint j = 0;\n\
    \tfor (int i = 0; i < s.length; i++) {\n\t\tif (sep.contains(s[i].toString()))\
    \ {\n\t\t\tresult[j] = s.substring(start, i);\n\t\t\tnext[j] = i + 1;\n\t\t\t\
    j++;\n\t\t\tstart = i + 1;\n\t\t}\n\t}\n\tresult[j] = s.substring(start);\n\t\
    return result;\n}\n/*\n    Return the list with the element e appended at the\
    \ end.\n\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe_w5xd3a.d(67): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpe_w5xd3a.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    sort(l);\n    int\
    \ len = l.length;\n    if (len % 2 == 0)\n    {\n        return (float)(l[len\
    \ / 2] + l[len / 2 - 1]) / 2;\n    }\n    else\n    {\n        return l[len /\
    \ 2];\n    }\n}\n/*\nTask\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe2tm1bal.d(16): Error: C style cast illegal, use cast(float)(l[len
    / 2] + l[len / 2 - 1])\n/tmp/tmpe2tm1bal.d(23): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe2tm1bal.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort();\n    long[]\
    \ l1 = l[0..l.length/2];\n    long[] l2 = l[l.length/2..l.length];\n    if (l1.length\
    \ == l2.length) {\n        return (l1[l1.length-1] + l2[0])/2.0;\n    } else {\n\
    \        return l2[0];\n    }\n}\n/*\nReturn nth percentile of elements in the\
    \ array l.\n    >>> median([1L, 2L, 3L, 4L])\n    2.5\n    >>> median([1L, 1L,\
    \ 2L, 4L])\n    1.5\n    >>> median([2L, 2L, 2L, 4L])\n    2.0\n    >>> median([1L,\
    \ 1L, 1L, 2L])\n    1.0\n*/\nfloat percentile(long[] l, float n)\n{\n    l.sort();\n\
    \    float k = l.length * n/100.0;\n    float f = l[cast(int)k];\n    return f;\n\
    }\n/*\nReturn correlation coefficient of elements in the arrays x and y.\n   \
    \ >>> corrcoef([1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L])\n    1.0\n    >>> corrcoef([2L,\
    \ 2L, 2L, 4L], [5L, 6L, 7L, 8L])\n    0.0\n    >>> corrcoef([2L, 2L, 4L, 4L],\
    \ [5L, 6L, 7L, 8L])\n    0.0\n    >>> corrcoef([1L, 2L, 3L, 4L], [5L, 5L, 7L,\
    \ 8L])\n    0.5\n    >>> corrcoef([1L, 2L, 3L, 4L], [5L, 5L, 5L, 8L])\n    0.2\n\
    \    >>> corrcoef([1L, 2L, 3L, 4L], [5L, 5L, 5L, 5L])\n    0.0\n*/\nfloat corrcoef(\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp80ggvcpq.d(55): Error: basic type expected, not unittest\n/tmp/tmp80ggvcpq.d(55):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp80ggvcpq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    immutable float temp1\
    \ = float(l[len(l) >> 1]);\n    immutable float temp2 = float(l[(len(l) >> 1)\
    \ - 1]);\n    return (temp1 + temp2) / 2.0;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb4c27sgq.d(12): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpb4c27sgq.d(12): Error: semicolon expected, not \'')\''\n/tmp/tmpb4c27sgq.d(12):
    Error: found \'')\'' instead of statement\n/tmp/tmpb4c27sgq.d(13): Error: found
    \''(\'' when expecting \''.\'' following float\n/tmp/tmpb4c27sgq.d(13): Error:
    semicolon expected, not \'')\''\n/tmp/tmpb4c27sgq.d(13): Error: found \'')\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4c27sgq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n\
    \        return 0;\n    if (l.length == 1)\n        return l[0];\n    // sort\
    \ the array\n    long[] sl = sort(l);\n    if (l.length % 2) // odd\n        return\
    \ sl[(l.length - 1) / 2];\n    // even case\n    return (float)(sl[l.length /\
    \ 2] + sl[l.length / 2 - 1]) / 2;\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7xxjm1st.d(21): Error: C style cast illegal, use cast(float)(sl[l.length
    / 2] + sl[l.length / 2 - 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7xxjm1st.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tint len = l.length;\n\
    \tint mid = len / 2;\n\tlong[] left = new long[mid];\n\tlong[] right = new long[len\
    \ - mid];\n\tforeach (idx, x; l) {\n\t\tif (idx < mid) {\n\t\t\tleft[idx] = x;\n\
    \t\t} else {\n\t\t\tright[idx - mid] = x;\n\t\t}\n\t}\n\treturn (len % 2) ? l[mid]\
    \ : (l[mid - 1] + l[mid]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaqxg4vjm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if(l.length==0)\n\
    \        return 0;\n    else if(l.length==1)\n        return l[0];\n    else\n\
    \    {\n        sort(l);\n        if(l.length%2==0)\n            return (l[l.length/2]+l[l.length/2-1])/2;\n\
    \        else\n            return l[l.length/2];\n    }\n}\n/*\nReturn mean of\
    \ elements in the array l.\n    >>> mean([3L, 1L, 2L, 4L, 5L])\n    3.0\n    >>>\
    \ mean([-10L, 4L, 6L, 1000L, 10L, 20L])\n    143.0\n*/\nfloat mean(long[] l) \n\
    {\n    float sum=0;\n    foreach(x;l)\n        sum+=x;\n    return sum/l.length;\n\
    }\n//-------------------------------------------------------------------------------------\n\
    long[] get_freq(string filename)\n{\n    long[] result;\n    foreach(line;File(filename).byLine())\n\
    \    {\n        long x=line.to!long;\n        auto i=std.algorithm.find(result,x);\n\
    \        if(i==result.ptr)\n            result~=0;\n        result[i-result.ptr]++;\n\
    \    }\n    sort(result);\n    return result;\n}\nlong[] get_freq(long[] numbers)\n\
    {\n    long[] result;\n    foreach(x;numbers)\n    {\n        auto i=std.algorithm.find(result,x);\n\
    \        if(i==result.ptr)\n            result~=0;\n        result[i-result.ptr]++;\n\
    \    }\n    sort(result);\n    return result;\n}\n/*\nThis function returns 1\
    \ iff the poisson distribution of parameter lambda is good approximation for the\
    \ frequencies of occurence of the numbers in filename\n- the 95% confidence interval\
    \ for lambda is good\n- the pvalue of the chi2 goodness of fit test is good\n\
    - the pointwise poisson probability for every observed frequency is greater than\
    \ 0.01\n*/\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9nscxfga.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] m = sort(l);\n\
    \    int len = m.length;\n    if (len % 2 == 0)\n    {\n        return (m[len\
    \ / 2] + m[len / 2 - 1]) / 2.0;\n    }\n    else\n    {\n        return m[len\
    \ / 2];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3en1hxth.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] l_sorted =\
    \ sort(l);\n    int l_sorted_len = l_sorted.length;\n    int l_sorted_half = l_sorted_len\
    \ / 2;\n    int l_sorted_right = l_sorted_len - l_sorted_half;\n    return (l_sorted_len\
    \ % 2 == 0)\n        ? (cast(float)(l_sorted[l_sorted_half] + l_sorted[l_sorted_right])\
    \ / 2)\n        : l_sorted[l_sorted_half];\n}\n \n/*\nReturn the element that\
    \ appears most often in the array l.\n    >>> mode([3L, 1L, 2L, 4L, 5L, 2L, 3L,\
    \ 3L, 3L])\n    3L\n    >>> mode([-10L, 4L, 6L, 1000L, 10L, 20L, 6L, 6L, 6L])\n\
    \    6L\n*/\nlong mode(long[] l) \n{\n    long[] l_sorted = sort(l);\n    long\
    \ prev_elem = l_sorted[0];\n    long current_elem;\n    long max_elem = prev_elem;\n\
    \    long max_elem_count = 1;\n    long current_elem_count = 1;\n    foreach (int\
    \ i, current_elem; l_sorted) \n    {\n        if (current_elem == prev_elem) \n\
    \        {\n            current_elem_count++;\n        } \n        else \n   \
    \     {\n            if (current_elem_count > max_elem_count) \n            {\n\
    \                max_elem = current_elem;\n                max_elem_count = current_elem_count;\n\
    \            }\n            current_elem_count = 1;\n        }\n        prev_elem\
    \ = current_elem;\n    }\n    return max_elem;\n}\n \n/*\nReturn the frequency\
    \ of elements in the array l.\n    >>> frequencies([3L, 1L, 2L, 4L, 5L, 2L, 3L,\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2uy7yfxo.d(56): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2uy7yfxo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tfloat m;\n\tl.sort();\n\
    \tint med = l.length / 2;\n\tif (l.length % 2 == 0) \n\t{\n\t\tm = (l[med - 1]\
    \ + l[med]) / 2.0;\n\t} \n\telse \n\t{\n\t\tm = l[med];\n\t}\n\treturn m;\n}\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_npcq27u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    float mid; \n  \
    \  int n = l.length; \n    sort(l); \n    if (n % 2 == 0) \n        mid = float(l[n\
    \ / 2] + l[n / 2 - 1]) / 2; \n    else\n        mid = l[n / 2]; \n    return mid;\
    \ \n}\n/*\nReturn a dictionary that contains the count of each element in the\
    \ array l.\n    >>> counts([1L, 2L, 3L, 1L, 2L, 4L, 4L, 4L])\n    {1L: 2L, 2L:\
    \ 2L, 3L: 1L, 4L: 3L}\n*/\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5kjt62v5.d(16): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmp5kjt62v5.d(16): Error: found \'')\'' when expecting \'';\''
    following statement\n/tmp/tmp5kjt62v5.d(16): Error: found \''/\'' instead of statement\n/tmp/tmp5kjt62v5.d(17):
    Error: found \''else\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5kjt62v5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    int[] elements =\
    \ new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n        elements[i]\
    \ = (int)l[i];\n    }\n    int low = 0;\n    int high = elements.length - 1;\n\
    \    int mid = 0;\n    while (low < high) {\n        mid = (low + high) / 2;\n\
    \        int temp = elements[mid];\n        elements[mid] = elements[high];\n\
    \        elements[high] = temp;\n        int swap = 0;\n        while (low < high\
    \ && elements[low] <= elements[high]) {\n            low++;\n        }\n     \
    \   swap = elements[low];\n        elements[low] = elements[high];\n        elements[high]\
    \ = swap;\n    }\n    if (l.length % 2 == 0) {\n        return (elements[l.length\
    \ / 2] + elements[l.length / 2 - 1]) / 2.0;\n    } else {\n        return elements[l.length\
    \ / 2];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdztecd1b.d(14): Error: C style cast illegal, use cast(int)l[i]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdztecd1b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] a = new long[l.length];\n\
    \    l.copy(a);\n    int left = 0;\n    int right = a.length-1;\n    int mid =\
    \ (left+right)/2;\n    for (int i = 0; i <= right; i++) {\n        long pivot\
    \ = a[right];\n        int last = right;\n        for (int j = right-1; j >= left;\
    \ j--) {\n            if (a[j] >= pivot) {\n                last -= 1;\n     \
    \           a[last] = a[j];\n            }\n        }\n        a[last] = pivot;\n\
    \        if (last == mid) {\n            return a[mid];\n        } else if (last\
    \ > mid) {\n            right = last-1;\n        } else {\n            left =\
    \ last+1;\n        }\n    }\n    assert(false);\n    return 0;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgr6nccwf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sortedL =\
    \ l.dup.sort;\n    return sortedL.length % 2 == 0 \n        ? (float)(sortedL[sortedL.length\
    \ / 2 - 1] + sortedL[sortedL.length / 2]) / 2 \n        : sortedL[sortedL.length\
    \ / 2];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp33s3anho.d(14): Error: C style cast illegal, use cast(float)(sortedL[sortedL.length
    / 2 - 1] + sortedL[sortedL.length / 2])\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp33s3anho.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] t = l.dup;\n\
    \    t.sort;\n    long n = t.length;\n    if (n == 0) return 0.0;\n    return\
    \ (t[(n - 1) / 2] + t[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05ov9zk4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    long[] s = l.sort();\
    \ \n    long mi = s.length/2; \n    return s.length%2 ? s[mi] : (s[mi-1] + s[mi])/2.0;\
    \ \n} \nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8jntr1wx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    size_t n = l.length;\n\
    \    size_t idx = n / 2;\n    std.sort(l);\n    if (n & 1) \n    {\n        return\
    \ l[idx];\n    } \n    else \n    {\n        return (l[idx] + l[idx-1]) / 2;\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvginzne6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    sort(l);\n    float\
    \ med = 0.0;\n    int len = l.length;\n    if(len % 2 == 0)\n    {\n        med\
    \ = (float)(l[len/2-1] + l[len/2])/2;\n    }\n    else\n    {\n        med = (float)l[len/2];\n\
    \    }\n    return med;\n}\nunittest\n{\n    alias candidate = median;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5levo0na.d(17): Error: C style cast illegal, use cast(float)(l[len
    / 2 - 1] + l[len / 2])\n/tmp/tmp5levo0na.d(21): Error: C style cast illegal, use
    cast(float)l[len / 2]\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5levo0na.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n    long[] sl;\n    sl =\
    \ sort(l);\n    if (sl.length % 2 == 0) \n        return (sl[sl.length / 2 - 1]\
    \ + sl[sl.length / 2]) / 2.0;\n    else \n        return sl[sl.length / 2];\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp96clrbvc.d(11): Error: semicolon expected following function
    declaration\n/tmp/tmp96clrbvc.d(12): Error: no identifier for declarator sl\n/tmp/tmp96clrbvc.d(12):
    Error: Declaration expected, not \''=\''\n/tmp/tmp96clrbvc.d(13): Error: Declaration
    expected, not \''if\''\n/tmp/tmp96clrbvc.d(15): Error: Declaration expected, not
    \''else\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96clrbvc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    long[] s = new long[n];\n    for (int i = 0; i < n; i++) \n    {\n      \
    \  s[i] = l[i];\n    }\n    sort(s);\n    if (n % 2 == 0) \n    {\n        return\
    \ (float)(s[n / 2] + s[n / 2 - 1]) / 2;\n    } \n    else \n    {\n        return\
    \ s[n / 2];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3wh66o_0.d(21): Error: C style cast illegal, use cast(float)(s[n
    / 2] + s[n / 2 - 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wh66o_0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    long[] sl = l[0..n].sort();\n    int mid = n / 2;\n    if (n % 2) {\n   \
    \     return sl[mid];\n    }\n    else {\n        return (sl[mid - 1] + sl[mid])\
    \ / 2.0;\n    }\n}\n/*\nReturn the mean (average) of the elements in the array\
    \ l.\n    >>> mean([3L, 1L, 2L, 4L, 5L])\n    3.0\n    >>> mean([-10L, 4L, 6L,\
    \ 1000L, 10L, 20L])\n    153.0\n    \n*/\nfloat mean(long[] l) \n{\n    return\
    \ sum(l) / float(l.length);\n}\n/*\nReturn standard deviation of elements in the\
    \ array l.\n    >>> stddev([3L, 1L, 2L, 4L, 5L])\n    1.5811388300841898\n   \
    \ >>> stddev([-10L, 4L, 6L, 1000L, 10L, 20L])\n    426.85653053678305\n    \n\
    */\nfloat stddev(long[] l) \n{\n    int n = l.length;\n    float[] x = new float[n];\n\
    \    for (int i = 0; i < n; i++) {\n        x[i] = l[i];\n    }\n    float m =\
    \ mean(x);\n    float[] s = new float[n];\n    for (int i = 0; i < n; i++) {\n\
    \        s[i] = pow(x[i] - m, 2);\n    }\n    return sqrt(sum(s) / float(n - 1));\n\
    }\n/*\n*/\nlong[][] vals(long[] xs, long[] ys) \n{\n    long[][] t = new long[xs.length][2];\n\
    \    for (int i = 0; i < xs.length; i++) {\n        t[i][0] = xs[i];\n       \
    \ t[i][1] = ys[i];\n    }\n    return t;\n}\n/*\n\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcvyau2kq.d(32): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpcvyau2kq.d(32): Error: found \'')\'' when expecting \'';\''
    following return statement\n/tmp/tmpcvyau2kq.d(54): Error: found \''(\'' when
    expecting \''.\'' following float\n/tmp/tmpcvyau2kq.d(54): Error: found \'')\''
    when expecting \'';\'' following return statement\n/tmp/tmpcvyau2kq.d(67): Error:
    unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcvyau2kq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length <= 0L)\n\
    \    {\n        return .0f;\n    }\n    if (l.length == 1L)\n    {\n        return\
    \ (float)l[0L];\n    }\n    auto l2 = l[0.to!long()..$];\n    l2.sort();\n   \
    \ auto l3 = l2[0.to!long()..$];\n    if (l3.length % 2L == 0L)\n    {\n      \
    \  return (float)(l3[l3.length / 2L - 1L] + l3[l3.length / 2L]) / 2L;\n    }\n\
    \    else\n    {\n        return (float)l3[l3.length / 2L];\n    }\n}\n/*\nReturns\
    \ the mode of elements in the array l.\n    >>> mode([1L, 2L, 2L, 2L, 3L, 3L,\
    \ 3L, 3L, 3L, 4L, 4L, 5L])\n    3L\n    >>> mode([1L, 1L, 1L, 1L, 2L, 2L, 2L,\
    \ 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,\
    \ 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,\
    \ 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,\
    \ 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,\
    \ 2L, 2L, 2L, 2L, 2L, 2L, 2\nunittest\n{\n    alias candidate = median;\n\n  \
    \  assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8z7etvpu.d(18): Error: C style cast illegal, use cast(float)l[0L]\n/tmp/tmp8z7etvpu.d(25):
    Error: C style cast illegal, use cast(float)(l3[l3.length / 2L - 1L] + l3[l3.length
    / 2L])\n/tmp/tmp8z7etvpu.d(29): Error: C style cast illegal, use cast(float)l3[l3.length
    / 2L]\n/tmp/tmp8z7etvpu.d(32): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8z7etvpu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] sorted_l =\
    \ l.dup;\n    sort(sorted_l);\n    return ((sorted_l.length & 1) == 0) ? (float)(sorted_l[sorted_l.length/2-1]\
    \ + sorted_l[sorted_l.length/2])/2.0f\n                                      \
    \ : sorted_l[sorted_l.length/2];\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpemjh_g7n.d(14): Error: C style cast illegal, use cast(float)(sorted_l[sorted_l.length
    / 2 - 1] + sorted_l[sorted_l.length / 2])\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpemjh_g7n.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tif (l.length % 2 ==\
    \ 0) \n    {\n\t\treturn (l[l.length / 2] + l[l.length / 2 - 1]) / 2.0;\n\t}\n\
    \telse \n    {\n\t\treturn l[l.length / 2];\n\t}\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp48b0edm4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if(n == 0) \n    {\n        return 0.0;\n    }\n    else \n    {\n      \
    \  long[] l2 = l[0..n];\n        l2.sort();\n        int m = n / 2;\n        if(n\
    \ % 2 == 0) \n        {\n            return 0.5 * (l2[m] + l2[m-1]);\n       \
    \ }\n        else \n        {\n            return cast(float) l2[m];\n       \
    \ }\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2eokturn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] temp;\n  \
    \  temp.length = l.length;\n    size_t i = 0;\n    foreach(x; l) {\n        temp[i]\
    \ = x;\n        i++;\n    }\n    quickSort(temp);\n    return (temp[(temp.length\
    \ / 2) - 1] + temp[temp.length / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6ubsj6r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] s = l[0..$];\n\
    \    s.sort();\n    if (s.length & 1)\n        return s[s.length / 2];\n    else\n\
    \        return (s[s.length / 2 - 1] + s[s.length / 2]) / 2.0;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvaus293a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong[] dgs = l.sort();\n\
    \tif (dgs.length == 0) \n\t{\n\t\treturn 0.0;\n\t} \n\telse if (dgs.length % 2\
    \ == 1) \n\t{\n\t\treturn dgs[dgs.length / 2];\n\t} \n\telse \n\t{\n\t\treturn\
    \ (dgs[dgs.length / 2 - 1] + dgs[dgs.length / 2]) / 2.0;\n\t}\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnqj3lr4g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l = sort(l);\n  \
    \  int len = l.length;\n    int mid = len / 2;\n    return (len & 1) != 0 ? l[mid]\
    \ : (l[mid - 1] + l[mid]) / 2.0;\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbry3z_n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    // Sort array.\n\
    \    std.sort(l);\n    // Get size of array.\n    size_t sz = l.length;\n    //\
    \ Return the middle element of the array.\n    if(sz % 2 == 0)\n    {\n      \
    \  return float(l[sz / 2 - 1] + l[sz / 2]) / 2;\n    }\n    else\n    {\n    \
    \    return float(l[sz / 2]);\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfu6v5n_j.d(19): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpfu6v5n_j.d(19): Error: found \'')\'' when expecting \'';\''
    following return statement\n/tmp/tmpfu6v5n_j.d(19): Error: found \''/\'' instead
    of statement\n/tmp/tmpfu6v5n_j.d(23): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpfu6v5n_j.d(23): Error: found \'')\'' when expecting \'';\''
    following return statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfu6v5n_j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n  size_t[] n = size_t[l.length];\n\
    \  foreach (index, i; n)\n    n[index] = l[index];\n  size_t mid = n.length /\
    \ 2;\n  quickSort(n[], 0, n.length);\n  if (n.length % 2 == 0)\n    return float(n[mid\
    \ - 1] + n[mid]) / 2;\n  else\n    return float(n[mid]);\n}\nunittest\n{\n   \
    \ alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnfho2rlh.d(18): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpnfho2rlh.d(18): Error: found \'')\'' when expecting \'';\''
    following return statement\n/tmp/tmpnfho2rlh.d(18): Error: found \''/\'' instead
    of statement\n/tmp/tmpnfho2rlh.d(19): Error: found \''else\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnfho2rlh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    std.sort(l);\n  \
    \  auto n = l.length;\n    if (n % 2 == 1) \n    {\n        return l[n / 2];\n\
    \    }\n    else \n    {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n  \
    \  }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn_owergn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    // Sort the list\n\
    \    sort(l);\n    int middle = l.length / 2;\n    if (l.length % 2 == 1) {\n\
    \        return l[middle];\n    }\n    else {\n        return (l[middle - 1] +\
    \ l[middle]) / 2.0;\n    }\n}\n/*\n * Find the mode of the array l. In the event\
    \ of a tie, the\n * lower value is returned.\n *\n * >>> mode([1L, 1L, 2L, 2L,\
    \ 2L, 3L, 3L, 4L, 4L, 4L, 4L])\n * 4L\n * >>> mode([1L, 1L, 2L, 2L, 2L, 3L, 3L,\
    \ 4L, 4L, 4L, 4L, 5L])\n * 4L\n * >>> mode([1L, 1L, 2L, 2L, 2L, 3L, 3L, 4L, 4L,\
    \ 4L, 4L, 5L, 5L])\n * 2L\n */\nlong mode(long[] l) \n{\n    // Make a dictionary\
    \ to hold the frequencies\n    long[] lnew = new long[l.length];\n    int i =\
    \ 0;\n    for (long e : l) {\n\tlnew[i] = e;\n\ti++;\n    }\n    sort(lnew);\n\
    \    long maxFrequency = 0;\n    long maxValue = 0;\n    long currentValue = 0;\n\
    \    long currentFrequency = 0;\n    for (long e : lnew) {\n\tif (e == currentValue)\
    \ {\n\t    currentFrequency++;\n\t}\n\telse {\n\t    currentValue = e;\n\t   \
    \ currentFrequency = 1;\n\t}\n\tif (currentFrequency > maxFrequency) {\n\t   \
    \ maxFrequency = currentFrequency;\n\t    maxValue = e;\n\t}\n    }\n    return\
    \ maxValue;\n}\n/*\n    Return the average of the elements in the list l.\n  \
    \  >>> average([1L, 2L, 3L, 4L, 5L])\n    3.0\n    >>> average([-1L, 0L, 1L])\n\
    \    0\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzguxjbo9.d(38): Error: semicolon expected, not \'':\''\n/tmp/tmpzguxjbo9.d(38):
    Error: expression expected, not \'':\''\n/tmp/tmpzguxjbo9.d(38): Error: found
    \''l\'' when expecting \'';\'' following for condition\n/tmp/tmpzguxjbo9.d(47):
    Error: semicolon expected, not \'':\''\n/tmp/tmpzguxjbo9.d(47): Error: expression
    expected, not \'':\''\n/tmp/tmpzguxjbo9.d(47): Error: found \''lnew\'' when expecting
    \'';\'' following for condition\n/tmp/tmpzguxjbo9.d(62): Error: unterminated /*
    */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzguxjbo9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\
    \ {\n        throw new ValueError(\"median() arg is an empty sequence\");\n  \
    \  }\n    l.sort();\n    return (float)(l[l.length/2]+l[(l.length-1)/2])/2.0;\n\
    }\n// %%cython -a \n/*\nReturn median of elements in the array l.\n    >>> median([3L,\
    \ 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \    15.0\n    \n*/\ncdef float median_cython(long[:] l) \n{\n    if (l.shape[0]\
    \ == 0) {\n        throw new ValueError(\"median() arg is an empty sequence\"\
    );\n    }\n    l.sort();\n    return (float)(l[l.shape[0]/2]+l[(l.shape[0]-1)/2])/2.0;\n\
    }\n// %%cython -a \n// # using median from scipy.stats\nimport scipy.stats as\
    \ stats\n/*\nReturn median of elements in the array l.\n    >>> median([3L, 1L,\
    \ 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n    15.0\n\
    \    \n*/\ncdef float median_cython_scipy(long[:] l) \n{\n    if (l.shape[0] ==\
    \ 0) {\n        throw new ValueError(\"median() arg is an empty sequence\");\n\
    \    }\n    return stats.median(l);\n}\nlong[] l = [3L, 1L, 2L, 4L, 5L];\nl.sort();\n\
    l[l.length/2]+l[(l.length-1)/2]\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu_eult3_.d(16): Error: C style cast illegal, use cast(float)(l[l.length
    / 2] + l[(l.length - 1) / 2])\n/tmp/tmpu_eult3_.d(27): Error: no identifier for
    declarator cdef\n/tmp/tmpu_eult3_.d(27): Error: expression expected, not \'':\''\n/tmp/tmpu_eult3_.d(33):
    Error: C style cast illegal, use cast(float)(l[l.shape[0] / 2] + l[(l.shape[0]
    - 1) / 2])\n/tmp/tmpu_eult3_.d(37): Error: \'';\'' expected\n/tmp/tmpu_eult3_.d(46):
    Error: semicolon expected, not \''float\''\n/tmp/tmpu_eult3_.d(46): Error: expression
    expected, not \'':\''\n/tmp/tmpu_eult3_.d(54): Error: function declaration without
    return type. (Note that constructors are always named \''this\'')\n/tmp/tmpu_eult3_.d(54):
    Error: no identifier for declarator l.sort()\n/tmp/tmpu_eult3_.d(55): Error: no
    identifier for declarator l[l.length / 2]\n/tmp/tmpu_eult3_.d(55): Error: Declaration
    expected, not \''+\''\n/tmp/tmpu_eult3_.d(60): Error: Declaration expected, not
    \''assert\''\n/tmp/tmpu_eult3_.d(61): Error: Declaration expected, not \''assert\''\n/tmp/tmpu_eult3_.d(62):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpu_eult3_.d(63): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpu_eult3_.d(64): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpu_eult3_.d(65): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu_eult3_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tif(l.length < 1)\n\t\
    \treturn -1;\n\telse if(l.length == 1)\n\t\treturn l[0];\n\telse\n\t{\n\t\tsort(l);\n\
    \t\t\n\t\tif(l.length % 2 == 0)\n\t\t\treturn (l[l.length / 2] + l[l.length /\
    \ 2 - 1]) / 2.0;\n\t\telse\n\t\t\treturn l[l.length / 2];\n\t}\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_zeousf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tint len = l.length;\n\
    \tif(len == 0)\n\t\treturn 0;\n\tint[] temp = new int[len];\n\tfor(int i = 0;\
    \ i < len; i++)\n\t\ttemp[i] = l[i];\n\tstd.sort(temp);\n\tint mid = len / 2;\n\
    \tif(len % 2 == 0)\n\t\treturn (temp[mid] + temp[mid - 1]) / 2.0;\n\telse\n\t\t\
    return temp[mid];\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_aa9mxd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n  long[] sl = l.dup;\
    \ \n  sl.sort; \n  if (sl.length % 2 == 1) { \n    return sl[(sl.length - 1) /\
    \ 2]; \n  } else { \n    return 0.5f * (sl[sl.length / 2] + sl[sl.length / 2 -\
    \ 1]); \n  } \n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4h1s5rxu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float med = 0.0;\n\
    \    long size = l.length;\n    long[] p = new long[size];\n    long x = 0;\n\
    \    while (x < size) {\n        p[x] = l[x];\n        x += 1;\n    }\n    p.sort();\n\
    \    if (size % 2) {\n        med = p[size / 2];\n    }\n    else {\n        med\
    \ = (p[size / 2] + p[(size / 2) - 1]) / 2.0;\n    }\n    return med;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ebezpkg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] l1 = sort(l);\n\
    \    if (l1.length == 0) \n    {\n        return 0;\n    } \n    else if (l1.length\
    \ % 2 == 0) \n    {\n        return (l1[l1.length / 2 - 1] + l1[l1.length / 2])\
    \ / 2.0;\n    } \n    else \n    {\n        return l1[l1.length / 2];\n    }\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3tnytdt1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    return mean(l);\n\
    }\n/*\n    Return arithmetic mean of the elements in the array l.\n        >>>\
    \ mean([3L, 1L, 2L, 4L, 5L])\n        3.0\n        >>> mean([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n        99.0\n        \n*/\nfloat mean(long[] l) \n{\n    int x;\n\
    \    long sum = 0L;\n    foreach (x; l)\n        sum += x;\n    return sum / l.length;\n\
    }\n/*\n    Return mode of elements in the array l.\n        >>> mode([3L, 1L,\
    \ 2L, 4L, 5L])\n        3L\n        >>> mode([-10L, 4L, 6L, 1000L, 10L, 20L])\n\
    \        -10L\n        \n*/\nlong mode(long[] l) \n{\n    int x;\n    long count\
    \ = 0L;\n    long val = 0L;\n    long count_old = 0L;\n    long val_old = 0L;\n\
    \    foreach (x; l)\n    {\n        count = count_if(l, (e) => e == x);\n    \
    \    if (count > count_old)\n        {\n            count_old = count;\n     \
    \       val_old = x;\n        }\n    }\n    return val_old;\n}\n/*\n    Return\
    \ variance of elements in the array l.\n        >>> variance([3L, 1L, 2L, 4L,\
    \ 5L])\n        2.0\n        >>> variance([-10L, 4L, 6L, 1000L, 10L, 20L])\n \
    \       98620.0\n        \n*/\nfloat variance(long[] l) \n{\n    float avg = mean(l);\n\
    \    float var_sum = 0.0f;\n    foreach (x; l)\n        var_sum += (x - avg) *\
    \ (x - avg);\n    return var_sum / l.length;\n}\n/*\n    Return standard deviation\
    \ of elements in the array l.\n        >>> sd([3L, 1L, 2L, 4L, 5L])\n        1.\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp49npylw3.d(72): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp49npylw3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    assert(l.length >\
    \ 0);\n    if (l.length == 1) \n        return cast(float)l[0];\n    // Sort array\
    \ l\n    sort(l);\n    // Get the median\n    auto n = l.length;\n    float m;\n\
    \    if (n % 2 == 0) \n        m = (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    else\
    \ \n        m = l[n / 2];\n    return m;\n}\n \n/*\nReturn average of elements\
    \ in the array l.\n    >>> mean([1L, 2L, 3L, 4L, 5L])\n    3.0\n    >>> mean([3L,\
    \ 1L, 2L, 4L, 5L])\n    3.0\n*/\nfloat mean(long[] l) \n{\n    assert(l.length\
    \ > 0);\n    return sum(l) / cast(float)l.length;\n}\n \n/*\nReturn number of\
    \ elements in the array l greater than x.\n    >>> over(3L, [1L, 2L, 3L, 4L, 5L])\n\
    \    2\n    >>> over(3L, [3L, 1L, 2L, 4L, 5L])\n    2\n*/\nlong over(long x, long[]\
    \ l) \n{\n    assert(l.length > 0);\n    long n = 0;\n    foreach (long a; l)\n\
    \        if (a > x) \n            n += 1;\n    return n;\n}\n \n/*\nReturn number\
    \ of elements in the array l lower than x.\n    >>> over(3L, [1L, 2L, 3L, 4L,\
    \ 5L])\n    2\n    >>> over(3L, [3L, 1L, 2L, 4L, 5L])\n    2\n*/\nlong under(long\
    \ x, long[] l) \n{\n    assert(l.length > 0);\n    long n = 0;\n    foreach (long\
    \ a; l)\n        if (a < x) \n            n += 1;\n    return n;\n}\n \n/*\nReturn\
    \ standard deviation of elements in the\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpugmewyrk.d(74): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpugmewyrk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\
    \ \n    {\n        return -1;\n    }\n    if (l.length == 1) \n    {\n       \
    \ return float(l[0]);\n    }\n    l.sort();\n    if (l.length % 2 == 0) \n   \
    \ {\n        return float(l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n    }\n\
    \    else \n    {\n        return float(l[l.length / 2]);\n    }\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz5vroz39.d(18): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpz5vroz39.d(18): Error: found \'')\'' when expecting \'';\''
    following return statement\n/tmp/tmpz5vroz39.d(23): Error: found \''(\'' when
    expecting \''.\'' following float\n/tmp/tmpz5vroz39.d(23): Error: found \'')\''
    when expecting \'';\'' following return statement\n/tmp/tmpz5vroz39.d(23): Error:
    found \''/\'' instead of statement\n/tmp/tmpz5vroz39.d(27): Error: found \''(\''
    when expecting \''.\'' following float\n/tmp/tmpz5vroz39.d(27): Error: found \'')\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpz5vroz39.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n  long[] sorted = l.dup;\n\
    \  sort(sorted);\n  return median(sorted);\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2rrur7d9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n  // TODO: u\u017Cyj\
    \ funkcji std.sort.sort\n  if (l.length % 2 == 0) \n  {\n    return (l[l.length\
    \ / 2] + l[l.length / 2 - 1]) / 2.0;\n  } \n  else \n  {\n    return l[l.length\
    \ / 2];\n  }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7wnk7y3g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tint len = l.length;\n\
    \tif(len & 1)\n\t{\n\t\treturn l[len / 2];\n\t}\n\telse\n\t{\n\t\tint a = l[len\
    \ / 2 - 1];\n\t\tint b = l[len / 2];\n\t\treturn float(a + b) / 2;\n\t}\n}\n/*\n\
    Return mean of elements in the array l.\n    >>> mean([3L, 1L, 2L, 4L, 5L])\n\
    \    3.0\n    >>> mean([-10L, 4L, 6L, 1000L, 10L, 20L])\n    180.0\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph1185mzk.d(21): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmph1185mzk.d(21): Error: found \'')\'' when expecting \'';\''
    following return statement\n/tmp/tmph1185mzk.d(21): Error: found \''/\'' instead
    of statement\n/tmp/tmph1185mzk.d(24): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph1185mzk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int len = l.length;\n\
    \    long[] tmp = new long[len];\n    for (int i = 0; i < len; i++)\n        tmp[i]\
    \ = l[i];\n    sort(tmp);\n    if (len % 2)\n        return tmp[len / 2];\n  \
    \  else\n        return (tmp[len / 2 - 1] + tmp[len / 2]) / 2.0;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy53fa3pr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n == 0)\n    {\n        return 0.0;\n    }\n    long[] sl = new long[n];\n\
    \    foreach (i, x; l)\n    {\n        sl[i] = x;\n    }\n    sort(sl);\n    int\
    \ mid = n / 2;\n    if (n % 2 == 1)\n    {\n        return sl[mid];\n    }\n \
    \   else\n    {\n        return (sl[mid] + sl[mid - 1]) / 2.0;\n    }\n}\n/*\n\
    Return median of elements in the array l.\n    >>> median([3, 1, 2, 4, 5])\n \
    \   3.0\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \n*/\nfloat\
    \ median(int[] l) \n{\n    int n = l.length;\n    if (n == 0)\n    {\n       \
    \ return 0.0;\n    }\n    int[] sl = new int[n];\n    foreach (i, x; l)\n    {\n\
    \        sl[i] = x;\n    }\n    sort(sl);\n    int mid = n / 2;\n    if (n % 2\
    \ == 1)\n    {\n        return sl[mid];\n    }\n    else\n    {\n        return\
    \ (sl[mid] + sl[mid - 1]) / 2.0;\n    }\n}\n/*\nReturn median of elements in the\
    \ array l.\n    >>> median([3.0, 1.0, 2.0, 4.0, 5.0])\n    3.0\n    >>> median([-10.0,\
    \ 4.0, 6.0, 1000.0, 10.0, 20.0])\n    15.0\n    \n*/\nfloat median(float[] l)\
    \ \n{\n    int n = l.length;\n    if (n == 0)\n    {\n        return 0.0;\n  \
    \  }\n    float[] sl = new float[n];\n    foreach (i, x; l)\n    {\n        sl[i]\
    \ = x;\n    }\n    sort(sl);\n    int\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwp8tt0te.d(86): Error: no identifier for declarator int\n/tmp/tmpwp8tt0te.d(86):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpwp8tt0te.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] l_temp = l[];\n\
    \    sort(l_temp);\n    return ( ( l_temp[size_t(size_t(l_temp.length)/size_t(2L))]\
    \ + l_temp[size_t(size_t(l_temp.length)/size_t(2L))+1L] ) / size_t(2L) );\n}\n\
    /*\nReturn mean of elements in the array l.\n    >>> mean([3L, 1L, 2L, 4L, 5L])\n\
    \    3.0\n    >>> mean([-10L, 4L, 6L, 1000L, 10L, 20L])\n    107.5\n    \n*/\n\
    float mean(long[] l)\n{\n    return ( sum(l)/size_t(l.length) );\n}\n/*\nReturn\
    \ standard deviation of elements in the array l.\n    >>> stddev([3L, 1L, 2L,\
    \ 4L, 5L])\n    1.5811388300841898\n    >>> stddev([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    431.5965395168228\n    \n*/\nfloat stddev(long[] l)\n{\n    return\
    \ ( sqrt( sum( map!((a)=>a*a)(l) )/size_t(l.length) - mean(l)*mean(l) ) );\n}\n\
    /*\nReturn upper quartile for elements in the array l.\n    >>> upperq([3L, 1L,\
    \ 2L, 4L, 5L])\n    4.0\n    >>> upperq([-10L, 4L, 6L, 1000L, 10L, 20L])\n   \
    \ 30.0\n    \n*/\nfloat upperq(long[] l)\n{\n    long[] l_temp = l[];\n    sort(l_temp);\n\
    \    return ( l_temp[size_t(size_t(l_temp.length)/size_t(4L))*size_t(3L)] );\n\
    }\n/*\nReturn lower quartile for elements in the array l.\n    >>> lowerq([3L,\
    \ 1L, 2L, 4L,\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeihsrrgx.d(54): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpeihsrrgx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong[] m = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) {\n\t\tm[i] = l[i];\n\t}\n\tsort(m);\n\t\
    float n = m.length;\n\tint mid = cast(int) (n / 2);\n\tif (n % 2 == 0) {\n\t\t\
    return cast(float) (m[mid - 1] + m[mid]) / 2;\n\t}\n\telse {\n\t\treturn cast(float)\
    \ m[mid];\n\t}\n}\n/*\nReturn mean of elements in the array l.\n    >>> mean([3L,\
    \ 1L, 2L, 4L, 5L])\n    3.0\n    >>> mean([-10L, 4L, 6L, 1000L, 10L, 20L])\n \
    \   59.2\n*/\nfloat mean(long[] l) \n{\n\tint sum = 0;\n\tforeach (long i; l)\
    \ {\n\t\tsum += i;\n\t}\n\treturn cast(float) sum / l.length;\n}\n/*\nReturn standard\
    \ deviation of elements in the array l.\n    >>> stddev([3L, 1L, 2L, 4L, 5L])\n\
    \    1.5811388300841898\n    >>> stddev([-10L, 4L, 6L, 1000L, 10L, 20L])\n   \
    \ 508.85507382787424\n*/\nfloat stddev(long[] l) \n{\n\tfloat avg = mean(l);\n\
    \tfloat[] diffs = new float[l.length];\n\tfor (int i = 0; i < l.length; i++) {\n\
    \t\tdiffs[i] = abs(cast(float) l[i] - avg);\n\t}\n\tfloat sum = 0;\n\tforeach\
    \ (float d; diffs) {\n\t\tsum += d * d;\n\t}\n\treturn sqrt(sum / diffs.length);\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzaqop8ig.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    long[] sortedL =\
    \ l.sort(); \n    int mid; \n    int length = sortedL.length; \n    mid = length\
    \ / 2; \n    \n    if (length % 2 == 0) \n    { \n        return (sortedL[mid]\
    \ + sortedL[mid - 1]) / 2.0; \n    } \n    else \n    { \n        return sortedL[mid];\
    \ \n    } \n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp60ldd_6c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    auto sz = l.length;\n\
    \    if (sz == 0) \n    {\n        throw new Exception(\"median() on empty sequence\"\
    );\n    }\n    l.sort();\n    if (sz % 2 == 1) \n    {\n        return cast(float)l[sz\
    \ / 2];\n    }\n    else \n    {\n        return (cast(float)l[sz / 2 - 1] + cast(float)l[sz\
    \ / 2]) / 2.0;\n    }\n}\n \n/*\nReturn a tuple (g, y, n) where g is the mean\
    \ of the\ngeometric mean of x and y, y is the arithmetic mean of x and y,\nand\
    \ n is the number of values in x and y.\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_s8resx.d(28): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps_s8resx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n == 0)\n    {\n        return 0.0;\n    }\n    else\n    {\n       \
    \ float[] x = new float[n];\n        int i = 0;\n        for (long l2 : l)\n \
    \       {\n            x[i] = l2;\n            i++;\n        }\n        std.sort(x);\n\
    \        int s = n / 2;\n        return (n % 2 == 0) ? (x[s - 1] + x[s]) / 2.0\
    \ : x[s];\n    }\n}\n/*\nReturn mean of elements in the array l.\n    >>> mean([3L,\
    \ 1L, 2L, 4L, 5L])\n    3.0\n    >>> mean([-10L, 4L, 6L, 1000L, 10L, 20L])\n \
    \   169.1666667\n    \n*/\nfloat mean(long[] l)\n{\n    if (l.length == 0)\n \
    \   {\n        return 0.0;\n    }\n    else\n    {\n        float sum = 0.0;\n\
    \        for (long l2 : l)\n        {\n            sum += l2;\n        }\n   \
    \     return sum / l.length;\n    }\n}\n/*\nReturn the difference between the\
    \ largest and smallest elements in the array l.\n    >>> range([3L, 1L, 2L, 4L,\
    \ 5L])\n    4L\n    >>> range([-10L, 4L, 6L, 1000L, 10L, 20L])\n    1010L\n  \
    \  \n*/\nlong range(long[] l)\n{\n    long max = 0;\n    long min = 0;\n    boolean\
    \ init = false;\n    for (long l2 : l)\n    {\n        if (!init)\n        {\n\
    \            max = l2;\n            min = l2;\n            init = true;\n    \
    \    }\n        else\n        {\n            if (l2 > max)\n            {\n  \
    \              max = l2;\n            }\n            if (l2 < min)\n         \
    \   {\n                min = l2;\n            }\n        }\n    }\n    return\
    \ max - min;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmo96izbw.d(21): Error: semicolon expected, not \'':\''\n/tmp/tmpmo96izbw.d(21):
    Error: expression expected, not \'':\''\n/tmp/tmpmo96izbw.d(21): Error: found
    \''l\'' when expecting \'';\'' following for condition\n/tmp/tmpmo96izbw.d(48):
    Error: semicolon expected, not \'':\''\n/tmp/tmpmo96izbw.d(48): Error: expression
    expected, not \'':\''\n/tmp/tmpmo96izbw.d(48): Error: found \''l\'' when expecting
    \'';\'' following for condition\n/tmp/tmpmo96izbw.d(68): Error: semicolon expected,
    not \'':\''\n/tmp/tmpmo96izbw.d(68): Error: expression expected, not \'':\''\n/tmp/tmpmo96izbw.d(68):
    Error: found \''l\'' when expecting \'';\'' following for condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmo96izbw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    /*\n    Split l in\
    \ sorted halves.\n    l1 -- lower half\n    l2 -- upper half\n    */\n    long[]\
    \ l1 = l[0 .. l.length / 2];\n    long[] l2 = l[l.length / 2 .. l.length];\n \
    \   if(l1.length > l2.length) {\n        return median(l2);\n    }\n    else if(l1.length\
    \ < l2.length) {\n        return median(l1);\n    }\n    else {\n        /*\n\
    \        Return median of the 2 medians.\n        */\n        return (median(l1)\
    \ + median(l2)) / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpladi94zk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort;\n    // Find\
    \ the median of the array\n    float median = 0;\n    auto len = l.length;\n \
    \   if (len % 2 == 0) \n    {\n        // Even amount of elements in the array\n\
    \        // Average the two middle element\n        median = (l[len / 2 - 1] +\
    \ l[len / 2]) / 2.0;\n    } \n    else \n    {\n        // Odd amount of elements\
    \ in the array\n        // Take the middle element\n        median = l[len / 2];\n\
    \    }\n    return median;\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdgqxk6l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n    in(l) in(l.length) \n\
    {\n    float m;\n    long[] sl = new long[l.length];\n    long[] kk = new long[l.length];\n\
    \    long temp = 0L;\n    sl = l;\n    foreach(i, j in sl)\n    {\n        foreach(k,\
    \ item in sl)\n        {\n            if(sl[k] < sl[i])\n            {\n     \
    \           temp = sl[i];\n                sl[i] = sl[k];\n                sl[k]\
    \ = temp;\n            }\n        }\n    }\n    int len = l.length;\n    if (len\
    \ % 2 == 0)\n    {\n        m = (sl[len/2] + sl[len/2 - 1])/2;\n    }\n    else\n\
    \    {\n        m = sl[len/2];\n    }\n    return m;\n}\n//Structure for holding\
    \ the data for the sensors\nstruct sensorData\n{\n    float x;\n    float y;\n\
    \    float id;\n    float value;\n}\n/*\nChecks whether the coordinates lie inside\
    \ the circle\n    >>> checkCoordinatesInCircle(0.0f, 0.0f, 0.0f, 2.0f)\n    true\n\
    \    >>> checkCoordinatesInCircle(0.0f, 2.0f, 0.0f, 2.0f)\n    true\n    >>> checkCoordinatesInCircle(2.0f,\
    \ 0.0f, 0.0f, 2.0f)\n    true\n    >>> checkCoordinatesInCircle(2.0f, 2.0f, 0.0f,\
    \ 2.0f)\n    true\n    >>> checkCoordinatesInCircle(0.0f, 0.0f, 1.0f, 2.0f)\n\
    \    false\n    >>> checkCoordinatesInCircle(1.0f, 0.0f, 1.0f, 2.0f)\n    false\n\
    \    >>> checkCoordinatesInCircle(0.0f, 1.0f, 1.0f, 2.0f)\n    false\n    >>>\
    \ checkCoordinates\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeopbos0w.d(11): Error: statement expected to be { }, not (\n/tmp/tmpeopbos0w.d(18):
    Error: no identifier for declarator j\n/tmp/tmpeopbos0w.d(18): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpeopbos0w.d(20): Error: no identifier for declarator
    item\n/tmp/tmpeopbos0w.d(20): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpeopbos0w.d(42):
    Error: found \''struct\'' when expecting \'';\'' following statement\n/tmp/tmpeopbos0w.d(43):
    Error: no identifier for declarator sensorData\n/tmp/tmpeopbos0w.d(43): Error:
    Declaration expected, not \''{\''\n/tmp/tmpeopbos0w.d(48): Error: unrecognized
    declaration\n/tmp/tmpeopbos0w.d(49): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeopbos0w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length & 1)\
    \ \n    {\n        return l[(l.length - 1) / 2];\n    } \n    else \n    {\n \
    \       return (l[l.length / 2] + l[l.length / 2 - 1]) / 2.0;\n    }\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoph_jvsh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    return l.size % 2\
    \ != 0 ? l[l.size / 2] : (l[l.size / 2 - 1] + l[l.size / 2]) / 2.0;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsmtzwl1z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] l1 = l.dup;\n\
    \    l1.sort;\n    if (l1.length & 1) {\n        return l1[(l1.length - 1) / 2];\n\
    \    } else {\n        return (l1[l1.length / 2] + l1[l1.length / 2 - 1]) / 2.0;\n\
    \    }\n}\n/*\nReturn median of elements in the array l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3.0\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    10.0\n  \
    \  \n*/\nfloat median(long[] l) \n{\n    long[] l1 = l.dup;\n    l1.sort;\n  \
    \  if (l1.length & 1) {\n        return l1[(l1.length - 1) / 2];\n    } else {\n\
    \        return (l1[l1.length / 2] + l1[l1.length / 2 - 1]) / 2.0;\n    }\n}\n\
    \ \n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcbpny755.d(39): Error: unrecognized declaration\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpcbpny755.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] s = l.dup;\n\
    \    s.sort;\n    long mid = s.length / 2;\n    return s.length % 2 == 0\n   \
    \     ? (s[mid - 1] + s[mid]) / 2.0f\n        : s[mid];\n}\n/*\nReturn mean of\
    \ elements in the array l.\n    >>> mean([3L, 1L, 2L, 4L, 5L])\n    3.0\n    >>>\
    \ mean([-10L, 4L, 6L, 1000L, 10L, 20L])\n    193.33333333333334\n*/\nfloat mean(long[]\
    \ l)\n{\n    int n = l.length;\n    long sum = 0;\n    foreach (long x; l)\n \
    \       sum += x;\n    return sum / n;\n}\n/*\nReturn standard deviation of elements\
    \ in the array l.\n    >>> std([3L, 1L, 2L, 4L, 5L])\n    1.4142135623730951\n\
    \    >>> std([-10L, 4L, 6L, 1000L, 10L, 20L])\n    454.3928081961589\n*/\nfloat\
    \ std(long[] l)\n{\n    float m = mean(l);\n    int n = l.length;\n    float sum\
    \ = 0;\n    foreach (long x; l)\n        sum += pow(x - m, 2);\n    return sqrt(sum\
    \ / n);\n}\n/*\nGenerate NUMLIST random numbers.\n    >>> nums = random_numbers(10)\n\
    \    >>> len(nums)\n    10\n    >>> nums\n    [92, 12, 83, 36, 19, 58, 20, 44,\
    \ 42, 93]\n*/\nlong[] random_numbers(int NUMLIST)\n{\n    long[] result = new\
    \ long[NUMLIST];\n    for (int i = 0; i < NUMLIST; i++)\n        result[i] = cast(long)random();\n\
    \    return result;\n}\n/*\nReturn the number of times that the character c appears\
    \ in the string s.\n    >>> count_char(\"Mississippi\", 's')\n    4\n   \nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprt84gwla.d(65): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmprt84gwla.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n   long[] sorted = sort(l);\n\
    \   int size = l.length;\n   if (size % 2 == 0) \n      return (float)(sorted[size/2-1]\
    \ + sorted[size/2]) / 2;\n   else \n      return (float)sorted[size/2];\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0auiedsr.d(15): Error: C style cast illegal, use cast(float)(sorted[size
    / 2 - 1] + sorted[size / 2])\n/tmp/tmp0auiedsr.d(17): Error: C style cast illegal,
    use cast(float)sorted[size / 2]\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0auiedsr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    return mean(l);\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptx0ge1y4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n    version(none) {\n  \
    \  int n = l.length;\n    n.sort;\n    if(n%2) return l[n/2];\n    else return\
    \ (l[n/2-1] + l[n/2])/2.0;\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpthfa0i51.d(11): Error: semicolon expected following function
    declaration\n/tmp/tmpthfa0i51.d(13): Error: no identifier for declarator n.sort\n/tmp/tmpthfa0i51.d(14):
    Error: Declaration expected, not \''if\''\n/tmp/tmpthfa0i51.d(15): Error: Declaration
    expected, not \''else\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpthfa0i51.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n == 0)\n    {\n        return 0;\n    }\n    else if (n == 1)\n    {\n\
    \        return cast(float)l[0];\n    }\n    else if (n % 2)\n    {\n        return\
    \ cast(float)l[n / 2];\n    }\n    else\n    {\n        long a = l[n / 2 - 1];\n\
    \        long b = l[n / 2];\n        return cast(float)(a + b) / 2;\n    }\n}\n\
    /*\nReturn mean of elements in the array l.\n    \n    >>> mean([3L, 1L, 2L, 4L,\
    \ 5L])\n    3.0\n    >>> mean([-10L, 4L, 6L, 1000L, 10L, 20L])\n    163.0\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptvwmen90.d(32): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmptvwmen90.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n  import std.array;\n\
    \  assert(l.length > 0);\n  long[] m = l.dup;\n  m.sort;\n  int mid = m.length\
    \ / 2;\n  if (m.length % 2 == 0) \n    return (m[mid] + m[mid + 1]) / 2.0;\n \
    \ else \n    return m[mid];\n}\nunittest\n{\n    alias candidate = median;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7y4723y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n  float med = 0;\n \
    \ if (l.length % 2 == 0)\n    med = (l[l.length / 2] + l[l.length / 2 - 1]) /\
    \ 2.0;\n  else\n    med = l[l.length / 2];\n  return med;\n}\nunittest\n{\n  \
    \  alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo3ejfrbo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tint len = l.length;\n\
    \tint mid = cast(int)floor(cast(float)len / 2.0);\n\tint[int] counts;\n\tlong\
    \ total = 0;\n\tint n = 0;\n\tint i = 0;\n\tint j = 0;\n\t\n\tif (len == 0) \n\
    \t{\n\t\treturn 0.0;\n\t}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeytkfl3q.d(24): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeytkfl3q.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    assert(l.length >\
    \ 0);\n    long[] _l = l.sort(int x, int y => x - y);\n    return _l.length %\
    \ 2 ? _l[_l.length / 2] : (_l[_l.length / 2 - 1] + _l[_l.length / 2]) / 2.0;\n\
    }\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5tnk7hfj.d(13): Error: found \''x\'' when expecting \''.\''
    following int\n/tmp/tmp5tnk7hfj.d(13): Error: found \'',\'' when expecting identifier
    following \''int.\''\n/tmp/tmp5tnk7hfj.d(13): Error: found \''int\'' when expecting
    \'',\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5tnk7hfj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    float ret;\n    long\
    \ n = l.length;\n    if (n % 2 == 0) \n    {\n        ret = (l[n / 2 - 1] + l[n\
    \ / 2]) / 2.0;\n    } \n    else \n    {\n        ret = l[n / 2];\n    }\n   \
    \ return ret;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4etcc45.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n    if (l.length == 0)\n\
    \        return 0.0;\n    else\n        long[] l2 = l[0..$/2];\n        long[]\
    \ l3 = l[$/2..$];\n        if (l.length % 2 == 0)\n            return (float)(l2.back\
    \ + l3.front) / 2;\n        else\n            return (float)l3.front;\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5iugrcz9.d(11): Error: semicolon expected following function
    declaration\n/tmp/tmp5iugrcz9.d(11): Error: Declaration expected, not \''if\''\n/tmp/tmp5iugrcz9.d(13):
    Error: Declaration expected, not \''else\''\n/tmp/tmp5iugrcz9.d(16): Error: Declaration
    expected, not \''if\''\n/tmp/tmp5iugrcz9.d(18): Error: Declaration expected, not
    \''else\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5iugrcz9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    int n = l.length;\n\
    \    n.sort;\n    if (n % 2 == 0)\n        return (l[n/2] + l[n/2-1]) / 2;\n \
    \   else\n        return l[n/2];\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7mpzz_jb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong[] a = l[0..$];\n\
    \tsort(a);\n\tint n = a.length;\n\tif (n == 0)\n\t{\n\t\treturn 0.0;\n\t}\n\t\
    if (n % 2 == 1)\n\t{\n\t\treturn cast(float)a[n / 2];\n\t}\n\treturn (cast(float)a[n\
    \ / 2 - 1] + cast(float)a[n / 2]) / 2.0;\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp26dta2ie.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    long[] l2 = l[0..$];\n\
    \    quickSort(l2); \n    if(l2.length % 2) \n        return l2[$/2]; \n    else\
    \ \n        return cast(float)(l2[$/2] + l2[$/2-1])/2; \n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc37xrzhi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tlong[] temp = l.dup;\n\
    \tint n = temp.length;\n\ttemp.sort;\n\tif (n % 2 == 0)\n\t{\n\t\treturn (float)(temp[n/2]\
    \ + temp[n/2-1])/2;\n\t}\n\telse\n\t{\n\t\treturn (float)temp[n/2];\n\t}\n}\n\
    /*\nReturn the interquartile range of elements in the array l.\n    >>> interquartile_range([3L,\
    \ 1L, 2L, 4L, 5L])\n    2.0\n    >>> interquartile_range([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    1000.0\n    >>> interquartile_range([5L, 5L, 4L, 4L, 3L, 3L,\
    \ 2L, 2L, 1L, 1L])\n    1.0\n*/\nfloat interquartile_range(long[] l) \n{\n\tlong[]\
    \ temp = l.dup;\n\tint n = temp.length;\n\ttemp.sort;\n\tint q1 = median(temp[0..n/2]);\n\
    \tint q3 = median(temp[(n+1)/2..$]);\n\treturn (float)(q3 - q1);\n}\n/*\nReturn\
    \ the minimum of elements in the array l.\n    >>> minimum([3L, 1L, 2L, 4L, 5L])\n\
    \    1L\n    >>> minimum([-10L, 4L, 6L, 1000L, 10L, 20L])\n    -10L\n*/\nlong\
    \ minimum(long[] l) \n{\n\treturn l.min;\n}\n/*\nReturn the maximum of elements\
    \ in the array l.\n    >>> maximum([3L, 1L, 2L, 4L, 5L])\n    5L\n    >>> maximum([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    1000L\n*/\nlong maximum(long[] l) \n{\n\treturn\
    \ l.max;\n}\n/*\nReturn the absolute deviation of the elements in the array l.\n\
    \    >>> absolute_deviation([3L, 1L, 2\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo83j9z2r.d(17): Error: C style cast illegal, use cast(float)(temp[n
    / 2] + temp[n / 2 - 1])\n/tmp/tmpo83j9z2r.d(21): Error: C style cast illegal,
    use cast(float)temp[n / 2]\n/tmp/tmpo83j9z2r.d(40): Error: C style cast illegal,
    use cast(float)(q3 - q1)\n/tmp/tmpo83j9z2r.d(64): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo83j9z2r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort;\n    int\
    \ n = l.length;\n    // Odd\n    if (n % 2 == 1) {\n        return l[n / 2];\n\
    \    }\n    // Even\n    else {\n        return 0.5 * (l[n / 2 - 1] + l[n / 2]);\n\
    \    }\n}\n/*\nReturn mode of elements in the array l. If there is no mode,\n\
    it returns 0.0.\n    >>> mode([3L, 3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> mode([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    0.0\n    >>> mode([0.0, 3.2, 5.4, 7.6, 10.0])\n\
    \    0.0\n    >>> mode([1L, 1L, 2L, 2L, 3L, 3L, 4L, 4L, 5L, 5L])\n    0.0\n*/\n\
    float mode(long[] l) \n{\n    long[] counts = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++) {\n        for (int j = 0; j < l.length; j++) {\n\
    \            if (l[i] == l[j]) {\n                counts[i]++;\n            }\n\
    \        }\n    }\n    long max = counts[0];\n    for (int i = 1; i < counts.length;\
    \ i++) {\n        if (counts[i] > max) {\n            max = counts[i];\n     \
    \   }\n    }\n    if (max == 1) {\n        return 0.0;\n    }\n    else {\n  \
    \      for (int i = 0; i < counts.length; i++) {\n            if (counts[i] ==\
    \ max) {\n                return l[i];\n            }\n        }\n    }\n    return\
    \ 0.0;\n}\n/*\nReturn the range of elements in the array l.\n    >>> range([3L,\
    \ 1L, 2L, 4L, 5L])\n    4L\n    >>> range([-10L, 4L, 6L, 1000L, 10\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg6lacf9l.d(63): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpg6lacf9l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n  long k;\n  long i;\n\
    \  float m;\n  k = l.length / 2L;\n  if ((i = l.length & 1L) == 0L) \n  {\n  \
    \  m = (l[k - 1L] + l[k]) / 2.0f;\n  } \n  else \n  {\n    m = l[k];\n  }\n  return\
    \ m;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw29i7z_3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tint len = l.length;\n\
    \tlong[] sorted = new long[len];\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\t\
    sorted[i] = l[i];\n\t}\n\t//sorted = [sorted[i] for i in xrange(len(sorted))];\n\
    \tsort(sorted);\n\tif (len % 2 == 0) \n\t{\n\t\treturn (sorted[len / 2] + sorted[len\
    \ / 2 - 1]) / 2.0;\n\t}\n\telse \n\t{\n\t\treturn sorted[len / 2];\n\t}\n}\n/*\n\
    Return standard deviation of elements in the array l.\n    >>> stddev([3L, 1L,\
    \ 2L, 4L, 5L])\n    1.5811388300841898\n    >>> stddev([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    879.266915526904\n*/\nfloat stddev(long[] l) \n{\n\tfloat mean =\
    \ sum(l) / l.length;\n\tfloat diffs = 0;\n\tforeach (long i; l) \n\t{\n\t\tdiffs\
    \ += (i - mean) * (i - mean);\n\t}\n\treturn sqrt(diffs / l.length);\n}\n/*\n\
    Return the i'th percentile of elements in the array l.\n    >>> percentile([3L,\
    \ 1L, 2L, 4L, 5L], 0.5)\n    3L\n    >>> percentile([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L], 0.5)\n    15.0\n    >>> percentile([3L, 1L, 2L, 4L, 5L], 0.25)\n    2L\n\
    \    >>> percentile([-10L, 4L, 6L, 1000L, 10L, 20L], 0.25)\n    5.0\n    >>> percentile([3L,\
    \ 1L, 2L, 4L, 5L], 0.75)\n    4L\n    >>> percentile([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L],\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm2xxdeye.d(46): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpm2xxdeye.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tint size = len(l);\n\
    \tlong[] newArray = new long[size];\n\tforeach(int i, long v; l) \n\t{\n\t\tnewArray[i]\
    \ = v;\n\t}\n\tsort(newArray);\n\treturn size % 2 == 0 ? (newArray[size / 2] +\
    \ newArray[size / 2 - 1]) / 2.0 : newArray[size / 2];\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsnng8he_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tstd.sort(l);\n\treturn\
    \ (l.length % 2 == 0) ? (l[l.length / 2] + l[l.length / 2 - 1]) / 2 : l[l.length\
    \ / 2];\n}\n//\nlong[] nums = [3L, 1L, 2L, 4L, 5L];\nassert(median(nums) == 3L);\n\
    nums = [-10L, 4L, 6L, 1000L, 10L, 20L];\nassert(median(nums) == 15.0f);\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzp9u6h_y.d(17): Error: Declaration expected, not \''assert\''\n/tmp/tmpzp9u6h_y.d(18):
    Error: no identifier for declarator nums\n/tmp/tmpzp9u6h_y.d(18): Error: Declaration
    expected, not \''=\''\n/tmp/tmpzp9u6h_y.d(19): Error: Declaration expected, not
    \''assert\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzp9u6h_y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    bool sorted = false;\
    \ \n    long middle = 0; \n    float median = 0; \n    long[] sortedList = new\
    \ long[l.length]; \n    for (int i = 0; i < l.length; i++) \n    { \n        sortedList[i]\
    \ = l[i]; \n    } \n    while (!sorted) \n    { \n        sorted = true; \n  \
    \      for (int i = 0; i < l.length - 1; i++) \n        { \n            if (sortedList[i]\
    \ > sortedList[i + 1]) \n            { \n                sorted = false; \n  \
    \              middle = sortedList[i]; \n                sortedList[i] = sortedList[i\
    \ + 1]; \n                sortedList[i + 1] = middle; \n            } \n     \
    \   } \n    } \n    if (sortedList.length % 2 == 0) \n    { \n        median =\
    \ cast(float)(sortedList[sortedList.length / 2] + sortedList[sortedList.length\
    \ / 2 - 1]) / 2; \n    } \n    else \n    { \n        median = cast(float)sortedList[sortedList.length\
    \ / 2]; \n    } \n    return median; \n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpobnrxe6s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n  int n = len(l);\n\
    \  return n % 2 == 0 ? (l[n / 2 - 1] + l[n / 2]) / 2.0 : l[n / 2];\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxsbz8akz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int len = l.length;\n\
    \    if (len == 0) {\n        return 0.0;\n    }\n    quickSort(l);\n    if (len\
    \ % 2 == 0) {\n        return (float)(l[len / 2] + l[len / 2 - 1]) / 2;\n    }\
    \ else {\n        return l[len / 2];\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfxah5_pp.d(18): Error: C style cast illegal, use cast(float)(l[len
    / 2] + l[len / 2 - 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxah5_pp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int[] pos = new int[2\
    \ * l.length];\n    int n = 0;\n    foreach (e; l) \n    {\n        int m = n;\n\
    \        while (m > 0 && l[e] < l[pos[m - 1]]) \n        {\n            pos[m]\
    \ = pos[m - 1];\n            m -= 1;\n        }\n        pos[m] = e;\n       \
    \ n += 1;\n    }\n    if (n % 2 == 1) \n    {\n        return l[pos[n / 2]];\n\
    \    } \n    else \n    {\n        return (l[pos[n / 2 - 1]] + l[pos[n / 2]])\
    \ / 2.0;\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnq5bkb1y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if(l.length == 0)\
    \ \n    {\n        return 0.0;\n    }\n    if(l.length == 1) \n    {\n       \
    \ return l[0];\n    }\n    if(l.length % 2 == 0) \n    {\n        return (l[l.length\
    \ / 2] + l[l.length / 2 - 1]) / 2.0;\n    }\n    return l[l.length / 2];\n}\n\
    /*\nCalculate the correlation coefficient of X and Y.\n    >>> corr([1L, 2L, 3L],\
    \ [4L, 5L, 6L])\n    1.0\n    >>> corr([1L, 2L, 3L], [4L, 5L, 0L])\n    0.5\n\
    \    >>> corr([1L, 2L, 3L], [4L, 0L, 6L])\n    0.5\n    >>> corr([1L, 2L, 3L],\
    \ [4L, 0L, 0L])\n    0.0\n    >>> corr([1L, 2L, 3L], [0L, 5L, 6L])\n    0.0\n\
    \    >>> corr([1L, 2L, 3L], [0L, 0L, 0L])\n    0.0\n*/\ndouble corr(long[] X,\
    \ long[] Y) \n{\n    if(X.length != Y.length) \n    {\n        return 0.0;\n \
    \   }\n    int n = X.length;\n    long sum_x = 0L;\n    long sum_y = 0L;\n   \
    \ long sum_xy = 0L;\n    long sum_x2 = 0L;\n    long sum_y2 = 0L;\n    long[]\
    \ xy = new long[n];\n    long[] x2 = new long[n];\n    long[] y2 = new long[n];\n\
    \    for(int i = 0; i < n; i++) \n    {\n        xy[i] = X[i] * Y[i];\n      \
    \  x2[i] = X[i] * X[i];\n        y2[i] = Y[i] * Y\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5pp1ljcu.d(61): Error: found \''unittest\'' when expecting \'';\''
    following statement\n/tmp/tmp5pp1ljcu.d(71): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\n/tmp/tmp5pp1ljcu.d(71): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp5pp1ljcu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    long[] t = l[0..$];\n\
    \    sort(t);\n    if (t.length % 2 == 1) \n        return cast(float)t[t.length\
    \ / 2];\n    else \n        return (cast(float)t[t.length / 2 - 1] + cast(float)t[t.length\
    \ / 2]) / 2;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq3n_0mnj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\n\
    \        return 0.0;\n    if (l.length == 1)\n        return l[0];\n    long[]\
    \ l2 = new long[l.length];\n    l2 = l;\n    quickSort(l2);\n    uint mid = l2.length\
    \ / 2;\n    if (l2.length % 2 == 0)\n        return (float)(l2[mid - 1] + l2[mid])\
    \ / 2;\n    else\n        return (float)l2[mid];\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpopqui1qz.d(21): Error: C style cast illegal, use cast(float)(l2[mid
    - 1] + l2[mid])\n/tmp/tmpopqui1qz.d(23): Error: C style cast illegal, use cast(float)l2[mid]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpopqui1qz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length % 2\
    \ == 0) \n    {\n        return (l[l.length / 2] + l[l.length / 2 - 1]) / 2;\n\
    \    } \n    else \n    {\n        return l[l.length / 2];\n    }\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb8kj2ync.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    int[] indexes = sort(l).indices;\n    int m = 0;\n    if (n % 2)\n    {\n\
    \        m = n / 2;\n        return l[indexes[m]];\n    }\n    else\n    {\n \
    \       m = n / 2;\n        return (l[indexes[m]] + l[indexes[m + 1]]) / 2.0;\n\
    \    }\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ee5kmvb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n == 0) return 0;\n    if (n == 1) return l[0];\n    n = n/2;\n    sort(l);\n\
    \    if (n % 2 == 0) {\n        return (l[n] + l[n-1])/2;\n    } else {\n    \
    \    return l[n];\n    }\n}\nunittest\n{\n    alias candidate = median;\n\n  \
    \  assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8mlz3zmy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort;\n    long\
    \ sz = l.length;\n    if (sz % 2 == 0) \n    {\n        int m = sz / 2;\n    \
    \    return (l[m - 1] + l[m]) / 2.0;\n    }\n    else \n    {\n        return\
    \ l[sz / 2];\n    }\n}\n/*\nSlice out the middle part of the array a.\n    >>>\
    \ middle([1L, 2L, 3L, 4L, 5L])\n    [2L, 3L]\n    >>> middle([1L, 2L, 3L])\n \
    \   [2L]\n*/\nlong[] middle(long[] a) \n{\n    long sz = a.length;\n    long offs\
    \ = a.length / 4;\n    long[] res = new long[sz - offs * 2];\n    for (long i\
    \ = 0; i < res.length; i++) \n    {\n        res[i] = a[offs + i];\n    }\n  \
    \  return res;\n}\nlong[] sort(long[] a) \n{\n    a.sort;\n    return a;\n}\n\
    //size\nlong size(long[] a) \n{\n    return a.length;\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptyrmi0d8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tint n = l.length;\n\
    \tif (n == 0) \n\t{\n\t\treturn -1;\n\t} \n\telse if (n == 1) \n\t{\n\t\treturn\
    \ l[0];\n\t} \n\telse if (n % 2 == 0) \n\t{\n\t\treturn (l[n / 2] + l[n / 2 -\
    \ 1]) / 2.0;\n\t} \n\telse \n\t{\n\t\treturn l[n / 2];\n\t}\n}\nunittest\n{\n\
    \    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) ==\
    \ 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr84y7jwy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\tif (l.length == 0)\n\
    \t\treturn NAN;\n\tfloat[] sorted = sort(l.map!(a => cast(float)a));\n\tif (sorted.length\
    \ % 2) {\n\t\treturn sorted[sorted.length / 2];\n\t} else {\n\t\treturn (sorted[sorted.length\
    \ / 2 - 1] + sorted[sorted.length / 2]) / 2;\n\t}\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxnjx2ia.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort;\n    auto\
    \ n = l.length;\n    if (n % 2)\n    {\n        return cast(float)l[n / 2];\n\
    \    }\n    else\n    {\n        return (cast(float)l[n / 2 - 1] + cast(float)l[n\
    \ / 2]) / 2;\n    }\n}\n/*\nReturn the sum of all elements in the array l.\n \
    \   >>> sum_array([2L, 3L, 4L])\n    9L\n    >>> sum_array([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    1040L\n*/\nlong sum_array(long[] l) \n{\n    auto sum = 0L;\n\
    \    foreach (x; l) \n    {\n        sum += x;\n    }\n    return sum;\n}\n/*\n\
    \    Return sum of squares of all elements in the array l.\n    >>> sum_squares([2L,\
    \ 3L, 4L])\n    29L\n    >>> sum_squares([-10L, 4L, 6L, 1000L, 10L, 20L])\n  \
    \  218110L\n*/\nlong sum_squares(long[] l) \n{\n    auto sum = 0L;\n    foreach\
    \ (x; l) \n    {\n        sum += x * x;\n    }\n    return sum;\n}\n/*\nReturn\
    \ the mean of the elements in the array l.\n    >>> mean([2L, 3L, 4L])\n    3.0\n\
    \    >>> mean([-10L, 4L, 6L, 1000L, 10L, 20L])\n    169.166667\n*/\nfloat mean(long[]\
    \ l) \n{\n    auto n = l.length;\n    return cast(float)sum_array(l) / n;\n}\n\
    /*\nReturn the variance of the elements in the array l.\n    >>> variance([2L,\
    \ 3L, 4L])\n    1.0\n    >>> variance([-10L, 4L, 6L, 1000L, 10L, 20L])\n    216105.5\n\
    */\nfloat variance(long[] l) \n{\n    auto m = mean\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqmqffo8x.d(77): Error: semicolon expected following auto declaration,
    not \''unittest\''\n/tmp/tmpqmqffo8x.d(77): Error: found \''unittest\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqmqffo8x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    /*\n    to calculate\
    \ the median of a list, we must first sort the list.\n    */\n    l.sort();\n\
    \    float median = 0;\n    int len = l.length;\n    if (len % 2 == 0) {\n   \
    \     /*\n        if the length of l is even, we want to find the average of the\
    \ two middle elements.\n        */\n        median = (float)(l[len/2] + l[len/2\
    \ - 1]) / 2;\n    } else {\n        /*\n        if the length of l is odd, we\
    \ just want the middle element.\n        */\n        median = l[len/2];\n    }\n\
    \    return median;\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9o6rmeva.d(22): Error: C style cast illegal, use cast(float)(l[len
    / 2] + l[len / 2 - 1])\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9o6rmeva.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n\treturn 0.0;\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp69z_1twv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n    long[] t = to!(long[])(l.dup);\
    \ \n    long[] p = t.sort; \n    if (p.length % 2) \n    { \n        return p[p.length\
    \ / 2]; \n    } \n    else \n    { \n        return (p[p.length / 2 - 1] + p[p.length\
    \ / 2]) / 2.0; \n    } \n}\nunittest\n{\n    alias candidate = median;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnv7ch5hp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if(l.length % 2 ==\
    \ 0) \n    {\n        return (l[l.length / 2] + l[l.length / 2 - 1]) / 2.0;\n\
    \    } \n    else \n    {\n        return l[l.length / 2];\n    }\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppjshcool.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n    if (l.length == 0)\n\
    \        return 0.0;\n    \n    l.sort;\n    if (l.length & 1) \n        return\
    \ cast(float) l[l.length / 2];\n    else \n        return (cast(float) l[l.length\
    \ / 2 - 1] + cast(float) l[l.length / 2]) / 2.0;\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgg2e3dq2.d(11): Error: semicolon expected following function
    declaration\n/tmp/tmpgg2e3dq2.d(11): Error: Declaration expected, not \''if\''\n/tmp/tmpgg2e3dq2.d(14):
    Error: no identifier for declarator l.sort\n/tmp/tmpgg2e3dq2.d(15): Error: Declaration
    expected, not \''if\''\n/tmp/tmpgg2e3dq2.d(17): Error: Declaration expected, not
    \''else\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgg2e3dq2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long len = l.length;\n\
    \    if (len == 0)\n        return 0;\n    long half = len / 2;\n    if (len %\
    \ 2)\n        return l[half];\n    else\n        return (l[half] + l[half + 1])\
    \ / 2.0;\n}\n/*\nReturn the mean of the elements in the array l.\n    >>> mean([1L,\
    \ 4L, 2L, 3L, 5L])\n    3.0\n    >>> mean([])\n    0.0\n*/\nfloat mean(long[]\
    \ l) \n{\n    long len = l.length;\n    if (len == 0)\n        return 0;\n   \
    \ float sum = 0;\n    foreach (long i; l)\n        sum += i;\n    return sum /\
    \ len;\n}\n/*\nReturn the standard deviation of the elements in the array l.\n\
    \    >>> round(stddev([1L, 4L, 2L, 3L, 5L]), 2)\n    1.58\n    >>> round(stddev([3L,\
    \ 1L, 2L, 4L, 5L]), 2)\n    1.58\n    >>> round(stddev([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L]), 2)\n    240.26\n*/\nfloat stddev(long[] l) \n{\n    long len = l.length;\n\
    \    if (len == 0)\n        return 0;\n    float mean = mean(l);\n    float sumsq\
    \ = 0;\n    foreach (long i; l)\n        sumsq += (i - mean) ** 2;\n    return\
    \ sqrt(sumsq / len);\n}\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4swwwc97.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort();\n    return\
    \ ((cast(float)l[(l.length+1)/2])+(cast(float)l[(l.length+1)/2-1]))/2.0;\n}\n\
    unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L,\
    \ 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n\
    \    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n\
    \    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfqj4kvyz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort();\n    size_t\
    \ sz = l.length;\n    if (sz % 2 == 0) {\n        return float(l[sz / 2 - 1] +\
    \ l[sz / 2]) / 2;\n    } else {\n        return l[sz / 2];\n    }\n}\nunittest\n\
    {\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n  \
    \  assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n \
    \   assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi3qvkh8c.d(15): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpi3qvkh8c.d(15): Error: found \'')\'' when expecting \'';\''
    following return statement\n/tmp/tmpi3qvkh8c.d(15): Error: found \''/\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi3qvkh8c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    if (l.length == 0)\
    \ \n    {\n        return 0.0;\n    }\n    int h = l.length / 2;\n    if (l.length\
    \ % 2 == 0) \n    {\n        return (l[h - 1] + l[h]) / 2.0;\n    }\n    else\
    \ \n    {\n        return l[h];\n    }\n}\nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf0rdblqy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int i = 0;\n    float\
    \ m = 0.0;\n    int ln = l.length;\n    if (ln == 0)\n    {\n        m = 0.0;\n\
    \    }\n    else if (ln == 1)\n    {\n        m = (float)l[0];\n    }\n    else\
    \ if (ln == 2)\n    {\n        m = (float)(l[0] + l[1]) / 2.0;\n    }\n    else\n\
    \    {\n        l.sort();\n        if (ln % 2 == 0)\n        {\n            i\
    \ = ln / 2;\n            m = (float)(l[i - 1] + l[i]) / 2.0;\n        }\n    \
    \    else\n        {\n            i = (ln - 1) / 2;\n            m = (float)l[i];\n\
    \        }\n    }\n    return m;\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv_8d7oys.d(21): Error: C style cast illegal, use cast(float)l[0]\n/tmp/tmpv_8d7oys.d(25):
    Error: C style cast illegal, use cast(float)(l[0] + l[1])\n/tmp/tmpv_8d7oys.d(33):
    Error: C style cast illegal, use cast(float)(l[i - 1] + l[i])\n/tmp/tmpv_8d7oys.d(38):
    Error: C style cast illegal, use cast(float)l[i]\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpv_8d7oys.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{ \n\tint n = l.length;\n\
    \tif(n % 2 == 0) \n\t{\n\t\treturn float(l[n/2-1] + l[n/2]) / 2;\n\t} \n\telse\
    \ \n\t{\n\t\treturn l[n/2];\n\t}\n}\n/*\nReturn the mode of the elements in l.\n\
    \    >>> mode([3L, 1L, 2L, 4L, 5L])\n    [1L, 2L, 3L, 4L, 5L]\n    >>> mode([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L])\n    [10L, 20L, -10L, 4L, 6L, 1000L]\n*/\nlong[] mode(long[]\
    \ l) \n{\n\tint maxcount = 0;\n\tforeach(l; a) \n\t{\n\t\tif(count(l, a) > maxcount)\
    \ \n\t\t{\n\t\t\tmaxcount = count(l, a);\n\t\t}\n\t}\n\tlong[] modes = [];\n\t\
    foreach(l; a) \n\t{\n\t\tif(count(l, a) == maxcount) \n\t\t{\n\t\t\tappend(modes,\
    \ a);\n\t\t}\n\t}\n\tsort(modes);\n\treturn modes;\n}\n/*\nReturn the standard\
    \ deviation of l.\n    >>> stddev([1L, 2L, 3L, 4L, 5L])\n    1.4142135623730951\n\
    \    >>> stddev([-10L, 4L, 6L, 1000L, 10L, 20L])\n    646.9327804040597\n*/\n\
    float stddev(long[] l) \n{\n\tlong average = mean(l);\n\tlong[] d = [];\n\tforeach(l;\
    \ a) \n\t{\n\t\tappend(d, (a - average) ^ 2);\n\t}\n\treturn sqrt(mean(d));\n\
    }\n/*\nReturn the sum of squares of elements in l.\n    >>> sum_of_squares([1L,\
    \ 2L, 3L, 4L, 5L])\n\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwa_wiw_b.d(15): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpwa_wiw_b.d(15): Error: found \'')\'' when expecting \'';\''
    following return statement\n/tmp/tmpwa_wiw_b.d(15): Error: found \''/\'' instead
    of statement\n/tmp/tmpwa_wiw_b.d(67): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwa_wiw_b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    size_t len = l.length;\n\
    \    if (len == 0) \n    {\n        return 0.0;\n    }\n    if (len == 1) \n \
    \   {\n        return l[0];\n    }\n    sort(l);\n    if (len % 2 == 0) \n   \
    \ {\n        return float(l[len / 2 - 1] + l[len / 2]) / 2.0;\n    }\n    else\
    \ \n    {\n        return l[len / 2];\n    }\n}\nunittest\n{\n    alias candidate\
    \ = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7n2n5ti6.d(24): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmp7n2n5ti6.d(24): Error: found \'')\'' when expecting \'';\''
    following return statement\n/tmp/tmp7n2n5ti6.d(24): Error: found \''/\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7n2n5ti6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    long[] cl = new long[l.length];\n\
    \    foreach (long n; l) \n    {\n        cl[cast(int)n]++;\n    }\n    long n\
    \ = 0;\n    long m = cl.length - 1;\n    while (true) \n    {\n        n += cl[cast(int)m];\n\
    \        if (n >= cast(int)(l.length / 2 + 1)) \n        {\n            break;\n\
    \        }\n        m--;\n    }\n    return float(m);\n}\nunittest\n{\n    alias\
    \ candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n\
    \    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L])\
    \ == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L,\
    \ 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6fqyhyik.d(28): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmp6fqyhyik.d(28): Error: found \'')\'' when expecting \'';\''
    following return statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6fqyhyik.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    if (n == 0) {\n        throw new IllegalArgumentException(\"n == 0\");\n\
    \    }\n    n = n.sort();\n    int mid = (n.length - 1) / 2;\n    if (n.length\
    \ % 2 == 1) {\n        return n[mid];\n    } else {\n        return (n[mid] +\
    \ n[mid + 1]) / 2.0;\n    }\n}\n/*\nReturn mean of elements in the array l.\n\
    \    >>> mean([3L, 1L, 2L, 4L, 5L])\n    3.0\n    >>> mean([-10L, 4L, 6L, 1000L,\
    \ 10L, 20L])\n    140.0\n*/\nfloat mean(long[] l) \n{\n    int n = l.length;\n\
    \    if (n == 0) {\n        throw new IllegalArgumentException(\"n == 0\");\n\
    \    }\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n\
    \    }\n    return sum / (float) n;\n}\n/*\nReturn number of occurrences of v\
    \ in the array l.\n    >>> occurrences(1L, [3L, 1L, 2L, 4L, 5L])\n    1\n    >>>\
    \ occurrences(10L, [3L, 1L, 2L, 4L, 5L])\n    0\n    >>> occurrences(1L, [3L,\
    \ 1L, 2L, 4L, 5L, 1L, 1L, 1L])\n    3\n*/\nunittest\n{\n    alias candidate =\
    \ median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4_jrm5c9.d(41): Error: C style cast illegal, use cast(float)n\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_jrm5c9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    l.sort();\n    auto\
    \ n = l.length;\n    if(n % 2 == 1) {\n        return l[n / 2];\n    }\n    else\
    \ {\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    }\n}\n/*\nReturn average\
    \ of elements in the array l.\n    \n    >>> average([3L, 1L, 2L, 4L, 5L])\n \
    \   3.0\n    >>> average([-10L, 4L, 6L, 1000L, 10L, 20L])\n    195.0\n*/\nfloat\
    \ average(long[] l) \n{\n    long sum = 0;\n    foreach(e; l) {\n        sum +=\
    \ e;\n    }\n    return sum / cast(float)l.length;\n}\n/*\nReturn variance of\
    \ elements in the array l.\n    \n    >>> variance([3L, 1L, 2L, 4L, 5L])\n   \
    \ 2.0\n    >>> variance([-10L, 4L, 6L, 1000L, 10L, 20L])\n    650735.0\n*/\nfloat\
    \ variance(long[] l) \n{\n    float avg = average(l);\n    float sum = 0;\n  \
    \  foreach(e; l) {\n        sum += (e - avg) * (e - avg);\n    }\n    return sum\
    \ / cast(float)l.length;\n}\n/*\nReturn standard deviation of elements in the\
    \ array l.\n    \n    >>> stddev([3L, 1L, 2L, 4L, 5L])\n    1.4142135623730951\n\
    \    >>> stddev([-10L, 4L, 6L, 1000L, 10L, 20L])\n    805.5305039125915\n*/\n\
    float stddev(long[] l) \n{\n    return sqrt(variance(l));\n}\n/*\nReturn std::max(|l[i]\
    \ - l[j]|)\n    \n    >>> range([3L, 1L, 2L, 4L, 5L])\n    4L\n    >>> range([-10L,\
    \ 4L, 6L, 1000\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy76biinb.d(66): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpy76biinb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n    int n = l.length;\n\
    \    long[] l2 = new long[n];\n    long pivot;\n    while (true) {\n        pivot\
    \ = l[int(floor(random() * n))];\n        long t = 0;\n        long t2 = 0;\n\
    \        foreach (long v; l) {\n            if (v < pivot)\n                l2[t++]\
    \ = v;\n            else if (v > pivot)\n                l2[n - ++t2] = v;\n \
    \       }\n        long t3 = t + t2;\n        if (t3 < n && t3 > n - t3) {\n \
    \           foreach (long v; l) {\n                if (v == pivot)\n         \
    \           l2[t++] = v;\n            }\n            break;\n        }\n     \
    \   if (t > n - t2) {\n            l = l2[0..t];\n        } else if (t < n - t2)\
    \ {\n            l = l2[t2..n];\n        } else {\n            return l2[t-1];\n\
    \        }\n    }\n    int n2 = t;\n    if (n2 % 2 == 1) {\n        return l2[n2\
    \ / 2];\n    } else {\n        return (l2[n2 / 2 - 1] + l2[n2 / 2]) / 2.0;\n \
    \   }\n}\n/*\nunittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L])\
    \ == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L])\
    \ == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5f7qu3wz.d(16): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp5f7qu3wz.d(16): Error: found \'')\'' when expecting \'']\''\n/tmp/tmp5f7qu3wz.d(16):
    Error: found \'']\'' when expecting \'';\'' following statement\n/tmp/tmp5f7qu3wz.d(48):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5f7qu3wz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
- exit_code: 1
  program: "import std.math;\n/*\nReturn median of elements in the array l.\n    >>>\
    \ median([3L, 1L, 2L, 4L, 5L])\n    3L\n    >>> median([-10L, 4L, 6L, 1000L, 10L,\
    \ 20L])\n    15.0\n    \n*/\nfloat median(long[] l) \n{\n  int n = l.length;\n\
    \  int m = n / 2;\n  long[] l2 = l[0..m];\n  int n2 = l2.length;\n  long[] l3\
    \ = l[m..n];\n  int n3 = l3.length;\n  long[] l4 = l3[0..n3-1];\n  int n4 = l4.length;\n\
    \  if(n % 2 == 0) \n  {\n    return ((l2[n2-1] + l4[n4-1]) / 2.0);\n  }\n  else\
    \ \n  {\n    return l[m];\n  }\n}\nunittest\n{\n    alias candidate = median;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L,\
    \ 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n   \
    \ assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L,\
    \ 2L, 7L]) == 7L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ogk2k87.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004120
