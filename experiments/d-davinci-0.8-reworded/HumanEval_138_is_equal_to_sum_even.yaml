name: HumanEval_138_is_equal_to_sum_even
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nEvaluate whether the given number\
  \ n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
  \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
  \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
  \ n) \n"
tests: "unittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L)\
  \ == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n\
  \    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n   \
  \ assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L)\
  \ == true);\n}\nvoid main(){}"
completions: ["{\n    if (n % 2 != 0) return false;\n    else\n    {\n        for\
    \ (size_t i = n / 2; i >= n / 4; i -= 2)\n        {\n            if (n == i *\
    \ 4) return true;\n        }\n        return false;\n    }\n}\n/*\n    Calculate\
    \ the following sum of a series of numbers:\n    sum = 0.0005 + 0.0010 + 0.0015\
    \ + 0.0020 + 0.0025 + ... + 0.0095 + 0.0100\n    Use a for loop to calculate the\
    \ sum, and return the answer as a double.\n    The sum should be equal to 0.01.",
  "{\n    return (n % 2 == 0);\n}", "{\n    if(n%2!=0) return false;\n    else if(n==4)\
    \ return false;\n    else if(n==2) return false;\n    else if(n==0) return false;\n\
    \    else return true;\n}", "{\n    auto upper_limit = long(n / 4);\n    auto\
    \ lower_limit = long(n / 2);\n    auto sum_of_four_evens = tuple!(long, long,\
    \ long, long)(0L, 0L, 0L, 0L);\n    for (long i = upper_limit; i <= lower_limit;\
    \ i++) \n    {\n        for (long j = i; j <= lower_limit; j++) \n        {\n\
    \            for (long k = j; k <= lower_limit; k++) \n            {\n       \
    \         for (long l = k; l <= lower_limit; l++) \n                {\n      \
    \              sum_of_four_evens = tuple!(long, long, long, long)(i, j, k, l);\n\
    \                    if (sum_of_four_evens[0] + sum_of_four_evens[1] + sum_of_four_evens[2]\
    \ + sum_of_four_evens[3] == n) \n                    {\n                     \
    \   return true;\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return false;\n}", "{\n    if (n % 2 == 1) return false;\n\
    \    return true;\n}\n/*\nEvaluate whether the given number n can be written as\
    \ the sum of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n\
    \    false\n    >>> is_equal_to_sum_odd(5L)\n    false\n    >>> is_equal_to_sum_odd(7L)\n\
    \    true\n    \n*/", "{\n    if (n % 2 != 0)\n        return false;\n    else\n\
    \    {\n        long remainder = n;\n        long i = 0;\n        while (remainder\
    \ > 0)\n        {\n            i += 2;\n            remainder -= i;\n        }\n\
    \        return remainder == 0;\n    }\n}\n/*\n    Find the sum of the even-valued\
    \ terms in the Fibonacci sequence which do not exceed the given limit n.\n   \
    \ Example\n    >>> find_fibonacci_sum_even(10L)\n    10\n    >>> find_fibonacci_sum_even(15L)\n\
    \    10\n    >>> find_fibonacci_sum_even(19L)\n    10\n    >>> find_fibonacci_sum_even(21L)\n\
    \    44\n    >>> find_fibonacci_sum_even(22L)\n    44\n    >>> find_fibonacci_sum_even(23L)\n\
    \    44\n*/\nlong find_fibonacci_sum_even(long n) \n{\n    long m1 = 0, m2 = 2,\
    \ result = 0;\n    while (m2 <= n)\n    {\n        result += m2;\n        long\
    \ temp = m2;\n        m2 = 4 * m2 + m1;\n        m1 = temp;\n    }\n    return\
    \ result;\n}\n/*\nGiven the lengths of the three sides of a triangle, calculate\
    \ the area of this triangle using Heron's formula.", "{\n    if (n<=0)\n    {\n\
    \        return false;\n    }\n    long L=n/2+1;\n    for (long i=1;i<L;i++)\n\
    \    {\n        for (long j=1;j<L;j++)\n        {\n            for (long k=1;k<L;k++)\n\
    \            {\n                for (long l=1;l<L;l++)\n                {\n  \
    \                  if (2*i+2*j+2*k+2*l==n)\n                    {\n          \
    \              return true;\n                    }\n                }\n      \
    \      }\n        }\n    }\n    return false;\n}\n//Working with Math.NET\nlong\
    \ count_representation_as_sum_even_mathnet(long n)\n{\n    long L=n/2+1;\n   \
    \ long i;\n    long j;\n    long k;\n    long l;\n    long count=0;\n    for (i=1;i<L;i++)\n\
    \    {\n        for (j=1;j<L;j++)\n        {\n            for (k=1;k<L;k++)\n\
    \            {\n                for (l=1;l<L;l++)\n                {\n       \
    \             if (2*i+2*j+2*k+2*l==n)\n                    {\n               \
    \         count++;\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nlong count_representation_as_sum_even_mathnet_no_repetition(long\
    \ n)\n{\n    long L=n/2+1;\n    long i;\n    long j;\n    long k;\n    long l;\n\
    \    long count=0;\n    for (i=1;i<L;i++)\n    {\n        for (j=i;j<L;j++)\n\
    \        {\n            for (k=j;k<L;k++)\n            {\n                for\
    \ (l=k;l<L;l++)\n                {\n                    if (2*i+2*j+2*k+2*l==n)\n\
    \                    {\n                        count++;\n                   \
    \ }\n                }\n           ", "{\n     if (n%2!=0) return false; \n  \
    \   if (n==4) return false; \n     if (n<6) return false;\n     static duple!(long,\
    \ long) memo = duple(2L,2L);\n     static bool in_memo = false;\n     if (in_memo)\n\
    \     {\n         if (memo[0] + memo[1] > n) return false;\n         if (memo[0]\
    \ + memo[1] == n)\n         {\n             in_memo = false;\n             return\
    \ true;\n         }\n     }\n     if (n<10)\n     {\n         memo = duple(n-4,4L);\n\
    \         in_memo = true;\n         return true;\n     }\n     auto ret = is_equal_to_sum_even(n-2);\n\
    \     if (ret)\n     {\n         memo = duple(memo[0],memo[1]+2);\n         in_memo\
    \ = true;\n     }\n     return ret;\n}", "{\n    // lazy way\n    long target\
    \ = n;\n    int count = 0;\n    for (int i = 0; i < n; i += 2)\n    {\n      \
    \  auto ind = [i, count](long num) { return i + num; };\n        auto val = [count](long\
    \ num) { return num + 2 * count; };\n        auto calc = ind(val(ind(0)));\n \
    \       if (calc == target)\n        {\n            return true;\n        }\n\
    \        count++;\n    }\n    return false;\n}\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n*/", "{\n    // std.math.isEven(n)\
    \ must be false\n    // all elements of the list must be even\n    // the sum\
    \ of elements of the list must be equal to n\n    // The list can not be empty.\n\
    \    return false;\n}\n ", "{\n    if (n % 2 != 0) return false;\n    long a =\
    \ n / 2;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    bool first =\
    \ false;\n    bool second = false;\n    bool third = false;\n    for (int i =\
    \ 0; i < a + 1; i++) {\n        for (int j = 0; j < b + 1; j++) {\n          \
    \  for (int k = 0; k < c + 1; k++) {\n                for (int l = 0; l < d +\
    \ 1; l++) {\n                    if (2 * i + 2 * j + 2 * k + 2 * l == n) {\n \
    \                       first = true;\n                        second = true;\n\
    \                        third = true;\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return first && second && third;\n}",
  "{\n    import std.math : isEven;\n    if (n & 1 || n < 8)\n        return false;\n\
    \    if (n % 4 == 0)\n        return true;\n    for (long i = 2; i < n; i += 2)\n\
    \    {\n        if (isEven(i) && isEven(n - i))\n            return true;\n  \
    \  }\n    return false;\n}", "{\n  if(n <= 0)\n    return false;\n  if(n == 4)\n\
    \    return true;\n  return (n % 2) == 0 && is_equal_to_sum_even(n - 4);\n}",
  "{\n    // the given number must be even\n    if (n % 2 != 0)\n        return false;\n\
    \    // convert even number to the sum of 4, 5, 6 and 7\n    if (n == ((n / 2)\
    \ * 4 + (n / 2) * 5 + (n / 2) * 6 + (n / 2) * 7))\n        return true;\n    else\n\
    \        return false;\n}\n/*\nEvaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive even numbers.\n    Example\n    >>> is_equal_to_sum_even2(4L)\n\
    \    false\n    >>> is_equal_to_sum_even2(6L)\n    false\n    >>> is_equal_to_sum_even2(8L)\n\
    \    true\n*/", "{\n    \n    return false;\n}\n/*\n    Compute the sum of all\
    \ consecutive positive even numbers starting from 2, \n    that are not larger\
    \ than the given number n.\n    The first few values of this sequence is: 2, 4,\
    \ 6, 8, 10, 12, 14, 16\n    Example\n    >>> sum_even(4L)\n    6L\n    >>> sum_even(10L)\n\
    \    30L\n    >>> sum_even(2L)\n    2L\n*/\nlong sum_even(long n) \n{\n    return\
    \ n;\n}\n/*\n    The regular Polygon-Numbers are of the form\n    P(n) = n*(3*n-1)/2\n\
    \    while the 1st few values are\n    1, 5, 12, 22, 35, 51, 70, 92, 117, 145,\
    \ 176, ...\n    More information can be found here:\n    https://en.wikipedia.org/wiki/Polygonal_number\n\
    \    Implement a function\n    >>> is_polygonal(n, s)\n    which returns true\
    \ if n is a regular Polygon-Number of type s.\n    E.g. is_polygonal(70,3) should\
    \ return true, whereas is_polygonal(70,2) should return false.\n*/", "{\n\treturn\
    \ (n % 2 == 0) && (n / 2 > 3);\n}\n/*\nYou are given a list of n numbers. We will\
    \ call an integer \"t\" a divisor of n if n%t == 0.\nYou need to return the largest\
    \ odd divisor of n, or -1 if there are no odd divisors.\nExample\n    >>> largest_odd_divisor(3L)\n\
    \    3\n    >>> largest_odd_divisor(9L)\n    3\n    >>> largest_odd_divisor(32L)\n\
    \    -1\n*/\nlong largest_odd_divisor(long n) \n{\n\tlong i = 1;\n\tfor (; i <\
    \ n; i++)\n\t{\n\t\tif (n % i == 0 && i % 2 != 0)\n\t\t{\n\t\t\tlong res = n /\
    \ i;\n\t\t\tif (res % 2 != 0)\n\t\t\t{\n\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn -1;\n}\n/*\nGiven a 32-bit signed integer, reverse digits of an integer.\n\
    Example 1:\nInput: 123\nOutput: 321", "{\n    if(n <= 0) return false;\n    auto\
    \ const max_power = (long)log2(n/4.0);\n    foreach(power;0..=max_power) \n  \
    \  {\n        if(n - (1L << power) * 4 == 0) return true;\n    }\n    return false;\n\
    }\n/*\nCheck whether the given number n is equal to the sum of the power of its\
    \ digits.\n    Example\n    >>> is_equal_to_sum_power_digits(1L)\n    true\n \
    \   >>> is_equal_to_sum_power_digits(9L)\n    true\n    >>> is_equal_to_sum_power_digits(10L)\n\
    \    false\n    >>> is_equal_to_sum_power_digits(153L)\n    true\n    >>> is_equal_to_sum_power_digits(154L)\n\
    \    false\n    >>> is_equal_to_sum_power_digits(1634L)\n    true\n    >>> is_equal_to_sum_power_digits(1635L)\n\
    \    false\n    >>> is_equal_to_sum_power_digits(4150L)\n    true\n    >>> is_equal_to_sum_power_digits(4151L)\n\
    \    false\n    >>> is_equal_to_sum_power_digits(54748L)\n    true\n    >>> is_equal_to_sum_power_digits(54749L)\n\
    \    false\n    >>> is_equal_to_sum_power_digits(92727L)\n    true\n    >>> is_equal_to_sum_power_digits(92728L)\n\
    \    false\n    >>> is_equal_to_sum_power_digits(93084L)\n    true\n    >>> is_equal_to_sum_power_digits(93085L)\n\
    \    false\n    >>> is_equal_to_sum_power_digits(493087L)\n    true\n    >>> is_equal_to_sum_power_digits(493088L)\n\
    \    false\n    >>> is_equal_to_sum_power_digits", "{\n    int sum = 0;\n    long\
    \ temp = n;\n    while (temp != 0)\n    {\n        if ((temp % 2) == 0)\n    \
    \    {\n            sum += temp;\n        }\n        temp--;\n    }\n    return\
    \ sum == n;\n}", "{\n    if (n % 2 != 0 || n < 4) \n    {\n        return false;\n\
    \    }\n    n -= 2;\n    n /= 2;\n    double sq = sqrt(n);\n    long ssq = long(sq);\n\
    \    return sq - ssq == 0;\n}", "{\n    const int NUM_POSITIVE_EVEN_NUMBERS =\
    \ 4;\n    const int START_AT = 2;\n    long found = 0;\n    int sum = 0;\n   \
    \ auto evens = map!(i=>i*2)(iota(START_AT, n/NUM_POSITIVE_EVEN_NUMBERS+1));\n\
    \    auto temp = evens.dup;\n    while(temp.length>0) {\n        sum += temp.front;\n\
    \        temp.popFront;\n        if(sum==n) return true;\n        else if(sum>n)\
    \ {\n            sum -= evens.front;\n            evens.popFront;\n          \
    \  temp = evens.dup;\n        }\n    }\n    return false;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
