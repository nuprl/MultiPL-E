language: d
name: HumanEval_46_fib4
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long[] a = [0, 0, 2, 0];\n    for (long i = 4; i <= n; i++) \n\
    \    {\n        auto b = a[3];\n        a[3] = a[2];\n        a[2] = a[1];\n \
    \       a[1] = a[0];\n        a[0] = a[1] + a[2] + a[3] + b;\n    }\n    return\
    \ a[0];\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_jibzlye.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281f5]

    ??:? void tmp_jibzlye.__unittest_L34_C1() [0x427f21]

    ??:? void tmp_jibzlye.__modtest() [0x427f78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c253]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430279]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430728]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430205]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0bd]

    ??:? runModuleUnitTests [0x42c029]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 0; i <= n; i++)\n    {\n        if (i <= 2)\n        {\n            e = i;\n\
    \        }\n        else\n        {\n            e = a + b + c + d;\n        \
    \    a = b;\n            b = c;\n            c = d;\n            d = e;\n    \
    \    }\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeyus4rl4.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmpeyus4rl4.__unittest_L43_C1() [0x427a9c]

    ??:? void tmpeyus4rl4.__modtest() [0x427b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3)\n      \
    \  return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    foreach(i; 1 .. n-3)\n\
    \    {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpylqx7q98.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpylqx7q98.__unittest_L33_C1() [0x427a98]

    ??:? void tmpylqx7q98.__modtest() [0x427b10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    import std.bigint;\n\
    \    import std.range;\n    assert(n > 0);\n    auto a = BigInt(0), b = BigInt(0),\
    \ c = BigInt(2), d = BigInt(0);\n    foreach(i; iota(1, n)) \n    {\n        auto\
    \ t = d;\n        d = a + b + c + d;\n        a = b;\n        b = c;\n       \
    \ c = t;\n    }\n    return d.to!long;\n}\n/*\nPlease write a function that will\
    \ return the string that is the integer input in unary.\n    >>> unary(5)\n  \
    \  '11111'\n    >>> unary(3)\n    '111'\n*/\nstring unary(size_t n) \n{\n    return\
    \ std.string.repeat(\"1\", n);\n}\n/*\nGiven a string containing letters and numbers,\
    \ write a function that returns the letters in alphabetical order and the\nnumbers\
    \ in order from smallest to largest.\n    >>> everythingSort(\"n2Thi1s T4est 3a\"\
    )\n    'TaehisT sT1i2n3h4'\n    >>> everythingSort(\"Ea2sy 1Te2st\")\n    'EayEsTs1y2'\n\
    */\nstring everythingSort(string mixed) \n{\n    import std.algorithm;\n    import\
    \ std.conv;\n    auto digits = mixed.retro.filter!(a => a.isDigit).joiner;\n \
    \   auto letters = mixed.retro.filter!(a => a.isLetter).joiner;\n    return to!string(digits.array.sort.joiner)\
    \ ~ letters.array.sort.joiner;\n}\n/*\nWrite a function that sums the values of\
    \ a given array, iterating over the first element, skipping the second and\niterating\
    \ over the third, etc.\n    >>> sumEveryOther([6, 5, 2, 1, 8])\n    20\n    >>>\
    \ sumEveryOther([6, 2, 1, 8])\n    17\n*/\nunittest\n{\n    alias candidate =\
    \ fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuvjvg99p.d(33): Error: no property `to` for type `BigInt`

    /tmp/tmpuvjvg99p.d(44): Error: undefined identifier `string` in package `std`

    /tmp/tmpuvjvg99p.d(58): Error: no property `retro` for type `string`

    /tmp/tmpuvjvg99p.d(59): Error: no property `retro` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuvjvg99p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    //Tuple\n    Tuple!(long,\
    \ long, long, long) fib4 = tuple(0L, 0L, 2L, 0L);\n    //Tuple!(long, long, long,\
    \ long) fib4 = Tuple!(long, long, long, long)(0L, 0L, 2L, 0L);\n    //auto fib4\
    \ = tuple(0L, 0L, 2L, 0L);\n    long fib(long n)\n    {\n        //for (long i\
    \ = 0; i < n; i++)\n        while(n>0)\n        {\n            n--;\n        \
    \    /*\n            fib4[3] = fib4[2];\n            fib4[2] = fib4[1];\n    \
    \        fib4[1] = fib4[0];\n            fib4[0] = fib4[3] + fib4[2] + fib4[1]\
    \ + fib4[0];\n            */\n            fib4 = tuple(fib4[3], fib4[2], fib4[1],\
    \ fib4[0] + fib4[3] + fib4[2] + fib4[1]);\n        }\n        return fib4[0];\n\
    \    }\n    return fib(n);\n}\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6uul2rzq.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x428e7d]

    ??:? void tmp6uul2rzq.__unittest_L43_C1() [0x428224]

    ??:? void tmp6uul2rzq.__modtest() [0x4288e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da97]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4312cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43177c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431259]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c97d]

    ??:? runModuleUnitTests [0x42d86d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429358]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib = new long[5];\n\
    \    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n    fib[4]\
    \ = 1;\n    long a, b, c, d, e;\n    int i;\n    long[] sqrt5 = {2L, 3L};\n  \
    \  long[] minus1 = {0L, 1L};\n    long result;\n    sqrt5 = extendedEuclidean(sqrt5[0],\
    \ sqrt5[1]);\n    minus1 = extendedEuclidean(minus1[0], minus1[1]);\n    minus1[0]\
    \ *= -1;\n    for (i = 5; i <= n; i++) {\n        a = fib[i-1];\n        b = fib[i-2];\n\
    \        c = fib[i-3];\n        d = fib[i-4];\n        e = a + b + c + d;\n  \
    \      fib[4] = e;\n        fib[0] = fib[1];\n        fib[1] = fib[2];\n     \
    \   fib[2] = fib[3];\n        fib[3] = fib[4];\n    }\n    result = fib[4];\n\
    \    if (n % 2 == 0) {\n        result = (result * sqrt5[0]) % sqrt5[1];\n   \
    \ }\n    else {\n        result = (result * minus1[0]) % minus1[1];\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy1topu9f.d(29): Error: a struct is not a valid initializer for
    a `long[]`

    /tmp/tmpy1topu9f.d(30): Error: a struct is not a valid initializer for a `long[]`

    /tmp/tmpy1topu9f.d(32): Error: undefined identifier `extendedEuclidean`

    /tmp/tmpy1topu9f.d(33): Error: undefined identifier `extendedEuclidean`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy1topu9f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) \n    {\n\
    \        throw new IllegalArgumentException();\n    }\n    if (n < 2) \n    {\n\
    \        return 0;\n    }\n    if (n == 2) \n    {\n        return 2;\n    }\n\
    \    if (n == 3) \n    {\n        return 0;\n    }\n    long prev = 0;\n    long\
    \ prevprev = 0;\n    long prevprevprev = 0;\n    long prevprevprevprev = 0;\n\
    \    long fib = 0;\n    foreach (i; 1..n) \n    {\n        if (i == 1) \n    \
    \    {\n            fib = 0;\n        }\n        else if (i == 2) \n        {\n\
    \            fib = 2;\n        }\n        else if (i == 3) \n        {\n     \
    \       fib = 0;\n        }\n        else \n        {\n            fib = prev\
    \ + prevprev + prevprevprev + prevprevprevprev;\n        }\n        prevprevprevprev\
    \ = prevprevprev;\n        prevprevprev = prevprev;\n        prevprev = prev;\n\
    \        prev = fib;\n    }\n    return fib;\n}\n//BEGIN\nstatic assert(fib4(5L)\
    \ == 4L);\nstatic assert(fib4(6L) == 8L);\nstatic assert(fib4(7L) == 14L);\n//END\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwgmsvlnk.d(23): Error: undefined identifier `IllegalArgumentException`

    /tmp/tmpwgmsvlnk.d(68):        called from here: `fib4(5L)`

    /tmp/tmpwgmsvlnk.d(68):        while evaluating: `static assert(fib4(5L) == 4L)`

    /tmp/tmpwgmsvlnk.d(69): Error: CTFE failed because of previous errors in `fib4`

    /tmp/tmpwgmsvlnk.d(69):        while evaluating: `static assert(fib4(6L) == 8L)`

    /tmp/tmpwgmsvlnk.d(70): Error: CTFE failed because of previous errors in `fib4`

    /tmp/tmpwgmsvlnk.d(70):        while evaluating: `static assert(fib4(7L) == 14L)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwgmsvlnk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    long v = 0;\n    foreach\
    \ (int i; 0 .. n - 4) \n    {\n        v = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = v;\n    }\n    return v;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1x1m73qn.d(25): Error: cannot implicitly convert expression `n
    - 4L` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1x1m73qn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    //Tuple!(int, int, int,\
    \ int) fib4 = tuple(0, 0, 2, 0);\n    //auto fib4 = [0, 0, 2, 0];\n    auto fib4\
    \ = [Tuple!(int, int, int, int)(0, 0, 2, 0)];\n    for (long i = 4; i <= n; i++)\n\
    \    {\n        //fib4 = tuple(fib4[1], fib4[2], fib4[3], fib4[0] + fib4[1] +\
    \ fib4[2] + fib4[3]);\n        //fib4 = [fib4[1], fib4[2], fib4[3], fib4[0] +\
    \ fib4[1] + fib4[2] + fib4[3]];\n        fib4 = [Tuple!(int, int, int, int)(fib4[1],\
    \ fib4[2], fib4[3], fib4[0] + fib4[1] + fib4[2] + fib4[3])];\n    }\n    return\
    \ fib4[3];\n}\n/*\n    >>> binomial_distribution(7, 2, 0.2)\n    0.324640L\n*/\n\
    real binomial_distribution(int n, int k, real p)\n{\n    real sum = 0;\n    for\
    \ (int i = k; i <= n; i++)\n    {\n        sum += combinadic(n, i) * p.pow(i)\
    \ * (1 - p).pow(n - i);\n    }\n    return sum;\n}\n//string \n/*\n    >>> binary_search(iota(10L),\
    \ 0, 10L, 5L)\n    true\n    >>> binary_search(iota(10L), 0, 10L, 11L)\n    false\n\
    */\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9k0goolt.d(28): Error: incompatible types for `(fib4[0]) + (fib4[1])`:
    both operands are of type `Tuple!(int, int, int, int)`

    /tmp/tmp9k0goolt.d(30): Error: cannot implicitly convert expression `fib4[3]`
    of type `Tuple!(int, int, int, int)` to `long`

    /tmp/tmp9k0goolt.d(41): Error: undefined identifier `combinadic`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9k0goolt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    immutable long[] v =\
    \ [0L, 0L, 2L, 0L];\n    if (n == 0 || n == 1 || n == 2 || n == 3)\n        return\
    \ v[n];\n    for (long i = 3; i <= n; i++)\n    {\n        v[3] = v[0] + v[1]\
    \ + v[2] + v[3];\n        v[0] = v[1];\n        v[1] = v[2];\n        v[2] = v[3];\n\
    \    }\n    return v[3];\n}\n/*\nAn anagram is a word that contains the same characters\
    \ as another word, but in a different order. For example, listen and silent are\
    \ anagrams.\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvhh1q_a9.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvhh1q_a9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    long a = 0, b = 0,\
    \ c = 2, d = 0, e; \n    if (n == 0) \n        return a; \n    for (long i = 2;\
    \ i <= n; i++) \n    { \n        e = (a + b + c + d); \n        a = b; \n    \
    \    b = c; \n        c = d; \n        d = e; \n    } \n    return d; \n}\n//Exercise\
    \ 2\n/*\nLongest Arithmetic Progression (Kadane's Algorithm)\nGiven a set of numbers,\
    \ find the Length of the Longest Arithmetic Progression (LLAP) in it.\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp35qvwz_o.d(35): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp35qvwz_o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    import std.range;\n\
    \    immutable low = [0L, 0L, 2L, 0L];\n    if (n < low.length) \n    {\n    \
    \    return low[n];\n    }\n    long a = 0L, b = 0L, c = 2L, d = 0L;\n    foreach\
    \ (i; 2 .. n) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\n/*\nThe Fib3 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib3(0) ->\
    \ 0\n    fib3(1) -> 0\n    fib3(2) -> 2\n    fib3(3) -> 0\n    fib3(n) -> fib3(n-1)\
    \ + fib3(n-2) + fib3(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fib3 number sequence.  Do not use recursion.\n    >>>\
    \ fib3(5L)\n    4L\n    >>> fib3(6L)\n    6L\n    >>> fib3(7L)\n    10L\n    \n\
    */\nlong fib3(long n) \n{\n    immutable low = [0L, 0L, 2L, 0L];\n    if (n <\
    \ low.length) \n    {\n        return low[n];\n    }\n    long a = 0L, b = 0L,\
    \ c = 2L;\n    foreach (i; 2 .. n) \n    {\n        c = a + b + c;\n        a\
    \ = b;\n        b = c;\n    }\n    return c;\n}\n/*\nPlease write a function to\
    \ efficiently compute the n-th element of the fib2 number sequence.  Do not use\
    \ recursion.\n    >>> fib2(5L)\n    3L\n    >>> fib2(6L)\n    5L\n    >>> fib2(7L)\n\
    \    8L\n    \n*/\nlong fib2(long n) \n{\n    immutable low = [0L, 1L, 1L, 2L];\n\
    \   \nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) ==\
    \ 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppu9b5_43.d(83): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppu9b5_43.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long temp = 0L;\n    long i\
    \ = 2L;\n    long result = 0L;\n    while (i <= n) \n    {\n        temp = a +\
    \ b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n\
    \        i = i + 1L;\n    }\n    result = temp;\n    return result;\n}\n/*\nconst\
    \ isMemoized = false;\nlong fib4(long n) \n{\n    long result = 0L;\n    long\
    \ a = 0L;\n    long b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long temp\
    \ = 0L;\n    long i = 2L;\n    if (isMemoized) \n    {\n        if (n == 0L) \n\
    \        {\n            result = 0L;\n        }\n        else if (n == 1L) \n\
    \        {\n            result = 0L;\n        }\n        else if (n == 2L) \n\
    \        {\n            result = 2L;\n        }\n        else if (n == 3L) \n\
    \        {\n            result = 0L;\n        }\n        else \n        {\n  \
    \          result = fib4(n - 1L) + fib4(n - 2L) + fib4(n - 3L) + fib4(n - 4L);\n\
    \        }\n    }\n    else \n    {\n        while (i <= n) \n        {\n    \
    \        temp = a + b + c + d;\n            a = b;\n            b = c;\n     \
    \       c = d;\n            d = temp;\n            i = i + 1L;\n        }\n  \
    \      result = temp;\n    }\n    return result;\n}\n*/\n/*\nThe Fib5 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(\nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3cqi56cl.d(90): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3cqi56cl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    return 0;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg9quj3m8.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d15]

    ??:? void tmpg9quj3m8.__unittest_L23_C1() [0x427a1c]

    ??:? void tmpg9quj3m8.__modtest() [0x427a94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a8ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42f9ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]

    ??:? runModuleUnitTests [0x42b811]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428164]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163162
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    int fib_0 = 0;\n   \
    \ int fib_1 = 0;\n    int fib_2 = 2;\n    int fib_3 = 0;\n    if (n < 4)\n   \
    \ {\n        return n;\n    }\n    for (int i = 4; i <= n; i++)\n    {\n     \
    \   int fib_4 = fib_0 + fib_1 + fib_2 + fib_3;\n        fib_0 = fib_1;\n     \
    \   fib_1 = fib_2;\n        fib_2 = fib_3;\n        fib_3 = fib_4;\n    }\n  \
    \  return fib_3;\n}\n/*\nImplement a function that recursively reverses a list.\n\
    \    >>> rev([1,2,3,4,5])\n    [5,4,3,2,1]\n    >>> rev([])\n    []\n    >>> rev([1])\n\
    \    [1]\n*/\nT[] rev(T)(T[] input)\n{\n    if (input.length == 0)\n    {\n  \
    \      return input;\n    }\n    else\n    {\n        return input[input.length\
    \ - 1] ~ rev(input[0 .. input.length - 1]);\n    }\n}\n/*\nFor the following problem,\
    \ create an object-oriented solution.\n    Write a class called RationalNumber\
    \ which represents a fraction in the form:  numerator/denominator, where both\
    \ the numerator and denominator are integers.  The class should provide a constructor\
    \ which takes the numerator and denominator as int parameters.  The class should\
    \ provide a method multiply that takes another RationalNumber object and returns\
    \ a new RationalNumber object which is the product of the current object and the\
    \ argument object.  The multiply method should not change the current object.\n\
    */\nclass RationalNumber\n{\n    private int numerator;\n    private int denominator;\n\
    \    this(int numerator, int denominator)\n    {\n        this.numerator = numerator;\n\
    \        this.denominator = denominator;\n    }\n    RationalNumber multiply(RationalNumber\
    \ other)\n    {\n        return new RationalNumber(this.numerator * other.numerator,\
    \ this.denominator * other.denominator);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0L)\n     \
    \   return 0L;\n    else if (n == 1L)\n        return 0L;\n    else if (n == 2L)\n\
    \        return 2L;\n    else if (n == 3L)\n        return 0L;\n    else\n   \
    \ {\n        /*\n        We are using a custom array type here because it makes\
    \ programming\n        simpler, we can use all the array functions including array\
    \ slicing\n        and we can define our own functions to fill up the array and\
    \ to\n        assign values.\n        */\n        auto fib4Values = appender!(ValueArray!(long))();\n\
    \        fillFib4Values(fib4Values, n);\n        return fib4Values[n - 1L];\n\
    \    }\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9aui5p35.d(37): Error: template instance `appender!(ValueArray!long)`
    template `appender` is not defined

    /tmp/tmp9aui5p35.d(38): Error: undefined identifier `fillFib4Values`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9aui5p35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \nin {\n    assert(n >= 0L);\n\
    }\nout (result) {\n    assert(result >= 0L);\n}\nbody {\n \n}\nunittest\n{\n \
    \   alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8zdnyjy.d(19): Error: function `tmpf8zdnyjy.fib4` has no `return`
    statement, but is expected to return a value of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8zdnyjy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tif (n < 0)\n\t\treturn\
    \ -1;\n\tif (n == 0)\n\t\treturn 0;\n\tlong fib4_0 = 0;\n\tlong fib4_1 = 0;\n\t\
    long fib4_2 = 2;\n\tlong fib4_3 = 0;\n\tlong fib4_n = 0;\n\tfor (int i = 4; i\
    \ <= n; i++)\n\t{\n\t\tfib4_n = fib4_0 + fib4_1 + fib4_2 + fib4_3;\n\t\tfib4_0\
    \ = fib4_1;\n\t\tfib4_1 = fib4_2;\n\t\tfib4_2 = fib4_3;\n\t\tfib4_3 = fib4_n;\n\
    \t}\n\treturn fib4_n;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    auto cache = array!(typeof(return))(100);\n\
    \    cache[0] = 0;\n    cache[1] = 0;\n    cache[2] = 2;\n    cache[3] = 0;\n\
    \    for(long i = 4; i <= n; i++)\n    {\n        cache[i] = cache[i-1] + cache[i-2]\
    \ + cache[i-3] + cache[i-4];\n    }\n    return cache[n];\n}\nunittest\n{\n  \
    \  alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzqxlibht.d(21): Error: template instance `array!(typeof(return))`
    template `array` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzqxlibht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n    if (n < 4L) \n        return\
    \ n;\n    auto fibList = new long[4L];\n    fibList[0L] = 0L;\n    fibList[1L]\
    \ = 0L;\n    fibList[2L] = 2L;\n    fibList[3L] = 0L;\n    long i = 4L;\n    while\
    \ (i <= n) \n    {\n        fibList[0L] = fibList[1L] + fibList[2L] + fibList[3L];\n\
    \        fibList[1L] = fibList[2L];\n        fibList[2L] = fibList[3L];\n    \
    \    fibList[3L] = fibList[0L];\n        i++;\n    }\n    return fibList[0L];\n\
    }\n/*\nThe lrs algorithm.  Given a string, return the longest repeat string.\n\
    \    >>> lrs(\"ABCBCDEF\")\n    \"BC\"\n    >>> lrs(\"ABCBCDEFBCDEFABCBCDEFB\"\
    )\n    \"BCDEF\"\n    >>> lrs(\"ABCDEFABCBCDEFB\")\n    \"BCDEF\"\n    >>> lrs(\"\
    ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDE\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuexvutno.d(20): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmpuexvutno.d(20): Error: declaration expected, not `if`

    /tmp/tmpuexvutno.d(23): Error: no identifier for declarator `fibList[0L]`

    /tmp/tmpuexvutno.d(23): Error: declaration expected, not `=`

    /tmp/tmpuexvutno.d(24): Error: no identifier for declarator `fibList[1L]`

    /tmp/tmpuexvutno.d(24): Error: declaration expected, not `=`

    /tmp/tmpuexvutno.d(25): Error: no identifier for declarator `fibList[2L]`

    /tmp/tmpuexvutno.d(25): Error: declaration expected, not `=`

    /tmp/tmpuexvutno.d(26): Error: no identifier for declarator `fibList[3L]`

    /tmp/tmpuexvutno.d(26): Error: declaration expected, not `=`

    /tmp/tmpuexvutno.d(28): Error: declaration expected, not `while`

    /tmp/tmpuexvutno.d(31): Error: no identifier for declarator `fibList[1L]`

    /tmp/tmpuexvutno.d(31): Error: declaration expected, not `=`

    /tmp/tmpuexvutno.d(32): Error: no identifier for declarator `fibList[2L]`

    /tmp/tmpuexvutno.d(32): Error: de'
  stdout: ''
  timestamp: 1660163162
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // Take care of the\
    \ edge cases\n    if (n < 4) \n    {\n        return ((n < 2) ? 0 : 2);\n    }\n\
    \    // Use a tuple to keep track of the last 4 numbers\n    auto prev = tuple(0L,\
    \ 0L, 2L, 0L);\n    for (int i = 4; i <= n; i++) \n    {\n        // This is equivalent\
    \ to adding the first 4 numbers\n        auto sum = prev[0] + prev[1] + prev[2]\
    \ + prev[3];\n        // Shift the numbers over one\n        prev[0] = prev[1];\n\
    \        prev[1] = prev[2];\n        prev[2] = prev[3];\n        prev[3] = sum;\n\
    \    }\n    return prev[3];\n}\nunittest\n{\n    alias candidate = fib4;\n\n \
    \   assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    n = n + 3;\n    enum\
    \ a = 0;\n    enum b = 0;\n    enum c = 2;\n    enum d = 0;\n    enum elem = 0;\n\
    \    enum t;\n    foreach(i; 0..n)\n    {\n        t = a + b + c + d;\n      \
    \  a = b;\n        b = c;\n        c = d;\n        d = t;\n        if(i == n -\
    \ 1)\n        {\n            elem = t;\n        }\n    }\n    return elem;\n}\n\
    /*\n    Please write a function to efficiently compute the m-th element of the\
    \ Lucas number sequence.  Do not use recursion.\n    >>> lucas(5L)\n    11L\n\
    \    >>> lucas(6L)\n    18L\n    >>> lucas(7L)\n    29L\n*/\nlong lucas(long m)\
    \ \n{\n    m = m + 2;\n    enum a = 2;\n    enum b = 1;\n    enum elem = 0;\n\
    \    enum t;\n    foreach(i; 0..m)\n    {\n        t = a + b;\n        a = b;\n\
    \        b = t;\n        if(i == m - 1)\n        {\n            elem = t;\n  \
    \      }\n    }\n    return elem;\n}\n/*\n    Please write a function to efficiently\
    \ compute the n-th element of the Fibbonacci sequence.  Do not use recursion.\n\
    \    >>> fib(5L)\n    5L\n    >>> fib(6L)\n    8L\n    >>> fib(7L)\n    13L\n\
    */\nlong fib(long n) \n{\n    n = n + 2;\n    enum a = 0;\n    enum b = 1;\n \
    \   enum elem = 0;\n    enum t;\n    foreach(i; 0..n)\n    {\n        t = a +\
    \ b;\n        a = b;\n        b = t;\n        if(i == n - 1)\n        {\n    \
    \        elem = t;\n        }\n    }\n    return elem;\n}\n/*\n    Please write\
    \ a function to efficiently compute the\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp67ztx_b_.d(98): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp67ztx_b_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tlong a = 0L;\n\tlong b\
    \ = 0L;\n\tlong c = 2L;\n\tlong d = 0L;\n\tif (n == 0L)\n\t\treturn 0L;\n\tif\
    \ (n == 1L)\n\t\treturn 0L;\n\tif (n == 2L)\n\t\treturn 2L;\n\tif (n == 3L)\n\t\
    \treturn 0L;\n\tfor (auto i = 3L; i < n; i++)\n\t{\n\t\td = a + b + c;\n\t\ta\
    \ = b;\n\t\tb = c;\n\t\tc = d;\n\t}\n\treturn d;\n}\n/*\nIt was a dark and stormy\
    \ night. You are driving your car on a narrow country road when you suddenly realize\
    \ that you are lost.  You stop the car, get out, and look around for a landmark,\
    \ but all you can see is a sign reading \"Welcome to Nodeville.\"  You get back\
    \ in the car and decide to try to follow one of the roads out of town.  However,\
    \ there are three possible roads leading out of town, and only one of them will\
    \ take you to the highway that will take you home.  The other two are both dead\
    \ ends.  It's too dark to read the signposts to determine which is which.\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeagup97a.d(42): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeagup97a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n <= 1) \n    \
    \    return n; \n    else if (n <= 3)\n        return 2;\n    long F[4] = {0,\
    \ 0, 2, 0}; \n    for (int i = 4; i <= n; i++) \n    { \n        F[i % 4] = F[(i\
    \ - 1) % 4] + F[(i - 2) % 4] + F[(i - 3) % 4] + F[(i - 4) % 4]; \n    } \n   \
    \ return F[n % 4]; \n}\n/*\nWrite a function to find the first element of the\
    \ list that repeats an odd number of times. \nIf no element repeats an odd number\
    \ of times then the function should return null.\n    >>> findOdd([1, 2, 3, 4,\
    \ 1, 3, 3, 4, 5, 6, 7, 5, 6, 7, 1, 8, 9, 10, 8, 10, 8, 1])\n    1\n    >>> findOdd([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    null\n*/\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy1g1fd4k.d(25): Deprecation: instead of C-style syntax, use D-style
    syntax `long[4] F`

    /tmp/tmpy1g1fd4k.d(25): Error: a struct is not a valid initializer for a `long[4]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy1g1fd4k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    import std.algorithm\
    \ : reduce;\n    import std.range : iota;\n    if (n < 4) \n        return (iota(n)\n\
    \                .map!(a => if (a < 3) a else a + 1)\n                .reduce!((a,\
    \ b) => a * b)\n               );\n    //long fib4(long n) {\n    //if (n < 4)\n\
    \    //return n < 3 ? n : n + 1;\n    n = n - 4;\n    long a, b, c, d;\n    a\
    \ = 1;\n    b = 2;\n    c = 4;\n    d = 8;\n    while (n--) {\n        d = d +\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcd3m88e_.d(25): Error: expression expected, not `if`

    /tmp/tmpcd3m88e_.d(25): Error: found `a` when expecting `)` following template
    argument list

    /tmp/tmpcd3m88e_.d(24): Error: found `else` when expecting `)`

    /tmp/tmpcd3m88e_.d(25): Error: found `a` when expecting `;` following `return`
    statement

    /tmp/tmpcd3m88e_.d(25): Error: found `)` when expecting `;` following statement

    /tmp/tmpcd3m88e_.d(27): Error: found `)` when expecting `;` following statement

    /tmp/tmpcd3m88e_.d(27): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcd3m88e_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \nin {\n    assert(n >= 0L);\n\
    }\nout (result) {\n    assert(result >= 0L);\n}\nbody {\n    assert(n >= 0L);\n\
    \    static real2 u = real2(1.0, 0.0);\n    static real2 v = real2(0.0, 1.0);\n\
    \    assert(u.x == 1.0);\n    assert(u.y == 0.0);\n    assert(v.x == 0.0);\n \
    \   assert(v.y == 1.0);\n    long r;\n    real2 m;\n    assert(n >= 0L);\n   \
    \ switch (n) {\n        case 0L: \n            r = 0L;\n            break;\n \
    \       case 1L: \n            r = 0L;\n            break;\n        case 2L: \n\
    \            r = 2L;\n            break;\n        case 3L: \n            r = 0L;\n\
    \            break;\n        default: \n            m = pow(real2(1.0, 1.0), real2(0.0,\
    \ 1.0), n - 3L);\n            r = (real2(1.0, 1.0) * m * v).x;\n            break;\n\
    \    }\n    return r;\n}\n/*\n    >>> fib4(0L)\n    0L\n    >>> fib4(1L)\n   \
    \ 0L\n    >>> fib4(2L)\n    2L\n    >>> fib4(3L)\n    0L\n    >>> fib4(4L)\n \
    \   2L\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>> fib4(7L)\n\
    \    14L\n    >>> fib4(8L)\n    26L\n    >>> fib4(9L)\n    50L\n    >>> fib4(10L)\n\
    \    94L\n    >>> fib4(11L)\n    178L\n    >>> fib4(12L)\n    336L\n    >>> fib4(13L)\n\
    \    644L\n    >>> fib4(14L)\n    1240L\n    >>> fib4(15L)\n    23\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpno4zdyfl.d(57): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpno4zdyfl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    //Precondition.requires(n\
    \ > 0, \"n must be positive\");\n    //Precondition.requires(n <= 46, \"n must\
    \ be less than or equal to 46\");\n    /*Struct(long a, long b, long c, long d)*/\n\
    \    auto s = Struct(0L, 0L, 2L, 0L);\n    auto i = 0L;\n    auto result = 0L;\n\
    \    auto nextTuple = Struct(0L, 0L, 0L, 0L);\n    while (i < n) \n    {\n   \
    \     result = s.a + s.b + s.c + s.d;\n        nextTuple = Struct(s.b, s.c, s.d,\
    \ result);\n        s = nextTuple;\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2j6syq2.d(24): Error: undefined identifier `Struct`

    /tmp/tmpu2j6syq2.d(27): Error: undefined identifier `Struct`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2j6syq2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n == 0L) \n   \
    \     return 0L; \n  \n    long f0 = 0L, f1 = 0L, f2 = 2L, f3 = 0L, sum = 2L;\
    \ \n    for (long i = 4L; i <= n; i++) \n    { \n        f3 = f0 + f1 + f2 + f3;\
    \ \n        sum += f3; \n        f0 = f1; \n        f1 = f2; \n        f2 = f3;\
    \ \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9rojbwah.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmp9rojbwah.__unittest_L35_C1() [0x427a9c]

    ??:? void tmp9rojbwah.__modtest() [0x427b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) \n    {\n\
    \        return -1;\n    }\n    // the result cannot fit in an int, so we use\
    \ a long for our intermediate results\n    auto long_infinity = tuple(appender!(long[]),\
    \ appender!(long[]));\n    long_infinity[0].put(0L);\n    long_infinity[1].put(1L);\n\
    \    auto a = Tuple!(long,long)(0L,0L);\n    auto b = Tuple!(long,long)(0L,0L);\n\
    \    auto c = Tuple!(long,long)(0L,0L);\n    auto d = Tuple!(long,long)(0L,0L);\n\
    \    auto e = Tuple!(long,long)(0L,0L);\n    auto f = Tuple!(long,long)(0L,0L);\n\
    \    // start with our 5x5 identity matrix\n    auto m = Tuple!(Tuple!(long,long),\
    \ Tuple!(long,long), Tuple!(long,long), Tuple!(long,long), Tuple!(long,long))\n\
    \    (\n        Tuple!(long,long)(1L,0L),\n        Tuple!(long,long)(0L,0L),\n\
    \        Tuple!(long,long)(0L,0L),\n        Tuple!(long,long)(0L,0L),\n      \
    \  Tuple!(long,long)(0L,0L)\n    );\n    // multiply our matrix n times\n    for\
    \ (size_t i = 0; i < n; i++) \n    {\n        // use an arbitrarily large type\
    \ to avoid overflow\n        c = add(add(m[0], m[1]), add(m[2], m[3]));\n    \
    \    d = add(m[1], m[2]);\n        e = add(m[0], m[3]);\n        f = add(add(m[0],\
    \ m[1]), add(m[2], m[3]));\n        a = add(m[0], m[1]);\n        b = add(m[0],\
    \ m[3]);\n        m = Tuple\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpee1r_ksk.d(55): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpee1r_ksk.d(64): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpee1r_ksk.d(64): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpee1r_ksk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \nin \n{\n    assert(n >= 0);\n\
    }\nbody \n{\n    long fib4Numbers[] = [0L, 0L, 2L, 0L];\n    auto remainder =\
    \ n % 4L;\n    auto quotient = n / 4L;\n    if (remainder == 0L)\n    {\n    \
    \    return quotient * fib4Numbers[3L];\n    }\n    else \n    {\n        return\
    \ fib4(n - 1L) + fib4(n - 2L) + fib4(n - 3L) + fib4(n - 4L);\n    }\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: '/tmp/tmpqqdwn65n.d(26): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] fib4Numbers`

    /tmp/tmpqqdwn65n.d(26): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] fib4Numbers`

    core.exception.AssertError@/tmp/tmpqqdwn65n.d(22): Assertion failure

    ----------------

    ??:? _d_assertp [0x42811d]

    ??:? long tmpqqdwn65n.fib4(long) [0x427d27]

    ??:? long tmpqqdwn65n.fib4(long) [0x427deb]

    ??:? long tmpqqdwn65n.fib4(long) [0x427dd7]

    ??:? long tmpqqdwn65n.fib4(long) [0x427dd7]

    ??:? long tmpqqdwn65n.fib4(long) [0x427deb]

    ??:? void tmpqqdwn65n.__unittest_L38_C1() [0x427e3d]

    ??:? void tmpqqdwn65n.__modtest() [0x427ecc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430285]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430734]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430211]

    ??:? int object.ModuleInfo.'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n  import std.math;\n  import\
    \ std.typecons;\n  long[] fib = [0L, 0L, 2L, 0L];\n  alias F = long[];\n  F[]\
    \ fibs = [fib];\n  long i = 2L;\n  while (i <= n)\n  {\n    auto tmp = F(4);\n\
    \    foreach (idx, ref val; tmp)\n    {\n      foreach (j; 0 .. idx)\n      {\n\
    \        auto len = fibs.length;\n        tmp[idx] += fibs[$-1][j] * fibs[len\
    \ - 1][idx - j];\n      }\n    }\n    fibs ~= tmp;\n    i += 1L;\n  }\n  return\
    \ fibs[$-1][0];\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpprczwpfc.d(29): Error: function expected before `()`, not `long[]`
    of type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpprczwpfc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n  int tail = 0;\n  int head\
    \ = 1;\n  int result = 0;\n  for (auto i = 0; i < n; i++) \n  {\n    auto temp\
    \ = tail;\n    tail = head;\n    head = head + result;\n    result = temp;\n \
    \ }\n  return result;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpchk2w_7g.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpchk2w_7g.__unittest_L33_C1() [0x427a64]

    ??:? void tmpchk2w_7g.__modtest() [0x427adc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \nin {\n\tassert(n >= 0L);\n\
    }\nout {\n\tassert(return >= 0L);\n}\nbody {\n\tif (n < 4L) {\n\t\treturn n;\n\
    \t}\n\tlong n_2 = 0L;\n\tlong n_1 = 0L;\n\tlong n_3 = 2L;\n\tlong n_4 = 0L;\n\t\
    long nth_fib = 0L;\n\tlong i = 4L;\n\twhile (i <= n) {\n\t\tnth_fib = n_1 + n_2\
    \ + n_3 + n_4;\n\t\tn_4 = n_3;\n\t\tn_3 = n_2;\n\t\tn_2 = n_1;\n\t\tn_1 = nth_fib;\n\
    \t\ti = i + 1L;\n\t}\n\treturn nth_fib;\n}\nunittest\n{\n    alias candidate =\
    \ fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa419dun6.d(24): Error: expression expected, not `return`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa419dun6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n    if (n < 0L) {\n       \
    \ return -1L;\n    } else if (n == 0L) {\n        return 0L;\n    } else if (n\
    \ == 1L) {\n        return 0L;\n    } else if (n == 2L) {\n        return 2L;\n\
    \    } else if (n == 3L) {\n        return 0L;\n    } else {\n        static Tuple!(long,\
    \ long, long, long) fib = Tuple!(long, long, long, long)(0L, 0L, 2L, 0L);\n  \
    \      static long i = 4L;\n        while (i <= n) {\n            auto a = fib[0];\n\
    \            auto b = fib[1];\n            auto c = fib[2];\n            auto\
    \ d = fib[3];\n            fib = Tuple!(long, long, long, long)(b, c, d, a + b\
    \ + c + d);\n            i++;\n        }\n        return fib[3];\n    }\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8m2p3d2_.d(20): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmp8m2p3d2_.d(20): Error: declaration expected, not `if`

    /tmp/tmp8m2p3d2_.d(22): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8m2p3d2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] memo = new long[n+1];\n\
    \    int v = n;\n    for(int i = 0; i < v; i++)\n    {\n        if(i == 0 || i\
    \ == 1)\n        {\n            memo[i] = 0;\n        }\n        else if(i ==\
    \ 2)\n        {\n            memo[i] = 2;\n        }\n        else if(i == 3)\n\
    \        {\n            memo[i] = 0;\n        }\n        else\n        {\n   \
    \         memo[i] = memo[i-1] + memo[i-2] + memo[i-3] + memo[i-4];\n        }\n\
    \    }\n    return memo[v-1];\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_s2n3nvc.d(22): Error: cannot implicitly convert expression `n`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_s2n3nvc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n    {\n\
    \        return -1;\n    }\n    else if (n == 0 || n == 1)\n    {\n        return\
    \ 0;\n    }\n    else if (n == 2)\n    {\n        return 2;\n    }\n    else if\
    \ (n == 3)\n    {\n        return 0;\n    }\n    else\n    {\n        long a =\
    \ 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n        long\
    \ result = 0;\n        foreach (long i; 0 .. n-3)\n        {\n            result\
    \ = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = result;\n        }\n        return result;\n    }\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return (n == 2 ? 2 : 0);\n    else\n    {\n        auto result = long[4];\n\
    \        result[0] = 0;\n        result[1] = 0;\n        result[2] = 2;\n    \
    \    result[3] = 0;\n        for (auto i = 4; i <= n; i++)\n        {\n      \
    \      result[0] = result[1];\n            result[1] = result[2];\n          \
    \  result[2] = result[3];\n            result[3] = result[0] + result[1] + result[2]\
    \ + result[3];\n        }\n        return result[3];\n    }\n}\nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnan6nt61.d(25): Error: found `[` when expecting `.` following long

    /tmp/tmpnan6nt61.d(25): Error: found `4` when expecting identifier following `long`.

    /tmp/tmpnan6nt61.d(25): Error: semicolon expected following auto declaration,
    not `]`

    /tmp/tmpnan6nt61.d(25): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnan6nt61.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long n1 = 0;\n    long\
    \ n2 = 0;\n    long n3 = 2;\n    long n4 = 0;\n    long i = 0;\n    long n5 =\
    \ 0;\n    while (i <= n)\n    {\n        n5 = n1 + n2 + n3 + n4;\n        n1 =\
    \ n2;\n        n2 = n3;\n        n3 = n4;\n        n4 = n5;\n        i++;\n  \
    \  }\n    return n1;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphupg89s_.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmphupg89s_.__unittest_L38_C1() [0x427a84]

    ??:? void tmphupg89s_.__modtest() [0x427afc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    n = n.abs;\n    if (n\
    \ < 3)\n        return n * 2;\n    long a = 0;\n    long b = 0;\n    long c =\
    \ 2;\n    long d = 2;\n    long e = 0;\n    size_t m = (n - 3) % 4;\n    foreach(i;\
    \ 1..(n - 3) / 4)\n    {\n        e = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = e;\n    }\n    switch(m)\n    {\n      \
    \  case 0:\n            return e;\n        case 1:\n            return d;\n  \
    \      case 2:\n            return c;\n        case 3:\n            return b;\n\
    \    }\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9a1fd873.d(38): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9a1fd873.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n==0) \n      \
    \  return 0; \n    else if (n==1) \n        return 0; \n    else if (n==2) \n\
    \        return 2; \n    else if (n==3) \n        return 0; \n    else if (n==4)\
    \ \n        return 2; \n    else\n    { \n        long a=0,b=0,c=2,d=2,res=0;\
    \ \n        for (long i=5;i<=n;i++) \n        { \n            res=a+b+c+d; \n\
    \            a=b; \n            b=c; \n            c=d; \n            d=res; \n\
    \        } \n        return res; \n    } \n} \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi17uxndv.d(50): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpi17uxndv.__unittest_L45_C1() [0x427b05]

    ??:? void tmpi17uxndv.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // recursion is wasteful,\
    \ since many numbers will be repeated\n    // we can use a big array to store\
    \ the nth fibonacci numbers\n    // but we only need the previous four, so we\
    \ can just use these\n    // but we need to keep track of the index, which is\
    \ i\n    long i = 0L;\n    long fib4PrevPrevPrev = 0L;\n    long fib4PrevPrev\
    \ = 0L;\n    long fib4Prev = 2L;\n    long fib4Curr = 0L;\n    // make sure the\
    \ index is in bounds\n    if (n >= 0L) \n    {\n        // loop through the sequence\n\
    \        for (; i < n; i++) \n        {\n            // compute the nth fibonacci\
    \ number\n            fib4Curr = fib4PrevPrevPrev + fib4PrevPrev + fib4Prev;\n\
    \            // update the numbers\n            fib4PrevPrevPrev = fib4PrevPrev;\n\
    \            fib4PrevPrev = fib4Prev;\n            fib4Prev = fib4Curr;\n    \
    \    }\n    }\n    return fib4Curr;\n}\n/*\nWrite a program that determines the\
    \ number of positive integers, less than or equal to N, that have no leading zeros.\n\
    \    >>> noLeadingZeros(10L)\n    10L\n    >>> noLeadingZeros(9L)\n    9L\n  \
    \  >>> noLeadingZeros(8L)\n    8L\n    >>> noLeadingZeros(7L)\n    7L\n    >>>\
    \ noLeadingZeros(6L)\n    6L\n    >>> noLeadingZeros(5L)\n    5L\n    >>> noLeadingZeros(4L)\n\
    \    4L\n    >>> noLeadingZeros(3L)\n    3L\n    >>> noLeadingZeros(2L)\n    2L\n\
    \    >>> noLeadingZeros(1L)\n    1L\n    >>> noLeadingZeros(0L)\n    1L\n*/\n\
    long noLeadingZeros(long n) \n{\n    // start count at one, since we know 1 will\
    \ be in the list\n    long count = 1L;\n    // go through each number and check\
    \ for leading zeros\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp09se5hgj.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp09se5hgj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) return -1;\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return\
    \ 2;\n    if (n == 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 2;\n    long d = 0;\n    long temp = 0;\n    for (long i = 4; i <= n; i++)\
    \ {\n        temp = d;\n        d = d + c + b + a;\n        a = b;\n        b\
    \ = c;\n        c = temp;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n == 0L) \n   \
    \     return 0L; \n    if (n == 1L) \n        return 0L; \n    if (n == 2L) \n\
    \        return 2L; \n    if (n == 3L) \n        return 0L; \n  \n    long a =\
    \ 0L; \n    long b = 0L; \n    long c = 2L; \n    long d = 0L; \n  \n    for (long\
    \ i = 3L; i <= n; i++) \n    { \n        long t = d; \n        d = a + b + c +\
    \ d; \n        a = b; \n        b = c; \n        c = t; \n    } \n    return d;\
    \ \n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) ==\
    \ 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd486x1hg.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpd486x1hg.__unittest_L45_C1() [0x427ac8]

    ??:? void tmpd486x1hg.__modtest() [0x427b40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    int index\
    \ = 3;\n    if (n <= 2) {\n        return n;\n    }\n    while (index <= n) {\n\
    \        e = d;\n        d = c;\n        c = b;\n        b = a;\n        a = e\
    \ + d + c + b;\n        index++;\n    }\n    return a;\n}\n/*\nunittest\n{\n \
    \   alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprv71negq.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprv71negq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\t\n\treturn 0;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg8g9fx9r.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d15]

    ??:? void tmpg8g9fx9r.__unittest_L24_C1() [0x427a1c]

    ??:? void tmpg8g9fx9r.__modtest() [0x427a94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a8ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42f9ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]

    ??:? runModuleUnitTests [0x42b811]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428164]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n==0) return 0;\n\
    \    if (n==1) return 0;\n    if (n==2) return 2;\n    if (n==3) return 0;\n \
    \   //assume n >= 4\n    auto result = tuple(long, long, long, long)(0, 0, 2,\
    \ 0);\n    auto temp = tuple(long, long, long, long)(0, 0, 0, 0);\n    for (auto\
    \ i = 4; i <= n; i++)\n    {\n        //result += temp\n        temp[0] = result[0];\n\
    \        temp[1] = result[1];\n        temp[2] = result[2];\n        temp[3] =\
    \ result[3];\n        result[0] += temp[0];\n        result[1] += temp[1];\n \
    \       result[2] += temp[2];\n        result[3] += temp[3];\n    }\n    return\
    \ result[0] + result[1] + result[2] + result[3];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6z7qg0pk.d(26): Error: found `,` when expecting `.` following long

    /tmp/tmp6z7qg0pk.d(26): Error: found `long` when expecting identifier following
    `long`.

    /tmp/tmp6z7qg0pk.d(26): Error: found `,` when expecting `.` following long

    /tmp/tmp6z7qg0pk.d(26): Error: found `long` when expecting identifier following
    `long`.

    /tmp/tmp6z7qg0pk.d(27): Error: found `,` when expecting `.` following long

    /tmp/tmp6z7qg0pk.d(27): Error: found `long` when expecting identifier following
    `long`.

    /tmp/tmp6z7qg0pk.d(27): Error: found `,` when expecting `.` following long

    /tmp/tmp6z7qg0pk.d(27): Error: found `long` when expecting identifier following
    `long`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z7qg0pk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 3) return n;\n\
    \    if (n == 3) return 0;\n    auto t = tuple(0L, 0L, 2L, 0L);\n    n -= 3;\n\
    \    while (n-- > 0)\n    {\n        t = tuple(t[1], t[2], t[3], t[0] + t[1] +\
    \ t[2] + t[3]);\n    }\n    return t[3];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    assert(n >= 0);\n  \
    \  long ret = 0;\n    if (n <= 4)\n        ret = long((n >> 1) << (n & 1));\n\
    \    else \n    {\n        n -= 4;\n        long a = 0, b = 0, c = 2, d = 0;\n\
    \        while (n != 0) \n        {\n            switch (n & 3) \n           \
    \ {\n                case 0:\n                    c = a + c;\n               \
    \     d = b + d;\n                    break;\n                case 1:\n      \
    \              c = a + c;\n                    d = b + d;\n                  \
    \  ret += d;\n                    break;\n                case 2:\n          \
    \          c = a + c;\n                    d = b + d;\n                    ret\
    \ += c;\n                    break;\n                case 3:\n               \
    \     c = a + c;\n                    d = b + d;\n                    ret += c\
    \ + d;\n                    break;\n            }\n            a = b;\n      \
    \      b = c;\n            c = d;\n            d = 0;\n            n >>= 2;\n\
    \        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzg02h4rc.d(31): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzg02h4rc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n==0) return 0;\n\
    \    if (n==1) return 0;\n    if (n==2) return 2;\n    if (n==3) return 0;\n \
    \   long f4 = 0, f3 = 0, f2 = 2, f1 = 0;\n    foreach(i; 4 .. n+1) {\n       \
    \ f4 = f3 + f2 + f1 + f4;\n        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n\
    \    }\n    return f4;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptp3ec_ef.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmptp3ec_ef.__unittest_L34_C1() [0x427ad0]

    ??:? void tmptp3ec_ef.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    enum long z = 0L;\n\
    \    enum long o = 1L;\n    enum long t = 2L;\n    enum long f = 3L;\n    long\
    \ temp;\n    long result = 0L;\n    if (n == 0L)\n    {\n        return z;\n \
    \   }\n    else if (n == 1L)\n    {\n        return o;\n    }\n    else if (n\
    \ == 2L)\n    {\n        return t;\n    }\n    else if (n == 3L)\n    {\n    \
    \    return f;\n    }\n    else\n    {\n        result = o;\n        for (long\
    \ i = 2L; i < n; i++)\n        {\n            temp = z;\n            z = o;\n\
    \            o = t;\n            t = f;\n            f = temp + o + t + f;\n \
    \           result = f;\n        }\n        return result;\n    }\n}\n/*\nThe\
    \ Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's\
    \ defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n\
    \    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    \    Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n\
    \    8L\n    >>> fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    enum\
    \ long z = 0L;\n    enum long o = 1L;\n    enum long t = 2L;\n    enum long f\
    \ = 3L;\n    long temp;\n    long result = 0L;\n    if (n == 0L)\n    {\n    \
    \    return z;\n    }\n    else if (n == 1L)\n    {\n        return o;\n    }\n\
    \    else if (n == 2L)\n    {\n        return t;\n\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3huycp71.d(94): Error: found `unittest` instead of statement

    /tmp/tmp3huycp71.d(103): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3huycp71.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    struct Fib4 {\n    \
    \    long curr, prev;\n        static Fib4 opCall(in Fib4 a, in Fib4 b) {\n  \
    \          return Fib4(a.curr + b.curr + a.prev + b.prev, a.curr);\n        }\n\
    \    }\n    auto fib4 = Fibo!(Fib4)(Fib4(0, 0), Fib4(0, 2));\n    return fib4[n].curr;\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg4hw716z.d(24): Error: function `tmpg4hw716z.fib4.Fib4.opCall(const(Fib4)
    a, const(Fib4) b)` is not callable using argument types `(const(long), const(long))`

    /tmp/tmpg4hw716z.d(24):        cannot pass argument `a.curr + b.curr + a.prev
    + b.prev` of type `const(long)` to parameter `const(Fib4) a`

    /tmp/tmpg4hw716z.d(27): Error: template instance `Fibo!Fib4` template `Fibo` is
    not defined, did you mean Fib4?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg4hw716z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n < 0) \n     \
    \   return 0; \n  \n    auto a = 0, b = 0, c = 2, d = 0; \n    for (auto i = 3;\
    \ i <= n; i++) \n    { \n        auto sum = a + b + c + d; \n        a = b; \n\
    \        b = c; \n        c = d; \n        d = sum; \n    } \n    return d; \n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnb04mkk_.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmpnb04mkk_.__unittest_L35_C1() [0x427a84]

    ??:? void tmpnb04mkk_.__modtest() [0x427afc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) return 0;\n\
    \    if (n < 2) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\
    \    static long[] cache = [0, 0, 2, 0];\n    while (cache.length <= n) {\n  \
    \      auto l = cache.length;\n        cache ~= cache[l-1] + cache[l-2] + cache[l-3]\
    \ + cache[l-4];\n    }\n    return cache[n];\n}\n/*\nFor this problem, we can\
    \ use a dynamic programming approach.\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpugbm9ua1.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpugbm9ua1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \nin{\n    assert(n >= 0L);\n\
    }\nout(result)\n{\n    assert(result >= 0L);\n}\ndo{\n    if(n <= 3L) return (long)(n\
    \ / 2L);\n    auto sum = 0L;\n    auto f4 = 0L;\n    auto f3 = 0L;\n    auto f2\
    \ = 2L;\n    auto f1 = 0L;\n    foreach(i; 1L .. n - 3L){\n        sum = f4 +\
    \ f3 + f2 + f1;\n        f4 = f3;\n        f3 = f2;\n        f2 = f1;\n      \
    \  f1 = sum;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiyefd_zc.d(28): Error: C style cast illegal, use `cast(long)(n
    / 2L)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiyefd_zc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long first = 0L;\n \
    \   long second = 0L;\n    long third = 2L;\n    long fourth = 0L;\n    long result\
    \ = 0L;\n    long count = 0L;\n    while (count < n)\n    {\n        result =\
    \ first + second + third + fourth;\n        first = second;\n        second =\
    \ third;\n        third = fourth;\n        fourth = result;\n        count++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpty_vdfsm.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpty_vdfsm.__unittest_L38_C1() [0x427a8c]

    ??:? void tmpty_vdfsm.__modtest() [0x427b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long sum = 0;\n    if (n < 4)\
    \ \n    {\n        return a;\n    } \n    else if (n == 4) \n    {\n        return\
    \ b;\n    } \n    else if (n == 5) \n    {\n        return c;\n    } \n    else\
    \ if (n == 6) \n    {\n        return d;\n    } \n    else \n    {\n        for\
    \ (long i = 4; i < n; i++) \n        {\n            sum = a + b + c + d;\n   \
    \         a = b;\n            b = c;\n            c = d;\n            d = sum;\n\
    \        }\n        return sum;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7rw03g3w.d(59): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmp7rw03g3w.__unittest_L55_C1() [0x427ad0]

    ??:? void tmp7rw03g3w.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 2) return 0;\n\
    \    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long i = 3;\n    while (i < n)\
    \ {\n        long e = a + b + c + d;\n        a = b;\n        b = c;\n       \
    \ c = d;\n        d = e;\n        i += 1;\n    }\n    return a + b + c + d;\n\
    }\n/*\nImplement the function\n    bool is_palindrome(long n)\n    that returns\
    \ true if the long integer n is a palindrome, i.e. reads the same as the reverse\
    \ of n.\n    Examples:\n    >>> is_palindrome(1L)\n    true\n    >>> is_palindrome(2L)\n\
    \    false\n    >>> is_palindrome(11L)\n    true\n    >>> is_palindrome(110L)\n\
    \    false\n    >>> is_palindrome(121L)\n    true\n*/\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwfgxohuw.d(59): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpwfgxohuw.__unittest_L55_C1() [0x427ac4]

    ??:? void tmpwfgxohuw.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fibArray = new\
    \ long[(int)n + 1];\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxb2s4a74.d(21): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpxb2s4a74.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxb2s4a74.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) return 0;\n\
    \    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9vlw6qn6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427db5]

    ??:? void tmp9vlw6qn6.__unittest_L34_C1() [0x427ae1]

    ??:? void tmp9vlw6qn6.__modtest() [0x427b38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42badb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a96e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]

    ??:? runModuleUnitTests [0x42b8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428204]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \nin {\n    assert(n >= 0L);\n\
    }\nout (result) {\n    assert(n == 0L || result >= 0L);\n}\ndo {\n    long[] A\
    \ = new long[n];\n    A[0L] = 0L;\n    A[1L] = 0L;\n    A[2L] = 2L;\n    A[3L]\
    \ = 0L;\n    foreach (long i in 4L .. n) {\n        A[i] = A[i - 1L] + A[i - 2L]\
    \ + A[i - 3L] + A[i - 4L];\n    }\n    return A[n - 1L];\n}\nunittest\n{\n   \
    \ alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnvmp6hoz.d(32): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnvmp6hoz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // x1, x2, x3, x4\n\
    \    // x5, x6, x7, x8\n    // x9, x10, x11, x12\n    // x13, x14, x15, x16\n\
    \    // x17, x18, x19, x20\n    // x21, x22, x23, x24\n    // x25, x26, x27, x28\n\
    \    // x29, x30, x31, x32\n    // x33, x34, x35, x36\n    // x37, x38, x39, x40\n\
    \    // x41, x42, x43, x44\n    // x45, x46, x47, x48\n    // x49, x50, x51, x52\n\
    \    // x53, x54, x55, x56\n    // x57, x58, x59, x60\n    // x61, x62, x63, x64\n\
    \    // x65, x66, x67, x68\n    // x69, x70, x71, x72\n    // x73, x74, x75, x76\n\
    \    // x77, x78, x79, x80\n    // x81, x82, x83, x84\n    // x85, x86, x87, x88\n\
    \    // x89, x90, x91, x92\n    // x93, x94, x95, x96\n    // x97, x98, x99, x100\n\
    \    // ...\n    // x301, x302, x303, x304\n    // x305, x306, x307, x308\n  \
    \  // x309, x310, x311, x312\n    // x313, x314, x315, x316\n    // x317, x318,\
    \ x319, x320\n    // x321, x322, x323, x324\n    // x325, x326, x327, x328\n \
    \   // x329, x330, x331, x332\n    // x333, x334, x335, x336\n    // x337, x338,\
    \ x339, x340\n    // x341, x342, x343, x344\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5v9vogy.d(59): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5v9vogy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // Note that this is\
    \ a horriable way to compute fib4, I just want to show\n    // how you can use\
    \ the dynamic programming to make it more efficent.\n    // If we use memoization,\
    \ it will be O(n)\n    static Map!int[] fibs = [ 0, 0, 2, 0 ];\n    if (n < fibs.length)\
    \ {\n        return fibs[n];\n    }\n    while (fibs.length <= n) {\n        //\
    \ O(n)\n        int len = fibs.length;\n        fibs ~= fibs[len-1] + fibs[len-2]\
    \ + fibs[len-3] + fibs[len-4];\n    }\n    return fibs[n];\n}\n/*\nFor a given\
    \ number n, print the corresponding fib4 series. The first few values of the fib4\
    \ series are as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) ->\
    \ 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n>>> fib4(7)\n\
    [0, 0, 2, 0, 2, 4, 8, 14]\n*/\nlong[] fib4(size_t n) \n{\n    static int[] fibs\
    \ = [ 0, 0, 2, 0 ];\n    if (n < fibs.length) {\n        return fibs[0..n];\n\
    \    }\n    while (fibs.length <= n) {\n        // O(n)\n        int len = fibs.length;\n\
    \        fibs ~= fibs[len-1] + fibs[len-2] + fibs[len-3] + fibs[len-4];\n    }\n\
    \    return fibs;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp49gzp1hc.d(24): Error: template instance `Map!int` template `Map`
    is not defined

    /tmp/tmp49gzp1hc.d(24): Error: cannot use array to initialize `_error_`

    /tmp/tmp49gzp1hc.d(53): Error: cannot implicitly convert expression `fibs.length`
    of type `ulong` to `int`

    /tmp/tmp49gzp1hc.d(49): Error: cannot implicitly convert expression `fibs[0..n]`
    of type `int[]` to `long[]`

    /tmp/tmp49gzp1hc.d(56): Error: cannot implicitly convert expression `fibs` of
    type `int[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp49gzp1hc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    int i = 0;\n\
    \    for (i = 4; i <= n; i++) \n    {\n        e = a + b + c + d;\n        a =\
    \ b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    auto fib4_seq = [](size_t\
    \ i){ return i.foldLeft!((a, b) => (a[1] + a[2] + a[3] + a[4], a[0], a[1], a[2],\
    \ a[3]))(); };\n    return fib4_seq(iota(n))[0];\n}\n/*\nWrite a function that\
    \ takes in a string and returns all possible permutations of that string.\n  \
    \  >>> permutations(\"\")\n    [\"\"]\n    >>> permutations(\"a\")\n    [\"a\"\
    ]\n    >>> permutations(\"abc\")\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"\
    cab\", \"cba\"]\n*/\nstring[] permutations(string s) \n{\n    auto s_len = s.length;\n\
    \    if (s_len == 0) \n    {\n        return [\"\"];\n    }\n    return s.indices.map!(i\
    \ =>\n        (s[i], s[i..$]).map!(a => a[0] ~ permutations(a[1] ~ s[0..i] ~ s[i+1..$])).join).join;\n\
    }\n/*\n1\n2\n3\n4\n5\nGiven a positive integer value N, write a function that\
    \ creates an N by N matrix that is filled with integers that start at 1 and end\
    \ at N*N in row major order (left to right, top to bottom).  For example, given\
    \ an N value of 3, the matrix would look like this:\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdpvpb4ib.d(21): Error: found `i` when expecting `,`

    /tmp/tmpdpvpb4ib.d(21): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpdpvpb4ib.d(21): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpdpvpb4ib.d(43): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpvpb4ib.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // The best way to compute\
    \ this is to use dynamic programming to store results.\n    // The only difficultly\
    \ is because n is a long and fib4(n) can overflow a uint.\n    // To fix this,\
    \ we use an integer type of exactly the number of bits n has.\n    static TypeTuple!(n+1)[]\
    \ fib4s; // This is the dynamic programming array.\n    static bool initialized\
    \ = false; // This tells us whether the array has been filled in.\n    if (!initialized)\n\
    \    {\n        // Initialize the array.\n        // The first few entries are\
    \ hard-coded, the rest are computed.\n        fib4s ~= 0; // fib4(0)\n       \
    \ fib4s ~= 0; // fib4(1)\n        fib4s ~= 2; // fib4(2)\n        fib4s ~= 0;\
    \ // fib4(3)\n        for (long i = 4; i <= n; i++)\n        {\n            //\
    \ The i-th element is the sum of the previous 4 elements.\n            // This\
    \ can overflow the integer used.  Use a larger type to compute the\n         \
    \   // sum, then truncate it to the appropriate size.\n            auto sum =\
    \ cast(TypeTuple!(n+1)sum)(fib4s[i-1] + fib4s[i-2] + fib4s[i-3] + fib4s[i-4]);\n\
    \            fib4s ~= sum;\n        }\n        initialized = true;\n    }\n  \
    \  return fib4s[n];\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp378hm1o5.d(39): Error: unexpected identifier `sum` in declarator

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp378hm1o5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    long[long] fibb; \n\
    \    fibb[0L] = 0L; \n    fibb[1L] = 0L; \n    fibb[2L] = 2L; \n    fibb[3L] =\
    \ 0L; \n    foreach(i; 4L..n) \n    { \n        fibb[i] = fibb[i-1] + fibb[i-2]\
    \ + fibb[i-3] + fibb[i-4]; \n    } \n    return fibb[n]; \n} \n//dub test\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp8fxglcxp.d(30): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428a42]

    ??:? long tmp8fxglcxp.fib4(long) [0x427d81]

    ??:? void tmp8fxglcxp.__unittest_L33_C1() [0x427d9d]

    ??:? void tmp8fxglcxp.__modtest() [0x427e2c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d8b3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4287ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a7cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a85c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a759]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4287c5]

    ??:? runModuleUnitTests [0x42d689]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*)'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3)\n      \
    \  return n*2;\n    long[] prev = [0,0,2,0];\n    for (long i = 4; i <= n; i++)\
    \ \n    {\n        long fib = prev[0] + prev[1] + prev[2] + prev[3];\n       \
    \ prev[0] = prev[1];\n        prev[1] = prev[2];\n        prev[2] = prev[3];\n\
    \        prev[3] = fib;\n    }\n    return prev[3];\n}\n/*\nA function that takes\
    \ an array of integers, and returns an array of the same length as the input,\
    \ where the output at each index i is the product of all input elements except\
    \ the element at i.\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5k5ueicd.d(34): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5k5ueicd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tif (n == 0L) \n\t{\n\t\
    \treturn 0L;\n\t}\n\telse if (n == 1L) \n\t{\n\t\treturn 0L;\n\t}\n\telse if (n\
    \ == 2L) \n\t{\n\t\treturn 2L;\n\t}\n\telse if (n == 3L) \n\t{\n\t\treturn 0L;\n\
    \t}\n\telse \n\t{\n\t\treturn (fib4(n - 1L) + fib4(n - 2L) + fib4(n - 3L) + fib4(n\
    \ - 4L));\n\t}\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    long a = 0, b = 0,\
    \ c = 2, d = 0, fib = 0; \n    long i; \n    for (i = 3; i <= n; i++) { \n   \
    \     fib = a + b + c + d; \n        a = b; \n        b = c; \n        c = d;\
    \ \n        d = fib; \n    } \n    return fib; \n} \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr8vwqjsi.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpr8vwqjsi.__unittest_L32_C1() [0x427a94]

    ??:? void tmpr8vwqjsi.__modtest() [0x427b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tenum int fib4 = [0, 0,\
    \ 2, 0, ];\n\tif (n < fib4.length) return fib4[n];\n\tint len = fib4.length;\n\
    \tlong[] fib = [0, 0, 2, 0, ];\n\twhile (len <= n) {\n\t\tfib ~= fib[0] + fib[1]\
    \ + fib[2] + fib[3];\n\t\tfib.removeFront();\n\t\tlen++;\n\t}\n\treturn fib[3];\n\
    }\n/*\n    Given a list of integers and a number k, write a function that returns\
    \ true if given list can be divided into pairs such that sum of every pair is\
    \ divisible by k.\n    >>> divisible([1, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5,\
    \ 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8,\
    \ 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5,\
    \ 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8,\
    \ 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5,\
    \ 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8,\
    \ 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5,\
    \ 3, 8\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) ==\
    \ 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprt0vz_px.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprt0vz_px.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // this is really slow\n\
    \    //unittest\n    {\n        assert(fib4(0L) == 0L);\n        assert(fib4(1L)\
    \ == 0L);\n        assert(fib4(2L) == 2L);\n        assert(fib4(3L) == 0L);\n\
    \        assert(fib4(4L) == 2L);\n        assert(fib4(5L) == 4L);\n        assert(fib4(6L)\
    \ == 8L);\n        assert(fib4(7L) == 14L);\n        assert(fib4(8L) == 26L);\n\
    \        assert(fib4(9L) == 48L);\n        assert(fib4(10L) == 92L);\n       \
    \ assert(fib4(11L) == 174L);\n        assert(fib4(12L) == 328L);\n        assert(fib4(13L)\
    \ == 626L);\n        assert(fib4(14L) == 1200L);\n        assert(fib4(15L) ==\
    \ 2294L);\n        assert(fib4(16L) == 4376L);\n        assert(fib4(17L) == 8366L);\n\
    \        assert(fib4(18L) == 16124L);\n        assert(fib4(19L) == 31028L);\n\
    \        assert(fib4(20L) == 59484L);\n        assert(fib4(21L) == 113864L);\n\
    \        assert(fib4(22L) == 218668L);\n        assert(fib4(23L) == 421028L);\n\
    \        assert(fib4(24L) == 812448L);\n        assert(fib4(25L) == 1567052L);\n\
    \        assert(fib4(26L) == 3011420L);\n        assert(fib4(27L) == 5789128L);\n\
    \        assert(fib4(28L) == 11156956L);\n        assert(fib4(29L) == 21466492L);\n\
    \        assert(fib4(30L) == 41321248L);\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq7pmffzn.d(55): Error: found `unittest` instead of statement

    /tmp/tmpq7pmffzn.d(64): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq7pmffzn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n == 0) \n    \
    \    return 0; \n    if (n == 1) \n        return 0; \n    if (n == 2) \n    \
    \    return 2; \n    if (n == 3) \n        return 0; \n   \n    long a = 0; \n\
    \    long b = 0; \n    long c = 2; \n    long d = 0; \n  \n    for (long i = 4;\
    \ i <= n; i++) \n    { \n        a = b + c + d; \n        b = c; \n        c =\
    \ d; \n        d = a; \n    } \n  \n    return a; \n} \n/*\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo121ydug.d(45): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo121ydug.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    alias Matrix2x2!(long)\
    \ M;\n    if (n < 0) return -1;\n    else if (n < 2) return 0;\n    else if (n\
    \ == 2) return 2;\n    else if (n == 3) return 0;\n    else\n    {\n        M\
    \ result = M(1, 1, 1, 0)^(n-3);\n        return result.m00 + result.m01;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) ==\
    \ 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6r2hpby.d(21): Error: template instance `Matrix2x2!long` template
    `Matrix2x2` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6r2hpby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n    if (n < 0L)\n    {\n  \
    \      return 0L;\n    }\n    else\n    {\n        long fib4_1 = 0L;\n       \
    \ long fib4_2 = 0L;\n        long fib4_3 = 2L;\n        long fib4_4 = 0L;\n  \
    \      long fib4_n = 0L;\n        for (long i = 3L; i <= n; i++)\n        {\n\
    \            fib4_n = fib4_1 + fib4_2 + fib4_3 + fib4_4;\n            fib4_1 =\
    \ fib4_2;\n            fib4_2 = fib4_3;\n            fib4_3 = fib4_4;\n      \
    \      fib4_4 = fib4_n;\n        }\n        return fib4_n;\n    }\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiskuuri6.d(20): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmpiskuuri6.d(20): Error: declaration expected, not `if`

    /tmp/tmpiskuuri6.d(23): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiskuuri6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tlong[] fibs = [0L, 0L,\
    \ 2L, 0L];\n\tlong sum = 0L;\n\tfor (int i = 4; i <= n; i++) \n\t{\n\t\tfibs[3]\
    \ = fibs[2];\n\t\tfibs[2] = fibs[1];\n\t\tfibs[1] = fibs[0];\n\t\tfibs[0] = sum;\n\
    \t\tsum = fibs[0] + fibs[1] + fibs[2] + fibs[3];\n\t}\n\treturn sum;\n}\n/*\n\
    The Sieve of Eratosthenes is an algorithm that can be used to efficiently find\
    \ all prime numbers between 1 and a specified number.\nThe algorithm works as\
    \ follows:\nGiven an integer n,\n1.Create a boolean array of length n.  Assume\
    \ all of the entries in the array are true.\n2.For each element i in the array,\
    \ if the ith element is true, mark all elements 2*i, 3*i, ..., n as false.\n3.The\
    \ elements in the array that are still true are the prime numbers between 1 and\
    \ n.\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) ==\
    \ 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx68tcv5n.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx68tcv5n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0L) return\
    \ 0L;\n    else if (n == 1L) return 0L;\n    else if (n == 2L) return 2L;\n  \
    \  else if (n == 3L) return 0L;\n    else if (n == 4L) return 2L;\n    else {\n\
    \        long a = 0L;\n        long b = 0L;\n        long c = 2L;\n        long\
    \ d = 2L;\n        long tmp = 0L;\n        while (n > 4L) {\n            tmp =\
    \ d;\n            d = d + c + b + a;\n            a = b;\n            b = c;\n\
    \            c = tmp;\n            n--;\n        }\n        return d;\n    }\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbkysv5_p.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpbkysv5_p.__unittest_L43_C1() [0x427af1]

    ??:? void tmpbkysv5_p.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3)\n      \
    \  return n == 0 ? 0 : 2;\n    struct Fib4\n    {\n        long a;\n        long\
    \ b;\n        long c;\n        long d;\n    }\n    long x = Fib4(0, 2, 0, 2);\n\
    \    long y = Fib4(2, 2, 0, 2);\n    long n2 = n - 3;\n    while (n2 != 0)\n \
    \   {\n        if (n2 & 1)\n        {\n            y = Fib4(y.a * x.a + y.b *\
    \ x.c,\n                     y.a * x.b + y.b * x.d,\n                     y.c\
    \ * x.a + y.d * x.c,\n                     y.c * x.b + y.d * x.d);\n        }\n\
    \        x = Fib4(x.a * x.a + x.b * x.c,\n                 x.a * x.b + x.b * x.d,\n\
    \                 x.c * x.a + x.d * x.c,\n                 x.c * x.b + x.d * x.d);\n\
    \        n2 >>= 1;\n    }\n    return y.a;\n}\n/*\nSee http://brilliant.org/wiki/crochet-square-number/\n\
    The \"Crochet Square Number\" of a number 'n' is defined as the sum of all non-square\
    \ numbers between 1 and n (inclusive)\nPlease write a function that computes the\
    \ crochet square number of an input number.\n    >>> crochetSquareNumber(1L)\n\
    \    0L\n    >>> crochetSquareNumber(2L)\n    1L\n    >>> crochetSquareNumber(3L)\n\
    \    1L\n    >>> crochetSquareNumber(6L)\n    6L\n    >>> crochetSquareNumber(7L)\n\
    \    11L\n    >>> crochetSquareNumber(8L)\n    16L\n    >>> crochetSquareNumber(12L)\n\
    \    25L\n*/\nlong crochetSquareNumber(long n) \n{\n    long sum = 0;\n    long\
    \ i = 0;\n    while (i < n)\n    {\n        long i2 = i*i\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk1_lu1q0.d(76): Error: semicolon expected, not `unittest`

    /tmp/tmpk1_lu1q0.d(76): Error: found `unittest` instead of statement

    /tmp/tmpk1_lu1q0.d(85): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk1_lu1q0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // Put your code here\n\
    \    if (n <= 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return\
    \ 2;\n    if (n == 3) return 0;\n    long[] fib = new long[n+1];\n    fib[0] =\
    \ 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n    for (int i = 4; i\
    \ <= n; i++)\n    {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n\
    \    }\n    return fib[n];\n}\nlong fib4_0(long n) \n{\n    if (n <= 0) return\
    \ 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    auto x = tuple(0L, 0L, 2L, 0L);\n    for (int i = 4; i <= n; i++)\n\
    \    {\n        x = tuple(x[1], x[2], x[3], x[0] + x[1] + x[2] + x[3]);\n    }\n\
    \    return x[3];\n}\n/*\nYou have a map of airports with flight connections between\
    \ them. For instance:\n    auto airportConnections = [[\"BOS\", \"MCO\"], [\"\
    BOS\", \"JFK\"], [\"JFK\", \"ORD\"], [\"JFK\", \"MCO\"], [\"ORD\", \"LAX\"], [\"\
    ORD\", \"MCO\"], [\"LAX\", \"SFO\"]];\n    You also have a list of flights (for\
    \ instance, one for each day of the week):\n    auto flights = [[\"ORD\", \"MCO\"\
    ], [\"JFK\", \"MCO\"], [\"BOS\", \"ORD\"], [\"MCO\", \"LAX\"], [\"JFK\", \"LAX\"\
    ], [\"BOS\", \"LAX\"], [\"LAX\", \"BOS\"]];\n    The flights are circular, meaning\
    \ that the last destination in the list of flights for a given day is the first\
    \ destination for the next day.\n    Write a function that takes a list of flights\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmcru__ew.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmcru__ew.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tif (n == 0) return 0;\n\
    \tif (n == 1) return 0;\n\tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\t\n\
    \tlong a1 = 0, a2 = 0, a3 = 2, a4 = 0;\n\tlong a = 0;\n\tforeach (j; 4 .. n +\
    \ 1) \n\t{\n\t\ta = a1 + a2 + a3 + a4;\n\t\ta1 = a2;\n\t\ta2 = a3;\n\t\ta3 = a4;\n\
    \t\ta4 = a;\n\t}\n\treturn a;\n}\n/*\nGiven a sequence of integers write a function\
    \ to compute the longest subsequence such that the elements in the subsequence\
    \ are consecutive.\nThe function should return a tuple representing the longest\
    \ subsequence with the first element being the length of the subsequence and the\
    \ second element\nbeing the beginning element of the subsequence.  An empty sequence\
    \ is considered a subsequence of length 0.  If there are multiple subsequences\
    \ of the same \nlength and same beginning element, you can return any of them.\n\
    \    >>> consecutiveSubseq([]).length\n    0\n    >>> consecutiveSubseq([3]).length\n\
    \    1\n    >>> consecutiveSubseq([3]).begin\n    3\n    >>> consecutiveSubseq([1,2,3,4,5]).length\n\
    \    5\n    >>> consecutiveSubseq([1,2,3,4,5]).begin\n    1\n    >>> consecutiveSubseq([1,2,3,4,5,6,7,8,9,10]).length\n\
    \    10\n    >>> consecutiveSubseq([1,2,3,4,5,6,7,8,9,10]).begin\n    1\n    >>>\
    \ consecutiveSubseq([1,2,3,4,5,6,7,8,9,10,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]).length\n\
    \    20\n    >>> consecutiveSubseq([1,2,3,4,5,6,7,8,9,10,4,5,6,7,8,9,10,11,12\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptz7ro3jq.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptz7ro3jq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long fib4_n = 0;\n \
    \   long fib4_nminus1 = 0;\n    long fib4_nminus2 = 2;\n    long fib4_nminus3\
    \ = 0;\n    long fib4_nminus4 = 0;\n    if (n == 0)\n    {\n        return fib4_n;\n\
    \    }\n    else if (n == 1)\n    {\n        return fib4_nminus1;\n    }\n   \
    \ else if (n == 2)\n    {\n        return fib4_nminus2;\n    }\n    else if (n\
    \ == 3)\n    {\n        return fib4_nminus3;\n    }\n    else if (n == 4)\n  \
    \  {\n        return fib4_nminus4;\n    }\n    else\n    {\n        for (long\
    \ i = 4; i < n; i++)\n        {\n            fib4_n = fib4_nminus1 + fib4_nminus2\
    \ + fib4_nminus3 + fib4_nminus4;\n            fib4_nminus4 = fib4_nminus3;\n \
    \           fib4_nminus3 = fib4_nminus2;\n            fib4_nminus2 = fib4_nminus1;\n\
    \            fib4_nminus1 = fib4_n;\n        }\n        return fib4_n;\n    }\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4co5xe0f.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmp4co5xe0f.__unittest_L59_C1() [0x427ae4]

    ??:? void tmp4co5xe0f.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a, b, c, d, e;\n\
    \    a = b = c = d = e = 0;\n    for (; n > 0; n--) {\n        e = d;\n      \
    \  d = c;\n        c = b;\n        b = a;\n        a = b + c + d + e;\n    }\n\
    \    return a;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6yzqw8ob.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmp6yzqw8ob.__unittest_L32_C1() [0x427a88]

    ??:? void tmp6yzqw8ob.__modtest() [0x427b00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long f0 = 0;\n    long\
    \ f1 = 0;\n    long f2 = 2;\n    long f3 = 0;\n    long f = 0;\n    long i = 4;\n\
    \    while (i <= n) {\n        f = f0 + f1 + f2 + f3;\n        f0 = f1;\n    \
    \    f1 = f2;\n        f2 = f3;\n        f3 = f;\n        i += 1;\n    }\n   \
    \ return f;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    //mutable long a = 0;\n\
    \    //mutable long b = 0;\n    //mutable long c = 2;\n    //mutable long d =\
    \ 0;\n    //mutable long e = 0;\n    immutable long a = 0;\n    immutable long\
    \ b = 0;\n    immutable long c = 2;\n    immutable long d = 0;\n    immutable\
    \ long e = 0;\n    int i = 0;\n    enum index = 1;\n    //auto rt = tuple(a,b,c,d,e);\n\
    \    auto rt = tuple(a,b,c,d,e);\n    //auto rt = tuple(a,b,c,d,e);\n    if (n\
    \ < 0)\n    {\n        return -1;\n    }\n    else if (n == 0)\n    {\n      \
    \  return rt[0];\n    }\n    else if (n == 1)\n    {\n        return rt[1];\n\
    \    }\n    else if (n == 2)\n    {\n        return rt[2];\n    }\n    else if\
    \ (n == 3)\n    {\n        return rt[3];\n    }\n    else\n    {\n        for\
    \ (i = 4; i <= n; i++)\n        {\n            e = rt[4] + rt[3] + rt[2] + rt[1];\n\
    \            rt[4] = rt[3];\n            rt[3] = rt[2];\n            rt[2] = rt[1];\n\
    \            rt[1] = rt[0];\n            rt[0] = e;\n        }\n        return\
    \ rt[0];\n    }\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjp25e5j9.d(60): Error: cannot modify `immutable` expression `e`

    /tmp/tmpjp25e5j9.d(61): Error: cannot modify `immutable` expression `rt.__expand_field_4`

    /tmp/tmpjp25e5j9.d(62): Error: cannot modify `immutable` expression `rt.__expand_field_3`

    /tmp/tmpjp25e5j9.d(63): Error: cannot modify `immutable` expression `rt.__expand_field_2`

    /tmp/tmpjp25e5j9.d(64): Error: cannot modify `immutable` expression `rt.__expand_field_1`

    /tmp/tmpjp25e5j9.d(65): Error: cannot modify `immutable` expression `rt.__expand_field_0`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjp25e5j9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 0) return 0;\n\
    \    if (n <= 3) return (n < 2 ? 0 : 2);\n    auto val = tuple(0L, 0L, 2L, 0L);\n\
    \    for (long i = 4; i <= n; i++)\n    {\n        val = tuple(val[1], val[2],\
    \ val[3], val[0] + val[1] + val[2] + val[3]);\n    }\n    return val[3];\n}\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 0)\n      \
    \  return 0;\n    n = n - 1;\n    long F2 = 0;\n    long F1 = 0;\n    long F0\
    \ = 2;\n    while (n > 0) \n    {\n        long F3 = F2 + F1 + F0;\n        F2\
    \ = F1;\n        F1 = F0;\n        F0 = F3;\n        n = n - 1;\n    }\n    return\
    \ F0;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj10_ci4p.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmpj10_ci4p.__unittest_L37_C1() [0x427a88]

    ??:? void tmpj10_ci4p.__modtest() [0x427b00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib = new long[n\
    \ + 1];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n\
    \    foreach(i; 4 .. n + 1) \n    {\n        fib[i] = fib[i - 1] + fib[i - 2]\
    \ + fib[i - 3] + fib[i - 4];\n    }\n    return fib[n];\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n == 0L) return\
    \ 0L; \n    if (n == 1L) return 0L; \n    if (n == 2L) return 2L; \n    if (n\
    \ == 3L) return 0L; \n    int m = n / 2; \n    auto f = tuple(0L, 0L, 0L, 0L,\
    \ 0L, 0L, 0L, 0L); \n    auto f0 = tuple(0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L); \n \
    \   f[0] = 0L; \n    f[1] = 0L; \n    f[2] = 2L; \n    f[3] = 0L; \n    f[4] =\
    \ 1L; \n    f[5] = 0L; \n    f[6] = 0L; \n    f[7] = 0L; \n    for (int i = 1;\
    \ i < m; i++) \n    { \n        auto newf = tuple(0L, 0L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L); \n        newf[0] = f[0] * f0[0] + f[1] * f0[2] + f[2] * f0[4] + f[3] *\
    \ f0[6]; \n        newf[1] = f[0] * f0[1] + f[1] * f0[3] + f[2] * f0[5] + f[3]\
    \ * f0[7]; \n        newf[2] = f[2] * f0[0] + f[3] * f0[2] + f[4] * f0[4] + f[5]\
    \ * f0[6]; \n        newf[3] = f[2] * f0[1] + f[3] * f0[3] + f[4] * f0[5] + f[5]\
    \ * f0[7]; \n        newf[4] = f[4] * f0[0] + f[5] * f0[2]\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpclgm9yua.d(44): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpclgm9yua.d(53): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpclgm9yua.d(53): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclgm9yua.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    //declaring a tuple\
    \ (and printing it)\n    tuple!(long, long, long, long) fib4 = tuple(0L, 0L, 2L,\
    \ 0L); \n    foreach(count; 0..n) \n    { \n        //grabbing and printing the\
    \ 0, 1, 2, 3 values of the tuple\n        long temp = fib4[0]; \n        fib4[0]\
    \ = fib4[1]; \n        fib4[1] = fib4[2]; \n        fib4[2] = fib4[3]; \n    \
    \    fib4[3] = temp + fib4[1] + fib4[2] + fib4[3]; \n    } \n    return fib4[3];\
    \ \n} \n  \nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4zq6chfz.d(22): Error: `tuple!(long, long, long, long)` is used
    as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4zq6chfz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tif (n < 0) \n    {\n \
    \       return -1;\n    } \n    else if (n == 0) \n    {\n        return 0;\n\
    \    } \n    else if (n == 1) \n    {\n        return 0;\n    } \n    else if\
    \ (n == 2) \n    {\n        return 2;\n    } \n    else if (n == 3) \n    {\n\
    \        return 0;\n    }\n    Tuple!(long, long, long, long) fibs = tuple(0,\
    \ 0, 2, 0);\n    foreach(i; 1 .. n) \n    {\n        long fibSum = fibs[0] + fibs[1]\
    \ + fibs[2] + fibs[3];\n        fibs[0] = fibs[1];\n        fibs[1] = fibs[2];\n\
    \        fibs[2] = fibs[3];\n        fibs[3] = fibSum;\n    }\n    return fibs[3];\n\
    }\n/*\nWrite a function that takes a function as an argument and returns a function\
    \ that reverses the arguments to the first function. \nPlease do not use std.functional.\n\
    \    >>> int sum(int a, int b) { return a + b; }\n    >>> auto reversedSum = reverseArgs(sum);\n\
    \    >>> reversedSum(1, 2)\n    3\n    >>> auto reversedSum2 = reverseArgs(reversedSum);\n\
    \    >>> reversedSum2(1, 2)\n    3\n*/\nT reverseArgs(T) (T func)\n{\n    return\
    \ (Args...)(Args args) { return func(args.reverse); };\n}\n/*\nPlease write a\
    \ function that takes a string and returns a string of each of the words in the\
    \ first string that have an even length.  \nThe words in the returned string should\
    \ not be separated by spaces.\n    >>> evenLengthWords(\"I went to the grocery\
    \ store\")\n    \"wentto\"\n    >>> evenLengthWords(\"I didn't go to the store\"\
    )\n    \"Ididn'ttothe\"\n*/\nstring evenLengthWords(string input) \n{\n    string[]\
    \ words = input.split;\n    string result = \"\";\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpju18sblh.d(65): Error: found `...` when expecting `)`

    /tmp/tmpju18sblh.d(65): Error: found `)` when expecting `;` following `return`
    statement

    /tmp/tmpju18sblh.d(79): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpju18sblh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] a = new long[4];\n\
    \    a[0] = 0;\n    a[1] = 0;\n    a[2] = 2;\n    a[3] = 0;\n    if (n <= 3)\n\
    \        return a[n];\n    for (long i = 4; i <= n; i++) \n    {\n        long\
    \ t = a[0] + a[1] + a[2] + a[3];\n        a[0] = a[1];\n        a[1] = a[2];\n\
    \        a[2] = a[3];\n        a[3] = t;\n    }\n    return a[3];\n}\n/*\nThe\
    \ functions max and min can be used to get the maximum or minimum of two values.\
    \  They're variadic, so they can be used to compare more than two values.\n  \
    \  >>> max(1, 5)\n    5\n    >>> max(1, 5, 100, 20)\n    100\n    >>> min(1, 5)\n\
    \    1\n    >>> min(1, 5, 100, 20)\n    1\nunittest\n{\n    alias candidate =\
    \ fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2z8jt_y8.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2z8jt_y8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
