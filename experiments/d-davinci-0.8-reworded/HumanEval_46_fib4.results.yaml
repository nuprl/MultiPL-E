language: d
name: HumanEval_46_fib4
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long[] a = [0, 0, 2, 0];\n    for (long i = 4; i <= n; i++) \n\
    \    {\n        auto b = a[3];\n        a[3] = a[2];\n        a[2] = a[1];\n \
    \       a[1] = a[0];\n        a[0] = a[1] + a[2] + a[3] + b;\n    }\n    return\
    \ a[0];\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_jibzlye.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281f5]

    ??:? void tmp_jibzlye.__unittest_L34_C1() [0x427f21]

    ??:? void tmp_jibzlye.__modtest() [0x427f78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c253]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430279]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430728]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430205]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0bd]

    ??:? runModuleUnitTests [0x42c029]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 0; i <= n; i++)\n    {\n        if (i <= 2)\n        {\n            e = i;\n\
    \        }\n        else\n        {\n            e = a + b + c + d;\n        \
    \    a = b;\n            b = c;\n            c = d;\n            d = e;\n    \
    \    }\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeyus4rl4.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmpeyus4rl4.__unittest_L43_C1() [0x427a9c]

    ??:? void tmpeyus4rl4.__modtest() [0x427b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3)\n      \
    \  return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    foreach(i; 1 .. n-3)\n\
    \    {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpylqx7q98.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpylqx7q98.__unittest_L33_C1() [0x427a98]

    ??:? void tmpylqx7q98.__modtest() [0x427b10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    import std.bigint;\n\
    \    import std.range;\n    assert(n > 0);\n    auto a = BigInt(0), b = BigInt(0),\
    \ c = BigInt(2), d = BigInt(0);\n    foreach(i; iota(1, n)) \n    {\n        auto\
    \ t = d;\n        d = a + b + c + d;\n        a = b;\n        b = c;\n       \
    \ c = t;\n    }\n    return d.to!long;\n}\n/*\nPlease write a function that will\
    \ return the string that is the integer input in unary.\n    >>> unary(5)\n  \
    \  '11111'\n    >>> unary(3)\n    '111'\n*/\nstring unary(size_t n) \n{\n    return\
    \ std.string.repeat(\"1\", n);\n}\n/*\nGiven a string containing letters and numbers,\
    \ write a function that returns the letters in alphabetical order and the\nnumbers\
    \ in order from smallest to largest.\n    >>> everythingSort(\"n2Thi1s T4est 3a\"\
    )\n    'TaehisT sT1i2n3h4'\n    >>> everythingSort(\"Ea2sy 1Te2st\")\n    'EayEsTs1y2'\n\
    */\nstring everythingSort(string mixed) \n{\n    import std.algorithm;\n    import\
    \ std.conv;\n    auto digits = mixed.retro.filter!(a => a.isDigit).joiner;\n \
    \   auto letters = mixed.retro.filter!(a => a.isLetter).joiner;\n    return to!string(digits.array.sort.joiner)\
    \ ~ letters.array.sort.joiner;\n}\n/*\nWrite a function that sums the values of\
    \ a given array, iterating over the first element, skipping the second and\niterating\
    \ over the third, etc.\n    >>> sumEveryOther([6, 5, 2, 1, 8])\n    20\n    >>>\
    \ sumEveryOther([6, 2, 1, 8])\n    17\n*/\nunittest\n{\n    alias candidate =\
    \ fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuvjvg99p.d(33): Error: no property `to` for type `BigInt`

    /tmp/tmpuvjvg99p.d(44): Error: undefined identifier `string` in package `std`

    /tmp/tmpuvjvg99p.d(58): Error: no property `retro` for type `string`

    /tmp/tmpuvjvg99p.d(59): Error: no property `retro` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuvjvg99p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    //Tuple\n    Tuple!(long,\
    \ long, long, long) fib4 = tuple(0L, 0L, 2L, 0L);\n    //Tuple!(long, long, long,\
    \ long) fib4 = Tuple!(long, long, long, long)(0L, 0L, 2L, 0L);\n    //auto fib4\
    \ = tuple(0L, 0L, 2L, 0L);\n    long fib(long n)\n    {\n        //for (long i\
    \ = 0; i < n; i++)\n        while(n>0)\n        {\n            n--;\n        \
    \    /*\n            fib4[3] = fib4[2];\n            fib4[2] = fib4[1];\n    \
    \        fib4[1] = fib4[0];\n            fib4[0] = fib4[3] + fib4[2] + fib4[1]\
    \ + fib4[0];\n            */\n            fib4 = tuple(fib4[3], fib4[2], fib4[1],\
    \ fib4[0] + fib4[3] + fib4[2] + fib4[1]);\n        }\n        return fib4[0];\n\
    \    }\n    return fib(n);\n}\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6uul2rzq.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x428e7d]

    ??:? void tmp6uul2rzq.__unittest_L43_C1() [0x428224]

    ??:? void tmp6uul2rzq.__modtest() [0x4288e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da97]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4312cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43177c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431259]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c97d]

    ??:? runModuleUnitTests [0x42d86d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429358]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib = new long[5];\n\
    \    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n    fib[4]\
    \ = 1;\n    long a, b, c, d, e;\n    int i;\n    long[] sqrt5 = {2L, 3L};\n  \
    \  long[] minus1 = {0L, 1L};\n    long result;\n    sqrt5 = extendedEuclidean(sqrt5[0],\
    \ sqrt5[1]);\n    minus1 = extendedEuclidean(minus1[0], minus1[1]);\n    minus1[0]\
    \ *= -1;\n    for (i = 5; i <= n; i++) {\n        a = fib[i-1];\n        b = fib[i-2];\n\
    \        c = fib[i-3];\n        d = fib[i-4];\n        e = a + b + c + d;\n  \
    \      fib[4] = e;\n        fib[0] = fib[1];\n        fib[1] = fib[2];\n     \
    \   fib[2] = fib[3];\n        fib[3] = fib[4];\n    }\n    result = fib[4];\n\
    \    if (n % 2 == 0) {\n        result = (result * sqrt5[0]) % sqrt5[1];\n   \
    \ }\n    else {\n        result = (result * minus1[0]) % minus1[1];\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy1topu9f.d(29): Error: a struct is not a valid initializer for
    a `long[]`

    /tmp/tmpy1topu9f.d(30): Error: a struct is not a valid initializer for a `long[]`

    /tmp/tmpy1topu9f.d(32): Error: undefined identifier `extendedEuclidean`

    /tmp/tmpy1topu9f.d(33): Error: undefined identifier `extendedEuclidean`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy1topu9f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) \n    {\n\
    \        throw new IllegalArgumentException();\n    }\n    if (n < 2) \n    {\n\
    \        return 0;\n    }\n    if (n == 2) \n    {\n        return 2;\n    }\n\
    \    if (n == 3) \n    {\n        return 0;\n    }\n    long prev = 0;\n    long\
    \ prevprev = 0;\n    long prevprevprev = 0;\n    long prevprevprevprev = 0;\n\
    \    long fib = 0;\n    foreach (i; 1..n) \n    {\n        if (i == 1) \n    \
    \    {\n            fib = 0;\n        }\n        else if (i == 2) \n        {\n\
    \            fib = 2;\n        }\n        else if (i == 3) \n        {\n     \
    \       fib = 0;\n        }\n        else \n        {\n            fib = prev\
    \ + prevprev + prevprevprev + prevprevprevprev;\n        }\n        prevprevprevprev\
    \ = prevprevprev;\n        prevprevprev = prevprev;\n        prevprev = prev;\n\
    \        prev = fib;\n    }\n    return fib;\n}\n//BEGIN\nstatic assert(fib4(5L)\
    \ == 4L);\nstatic assert(fib4(6L) == 8L);\nstatic assert(fib4(7L) == 14L);\n//END\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwgmsvlnk.d(23): Error: undefined identifier `IllegalArgumentException`

    /tmp/tmpwgmsvlnk.d(68):        called from here: `fib4(5L)`

    /tmp/tmpwgmsvlnk.d(68):        while evaluating: `static assert(fib4(5L) == 4L)`

    /tmp/tmpwgmsvlnk.d(69): Error: CTFE failed because of previous errors in `fib4`

    /tmp/tmpwgmsvlnk.d(69):        while evaluating: `static assert(fib4(6L) == 8L)`

    /tmp/tmpwgmsvlnk.d(70): Error: CTFE failed because of previous errors in `fib4`

    /tmp/tmpwgmsvlnk.d(70):        while evaluating: `static assert(fib4(7L) == 14L)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwgmsvlnk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    long v = 0;\n    foreach\
    \ (int i; 0 .. n - 4) \n    {\n        v = a + b + c + d;\n        a = b;\n  \
    \      b = c;\n        c = d;\n        d = v;\n    }\n    return v;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1x1m73qn.d(25): Error: cannot implicitly convert expression `n
    - 4L` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1x1m73qn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    //Tuple!(int, int, int,\
    \ int) fib4 = tuple(0, 0, 2, 0);\n    //auto fib4 = [0, 0, 2, 0];\n    auto fib4\
    \ = [Tuple!(int, int, int, int)(0, 0, 2, 0)];\n    for (long i = 4; i <= n; i++)\n\
    \    {\n        //fib4 = tuple(fib4[1], fib4[2], fib4[3], fib4[0] + fib4[1] +\
    \ fib4[2] + fib4[3]);\n        //fib4 = [fib4[1], fib4[2], fib4[3], fib4[0] +\
    \ fib4[1] + fib4[2] + fib4[3]];\n        fib4 = [Tuple!(int, int, int, int)(fib4[1],\
    \ fib4[2], fib4[3], fib4[0] + fib4[1] + fib4[2] + fib4[3])];\n    }\n    return\
    \ fib4[3];\n}\n/*\n    >>> binomial_distribution(7, 2, 0.2)\n    0.324640L\n*/\n\
    real binomial_distribution(int n, int k, real p)\n{\n    real sum = 0;\n    for\
    \ (int i = k; i <= n; i++)\n    {\n        sum += combinadic(n, i) * p.pow(i)\
    \ * (1 - p).pow(n - i);\n    }\n    return sum;\n}\n//string \n/*\n    >>> binary_search(iota(10L),\
    \ 0, 10L, 5L)\n    true\n    >>> binary_search(iota(10L), 0, 10L, 11L)\n    false\n\
    */\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9k0goolt.d(28): Error: incompatible types for `(fib4[0]) + (fib4[1])`:
    both operands are of type `Tuple!(int, int, int, int)`

    /tmp/tmp9k0goolt.d(30): Error: cannot implicitly convert expression `fib4[3]`
    of type `Tuple!(int, int, int, int)` to `long`

    /tmp/tmp9k0goolt.d(41): Error: undefined identifier `combinadic`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9k0goolt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    immutable long[] v =\
    \ [0L, 0L, 2L, 0L];\n    if (n == 0 || n == 1 || n == 2 || n == 3)\n        return\
    \ v[n];\n    for (long i = 3; i <= n; i++)\n    {\n        v[3] = v[0] + v[1]\
    \ + v[2] + v[3];\n        v[0] = v[1];\n        v[1] = v[2];\n        v[2] = v[3];\n\
    \    }\n    return v[3];\n}\n/*\nAn anagram is a word that contains the same characters\
    \ as another word, but in a different order. For example, listen and silent are\
    \ anagrams.\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvhh1q_a9.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvhh1q_a9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    long a = 0, b = 0,\
    \ c = 2, d = 0, e; \n    if (n == 0) \n        return a; \n    for (long i = 2;\
    \ i <= n; i++) \n    { \n        e = (a + b + c + d); \n        a = b; \n    \
    \    b = c; \n        c = d; \n        d = e; \n    } \n    return d; \n}\n//Exercise\
    \ 2\n/*\nLongest Arithmetic Progression (Kadane's Algorithm)\nGiven a set of numbers,\
    \ find the Length of the Longest Arithmetic Progression (LLAP) in it.\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp35qvwz_o.d(35): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp35qvwz_o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    import std.range;\n\
    \    immutable low = [0L, 0L, 2L, 0L];\n    if (n < low.length) \n    {\n    \
    \    return low[n];\n    }\n    long a = 0L, b = 0L, c = 2L, d = 0L;\n    foreach\
    \ (i; 2 .. n) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\n/*\nThe Fib3 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib3(0) ->\
    \ 0\n    fib3(1) -> 0\n    fib3(2) -> 2\n    fib3(3) -> 0\n    fib3(n) -> fib3(n-1)\
    \ + fib3(n-2) + fib3(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fib3 number sequence.  Do not use recursion.\n    >>>\
    \ fib3(5L)\n    4L\n    >>> fib3(6L)\n    6L\n    >>> fib3(7L)\n    10L\n    \n\
    */\nlong fib3(long n) \n{\n    immutable low = [0L, 0L, 2L, 0L];\n    if (n <\
    \ low.length) \n    {\n        return low[n];\n    }\n    long a = 0L, b = 0L,\
    \ c = 2L;\n    foreach (i; 2 .. n) \n    {\n        c = a + b + c;\n        a\
    \ = b;\n        b = c;\n    }\n    return c;\n}\n/*\nPlease write a function to\
    \ efficiently compute the n-th element of the fib2 number sequence.  Do not use\
    \ recursion.\n    >>> fib2(5L)\n    3L\n    >>> fib2(6L)\n    5L\n    >>> fib2(7L)\n\
    \    8L\n    \n*/\nlong fib2(long n) \n{\n    immutable low = [0L, 1L, 1L, 2L];\n\
    \   \nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) ==\
    \ 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppu9b5_43.d(83): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppu9b5_43.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long temp = 0L;\n    long i\
    \ = 2L;\n    long result = 0L;\n    while (i <= n) \n    {\n        temp = a +\
    \ b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n\
    \        i = i + 1L;\n    }\n    result = temp;\n    return result;\n}\n/*\nconst\
    \ isMemoized = false;\nlong fib4(long n) \n{\n    long result = 0L;\n    long\
    \ a = 0L;\n    long b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long temp\
    \ = 0L;\n    long i = 2L;\n    if (isMemoized) \n    {\n        if (n == 0L) \n\
    \        {\n            result = 0L;\n        }\n        else if (n == 1L) \n\
    \        {\n            result = 0L;\n        }\n        else if (n == 2L) \n\
    \        {\n            result = 2L;\n        }\n        else if (n == 3L) \n\
    \        {\n            result = 0L;\n        }\n        else \n        {\n  \
    \          result = fib4(n - 1L) + fib4(n - 2L) + fib4(n - 3L) + fib4(n - 4L);\n\
    \        }\n    }\n    else \n    {\n        while (i <= n) \n        {\n    \
    \        temp = a + b + c + d;\n            a = b;\n            b = c;\n     \
    \       c = d;\n            d = temp;\n            i = i + 1L;\n        }\n  \
    \      result = temp;\n    }\n    return result;\n}\n*/\n/*\nThe Fib5 number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(\nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3cqi56cl.d(90): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3cqi56cl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    return 0;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg9quj3m8.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d15]

    ??:? void tmpg9quj3m8.__unittest_L23_C1() [0x427a1c]

    ??:? void tmpg9quj3m8.__modtest() [0x427a94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a8ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42f9ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]

    ??:? runModuleUnitTests [0x42b811]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428164]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163162
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    int fib_0 = 0;\n   \
    \ int fib_1 = 0;\n    int fib_2 = 2;\n    int fib_3 = 0;\n    if (n < 4)\n   \
    \ {\n        return n;\n    }\n    for (int i = 4; i <= n; i++)\n    {\n     \
    \   int fib_4 = fib_0 + fib_1 + fib_2 + fib_3;\n        fib_0 = fib_1;\n     \
    \   fib_1 = fib_2;\n        fib_2 = fib_3;\n        fib_3 = fib_4;\n    }\n  \
    \  return fib_3;\n}\n/*\nImplement a function that recursively reverses a list.\n\
    \    >>> rev([1,2,3,4,5])\n    [5,4,3,2,1]\n    >>> rev([])\n    []\n    >>> rev([1])\n\
    \    [1]\n*/\nT[] rev(T)(T[] input)\n{\n    if (input.length == 0)\n    {\n  \
    \      return input;\n    }\n    else\n    {\n        return input[input.length\
    \ - 1] ~ rev(input[0 .. input.length - 1]);\n    }\n}\n/*\nFor the following problem,\
    \ create an object-oriented solution.\n    Write a class called RationalNumber\
    \ which represents a fraction in the form:  numerator/denominator, where both\
    \ the numerator and denominator are integers.  The class should provide a constructor\
    \ which takes the numerator and denominator as int parameters.  The class should\
    \ provide a method multiply that takes another RationalNumber object and returns\
    \ a new RationalNumber object which is the product of the current object and the\
    \ argument object.  The multiply method should not change the current object.\n\
    */\nclass RationalNumber\n{\n    private int numerator;\n    private int denominator;\n\
    \    this(int numerator, int denominator)\n    {\n        this.numerator = numerator;\n\
    \        this.denominator = denominator;\n    }\n    RationalNumber multiply(RationalNumber\
    \ other)\n    {\n        return new RationalNumber(this.numerator * other.numerator,\
    \ this.denominator * other.denominator);\n    }\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0L)\n     \
    \   return 0L;\n    else if (n == 1L)\n        return 0L;\n    else if (n == 2L)\n\
    \        return 2L;\n    else if (n == 3L)\n        return 0L;\n    else\n   \
    \ {\n        /*\n        We are using a custom array type here because it makes\
    \ programming\n        simpler, we can use all the array functions including array\
    \ slicing\n        and we can define our own functions to fill up the array and\
    \ to\n        assign values.\n        */\n        auto fib4Values = appender!(ValueArray!(long))();\n\
    \        fillFib4Values(fib4Values, n);\n        return fib4Values[n - 1L];\n\
    \    }\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9aui5p35.d(37): Error: template instance `appender!(ValueArray!long)`
    template `appender` is not defined

    /tmp/tmp9aui5p35.d(38): Error: undefined identifier `fillFib4Values`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9aui5p35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \nin {\n    assert(n >= 0L);\n\
    }\nout (result) {\n    assert(result >= 0L);\n}\nbody {\n \n}\nunittest\n{\n \
    \   alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8zdnyjy.d(19): Error: function `tmpf8zdnyjy.fib4` has no `return`
    statement, but is expected to return a value of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8zdnyjy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tif (n < 0)\n\t\treturn\
    \ -1;\n\tif (n == 0)\n\t\treturn 0;\n\tlong fib4_0 = 0;\n\tlong fib4_1 = 0;\n\t\
    long fib4_2 = 2;\n\tlong fib4_3 = 0;\n\tlong fib4_n = 0;\n\tfor (int i = 4; i\
    \ <= n; i++)\n\t{\n\t\tfib4_n = fib4_0 + fib4_1 + fib4_2 + fib4_3;\n\t\tfib4_0\
    \ = fib4_1;\n\t\tfib4_1 = fib4_2;\n\t\tfib4_2 = fib4_3;\n\t\tfib4_3 = fib4_n;\n\
    \t}\n\treturn fib4_n;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    auto cache = array!(typeof(return))(100);\n\
    \    cache[0] = 0;\n    cache[1] = 0;\n    cache[2] = 2;\n    cache[3] = 0;\n\
    \    for(long i = 4; i <= n; i++)\n    {\n        cache[i] = cache[i-1] + cache[i-2]\
    \ + cache[i-3] + cache[i-4];\n    }\n    return cache[n];\n}\nunittest\n{\n  \
    \  alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzqxlibht.d(21): Error: template instance `array!(typeof(return))`
    template `array` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzqxlibht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n    if (n < 4L) \n        return\
    \ n;\n    auto fibList = new long[4L];\n    fibList[0L] = 0L;\n    fibList[1L]\
    \ = 0L;\n    fibList[2L] = 2L;\n    fibList[3L] = 0L;\n    long i = 4L;\n    while\
    \ (i <= n) \n    {\n        fibList[0L] = fibList[1L] + fibList[2L] + fibList[3L];\n\
    \        fibList[1L] = fibList[2L];\n        fibList[2L] = fibList[3L];\n    \
    \    fibList[3L] = fibList[0L];\n        i++;\n    }\n    return fibList[0L];\n\
    }\n/*\nThe lrs algorithm.  Given a string, return the longest repeat string.\n\
    \    >>> lrs(\"ABCBCDEF\")\n    \"BC\"\n    >>> lrs(\"ABCBCDEFBCDEFABCBCDEFB\"\
    )\n    \"BCDEF\"\n    >>> lrs(\"ABCDEFABCBCDEFB\")\n    \"BCDEF\"\n    >>> lrs(\"\
    ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDE\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuexvutno.d(20): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmpuexvutno.d(20): Error: declaration expected, not `if`

    /tmp/tmpuexvutno.d(23): Error: no identifier for declarator `fibList[0L]`

    /tmp/tmpuexvutno.d(23): Error: declaration expected, not `=`

    /tmp/tmpuexvutno.d(24): Error: no identifier for declarator `fibList[1L]`

    /tmp/tmpuexvutno.d(24): Error: declaration expected, not `=`

    /tmp/tmpuexvutno.d(25): Error: no identifier for declarator `fibList[2L]`

    /tmp/tmpuexvutno.d(25): Error: declaration expected, not `=`

    /tmp/tmpuexvutno.d(26): Error: no identifier for declarator `fibList[3L]`

    /tmp/tmpuexvutno.d(26): Error: declaration expected, not `=`

    /tmp/tmpuexvutno.d(28): Error: declaration expected, not `while`

    /tmp/tmpuexvutno.d(31): Error: no identifier for declarator `fibList[1L]`

    /tmp/tmpuexvutno.d(31): Error: declaration expected, not `=`

    /tmp/tmpuexvutno.d(32): Error: no identifier for declarator `fibList[2L]`

    /tmp/tmpuexvutno.d(32): Error: de'
  stdout: ''
  timestamp: 1660163162
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // Take care of the\
    \ edge cases\n    if (n < 4) \n    {\n        return ((n < 2) ? 0 : 2);\n    }\n\
    \    // Use a tuple to keep track of the last 4 numbers\n    auto prev = tuple(0L,\
    \ 0L, 2L, 0L);\n    for (int i = 4; i <= n; i++) \n    {\n        // This is equivalent\
    \ to adding the first 4 numbers\n        auto sum = prev[0] + prev[1] + prev[2]\
    \ + prev[3];\n        // Shift the numbers over one\n        prev[0] = prev[1];\n\
    \        prev[1] = prev[2];\n        prev[2] = prev[3];\n        prev[3] = sum;\n\
    \    }\n    return prev[3];\n}\nunittest\n{\n    alias candidate = fib4;\n\n \
    \   assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    n = n + 3;\n    enum\
    \ a = 0;\n    enum b = 0;\n    enum c = 2;\n    enum d = 0;\n    enum elem = 0;\n\
    \    enum t;\n    foreach(i; 0..n)\n    {\n        t = a + b + c + d;\n      \
    \  a = b;\n        b = c;\n        c = d;\n        d = t;\n        if(i == n -\
    \ 1)\n        {\n            elem = t;\n        }\n    }\n    return elem;\n}\n\
    /*\n    Please write a function to efficiently compute the m-th element of the\
    \ Lucas number sequence.  Do not use recursion.\n    >>> lucas(5L)\n    11L\n\
    \    >>> lucas(6L)\n    18L\n    >>> lucas(7L)\n    29L\n*/\nlong lucas(long m)\
    \ \n{\n    m = m + 2;\n    enum a = 2;\n    enum b = 1;\n    enum elem = 0;\n\
    \    enum t;\n    foreach(i; 0..m)\n    {\n        t = a + b;\n        a = b;\n\
    \        b = t;\n        if(i == m - 1)\n        {\n            elem = t;\n  \
    \      }\n    }\n    return elem;\n}\n/*\n    Please write a function to efficiently\
    \ compute the n-th element of the Fibbonacci sequence.  Do not use recursion.\n\
    \    >>> fib(5L)\n    5L\n    >>> fib(6L)\n    8L\n    >>> fib(7L)\n    13L\n\
    */\nlong fib(long n) \n{\n    n = n + 2;\n    enum a = 0;\n    enum b = 1;\n \
    \   enum elem = 0;\n    enum t;\n    foreach(i; 0..n)\n    {\n        t = a +\
    \ b;\n        a = b;\n        b = t;\n        if(i == n - 1)\n        {\n    \
    \        elem = t;\n        }\n    }\n    return elem;\n}\n/*\n    Please write\
    \ a function to efficiently compute the\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp67ztx_b_.d(98): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp67ztx_b_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tlong a = 0L;\n\tlong b\
    \ = 0L;\n\tlong c = 2L;\n\tlong d = 0L;\n\tif (n == 0L)\n\t\treturn 0L;\n\tif\
    \ (n == 1L)\n\t\treturn 0L;\n\tif (n == 2L)\n\t\treturn 2L;\n\tif (n == 3L)\n\t\
    \treturn 0L;\n\tfor (auto i = 3L; i < n; i++)\n\t{\n\t\td = a + b + c;\n\t\ta\
    \ = b;\n\t\tb = c;\n\t\tc = d;\n\t}\n\treturn d;\n}\n/*\nIt was a dark and stormy\
    \ night. You are driving your car on a narrow country road when you suddenly realize\
    \ that you are lost.  You stop the car, get out, and look around for a landmark,\
    \ but all you can see is a sign reading \"Welcome to Nodeville.\"  You get back\
    \ in the car and decide to try to follow one of the roads out of town.  However,\
    \ there are three possible roads leading out of town, and only one of them will\
    \ take you to the highway that will take you home.  The other two are both dead\
    \ ends.  It's too dark to read the signposts to determine which is which.\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeagup97a.d(42): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeagup97a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n <= 1) \n    \
    \    return n; \n    else if (n <= 3)\n        return 2;\n    long F[4] = {0,\
    \ 0, 2, 0}; \n    for (int i = 4; i <= n; i++) \n    { \n        F[i % 4] = F[(i\
    \ - 1) % 4] + F[(i - 2) % 4] + F[(i - 3) % 4] + F[(i - 4) % 4]; \n    } \n   \
    \ return F[n % 4]; \n}\n/*\nWrite a function to find the first element of the\
    \ list that repeats an odd number of times. \nIf no element repeats an odd number\
    \ of times then the function should return null.\n    >>> findOdd([1, 2, 3, 4,\
    \ 1, 3, 3, 4, 5, 6, 7, 5, 6, 7, 1, 8, 9, 10, 8, 10, 8, 1])\n    1\n    >>> findOdd([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    null\n*/\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy1g1fd4k.d(25): Deprecation: instead of C-style syntax, use D-style
    syntax `long[4] F`

    /tmp/tmpy1g1fd4k.d(25): Error: a struct is not a valid initializer for a `long[4]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy1g1fd4k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    import std.algorithm\
    \ : reduce;\n    import std.range : iota;\n    if (n < 4) \n        return (iota(n)\n\
    \                .map!(a => if (a < 3) a else a + 1)\n                .reduce!((a,\
    \ b) => a * b)\n               );\n    //long fib4(long n) {\n    //if (n < 4)\n\
    \    //return n < 3 ? n : n + 1;\n    n = n - 4;\n    long a, b, c, d;\n    a\
    \ = 1;\n    b = 2;\n    c = 4;\n    d = 8;\n    while (n--) {\n        d = d +\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcd3m88e_.d(25): Error: expression expected, not `if`

    /tmp/tmpcd3m88e_.d(25): Error: found `a` when expecting `)` following template
    argument list

    /tmp/tmpcd3m88e_.d(24): Error: found `else` when expecting `)`

    /tmp/tmpcd3m88e_.d(25): Error: found `a` when expecting `;` following `return`
    statement

    /tmp/tmpcd3m88e_.d(25): Error: found `)` when expecting `;` following statement

    /tmp/tmpcd3m88e_.d(27): Error: found `)` when expecting `;` following statement

    /tmp/tmpcd3m88e_.d(27): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcd3m88e_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \nin {\n    assert(n >= 0L);\n\
    }\nout (result) {\n    assert(result >= 0L);\n}\nbody {\n    assert(n >= 0L);\n\
    \    static real2 u = real2(1.0, 0.0);\n    static real2 v = real2(0.0, 1.0);\n\
    \    assert(u.x == 1.0);\n    assert(u.y == 0.0);\n    assert(v.x == 0.0);\n \
    \   assert(v.y == 1.0);\n    long r;\n    real2 m;\n    assert(n >= 0L);\n   \
    \ switch (n) {\n        case 0L: \n            r = 0L;\n            break;\n \
    \       case 1L: \n            r = 0L;\n            break;\n        case 2L: \n\
    \            r = 2L;\n            break;\n        case 3L: \n            r = 0L;\n\
    \            break;\n        default: \n            m = pow(real2(1.0, 1.0), real2(0.0,\
    \ 1.0), n - 3L);\n            r = (real2(1.0, 1.0) * m * v).x;\n            break;\n\
    \    }\n    return r;\n}\n/*\n    >>> fib4(0L)\n    0L\n    >>> fib4(1L)\n   \
    \ 0L\n    >>> fib4(2L)\n    2L\n    >>> fib4(3L)\n    0L\n    >>> fib4(4L)\n \
    \   2L\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>> fib4(7L)\n\
    \    14L\n    >>> fib4(8L)\n    26L\n    >>> fib4(9L)\n    50L\n    >>> fib4(10L)\n\
    \    94L\n    >>> fib4(11L)\n    178L\n    >>> fib4(12L)\n    336L\n    >>> fib4(13L)\n\
    \    644L\n    >>> fib4(14L)\n    1240L\n    >>> fib4(15L)\n    23\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpno4zdyfl.d(57): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpno4zdyfl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    //Precondition.requires(n\
    \ > 0, \"n must be positive\");\n    //Precondition.requires(n <= 46, \"n must\
    \ be less than or equal to 46\");\n    /*Struct(long a, long b, long c, long d)*/\n\
    \    auto s = Struct(0L, 0L, 2L, 0L);\n    auto i = 0L;\n    auto result = 0L;\n\
    \    auto nextTuple = Struct(0L, 0L, 0L, 0L);\n    while (i < n) \n    {\n   \
    \     result = s.a + s.b + s.c + s.d;\n        nextTuple = Struct(s.b, s.c, s.d,\
    \ result);\n        s = nextTuple;\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2j6syq2.d(24): Error: undefined identifier `Struct`

    /tmp/tmpu2j6syq2.d(27): Error: undefined identifier `Struct`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2j6syq2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n == 0L) \n   \
    \     return 0L; \n  \n    long f0 = 0L, f1 = 0L, f2 = 2L, f3 = 0L, sum = 2L;\
    \ \n    for (long i = 4L; i <= n; i++) \n    { \n        f3 = f0 + f1 + f2 + f3;\
    \ \n        sum += f3; \n        f0 = f1; \n        f1 = f2; \n        f2 = f3;\
    \ \n    } \n    return sum; \n} \nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9rojbwah.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmp9rojbwah.__unittest_L35_C1() [0x427a9c]

    ??:? void tmp9rojbwah.__modtest() [0x427b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) \n    {\n\
    \        return -1;\n    }\n    // the result cannot fit in an int, so we use\
    \ a long for our intermediate results\n    auto long_infinity = tuple(appender!(long[]),\
    \ appender!(long[]));\n    long_infinity[0].put(0L);\n    long_infinity[1].put(1L);\n\
    \    auto a = Tuple!(long,long)(0L,0L);\n    auto b = Tuple!(long,long)(0L,0L);\n\
    \    auto c = Tuple!(long,long)(0L,0L);\n    auto d = Tuple!(long,long)(0L,0L);\n\
    \    auto e = Tuple!(long,long)(0L,0L);\n    auto f = Tuple!(long,long)(0L,0L);\n\
    \    // start with our 5x5 identity matrix\n    auto m = Tuple!(Tuple!(long,long),\
    \ Tuple!(long,long), Tuple!(long,long), Tuple!(long,long), Tuple!(long,long))\n\
    \    (\n        Tuple!(long,long)(1L,0L),\n        Tuple!(long,long)(0L,0L),\n\
    \        Tuple!(long,long)(0L,0L),\n        Tuple!(long,long)(0L,0L),\n      \
    \  Tuple!(long,long)(0L,0L)\n    );\n    // multiply our matrix n times\n    for\
    \ (size_t i = 0; i < n; i++) \n    {\n        // use an arbitrarily large type\
    \ to avoid overflow\n        c = add(add(m[0], m[1]), add(m[2], m[3]));\n    \
    \    d = add(m[1], m[2]);\n        e = add(m[0], m[3]);\n        f = add(add(m[0],\
    \ m[1]), add(m[2], m[3]));\n        a = add(m[0], m[1]);\n        b = add(m[0],\
    \ m[3]);\n        m = Tuple\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpee1r_ksk.d(55): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpee1r_ksk.d(64): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpee1r_ksk.d(64): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpee1r_ksk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \nin \n{\n    assert(n >= 0);\n\
    }\nbody \n{\n    long fib4Numbers[] = [0L, 0L, 2L, 0L];\n    auto remainder =\
    \ n % 4L;\n    auto quotient = n / 4L;\n    if (remainder == 0L)\n    {\n    \
    \    return quotient * fib4Numbers[3L];\n    }\n    else \n    {\n        return\
    \ fib4(n - 1L) + fib4(n - 2L) + fib4(n - 3L) + fib4(n - 4L);\n    }\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: '/tmp/tmpqqdwn65n.d(26): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] fib4Numbers`

    /tmp/tmpqqdwn65n.d(26): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] fib4Numbers`

    core.exception.AssertError@/tmp/tmpqqdwn65n.d(22): Assertion failure

    ----------------

    ??:? _d_assertp [0x42811d]

    ??:? long tmpqqdwn65n.fib4(long) [0x427d27]

    ??:? long tmpqqdwn65n.fib4(long) [0x427deb]

    ??:? long tmpqqdwn65n.fib4(long) [0x427dd7]

    ??:? long tmpqqdwn65n.fib4(long) [0x427dd7]

    ??:? long tmpqqdwn65n.fib4(long) [0x427deb]

    ??:? void tmpqqdwn65n.__unittest_L38_C1() [0x427e3d]

    ??:? void tmpqqdwn65n.__modtest() [0x427ecc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430285]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430734]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430211]

    ??:? int object.ModuleInfo.'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n  import std.math;\n  import\
    \ std.typecons;\n  long[] fib = [0L, 0L, 2L, 0L];\n  alias F = long[];\n  F[]\
    \ fibs = [fib];\n  long i = 2L;\n  while (i <= n)\n  {\n    auto tmp = F(4);\n\
    \    foreach (idx, ref val; tmp)\n    {\n      foreach (j; 0 .. idx)\n      {\n\
    \        auto len = fibs.length;\n        tmp[idx] += fibs[$-1][j] * fibs[len\
    \ - 1][idx - j];\n      }\n    }\n    fibs ~= tmp;\n    i += 1L;\n  }\n  return\
    \ fibs[$-1][0];\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpprczwpfc.d(29): Error: function expected before `()`, not `long[]`
    of type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpprczwpfc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n  int tail = 0;\n  int head\
    \ = 1;\n  int result = 0;\n  for (auto i = 0; i < n; i++) \n  {\n    auto temp\
    \ = tail;\n    tail = head;\n    head = head + result;\n    result = temp;\n \
    \ }\n  return result;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpchk2w_7g.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpchk2w_7g.__unittest_L33_C1() [0x427a64]

    ??:? void tmpchk2w_7g.__modtest() [0x427adc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \nin {\n\tassert(n >= 0L);\n\
    }\nout {\n\tassert(return >= 0L);\n}\nbody {\n\tif (n < 4L) {\n\t\treturn n;\n\
    \t}\n\tlong n_2 = 0L;\n\tlong n_1 = 0L;\n\tlong n_3 = 2L;\n\tlong n_4 = 0L;\n\t\
    long nth_fib = 0L;\n\tlong i = 4L;\n\twhile (i <= n) {\n\t\tnth_fib = n_1 + n_2\
    \ + n_3 + n_4;\n\t\tn_4 = n_3;\n\t\tn_3 = n_2;\n\t\tn_2 = n_1;\n\t\tn_1 = nth_fib;\n\
    \t\ti = i + 1L;\n\t}\n\treturn nth_fib;\n}\nunittest\n{\n    alias candidate =\
    \ fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa419dun6.d(24): Error: expression expected, not `return`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa419dun6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n    if (n < 0L) {\n       \
    \ return -1L;\n    } else if (n == 0L) {\n        return 0L;\n    } else if (n\
    \ == 1L) {\n        return 0L;\n    } else if (n == 2L) {\n        return 2L;\n\
    \    } else if (n == 3L) {\n        return 0L;\n    } else {\n        static Tuple!(long,\
    \ long, long, long) fib = Tuple!(long, long, long, long)(0L, 0L, 2L, 0L);\n  \
    \      static long i = 4L;\n        while (i <= n) {\n            auto a = fib[0];\n\
    \            auto b = fib[1];\n            auto c = fib[2];\n            auto\
    \ d = fib[3];\n            fib = Tuple!(long, long, long, long)(b, c, d, a + b\
    \ + c + d);\n            i++;\n        }\n        return fib[3];\n    }\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8m2p3d2_.d(20): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmp8m2p3d2_.d(20): Error: declaration expected, not `if`

    /tmp/tmp8m2p3d2_.d(22): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8m2p3d2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] memo = new long[n+1];\n\
    \    int v = n;\n    for(int i = 0; i < v; i++)\n    {\n        if(i == 0 || i\
    \ == 1)\n        {\n            memo[i] = 0;\n        }\n        else if(i ==\
    \ 2)\n        {\n            memo[i] = 2;\n        }\n        else if(i == 3)\n\
    \        {\n            memo[i] = 0;\n        }\n        else\n        {\n   \
    \         memo[i] = memo[i-1] + memo[i-2] + memo[i-3] + memo[i-4];\n        }\n\
    \    }\n    return memo[v-1];\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_s2n3nvc.d(22): Error: cannot implicitly convert expression `n`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_s2n3nvc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n    {\n\
    \        return -1;\n    }\n    else if (n == 0 || n == 1)\n    {\n        return\
    \ 0;\n    }\n    else if (n == 2)\n    {\n        return 2;\n    }\n    else if\
    \ (n == 3)\n    {\n        return 0;\n    }\n    else\n    {\n        long a =\
    \ 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n        long\
    \ result = 0;\n        foreach (long i; 0 .. n-3)\n        {\n            result\
    \ = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n\
    \            d = result;\n        }\n        return result;\n    }\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return (n == 2 ? 2 : 0);\n    else\n    {\n        auto result = long[4];\n\
    \        result[0] = 0;\n        result[1] = 0;\n        result[2] = 2;\n    \
    \    result[3] = 0;\n        for (auto i = 4; i <= n; i++)\n        {\n      \
    \      result[0] = result[1];\n            result[1] = result[2];\n          \
    \  result[2] = result[3];\n            result[3] = result[0] + result[1] + result[2]\
    \ + result[3];\n        }\n        return result[3];\n    }\n}\nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnan6nt61.d(25): Error: found `[` when expecting `.` following long

    /tmp/tmpnan6nt61.d(25): Error: found `4` when expecting identifier following `long`.

    /tmp/tmpnan6nt61.d(25): Error: semicolon expected following auto declaration,
    not `]`

    /tmp/tmpnan6nt61.d(25): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnan6nt61.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long n1 = 0;\n    long\
    \ n2 = 0;\n    long n3 = 2;\n    long n4 = 0;\n    long i = 0;\n    long n5 =\
    \ 0;\n    while (i <= n)\n    {\n        n5 = n1 + n2 + n3 + n4;\n        n1 =\
    \ n2;\n        n2 = n3;\n        n3 = n4;\n        n4 = n5;\n        i++;\n  \
    \  }\n    return n1;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphupg89s_.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmphupg89s_.__unittest_L38_C1() [0x427a84]

    ??:? void tmphupg89s_.__modtest() [0x427afc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    n = n.abs;\n    if (n\
    \ < 3)\n        return n * 2;\n    long a = 0;\n    long b = 0;\n    long c =\
    \ 2;\n    long d = 2;\n    long e = 0;\n    size_t m = (n - 3) % 4;\n    foreach(i;\
    \ 1..(n - 3) / 4)\n    {\n        e = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = e;\n    }\n    switch(m)\n    {\n      \
    \  case 0:\n            return e;\n        case 1:\n            return d;\n  \
    \      case 2:\n            return c;\n        case 3:\n            return b;\n\
    \    }\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9a1fd873.d(38): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9a1fd873.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n==0) \n      \
    \  return 0; \n    else if (n==1) \n        return 0; \n    else if (n==2) \n\
    \        return 2; \n    else if (n==3) \n        return 0; \n    else if (n==4)\
    \ \n        return 2; \n    else\n    { \n        long a=0,b=0,c=2,d=2,res=0;\
    \ \n        for (long i=5;i<=n;i++) \n        { \n            res=a+b+c+d; \n\
    \            a=b; \n            b=c; \n            c=d; \n            d=res; \n\
    \        } \n        return res; \n    } \n} \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi17uxndv.d(50): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpi17uxndv.__unittest_L45_C1() [0x427b05]

    ??:? void tmpi17uxndv.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // recursion is wasteful,\
    \ since many numbers will be repeated\n    // we can use a big array to store\
    \ the nth fibonacci numbers\n    // but we only need the previous four, so we\
    \ can just use these\n    // but we need to keep track of the index, which is\
    \ i\n    long i = 0L;\n    long fib4PrevPrevPrev = 0L;\n    long fib4PrevPrev\
    \ = 0L;\n    long fib4Prev = 2L;\n    long fib4Curr = 0L;\n    // make sure the\
    \ index is in bounds\n    if (n >= 0L) \n    {\n        // loop through the sequence\n\
    \        for (; i < n; i++) \n        {\n            // compute the nth fibonacci\
    \ number\n            fib4Curr = fib4PrevPrevPrev + fib4PrevPrev + fib4Prev;\n\
    \            // update the numbers\n            fib4PrevPrevPrev = fib4PrevPrev;\n\
    \            fib4PrevPrev = fib4Prev;\n            fib4Prev = fib4Curr;\n    \
    \    }\n    }\n    return fib4Curr;\n}\n/*\nWrite a program that determines the\
    \ number of positive integers, less than or equal to N, that have no leading zeros.\n\
    \    >>> noLeadingZeros(10L)\n    10L\n    >>> noLeadingZeros(9L)\n    9L\n  \
    \  >>> noLeadingZeros(8L)\n    8L\n    >>> noLeadingZeros(7L)\n    7L\n    >>>\
    \ noLeadingZeros(6L)\n    6L\n    >>> noLeadingZeros(5L)\n    5L\n    >>> noLeadingZeros(4L)\n\
    \    4L\n    >>> noLeadingZeros(3L)\n    3L\n    >>> noLeadingZeros(2L)\n    2L\n\
    \    >>> noLeadingZeros(1L)\n    1L\n    >>> noLeadingZeros(0L)\n    1L\n*/\n\
    long noLeadingZeros(long n) \n{\n    // start count at one, since we know 1 will\
    \ be in the list\n    long count = 1L;\n    // go through each number and check\
    \ for leading zeros\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp09se5hgj.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp09se5hgj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) return -1;\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return\
    \ 2;\n    if (n == 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 2;\n    long d = 0;\n    long temp = 0;\n    for (long i = 4; i <= n; i++)\
    \ {\n        temp = d;\n        d = d + c + b + a;\n        a = b;\n        b\
    \ = c;\n        c = temp;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n == 0L) \n   \
    \     return 0L; \n    if (n == 1L) \n        return 0L; \n    if (n == 2L) \n\
    \        return 2L; \n    if (n == 3L) \n        return 0L; \n  \n    long a =\
    \ 0L; \n    long b = 0L; \n    long c = 2L; \n    long d = 0L; \n  \n    for (long\
    \ i = 3L; i <= n; i++) \n    { \n        long t = d; \n        d = a + b + c +\
    \ d; \n        a = b; \n        b = c; \n        c = t; \n    } \n    return d;\
    \ \n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) ==\
    \ 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd486x1hg.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpd486x1hg.__unittest_L45_C1() [0x427ac8]

    ??:? void tmpd486x1hg.__modtest() [0x427b40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long e = 0L;\n    int index\
    \ = 3;\n    if (n <= 2) {\n        return n;\n    }\n    while (index <= n) {\n\
    \        e = d;\n        d = c;\n        c = b;\n        b = a;\n        a = e\
    \ + d + c + b;\n        index++;\n    }\n    return a;\n}\n/*\nunittest\n{\n \
    \   alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprv71negq.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprv71negq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\t\n\treturn 0;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg8g9fx9r.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d15]

    ??:? void tmpg8g9fx9r.__unittest_L24_C1() [0x427a1c]

    ??:? void tmpg8g9fx9r.__modtest() [0x427a94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a8ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42f9ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]

    ??:? runModuleUnitTests [0x42b811]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428164]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n==0) return 0;\n\
    \    if (n==1) return 0;\n    if (n==2) return 2;\n    if (n==3) return 0;\n \
    \   //assume n >= 4\n    auto result = tuple(long, long, long, long)(0, 0, 2,\
    \ 0);\n    auto temp = tuple(long, long, long, long)(0, 0, 0, 0);\n    for (auto\
    \ i = 4; i <= n; i++)\n    {\n        //result += temp\n        temp[0] = result[0];\n\
    \        temp[1] = result[1];\n        temp[2] = result[2];\n        temp[3] =\
    \ result[3];\n        result[0] += temp[0];\n        result[1] += temp[1];\n \
    \       result[2] += temp[2];\n        result[3] += temp[3];\n    }\n    return\
    \ result[0] + result[1] + result[2] + result[3];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6z7qg0pk.d(26): Error: found `,` when expecting `.` following long

    /tmp/tmp6z7qg0pk.d(26): Error: found `long` when expecting identifier following
    `long`.

    /tmp/tmp6z7qg0pk.d(26): Error: found `,` when expecting `.` following long

    /tmp/tmp6z7qg0pk.d(26): Error: found `long` when expecting identifier following
    `long`.

    /tmp/tmp6z7qg0pk.d(27): Error: found `,` when expecting `.` following long

    /tmp/tmp6z7qg0pk.d(27): Error: found `long` when expecting identifier following
    `long`.

    /tmp/tmp6z7qg0pk.d(27): Error: found `,` when expecting `.` following long

    /tmp/tmp6z7qg0pk.d(27): Error: found `long` when expecting identifier following
    `long`.

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z7qg0pk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 3) return n;\n\
    \    if (n == 3) return 0;\n    auto t = tuple(0L, 0L, 2L, 0L);\n    n -= 3;\n\
    \    while (n-- > 0)\n    {\n        t = tuple(t[1], t[2], t[3], t[0] + t[1] +\
    \ t[2] + t[3]);\n    }\n    return t[3];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    assert(n >= 0);\n  \
    \  long ret = 0;\n    if (n <= 4)\n        ret = long((n >> 1) << (n & 1));\n\
    \    else \n    {\n        n -= 4;\n        long a = 0, b = 0, c = 2, d = 0;\n\
    \        while (n != 0) \n        {\n            switch (n & 3) \n           \
    \ {\n                case 0:\n                    c = a + c;\n               \
    \     d = b + d;\n                    break;\n                case 1:\n      \
    \              c = a + c;\n                    d = b + d;\n                  \
    \  ret += d;\n                    break;\n                case 2:\n          \
    \          c = a + c;\n                    d = b + d;\n                    ret\
    \ += c;\n                    break;\n                case 3:\n               \
    \     c = a + c;\n                    d = b + d;\n                    ret += c\
    \ + d;\n                    break;\n            }\n            a = b;\n      \
    \      b = c;\n            c = d;\n            d = 0;\n            n >>= 2;\n\
    \        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzg02h4rc.d(31): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzg02h4rc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n==0) return 0;\n\
    \    if (n==1) return 0;\n    if (n==2) return 2;\n    if (n==3) return 0;\n \
    \   long f4 = 0, f3 = 0, f2 = 2, f1 = 0;\n    foreach(i; 4 .. n+1) {\n       \
    \ f4 = f3 + f2 + f1 + f4;\n        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n\
    \    }\n    return f4;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptp3ec_ef.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmptp3ec_ef.__unittest_L34_C1() [0x427ad0]

    ??:? void tmptp3ec_ef.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    enum long z = 0L;\n\
    \    enum long o = 1L;\n    enum long t = 2L;\n    enum long f = 3L;\n    long\
    \ temp;\n    long result = 0L;\n    if (n == 0L)\n    {\n        return z;\n \
    \   }\n    else if (n == 1L)\n    {\n        return o;\n    }\n    else if (n\
    \ == 2L)\n    {\n        return t;\n    }\n    else if (n == 3L)\n    {\n    \
    \    return f;\n    }\n    else\n    {\n        result = o;\n        for (long\
    \ i = 2L; i < n; i++)\n        {\n            temp = z;\n            z = o;\n\
    \            o = t;\n            t = f;\n            f = temp + o + t + f;\n \
    \           result = f;\n        }\n        return result;\n    }\n}\n/*\nThe\
    \ Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's\
    \ defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n\
    \    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    \    Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n\
    \    8L\n    >>> fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    enum\
    \ long z = 0L;\n    enum long o = 1L;\n    enum long t = 2L;\n    enum long f\
    \ = 3L;\n    long temp;\n    long result = 0L;\n    if (n == 0L)\n    {\n    \
    \    return z;\n    }\n    else if (n == 1L)\n    {\n        return o;\n    }\n\
    \    else if (n == 2L)\n    {\n        return t;\n\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3huycp71.d(94): Error: found `unittest` instead of statement

    /tmp/tmp3huycp71.d(103): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3huycp71.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    struct Fib4 {\n    \
    \    long curr, prev;\n        static Fib4 opCall(in Fib4 a, in Fib4 b) {\n  \
    \          return Fib4(a.curr + b.curr + a.prev + b.prev, a.curr);\n        }\n\
    \    }\n    auto fib4 = Fibo!(Fib4)(Fib4(0, 0), Fib4(0, 2));\n    return fib4[n].curr;\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg4hw716z.d(24): Error: function `tmpg4hw716z.fib4.Fib4.opCall(const(Fib4)
    a, const(Fib4) b)` is not callable using argument types `(const(long), const(long))`

    /tmp/tmpg4hw716z.d(24):        cannot pass argument `a.curr + b.curr + a.prev
    + b.prev` of type `const(long)` to parameter `const(Fib4) a`

    /tmp/tmpg4hw716z.d(27): Error: template instance `Fibo!Fib4` template `Fibo` is
    not defined, did you mean Fib4?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg4hw716z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n < 0) \n     \
    \   return 0; \n  \n    auto a = 0, b = 0, c = 2, d = 0; \n    for (auto i = 3;\
    \ i <= n; i++) \n    { \n        auto sum = a + b + c + d; \n        a = b; \n\
    \        b = c; \n        c = d; \n        d = sum; \n    } \n    return d; \n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnb04mkk_.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmpnb04mkk_.__unittest_L35_C1() [0x427a84]

    ??:? void tmpnb04mkk_.__modtest() [0x427afc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) return 0;\n\
    \    if (n < 2) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\
    \    static long[] cache = [0, 0, 2, 0];\n    while (cache.length <= n) {\n  \
    \      auto l = cache.length;\n        cache ~= cache[l-1] + cache[l-2] + cache[l-3]\
    \ + cache[l-4];\n    }\n    return cache[n];\n}\n/*\nFor this problem, we can\
    \ use a dynamic programming approach.\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpugbm9ua1.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpugbm9ua1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \nin{\n    assert(n >= 0L);\n\
    }\nout(result)\n{\n    assert(result >= 0L);\n}\ndo{\n    if(n <= 3L) return (long)(n\
    \ / 2L);\n    auto sum = 0L;\n    auto f4 = 0L;\n    auto f3 = 0L;\n    auto f2\
    \ = 2L;\n    auto f1 = 0L;\n    foreach(i; 1L .. n - 3L){\n        sum = f4 +\
    \ f3 + f2 + f1;\n        f4 = f3;\n        f3 = f2;\n        f2 = f1;\n      \
    \  f1 = sum;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiyefd_zc.d(28): Error: C style cast illegal, use `cast(long)(n
    / 2L)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiyefd_zc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163162
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long first = 0L;\n \
    \   long second = 0L;\n    long third = 2L;\n    long fourth = 0L;\n    long result\
    \ = 0L;\n    long count = 0L;\n    while (count < n)\n    {\n        result =\
    \ first + second + third + fourth;\n        first = second;\n        second =\
    \ third;\n        third = fourth;\n        fourth = result;\n        count++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpty_vdfsm.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpty_vdfsm.__unittest_L38_C1() [0x427a8c]

    ??:? void tmpty_vdfsm.__modtest() [0x427b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long sum = 0;\n    if (n < 4)\
    \ \n    {\n        return a;\n    } \n    else if (n == 4) \n    {\n        return\
    \ b;\n    } \n    else if (n == 5) \n    {\n        return c;\n    } \n    else\
    \ if (n == 6) \n    {\n        return d;\n    } \n    else \n    {\n        for\
    \ (long i = 4; i < n; i++) \n        {\n            sum = a + b + c + d;\n   \
    \         a = b;\n            b = c;\n            c = d;\n            d = sum;\n\
    \        }\n        return sum;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7rw03g3w.d(59): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmp7rw03g3w.__unittest_L55_C1() [0x427ad0]

    ??:? void tmp7rw03g3w.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 2) return 0;\n\
    \    if (n == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long i = 3;\n    while (i < n)\
    \ {\n        long e = a + b + c + d;\n        a = b;\n        b = c;\n       \
    \ c = d;\n        d = e;\n        i += 1;\n    }\n    return a + b + c + d;\n\
    }\n/*\nImplement the function\n    bool is_palindrome(long n)\n    that returns\
    \ true if the long integer n is a palindrome, i.e. reads the same as the reverse\
    \ of n.\n    Examples:\n    >>> is_palindrome(1L)\n    true\n    >>> is_palindrome(2L)\n\
    \    false\n    >>> is_palindrome(11L)\n    true\n    >>> is_palindrome(110L)\n\
    \    false\n    >>> is_palindrome(121L)\n    true\n*/\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwfgxohuw.d(59): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpwfgxohuw.__unittest_L55_C1() [0x427ac4]

    ??:? void tmpwfgxohuw.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fibArray = new\
    \ long[(int)n + 1];\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxb2s4a74.d(21): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpxb2s4a74.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxb2s4a74.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) return 0;\n\
    \    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n\
    \        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9vlw6qn6.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427db5]

    ??:? void tmp9vlw6qn6.__unittest_L34_C1() [0x427ae1]

    ??:? void tmp9vlw6qn6.__modtest() [0x427b38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42badb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a96e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]

    ??:? runModuleUnitTests [0x42b8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428204]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \nin {\n    assert(n >= 0L);\n\
    }\nout (result) {\n    assert(n == 0L || result >= 0L);\n}\ndo {\n    long[] A\
    \ = new long[n];\n    A[0L] = 0L;\n    A[1L] = 0L;\n    A[2L] = 2L;\n    A[3L]\
    \ = 0L;\n    foreach (long i in 4L .. n) {\n        A[i] = A[i - 1L] + A[i - 2L]\
    \ + A[i - 3L] + A[i - 4L];\n    }\n    return A[n - 1L];\n}\nunittest\n{\n   \
    \ alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnvmp6hoz.d(32): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnvmp6hoz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // x1, x2, x3, x4\n\
    \    // x5, x6, x7, x8\n    // x9, x10, x11, x12\n    // x13, x14, x15, x16\n\
    \    // x17, x18, x19, x20\n    // x21, x22, x23, x24\n    // x25, x26, x27, x28\n\
    \    // x29, x30, x31, x32\n    // x33, x34, x35, x36\n    // x37, x38, x39, x40\n\
    \    // x41, x42, x43, x44\n    // x45, x46, x47, x48\n    // x49, x50, x51, x52\n\
    \    // x53, x54, x55, x56\n    // x57, x58, x59, x60\n    // x61, x62, x63, x64\n\
    \    // x65, x66, x67, x68\n    // x69, x70, x71, x72\n    // x73, x74, x75, x76\n\
    \    // x77, x78, x79, x80\n    // x81, x82, x83, x84\n    // x85, x86, x87, x88\n\
    \    // x89, x90, x91, x92\n    // x93, x94, x95, x96\n    // x97, x98, x99, x100\n\
    \    // ...\n    // x301, x302, x303, x304\n    // x305, x306, x307, x308\n  \
    \  // x309, x310, x311, x312\n    // x313, x314, x315, x316\n    // x317, x318,\
    \ x319, x320\n    // x321, x322, x323, x324\n    // x325, x326, x327, x328\n \
    \   // x329, x330, x331, x332\n    // x333, x334, x335, x336\n    // x337, x338,\
    \ x339, x340\n    // x341, x342, x343, x344\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5v9vogy.d(59): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5v9vogy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // Note that this is\
    \ a horriable way to compute fib4, I just want to show\n    // how you can use\
    \ the dynamic programming to make it more efficent.\n    // If we use memoization,\
    \ it will be O(n)\n    static Map!int[] fibs = [ 0, 0, 2, 0 ];\n    if (n < fibs.length)\
    \ {\n        return fibs[n];\n    }\n    while (fibs.length <= n) {\n        //\
    \ O(n)\n        int len = fibs.length;\n        fibs ~= fibs[len-1] + fibs[len-2]\
    \ + fibs[len-3] + fibs[len-4];\n    }\n    return fibs[n];\n}\n/*\nFor a given\
    \ number n, print the corresponding fib4 series. The first few values of the fib4\
    \ series are as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) ->\
    \ 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n>>> fib4(7)\n\
    [0, 0, 2, 0, 2, 4, 8, 14]\n*/\nlong[] fib4(size_t n) \n{\n    static int[] fibs\
    \ = [ 0, 0, 2, 0 ];\n    if (n < fibs.length) {\n        return fibs[0..n];\n\
    \    }\n    while (fibs.length <= n) {\n        // O(n)\n        int len = fibs.length;\n\
    \        fibs ~= fibs[len-1] + fibs[len-2] + fibs[len-3] + fibs[len-4];\n    }\n\
    \    return fibs;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp49gzp1hc.d(24): Error: template instance `Map!int` template `Map`
    is not defined

    /tmp/tmp49gzp1hc.d(24): Error: cannot use array to initialize `_error_`

    /tmp/tmp49gzp1hc.d(53): Error: cannot implicitly convert expression `fibs.length`
    of type `ulong` to `int`

    /tmp/tmp49gzp1hc.d(49): Error: cannot implicitly convert expression `fibs[0..n]`
    of type `int[]` to `long[]`

    /tmp/tmp49gzp1hc.d(56): Error: cannot implicitly convert expression `fibs` of
    type `int[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp49gzp1hc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    int i = 0;\n\
    \    for (i = 4; i <= n; i++) \n    {\n        e = a + b + c + d;\n        a =\
    \ b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    auto fib4_seq = [](size_t\
    \ i){ return i.foldLeft!((a, b) => (a[1] + a[2] + a[3] + a[4], a[0], a[1], a[2],\
    \ a[3]))(); };\n    return fib4_seq(iota(n))[0];\n}\n/*\nWrite a function that\
    \ takes in a string and returns all possible permutations of that string.\n  \
    \  >>> permutations(\"\")\n    [\"\"]\n    >>> permutations(\"a\")\n    [\"a\"\
    ]\n    >>> permutations(\"abc\")\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"\
    cab\", \"cba\"]\n*/\nstring[] permutations(string s) \n{\n    auto s_len = s.length;\n\
    \    if (s_len == 0) \n    {\n        return [\"\"];\n    }\n    return s.indices.map!(i\
    \ =>\n        (s[i], s[i..$]).map!(a => a[0] ~ permutations(a[1] ~ s[0..i] ~ s[i+1..$])).join).join;\n\
    }\n/*\n1\n2\n3\n4\n5\nGiven a positive integer value N, write a function that\
    \ creates an N by N matrix that is filled with integers that start at 1 and end\
    \ at N*N in row major order (left to right, top to bottom).  For example, given\
    \ an N value of 3, the matrix would look like this:\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdpvpb4ib.d(21): Error: found `i` when expecting `,`

    /tmp/tmpdpvpb4ib.d(21): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpdpvpb4ib.d(21): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpdpvpb4ib.d(43): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpvpb4ib.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // The best way to compute\
    \ this is to use dynamic programming to store results.\n    // The only difficultly\
    \ is because n is a long and fib4(n) can overflow a uint.\n    // To fix this,\
    \ we use an integer type of exactly the number of bits n has.\n    static TypeTuple!(n+1)[]\
    \ fib4s; // This is the dynamic programming array.\n    static bool initialized\
    \ = false; // This tells us whether the array has been filled in.\n    if (!initialized)\n\
    \    {\n        // Initialize the array.\n        // The first few entries are\
    \ hard-coded, the rest are computed.\n        fib4s ~= 0; // fib4(0)\n       \
    \ fib4s ~= 0; // fib4(1)\n        fib4s ~= 2; // fib4(2)\n        fib4s ~= 0;\
    \ // fib4(3)\n        for (long i = 4; i <= n; i++)\n        {\n            //\
    \ The i-th element is the sum of the previous 4 elements.\n            // This\
    \ can overflow the integer used.  Use a larger type to compute the\n         \
    \   // sum, then truncate it to the appropriate size.\n            auto sum =\
    \ cast(TypeTuple!(n+1)sum)(fib4s[i-1] + fib4s[i-2] + fib4s[i-3] + fib4s[i-4]);\n\
    \            fib4s ~= sum;\n        }\n        initialized = true;\n    }\n  \
    \  return fib4s[n];\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp378hm1o5.d(39): Error: unexpected identifier `sum` in declarator

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp378hm1o5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    long[long] fibb; \n\
    \    fibb[0L] = 0L; \n    fibb[1L] = 0L; \n    fibb[2L] = 2L; \n    fibb[3L] =\
    \ 0L; \n    foreach(i; 4L..n) \n    { \n        fibb[i] = fibb[i-1] + fibb[i-2]\
    \ + fibb[i-3] + fibb[i-4]; \n    } \n    return fibb[n]; \n} \n//dub test\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp8fxglcxp.d(30): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428a42]

    ??:? long tmp8fxglcxp.fib4(long) [0x427d81]

    ??:? void tmp8fxglcxp.__unittest_L33_C1() [0x427d9d]

    ??:? void tmp8fxglcxp.__modtest() [0x427e2c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d8b3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4287ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a7cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a85c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a759]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4287c5]

    ??:? runModuleUnitTests [0x42d689]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*)'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3)\n      \
    \  return n*2;\n    long[] prev = [0,0,2,0];\n    for (long i = 4; i <= n; i++)\
    \ \n    {\n        long fib = prev[0] + prev[1] + prev[2] + prev[3];\n       \
    \ prev[0] = prev[1];\n        prev[1] = prev[2];\n        prev[2] = prev[3];\n\
    \        prev[3] = fib;\n    }\n    return prev[3];\n}\n/*\nA function that takes\
    \ an array of integers, and returns an array of the same length as the input,\
    \ where the output at each index i is the product of all input elements except\
    \ the element at i.\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5k5ueicd.d(34): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5k5ueicd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tif (n == 0L) \n\t{\n\t\
    \treturn 0L;\n\t}\n\telse if (n == 1L) \n\t{\n\t\treturn 0L;\n\t}\n\telse if (n\
    \ == 2L) \n\t{\n\t\treturn 2L;\n\t}\n\telse if (n == 3L) \n\t{\n\t\treturn 0L;\n\
    \t}\n\telse \n\t{\n\t\treturn (fib4(n - 1L) + fib4(n - 2L) + fib4(n - 3L) + fib4(n\
    \ - 4L));\n\t}\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    long a = 0, b = 0,\
    \ c = 2, d = 0, fib = 0; \n    long i; \n    for (i = 3; i <= n; i++) { \n   \
    \     fib = a + b + c + d; \n        a = b; \n        b = c; \n        c = d;\
    \ \n        d = fib; \n    } \n    return fib; \n} \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr8vwqjsi.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpr8vwqjsi.__unittest_L32_C1() [0x427a94]

    ??:? void tmpr8vwqjsi.__modtest() [0x427b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tenum int fib4 = [0, 0,\
    \ 2, 0, ];\n\tif (n < fib4.length) return fib4[n];\n\tint len = fib4.length;\n\
    \tlong[] fib = [0, 0, 2, 0, ];\n\twhile (len <= n) {\n\t\tfib ~= fib[0] + fib[1]\
    \ + fib[2] + fib[3];\n\t\tfib.removeFront();\n\t\tlen++;\n\t}\n\treturn fib[3];\n\
    }\n/*\n    Given a list of integers and a number k, write a function that returns\
    \ true if given list can be divided into pairs such that sum of every pair is\
    \ divisible by k.\n    >>> divisible([1, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5,\
    \ 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8,\
    \ 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5,\
    \ 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8,\
    \ 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5,\
    \ 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8,\
    \ 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5, 3, 8, 9, 5,\
    \ 3, 8\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) ==\
    \ 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprt0vz_px.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprt0vz_px.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // this is really slow\n\
    \    //unittest\n    {\n        assert(fib4(0L) == 0L);\n        assert(fib4(1L)\
    \ == 0L);\n        assert(fib4(2L) == 2L);\n        assert(fib4(3L) == 0L);\n\
    \        assert(fib4(4L) == 2L);\n        assert(fib4(5L) == 4L);\n        assert(fib4(6L)\
    \ == 8L);\n        assert(fib4(7L) == 14L);\n        assert(fib4(8L) == 26L);\n\
    \        assert(fib4(9L) == 48L);\n        assert(fib4(10L) == 92L);\n       \
    \ assert(fib4(11L) == 174L);\n        assert(fib4(12L) == 328L);\n        assert(fib4(13L)\
    \ == 626L);\n        assert(fib4(14L) == 1200L);\n        assert(fib4(15L) ==\
    \ 2294L);\n        assert(fib4(16L) == 4376L);\n        assert(fib4(17L) == 8366L);\n\
    \        assert(fib4(18L) == 16124L);\n        assert(fib4(19L) == 31028L);\n\
    \        assert(fib4(20L) == 59484L);\n        assert(fib4(21L) == 113864L);\n\
    \        assert(fib4(22L) == 218668L);\n        assert(fib4(23L) == 421028L);\n\
    \        assert(fib4(24L) == 812448L);\n        assert(fib4(25L) == 1567052L);\n\
    \        assert(fib4(26L) == 3011420L);\n        assert(fib4(27L) == 5789128L);\n\
    \        assert(fib4(28L) == 11156956L);\n        assert(fib4(29L) == 21466492L);\n\
    \        assert(fib4(30L) == 41321248L);\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq7pmffzn.d(55): Error: found `unittest` instead of statement

    /tmp/tmpq7pmffzn.d(64): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq7pmffzn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n == 0) \n    \
    \    return 0; \n    if (n == 1) \n        return 0; \n    if (n == 2) \n    \
    \    return 2; \n    if (n == 3) \n        return 0; \n   \n    long a = 0; \n\
    \    long b = 0; \n    long c = 2; \n    long d = 0; \n  \n    for (long i = 4;\
    \ i <= n; i++) \n    { \n        a = b + c + d; \n        b = c; \n        c =\
    \ d; \n        d = a; \n    } \n  \n    return a; \n} \n/*\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo121ydug.d(45): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo121ydug.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    alias Matrix2x2!(long)\
    \ M;\n    if (n < 0) return -1;\n    else if (n < 2) return 0;\n    else if (n\
    \ == 2) return 2;\n    else if (n == 3) return 0;\n    else\n    {\n        M\
    \ result = M(1, 1, 1, 0)^(n-3);\n        return result.m00 + result.m01;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) ==\
    \ 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6r2hpby.d(21): Error: template instance `Matrix2x2!long` template
    `Matrix2x2` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6r2hpby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n    if (n < 0L)\n    {\n  \
    \      return 0L;\n    }\n    else\n    {\n        long fib4_1 = 0L;\n       \
    \ long fib4_2 = 0L;\n        long fib4_3 = 2L;\n        long fib4_4 = 0L;\n  \
    \      long fib4_n = 0L;\n        for (long i = 3L; i <= n; i++)\n        {\n\
    \            fib4_n = fib4_1 + fib4_2 + fib4_3 + fib4_4;\n            fib4_1 =\
    \ fib4_2;\n            fib4_2 = fib4_3;\n            fib4_3 = fib4_4;\n      \
    \      fib4_4 = fib4_n;\n        }\n        return fib4_n;\n    }\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiskuuri6.d(20): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmpiskuuri6.d(20): Error: declaration expected, not `if`

    /tmp/tmpiskuuri6.d(23): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiskuuri6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tlong[] fibs = [0L, 0L,\
    \ 2L, 0L];\n\tlong sum = 0L;\n\tfor (int i = 4; i <= n; i++) \n\t{\n\t\tfibs[3]\
    \ = fibs[2];\n\t\tfibs[2] = fibs[1];\n\t\tfibs[1] = fibs[0];\n\t\tfibs[0] = sum;\n\
    \t\tsum = fibs[0] + fibs[1] + fibs[2] + fibs[3];\n\t}\n\treturn sum;\n}\n/*\n\
    The Sieve of Eratosthenes is an algorithm that can be used to efficiently find\
    \ all prime numbers between 1 and a specified number.\nThe algorithm works as\
    \ follows:\nGiven an integer n,\n1.Create a boolean array of length n.  Assume\
    \ all of the entries in the array are true.\n2.For each element i in the array,\
    \ if the ith element is true, mark all elements 2*i, 3*i, ..., n as false.\n3.The\
    \ elements in the array that are still true are the prime numbers between 1 and\
    \ n.\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) ==\
    \ 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx68tcv5n.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx68tcv5n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0L) return\
    \ 0L;\n    else if (n == 1L) return 0L;\n    else if (n == 2L) return 2L;\n  \
    \  else if (n == 3L) return 0L;\n    else if (n == 4L) return 2L;\n    else {\n\
    \        long a = 0L;\n        long b = 0L;\n        long c = 2L;\n        long\
    \ d = 2L;\n        long tmp = 0L;\n        while (n > 4L) {\n            tmp =\
    \ d;\n            d = d + c + b + a;\n            a = b;\n            b = c;\n\
    \            c = tmp;\n            n--;\n        }\n        return d;\n    }\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbkysv5_p.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpbkysv5_p.__unittest_L43_C1() [0x427af1]

    ??:? void tmpbkysv5_p.__modtest() [0x427b48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3)\n      \
    \  return n == 0 ? 0 : 2;\n    struct Fib4\n    {\n        long a;\n        long\
    \ b;\n        long c;\n        long d;\n    }\n    long x = Fib4(0, 2, 0, 2);\n\
    \    long y = Fib4(2, 2, 0, 2);\n    long n2 = n - 3;\n    while (n2 != 0)\n \
    \   {\n        if (n2 & 1)\n        {\n            y = Fib4(y.a * x.a + y.b *\
    \ x.c,\n                     y.a * x.b + y.b * x.d,\n                     y.c\
    \ * x.a + y.d * x.c,\n                     y.c * x.b + y.d * x.d);\n        }\n\
    \        x = Fib4(x.a * x.a + x.b * x.c,\n                 x.a * x.b + x.b * x.d,\n\
    \                 x.c * x.a + x.d * x.c,\n                 x.c * x.b + x.d * x.d);\n\
    \        n2 >>= 1;\n    }\n    return y.a;\n}\n/*\nSee http://brilliant.org/wiki/crochet-square-number/\n\
    The \"Crochet Square Number\" of a number 'n' is defined as the sum of all non-square\
    \ numbers between 1 and n (inclusive)\nPlease write a function that computes the\
    \ crochet square number of an input number.\n    >>> crochetSquareNumber(1L)\n\
    \    0L\n    >>> crochetSquareNumber(2L)\n    1L\n    >>> crochetSquareNumber(3L)\n\
    \    1L\n    >>> crochetSquareNumber(6L)\n    6L\n    >>> crochetSquareNumber(7L)\n\
    \    11L\n    >>> crochetSquareNumber(8L)\n    16L\n    >>> crochetSquareNumber(12L)\n\
    \    25L\n*/\nlong crochetSquareNumber(long n) \n{\n    long sum = 0;\n    long\
    \ i = 0;\n    while (i < n)\n    {\n        long i2 = i*i\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk1_lu1q0.d(76): Error: semicolon expected, not `unittest`

    /tmp/tmpk1_lu1q0.d(76): Error: found `unittest` instead of statement

    /tmp/tmpk1_lu1q0.d(85): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk1_lu1q0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // Put your code here\n\
    \    if (n <= 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return\
    \ 2;\n    if (n == 3) return 0;\n    long[] fib = new long[n+1];\n    fib[0] =\
    \ 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n    for (int i = 4; i\
    \ <= n; i++)\n    {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n\
    \    }\n    return fib[n];\n}\nlong fib4_0(long n) \n{\n    if (n <= 0) return\
    \ 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    auto x = tuple(0L, 0L, 2L, 0L);\n    for (int i = 4; i <= n; i++)\n\
    \    {\n        x = tuple(x[1], x[2], x[3], x[0] + x[1] + x[2] + x[3]);\n    }\n\
    \    return x[3];\n}\n/*\nYou have a map of airports with flight connections between\
    \ them. For instance:\n    auto airportConnections = [[\"BOS\", \"MCO\"], [\"\
    BOS\", \"JFK\"], [\"JFK\", \"ORD\"], [\"JFK\", \"MCO\"], [\"ORD\", \"LAX\"], [\"\
    ORD\", \"MCO\"], [\"LAX\", \"SFO\"]];\n    You also have a list of flights (for\
    \ instance, one for each day of the week):\n    auto flights = [[\"ORD\", \"MCO\"\
    ], [\"JFK\", \"MCO\"], [\"BOS\", \"ORD\"], [\"MCO\", \"LAX\"], [\"JFK\", \"LAX\"\
    ], [\"BOS\", \"LAX\"], [\"LAX\", \"BOS\"]];\n    The flights are circular, meaning\
    \ that the last destination in the list of flights for a given day is the first\
    \ destination for the next day.\n    Write a function that takes a list of flights\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmcru__ew.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmcru__ew.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tif (n == 0) return 0;\n\
    \tif (n == 1) return 0;\n\tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\t\n\
    \tlong a1 = 0, a2 = 0, a3 = 2, a4 = 0;\n\tlong a = 0;\n\tforeach (j; 4 .. n +\
    \ 1) \n\t{\n\t\ta = a1 + a2 + a3 + a4;\n\t\ta1 = a2;\n\t\ta2 = a3;\n\t\ta3 = a4;\n\
    \t\ta4 = a;\n\t}\n\treturn a;\n}\n/*\nGiven a sequence of integers write a function\
    \ to compute the longest subsequence such that the elements in the subsequence\
    \ are consecutive.\nThe function should return a tuple representing the longest\
    \ subsequence with the first element being the length of the subsequence and the\
    \ second element\nbeing the beginning element of the subsequence.  An empty sequence\
    \ is considered a subsequence of length 0.  If there are multiple subsequences\
    \ of the same \nlength and same beginning element, you can return any of them.\n\
    \    >>> consecutiveSubseq([]).length\n    0\n    >>> consecutiveSubseq([3]).length\n\
    \    1\n    >>> consecutiveSubseq([3]).begin\n    3\n    >>> consecutiveSubseq([1,2,3,4,5]).length\n\
    \    5\n    >>> consecutiveSubseq([1,2,3,4,5]).begin\n    1\n    >>> consecutiveSubseq([1,2,3,4,5,6,7,8,9,10]).length\n\
    \    10\n    >>> consecutiveSubseq([1,2,3,4,5,6,7,8,9,10]).begin\n    1\n    >>>\
    \ consecutiveSubseq([1,2,3,4,5,6,7,8,9,10,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]).length\n\
    \    20\n    >>> consecutiveSubseq([1,2,3,4,5,6,7,8,9,10,4,5,6,7,8,9,10,11,12\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptz7ro3jq.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptz7ro3jq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long fib4_n = 0;\n \
    \   long fib4_nminus1 = 0;\n    long fib4_nminus2 = 2;\n    long fib4_nminus3\
    \ = 0;\n    long fib4_nminus4 = 0;\n    if (n == 0)\n    {\n        return fib4_n;\n\
    \    }\n    else if (n == 1)\n    {\n        return fib4_nminus1;\n    }\n   \
    \ else if (n == 2)\n    {\n        return fib4_nminus2;\n    }\n    else if (n\
    \ == 3)\n    {\n        return fib4_nminus3;\n    }\n    else if (n == 4)\n  \
    \  {\n        return fib4_nminus4;\n    }\n    else\n    {\n        for (long\
    \ i = 4; i < n; i++)\n        {\n            fib4_n = fib4_nminus1 + fib4_nminus2\
    \ + fib4_nminus3 + fib4_nminus4;\n            fib4_nminus4 = fib4_nminus3;\n \
    \           fib4_nminus3 = fib4_nminus2;\n            fib4_nminus2 = fib4_nminus1;\n\
    \            fib4_nminus1 = fib4_n;\n        }\n        return fib4_n;\n    }\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4co5xe0f.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmp4co5xe0f.__unittest_L59_C1() [0x427ae4]

    ??:? void tmp4co5xe0f.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a, b, c, d, e;\n\
    \    a = b = c = d = e = 0;\n    for (; n > 0; n--) {\n        e = d;\n      \
    \  d = c;\n        c = b;\n        b = a;\n        a = b + c + d + e;\n    }\n\
    \    return a;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6yzqw8ob.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmp6yzqw8ob.__unittest_L32_C1() [0x427a88]

    ??:? void tmp6yzqw8ob.__modtest() [0x427b00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long f0 = 0;\n    long\
    \ f1 = 0;\n    long f2 = 2;\n    long f3 = 0;\n    long f = 0;\n    long i = 4;\n\
    \    while (i <= n) {\n        f = f0 + f1 + f2 + f3;\n        f0 = f1;\n    \
    \    f1 = f2;\n        f2 = f3;\n        f3 = f;\n        i += 1;\n    }\n   \
    \ return f;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    //mutable long a = 0;\n\
    \    //mutable long b = 0;\n    //mutable long c = 2;\n    //mutable long d =\
    \ 0;\n    //mutable long e = 0;\n    immutable long a = 0;\n    immutable long\
    \ b = 0;\n    immutable long c = 2;\n    immutable long d = 0;\n    immutable\
    \ long e = 0;\n    int i = 0;\n    enum index = 1;\n    //auto rt = tuple(a,b,c,d,e);\n\
    \    auto rt = tuple(a,b,c,d,e);\n    //auto rt = tuple(a,b,c,d,e);\n    if (n\
    \ < 0)\n    {\n        return -1;\n    }\n    else if (n == 0)\n    {\n      \
    \  return rt[0];\n    }\n    else if (n == 1)\n    {\n        return rt[1];\n\
    \    }\n    else if (n == 2)\n    {\n        return rt[2];\n    }\n    else if\
    \ (n == 3)\n    {\n        return rt[3];\n    }\n    else\n    {\n        for\
    \ (i = 4; i <= n; i++)\n        {\n            e = rt[4] + rt[3] + rt[2] + rt[1];\n\
    \            rt[4] = rt[3];\n            rt[3] = rt[2];\n            rt[2] = rt[1];\n\
    \            rt[1] = rt[0];\n            rt[0] = e;\n        }\n        return\
    \ rt[0];\n    }\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjp25e5j9.d(60): Error: cannot modify `immutable` expression `e`

    /tmp/tmpjp25e5j9.d(61): Error: cannot modify `immutable` expression `rt.__expand_field_4`

    /tmp/tmpjp25e5j9.d(62): Error: cannot modify `immutable` expression `rt.__expand_field_3`

    /tmp/tmpjp25e5j9.d(63): Error: cannot modify `immutable` expression `rt.__expand_field_2`

    /tmp/tmpjp25e5j9.d(64): Error: cannot modify `immutable` expression `rt.__expand_field_1`

    /tmp/tmpjp25e5j9.d(65): Error: cannot modify `immutable` expression `rt.__expand_field_0`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjp25e5j9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 0) return 0;\n\
    \    if (n <= 3) return (n < 2 ? 0 : 2);\n    auto val = tuple(0L, 0L, 2L, 0L);\n\
    \    for (long i = 4; i <= n; i++)\n    {\n        val = tuple(val[1], val[2],\
    \ val[3], val[0] + val[1] + val[2] + val[3]);\n    }\n    return val[3];\n}\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 0)\n      \
    \  return 0;\n    n = n - 1;\n    long F2 = 0;\n    long F1 = 0;\n    long F0\
    \ = 2;\n    while (n > 0) \n    {\n        long F3 = F2 + F1 + F0;\n        F2\
    \ = F1;\n        F1 = F0;\n        F0 = F3;\n        n = n - 1;\n    }\n    return\
    \ F0;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj10_ci4p.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmpj10_ci4p.__unittest_L37_C1() [0x427a88]

    ??:? void tmpj10_ci4p.__modtest() [0x427b00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163163
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib = new long[n\
    \ + 1];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n\
    \    foreach(i; 4 .. n + 1) \n    {\n        fib[i] = fib[i - 1] + fib[i - 2]\
    \ + fib[i - 3] + fib[i - 4];\n    }\n    return fib[n];\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n == 0L) return\
    \ 0L; \n    if (n == 1L) return 0L; \n    if (n == 2L) return 2L; \n    if (n\
    \ == 3L) return 0L; \n    int m = n / 2; \n    auto f = tuple(0L, 0L, 0L, 0L,\
    \ 0L, 0L, 0L, 0L); \n    auto f0 = tuple(0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L); \n \
    \   f[0] = 0L; \n    f[1] = 0L; \n    f[2] = 2L; \n    f[3] = 0L; \n    f[4] =\
    \ 1L; \n    f[5] = 0L; \n    f[6] = 0L; \n    f[7] = 0L; \n    for (int i = 1;\
    \ i < m; i++) \n    { \n        auto newf = tuple(0L, 0L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L); \n        newf[0] = f[0] * f0[0] + f[1] * f0[2] + f[2] * f0[4] + f[3] *\
    \ f0[6]; \n        newf[1] = f[0] * f0[1] + f[1] * f0[3] + f[2] * f0[5] + f[3]\
    \ * f0[7]; \n        newf[2] = f[2] * f0[0] + f[3] * f0[2] + f[4] * f0[4] + f[5]\
    \ * f0[6]; \n        newf[3] = f[2] * f0[1] + f[3] * f0[3] + f[4] * f0[5] + f[5]\
    \ * f0[7]; \n        newf[4] = f[4] * f0[0] + f[5] * f0[2]\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpclgm9yua.d(44): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpclgm9yua.d(53): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpclgm9yua.d(53): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclgm9yua.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    //declaring a tuple\
    \ (and printing it)\n    tuple!(long, long, long, long) fib4 = tuple(0L, 0L, 2L,\
    \ 0L); \n    foreach(count; 0..n) \n    { \n        //grabbing and printing the\
    \ 0, 1, 2, 3 values of the tuple\n        long temp = fib4[0]; \n        fib4[0]\
    \ = fib4[1]; \n        fib4[1] = fib4[2]; \n        fib4[2] = fib4[3]; \n    \
    \    fib4[3] = temp + fib4[1] + fib4[2] + fib4[3]; \n    } \n    return fib4[3];\
    \ \n} \n  \nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4zq6chfz.d(22): Error: `tuple!(long, long, long, long)` is used
    as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4zq6chfz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tif (n < 0) \n    {\n \
    \       return -1;\n    } \n    else if (n == 0) \n    {\n        return 0;\n\
    \    } \n    else if (n == 1) \n    {\n        return 0;\n    } \n    else if\
    \ (n == 2) \n    {\n        return 2;\n    } \n    else if (n == 3) \n    {\n\
    \        return 0;\n    }\n    Tuple!(long, long, long, long) fibs = tuple(0,\
    \ 0, 2, 0);\n    foreach(i; 1 .. n) \n    {\n        long fibSum = fibs[0] + fibs[1]\
    \ + fibs[2] + fibs[3];\n        fibs[0] = fibs[1];\n        fibs[1] = fibs[2];\n\
    \        fibs[2] = fibs[3];\n        fibs[3] = fibSum;\n    }\n    return fibs[3];\n\
    }\n/*\nWrite a function that takes a function as an argument and returns a function\
    \ that reverses the arguments to the first function. \nPlease do not use std.functional.\n\
    \    >>> int sum(int a, int b) { return a + b; }\n    >>> auto reversedSum = reverseArgs(sum);\n\
    \    >>> reversedSum(1, 2)\n    3\n    >>> auto reversedSum2 = reverseArgs(reversedSum);\n\
    \    >>> reversedSum2(1, 2)\n    3\n*/\nT reverseArgs(T) (T func)\n{\n    return\
    \ (Args...)(Args args) { return func(args.reverse); };\n}\n/*\nPlease write a\
    \ function that takes a string and returns a string of each of the words in the\
    \ first string that have an even length.  \nThe words in the returned string should\
    \ not be separated by spaces.\n    >>> evenLengthWords(\"I went to the grocery\
    \ store\")\n    \"wentto\"\n    >>> evenLengthWords(\"I didn't go to the store\"\
    )\n    \"Ididn'ttothe\"\n*/\nstring evenLengthWords(string input) \n{\n    string[]\
    \ words = input.split;\n    string result = \"\";\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpju18sblh.d(65): Error: found `...` when expecting `)`

    /tmp/tmpju18sblh.d(65): Error: found `)` when expecting `;` following `return`
    statement

    /tmp/tmpju18sblh.d(79): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpju18sblh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] a = new long[4];\n\
    \    a[0] = 0;\n    a[1] = 0;\n    a[2] = 2;\n    a[3] = 0;\n    if (n <= 3)\n\
    \        return a[n];\n    for (long i = 4; i <= n; i++) \n    {\n        long\
    \ t = a[0] + a[1] + a[2] + a[3];\n        a[0] = a[1];\n        a[1] = a[2];\n\
    \        a[2] = a[3];\n        a[3] = t;\n    }\n    return a[3];\n}\n/*\nThe\
    \ functions max and min can be used to get the maximum or minimum of two values.\
    \  They're variadic, so they can be used to compare more than two values.\n  \
    \  >>> max(1, 5)\n    5\n    >>> max(1, 5, 100, 20)\n    100\n    >>> min(1, 5)\n\
    \    1\n    >>> min(1, 5, 100, 20)\n    1\nunittest\n{\n    alias candidate =\
    \ fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2z8jt_y8.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2z8jt_y8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163163
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n == 0) \n    \
    \    return 0; \n    if (n == 1 || n == 2) \n        return 1; \n  \n    return\
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4); \n} \nunittest\n{\n \
    \   alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \nin {\n    assert(n >= 0L);\n\
    }\nout (result)\n{\n    assert(result >= 0L);\n}\ndo\n{\n    if (n == 0L) {\n\
    \        return 0L;\n    } else if (n == 1L) {\n        return 0L;\n    } else\
    \ if (n == 2L) {\n        return 2L;\n    } else if (n == 3L) {\n        return\
    \ 0L;\n    } else {\n        auto result = Tuple!(long, long, long, long)(0L,\
    \ 0L, 2L, 0L);\n        foreach (i; 4 .. n + 1) {\n            result = tuple(result[1]\
    \ + result[2] + result[3], result[0], result[1], result[2]);\n        }\n    \
    \    return result[0];\n    }\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmposcng67w.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x428f81]

    ??:? void tmposcng67w.__unittest_L45_C1() [0x428270]

    ??:? void tmposcng67w.__modtest() [0x428934]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42caaa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4313d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431880]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43135d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ca81]

    ??:? runModuleUnitTests [0x42d971]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42945c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // Base cases\n    if\
    \ (n == 0L) \n    {\n        return 0L;\n    }\n    if (n == 1L) \n    {\n   \
    \     return 0L;\n    }\n    if (n == 2L) \n    {\n        return 2L;\n    }\n\
    \    if (n == 3L) \n    {\n        return 0L;\n    }\n    // These variables hold\
    \ the last four elements.\n    long a = 0L;\n    long b = 0L;\n    long c = 2L;\n\
    \    long d = 0L;\n    long i = 4L;\n    while (i <= n) \n    {\n        // b\
    \ + c + d is the current fib4 sequence number\n        auto e = b + c + d;\n \
    \       a = b;\n        b = c;\n        c = d;\n        d = e;\n        i++;\n\
    \    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyf8767jj.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dad]

    ??:? void tmpyf8767jj.__unittest_L56_C1() [0x427ad9]

    ??:? void tmpyf8767jj.__modtest() [0x427b30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bad3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a966]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]

    ??:? runModuleUnitTests [0x42b8a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n==0) \n      \
    \  return 0; \n    if (n==1 || n==2) \n        return n; \n    if (n==3) \n  \
    \      return n-1; \n  \n    // Create an array for memoization \n    long[] f\
    \ = new long[n+1]; \n  \n    // Declare the first three terms of the sequence\
    \ \n    f[0] = 0; \n    f[1] = 1; \n    f[2] = 2; \n    f[3] = 2; \n  \n    //\
    \ Using loop to store the calculated values \n    // of previous 3 terms - \n\
    \    for (long i=4; i<=n; i++) \n        f[cast(int)i] = f[cast(int)i-1] + f[cast(int)i-2]\
    \ + \n                        f[cast(int)i-3] + f[cast(int)i-4]; \n  \n    return\
    \ f[cast(int)n]; \n} \n  \nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp52aacvk_.d(50): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281bd]

    ??:? void tmp52aacvk_.__unittest_L46_C1() [0x427ec8]

    ??:? void tmp52aacvk_.__modtest() [0x427f40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1bb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b04e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430788]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430265]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b025]

    ??:? runModuleUnitTests [0x42bf91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428680]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n*2;\n    }\n    auto fib = makeTuple(0L,0L,2L,0L);\n    for (size_t\
    \ i = 4; i <= n; i++) \n    {\n        fib = makeTuple(fib[1], fib[2], fib[3],\
    \ fib[0] + fib[1] + fib[2] + fib[3]);\n    }\n    return fib[3];\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1pdir4_8.d(25): Error: undefined identifier `makeTuple`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1pdir4_8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    double sqrt5 = sqrt(5.0);\n\
    \    double p1 = (1.0 + sqrt5) / 2.0;\n    double p2 = -1.0 * (p1 - 1);\n    double\
    \ n1 = pow(p1, n);\n    double n2 = pow(p2, n);\n    return (long)((n1 - n2) /\
    \ sqrt5);\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvo0jbkuh.d(26): Error: C style cast illegal, use `cast(long)((n1
    - n2) / sqrt5)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvo0jbkuh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0L)\n     \
    \   return 0L;\n    if (n == 1L)\n        return 0L;\n    if (n == 2L)\n     \
    \   return 2L;\n    if (n == 3L)\n        return 0L;\n    immutable val = fib4(n\
    \ - 1L) + fib4(n - 2L) + fib4(n - 3L) + fib4(n - 4L);\n    return val;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164104
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long result = 0;\n \
    \   long array[4] = [0, 0, 2, 0];\n    //compute the nth fib number\n    if (n\
    \ < 4) {\n        return array[n];\n    }\n    for (long i = 4; i <= n; i++) {\n\
    \        result = array[0] + array[1] + array[2] + array[3];\n        array[0]\
    \ = array[1];\n        array[1] = array[2];\n        array[2] = array[3];\n  \
    \      array[3] = result;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmpx94r2g_4.d(22): Deprecation: instead of C-style syntax, use D-style
    syntax `long[4] array`

    /tmp/tmpx94r2g_4.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[4] array`

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    int[] F = [0, 0, 2,\
    \ 0];\n    for (long i = 4; i <= n; i++) \n    {\n        F[3] = F[2] + F[1] +\
    \ F[0];\n        F[0] = F[1];\n        F[1] = F[2];\n        F[2] = F[3];\n  \
    \  }\n    return F[3];\n}\n// --------------------------\nimport std.stdio;\n\
    import std.typecons;\n/*\nProblem:\n    The Fib6 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) ->\
    \ 0\n    fib6(1) -> 0\n    fib6(2) -> 0\n    fib6(3) -> 1\n    fib6(n) -> fib6(n-1)\
    \ + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n    Please write\
    \ a function to efficiently compute the n-th element of the fib6 number sequence.\
    \  Do not use recursion.\n    >>> fib6(5L)\n    6L\n    >>> fib6(6L)\n    10L\n\
    \    >>> fib6(7L)\n    20L\n*/\nlong fib6(long n) \n{\n    int[] F = [0, 0, 0,\
    \ 1];\n    for (long i = 4; i <= n; i++) \n    {\n        F[3] = F[2] + F[1] +\
    \ F[0];\n        F[0] = F[1];\n        F[1] = F[2];\n        F[2] = F[3];\n  \
    \  }\n    return F[3];\n}\n// --------------------------\nimport std.stdio;\n\
    import std.typecons;\n/*\nProblem:\n    The Fib6-2 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib6-2(0)\
    \ -> 0\n    fib6-2(1) -> 0\n    fib6-2(2) -> 0\n    fib6-2\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagx461js.d(65): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagx461js.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tlong a = 0L;\n\tlong b\
    \ = 0L;\n\tlong c = 2L;\n\tlong d = 0L;\n\tlong e = 0L;\n\tforeach(i; 1L..n) \n\
    \t{\n\t\te = a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = e;\n\t\
    }\n\treturn e;\n}\n/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5L)\n    4L\n\
    \    >>> fib4(6L)\n    8L\n    >>> fib4(7L)\n    14L\n    \n*/\nlong fib4(long\
    \ n) \n{\n\tif(n < 2L) \n\t{\n\t\treturn 0L;\n\t}\n\tlong a = 0L;\n\tlong b =\
    \ 0L;\n\tlong c = 2L;\n\tlong d = 0L;\n\tlong e = 0L;\n\tforeach(i; 2L..n) \n\t\
    {\n\t\te = a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = e;\n\t\
    }\n\treturn e;\n}\n/*\nFib4fast is a generator that computes the Fib4 sequence\n\
    */\nauto fib4fast() \n{\n\tlong a = 0L;\n\tlong b = 0L;\n\tlong c = 2L;\n\tlong\
    \ d = 0L;\n\twhile(true) \n\t{\n\t\tauto e = a + b + c + d;\n\t\ta = b\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0u1khgqx.d(86): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp0u1khgqx.d(95): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp0u1khgqx.d(95): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0u1khgqx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long [] data = new long\
    \ [4];\n    if (n <= 3)\n        return data[n];\n    data[0] = 0;\n    data[1]\
    \ = 0;\n    data[2] = 2;\n    data[3] = 0;\n    return fib4(n, data);\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgffvnqzv.d(28): Error: function `tmpgffvnqzv.fib4(long n)` is not
    callable using argument types `(long, long[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgffvnqzv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) return 0;\n\
    \    if (n <= 3) return n;\n    auto f4 = tuple(0L, 0L, 2L, 0L);\n    for (int\
    \ i = 4; i <= n; i++) \n    {\n        f4 = tuple(f4[1], f4[2], f4[3], f4[0] +\
    \ f4[1] + f4[2] + f4[3]);\n    }\n    return f4[3];\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    version(sse2) \n   \
    \ {\n        int[] f = void;\n        f.length = 4;\n        foreach(i; 0 .. 4)\
    \ \n        {\n            f[i] = i < 2 ? 0 : 2;\n        }\n        for(; n >=\
    \ 4; n--) \n        {\n            f[0] = f[1];\n            f[1] = f[2];\n  \
    \          f[2] = f[3];\n            f[3] += f[0] + f[1] + f[2];\n        }\n\
    \        return f[n];\n    } \n    else \n    {\n        long[] f = void;\n  \
    \      f.length = 4;\n        foreach(i; 0 .. 4) \n        {\n            f[i]\
    \ = i < 2 ? 0 : 2;\n        }\n        for(; n >= 4; n--) \n        {\n      \
    \      f[0] = f[1];\n            f[1] = f[2];\n            f[2] = f[3];\n    \
    \        f[3] += f[0] + f[1] + f[2];\n        }\n        return f[n];\n    }\n\
    }\n/*\nA palindrome is a string that reads the same forward and backward, for\
    \ example radar or toot. We would like to construct an array of all the palindromic\
    \ primes between two given numbers a and b (inclusive).\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2qboe7s2.d(56): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2qboe7s2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tif (n < 4) \n\t{\n\t\t\
    return n;\n\t}\n\telse \n\t{\n\t\tlong [] fibArr = new long[n+1];\n\t\tfibArr[0]\
    \ = 0;\n\t\tfibArr[1] = 0;\n\t\tfibArr[2] = 2;\n\t\tfibArr[3] = 0;\n\t\tfor (long\
    \ i = 4; i <= n; i++) \n\t\t{\n\t\t\tfibArr[(int)i] = fibArr[(int)i-1] + fibArr[(int)i-2]\
    \ + fibArr[(int)i-3] + fibArr[(int)i-4];\n\t\t}\n\t\treturn fibArr[(int)n];\n\t\
    }\n}\n/*\nWrite a function to reverse a string in-place.  Do not use std.string.rev\
    \ which has implicit .dup.\n    >>> reverse(\"foobar\")\n    \"raboof\"\n*/\n\
    string reverse(string str) \n{\n\tint length = str.length;\n\timmutable(char)\
    \ [] chars = str.ptr;\n\tfor (int i = 0; i < length/2; i++) \n\t{\n\t\t//swap\n\
    \t\timmutable(char) temp = chars[i];\n\t\tchars[i] = chars[length-i-1];\n\t\t\
    chars[length-i-1] = temp;\n\t}\n\treturn to!string(chars);\n}\n/*\n    An Armstrong\
    \ number is a number that is the sum of its own digits each raised to the power\
    \ of the number of digits.\n    For example,\n    9 is an Armstrong number, because\
    \ 9 = 9^1 = 9\n    10 is not an Armstrong number, because 10 != 1^2 + 0^2 = 1\n\
    \    153 is an Armstrong number, because: 153 = 1^3 + 5^3 + 3^3 = 1 + 125 + 27\
    \ = 153\n    154 is not an Armstrong number, because: 154 != 1^3 + 5^3 + 4^3 =\
    \ 1 + 125 + 64 = 190\n    Write a function that returns true\nunittest\n{\n  \
    \  alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hdeppi4.d(34): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp_hdeppi4.d(34): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp_hdeppi4.d(34): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp_hdeppi4.d(34): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp_hdeppi4.d(34): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp_hdeppi4.d(36): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmp_hdeppi4.d(57): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hdeppi4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // Write your solution\
    \ here\n    return 0;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_7tberb9.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d15]

    ??:? void tmp_7tberb9.__unittest_L24_C1() [0x427a1c]

    ??:? void tmp_7tberb9.__modtest() [0x427a94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a8ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42f9ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]

    ??:? runModuleUnitTests [0x42b811]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428164]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // your code here\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu4sh2uey.d(19): Error: function `tmpu4sh2uey.fib4` has no `return`
    statement, but is expected to return a value of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu4sh2uey.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n     long[] fibs = new long[n+1];\n\
    \    fibs[0] = 0;\n    fibs[1] = 0;\n    fibs[2] = 2;\n    fibs[3] = 0;\n    foreach(i;\
    \ 4..n+1)\n    {\n        fibs[i] = fibs[i-1] + fibs[i-2] + fibs[i-3] + fibs[i-4];\n\
    \    }\n    return fibs[n];\n}\nunittest\n{\n    alias candidate = fib4;\n\n \
    \   assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n <= 0)\n     \
    \   return 0;\n    else if (n <= 2)\n        return 2;\n    else if (n <= 3)\n\
    \        return 0;\n    else\n    {\n        long a = 0;\n        long b = 0;\n\
    \        long c = 2;\n        long d = 0;\n        for (long i = 3; i < n; i++)\n\
    \        {\n            long temp = a + b + c + d;\n            a = b;\n     \
    \       b = c;\n            c = d;\n            d = temp;\n        }\n       \
    \ return a + b + c + d;\n    }\n} \n \n// Driver code \nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi994o73b.d(50): unittest failure

    ----------------

    ??:? _d_unittestp [0x427db5]

    ??:? void tmpi994o73b.__unittest_L46_C1() [0x427ac0]

    ??:? void tmpi994o73b.__modtest() [0x427b38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42badb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a96e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]

    ??:? runModuleUnitTests [0x42b8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428204]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long fib1 = 0;\n   \
    \ long fib2 = 0;\n    long fib3 = 2;\n    long fib4 = 0;\n    long temp = 0;\n\
    \    int i = 3;\n    if (n < 4)\n    {\n        switch (n)\n        {\n      \
    \      case 0: return 0;\n            case 1: return 0;\n            case 2: return\
    \ 2;\n            case 3: return 0;\n        }\n    }\n    while (i < n)\n   \
    \ {\n        temp = fib1 + fib2 + fib3 + fib4;\n        fib1 = fib2;\n       \
    \ fib2 = fib3;\n        fib3 = fib4;\n        fib4 = temp;\n        i++;\n   \
    \ }\n    return fib1 + fib2 + fib3 + fib4;\n}\n/*\nGiven a list of gene symbols\
    \ in a text file, please write a function to find the gene that's most frequently\
    \ found in the data set.\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprytjfsaz.d(48): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprytjfsaz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib = new long[n+1];\n\
    \    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n    foreach(i;\
    \ 4 .. n+1)\n    {\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n\
    \    }\n    return fib[n];\n}\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[4] fib = [0L, 0L,\
    \ 2L, 0L];\n    long[4] result = [0L, 0L, 2L, 0L];\n    long[4][4] mat = [\n \
    \       [1L, 1L, 1L, 1L],\n        [1L, 0L, 0L, 0L],\n        [0L, 1L, 0L, 0L],\n\
    \        [0L, 0L, 1L, 0L]\n    ];\n    foreach(i; 1 .. n)\n    {\n        result\
    \ = tuple(mat * fib);\n        fib = result;\n    }\n    return result[0];\n}\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8_gv21_s.d(31): Error: incompatible types for `(mat) * (fib)`:
    `long[4][4]` and `long[4]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8_gv21_s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // Problematic line,\
    \ auto is not a specifier, i is a keyword.\n    auto i in Tuple!(0L, 0L, 2L, 0L).dup(4);\n\
    \    for (n_t i = 0L; i < n; ++i)\n    {\n        i[3] = i[2] + i[1] + i[0];\n\
    \        // This is syntactically incorrect\n        swap(i[0], i[1], i[2], i[3]);\n\
    \    }\n    return i[0];\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphzl_0iwt.d(22): Error: no identifier for declarator `i`

    /tmp/tmphzl_0iwt.d(22): Error: found `in` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphzl_0iwt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    struct result\n    {\n\
    \        long prev;\n        long curr;\n    }\n    auto ret = result(0L,0L);\n\
    \    if(n == 0L)\n        return 0L;\n    else if(n == 1L)\n        return 0L;\n\
    \    else if(n == 2L)\n        return 2L;\n    else if(n == 3L)\n        return\
    \ 0L;\n    else\n    {\n        long prev2 = 0L;\n        long prev1 = 0L;\n \
    \       long sum = 0L;\n        for(long i = 2L; i < n; i++)\n        {\n    \
    \        if(i == 2L)\n            {\n                sum = 2L;\n             \
    \   prev2 = 0L;\n                prev1 = 2L;\n            }\n            else\n\
    \            {\n                sum = prev2 + prev1 + sum;\n                prev2\
    \ = prev1;\n                prev1 = sum;\n            }\n        }\n        return\
    \ sum;\n    }\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1a2c3w5d.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x42816d]

    ??:? void tmp1a2c3w5d.__unittest_L58_C1() [0x427b5c]

    ??:? void tmp1a2c3w5d.__modtest() [0x427bd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bfff]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42af0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430025]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304d4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ffb1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aee5]

    ??:? runModuleUnitTests [0x42bdd5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] a = new long[(cast(int)n)\
    \ + 1];\n    a[0] = 0;\n    a[1] = 0;\n    a[2] = 2;\n    a[3] = 0;\n    if (n\
    \ == 0)\n        return a[0];\n    if (n == 1)\n        return a[1];\n    if (n\
    \ == 2)\n        return a[2];\n    if (n == 3)\n        return a[3];\n    for\
    \ (int i = 4; i <= cast(int)n; i++)\n    {\n        a[i] = a[i - 1] + a[i - 2]\
    \ + a[i - 3] + a[i - 4];\n    }\n    return a[(cast(int)n)];\n}\nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0) {\n     \
    \   return -1;\n    }\n    if (n == 0 || n == 1) {\n        return 0;\n    }\n\
    \    if (n == 2) {\n        return 2;\n    }\n    if (n == 3) {\n        return\
    \ 0;\n    }\n    if (n == 4) {\n        return 4;\n    }\n    long current = 4;\n\
    \    long prev1 = 0;\n    long prev2 = 2;\n    long prev3 = 0;\n    long prev4\
    \ = 4;\n    for (long i = 5; i <= n; i++) {\n        current = prev1 + prev2 +\
    \ prev3 + prev4;\n        prev1 = prev2;\n        prev2 = prev3;\n        prev3\
    \ = prev4;\n        prev4 = current;\n    }\n    return current;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk8iw3xyt.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpk8iw3xyt.__unittest_L50_C1() [0x427af0]

    ??:? void tmpk8iw3xyt.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a, b, c, d, e;\n\
    \    a = 0;\n    b = 0;\n    c = 2;\n    d = 0;\n    if (n == 0L) {\n        return\
    \ a;\n    }\n    if (n == 1L) {\n        return b;\n    }\n    if (n == 2L) {\n\
    \        return c;\n    }\n    if (n == 3L) {\n        return d;\n    }\n    foreach\
    \ (i; 4L .. n + 1L) {\n        e = a + b + c + d;\n        a = b;\n        b =\
    \ c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n \
    \   alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n    if (n < 0L) \n        return\
    \ -1L;\n    else \n        if (n < 4L) \n            return fib4(n);\n       \
    \ else \n            long fib[] = [0L, 0L, 2L, 0L];\n            foreach (i; 4\
    \ .. n + 1) \n                fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4]\
    \ + fib[(i - 3) % 4] + fib[(i - 4) % 4];\n            return fib[n % 4];\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy5xbq2y0.d(20): Error: cannot use function constraints for non-template
    functions. Use `static if` instead

    /tmp/tmpy5xbq2y0.d(20): Error: declaration expected, not `if`

    /tmp/tmpy5xbq2y0.d(22): Error: declaration expected, not `else`

    /tmp/tmpy5xbq2y0.d(25): Error: declaration expected, not `else`

    /tmp/tmpy5xbq2y0.d(27): Error: declaration expected, not `foreach`

    /tmp/tmpy5xbq2y0.d(27): Error: declaration expected, not `4`

    /tmp/tmpy5xbq2y0.d(29): Error: declaration expected, not `return`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy5xbq2y0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    //Tuple!(long, long,\
    \ long, long) fib4s = tuple(0L, 0L, 2L, 0L);\n    //Tuple!(long, long, long, long)\
    \ fib4s_n1 = tuple(0L, 0L, 2L, 0L);\n    //Tuple!(long, long, long, long) fib4s_n2\
    \ = tuple(0L, 0L, 2L, 0L);\n    //Tuple!(long, long, long, long) fib4s_n3 = tuple(0L,\
    \ 0L, 2L, 0L);\n    //Tuple!(long, long, long, long) fib4s_n4 = tuple(0L, 0L,\
    \ 2L, 0L);\n    //Tuple!(long, long, long, long) fib4s_temp = tuple(0L, 0L, 2L,\
    \ 0L);\n    //if (n <= 3L) return fib4s[n];\n    //else {\n    //    for (long\
    \ i = 4L; i <= n; i++) {\n    //        fib4s_n1[0] = fib4s[0];\n    //      \
    \  fib4s_n1[1] = fib4s[1];\n    //        fib4s_n1[2] = fib4s[2];\n    //    \
    \    fib4s_n1[3] = fib4s[3];\n    //        fib4s_n2[0] = fib4s_n1[1];\n    //\
    \        fib4s_n2[1] = fib4s_n1[2];\n    //        fib4s_n2[2] = fib4s_n1[3];\n\
    \    //        fib4s_n2[3] = fib4s_n1[0];\n    //        fib4s_n3[0] = fib4s_n2[1];\n\
    \    //        fib4s_n3[1] = fib4s_n2[2];\n    //        fib4s_n3[2] = fib4s_n2[3];\n\
    \    //        fib4s_n3[3] = fib4\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbzppzemc.d(42): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbzppzemc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tlong a, b, c, d, e;\n\t\
    a = 0;\n\tb = 0;\n\tc = 2;\n\td = 0;\n\te = 4;\n\tlong temp = 0;\n\tif (n == 0)\
    \ {\n\t\treturn a;\n\t}\n\telse if (n == 1) {\n\t\treturn b;\n\t}\n\telse if (n\
    \ == 2) {\n\t\treturn c;\n\t}\n\telse if (n == 3) {\n\t\treturn d;\n\t}\n\telse\
    \ if (n == 4) {\n\t\treturn e;\n\t}\n\telse {\n\t\tfor (long i = 0; i < n - 4;\
    \ i++) {\n\t\t\ttemp = a + b + c + d + e;\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\t\
    c = d;\n\t\t\td = e;\n\t\t\te = temp;\n\t\t}\n\t\treturn temp;\n\t}\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpikmnj9qq.d(59): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmpikmnj9qq.__unittest_L55_C1() [0x427b10]

    ??:? void tmpikmnj9qq.__modtest() [0x427b88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 0) return 0;\n\
    \    if (n <= 3) return 2;\n    auto value = fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4);\n    return value;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp39c_zixd.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427da5]

    ??:? void tmp39c_zixd.__unittest_L26_C1() [0x427aac]

    ??:? void tmp39c_zixd.__modtest() [0x427b24]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bacb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a95e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]

    ??:? runModuleUnitTests [0x42b8a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] look_up = [0L,\
    \ 0L, 2L, 0L];\n    alias H = Tuple!(long, long, long, long);\n    alias T = Tuple!(long,\
    \ long, long, long);\n    H head = tuple(0L, 0L, 2L, 0L);\n    T tail = tuple(1L,\
    \ 0L, 0L, 1L);\n    for (long i = 1L; i <= n; i++) \n    {\n        H new_head\
    \ = tuple(head[0] * tail[0] + head[1] * tail[2],\n            head[0] * tail[1]\
    \ + head[1] * tail[3],\n            head[2] * tail[0] + head[3] * tail[2],\n \
    \           head[2] * tail[1] + head[3] * tail[3]);\n        head = new_head;\n\
    \    }\n    return head[2];\n}\nunittest \n{\n    assert(fib4(5L) == 4L);\n  \
    \  assert(fib4(6L) == 8L);\n    assert(fib4(7L) == 14L);\n}\nunittest\n{\n   \
    \ alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphdkzy3o0.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x4290fd]

    ??:? void tmphdkzy3o0.__unittest_L36_C1() [0x4284cc]

    ??:? void tmphdkzy3o0.__modtest() [0x428b64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dc4f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42cb5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431485]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431934]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431411]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42cb35]

    ??:? runModuleUnitTests [0x42da25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42954c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n    {\n\
    \        throw new Exception(\"Input must be >= 0\");\n    }\n    if (n == 0)\n\
    \    {\n        return 0;\n    }\n    long[] startSeq = [0, 0, 2, 0];\n    auto\
    \ startSeqGen = cycle(startSeq);\n    long curr = 0;\n    long next = 0;\n   \
    \ long temp = 0;\n    for (long i = 0; i < n; i++)\n    {\n        curr = *startSeqGen;\n\
    \        startSeqGen.next();\n        next = curr + *startSeqGen;\n        startSeqGen.next();\n\
    \        temp = curr + next + *startSeqGen;\n        startSeqGen.next();\n   \
    \     curr = next;\n        next = temp;\n    }\n    return next;\n}\n// \n//\
    \ public void shouldCalculateFib4() {\n//         assertThat(fib4(1L), is(0L));\n\
    //         assertThat(fib4(2L), is(2L));\n//         assertThat(fib4(3L), is(0L));\n\
    //         assertThat(fib4(4L), is(2L));\n//         assertThat(fib4(5L), is(4L));\n\
    //         assertThat(fib4(6L), is(8L));\n//         assertThat(fib4(7L), is(14L));\n\
    //     }\n// }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpamw0npf2.d(30): Error: undefined identifier `cycle`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpamw0npf2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    Tuple!(long, long, long,\
    \ long) a = tuple(0L, 0L, 2L, 0L);\n    long p = 0L;\n    long q = 0L;\n    long\
    \ r = 2L;\n    long s = 0L;\n    long i = 3L;\n    while (true) {\n        if\
    \ ((i == n))\n        {\n            return a[0];\n        }\n        p = a[0];\n\
    \        q = a[1];\n        r = a[2];\n        s = a[3];\n        a[0] = p + q\
    \ + r + s;\n        a[1] = p;\n        a[2] = q;\n        a[3] = r;\n        i\
    \ = i + 1L;\n    }\n    return a[0];\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprs38npca.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x428c35]

    ??:? void tmprs38npca.__unittest_L44_C1() [0x4280c1]

    ??:? void tmprs38npca.__modtest() [0x4286a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d563]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c472]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430d99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431248]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430d25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c449]

    ??:? runModuleUnitTests [0x42d339]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429084]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    auto fibnums = tuple(0L,\
    \ 0L, 2L, 0L);\n    for (long i = 0; i < n - 3; i++)\n    {\n        fibnums =\
    \ tuple(fibnums[1], fibnums[2], fibnums[3], fibnums[0] + fibnums[1] + fibnums[2]\
    \ + fibnums[3]);\n    }\n    return fibnums[3];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n       \
    \ return (n > 1) ? 2L : n;\n    long[3] a = [ 0L, 0L, 2L ];\n    long[3] b = [\
    \ 0L, 0L, 2L ];\n    while (--n >= 4) \n    {\n        b[0] = b[1];\n        b[1]\
    \ = b[2];\n        b[2] = a[0] + a[1] + a[2] + b[0];\n        a[0] = a[1];\n \
    \       a[1] = a[2];\n        a[2] = b[2];\n    }\n    return b[2];\n}\n// MODULES_DEFINITION:\
    \ std.algorithm, std.math, std.typecons\n// MODULES_IMPORT: std.algorithm, std.math,\
    \ std.typecons\n// FILE: tmp0.kt\n//import std.math;\n//import std.typecons;\n\
    //import std.algorithm;\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvaadl87t.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dad]

    ??:? void tmpvaadl87t.__unittest_L42_C1() [0x427ab8]

    ??:? void tmpvaadl87t.__modtest() [0x427b30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bad3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a966]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]

    ??:? runModuleUnitTests [0x42b8a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n <= 2) \n    \
    \    return n; \n  \n    long fibo[] = new long[n + 1]; \n    fibo[0] = 0; \n\
    \    fibo[1] = 0; \n    fibo[2] = 2; \n    fibo[3] = 0; \n  \n    for (long i\
    \ = 4; i <= n; i++) \n        fibo[(int)i] = fibo[(int)i - 1] + fibo[(int)i -\
    \ 2] + fibo[(int)i - 3] + fibo[(int)i - 4]; \n  \n    return fibo[(int)n]; \n\
    } \n/*\nGiven a list of country names, and the name of a starting country, return\
    \ the shortest cycle of countries such that each country in the cycle is next\
    \ to a country with a larger name.\n   >>> country_cycle([\"Antigua and Barbuda\"\
    , \"Argentina\", \"Brazil\", \"Venezuela\"], \"Brazil\")\n   ['Brazil', 'Venezuela',\
    \ 'Argentina', 'Antigua and Barbuda']\n   >>> country_cycle([\"Argentina\", \"\
    Antigua and Barbuda\", \"Brazil\", \"Venezuela\"], \"Brazil\")\n   ['Brazil',\
    \ 'Argentina', 'Antigua and Barbuda', 'Venezuela']\n   >>> country_cycle([\"Dominica\"\
    , \"Zimbabwe\", \"Antigua and Barbuda\", \"Grenada\", \"Turks and Caicos Islands\"\
    , \"Algeria\", \"Brazil\", \"Chile\", \"Venezuela\"], \"Dominica\")\n   ['Dominica',\
    \ 'Antigua and Barbuda', 'Brazil', 'Chile', 'Venezuela', 'Algeria', 'Zimbabwe',\
    \ 'Grenada', 'Turks and Caicos Islands']\n*/\nalias Country = string;\nimmutable\
    \ string[] country_cycle(string[] countries, string start_country)\n{\n    string[]\
    \ result = start_country;\n    int index = result.length;\n    while (index <\
    \ countries.length)\n    {\n        foreach (country; countries)\n        {\n\
    \            if (country.length() >= start_country.length())\nunittest\n{\n  \
    \  alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjo88p379.d(24): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] fibo`

    /tmp/tmpjo88p379.d(31): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpjo88p379.d(31): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpjo88p379.d(31): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpjo88p379.d(31): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpjo88p379.d(31): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpjo88p379.d(33): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpjo88p379.d(54): Error: found `unittest` instead of statement

    /tmp/tmpjo88p379.d(63): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpjo88p379.d(63): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjo88p379.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    static long[ulong] memo;\n\
    \    return memo[n] = n == 0 ? 0L :\n                     n == 1 ? 0L :\n    \
    \                 n == 2 ? 2L :\n                     n == 3 ? 0L :\n        \
    \             memo[n] != 0 ? memo[n] :\n                     fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4);\n}\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpit33nziq.d(26): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428942]

    ??:? long tmpit33nziq.fib4(long) [0x427b6b]

    ??:? void tmpit33nziq.__unittest_L29_C1() [0x427ca1]

    ??:? void tmpit33nziq.__modtest() [0x427d30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d853]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4286ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a6cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a75c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a659]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4286c5]

    ??:? runModuleUnitTests [0x42d629]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*)'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    import std.range;\n\
    \    return iota(1, n+1).fold!(a =>\n    {\n        // Add the last 4 elements\
    \ and take the remainder, so we will always store a constant amount of data and\
    \ no more\n        enum div = 10000000000L;\n        static long a0 = 0;\n   \
    \     static long a1 = 0;\n        static long a2 = 2;\n        static long a3\
    \ = 0;\n        static long a4 = 0;\n        static long last = 0;\n        static\
    \ long next = a2;\n        long result = (a0 + a1 + a2 + a3) % div;\n        a0\
    \ = a1;\n        a1 = a2;\n        a2 = a3;\n        a3 = a4;\n        a4 = result;\n\
    \        last = next;\n        next = result;\n        return result;\n    }\n\
    \    );\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpypi5ig4o.d(22): Error: no property `fold` for type `Result`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpypi5ig4o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    /*\n    2 solutions:\n\
    \    1) Generate and check the next fib4 number (kinda slow)\n    2) Generate\
    \ and check all fib4 numbers up to that number (much faster)\n    */\n    long\
    \ fib = 0L;\n    long fib1 = 0L;\n    long fib2 = 2L;\n    long fib3 = 0L;\n \
    \   long fib4 = 0L;\n    long sum = 0L;\n    long i = 4L;\n    if (n == 0L) \n\
    \    {\n        return 0L;\n    }\n    else if (n == 1L) \n    {\n        return\
    \ 0L;\n    }\n    else if (n == 2L) \n    {\n        return 2L;\n    }\n    else\
    \ if (n == 3L) \n    {\n        return 0L;\n    }\n    else \n    {\n        sum\
    \ = fib1 + fib2 + fib3 + fib4;\n        for (; i <= n; i++) \n        {\n    \
    \        if (i == 4L) \n            {\n                fib = 2L;\n           \
    \ }\n            else \n            {\n                fib = sum;\n          \
    \  }\n            fib1 = fib2;\n            fib2 = fib3;\n            fib3 = fib4;\n\
    \            fib4 = fib;\n            sum = fib1 + fib2 + fib3 + fib4;\n     \
    \   }\n        return fib;\n    }\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp17uu6vhq.d(76): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmp17uu6vhq.__unittest_L71_C1() [0x427b19]

    ??:? void tmp17uu6vhq.__modtest() [0x427b70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0L) \n    {\n\
    \        return 0L;\n    } \n    else if (n == 1L) \n    {\n        return 0L;\n\
    \    } \n    else if (n == 2L) \n    {\n        return 2L;\n    } \n    else if\
    \ (n == 3L) \n    {\n        return 0L;\n    } \n    else \n    {\n        long[]\
    \ arr = new long[n];\n        arr[0L] = 0L;\n        arr[1L] = 0L;\n        arr[2L]\
    \ = 2L;\n        arr[3L] = 0L;\n        for (long i = 4L; i < n; i++) \n     \
    \   {\n            arr[i] = arr[i - 1L] + arr[i - 2L] + arr[i - 3L] + arr[i -\
    \ 4L];\n        }\n        return arr[n - 1L];\n    }\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpirnqrvmh.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281bd]

    ??:? void tmpirnqrvmh.__unittest_L51_C1() [0x427ec4]

    ??:? void tmpirnqrvmh.__modtest() [0x427f3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1bb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b04e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430788]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430265]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b025]

    ??:? runModuleUnitTests [0x42bf91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428680]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long temp;\n    foreach (i; 0\
    \ .. n)\n    {\n        temp = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = temp;\n    }\n    return a;\n}\nunittest\n{\n   \
    \ alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164104
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) \n    {\n\
    \        return 0;\n    }\n    else if (n == 1) \n    {\n        return 0;\n \
    \   }\n    else if (n == 2) \n    {\n        return 2;\n    }\n    else if (n\
    \ == 3) \n    {\n        return 0;\n    }\n    else \n    {\n        return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    }\n}\nunittest\n{\n   \
    \ alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long p1 = 0;\n    long\
    \ p2 = 0;\n    long p3 = 2;\n    long p4 = 0;\n    long temp = 0;\n    if (n <\
    \ 4) \n    {\n        switch (n) \n        {\n            case 0: return 0;\n\
    \            case 1: return 0;\n            case 2: return 2;\n            case\
    \ 3: return 0;\n        }\n    }\n    else \n    {\n        for (int i = 4; i\
    \ <= n; i++) \n        {\n            temp = p4;\n            p4 = p1 + p2 + p3\
    \ + p4;\n            p1 = p2;\n            p2 = p3;\n            p3 = temp;\n\
    \        }\n    }\n    return p4;\n}\n/*\nWrite a function to retrieve the lowest\
    \ common ancestor of two nodes in a binary tree.\n    Here's a Node class you\
    \ can use in your solution:\n    static class Node {\n        Node left;\n   \
    \     Node right;\n        int val;\n        Node(int val) { this.val = val; }\n\
    \    }\n    >>> lowestCommonAncestor(Node(1), Node(2), Node(3))\n    1\n    >>>\
    \ lowestCommonAncestor(Node(1), Node(2), Node(4))\n    1\n    >>> lowestCommonAncestor(Node(3),\
    \ Node(6), Node(8))\n    6\n    >>> lowestCommonAncestor(Node(3), Node(8), Node(6))\n\
    \    6\n    >>> lowestCommonAncestor(Node(3), Node(1), Node(8))\n    3\n*/\n//\
    \ the result is LCA, the level of LCA\ntuple!(Node, int) lowestCommonAncestor(Node\
    \ p, Node q, Node root) \n{\n    if (root is null) \n    {\n        return tuple(null,\
    \ -1);\n    }\n    if (root == p || root == q) \n    {\n        return tuple(root,\
    \ 0);\n    }\n    auto left = lowestCommonAncestor(p, q, root.left);\n    auto\
    \ right = lowestCommonAncestor(p, q, root.\nunittest\n{\n    alias candidate =\
    \ fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprllyr4_i.d(82): Error: identifier expected following `.`, not `unittest`

    /tmp/tmprllyr4_i.d(83): Error: found `{` when expecting `,`

    /tmp/tmprllyr4_i.d(84): Error: expression expected, not `alias`

    /tmp/tmprllyr4_i.d(84): Error: found `candidate` when expecting `,`

    /tmp/tmprllyr4_i.d(84): Error: expression expected, not `=`

    /tmp/tmprllyr4_i.d(84): Error: found `fib4` when expecting `,`

    /tmp/tmprllyr4_i.d(84): Error: expression expected, not `;`

    /tmp/tmprllyr4_i.d(86): Error: found `assert` when expecting `,`

    /tmp/tmprllyr4_i.d(86): Error: found `;` when expecting `,`

    /tmp/tmprllyr4_i.d(87): Error: found `;` when expecting `,`

    /tmp/tmprllyr4_i.d(88): Error: found `;` when expecting `,`

    /tmp/tmprllyr4_i.d(89): Error: found `;` when expecting `,`

    /tmp/tmprllyr4_i.d(90): Error: expression expected, not `}`

    /tmp/tmprllyr4_i.d(91): Error: found `void` when expecting `,`

    /tmp/tmprllyr4_i.d(91): Error: found `{` when expecting `,`

    /tmp/tmprllyr4_i.d(91): Error: expression expected, not `}`

    /tmp/tmprllyr4_i.d(9'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0L) \n    {\n\
    \        return 0L;\n    }\n    if (n <= 3L) \n    {\n        return 2L;\n   \
    \ }\n    auto a = 0L;\n    auto b = 0L;\n    auto c = 2L;\n    auto d = 2L;\n\
    \    auto e = 0L;\n    foreach (long i; 1 .. n - 2) \n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7hdrrlmy.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmp7hdrrlmy.__unittest_L44_C1() [0x427ac4]

    ??:? void tmp7hdrrlmy.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) return 0;\n\
    \    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n  assert(n >= 0L); \n \
    \ if (n < 4L) \n    return n * 2L; \n  return fib4(n - 1L) + fib4(n - 2L) + fib4(n\
    \ - 3L) + fib4(n - 4L); \n} \nunittest\n{\n    alias candidate = fib4;\n\n   \
    \ assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfqd9q8ma.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e81]

    ??:? void tmpfqd9q8ma.__unittest_L26_C1() [0x427ad4]

    ??:? void tmpfqd9q8ma.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbcd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43007c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb59]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]

    ??:? runModuleUnitTests [0x42b97d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n    {\n\
    \        return -1;\n    }\n    if (n < 4)\n    {\n        return n;\n    }\n\
    \    else\n    {\n        long a = 0;\n        long b = 1;\n        long c = 2;\n\
    \        long d = 3;\n        long temp = 0;\n        long index = 3;\n      \
    \  while (index < n)\n        {\n            temp = a + b + c + d;\n         \
    \   a = b;\n            b = c;\n            c = d;\n            d = temp;\n  \
    \          index++;\n        }\n        return temp;\n    }\n}\n/*\nCompute the\
    \ sequence of length n in which each element is the number of elements that follow\
    \ it in the input that have a larger value.\n    >>> compute_sequences_length_n(vector(1L,\
    \ 2L, 3L, 4L))\n    vector(0L, 0L, 0L, 0L)\n    >>> compute_sequences_length_n(vector(4L,\
    \ 3L, 2L, 1L))\n    vector(3L, 2L, 1L, 0L)\n    >>> compute_sequences_length_n(vector(1L,\
    \ 1L, 1L, 1L))\n    vector(0L, 0L, 0L, 0L)\n*/\nvector<long> compute_sequences_length_n(vector<long>\
    \ arr) \n{\n    long size = arr.size();\n    vector<long> res(size);\n    if (size\
    \ == 0)\n    {\n        return res;\n    }\n    long index = size - 1;\n    long\
    \ num = 0;\n    long key = arr[index];\n    for (long i = size - 2; i >= 0; i--)\n\
    \    {\n        if (arr[i] > key)\n        {\n            num++;\n        }\n\
    \        else\n        {\n            res[index] = num;\n            index--;\n\
    \            while (index > i)\n            {\n                res[index] = 0;\n\
    \                index--;\n            }\n            key = arr[i];\n        \
    \    num = 0;\n        }\n    }\n    res[\nunittest\n{\n    alias candidate =\
    \ fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2437u3ey.d(58): Error: no identifier for declarator `vector`

    /tmp/tmp2437u3ey.d(58): Error: declaration expected, not `<`

    /tmp/tmp2437u3ey.d(61): Error: no identifier for declarator `vector`

    /tmp/tmp2437u3ey.d(61): Error: declaration expected, not `<`

    /tmp/tmp2437u3ey.d(62): Error: declaration expected, not `if`

    /tmp/tmp2437u3ey.d(65): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2437u3ey.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    while(n != 0)\n\
    \    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = e;\n        n--;\n    }\n    return e;\n}\n//--------------------------------------------------------------------------\n\
    /*\nGiven an array of integers and an integer \"k\", return the subarray of length\
    \ \"k\" that has the largest sum.\n    >>> largestSumSubarray([]int{1,2,3,4,5},\
    \ 2)\n    7\n    >>> largestSumSubarray([]int{1,2,3,4,5}, 3)\n    9\n    >>> largestSumSubarray([]int{1,2,3,4,5},\
    \ 4)\n    12\n    >>> largestSumSubarray([]int{1,2,3,4,5}, 5)\n    15\n*/\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpun0fw8we.d(53): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmpun0fw8we.__unittest_L49_C1() [0x427a88]

    ??:? void tmpun0fw8we.__modtest() [0x427b00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    assert(n >= 0);\n  \
    \  int[3] fibs = [0, 0, 2];\n    // Iterate until Fibonacci is greater than or\
    \ equal to n.\n    while (fibs[0] < n) {\n        // Calculate next Fibonacci\n\
    \        fibs[0] = fibs[1] + fibs[2] + fibs[0] + fibs[0];\n        // Shift fibs\n\
    \        int first = fibs[0];\n        fibs[0] = fibs[1];\n        fibs[1] = fibs[2];\n\
    \        fibs[2] = first;\n    }\n    // If Fibonacci is equal to n, return the\
    \ value.\n    if (fibs[0] == n) {\n        return fibs[2];\n    }\n    // Otherwise,\
    \ call fib4 recursively with next Fibonacci value.\n    return fib4(n - fibs[1])\
    \ + fib4(n - fibs[2]) + fib4(n - fibs[0]) + fib4(n - fibs[0]);\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy6qrj7d2.d(21): Assertion failure

    ----------------

    ??:? _d_assertp [0x427ddd]

    ??:? long tmpy6qrj7d2.fib4(long) [0x427a35]

    ??:? long tmpy6qrj7d2.fib4(long) [0x427a93]

    ??:? void tmpy6qrj7d2.__unittest_L40_C1() [0x427b01]

    ??:? void tmpy6qrj7d2.__modtest() [0x427b90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc0d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300bc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb99]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa51]

    ??:? runModuleUnitTests [0x42b9bd]

    ??:? void rt.dmain2._d_run_main(int, c'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3) \n    {\n\
    \        return (n < 2) ? 0 : 2;\n    }\n    long prev = 0;\n    long current\
    \ = 2;\n    long next = 0;\n    n -= 2;\n    while (n-- > 0) \n    {\n       \
    \ next = current + prev + (n == 1 ? 2 : 0);\n        prev = current;\n       \
    \ current = next;\n    }\n    return next;\n}\n/*\nWrite a function that returns\
    \ the length of the longest string in the provided array.\n>>> longest_word([\"\
    pizza\", \"cheese\", \"salad\"])\n6\n>>> longest_word([\"do\", \"while\", \"for\"\
    , \"if\"])\n3\n>>> longest_word([\"go\", \"program\", \"hello\", \"world\"])\n\
    7\n>>> longest_word([\"pizza\", \"cheese\", \"salad\"])\n6\n>>> longest_word([\"\
    functions\", \"variables\", \"pointers\", \"arrays\"])\n9\n*/\nlong longest_word(string[]\
    \ words) \n{\n    return max(map!(length)(words));\n}\n/*\nWrite a function that\
    \ takes an input string and returns the characters of the string in reverse order.\
    \  Do not use recursion.\n    >>> reverse(\"life\")\n    \"efil\"\n    >>> reverse(\"\
    hello\")\n    \"olleh\"\n    >>> reverse(\"world\")\n    \"dlrow\"\n    >>> reverse(\"\
    python\")\n    \"nohtyp\"\n    >>> reverse(\"programming\")\n    \"gnimmargorp\"\
    \n*/\nstring reverse(string s) \n{\n    string output = \"\";\n    for (int i\
    \ = s.length; i-- > 0;) \n    {\n        output ~= s[i];\n    }\n    return output;\n\
    }\n/*\nWrite a function that reverses a string without using the reverse function.\n\
    >>> reverse_string(\"life\")\n\"efil\"\n>>> reverse_string(\"hello\")\n\"olleh\"\
    \n>>> reverse_string(\"world\")\n\"dlrow\"\n>>> reverse_string(\"python\")\n\"\
    nohtyp\"\n>>> reverse_string(\"programming\")\n\"gnimmargorp\"\n*/\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcs82pypf.d(52): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpcs82pypf.d(70): Error: cannot implicitly convert expression `s.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcs82pypf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3)\n      \
    \  return (n == 3) ? 0 : 2 * n;\n    return fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4);\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpln5oe5qg.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427da5]

    ??:? void tmpln5oe5qg.__unittest_L25_C1() [0x427aac]

    ??:? void tmpln5oe5qg.__modtest() [0x427b24]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bacb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a95e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]

    ??:? runModuleUnitTests [0x42b8a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    long a = 0, b = 0,\
    \ c = 2, d = 0, e; \n    if (n == 0) \n        return a; \n    for (long i = 2;\
    \ i <= n; i++) \n    { \n        e = a + b + c + d; \n        a = b; \n      \
    \  b = c; \n        c = d; \n        d = e; \n    } \n    return d; \n} \n/*\n\
    \    You are given a list of integers as a regular array, and a sorted array of\
    \ integers (ascending) as a second parameter.\n    The method should find the\
    \ index in the regular array, of the first element in the second array, such that\
    \ the value at that index is greater than the provided value.\n    If there is\
    \ no such index, the method should return -1.\n    For example, given [2, 3, 7,\
    \ 8, 9, 10] and [3, 5, 6, 7, 8], the correct return value would be 2, since 8\
    \ is the first element in the regular array whose value is greater than 7.\n \
    \   >>> firstGreater([2, 3, 7, 8, 9, 10], [3, 5, 6, 7, 8])\n    2\n    >>> firstGreater([2,\
    \ 3, 7, 8, 9, 10], [3, 5, 6, 7, 8, 11])\n    -1\n    >>> firstGreater([2, 3, 7,\
    \ 8, 9, 10], [3, 5, 6, 7, 8, 9])\n    4\n*/\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpim9wp2a3.d(50): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmpim9wp2a3.__unittest_L46_C1() [0x427a9c]

    ??:? void tmpim9wp2a3.__modtest() [0x427b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    //if (n<=4)\n    //\
    \    return n-1;\n    auto a=0L,b=0L,c=2L,d=0L;\n    long i=4;\n    while(i<=n)\n\
    \    {\n        auto tmp=a+b+c+d;\n        a=b;\n        b=c;\n        c=d;\n\
    \        d=tmp;\n        i++;\n    }\n    return a+b+c+d;\n}\nunittest\n{\n  \
    \  alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuzjo62ew.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpuzjo62ew.__unittest_L36_C1() [0x427a94]

    ??:? void tmpuzjo62ew.__modtest() [0x427b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n  //Tuple!(uint,uint,uint,uint)\
    \ fib4 = Tuple!(uint,uint,uint,uint)(0, 0, 2, 0);\n  const long fib4 = [0, 0,\
    \ 2, 0];\n  long a = fib4[0];\n  long b = fib4[1];\n  long c = fib4[2];\n  long\
    \ d = fib4[3];\n  foreach (i; 1..n) \n  {\n    a = b;\n    b = c;\n    c = d;\n\
    \    d = a + b + c + d;\n  }\n  return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0_1096uk.d(22): Error: cannot implicitly convert expression `[0,
    0, 2, 0]` of type `int[]` to `const(long)`

    /tmp/tmp0_1096uk.d(23): Error: only one index allowed to index `const(long)`

    /tmp/tmp0_1096uk.d(24): Error: only one index allowed to index `const(long)`

    /tmp/tmp0_1096uk.d(25): Error: only one index allowed to index `const(long)`

    /tmp/tmp0_1096uk.d(26): Error: only one index allowed to index `const(long)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_1096uk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\t//fib4(7) = fib4(6) +\
    \ fib4(5) + fib4(4) + fib4(3)\n\t//fib4(7) = fib4(6) + fib4(5) + fib4(4) + 0 (fib4(3)\
    \ is 0)\n\t//fib4(7) = fib4(6) + fib4(5) + 4 (fib4(4) is 4)\n\t//fib4(7) = fib4(6)\
    \ + fib4(5) + 4 = 0 + fib4(5) + 4 = fib4(5) + 4 = 4 + 4 = 8\n\tlong[] sequence\
    \ = new long[4];\n\tsequence[0] = 0;\n\tsequence[1] = 0;\n\tsequence[2] = 2;\n\
    \tsequence[3] = 0;\n\tif (n < 4)\n\t\treturn sequence[n];\n\tlong temp;\n\tfor\
    \ (long x = 4; x <= n; x++)\n\t{\n\t\ttemp = sequence[3];\n\t\tsequence[3] = sequence[2]\
    \ + sequence[1] + sequence[0] + sequence[3];\n\t\tsequence[0] = sequence[1];\n\
    \t\tsequence[1] = sequence[2];\n\t\tsequence[2] = temp;\n\t}\n\treturn sequence[3];\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[11] sequence;\n\
    \    sequence[0] = 0;\n    sequence[1] = 0;\n    sequence[2] = 2;\n    sequence[3]\
    \ = 0;\n    if (n < 4) \n    {\n        return sequence[n];\n    } \n    else\
    \ \n    {\n        for (long i = 4; i <= n; i++) \n        {\n            sequence[i]\
    \ = sequence[i - 1] + sequence[i - 2] + sequence[i - 3] + sequence[i - 4];\n \
    \       }\n        return sequence[n];\n    }\n}\n/*\nThis problem is a variation\
    \ of the \"FizzBuzz\" problem.\n    Write a function that returns a list of the\
    \ first 100 integers to be used in the problem.\n    The function should also\
    \ return a dictionary mapping multiples of 3 to \"Fizz\", multiples of 5 to \"\
    Buzz\", and multiples of 15 to \"FizzBuzz\".\n    The function should return a\
    \ list of the first 100 integers and the dictionary mapping multiples of 3, 5,\
    \ and 15 to \"Fizz\", \"Buzz\", and \"FizzBuzz\", respectively.\n    Note that\
    \ the numbers 1 and 2 are not considered to be multiples of 3, 5, or 15.\n   \
    \ >>> fizzbuzz_dict()\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\
    \ 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\
    \ 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,\
    \ 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\
    \ 92, 93, 94, 95, 96, 97, 98, 99, 100], {3: 'Fizz', 5: 'Buzz', 15\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsigp_j6g.d(39): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsigp_j6g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    return 0;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg9quj3m8.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d15]

    ??:? void tmpg9quj3m8.__unittest_L23_C1() [0x427a1c]

    ??:? void tmpg9quj3m8.__modtest() [0x427a94]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a8ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fa61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42f9ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8a5]

    ??:? runModuleUnitTests [0x42b811]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428164]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163162
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    /* Declare an array\
    \ to store Fibonacci numbers. */\n    long[] f = new long[n+1]; \n    long i;\
    \ \n  \n    /* 0th and 1st number of the series are 0 and 1*/\n    f[0] = 0; \n\
    \    f[1] = 0; \n    f[2] = 2; \n    f[3] = 0; \n  \n    for (i = 4; i <= n; i++)\
    \ \n    { \n       /* Add the previous 2 numbers in the series \n         and\
    \ store it */\n        f[i] = f[i-1] + f[i-2] + f[i-3] + f[i-4]; \n    } \n  \n\
    \    return f[n]; \n} \nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    switch(n)\n    {\n \
    \       case 0: return 0;\n        case 1: return 0;\n        case 2: return 2;\n\
    \        case 3: return 0;\n    }\n    long result = 0;\n    long cur0 = 0;\n\
    \    long cur1 = 0;\n    long cur2 = 2;\n    long cur3 = 0;\n    foreach(i; 4..n+1)\n\
    \    {\n        result = cur0 + cur1 + cur2 + cur3;\n        cur0 = cur1;\n  \
    \      cur1 = cur2;\n        cur2 = cur3;\n        cur3 = result;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    static assert(fib4(0) == 0);\n    static\
    \ assert(fib4(1) == 0);\n    static assert(fib4(2) == 2);\n    static assert(fib4(3)\
    \ == 0);\n    static assert(fib4(4) == 2);\n    static assert(fib4(5) == 4);\n\
    \    static assert(fib4(6) == 8);\n    static assert(fib4(7) == 14);\n    static\
    \ assert(fib4(8) == 24);\n    static assert(fib4(9) == 42);\n    static assert(fib4(10)\
    \ == 72);\n    static assert(fib4(11) == 120);\n    static assert(fib4(12) ==\
    \ 198);\n    static assert(fib4(13) == 324);\n    static assert(fib4(14) == 528);\n\
    \    static assert(fib4(15) == 856);\n    static assert(fib4(16) == 1384);\n \
    \   static assert(fib4(17) == 2240);\n    static assert(fib4(18) == 3644);\n \
    \   static assert(fib4(19) == 5928);\n    static assert(fib4(20) == 9572);\n \
    \   static assert(fib4(21) == 15500);\n    static assert(fib4(22) == 25012);\n\
    \    static assert(fib4(23) == 40512);\n   \nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdw92oiv4.d(70): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdw92oiv4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    while (n >= 4L)\n    {\n  \
    \      long t = d;\n        d = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = t;\n        n -= 1L;\n    }\n    if (n == 3L)\n    {\n        return\
    \ c;\n    }\n    else if (n == 2L)\n    {\n        return b;\n    }\n    else\
    \ if (n == 1L)\n    {\n        return a;\n    }\n    else\n    {\n        return\
    \ 0L;\n    }\n}\n// @expect error\nlong fib4(long n) \n{\n    long a = 0L;\n \
    \   long b = 0L;\n    long c = 2L;\n    long d = 0L;\n    while (n >= 4L)\n  \
    \  {\n        long t = d;\n        d = a + b + c + d;\n        a = b;\n      \
    \  b = c;\n        c = t;\n        n -= 1L;\n    }\n    if (n == 3L)\n    {\n\
    \        return c;\n    }\n    else if (n == 2L)\n    {\n        return b;\n \
    \   }\n    else if (n == 1L)\n    {\n        return a;\n    }\n    else\n    {\n\
    \        return 1L;\n    }\n}\n// @expect error\nlong fib4(long n) \n{\n    long\
    \ a = 0L;\n    long b = 0L;\n    long c = 2L;\n    long d = 0L;\n    while (n\
    \ >= 4L)\n    {\n        long t = d;\n        d = a + b + c + d;\n        a =\
    \ b;\n        b = c;\n        c = t;\n        n -= 1L;\n    }\n    if (n == 3L)\n\
    \    {\n        return c;\n    }\n    else if (n == 2L)\n    {\n        return\
    \ b;\n    }\n    else if\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx2k3d61a.d(109): Error: found `unittest` when expecting `(`

    /tmp/tmpx2k3d61a.d(118): Error: found `void` when expecting `)`

    /tmp/tmpx2k3d61a.d(118): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2k3d61a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    enum long MaxNumElements=2000;\n\
    \    Tuple!(long[], long[], long[], long[]) cache;\n    cache[0][0]=0;\n    cache[0][1]=0;\n\
    \    cache[0][2]=2;\n    cache[0][3]=0;\n    cache[1][0]=0;\n    cache[1][1]=2;\n\
    \    cache[1][2]=2;\n    cache[1][3]=2;\n    cache[2][0]=2;\n    cache[2][1]=2;\n\
    \    cache[2][2]=4;\n    cache[2][3]=2;\n    cache[3][0]=2;\n    cache[3][1]=4;\n\
    \    cache[3][2]=6;\n    cache[3][3]=4;\n    long fib4=0;\n    long k=4;\n   \
    \ foreach(idx;0..4)\n    {\n        fib4+=cache[0][idx];\n    }\n    if(n<4)\n\
    \    {\n        return fib4;\n    }\n    long i=4;\n    long j=0;\n    while(k<=n)\n\
    \    {\n        fib4=0;\n        cache[j][0]=cache[j][1];\n        cache[j][1]=cache[j][2];\n\
    \        cache[j][2]=cache[j][3];\n        cache[j][3]=0;\n        foreach(idx;0..4)\n\
    \        {\n            cache[j][3]+=cache[i%4][idx];\n        }\n        foreach(idx;0..4)\n\
    \        {\n            fib4+=cache[j][idx];\n        }\n        k++;\n      \
    \  j=(j+1)%4;\n        i++;\n    }\n    return fib4;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1a8u6uuq.d(54): Error: variable `j` cannot be read at compile time

    /tmp/tmp1a8u6uuq.d(54): Error: variable `j` cannot be read at compile time

    /tmp/tmp1a8u6uuq.d(55): Error: variable `j` cannot be read at compile time

    /tmp/tmp1a8u6uuq.d(55): Error: variable `j` cannot be read at compile time

    /tmp/tmp1a8u6uuq.d(56): Error: variable `j` cannot be read at compile time

    /tmp/tmp1a8u6uuq.d(56): Error: variable `j` cannot be read at compile time

    /tmp/tmp1a8u6uuq.d(57): Error: variable `j` cannot be read at compile time

    /tmp/tmp1a8u6uuq.d(60): Error: variable `j` cannot be read at compile time

    /tmp/tmp1a8u6uuq.d(60): Error: variable `i` cannot be read at compile time

    /tmp/tmp1a8u6uuq.d(64): Error: variable `j` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1a8u6uuq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\tif (n == 0)\n\t{\n\t\t\
    return 0;\n\t}\n\telse if (n == 1)\n\t{\n\t\treturn 0;\n\t}\n\telse if (n == 2)\n\
    \t{\n\t\treturn 2;\n\t}\n\telse if (n == 3)\n\t{\n\t\treturn 0;\n\t}\n\telse if\
    \ (n == 4)\n\t{\n\t\treturn 4;\n\t}\n\t\n\tlong a = 0;\n\tlong b = 0;\n\tlong\
    \ c = 2;\n\tlong d = 4;\n\tlong result = 0;\n\twhile (n-- > 4)\n\t{\n\t\tresult\
    \ = a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = result;\n\t}\n\
    \treturn result;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvrlg4474.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpvrlg4474.__unittest_L57_C1() [0x427ae0]

    ??:? void tmpvrlg4474.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i =\
    \ 3; i <= n; i++) \n    {\n        e = a + b + c + d;\n        a = b;\n      \
    \  b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\n/*\nGiven\
    \ a positive integer n, create a 2D array containing the digits 0-9 such that\
    \ the sum of any row, column, or diagonal is n. \nFor example, if n = 15, then\
    \ a 2D array containing the digits 0-9 such that the sum of any row, column, or\
    \ diagonal is 15. \nThe following shows one possible solution:\n7 8 1 5\n4 9 6\
    \ 2\n3 0 5 8\n1 2 4 9\nHere are some more examples:\n \nn=3:\n1 2 0\n0 3 1\n2\
    \ 0 3\n \nn=11:\n7 1 3\n2 9 5\n6 4 8\n \nn=13:\n5 2 6\n8 9 4\n3 7 1\n*/\ntemplate\n\
    \tint N;\n\tint[N][N] arr;\n\tint[N] sums;\n\tbool satisfiesSums;\n\tbool sumsSatisfied;\n\
    \tbool satisfiesDiags;\n\tbool diagsSatisfied;\n\tbool satisfiesRows;\n\tbool\
    \ rowsSatisfied;\n\tbool satisfied;\n\tint diagSum;\n\tint rowSum;\n\tint colSum;\n\
    \tstatic if (N == 2)\n\t{\n\t\tint[] options = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\
    \t\tint[][N] diags = [[(0, 0), (1, 1)],\n\t\t\t\t\t\t  [(0, 1), (1, 0)]];\n\t\t\
    int[][N] rows = [[(0, 0), (0, 1)],\n\t\t\t\t\t\t [(1, 0), (1, 1)]];\n\t\tint[][N]\
    \ cols = [[(0, 0), (1, 0)],\n\t\t\t\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp84vk13x5.d(62): Error: identifier expected following `template`

    /tmp/tmp84vk13x5.d(84): Error: expression expected, not `unittest`

    /tmp/tmp84vk13x5.d(85): Error: comma expected separating array initializers, not
    `{`

    /tmp/tmp84vk13x5.d(93): Error: comma expected separating array initializers, not
    `void`

    /tmp/tmp84vk13x5.d(93): Error: semicolon expected, not `main`

    /tmp/tmp84vk13x5.d(93): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmp84vk13x5.d(93): Error: no identifier for declarator `main()`

    /tmp/tmp84vk13x5.d(93): Error: matching `}` expected, not `End of File`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84vk13x5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    n -= 2;\n    if (n ==\
    \ -1) return 0;\n    if (n == 0) return 2;\n    if (n < -1) return 0;\n    long\
    \ sum = 0;\n    TypeTuple!(long, long, long, long) fib;\n    foreach (i; 0 ..\
    \ 4)\n        fib[i] = fib4(n - i);\n    for (int i = 0; i < 4; i++)\n       \
    \ sum += fib[i];\n    return sum;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy2dbk7oy.d(26): Error: template instance `TypeTuple!(long, long,
    long, long)` template `TypeTuple` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy2dbk7oy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n  if (n == 0) \n    return\
    \ 0; \n  if (n == 1) \n    return 0; \n  if (n == 2) \n    return 2; \n  if (n\
    \ == 3) \n    return 0; \n  long a = 0; \n  long b = 0; \n  long c = 2; \n  long\
    \ d = 0; \n  long i = 4; \n  long temp = 0; \n  while (i <= n) \n  { \n    temp\
    \ = a + b + c + d; \n    a = b; \n    b = c; \n    c = d; \n    d = temp; \n \
    \   i = i + 1; \n  } \n  return temp; \n} \n/*\nA matrix is a two-dimensional\
    \ structure that contains elements arranged in a grid of rows and columns. \n\
    A matrix can be visualized as a table with rows and columns, as shown below:\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_1xkzw3o.d(46): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1xkzw3o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n < 0)\n\
    \    {\n        return 0;\n    }\n    else if (n == 0)\n    {\n        return\
    \ 0;\n    }\n    else if (n == 1)\n    {\n        return 0;\n    }\n    else if\
    \ (n == 2)\n    {\n        return 2;\n    }\n    else if (n == 3)\n    {\n   \
    \     return 0;\n    }\n    else\n    {\n        foreach (i; 1 .. n-3)\n     \
    \   {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n\
    \            c = d;\n            d = e;\n        }\n        return e;\n    }\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ylijsr8.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmp6ylijsr8.__unittest_L59_C1() [0x427ae4]

    ??:? void tmp6ylijsr8.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    Tuple!(long, long, long,\
    \ long) fib = tuple(0L, 0L, 2L, 0L);\n    long temp;\n    while (n--) {\n    \
    \    temp = fib[0] + fib[1] + fib[2] + fib[3];\n        fib[0] = fib[1];\n   \
    \     fib[1] = fib[2];\n        fib[2] = fib[3];\n        fib[3] = temp;\n   \
    \ }\n    return fib[3];\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuw1ho64w.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428c25]

    ??:? void tmpuw1ho64w.__unittest_L32_C1() [0x428090]

    ??:? void tmpuw1ho64w.__modtest() [0x428690]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d553]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c462]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430d89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431238]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430d15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c439]

    ??:? runModuleUnitTests [0x42d329]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429074]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n  int a = 0;\n  int b =\
    \ 0;\n  int c = 2;\n  int d = 0;\n  if (n <= 0) \n  {\n    return 0;\n  }\n  if\
    \ (n == 1) \n  {\n    return 0;\n  }\n  if (n == 2) \n  {\n    return 2;\n  }\n\
    \  if (n == 3) \n  {\n    return 0;\n  }\n  for (int i = 0; i < n-3; i++) \n \
    \ {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return d;\n\
    }\n/*\nGiven a non-empty array of integers, return the k most frequent elements.\n\
    For example,\nGiven [1,1,1,2,2,3] and k = 2, return [1,2].\nNote: \nYou may assume\
    \ k is always valid, 1 \u2264 k \u2264 number of unique elements.\nYour algorithm's\
    \ time complexity must be better than O(n log n), where n is the array's size.\n\
    >>> topKFrequent([1,1,1,2,2,3], 2)\n[1, 2]\n>>> topKFrequent([3,2,1,2,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd7gtek0t.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd7gtek0t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    long dp[] = new long[(int)n\
    \ + 1]; \n    dp[0] = 0; \n    dp[1] = 0; \n    dp[2] = 2; \n    dp[3] = 0; \n\
    \    for (long i = 4; i <= n; i++) \n        dp[(int)i] = dp[(int)i - 1] + dp[(int)i\
    \ - 2] + dp[(int)i - 3] + dp[(int)i - 4]; \n    return dp[(int)n]; \n} \nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjn44l_uq.d(21): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] dp`

    /tmp/tmpjn44l_uq.d(21): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpjn44l_uq.d(27): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpjn44l_uq.d(27): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpjn44l_uq.d(27): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpjn44l_uq.d(27): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpjn44l_uq.d(27): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpjn44l_uq.d(28): Error: C style cast illegal, use `cast(int)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjn44l_uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long first = 0;\n  \
    \  long second = 0;\n    long third = 2;\n    long fourth = 0;\n    long result\
    \ = 0;\n    long counter = 0;\n    if (n == 0)\n    {\n        return 0;\n   \
    \ }\n    else if (n == 1)\n    {\n        return 0;\n    }\n    else if (n ==\
    \ 2)\n    {\n        return 2;\n    }\n    else if (n == 3)\n    {\n        return\
    \ 0;\n    }\n    else if (n == 4)\n    {\n        return 4;\n    }\n    else\n\
    \    {\n        while (counter < n - 4)\n        {\n            counter = counter\
    \ + 1;\n            result = first + second + third + fourth;\n            first\
    \ = second;\n            second = third;\n            third = fourth;\n      \
    \      fourth = result;\n        }\n        return result;\n    }\n}\n/*\nThe\
    \ Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's\
    \ defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n\
    \    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    \    Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n\
    \    8L\n    >>> fib4(7L)\n    14L\n*/\nlong fib4DC(long n)\n{\n    if (n == 0)\n\
    \    {\n        return 0;\n    }\n    else if (n == 1)\n    {\n        return\
    \ 0;\n    }\n    else if (n == 2)\n    {\n        return 2;\n    }\n    else if\
    \ (n == 3)\n    {\n        return 0;\n    }\n    else if (n == 4)\n    {\n   \
    \     return 4;\n    }\n    else\n    {\n        return fib4DC(\nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvy0q0qw.d(101): Error: expression expected, not `unittest`

    /tmp/tmpqvy0q0qw.d(102): Error: found `{` when expecting `,`

    /tmp/tmpqvy0q0qw.d(103): Error: expression expected, not `alias`

    /tmp/tmpqvy0q0qw.d(103): Error: found `candidate` when expecting `,`

    /tmp/tmpqvy0q0qw.d(103): Error: expression expected, not `=`

    /tmp/tmpqvy0q0qw.d(103): Error: found `fib4` when expecting `,`

    /tmp/tmpqvy0q0qw.d(103): Error: expression expected, not `;`

    /tmp/tmpqvy0q0qw.d(105): Error: found `assert` when expecting `,`

    /tmp/tmpqvy0q0qw.d(105): Error: found `;` when expecting `,`

    /tmp/tmpqvy0q0qw.d(106): Error: found `;` when expecting `,`

    /tmp/tmpqvy0q0qw.d(107): Error: found `;` when expecting `,`

    /tmp/tmpqvy0q0qw.d(108): Error: found `;` when expecting `,`

    /tmp/tmpqvy0q0qw.d(109): Error: expression expected, not `}`

    /tmp/tmpqvy0q0qw.d(110): Error: found `void` when expecting `,`

    /tmp/tmpqvy0q0qw.d(110): Error: found `{` when expecting `,`

    /tmp/tmpqvy0q0qw.d(110): Error: expression expected, not `}`

    /tmp/tmpqvy0q0qw.d'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long x = 0L;\n    long\
    \ y = 0L;\n    long z = 2L;\n    long w = 0L;\n    long temp = 0L;\n    if (n\
    \ < 4L)\n    {\n        return n;\n    }\n    for (long i = 4L; i <= n; i++)\n\
    \    {\n        temp = z;\n        z = z + x + y + w;\n        w = x;\n      \
    \  x = y;\n        y = temp;\n    }\n    return z;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0j_6_nyq.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmp0j_6_nyq.__unittest_L40_C1() [0x427ab9]

    ??:? void tmp0j_6_nyq.__modtest() [0x427b10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n==0) \n      \
    \  return 0; \n    if (n==1) \n        return 0; \n    if (n==2) \n        return\
    \ 2; \n    if (n==3) \n        return 0; \n    long a=0,b=0,c=2,d=0; \n    long\
    \ temp; \n    for (long i=4;i<=n;i++) \n    { \n        temp=d; \n        d=c+b+a+d;\
    \ \n        a=b; \n        b=c; \n        c=temp; \n    } \n    return d; \n}\
    \ \n/*\nThe Largest Prime Factor of a number is the largest prime number that\
    \ divides the number exactly.  For example, the largest prime factor of 6 is 3.\n\
    \    Write a function to compute the largest prime factor of the input number.\n\
    \    >>> largestPrimeFactor(6L)\n    3L\n    >>> largestPrimeFactor(5L)\n    5L\n\
    \    >>> largestPrimeFactor(86L)\n    43L\n*/\nlong largestPrimeFactor(long number)\
    \ \n{ \n    long largestPrimeFactor = 0; \n    long limit = number / 2; \n   \
    \ for (long factor = 2; factor <= limit; factor++) \n    { \n        if (number\
    \ % factor == 0) \n        { \n            if (isPrime(factor)) \n           \
    \ { \n                largestPrimeFactor = factor; \n            } \n        }\
    \ \n    } \n    return largestPrimeFactor; \n} \n/*\nThe Largest Difference of\
    \ a list is defined as the largest difference between any 2 elements of the list.\n\
    \    Write a function to compute the largest difference of a list.\n    >>> largestDifference([1,\
    \ 2, 3, 4, 5])\n    4\n    >>> largestDifference([5, 4, 3, 2, 1])\n    4\n   \
    \ >>> largestDifference([5, 4, 3, 2, 1, 2, 3, 4, 5])\n    4\n*/\nlong largestDifference(const(long)[]\
    \ list) \n{ \n    long largest = 0; \n    foreach\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7hm4dqjg.d(81): Error: found `unittest` when expecting `(`

    /tmp/tmp7hm4dqjg.d(82): Error: basic type expected, not `{`

    /tmp/tmp7hm4dqjg.d(82): Error: no identifier for declarator `_error_`

    /tmp/tmp7hm4dqjg.d(82): Error: found `{` when expecting `;`

    /tmp/tmp7hm4dqjg.d(83): Error: expression expected, not `alias`

    /tmp/tmp7hm4dqjg.d(83): Error: found `candidate` when expecting `)`

    /tmp/tmp7hm4dqjg.d(83): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7hm4dqjg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    /*\n    assert(n >=\
    \ 0);\n    if (n <= 4) \n    {\n        return n*((n+1)/2);\n    }\n    long sum\
    \ = 0;\n    long a = 1;\n    long b = 1;\n    long c = 2;\n    long d = 2;\n \
    \   for (int i = 4; i < n; i++) \n    {\n        sum = a + b + c + d;\n      \
    \  a = b;\n        b = c;\n        c = d;\n        d = sum;\n    }\n    return\
    \ sum;\n    */\n    assert(n >= 0);\n    if (n <= 4) \n    {\n        return n*((n+1)/2);\n\
    \    }\n    long[] fib = [0,0,2,0,2];\n    for (int i = 4; i < n; i++) \n    {\n\
    \        long sum = 0;\n        for (int j = 0; j < fib.length; j++) \n      \
    \  {\n            sum += fib[j];\n        }\n        fib.insert(sum);\n      \
    \  fib.remove();\n    }\n    return fib[4];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpah7nceax.d(55): Error: no property `insert` for type `long[]`

    /tmp/tmpah7nceax.d(56): Error: no property `remove` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah7nceax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fibMem = [1L,\
    \ 1L, 2L, 4L]; // initialize matrix \n    long a = fibMem[0];\n    long b = fibMem[1];\n\
    \    long c = fibMem[2];\n    long d = fibMem[3];\n    long e = 0L;\n    long\
    \ result = 0L;\n    long counter = 4L;\n    while (counter < n) {\n        e =\
    \ d + c + b + a;\n        result = e;\n        a = b;\n        b = c;\n      \
    \  c = d;\n        d = e;\n        counter++;\n    }\n    return result;\n}\n\
    /*\nThe Fib5 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2)\
    \ -> 2\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4)\
    \ + fib5(n-5).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(6L)\n    12L\n\
    \    >>> fib5(7L)\n    20L\n    >>> fib5(8L)\n    34L\n*/\nlong fib5(long n) \n\
    {\n    long[] fibMem = [1L, 1L, 2L, 4L, 8L]; // initialize matrix \n    long a\
    \ = fibMem[0];\n    long b = fibMem[1];\n    long c = fibMem[2];\n    long d =\
    \ fibMem[3];\n    long e = fibMem[4];\n    long result = 0L;\n    long counter\
    \ = 5L;\n    while (counter < n) {\n        result = e + d + c + b + a;\n    \
    \    a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = result;\n\
    \        counter++;\n    }\n    return result;\n}\n/*\nThe Fib6 number sequence\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf7cgcwal.d(76): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf7cgcwal.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n    {\n\
    \        return -1;\n    }\n    if (n < 2)\n    {\n        return 0;\n    }\n\
    \    if (n == 2)\n    {\n        return 2;\n    }\n    if (n == 3)\n    {\n  \
    \      return 0;\n    }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n \
    \   long d = 0;\n    while (n > 3)\n    {\n        long tmp = d;\n        d =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = tmp;\n        n\
    \ -= 1;\n    }\n    return d;\n}\n/*\nThe Fib6 number sequence is a sequence similar\
    \ to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n  \
    \  fib6(1) -> 0\n    fib6(2) -> 1\n    fib6(3) -> 0\n    fib6(n) -> fib6(n-1)\
    \ + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n    Please write\
    \ a function to efficiently compute the n-th element of the fib6 number sequence.\
    \  Do not use recursion.\n    >>> fib6(5L)\n    5L\n    >>> fib6(6L)\n    10L\n\
    \    >>> fib6(7L)\n    21L\n    \n*/\nlong fib6(long n) \n{\n    if (n < 0)\n\
    \    {\n        return -1;\n    }\n    if (n < 3)\n    {\n        return 0;\n\
    \    }\n    if (n == 3)\n    {\n        return 1;\n    }\n    if (n == 4)\n  \
    \  {\n        return 0;\n    }\n    long a = 0;\n    long b = 0;\n    long c =\
    \ 1;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    while (n > 5)\n \
    \   {\n        long tmp = f;\n        f = a\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuidfuq3i.d(96): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpuidfuq3i.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpuidfuq3i.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuidfuq3i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    long temp = 0L;\n    long i\
    \ = 3L;\n    while (i <= n) \n    {\n        temp = a + b + c + d;\n        a\
    \ = b;\n        b = c;\n        c = d;\n        d = temp;\n        i = i + 1L;\n\
    \    }\n    return d;\n}\n/*\nImplement a function, twoSum(int[] arr, int sum),\
    \ that finds the number of pairs of integers that add up to the sum.\nThe array\
    \ may contain duplicate entries and you may not use the same element twice.  Do\
    \ not use hashing or maps.\nAssume that the array is sorted in ascending order.\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi9obnnky.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi9obnnky.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n  int b0 = 0;\n  int b1\
    \ = 0;\n  int b2 = 2;\n  int b3 = 0;\n  int b4 = 0;\n  for (int i = 0; i < n;\
    \ i++)\n  {\n    b4 = b3;\n    b3 = b2;\n    b2 = b1;\n    b1 = b0;\n    b0 =\
    \ b4 + b3 + b2 + b1;\n  }\n  return b0;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpup9m8pzc.d(36): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpup9m8pzc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    static long[] fib =\
    \ [0L, 0L, 2L, 0L];\n    static long curr = 3L;\n    while (n > curr) {\n    \
    \    fib ~= fib[$-1] + fib[$-2] + fib[$-3] + fib[$-4];\n        ++curr;\n    }\n\
    \    return fib[n];\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164105
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    if (n <= 0) return a;\n    if (n == 1) return b;\n    if (n == 2) return\
    \ c;\n    if (n == 3) return d;\n    for (long i = 0; i < n - 3; i++) {\n    \
    \    e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    // your code goes here\n\
    \    if(n == 0)\n    {\n        return 0;\n    }\n    else if(n == 1)\n    {\n\
    \        return 0;\n    }\n    else if(n == 2)\n    {\n        return 2;\n   \
    \ }\n    else if(n == 3)\n    {\n        return 0;\n    }\n    else\n    {\n \
    \       long arr[] = new long[n+1];\n        arr[0] = 0;\n        arr[1] = 0;\n\
    \        arr[2] = 2;\n        arr[3] = 0;\n        for(long i = 4; i <= n; i++)\n\
    \        {\n            arr[(int)i] = arr[(int)i-1] + arr[(int)i-2] + arr[(int)i-3]\
    \ + arr[(int)i-4];\n        }\n        return arr[(int)n];\n    }\n}\n/*\nA binary\
    \ number is a number represented as a string of 1's and 0's.\nA binary number\
    \ can be converted to a regular base 10 number through the following steps:\n\
    \    1. Convert each digit to a decimal digit by multiplying it by 2^n where n\
    \ is the position of the digit (starting from 0)\n    2. Sum all the digits together\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfzwzcsbn.d(40): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] arr`

    /tmp/tmpfzwzcsbn.d(47): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpfzwzcsbn.d(47): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpfzwzcsbn.d(47): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpfzwzcsbn.d(47): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpfzwzcsbn.d(47): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpfzwzcsbn.d(49): Error: C style cast illegal, use `cast(int)n`

    /tmp/tmpfzwzcsbn.d(52): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfzwzcsbn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n\talias T = long;\n\tstruct\
    \ State {\n\t\tT fib1;\n\t\tT fib2;\n\t\tT fib3;\n\t\tT fib4;\n\t}\n\t// State\
    \ initialValue = State(0, 0, 2, 0);\n\tlong fib4(State state, long n) \n\t{\n\t\
    \treturn n < 4 ? state.fib4 : fib4(State(state.fib2, state.fib3, state.fib4, state.fib1\
    \ + state.fib2 + state.fib3 + state.fib4), n - 1);\n\t}\n\treturn fib4(State(0,\
    \ 0, 2, 0), n);\n}\n/*\nSelecting Involved Variables\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcyntow01.d(35): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcyntow01.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0L) \n    {\n\
    \        return 0L;\n    }\n    else if (n == 1L) \n    {\n        return 0L;\n\
    \    }\n    else if (n == 2L) \n    {\n        return 2L;\n    }\n    else if\
    \ (n == 3L) \n    {\n        return 0L;\n    }\n    else \n    {\n        auto\
    \ a = 0L;\n        auto b = 0L;\n        auto c = 2L;\n        auto d = 0L;\n\
    \        auto i = 4L;\n        auto temp = 0L;\n        while (i <= n) \n    \
    \    {\n            temp = a + b + c + d;\n            a = b;\n            b =\
    \ c;\n            c = d;\n            d = temp;\n            i++;\n        }\n\
    \        return temp;\n    }\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164105
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) return n\
    \ == 2 ? 2 : 0;\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4);\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    static long[] _fib4\
    \ = tuple(0L, 0L, 2L, 0L);\n    immutable long[] fib4 = _fib4;\n    if (n < fib4.length)\n\
    \        return fib4[n];\n    for (size_t i = fib4.length; i <= n; i++) \n   \
    \ {\n        immutable long result = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] +\
    \ fib4[i - 4];\n        _fib4 ~= result;\n    }\n    return _fib4[n];\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyj63pm5w.d(21): Error: cannot implicitly convert expression `Tuple(0L,
    0L, 2L, 0L)` of type `Tuple!(long, long, long, long)` to `long[]`

    /tmp/tmpyj63pm5w.d(22): Error: cannot implicitly convert expression `_fib4` of
    type `long[]` to `immutable(long[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyj63pm5w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // 1 2 3 4 5 6 7\n \
    \   // 0 0 2 0 4 8 14\n    // 1 2 3 4 5 6 7 8\n    // 0 0 2 0 4 8 14 23\n    static\
    \ int[] numbers = [0, 0, 2, 0, 4, 8, 14, 23];\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplz2d8lkv.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplz2d8lkv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    auto first = tuple(0L,\
    \ 1L, 2L, 0L);\n    auto result = tuple(0L, 0L, 0L, 0L);\n    auto length = n;\n\
    \    foreach(i; 0..4) \n    {\n        result[i] = first[i];\n    }\n    foreach(i;\
    \ 4..length) \n    {\n        result[0] = result[1] + result[2] + result[3];\n\
    \        result[1] = result[2];\n        result[2] = result[3];\n        result[3]\
    \ = result[0];\n    }\n    return result[0];\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpff2ptu1f.d(26): Error: variable `i` cannot be read at compile time

    /tmp/tmpff2ptu1f.d(26): Error: variable `i` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpff2ptu1f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    enum a=0, b=0, c=2,\
    \ d=0;\n    foreach (i; 1..n) \n    {\n        auto tmp = a + b + c + d;\n   \
    \     a = b;\n        b = c;\n        c = d;\n        d = tmp;\n    }\n    return\
    \ d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmb51bjt7.d(25): Error: cannot modify constant `a`

    /tmp/tmpmb51bjt7.d(26): Error: cannot modify constant `b`

    /tmp/tmpmb51bjt7.d(27): Error: cannot modify constant `c`

    /tmp/tmpmb51bjt7.d(28): Error: cannot modify constant `d`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmb51bjt7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    static long fibMemo[100]\
    \ = void;\n    long result;\n    if (n < 2)\n    {\n        result = n;\n    }\n\
    \    else if (n < sizeof(fibMemo) && fibMemo[n] > 0)\n    {\n        result =\
    \ fibMemo[n];\n    }\n    else\n    {\n        result = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4);\n        if (n < sizeof(fibMemo))\n        {\n    \
    \        fibMemo[n] = result;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe32bp_5p.d(21): Deprecation: instead of C-style syntax, use D-style
    syntax `long[100] fibMemo`

    /tmp/tmpe32bp_5p.d(27): Error: undefined identifier `sizeof`, did you mean alias
    `size_t`?

    /tmp/tmpe32bp_5p.d(34): Error: undefined identifier `sizeof`, did you mean alias
    `size_t`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe32bp_5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) return 0;\n\
    \    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    immutable long[] fib = [0, 0, 2, 0];\n    // cast(int) is because we\
    \ will overflow\n    for (immutable int i = 4; i <= cast(int)n; i++)\n    {\n\
    \        fib[0] = fib[1];\n        fib[1] = fib[2];\n        fib[2] = fib[3];\n\
    \        fib[3] = fib[0] + fib[1] + fib[2];\n    }\n    return fib[3];\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpci2__7cn.d(27): Error: cannot modify `immutable` expression `4`

    /tmp/tmpci2__7cn.d(29): Error: cannot modify `immutable` expression `fib[0]`

    /tmp/tmpci2__7cn.d(30): Error: cannot modify `immutable` expression `fib[1]`

    /tmp/tmpci2__7cn.d(31): Error: cannot modify `immutable` expression `fib[2]`

    /tmp/tmpci2__7cn.d(32): Error: cannot modify `immutable` expression `fib[3]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpci2__7cn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) \n    {\n\
    \        return 0;\n    }\n    if (n == 1) \n    {\n        return 0;\n    }\n\
    \    if (n == 2) \n    {\n        return 2;\n    }\n    if (n == 3) \n    {\n\
    \        return 0;\n    }\n    long nMinus1 = 0;\n    long nMinus2 = 0;\n    long\
    \ nMinus3 = 2;\n    long nMinus4 = 0;\n    long nMinus5 = 0;\n    long nMinus6\
    \ = 0;\n    long nMinus7 = 0;\n    long nMinus8 = 0;\n    long nMinus9 = 0;\n\
    \    long nMinus10 = 0;\n    long current = 0;\n    for (long i = 4; i <= n; i++)\
    \ \n    {\n        current = nMinus1 + nMinus2 + nMinus3 + nMinus4;\n        nMinus10\
    \ = nMinus9;\n        nMinus9 = nMinus8;\n        nMinus8 = nMinus7;\n       \
    \ nMinus7 = nMinus6;\n        nMinus6 = nMinus5;\n        nMinus5 = nMinus4;\n\
    \        nMinus4 = nMinus3;\n        nMinus3 = nMinus2;\n        nMinus2 = nMinus1;\n\
    \        nMinus1 = current;\n    }\n    return current;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6o0n3wd7.d(69): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmp6o0n3wd7.__unittest_L64_C1() [0x427b2d]

    ??:? void tmp6o0n3wd7.__modtest() [0x427b84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n   long fib4 = 0, a = 0,\
    \ b = 0, c = 2, d = 0; \n   for (long i = 2; i <= n; i++) \n   { \n      fib4\
    \ = a + b + c + d; \n      a = b; \n      b = c; \n      c = d; \n      d = fib4;\
    \ \n   } \n   return fib4; \n} \nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo13hrutd.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpo13hrutd.__unittest_L32_C1() [0x427a90]

    ??:? void tmpo13hrutd.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    if (n <= 1) \n    \
    \    return n; \n    long f[n + 1]; \n    f[0] = 0; \n    f[1] = 0; \n    f[2]\
    \ = 2; \n    f[3] = 0; \n    for (long i = 4; i <= n; i++) \n        f[i] = f[i\
    \ - 1] + f[i - 2] + f[i - 3] + f[i - 4]; \n    return f[n]; \n} \nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8s6ehq58.d(23): Deprecation: instead of C-style syntax, use D-style
    syntax `long[n + 1] f`

    /tmp/tmp8s6ehq58.d(23): Error: variable `n` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8s6ehq58.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    long[] fib = new long[n\
    \ + 1];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n\
    \    for (long i = 4; i <= n; i++)\n    {\n        fib[i] = fib[i - 1] + fib[i\
    \ - 2] + fib[i - 3] + fib[i - 4];\n    }\n    return fib[n];\n}\nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3) return 0;\n\
    \    if (n == 4) return 2;\n    long a = 0, b = 0, c = 0, d = 2, e = 0;\n    for\
    \ (long i = 5; i <= n; i++) \n    {\n        e = d + c + b + a;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\n//=========================================================================\n\
    /*\nGiven an array of distinct integers and a target integer, find the kth element\
    \ closest to the target.\nClosest in the sense that the absolute difference between\
    \ the target and the element is the least.\nunittest\n{\n    alias candidate =\
    \ fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptz_6neqc.d(35): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptz_6neqc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3)\n      \
    \  return n == 0 ? 0 : n == 1 ? 0 : n == 2 ? 2 : 0;\n    \n    long a = 0, b =\
    \ 0, c = 2, d = 0;\n    foreach (i; 2..n)\n    {\n        d = a + b + c;\n   \
    \     a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkeolu24d.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dad]

    ??:? void tmpkeolu24d.__unittest_L34_C1() [0x427ab8]

    ??:? void tmpkeolu24d.__modtest() [0x427b30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bad3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a966]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]

    ??:? runModuleUnitTests [0x42b8a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n <= 3)\n      \
    \  return n*n;\n    int a = 0;\n    int b = 0;\n    int c = 2;\n    int d = 0;\n\
    \    int i = 4;\n    foreach(k; 1..n)\n    {\n        auto t = d;\n        d =\
    \ d + c + b + a;\n        a = b;\n        b = c;\n        c = t;\n    }\n    return\
    \ d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1bipf7js.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp1bipf7js.__unittest_L38_C1() [0x427a90]

    ??:? void tmp1bipf7js.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    long fib1 = 0;\n  \
    \  long fib2 = 0;\n    long fib3 = 2;\n    long fib4 = 0;\n    long temp = 0;\n\
    \    if(n<=0)\n    {\n        return 0;\n    }\n    else if(n<=2)\n    {\n   \
    \     return 2;\n    }\n    else if(n<=3)\n    {\n        return 0;\n    }\n \
    \   else\n    {\n        for(long i = 4; i <= n; i++)\n        {\n           \
    \ temp = fib4;\n            fib4 = fib3+fib2+fib1+fib4;\n            fib1 = fib2;\n\
    \            fib2 = fib3;\n            fib3 = temp;\n        }\n        return\
    \ fib4;\n    }\n}\n/*\n    The Hamming distance between two integers is the number\
    \ of positions at which the corresponding bits are different.\n    Given two integers\
    \ x and y, calculate the Hamming distance.\n    >>> hammingDistance(1, 4)\n  \
    \  2\n    >>> hammingDistance(3, 1)\n    1\n*/\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    // TODO: implement\n\
    \    long f0 = 0;\n    long f1 = 0;\n    long f2 = 2;\n    long f3 = 0;\n    long\
    \ f4 = 0;\n    if (n <= 2) {\n        return n-1;\n    }\n    else {\n       \
    \ long i = 3;\n        while (i <= n) {\n            f4 = f3 + f2 + f1 + f0;\n\
    \            f0 = f1;\n            f1 = f2;\n            f2 = f3;\n          \
    \  f3 = f4;\n            i = i + 1;\n        }\n        return f4;\n    }\n}\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj2pvi_49.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmpj2pvi_49.__unittest_L43_C1() [0x427aa8]

    ??:? void tmpj2pvi_49.__modtest() [0x427b20]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    long f[n+1]; \n   \
    \ long i; \n    f[0] = 0; \n    f[1] = 0; \n    f[2] = 2; \n    f[3] = 0; \n \
    \   for (i = 4; i <= n; i++) \n        f[i] = f[i-1] + f[i-2] + f[i-3] + f[i-4];\
    \ \n    return f[n]; \n} \nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptob7nx6_.d(21): Deprecation: instead of C-style syntax, use D-style
    syntax `long[n + 1] f`

    /tmp/tmptob7nx6_.d(21): Error: variable `n` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptob7nx6_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    import std.math : sqrt;\n\
    \    import std.range : cycle;\n    import std.algorithm : copy;\n    immutable\
    \ phi = (1 + sqrt(5)) / 2;\n    immutable psi = (1 - sqrt(5)) / 2;\n    immutable\
    \ fib4_0 = 0;\n    immutable fib4_1 = 0;\n    immutable fib4_2 = 2;\n    immutable\
    \ fib4_3 = 0;\n    auto cycleVals = [fib4_0, fib4_1, fib4_2, fib4_3].cycle;\n\
    \    copy(cycleVals.take(n));\n    return (phi ^ n - psi ^ n) / sqrt(5);\n}\n\
    \ \nauto main(string[] args) -> int \n{\n    immutable n = cast(long)args[1];\n\
    \    writeln(fib4(n));\n    return 0;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp16147w09.d(35): Error: function declaration without return type.
    (Note that constructors are always named `this`)

    /tmp/tmp16147w09.d(35): Error: no identifier for declarator `main(string[] args)`

    /tmp/tmp16147w09.d(35): Error: semicolon expected following function declaration

    /tmp/tmp16147w09.d(35): Error: declaration expected, not `-`

    /tmp/tmp16147w09.d(38): Error: unexpected `(` in declarator

    /tmp/tmp16147w09.d(38): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmp16147w09.d(38): Error: no identifier for declarator `writeln(fib4(n))`

    /tmp/tmp16147w09.d(39): Error: declaration expected, not `return`

    /tmp/tmp16147w09.d(40): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16147w09.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n    in\n    {\n        assert(n\
    \ >= 0);\n    }\n    body\n    {\n        if (n == 0)\n            return 0;\n\
    \        if (n == 1)\n            return 0;\n        if (n == 2)\n           \
    \ return 2;\n        if (n == 3)\n            return 0;\n        int[] a = new\
    \ int[4];\n        a[0] = 0;\n        a[1] = 0;\n        a[2] = 2;\n        a[3]\
    \ = 0;\n        for (int i = 4; i <= n; i++)\n        {\n            int temp\
    \ = a[3];\n            a[3] = a[2];\n            a[2] = a[1];\n            a[1]\
    \ = a[0];\n            a[0] = a[3] + a[2] + a[1] + temp;\n        }\n        return\
    \ a[0];\n    }\n/*\nThe following is the prime factorization of the positive integer\
    \ n.  Find the largest prime factor of n.\ne.g.\n    >>> largestPrimeFactor(35L)\n\
    \    7L\n    >>> largestPrimeFactor(12L)\n    3L\n*/\nlong largestPrimeFactor(long\
    \ n) \n    in\n    {\n        assert(n > 0);\n    }\n    body\n    {\n       \
    \ if (n == 1)\n            return 1;\n        if (n == 2)\n            return\
    \ 2;\n        long largest = 0;\n        for (long i = 2; i <= n; i++)\n     \
    \   {\n            while (n % i == 0)\n            {\n                largest\
    \ = i;\n                n /= i;\n            }\n        }\n        return largest;\n\
    \    }\n/*\nThe following is the prime factorization of the positive integer n.\
    \  Find the sum of the largest prime factors of the prime factors of n.\ne.g.\n\
    \    >>> sumLargestPrimeFactors(35L)\n    7L\n    >>> sumLargestPrimeFactors(12L)\n\
    \    7L\n*/\nlong sumLargestPrimeFactors(long n) \n    in\n    {\n        assert(n\
    \ > 0);\n    }\n    body\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpetnkz3ms.d(93): Error: statement expected to be `{ }`, not `unittest`

    /tmp/tmpetnkz3ms.d(93): Error: found `unittest` instead of statement

    /tmp/tmpetnkz3ms.d(97): Error: declaration expected, not `assert`

    /tmp/tmpetnkz3ms.d(98): Error: declaration expected, not `assert`

    /tmp/tmpetnkz3ms.d(99): Error: declaration expected, not `assert`

    /tmp/tmpetnkz3ms.d(100): Error: declaration expected, not `assert`

    /tmp/tmpetnkz3ms.d(101): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpetnkz3ms.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    auto fib4_Nums = long[0L,\
    \ 0L, 2L, 0L]; \n    foreach(index, element; fib4_Nums) \n    { \n        if(n\
    \ < index) \n            break; \n        else if(n == index) \n            return\
    \ element; \n        else \n        { \n            auto new_element = fib4_Nums[index\
    \ - 1] + fib4_Nums[index - 2] + fib4_Nums[index - 3] + fib4_Nums[index - 4]; \n\
    \            fib4_Nums ~= new_element; \n        } \n    } \n    return fib4_Nums[$\
    \ - 1]; \n}\n/*\nThe Fib6 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n  \
    \  fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(4) -> 0\n    fib6(5) -> 2\n    fib6(n)\
    \ -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n\
    \    Please write a function to efficiently compute the n-th element of the fib6\
    \ number sequence.  Do not use recursion.\n    >>> fib6(7L)\n    14L\n    >>>\
    \ fib6(8L)\n    26L\n    >>> fib6(9L)\n    50L\n    \n*/\nlong fib6(long n) \n\
    { \n    auto fib6_Nums = long[0L, 0L, 2L, 0L, 0L, 2L]; \n    foreach(index, element;\
    \ fib6_Nums) \n    { \n        if(n < index) \n            break; \n        else\
    \ if(n == index) \n            return element; \n        else \n        { \n \
    \           auto new_element = fib6_Nums[index - 1] + fib6_Nums[index - 2] + fib6_\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3efz1h_u.d(21): Error: found `[` when expecting `.` following long

    /tmp/tmp3efz1h_u.d(21): Error: found `0L` when expecting identifier following
    `long`.

    /tmp/tmp3efz1h_u.d(21): Error: identifier expected following comma

    /tmp/tmp3efz1h_u.d(21): Error: found `]` when expecting `;` following statement

    /tmp/tmp3efz1h_u.d(21): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp3efz1h_u.d(56): Error: found `[` when expecting `.` following long

    /tmp/tmp3efz1h_u.d(56): Error: found `0L` when expecting identifier following
    `long`.

    /tmp/tmp3efz1h_u.d(56): Error: identifier expected following comma

    /tmp/tmp3efz1h_u.d(56): Error: found `]` when expecting `;` following statement

    /tmp/tmp3efz1h_u.d(56): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp3efz1h_u.d(66): Error: semicolon expected following auto declaration,
    not `unittest`

    /tmp/tmp3efz1h_u.d(66): Error: found `unittest` instead of statement

    /tmp/tmp3efz1h_u.d(75): Error: found `End of File` when expecting `}` following
    compound'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    ulong* cache = new ulong[n];\n\
    \    cache[0] = 0;\n    cache[1] = 0;\n    cache[2] = 2;\n    cache[3] = 0;\n\
    \    int i = 4;\n    while(i < n)\n    {\n        cache[i] = cache[i-1] + cache[i-2]\
    \ + cache[i-3] + cache[i-4];\n        i++;\n    }\n    long result = cache[i-1];\n\
    \    delete[] cache;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvcdzfkhi.d(33): Error: found `cache` when expecting `;` following
    statement

    /tmp/tmpvcdzfkhi.d(33): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvcdzfkhi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    import std.typecons\
    \ : Tuple;\n    // some initial values\n    Tuple!(long, long, long, long) fib4\
    \ = Tuple!(long, long, long, long)(0, 0, 2, 0);\n    //  loop over all bits in\
    \ the binary expansion of n,\n    //  updating fib4 with the appropriate value\
    \ each time\n    foreach (bit; n.bits) \n    {\n        if (bit) \n        {\n\
    \            fib4.expand(fib4[0]+fib4[1]+fib4[2]+fib4[3]);\n        }\n      \
    \  else \n        {\n            fib4.expand(fib4[1]+fib4[2]+fib4[3]);\n     \
    \   }\n    }\n    return fib4[3];\n}\n \nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptsb7kuc8.d(26): Error: no property `bits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptsb7kuc8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) \n    {\n\
    \        return 0;\n    }\n    else if (n == 1) \n    {\n        return 0;\n \
    \   }\n    else if (n == 2) \n    {\n        return 2;\n    }\n    else if (n\
    \ == 3) \n    {\n        return 0;\n    }\n    else \n    {\n        long[] fib\
    \ = new long[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] =\
    \ 2;\n        fib[3] = 0;\n        for (long i = 4; i <= n; i++) \n        {\n\
    \            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n\
    \        return fib[n];\n    }\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{ \n    // Declare an array\
    \ to store Fibonacci numbers. \n    alias Fib4 = long[3]; \n  \n    // Declare\
    \ a Tuple to store (sum, previous 2) tuples\n    alias sum = tuple!(long, Fib4);\n\
    \    \n    // initialize first three Fibonacci numbers \n    Fib4 f = [ 0, 0,\
    \ 2 ]; \n  \n    // fib4(2) = 2, fib4(3) = 0\n    sum f1 = tuple(0, f);\n  \n\
    \    // Set f(0) = 0, f(1) = 0, f(2) = 2, f(3) = 0\n    long fn = (n < 4L) ? f[n]\
    \ : 0L;\n  \n    // Add the previous 2 numbers in the series \n    // and store\
    \ the last sum in f(0) \n    for (long i = 4L; i <= n; i++) { \n        fn = f1.sum\
    \ + f1.Fib4[0] + f1.Fib4[1] + f1.Fib4[2]; \n        f1.sum = fn;\n        f1.Fib4[0]\
    \ = f1.Fib4[1]; \n        f1.Fib4[1] = f1.Fib4[2]; \n        f1.Fib4[2] = fn;\
    \ \n    } \n  \n    return fn; \n} \n \nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpye6e23qp.d(31): Error: template `std.typecons.tuple!(long, long[3]).tuple(Args...)(Args
    args)` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpye6e23qp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    auto a = [TypeTuple(long,\
    \ long, long, long)](TypeTuple!(long, long, long, long) state) {\n        auto\
    \ newstate = TypeTuple(long, long, long, long)(\n            state[0] + state[1]\
    \ + state[2] + state[3],\n            state[0],\n            state[1],\n     \
    \       state[2]\n        );\n        return newstate;\n    };\n    auto b = TypeTuple(long,\
    \ long, long, long)(0L, 0L, 2L, 0L);\n    return iota(a, b, n)[0];\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpejq0avuk.d(21): Error: found `,` when expecting `.` following long

    /tmp/tmpejq0avuk.d(21): Error: found `long` when expecting identifier following
    `long`.

    /tmp/tmpejq0avuk.d(21): Error: found `,` when expecting `.` following long

    /tmp/tmpejq0avuk.d(21): Error: found `long` when expecting identifier following
    `long`.

    /tmp/tmpejq0avuk.d(21): Error: found `state` when expecting `,`

    /tmp/tmpejq0avuk.d(21): Error: semicolon expected following auto declaration,
    not `{`

    /tmp/tmpejq0avuk.d(22): Error: found `,` when expecting `.` following long

    /tmp/tmpejq0avuk.d(22): Error: found `long` when expecting identifier following
    `long`.

    /tmp/tmpejq0avuk.d(22): Error: found `,` when expecting `.` following long

    /tmp/tmpejq0avuk.d(22): Error: found `long` when expecting identifier following
    `long`.

    /tmp/tmpejq0avuk.d(29): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpejq0avuk.d(30): Error: found `,` when expecting `.` following long

    /tmp/tmpejq0avuk.d(30): Error: found `long` when expecting identifie'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n == 0) return 0;\n\
    \    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 0;\n    if (n == 4) return 1;\n    long n1 = 4;\n    long n2 = 1;\n    long\
    \ n3 = 2;\n    long n4 = 0;\n    long n5 = 0;\n    long i = 5;\n    while (i <=\
    \ n)\n    {\n        n5 = n1 + n2 + n3 + n4;\n        n4 = n3;\n        n3 = n2;\n\
    \        n2 = n1;\n        n1 = n5;\n        i++;\n    }\n    return n5;\n}\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr1_3pbt8.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpr1_3pbt8.__unittest_L43_C1() [0x427ae8]

    ??:? void tmpr1_3pbt8.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    /*\n    The Fib4 number\
    \ sequence is a sequence similar to the Fibbonacci sequnece that's defined as\
    \ follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3)\
    \ -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please\
    \ write a function to efficiently compute the n-th element of the fib4 number\
    \ sequence.  Do not use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n\
    \    8L\n    >>> fib4(7L)\n    14L\n    */\n    import std.exception;\n    import\
    \ std.stdio;\n    import std.conv;\n    import std.array;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.math;\n    import std.typecons;\n \
    \   if (n < 0L)\n    {\n        throw new Exception(\"n must be >= 0\");\n   \
    \ }\n    if (n < 4L)\n    {\n        return n;\n    }\n    long a = 0L;\n    long\
    \ b = 0L;\n    long c = 2L;\n    long d = 0L;\n    foreach (i; 2L..n)\n    {\n\
    \        d = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt8383a_v.d(69): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmpt8383a_v.__unittest_L65_C1() [0x427aec]

    ??:? void tmpt8383a_v.__modtest() [0x427b64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bea7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ad3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fecd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43037c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fe59]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad11]

    ??:? runModuleUnitTests [0x42bc7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164105
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n    >>> fib4(5L)\n    4L\n    >>> fib4(6L)\n    8L\n    >>>\
    \ fib4(7L)\n    14L\n    \n*/\nlong fib4(long n) \n{\n    if (n < 4) \n    {\n\
    \        return n;\n    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwl31an1v.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwl31an1v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164105
