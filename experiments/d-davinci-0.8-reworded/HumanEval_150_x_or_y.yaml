name: HumanEval_150_x_or_y
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nA simple program which should\
  \ return the value of x if n is \n    a prime number and should return the value\
  \ of y otherwise.\n\n    Examples:\n    >>> x_or_y(7L, 34L, 12L)\n    34L\n    >>>\
  \ x_or_y(15L, 8L, 5L)\n    5L\n    \n    \n*/\nlong x_or_y(long n, long x, long\
  \ y) \n"
tests: "unittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L,\
  \ 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L,\
  \ 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L,\
  \ -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L,\
  \ 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L,\
  \ 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}"
completions: ["{\n    long m;\n    long i;\n    for (i = 2L; (i <= (n / 2L)); ++i)\
    \ \n    {\n        m = n % i;\n        if (m == 0L) \n        {\n            return\
    \ y;\n        }\n    }\n    return x;\n}\n/*\nA program which returns the length\
    \ of the longest collatz \n    sequence starting from a given positive number\
    \ less than \n    or equal to n.", "{\n    return isPrime(n) ? x : y;\n}", "{\n\
    \    if(n < 2)\n        return y;\n    if(isPrime(n))\n        return x;\n   \
    \ return y;\n}", "{ \n  long i = 2L;\n  long result = 0L;\n  long sqrt_n = (long)sqrt((double)n);\n\
    \  while ((i <= sqrt_n))\n  {\n    if (((n % i) == 0L))\n    {\n      result =\
    \ y;\n      return result;\n    }\n    else\n    {\n      i = (i + 1L);\n    }\n\
    \  }\n  result = x;\n  return result;\n}", "{ \n  long i = 3L;\n  while (i < sqrt(n))\n\
    \  {\n    if (n % i == 0L)\n      return y;\n    i = i + 2L;\n  }\n  return x;\n\
    }", "{ \n    return (n % 2 == 0) ? (x) : (y);\n}", "{ \n    if(isPrime(n)) \n\
    \        return x; \n    else \n        return y; \n}", "{\n    if (isPrime(n))\n\
    \        return x;\n    else\n        return y;\n}", "{\n    // if n is prime\
    \ the return x, if n is not prime return y.\n    return 0;\n}", "{\n  return isPrime(n)\
    \ ? x : y;\n}", "{\n    long tmp = 0L;\n    long j = 1L;\n    long s_range = 2L;\n\
    \    if (j == 1L) {\n        tmp = s_range;\n        j = 0L;\n    }\n    for (;\
    \ tmp < n; tmp = tmp + 1L) {\n        if (n % tmp == 0L) {\n            j = 1L;\n\
    \            break;\n        }\n    }\n    return (j == 1L) ? x : y;\n}", "{\n\
    \    // ...\n    // ...\n    // ...\n    return n;\n}", "{ \n    bool is_prime\
    \ = true;\n    foreach (i; 2 .. cast(long) sqrt(n) + 1) \n    {\n        if (n\
    \ % i == 0)\n        {\n            is_prime = false;\n            break;\n  \
    \      }\n    }\n    return is_prime ? x : y;\n}", "    if (n > 1L) \n    {\n\
    \        foreach (i; 2L .. n) \n        {\n            if (n % i == 0L) \n   \
    \         {\n                return y;\n            }\n        }\n        return\
    \ x;\n    } \n    else \n    {\n        return y;\n    }\n    ", "{\n   if (n\
    \ % 2 == 0 || n % 3 == 0)\n      return y;\n   else\n      return x;\n}", "{\n\
    \    long[] prime = { 2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L,\
    \ 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L,\
    \ 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L,\
    \ 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L,\
    \ 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L,\
    \ 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L,\
    \ 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L,\
    \ 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L,\
    \ 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L,\
    \ 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L,\
    \ 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L,\
    \ 829L, 839L, 853L, 857L", "{ \n    long i;\n    foreach (i; 2..n) \n    {\n \
    \       if (n % i == 0) \n        {\n            return y;\n        }\n    } \n\
    \    return x;\n}", "{\n    if (n < 2L)\n    {\n        return y;\n    }\n   \
    \ long max = (long)sqrt(n);\n    foreach (i; 2L .. max)\n    {\n        if (n\
    \ % i == 0L)\n        {\n            return y;\n        }\n    }\n    return x;\n\
    }\n/*", "{\n    // your code\n    if (n < 2) return y;\n    for (long i = 2; i\
    \ < sqrt(n) + 1; i++) {\n        if (n % i == 0) {\n            return y;\n  \
    \      }\n    }\n    return x;\n}", "{\n    bool is_prime(long n) {\n        foreach\
    \ (i; 2 .. cast(long)sqrt(n)) {\n            if (n % i == 0) {\n             \
    \   return false;\n            }\n        }\n        return true;\n    }\n   \
    \ return is_prime(n) ? x : y;\n}\n/*\nA program which should take a list of integers\
    \ and return a list \n    of those integers which are primes."]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
