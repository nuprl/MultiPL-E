language: d
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return typeof(a)\
    \ == long ? (a ^^ 3).sign == 0 : false;\n}\n/*\n    Write a function that takes\
    \ a tuple of integers and returns \n    the tuple of products of all items except\
    \ ith, where i is \n    the index of the item in the tuple.\n    Note: you may\
    \ assume that all items in the tuple are positive.\n    Examples:\n    >>> products((1,\
    \ 2, 3, 4))\n    (24, 12, 8, 6)\n    >>> products((1, 2, 3, 4, 5))\n    (120,\
    \ 60, 40, 30, 24)\n    >>> products((1, 2, 3, 4, 5, 6))\n    (720, 360, 240, 180,\
    \ 144, 120)\n    >>> products((1, 2, 3, 4, 5, 6, 7))\n    (5040, 2520, 1680, 1260,\
    \ 1008, 840, 720)\n    >>> products((1, 2, 3, 4, 5, 6, 7, 8))\n    (40320, 20160,\
    \ 13440, 10080, 8064, 6720, 5760, 5040)\n    >>> products((1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9))\n    (362880, 181440, 120960, 90720, 72576, 60480, 51840, 45360, 40320)\n\
    \    >>> products((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n    (3628800, 1814400, 1209600,\
    \ 907200, 7257600, 60480, 518400, 453600, 403200, 362880)\n*/\nauto products(T)(T\
    \ items)\n{\n    static if(__traits(compiles, staticMap!((a, b) => a * b, items)))\n\
    \    {\n        return staticMap!((a, b) => a * b, items);\n    }\n    else\n\
    \    {\n        import std.algorithm.iteration;\n        return items.reduce!((a,\
    \ b) => a * b);\n    }\n}\n/*\n    Write a function that takes a tuple of integers\
    \ of length N\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqp9ufzcd.d(25): Error: found `?` when expecting `.` following long

    /tmp/tmpqp9ufzcd.d(25): Error: found `(` when expecting identifier following `long`.

    /tmp/tmpqp9ufzcd.d(25): Error: found `a` when expecting `;` following `return`
    statement

    /tmp/tmpqp9ufzcd.d(25): Error: found `^^` instead of statement

    /tmp/tmpqp9ufzcd.d(60): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqp9ufzcd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (((long)round(pow(a,\
    \ 1./3)))**3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphn4mtztu.d(25): Error: C style cast illegal, use `cast(long)round(pow(a,
    1.00000 / 3))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphn4mtztu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a == 1) return true;\n    if (a == -1) return true;\n\
    \    if (a < 0) return false;\n    long cbrt = pow(a, 1.0/3.0);\n    if (pow(cbrt,\
    \ 3) == a) return true;\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj2nskl_a.d(29): Error: cannot implicitly convert expression `pow(a,
    0.333333)` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj2nskl_a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    auto cbrt_a\
    \ = cbrt(a);\n    return cbrt_a == int(cbrt_a);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvep_bjbb.d(26): Error: cannot implicitly convert expression `cbrt_a`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvep_bjbb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ pow(round(pow(a, 1.0/3.0)), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwttpa9m7.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a5d]

    ??:? void tmpwttpa9m7.__unittest_L27_C1() [0x427e14]

    ??:? void tmpwttpa9m7.__modtest() [0x4287e0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c843]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430869]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d18]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6ad]

    ??:? runModuleUnitTests [0x42c619]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428eac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0L)\
    \ return true;\n    long b = abs(a);\n    long t = pow(b, 1.0 / 3.0);\n    if\
    \ (t * t * t == b) return true;\n    else return false;\n}\n/*\n    Write a function\
    \ that takes an integer a and returns true \n    if this ingeger is a square of\
    \ some integer number.\n    Note: you may assume the input is always valid.\n\
    \    Examples:\n    >>> issquare(1L)\n    true\n    >>> issquare(2L)\n    false\n\
    \    >>> issquare(-1L)\n    true\n    >>> issquare(0L)\n    true\n    >>> issquare(64L)\n\
    \    true\n    >>> issquare(180L)\n    false\n    \n*/\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgocl1te3.d(27): Error: cannot implicitly convert expression `pow(b,
    0.333333)` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgocl1te3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ \n        return true;\n    double x = abs(a);\n    double x3 = pow(x, 1.0/3.0);\n\
    \    int r = int(x3);\n    return r*r*r == a;\n}\n//version (2)\nauto iscube2\
    \ = [](long a) { return !a || pow(abs(a), 1.0/3.0) == int(pow(abs(a), 1.0/3.0));\
    \ };\n//version (3)\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ctt_f4u.d(33): Error: found `a` when expecting `.` following long

    /tmp/tmp_ctt_f4u.d(33): Error: found `)` when expecting identifier following `long`.

    /tmp/tmp_ctt_f4u.d(33): Error: found `{` when expecting `,`

    /tmp/tmp_ctt_f4u.d(33): Error: expression expected, not `return`

    /tmp/tmp_ctt_f4u.d(33): Error: found `!` when expecting `,`

    /tmp/tmp_ctt_f4u.d(33): Error: found `;` when expecting `,`

    /tmp/tmp_ctt_f4u.d(33): Error: expression expected, not `}`

    /tmp/tmp_ctt_f4u.d(33): Error: found `;` when expecting `,`

    /tmp/tmp_ctt_f4u.d(35): Error: expression expected, not `unittest`

    /tmp/tmp_ctt_f4u.d(36): Error: found `{` when expecting `,`

    /tmp/tmp_ctt_f4u.d(37): Error: expression expected, not `alias`

    /tmp/tmp_ctt_f4u.d(37): Error: found `candidate` when expecting `,`

    /tmp/tmp_ctt_f4u.d(37): Error: expression expected, not `=`

    /tmp/tmp_ctt_f4u.d(37): Error: found `iscube` when expecting `,`

    /tmp/tmp_ctt_f4u.d(37): Error: expression expected, not `;`

    /tmp/tmp_ctt_f4u.d(39): Error: found `assert` when expe'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return sqrt(a)\
    \ == round(sqrt(a));\n}\n/*\n    You're given a list of integers alist.\n    You\
    \ have to write a function iseven that \n    returns a list of booleans that tell\
    \ if a given element \n    in alist is even or not.\n    >>> iseven([2, 3, 5,\
    \ 1, 6, 9, 11])\n    [true, false, false, false, true, false, false]\n    >>>\
    \ iseven([])\n    []\n    >>> iseven([1, 3, 5, 7, 9])\n    [false, false, false,\
    \ false, false]\n    >>> iseven([2, 4, 6, 8, 10])\n    [true, true, true, true,\
    \ true]\n*/\nstatic auto iseven(alias predicate = \"a % 2 == 0\")(int[] a)\n{\n\
    \    return a.map!(x => predicate(x))();\n}\n// version without a parameter\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa61mk_xi.d(25): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpa61mk_xi.d(25): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa61mk_xi.d", "-I/tm'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    double b = cbrt(a);\n\
    \    return (a==(long)b*(long)b*(long)b);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7363ffsp.d(26): Error: C style cast illegal, use `cast(long)b`

    /tmp/tmp7363ffsp.d(26): Error: C style cast illegal, use `cast(long)b`

    /tmp/tmp7363ffsp.d(26): Error: C style cast illegal, use `cast(long)b`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7363ffsp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ pow(cast(long)pow(cast(double)a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp99ynon4w.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a25]

    ??:? void tmp99ynon4w.__unittest_L27_C1() [0x427d50]

    ??:? void tmp99ynon4w.__modtest() [0x4287a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b686]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b65d]

    ??:? runModuleUnitTests [0x42c5c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e74]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a==0L\
    \ || cast(int)pow(a,0.333333)==pow(a,0.333333);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6dw37a_i.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289c5]

    ??:? void tmp6dw37a_i.__unittest_L27_C1() [0x427d78]

    ??:? void tmp6dw37a_i.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e14]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long temp;\n\
    \    temp = round(pow(a, 1.0 / 3.0));\n    temp = temp * temp * temp;\n    return\
    \ temp == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxvhe9o4g.d(26): Error: cannot implicitly convert expression `round(pow(a,
    0.333333))` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxvhe9o4g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cube_root_long\
    \ = long(pow(a, 1.0/3.0));\n    double cube_root_double = pow(a, 1.0/3.0);\n \
    \   double x = cube_root_double-cube_root_long;\n    bool is_cube = (x==0);\n\
    \    return is_cube;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1a0knv0j.d(25): Error: cannot implicitly convert expression `pow(a,
    0.333333)` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1a0knv0j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0L)\n\
    \        return true;\n    if (a < 0L)\n        a = -a;\n    long b = rint(pow(cast(double)a,\
    \ 1.0/3.0));\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp477afevj.d(29): Error: cannot implicitly convert expression `rint(pow(cast(double)a,
    0.333333))` of type `double` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp477afevj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0L)\n\
    \        return true;\n    else if (a < 0L)\n        return iscube(-a);\n    else\
    \ {\n        double cbrt = Math.cbrt(a);\n        if (Math.ceil(cbrt) == Math.floor(cbrt))\n\
    \            return true;\n        else\n            return false;\n    }\n}\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprrxu2r3m.d(30): Error: undefined identifier `Math`

    /tmp/tmprrxu2r3m.d(31): Error: undefined identifier `Math`

    /tmp/tmprrxu2r3m.d(31): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprrxu2r3m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    bool result\
    \ = false;\n    if (a == 0L)\n    {\n        result = true;\n    } else if (a\
    \ > 0L)\n    {\n        result = a == pow(round(pow(a, (1.0/3.0))), 3);\n    }\
    \ else if (a < 0L)\n    {\n        result = a == -pow(round(pow(-a, (1.0/3.0))),\
    \ 3);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // double cube_root\
    \ = pow(a, 1.0/3.0);\n    // return a == cube_root * cube_root * cube_root;\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhqr7uwy.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhqr7uwy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n  if (a == 0)\n\
    \    return true;\n  else if (a < 0)\n    return iscube(-a);\n  else {\n    double\
    \ aRoot = exp(log(a) / 3);\n    return aRoot == ceil(aRoot);\n  }\n}\n#endif\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_dycwguw.d(34): Error: declaration expected, not `#`

    /tmp/tmp_dycwguw.d(39): Error: declaration expected, not `assert`

    /tmp/tmp_dycwguw.d(40): Error: declaration expected, not `assert`

    /tmp/tmp_dycwguw.d(41): Error: declaration expected, not `assert`

    /tmp/tmp_dycwguw.d(42): Error: declaration expected, not `assert`

    /tmp/tmp_dycwguw.d(43): Error: declaration expected, not `assert`

    /tmp/tmp_dycwguw.d(44): Error: declaration expected, not `assert`

    /tmp/tmp_dycwguw.d(45): Error: declaration expected, not `assert`

    /tmp/tmp_dycwguw.d(46): Error: declaration expected, not `assert`

    /tmp/tmp_dycwguw.d(47): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_dycwguw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return isPerfectCube(a);\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsixms6w5.d(25): Error: undefined identifier `isPerfectCube`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsixms6w5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cbrt;\n\
    \    cbrt = cast(long) round(cbrt(a));\n    return(cbrt * cbrt * cbrt == a);\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6pdon1gp.d(26): Error: function expected before `()`, not `cbrt`
    of type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6pdon1gp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (long)pow(round(pow(a,\
    \ 1.0/3.0)), 3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zhax0sb.d(25): Error: C style cast illegal, use `cast(long)pow(round(pow(a,
    1.00000 / 3.00000)), 3)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zhax0sb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || cast(long)pow(cast(double)abs(a), 1./3) == abs(a);\n}\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpor1x5qun.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmpor1x5qun.__unittest_L27_C1() [0x427d7b]

    ??:? void tmpor1x5qun.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (long)round(pow(a,\
    \ 1.0 / 3.0)) * (long)round(pow(a, 1.0 / 3.0)) * (long)round(pow(a, 1.0 / 3.0))\
    \ == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4_no5czk.d(25): Error: C style cast illegal, use `cast(long)round(pow(a,
    1.00000 / 3.00000))`

    /tmp/tmp4_no5czk.d(25): Error: C style cast illegal, use `cast(long)round(pow(a,
    1.00000 / 3.00000))`

    /tmp/tmp4_no5czk.d(25): Error: C style cast illegal, use `cast(long)round(pow(a,
    1.00000 / 3.00000))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_no5czk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a > 0L)\
    \ {\n        long cbrtA = cast(long)std.math.cbrt(a);\n        if (cbrtA*cbrtA*cbrtA\
    \ == a) return true;\n    }\n    else if (a < 0L) {\n        long cbrtA = cast(long)std.math.cbrt(-a);\n\
    \        if (cbrtA*cbrtA*cbrtA == -a) return true;\n    }\n    else if (a == 0L)\
    \ return true;\n    return false;\n}\n/*\n    Write a function that takes an integer\
    \ a, and returns true if \n    this integer is a perfect cube, otherwise it returns\
    \ false.\n    Examples:\n    >>> isperfectcube(1L)\n    true\n    >>> isperfectcube(2L)\n\
    \    false\n    >>> isperfectcube(-1L)\n    true\n    >>> isperfectcube(64L)\n\
    \    true\n    >>> isperfectcube(0L)\n    true\n    >>> isperfectcube(180L)\n\
    \    false\n    \n*/\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    \n    return\
    \ a == pow(cast(int) (pow(cast(double)a, 1.0/3.0)), 3);\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprsvy9_qj.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a15]

    ??:? void tmprsvy9_qj.__unittest_L28_C1() [0x427d50]

    ??:? void tmprsvy9_qj.__modtest() [0x428794]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7e3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b676]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430809]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430795]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b64d]

    ??:? runModuleUnitTests [0x42c5b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e64]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = 0;\n\
    \    long c = 0;\n    if (a == 0)\n    {\n        return true;\n    }\n    else\
    \ if (a > 0)\n    {\n        b = cast(long)cbrt(a);\n        c = b * b * b;\n\
    \        if (c == a)\n        {\n            return true;\n        }\n       \
    \ else\n        {\n            return false;\n        }\n    }\n    else\n   \
    \ {\n        b = cast(long)cbrt(a);\n        c = b * b * b;\n        if (c ==\
    \ a)\n        {\n            return true;\n        }\n        else\n        {\n\
    \            return false;\n        }\n    }\n}\n/*\n    Write a function, which\
    \ finds the longest \n    substring of input text, which has a palindrome as a\
    \ prefix.\n    Example:\n    >>> longestPalindromePrefix(\"abcd\")\n    \"\"\n\
    \    >>> longestPalindromePrefix(\"abba\")\n    \"abba\"\n    >>> longestPalindromePrefix(\"\
    aba\")\n    \"aba\"\n    >>> longestPalindromePrefix(\"abacaba\")\n    \"abacaba\"\
    \n    >>> longestPalindromePrefix(\"abacabad\")\n    \"abacaba\"\n    >>> longestPalindromePrefix(\"\
    qwerty\")\n    \"\"\n    >>> longestPalindromePrefix(\"abcdedcba\")\n    \"abcdedcba\"\
    \n*/\nstring longestPalindromePrefix(string input)\n{\n    size_t length = input.length;\n\
    \    string temp = \"\";\n    for (size_t i = 0; i < length; i++)\n    {\n   \
    \     if (input[i] == input[length - 1 - i])\n        {\n            temp ~= input[i];\n\
    \        }\n        else\n        {\n            break;\n        }\n    }\n  \
    \  return temp;\n}\n/*\n    Write a function that returns two times the square\
    \ of any given integer\n    Example:\n    >>> timesSquare(3)\n    18\n    >>>\
    \ timesSquare(9)\n    162\n    >>> timesSquare(0)\n    0\n    >>> timesSquare(-2\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprz13b03e.d(94): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprz13b03e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // Type of literal\
    \ is int\n    auto b = cast(long) pow(a, 1.0/3.0);\n    return (pow(b, 3) == a);\n\
    }\n// UNIT TESTS\nstatic assert(iscube(1L));\nstatic assert(!iscube(2L));\nstatic\
    \ assert(iscube(-1L));\nstatic assert(iscube(64L));\nstatic assert(iscube(0L));\n\
    static assert(!iscube(180L));\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2tjbbut8.d(32): Error: static assert:  `iscube(-1L)` is false

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2tjbbut8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cube =\
    \ 0;\n    for (long i = 0; cube <= a; i++)\n    {\n        cube = i * i * i;\n\
    \        if (cube == a)\n        {\n            return true;\n        }\n    }\n\
    \    return false;\n}\n/*\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp20nato5h.d(36): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp20nato5h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // TODO: implement\
    \ the algorithm described above\n    return false;\n}\n \n// ============================================================================\n\
    // Tests:\n// ============================================================================\n\
    unittest\n{\n    import std.stdio;\n    import std.exception;\n    // I have changed\
    \ the function name to 'iscube' because I need 'iscubic'\n    // for something\
    \ else (sorry about that).  Also, I made the function\n    // take a long instead\
    \ of an int, as D does not have an 'isqrt' for\n    // ints.\n    assert(iscube(1));\n\
    \    assert(!iscube(2));\n    assert(iscube(-1));\n    assert(iscube(64));\n \
    \   assert(iscube(0));\n    assert(!iscube(180));\n    writeln(\"All tests passed.\"\
    );\n}\n \n/*\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgsfvsgcd.d(49): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgsfvsgcd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cube;\n\
    \    cube = (long)pow(a, 1.0/3.0);\n    return cube*cube*cube == a;\n}\n/*\n \
    \   Write a function that takes an integer a and returns true if a is an even\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iseven(1L)\n    false\n    >>> iseven(2L)\n    true\n    >>> iseven(-1L)\n\
    \    false\n    >>> iseven(64L)\n    true\n    >>> iseven(0L)\n    true\n    >>>\
    \ iseven(180L)\n    true\n    \n*/\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu75ly0i2.d(26): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu75ly0i2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    bool res = false;\n\
    \    for (int i = 0; i < a; i++)\n    {\n        if ( i * i * i == a)\n      \
    \  {\n            res = true;\n            break;\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp4ihlqiv.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpp4ihlqiv.__unittest_L36_C1() [0x427a58]

    ??:? void tmpp4ihlqiv.__modtest() [0x427b44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = 0;\n\
    \    foreach(i; 0..~a)\n    {\n        if(i * i * i == a)\n        {\n       \
    \     b++;\n        }\n    }\n    if(b > 0)\n    {\n        return true;\n   \
    \ }\n    else\n    {\n        return false;\n    }\n}\n \nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsw2dr3fa.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpsw2dr3fa.__unittest_L43_C1() [0x427a6c]

    ??:? void tmpsw2dr3fa.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // return true\
    \ if a is a cube of some integer number\n    if (a == 0)\n    {\n        return\
    \ true;\n    }\n    else if (a < 0)\n    {\n        if (int(abs(a)) == int(pow(abs(a),\
    \ 1./3)))\n        {\n            return true;\n        }\n        else\n    \
    \    {\n            return false;\n        }\n    }\n    else\n    {\n       \
    \ if (int(a) == int(pow(a, 1./3)))\n        {\n            return true;\n    \
    \    }\n        else\n        {\n            return false;\n        }\n    }\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nunittest\n{\n \
    \   alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpybtu6rlq.d(232): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybtu6rlq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)\
    \ floor( pow(a, 1.0/3.0) );\n    return b*b*b == a;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplxubyj7g.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplxubyj7g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = round(pow(a,\
    \ 1.0/3.0));\n    long cubed = b*b*b;\n    return cubed == a;\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfnmpfv96.d(25): Error: cannot implicitly convert expression `round(pow(a,
    0.333333))` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnmpfv96.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ \n        return true;\n    return (int)pow(floor(pow(a,(1/3.0))),3) == a;\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpak8eo9dy.d(27): Error: C style cast illegal, use `cast(int)pow(floor(pow(a,
    1 / 3.00000)), 3)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpak8eo9dy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    \n   return\
    \ a == 0L or is(typeof(pow(a, 1.0/3)) == double);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppkma165u.d(26): Error: found `or` when expecting `;` following
    `return` statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppkma165u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a > 0\
    \ ? (int) pow(a, 1.0 / 3) == pow(a, 1.0 / 3) : true;\n}\n/*\n    Write a function\
    \ that takes a string s and returns the number of \n    occurences of the letter\
    \ a in the string.\n    >>> lettercount('mamamma')\n    4\n    >>> lettercount('papa')\n\
    \    1\n    >>> lettercount('aaaaa')\n    5\n    >>> lettercount('b')\n    0\n\
    \    >>> lettercount('')\n    0\n*/\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyczbx4bz.d(25): Error: C style cast illegal, use `cast(int)pow(a,
    1.00000 / 3)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyczbx4bz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n\treturn cube(cast(long)pow(a,\
    \ 1.0 / 3.0)) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppovc_hj9.d(25): Error: undefined identifier `cube`, did you mean
    function `iscube`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppovc_hj9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return 0 <=\
    \ a && a == rint(cbrt(a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe5_b20ue.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmpe5_b20ue.__unittest_L27_C1() [0x427b38]

    ??:? void tmpe5_b20ue.__modtest() [0x427be4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (Math.cbrt(a)\
    \ % 1 == 0) ? true : false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk5dja35g.d(25): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk5dja35g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long tst = long(pow(abs(a),\
    \ 1.0/3.0));\n    return tst*tst*tst == a;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiitgru8_.d(25): Error: cannot implicitly convert expression `pow(abs(a),
    0.333333)` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiitgru8_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a>=0\
    \ && cubeRoot(a)*cubeRoot(a)*cubeRoot(a)==a;\n}\n/*\n# No.13\n*/\n//int twoSum(int[]\
    \ nums, int target)\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfu2p0rta.d(25): Error: undefined identifier `cubeRoot`

    /tmp/tmpfu2p0rta.d(25): Error: undefined identifier `cubeRoot`

    /tmp/tmpfu2p0rta.d(25): Error: undefined identifier `cubeRoot`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfu2p0rta.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a > 0) \n\
    \    {\n        return pow(cast(real)a,1.0/3.0) % 1.0 == 0.0;\n    }\n    else\
    \ \n    {\n        return pow(cast(real)a,1.0/3.0) % 1.0 == 0.0;\n    }\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsd3o1800.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x42897d]

    ??:? void tmpsd3o1800.__unittest_L34_C1() [0x427d58]

    ??:? void tmpsd3o1800.__modtest() [0x428700]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c74b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430771]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b5]

    ??:? runModuleUnitTests [0x42c521]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dcc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return cast(double)a\
    \ == pow(cast(double)ceil(pow(cast(double)a, 1.0/3.0)), 3.0);\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5etp_yjr.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428ad5]

    ??:? void tmp5etp_yjr.__unittest_L27_C1() [0x427e98]

    ??:? void tmp5etp_yjr.__modtest() [0x428854]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca9f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b932]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ac5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b909]

    ??:? runModuleUnitTests [0x42c875]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f24]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // the answer\
    \ is the \"round\" of the cube root of the number\n    return typeof(pow(a, 1.0/3))\
    \ == double && a == cast(long)pow(a, 1.0/3);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_a0pbobv.d(26): Error: found `&&` when expecting `.` following
    double

    /tmp/tmp_a0pbobv.d(26): Error: found `==` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_a0pbobv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a > 0)\n\
    \    {\n        long t = (long) round(pow(a, 1 / 3.0));\n        if (t * t * t\
    \ == a)\n            return true;\n    }\n    else if (a == 0)\n        return\
    \ true;\n    else\n    {\n        long t = (long) round(pow(-a, 1 / 3.0));\n \
    \       if (t * t * t == -a)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7jmtlx5.d(27): Error: C style cast illegal, use `cast(long)round(pow(a,
    1 / 3.00000))`

    /tmp/tmp_7jmtlx5.d(35): Error: C style cast illegal, use `cast(long)round(pow(-a,
    1 / 3.00000))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7jmtlx5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // this solution\
    \ is based on the fact that\n    // for any integer n^3 and n^4, n^3 < n^4\n \
    \   // so if n^3 <= x <= n^4, we can conclude that\n    // x is the cube of n\n\
    \    if (a == 0L)\n        return true;\n    long n = 1L;\n    long ncubed = 1L;\n\
    \    long ncubedplusone = 2L;\n    while (ncubedplusone < a) {\n        n++;\n\
    \        ncubed = n * n * n;\n        ncubedplusone = (n + 1) * (n + 1) * (n +\
    \ 1);\n    }\n    return ncubed <= a && a <= ncubedplusone;\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx3c2rsoh.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e0d]

    ??:? void tmpx3c2rsoh.__unittest_L41_C1() [0x427abf]

    ??:? void tmpx3c2rsoh.__modtest() [0x427b8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430008]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fae5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]

    ??:? runModuleUnitTests [0x42b909]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42825c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (pow(a,1.0/3.0))%1\
    \ == 0;\n}\n/*\n    Write a function that takes a floating-point number as a parameter\n\
    \    and calculates the number of digits that are after the decimal point.\n \
    \   Examples:\n    >>> numofdecimaldigits(1.0)\n    0\n    >>> numofdecimaldigits(1.5)\n\
    \    1\n    >>> numofdecimaldigits(1.2345)\n    4\n*/\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpec_5l_c4.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x428995]

    ??:? void tmpec_5l_c4.__unittest_L38_C1() [0x427d4c]

    ??:? void tmpec_5l_c4.__modtest() [0x428718]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c763]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430789]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c38]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430715]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5cd]

    ??:? runModuleUnitTests [0x42c539]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428de4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long long n\
    \ = abs(a);\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6gfqlwh0.d(25): Error: use `long` for a 64 bit integer instead
    of `long long`

    /tmp/tmp6gfqlwh0.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6gfqlwh0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return iscube!long(a);\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1_stjzze.d(25): Error: template instance `iscube!long` `iscube`
    is not a template declaration, it is a function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_stjzze.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || (long)pow(cbrt(a), 3) == a;\n}\nunittest\n{\n \
    \   alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpavg0txsc.d(25): Error: C style cast illegal, use `cast(long)pow(cbrt(a),
    3)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpavg0txsc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long res = (long)pow(a,\
    \ 1.0 / 3.0);\n    return (a == res * res * res);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi5y4to13.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5y4to13.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long x = (long)pow(a,\
    \ 1.0/3.0);\n    if(x * x * x == a)\n        return true;\n    return false;\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphtk7t6md.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphtk7t6md.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a % 2\
    \ == 0 || a % 3 == 0 || a % 4 == 0;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp17jca4u4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmp17jca4u4.__unittest_L27_C1() [0x427a68]

    ??:? void tmp17jca4u4.__modtest() [0x427b54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0) || (a > 0 && float.isinteger(math.cbrt(a)));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjx5mb0p4.d(25): Error: no property `isinteger` for type `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjx5mb0p4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a==0)\n\
    \        return true;\n    else if (a==1)\n        return true;\n    else if (a<0)\n\
    \        return iscube(-a);\n    else\n    {\n        long x = (long)ceil(pow(a,1.0/3.0));\n\
    \        if (x*x*x==a)\n            return true;\n        else\n            return\
    \ false;\n    }\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuk0gq_72.d(33): Error: C style cast illegal, use `cast(long)ceil(pow(a,
    1.00000 / 3.00000))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuk0gq_72.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return floor(pow(a,\
    \ 1/3.0)) == pow(a, 1/3.0);\n}\n/*\n    Show what will be the result of the following\
    \ program and why.\n    int a = 5;\n    int &b = a;\n    int *p = &a;\n    *p\
    \ = b = 2;\n    cout << a << \", \" << b << \", \" << *p << endl;\n*/\n//Will\
    \ print 2, 2, 2\n/*\n    What will be the result of the following program and\
    \ why.\n    int a = 5;\n    int &b = a;\n    int *p = &a;\n    *p = b = a = 2;\n\
    \    cout << a << \", \" << b << \", \" << *p << endl;\n*/\n//Will print 2, 2,\
    \ 2\n/*\n    Write a function that takes an integer a and returns true \n    if\
    \ this ingeger is a square of some integer number.\n    Note: you may assume the\
    \ input is always valid.\n    Examples:\n    >>> issquare(1L)\n    true\n    >>>\
    \ issquare(2L)\n    false\n    >>> issquare(-1L)\n    true\n    >>> issquare(64L)\n\
    \    true\n    >>> issquare(0L)\n    true\n    >>> issquare(180L)\n    false\n\
    */\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) ==\
    \ true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n\
    \    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppu66q1pu.d(69): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a85]

    ??:? void tmppu66q1pu.__unittest_L63_C1() [0x427e3c]

    ??:? void tmppu66q1pu.__modtest() [0x428808]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c96b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430991]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430e40]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43091d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b7d5]

    ??:? runModuleUnitTests [0x42c741]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ed4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n\tassert(a >= 0);\n\
    \treturn isPowerOfThree(a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjicxmh__.d(26): Error: undefined identifier `isPowerOfThree`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjicxmh__.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ pow(cast(long)round(pow(a, 1.0 / 3.0)), 3L);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp52_3sm2t.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428b3d]

    ??:? void tmp52_3sm2t.__unittest_L27_C1() [0x427e54]

    ??:? void tmp52_3sm2t.__modtest() [0x4288bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c923]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b7b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430949]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430df8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308d5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b78d]

    ??:? runModuleUnitTests [0x42c6f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f8c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cbrt(long);\n\
    \    return a == 0 || (a < 0 && -a == cbrt(-a)) || a == cbrt(a);\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/.rdmd-1825653804/rdmd-tmp9b0gk4lj.d-8B8E89039D21FC3CDED8C38CFE35276F/objs/tmp9b0gk4lj.o:
    In function `_D11tmp9b0gk4lj6iscubeFlZb'':

    /tmp/tmp9b0gk4lj.d:(.text._D11tmp9b0gk4lj6iscubeFlZb[_D11tmp9b0gk4lj6iscubeFlZb]+0x2b):
    undefined reference to `_D11tmp9b0gk4lj6iscubeFlZ4cbrtMFlZl''

    /tmp/tmp9b0gk4lj.d:(.text._D11tmp9b0gk4lj6iscubeFlZb[_D11tmp9b0gk4lj6iscubeFlZb]+0x49):
    undefined reference to `_D11tmp9b0gk4lj6iscubeFlZ4cbrtMFlZl''

    collect2: error: ld returned 1 exit status

    Error: linker exited with status 1

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long tmp=a;\n\
    \    if(a<0)\n    {\n        tmp=-a;\n    }\n    for(size_t i=0;i<tmp;i++)\n \
    \   {\n        if(tmp==i*i*i)\n        {\n            return true;\n        }\n\
    \    }\n    return false;\n}\n/*\n    Write a function that takes two integers\
    \ a and b and returns \n    true if one of them is positive and the other is negative.\n\
    \    Examples:\n    >>> haveoppsigns(1L, -1L)\n    true\n    >>> haveoppsigns(1L,\
    \ 1L)\n    false\n    >>> haveoppsigns(-1L, -1L)\n    false\n    >>> haveoppsigns(0L,\
    \ -1L)\n    true\n    >>> haveoppsigns(0L, 1L)\n    true\n    >>> haveoppsigns(1L,\
    \ 0L)\n    true\n    >>> haveoppsigns(-1L, 0L)\n    true\n*/\nunittest\n{\n  \
    \  alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlo8fhwd.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmpqlo8fhwd.__unittest_L58_C1() [0x427a60]

    ??:? void tmpqlo8fhwd.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    else if (a == 1)\n        return true;\n    else if\
    \ (a < 0)\n        return iscube(-a);\n    auto x = ((long)pow(a, (1.0 / 3.0)));\n\
    \    return x * x * x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ag7802n.d(31): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ag7802n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n  return (a == 0)\
    \ || ((a % 2 == 0 || a % 2 == -2) && cubeRoot(abs(a)) * cubeRoot(abs(a)) * cubeRoot(abs(a))\
    \ == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq7cyogav.d(25): Error: undefined identifier `cubeRoot`

    /tmp/tmpq7cyogav.d(25): Error: undefined identifier `cubeRoot`

    /tmp/tmpq7cyogav.d(25): Error: undefined identifier `cubeRoot`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq7cyogav.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a==0) return\
    \ true;\n    if (a<0) a*=-1;\n    if (cast(long)pow(cast(double)a, 1.0/3.0) ==\
    \ pow(cast(double)a, 1.0/3.0))\n        return true;\n    return false;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp15lrky_b.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x428975]

    ??:? void tmp15lrky_b.__unittest_L31_C1() [0x427d57]

    ??:? void tmp15lrky_b.__modtest() [0x4286f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c743]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430769]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c18]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ad]

    ??:? runModuleUnitTests [0x42c519]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dc4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || floor(pow(abs(a), 1.0/3.0))**3 == abs(a);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsj1ykk9z.d(25): Error: can only `*` a pointer, not a `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsj1ykk9z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return ispow(a,3);\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_568kamz.d(25): Error: undefined identifier `ispow`, did you mean
    template `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_568kamz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return cast(bool)(a\
    \ == 0L || (((long)pow(a, (1.0/3.0))) * ((long)pow(a, (1.0/3.0))) * ((long)pow(a,\
    \ (1.0/3.0))) == a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpktd5ruq5.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    /tmp/tmpktd5ruq5.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000
    / 3.00000)`

    /tmp/tmpktd5ruq5.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000
    / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpktd5ruq5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long temp =\
    \ isqrt(a);\n    if (temp*temp*temp == a)\n    {\n        return true;\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqrtwtos2.d(25): Error: undefined identifier `isqrt`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrtwtos2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = 0;\n\
    \    for (b = 0; b < a; b++)\n    {\n        if (pow(b, 3) == a)\n        {\n\
    \            return true;\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3lnnfg9g.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e9d]

    ??:? void tmp3lnnfg9g.__unittest_L35_C1() [0x427a98]

    ??:? void tmp3lnnfg9g.__modtest() [0x427c1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430098]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]

    ??:? runModuleUnitTests [0x42b999]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (i64)pow(abs(a),\
    \ 1.0/3.0) == pow(abs(a), 1.0/3.0);\n}\n \nunittest\n{\n    alias candidate =\
    \ iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n\
    \    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n  \
    \  assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvfgvob15.d(25): Error: C style cast illegal, use `cast(i64)pow(abs(a),
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvfgvob15.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    double d = std.math.sqrt(a);\n\
    \    double cubeRoot = std.math.round(d);\n    return a == cubeRoot * cubeRoot\
    \ * cubeRoot;\n}\n/*\n    Write a function that takes a string as input and returns\
    \ a long that is the \n    number of unbracketed comments in the string.\n   \
    \ Note: \"unbracketed\" here means that the comment starts with // or /*, but\n\
    \    its end is not signalled by */\n    Note: a \"comment\" always starts with\
    \ // or /* and ends with the next line \n    break (newline symbol).\n    Examples:\n\
    \    >>> unbracketed_comments_count(\"\")\n    0L\n    >>> unbracketed_comments_count(\"\
    //sfsf\\nsfsfffsfs\")\n    1L\n    >>> unbracketed_comments_count(\"/*sfsf\\nsfsfffsfs\"\
    )\n    1L\n    >>> unbracketed_comments_count(\"/*sfsf\\nsfsfffsfs\\n*/sfsfsf\"\
    )\n    1L\n    >>> unbracketed_comments_count(\"//sfsf\\nsfsfffsfs\\n/*\\nsfsfsf\"\
    )\n    2L\n*/\nlong unbracketed_comments_count(string a)\n{\n    import std.string;\n\
    \    import std.regex;\n    import std.algorithm;\n    import std.range;\n   \
    \ import std.conv;\n    int result = 0;\n    while(true)\n    {\n        int idx\
    \ = a.find(\"//\");\n        if(idx == -1)\n            break;\n        a = a[idx+2..$];\n\
    \        result++;\n    }\n    while(true)\n    {\n        int idx = a.find(\"\
    /*\");\n        if(idx == -1)\n            break;\n        a = a[idx+2..$];\n\
    \        result++;\n    }\n    return result;\n}\n/*\n    Write a function that\
    \ takes an array of numbers as input and returns a long\n    which is the index\
    \ of the first entry in the array that is greater than its \n    right neighbour.\n\
    \    If there is\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj4lbf87f.d(34): Error: no identifier for declarator `Note`

    /tmp/tmpj4lbf87f.d(34): Error: declaration expected, not `:`

    /tmp/tmpj4lbf87f.d(56): Error: declaration expected, not `while`

    /tmp/tmpj4lbf87f.d(59): Error: declaration expected, not `if`

    /tmp/tmpj4lbf87f.d(61): Error: no identifier for declarator `a`

    /tmp/tmpj4lbf87f.d(61): Error: declaration expected, not `=`

    /tmp/tmpj4lbf87f.d(62): Error: no identifier for declarator `result`

    /tmp/tmpj4lbf87f.d(62): Error: declaration expected, not `++`

    /tmp/tmpj4lbf87f.d(63): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj4lbf87f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (ispositivge(a)\
    \ || a == 0) && !(a % cbrt(a) != 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpozgtdzc5.d(25): Error: undefined identifier `ispositivge`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpozgtdzc5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n  return modf(cbrt(a))\
    \ == 0.0;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvwktq6_z.d(25): Error: function `std.math.modf(real x, ref real
    i)` is not callable using argument types `(real)`

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n\treturn cast(bool)(a\
    \ % 3 == 0 || a == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp97yxxjgs.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427da5]

    ??:? void tmp97yxxjgs.__unittest_L27_C1() [0x427a3c]

    ??:? void tmp97yxxjgs.__modtest() [0x427b28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bacb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a95e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]

    ??:? runModuleUnitTests [0x42b8a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    double x = cbrt(a);\n\
    \    if (x == ceil(x))\n        return true;\n    else\n        return false;\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (cubeRoot(a)\
    \ - floor(cubeRoot(a))) == 0.0;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7q9e_p2r.d(25): Error: undefined identifier `cubeRoot`

    /tmp/tmp7q9e_p2r.d(25): Error: undefined identifier `cubeRoot`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7q9e_p2r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ cbrt(a) * cbrt(a) * cbrt(a);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfioxhck6.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpfioxhck6.__unittest_L27_C1() [0x427ba6]

    ??:? void tmpfioxhck6.__modtest() [0x427c14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]

    ??:? runModuleUnitTests [0x42b9a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // Note: if\
    \ you need to work with float, \n    // use std.math.sqrt instead of the root\
    \ function.\n    // long b = Math.root(a, 3);\n    // return a == b * b * b;\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4suwmnfw.d(29): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4suwmnfw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    else\n        return a % 3 == 0 && iscube(a / 3);\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprjkyr3co.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmprjkyr3co.__unittest_L30_C1() [0x427a58]

    ??:? void tmprjkyr3co.__modtest() [0x427b44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return Math.isInt(Math.cbrt(a));\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd67begok.d(25): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd67begok.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // if 'a' is\
    \ a cube of some integer number,\n    // then 'a' must be divided by some power\
    \ of 3 without a reminder\n    return (a % 3) == 0;\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ph9d7rj.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmp6ph9d7rj.__unittest_L29_C1() [0x427a30]

    ??:? void tmp6ph9d7rj.__modtest() [0x427b1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    bool ret = false;\n\
    \    if( a == 0 || a == 1 || a == -1 ) ret = true;\n    else if( a > 0 )\n   \
    \ {\n        long end = long(pow(a,1.0/3.0));\n        foreach(i;0 .. end)\n \
    \       {\n            if( i*i*i == a )\n            {\n                ret =\
    \ true;\n                break;\n            }\n        }\n    }\n    else\n \
    \   {\n        long end = long(pow(-a,1.0/3.0));\n        foreach(i;0 .. end)\n\
    \        {\n            if( i*i*i == -a )\n            {\n                ret\
    \ = true;\n                break;\n            }\n        }\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8o09qafa.d(29): Error: cannot implicitly convert expression `pow(a,
    0.333333)` of type `real` to `long`

    /tmp/tmp8o09qafa.d(41): Error: cannot implicitly convert expression `pow(-a, 0.333333)`
    of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8o09qafa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n     //1L is the\
    \ same as 1\n     if(a == 1L) \n     {\n         return true;\n     }\n     if(a\
    \ < 0L)\n     {\n         a = abs(a);\n     }\n     if(a == 0L)\n     {\n    \
    \     return true;\n     }\n     //if(cast(long) pow(cast(double) a, 1.0 / 3.0)\
    \ == a) \n     if(cast(long) pow(cast(double) a, 0.33333333333333333333) == a)\
    \ \n     {\n         return true;\n     }\n     return false;\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6_7x1g_a.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289b5]

    ??:? void tmp6_7x1g_a.__unittest_L45_C1() [0x427d7f]

    ??:? void tmp6_7x1g_a.__modtest() [0x428734]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c783]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b616]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430735]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]

    ??:? runModuleUnitTests [0x42c559]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e04]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long num = a;\n\
    \    double x = 0.0;\n    while(a > 0)\n    {\n        if(a % 3 == 0)\n      \
    \  {\n            a /= 3;\n            x++;\n        }\n        else\n       \
    \ {\n            return false;\n        }\n    }\n    long res = (long)Math.pow(3,\
    \ x);\n    if(res == num)\n    {\n        return true;\n    }\n    else\n    {\n\
    \        return false;\n    }\n}\nstatic class Program\n{\n    static void Main()\n\
    \    {\n        int num = int.Parse(Console.ReadLine());\n        bool res = iscube(num);\n\
    \        Console.WriteLine(res);\n    }\n}\nunittest\n{\n    alias candidate =\
    \ iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n\
    \    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n  \
    \  assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpznbkoyr1.d(39): Error: C style cast illegal, use `cast(long)Math.pow(3,
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpznbkoyr1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0L)\n\
    \        return true;\n    if (a < 0L)\n        a = -a;\n    double b = cbrt(a);\n\
    \    if (b == floor(b))\n        return true;\n    return false;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (a > 0 && pow(a, 1.0/3.0) % 1 == 0);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa6riuibc.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmpa6riuibc.__unittest_L27_C1() [0x427d64]

    ??:? void tmpa6riuibc.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ pow(cast(int) (cbrt(a) + 0.5), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk6jeeczv.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f45]

    ??:? void tmpk6jeeczv.__unittest_L27_C1() [0x427b94]

    ??:? void tmpk6jeeczv.__modtest() [0x427cc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430158]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaed]

    ??:? runModuleUnitTests [0x42ba59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428394]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a % 2 == 0) \n    {\n        return false;\n  \
    \  } \n    else \n    {\n        long left = long(pow(a, 1.0 / 3.0));\n      \
    \  if (left * left * left == a)\n            return true;\n        else\n    \
    \        return false;\n    }\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0y9zqf6f.d(33): Error: cannot implicitly convert expression `pow(a,
    0.333333)` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0y9zqf6f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // Make a new\
    \ optional long\n    auto x = to!long(pow(a, 1.0/3.0));\n    // Return true if\
    \ the cube root is equal to the cube\n    return x.isSome && a == x.get * x.get\
    \ * x.get;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqgxi0gm8.d(26): Error: template instance `to!long` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqgxi0gm8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    //TODO\n   \
    \ if (a == 1 || a == -1 || a == 0) {\n        return true;\n    }\n    if (a %\
    \ 2 == 0) {\n        return false;\n    }\n    double result = cbrt(a);\n    if\
    \ (result == int(result)) {\n        return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr8grlgg1.d(33): Error: cannot implicitly convert expression `result`
    of type `double` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr8grlgg1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long result\
    \ = round(cbrt(a));\n    if (result*result*result == a) return true;\n    return\
    \ false;\n}\n \nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxjrhc70x.d(25): Error: cannot implicitly convert expression `round(cbrt(cast(real)a))`
    of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxjrhc70x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return floor(pow(a,\
    \ 1.0/3.0)) == ceil(pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjvm8ud_x.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428ad5]

    ??:? void tmpjvm8ud_x.__unittest_L27_C1() [0x427e8c]

    ??:? void tmpjvm8ud_x.__modtest() [0x428858]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca27]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b8ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a4d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430efc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b891]

    ??:? runModuleUnitTests [0x42c7fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f24]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a < 0) a = -a;\n    long pow = to!long(pow(a, 1.0 / 3.0));\n\
    \    return a == pow * pow * pow;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp47d5hdx1.d(27): Error: template instance `to!long` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47d5hdx1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    auto v=typeof(a)(pow(double(abs(a)),1.0/3.0));\n\
    \    if (a==0) return true;\n    if (abs(v*v*v)!=abs(a)) return false;\n    if\
    \ (a<0) return (v*v*v==a && (v%2)!=0);\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw632cu_4.d(25): Error: cannot implicitly convert expression `pow(cast(double)abs(a),
    0.333333)` of type `double` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw632cu_4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0L)\
    \ \n    {\n        return true;\n    }\n    auto c = cast(long)cbrt(a);\n    return\
    \ c*c*c == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a < 0) \n\
    \    {\n        a = -a;\n    }\n    long x = isqrt(a);\n    long val = x * x *\
    \ x;\n    return val == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm5i87jl3.d(29): Error: undefined identifier `isqrt`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm5i87jl3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ cast(int) (pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc3njyk_v.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428995]

    ??:? void tmpc3njyk_v.__unittest_L27_C1() [0x427d48]

    ??:? void tmpc3njyk_v.__modtest() [0x428714]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c763]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430789]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c38]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430715]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5cd]

    ??:? runModuleUnitTests [0x42c539]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428de4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // your code\
    \ here\n    if (a == 0)\n        return true;\n    if (a % 2 == 0)\n        return\
    \ false;\n    long b = ceil(pow(a, 1.0/3.0));\n    return b*b*b == a;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu4p797h8.d(30): Error: cannot implicitly convert expression `ceil(pow(a,
    0.333333))` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu4p797h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a==0?true:a>0?(long)abs(pow(a,1.0/3))==pow(a,1.0/3):(long)abs(pow(a,1.0/3))==pow(a,1.0/3);\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp68_7l7mn.d(25): Error: C style cast illegal, use `cast(long)abs(pow(a,
    1.00000 / 3))`

    /tmp/tmp68_7l7mn.d(25): Error: C style cast illegal, use `cast(long)abs(pow(a,
    1.00000 / 3))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68_7l7mn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    bool result;\n\
    \    if (a<0) \n    {\n        a*=-1;\n    }\n    long lower=1;\n    long upper=(long)pow(a,1/3.0);\n\
    \    if (a==0) \n    {\n        result=true;\n    }\n    else if (a>0) \n    {\n\
    \        if (a==lower*lower*lower) \n        {\n            result=true;\n   \
    \     }\n        else if (a==upper*upper*upper) \n        {\n            result=true;\n\
    \        }\n        else \n        {\n            result=false;\n        }\n \
    \   }\n    return result;\n}\nversion(unittest)\n{\n    static assert(iscube(1L));\n\
    \    static assert(!iscube(2L));\n    static assert(iscube(-1L));\n    static\
    \ assert(iscube(64L));\n    static assert(iscube(0L));\n    static assert(!iscube(180L));\n\
    \    static assert(iscube(64L));\n    static assert(iscube(27L));\n    static\
    \ assert(iscube(216L));\n    static assert(iscube(125L));\n    static assert(iscube(216L));\n\
    \    static assert(iscube(0L));\n    static assert(iscube(1L));\n    static assert(iscube(-1L));\n\
    \    static assert(iscube(-27L));\n    static assert(iscube(-125L));\n    static\
    \ assert(iscube(-216L));\n    static assert(iscube(-729L));\n    static assert(iscube(-1000L));\n\
    \    static assert(iscube(-531441L));\n    static assert(iscube(-1953125L));\n\
    \    static assert(iscube(-1000000L));\n    static assert(iscube(-9765625L));\n\
    \    static assert(iscube(-9261L));\n    static assert(iscube(-15625L));\n   \
    \ static assert(iscube(-17576L));\n    static assert(iscube(-19683L));\n    static\
    \ assert(iscube(-387420489L));\n    static assert(iscube(-43046721L));\n\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8xymu38d.d(31): Error: C style cast illegal, use `cast(long)pow(a,
    1 / 3.00000)`

    /tmp/tmp8xymu38d.d(98): Error: matching `}` expected, not `End of File`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8xymu38d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // your code\
    \ here\n    int cubeRoot = int(cbrt(a));\n    return cubeRoot * cubeRoot * cubeRoot\
    \ == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppby6n1qw.d(26): Error: cannot implicitly convert expression `cbrt(cast(real)a)`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppby6n1qw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return is(typeof(cbrt(a)))\
    \ && cbrt(a) == cast(long)cbrt(a);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    double i = pow(a, 1.0 / 3.0);\n    long j = i;\n  \
    \  return i == j;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp78gkk54j.d(28): Error: cannot implicitly convert expression `i`
    of type `double` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp78gkk54j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long s;\n  \
    \  //long   r = a % 2;\n    long r = modulo(a, 2);\n    if (a >= 0) \n    {\n\
    \        s = sqrt(a);\n        return (r == 0 && s * s * s == a);\n    }\n   \
    \ else \n    {\n        s = sqrt(-a);\n        return (r == 0 && s * s * s ==\
    \ -a);\n    }\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0cipoj66.d(27): Error: undefined identifier `modulo`

    /tmp/tmp0cipoj66.d(30): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmp0cipoj66.d(35): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ['
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long r = powl(a,\
    \ 1.0 / 3.0);\n    if (r*r*r == a)\n        return true;\n    else\n        return\
    \ false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpik4_3j4p.d(25): Error: undefined identifier `powl`, did you mean
    template `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpik4_3j4p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return typeTuple(a)\
    \ == typeTuple(pow(round(pow(a, 1.0/3.0)), 3));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7ep0293.d(25): Error: undefined identifier `typeTuple`

    /tmp/tmpb7ep0293.d(25): Error: undefined identifier `typeTuple`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7ep0293.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return abs(a)\
    \ == cast(long)pow(abs(a), 1.0/3.0);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0rlpyp5q.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a05]

    ??:? void tmp0rlpyp5q.__unittest_L27_C1() [0x427dbf]

    ??:? void tmp0rlpyp5q.__modtest() [0x428784]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b666]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307f9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ca8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430785]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b63d]

    ??:? runModuleUnitTests [0x42c5a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e54]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return pow(cbrt(a),\
    \ 3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqpcu8wvg.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f8d]

    ??:? void tmpqpcu8wvg.__unittest_L27_C1() [0x427bca]

    ??:? void tmpqpcu8wvg.__modtest() [0x427d0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bccb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab35]

    ??:? runModuleUnitTests [0x42baa1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    bool ret = false;\n\
    \    double root = (a != 0) ? pow(a,1.0/3.0) : 0;\n    long r = cast(long)root;\n\
    \    if( r * r * r == a )\n        ret = true;\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp25thq_h.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289cd]

    ??:? void tmpp25thq_h.__unittest_L32_C1() [0x427d80]

    ??:? void tmpp25thq_h.__modtest() [0x42874c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307c1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43074d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b605]

    ??:? runModuleUnitTests [0x42c571]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e1c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long x = a >\
    \ 0 ? a : -a;\n    long r = (long)pow(x, 1./3.);\n    return r * r * r == x;\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1qd6w7qn.d(26): Error: C style cast illegal, use `cast(long)pow(x,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1qd6w7qn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return is(typeof(cbrt(a)\
    \ - cast(int)cbrt(a) == 0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprdwo9svs.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmprdwo9svs.__unittest_L27_C1() [0x427a3b]

    ??:? void tmprdwo9svs.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    long b = abs(a);\n    long y = pow(b, 1./3);\n    return y*y*y\
    \ == b;\n}\n \n/*\n    Main function\n*/\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsgz81pot.d(27): Error: cannot implicitly convert expression `pow(b,
    0.333333)` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsgz81pot.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return ispow(abs(a),\
    \ 3L);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiq87at_y.d(25): Error: undefined identifier `ispow`, did you mean
    template `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiq87at_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    if (a < 0)\n        a = -a;\n    return double.approxEqual(pow(a,\
    \ 1.0 / 3.0), trunc(pow(a, 1.0 / 3.0)));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphmtuhjac.d(29): Error: cannot pass type `double` as a function
    argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphmtuhjac.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // a is cube\
    \ if and only if n^3 is integer\n    long n = (long)cbrt(a);\n    return n*n*n\
    \ == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpit94n9jx.d(26): Error: C style cast illegal, use `cast(long)cbrt(a)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpit94n9jx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ cbrt(a) * cbrt(a) * cbrt(a);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfioxhck6.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpfioxhck6.__unittest_L27_C1() [0x427ba6]

    ??:? void tmpfioxhck6.__modtest() [0x427c14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]

    ??:? runModuleUnitTests [0x42b9a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // your code\
    \ goes here\n}\n/*\n    Write a function that takes an integer and returns this\
    \ integer\n    in reverse order. \n    Examples:\n    >>> reverse(12345)\n   \
    \ 54321\n    >>> reverse(100500)\n    5001\n*/\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiqbavsnk.d(23): Error: function `tmpiqbavsnk.iscube` has no `return`
    statement, but is expected to return a value of type `bool`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqbavsnk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    auto y = cast(long)pow(a,\
    \ 1.0 / 3.0);\n    if (y*y*y == a)\n        return true;\n    return false;\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpevdde338.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289b5]

    ??:? void tmpevdde338.__unittest_L30_C1() [0x427d68]

    ??:? void tmpevdde338.__modtest() [0x428734]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c783]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b616]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430735]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]

    ??:? runModuleUnitTests [0x42c559]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e04]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    double x = abs(a);\n    return pow(floor(pow(x, 1.0\
    \ / 3.0)), 3) == x;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmd9k8r3q.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428ca5]

    ??:? void tmpmd9k8r3q.__unittest_L30_C1() [0x427f4b]

    ??:? void tmpmd9k8r3q.__modtest() [0x428a28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cc47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bada]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c6d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43111c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430bf9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bab1]

    ??:? runModuleUnitTests [0x42ca1d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4290f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    \n    a = abs(a);\n\
    \    long x = (long) (std.math.cbrt(a));\n    long cube = x * x * x;\n    if (cube\
    \ == a) {\n        return true;\n    }\n    return false;\n}\n// write iscube\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptevs2g_h.d(27): Error: C style cast illegal, use `cast(long)std.math.cbrt(a)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptevs2g_h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    \n    if (a\
    \ < 0)\n    {\n        a = -a;\n    }\n    \n    if (a == 0)\n    {\n        return\
    \ true;\n    }\n    \n    long x = static_cast!long(pow(a, 1 / 3.0));\n    \n\
    \    return x * x * x == a;\n    \n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5uts2291.d(36): Error: template instance `static_cast!long` template
    `static_cast` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5uts2291.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    //cbrt is a\
    \ function in the std.math module\n    return (is(typeof(cbrt(a)) == double));\
    \ \n    //returns true if the type of the expression is a double\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm8hwahtq.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpm8hwahtq.__unittest_L29_C1() [0x427a1c]

    ??:? void tmpm8hwahtq.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    int cube;\n\
    \    cube = round(pow(abs(a),1.0/3.0));\n    return (a == cube*cube*cube);\n}\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp344urhe9.d(26): Error: cannot implicitly convert expression `round(pow(abs(a),
    0.333333))` of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp344urhe9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a < 0) a = -a;\n    long x = (long)pow(a, 1.0/3.0);\n\
    \    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2gm4m8z.d(27): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2gm4m8z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a < 0\
    \ ? iscube(-a) : int(cube_root(a)) == cube_root(a);\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp36eg8yxw.d(25): Error: undefined identifier `cube_root`

    /tmp/tmp36eg8yxw.d(25): Error: undefined identifier `cube_root`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36eg8yxw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a > 0\
    \ ? (pow(a,1/3f)%1 == 0 ? true : false) : true;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3tb_579v.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x42899d]

    ??:? void tmp3tb_579v.__unittest_L27_C1() [0x427d6f]

    ??:? void tmp3tb_579v.__modtest() [0x42871c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c76b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430791]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c40]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43071d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d5]

    ??:? runModuleUnitTests [0x42c541]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long c = cast(long)pow(a,\
    \ 1/3.0);\n    return c*c*c == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvu1j8yun.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmpvu1j8yun.__unittest_L28_C1() [0x427d64]

    ??:? void tmpvu1j8yun.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b;\n  \
    \  for (long i = 1; i < a / 2; i++) \n    {\n        b = (long)pow(i, 3);\n  \
    \      if (b == a)\n            return true;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpygge3jcy.d(28): Error: C style cast illegal, use `cast(long)pow(i,
    3)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygge3jcy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    double cbrt\
    \ = sqrt(a);\n    return cbrt == rint(cbrt);\n}\n/*\n    The function below takes\
    \ the two parameters and returns the number of numbers that are larger than the\
    \ first parameter and smaller than the second one (including both the parameters).\n\
    \    If the function is called with the first parameter being larger than the\
    \ second one, return 0.\n    Examples:\n    >>> countnumbers(3, 5)\n    2\n  \
    \  >>> countnumbers(5, 3)\n    0\n    >>> countnumbers(1, 1)\n    0\n    >>> countnumbers(5,\
    \ 8)\n    3\n    >>> countnumbers(1, 10)\n    9\n    >>> countnumbers(5, 5)\n\
    \    0\n*/\nlong countnumbers(long a, long b)\n{\n    if (a > b) {\n        return\
    \ 0;\n    } else {\n        return b - a - 1;\n    }\n}\n/*\n    Write a function\
    \ that checks if two given numbers are relatively prime. Two numbers are relatively\
    \ prime if their only common divisor is 1.\n    Example:\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bzwhlni.d(53): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bzwhlni.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    static if (__traits(compiles,\
    \ typeof(long.isNaN)))\n    {\n        if (a.isNaN)\n            return false;\n\
    \    }\n    if (a < 0)\n        a = -a;\n    if (a == 0)\n        return true;\n\
    \    long r = cast(long) sqrt(a);\n    return r * r * r == a;\n}\nunittest\n{\n\
    \    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9woswvl2.d(34): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9woswvl2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a %\
    \ cube(cast(long)sqrt(a)) == 0);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15psqdh0.d(25): Error: undefined identifier `cube`, did you mean
    function `iscube`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15psqdh0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (std.math.cbrt(a)\
    \ * std.math.cbrt(a) * std.math.cbrt(a)) == a;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl2v9y1bd.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e8d]

    ??:? void tmpl2v9y1bd.__unittest_L27_C1() [0x427b9e]

    ??:? void tmpl2v9y1bd.__modtest() [0x427c0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbcb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa35]

    ??:? runModuleUnitTests [0x42b9a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ cube(cast(long)sqrt(a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_f8tdmq7.d(25): Error: undefined identifier `cube`, did you mean
    function `iscube`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_f8tdmq7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    auto cbrt =\
    \ (long)pow(cast(double)a, 1.0/3.0);\n    return cbrt * cbrt * cbrt == a;\n}\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3zne2n6i.d(25): Error: C style cast illegal, use `cast(long)pow(cast(double)a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3zne2n6i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a == 1) return true;\n    if (a < 0) a = abs(a);\n   \
    \ double b = pow(a, 1.0/3.0);\n    return (b == int(b));\n}\nunittest\n{\n   \
    \ alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptmw3s6nx.d(29): Error: cannot implicitly convert expression `b`
    of type `double` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptmw3s6nx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    const ispoweroftwo\
    \ = (long n) {\n        if (n <= 0) return false;\n        while(n % 2 == 0) n\
    \ /= 2;\n        return n == 1;\n    };\n    return a == 0 || (ispoweroftwo(a)\
    \ && a % 8 == 1);\n}\n/*\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6j1awo77.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6j1awo77.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    bool ret;\n\
    \    if (a < 0)\n    {\n        ret = true;\n    }\n    else\n    {\n        auto\
    \ b = long(pow(float(a), 1.0/3.0));\n        if (b * b * b == a)\n        {\n\
    \            ret = true;\n        }\n        else\n        {\n            ret\
    \ = false;\n        }\n    }\n    return ret;\n}\n/*\n    Write a function that\
    \ takes a string and returns a tuple of \n    3 elements containing the count\
    \ of lowercase, uppercase and \n    neither case characters.\n    Note: you may\
    \ assume the input is always valid.\n    Examples:\n    >>> count(\"abcABC\")\n\
    \    (3, 3, 0)\n    >>> count(\"aBc\")\n    (1, 2, 0)\n    >>> count(\"123\")\n\
    \    (0, 0, 3)\n    >>> count(\"\")\n    (0, 0, 0)\n    >>> count(\"aaa!!!!!!BBBB!!!!!!!\"\
    )\n    (3, 4, 8)\n    >>> count(\"Aa\")\n    (1, 1, 0)\n*/\nauto count(string\
    \ a) \n{\n    auto lower = a.count!(char.isLower)();\n    auto upper = a.count!(char.isUpper)();\n\
    \    auto neither = a.count!(c => !char.isUpper(c) && !char.isLower(c))();\n \
    \   return tuple(lower, upper, neither);\n}\n/*\n    Write a function that takes\
    \ a list of integers and two integers \n    x and y and returns the number of\
    \ elements that are \n    greater than y and less than x\n    Note: you may assume\
    \ the input is always valid.\n    Examples:\n    >>> count_range([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10], 4, 7)\n    3\n    >>> count_range([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10], 1, 20)\n    10\n    >>> count_range([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\
    \ 10, 1)\n\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps1mlum5v.d(70): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps1mlum5v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (cast(long)pow(cast(double)a,\
    \ 1.0/3.0)) * (cast(long)pow(cast(double)a, 1.0/3.0)) * (cast(long)pow(cast(double)a,\
    \ 1.0/3.0)) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxeuajwq3.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42897d]

    ??:? void tmpxeuajwq3.__unittest_L27_C1() [0x427d40]

    ??:? void tmpxeuajwq3.__modtest() [0x4286fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c74b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430771]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b5]

    ??:? runModuleUnitTests [0x42c521]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dcc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long left =\
    \ 1L;\n    long right = a;\n    while (left <= right)\n    {\n        auto mid\
    \ = (left + right) / 2;\n        auto res = mid * mid * mid;\n        if (res\
    \ == a)\n            return true;\n        else if (res < a)\n            left\
    \ = mid + 1;\n        else\n            right = mid - 1;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo8h_v3ta.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmpo8h_v3ta.__unittest_L40_C1() [0x427ad8]

    ??:? void tmpo8h_v3ta.__modtest() [0x427b84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || abs(cbrt(a) % 1) < 0.0001;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long n = (long)\
    \ exp(log(a) / 3);\n    return (n * n * n) == a;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm3n2z9w8.d(25): Error: C style cast illegal, use `cast(long)exp(log(a)
    / 3)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm3n2z9w8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0L)\n\
    \        return true;\n    else if (a < 0L)\n        return iscube(-a);\n    else\
    \ {\n        auto b = a;\n        while (b < a * a)\n            b += b;\n   \
    \     return b == a * a;\n    }\n}\n/*\n    Write a function that takes an integer\
    \ n and returns all primes less than n.\n    Note: prime numbers start from 2.\n\
    \    Examples:\n    >>> primes(2)\n    [2]\n    >>> primes(10)\n    [2, 3, 5,\
    \ 7]\n    >>> primes(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> primes(1)\n\
    \    []\n*/\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp7r1vktp.d(54): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmpp7r1vktp.__unittest_L49_C1() [0x427aa3]

    ??:? void tmpp7r1vktp.__modtest() [0x427b70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (cbrt(a)\
    \ - floor(cbrt(a))) == 0;\n}\nunittest\n{\n    alias candidate = iscube;\n\n \
    \   assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long x = powl(a,\
    \ 1.0L / 3.0L);\n    return powl(x, 3L) == a;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4xooxywa.d(25): Error: undefined identifier `powl`, did you mean
    template `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    /tmp/tmp4xooxywa.d(26): Error: undefined identifier `powl`, did you mean template
    `pow(F, G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4xooxywa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0L)\n\
    \        return true;\n    long k = pow(a, 1.0/3.0);\n    return k * k * k ==\
    \ a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpao83dvdv.d(27): Error: cannot implicitly convert expression `pow(a,
    0.333333)` of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpao83dvdv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (long)cbrt(a)\
    \ == cbrt(a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9c2j53d0.d(25): Error: C style cast illegal, use `cast(long)cbrt(a)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9c2j53d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    bool result\
    \ = false;\n    long max = a;\n    long min = -a;\n    for (long i = min; i <\
    \ max; i++){\n        if (i * i * i == a){\n            result = true;\n     \
    \       break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7ul0l6_i.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmp7ul0l6_i.__unittest_L36_C1() [0x427a60]

    ??:? void tmp7ul0l6_i.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 or ispow(a, 1/3.0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_pbb4ban.d(25): Error: found `or` when expecting `;` following
    `return` statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_pbb4ban.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    double b = a;\n\
    \    long c = a;\n    double result = pow(b, 1.0/3.0);\n    long d = result;\n\
    \    double x = result - d;\n    if (x == 0)\n    {\n        return true;\n  \
    \  }\n    else \n    {\n        return false;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnwlxlaob.d(28): Error: cannot implicitly convert expression `result`
    of type `double` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnwlxlaob.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    auto cbrt =\
    \ cast(long)pow(a, 1.0/3.0);\n    return cbrt * cbrt * cbrt == a;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqafos_f6.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289ad]

    ??:? void tmpqafos_f6.__unittest_L28_C1() [0x427d64]

    ??:? void tmpqafos_f6.__modtest() [0x428730]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dfc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    //long m = (long)ceil(exp(log(a)/3.0));\n\
    \    long m = (long)ceil(pow(a, 1.0/3.0));\n    return pow(m, 3) == a;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd4ofrzxk.d(26): Error: C style cast illegal, use `cast(long)ceil(pow(a,
    1.00000 / 3.00000))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd4ofrzxk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    //find the cube\
    \ root of a \n    //int cuberoot = cbrt(a);\n    //cube the cuberoot\n    //return\
    \ a == cuberoot * cuberoot * cuberoot;\n    import std.algorithm : map;\n    alias\
    \ ints = iota(1, 10);\n    auto cubes = ints.map!(a => (a^3));\n    return cubes.canFind(a);\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpekl2man3.d(30): Error: unexpected `(` in declarator

    /tmp/tmpekl2man3.d(30): Error: basic type expected, not `1`

    /tmp/tmpekl2man3.d(30): Error: found `1` when expecting `)`

    /tmp/tmpekl2man3.d(30): Error: identifier expected following comma, not `10`

    /tmp/tmpekl2man3.d(30): Error: found `)` when expecting `;` following statement

    /tmp/tmpekl2man3.d(30): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpekl2man3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || a == -1L || (a > 0L && round(cbrt(a)) == cbrt(a));\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a < 0)\n\
    \        a = -a;\n    foreach (i; 1L .. a + 1L)\n    {\n        if (i * i * i\
    \ == a)\n            return true;\n    }\n    return false;\n}\n/*\n    Write\
    \ a function that takes a string s and returns true if s \n    is a substring\
    \ of some palindrome.\n    Examples:\n    >>> ispalindromesubstring(\"anna\")\n\
    \    true\n    >>> ispalindromesubstring(\"ann\")\n    false\n    >>> ispalindromesubstring(\"\
    annaanna\")\n    true\n    >>> ispalindromesubstring(\"a\")\n    true\n    >>>\
    \ ispalindromesubstring(\"bbb\")\n    true\n    >>> ispalindromesubstring(\"\"\
    )\n    true\n*/\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptfrb_62g.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmptfrb_62g.__unittest_L51_C1() [0x427b35]

    ??:? void tmptfrb_62g.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0L || a == 1L || sqrt(abs(a)) % 1 == 0;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprw565uxs.d(25): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprw565uxs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    //cbrt(a);\n\
    \    if (a==0)\n        return true;\n    else if (a<0)\n        return iscube(-a);\n\
    \    else \n    {\n        float x = cbrt(a);\n        if (x!=long(x))\n     \
    \       return false;\n        else \n            return true;\n    }\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6p2toe_d.d(33): Error: cannot implicitly convert expression `x`
    of type `float` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6p2toe_d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cub = cbrt(a);\n\
    \    return (cub * cub * cub == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxbvqne_s.d(25): Error: cannot implicitly convert expression `cbrt(cast(real)a)`
    of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbvqne_s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n\treturn a < 0 ?\
    \ cubeRoot(a) * cubeRoot(a) * cubeRoot(a) == a : cubeRoot(a) * cubeRoot(a) * cubeRoot(a)\
    \ == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm_sjc6ti.d(25): Error: undefined identifier `cubeRoot`

    /tmp/tmpm_sjc6ti.d(25): Error: undefined identifier `cubeRoot`

    /tmp/tmpm_sjc6ti.d(25): Error: undefined identifier `cubeRoot`

    /tmp/tmpm_sjc6ti.d(25): Error: undefined identifier `cubeRoot`

    /tmp/tmpm_sjc6ti.d(25): Error: undefined identifier `cubeRoot`

    /tmp/tmpm_sjc6ti.d(25): Error: undefined identifier `cubeRoot`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm_sjc6ti.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    auto result\
    \ = (long)round(pow(a, 1.0/3.0));\n    return pow(result, 3) == a;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb2o94k45.d(25): Error: C style cast illegal, use `cast(long)round(pow(a,
    1.00000 / 3.00000))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb2o94k45.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a >= 0)\
    \ {\n        long b = (long)cbrt(a);\n        if (b * b * b == a)\n          \
    \  return true;\n    } else {\n        long b = (long)cbrt(-a);\n        if (b\
    \ * b * b == -a)\n            return true;\n    }\n    return false;\n}\n// NOTE:\
    \ The following code is not intended to be readable.\n// It's written in a way\
    \ that minimizes compilation times for\n// the auto-grading system.\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp246_5zkb.d(26): Error: C style cast illegal, use `cast(long)cbrt(a)`

    /tmp/tmp246_5zkb.d(30): Error: C style cast illegal, use `cast(long)cbrt(-a)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp246_5zkb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long c = abs(a);\n\
    \    long i = cbrt(c);\n    return c==i*i*i;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9lfd_tbh.d(26): Error: cannot implicitly convert expression `cbrt(cast(real)c)`
    of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9lfd_tbh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // your code\
    \ here\n}\n/*\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz94d1pzm.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz94d1pzm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return floor(cbrt(a))\
    \ == cbrt(a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a==0L\
    \ || a==1L || modf(pow(abs(a),1.0/3.0))==0.0;\n}\n/*\n    Write a function that\
    \ takes an integer a and returns true if this integer is a square of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> issquare(1L)\n    true\n    >>> issquare(2L)\n    false\n    >>> issquare(-1L)\n\
    \    true\n    >>> issquare(64L)\n    true\n    >>> issquare(0L)\n    true\n \
    \   >>> issquare(180L)\n    false\n*/\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsjm9m5vv.d(25): Error: function `std.math.modf(real x, ref real
    i)` is not callable using argument types `(real)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsjm9m5vv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ cast(long)pow(cast(double)a, 1.0/3.0);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpelysnhfc.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42892d]

    ??:? void tmpelysnhfc.__unittest_L27_C1() [0x427cf4]

    ??:? void tmpelysnhfc.__modtest() [0x4286b0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6fb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b58e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430721]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b565]

    ??:? runModuleUnitTests [0x42c4d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d7c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    foreach(i; 0\
    \ .. 100)\n    {\n        if(a == i*i*i)\n            return true;\n    }\n  \
    \  return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsxe2hm90.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpsxe2hm90.__unittest_L32_C1() [0x427a98]

    ??:? void tmpsxe2hm90.__modtest() [0x427b44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    auto n = (long)pow(abs(a), 1.0 / 3.0);\n    return\
    \ (pow(n, 3) == abs(a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n  \
    \  assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpti8is3x7.d(27): Error: C style cast illegal, use `cast(long)pow(abs(a),
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpti8is3x7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (abs(a) % (long)pow(a, 1.0 / 3.0) == 0);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxc3qb4s9.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxc3qb4s9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n\
    \        return true;\n    else if (a < 0)\n        return iscube(-a);\n    else\n\
    \    {\n        double z = a;\n        double y = cbrt(z);\n        double yy\
    \ = trunc(y);\n        if (abs(y - yy) < 0.000001)\n            return true;\n\
    \        else\n            return false;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || \n           a == pow(cast(long)pow(abs(a),1.0/3.0),3);\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdedghsno.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428b05]

    ??:? void tmpdedghsno.__unittest_L28_C1() [0x427e08]

    ??:? void tmpdedghsno.__modtest() [0x428884]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8d3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b766]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430da8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430885]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b73d]

    ??:? runModuleUnitTests [0x42c6a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f54]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    bool res = false;\n\
    \    if (a > 0) {\n        double d =  Math.pow(a, 1/3);\n        res = d == (long)d;\n\
    \    }\n    else {\n        res = a == 0 || iscube(-a);\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd38x8x30.d(28): Error: C style cast illegal, use `cast(long)d`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd38x8x30.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a!=0\
    \ && a == pow(int(cbrt(a)), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvk2zsqgb.d(25): Error: cannot implicitly convert expression `cbrt(cast(real)a)`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvk2zsqgb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    auto cub = a\
    \ * a * a;\n    if (cub == a)\n        return true;\n    else\n        return\
    \ false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph43jpm1m.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427da5]

    ??:? void tmph43jpm1m.__unittest_L31_C1() [0x427a97]

    ??:? void tmph43jpm1m.__modtest() [0x427b24]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bacb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a95e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]

    ??:? runModuleUnitTests [0x42b8a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // TODO: do\
    \ your magic here!\n    return 0;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyfau18yh.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpyfau18yh.__unittest_L28_C1() [0x427a1c]

    ??:? void tmpyfau18yh.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    a = abs(a);\n\
    \    long res = (long)pow(a, 1.0/3.0);\n    return (long)pow(res, 3) == a;\n}\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbce_9g6z.d(26): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    /tmp/tmpbce_9g6z.d(27): Error: C style cast illegal, use `cast(long)pow(res, 3)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbce_9g6z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    int a1 = abs(a);\n\
    \    int a2 = floor(cbrt(a1));\n    long a3 = a2 * a2 * a2;\n    return a3 ==\
    \ a1;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjocjzr7d.d(25): Error: cannot implicitly convert expression `abs(a)`
    of type `long` to `int`

    /tmp/tmpjocjzr7d.d(26): Error: cannot implicitly convert expression `floor(cbrt(cast(real)a1))`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjocjzr7d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (ceil(pow(abs(a),\
    \ 1/3.0)) == floor(pow(abs(a), 1/3.0)));\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi0qfrwe8.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428b3d]

    ??:? void tmpi0qfrwe8.__unittest_L27_C1() [0x427efb]

    ??:? void tmpi0qfrwe8.__modtest() [0x4288c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca8f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b922]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b8f9]

    ??:? runModuleUnitTests [0x42c865]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f8c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    static assert(is(typeof(~a)));\n\
    \    return a ~ 0L && a % cast(typeof(a))(cbrt(a)) == 0L;\n}\n/*\n    Write a\
    \ function that takes a string and returns a new string \n    where all the vowels\
    \ in the original string are capitalized.\n    >>> capitalize_vowels(\"Hello world!\"\
    )\n    \"HEllO wOrld!\"\n    >>> capitalize_vowels(\"\")\n    \"\"\n    >>> capitalize_vowels(\"\
    a\")\n    \"A\"\n    >>> capitalize_vowels(\"you\")\n    \"yOU\"\n    >>> capitalize_vowels(\"\
    AeIoU\")\n    \"AEIOU\"\n*/\nstring capitalize_vowels(string str)\n{\n    string\
    \ result = str;\n    foreach(i, c; str) {\n        if(c.toLower() in ['a', 'e',\
    \ 'i', 'o', 'u'])\n            result[i] = c.toUpper();\n    }\n    return result;\n\
    }\n/*\n    Write a function that takes an integer n and returns a tuple of two\
    \ \n    values that represent the next two elements of the Fibonacci sequence\
    \ \n    (consider Fibonacci sequence starts with 1,1).\n    >>> fib(0)\n    (1,\
    \ 1)\n    >>> fib(1)\n    (1, 2)\n    >>> fib(5)\n    (8, 13)\n    >>> fib(10)\n\
    \    (89, 144)\n*/\nTuple!(long, long) fib(long n)\n{\n    long a = 1L, b = 1L;\n\
    \    for(; n > 0; --n) {\n        auto t = a;\n        a = b;\n        b += t;\n\
    \    }\n    return tuple(a, b);\n}\n/*\n    Write a function that takes a string\
    \ and returns a new string \n    where all the 'camelCase' (https://en.wikipedia.org/wiki/Camel_case)\
    \ \n    words are converted to 'snake_case' (https://en.wikipedia.org/wiki/Snake_case).\n\
    \    >>> camel_to_\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0s2m90c0.d(74): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0s2m90c0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ 0 || (long)pow(floor(pow(a, 1.0/3.0)), 3) == a;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzgs5rfk1.d(25): Error: C style cast illegal, use `cast(long)pow(floor(pow(a,
    1.00000 / 3.00000)), 3)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgs5rfk1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    static assert(is(typeof(a*a*a))\
    \ == is(typeof(a)));\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnu2ytp9v.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnu2ytp9v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long[] list\
    \ = new long[1000];\n    long x = 0;\n    for (int i = 0; i < list.length; i++)\n\
    \    {\n        list[i] = x * x * x;\n        x++;\n    }\n    bool ans = false;\n\
    \    for (int i = 0; i < list.length; i++)\n    {\n        if (list[i] == a)\n\
    \        {\n            ans = true;\n        }\n    }\n    return ans;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzy0az3s_.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x428105]

    ??:? void tmpzy0az3s_.__unittest_L42_C1() [0x427ddc]

    ??:? void tmpzy0az3s_.__modtest() [0x427e88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c103]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42af96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430221]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301ad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af6d]

    ??:? runModuleUnitTests [0x42bed9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    /*\n    // Your\
    \ answer\n    return false;\n    */\n    /*\n    // Your answer\n    return true;\n\
    \    */\n    /*\n    // Your answer\n    // use these functions: cast, sqrt, trunc,\
    \ ceil, floor\n    return true;\n    */\n    /*\n    // Your answer\n    // use\
    \ these functions: cast, pow, trunc, ceil, floor\n    return true;\n    */\n \
    \   // My answer\n    return (cast(long)trunc(pow(a, 1.0 / 3.0)) == pow(a, 1.0\
    \ / 3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7fjfabtz.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a7d]

    ??:? void tmp7fjfabtz.__unittest_L46_C1() [0x427e30]

    ??:? void tmp7fjfabtz.__modtest() [0x4287fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c863]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430889]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d38]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430815]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6cd]

    ??:? runModuleUnitTests [0x42c639]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ecc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long temp;\n\
    \    temp = (long)pow(a,(1/3));\n    if((temp*temp*temp) == a)\n        return\
    \ true;\n    else\n        return false;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0L)\
    \ return true;\n    if (a < 0L) a = -a;\n    long cbrt_a = cast(long) floor(cbrt(a));\n\
    \    return a == cbrt_a * cbrt_a * cbrt_a;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // write your\
    \ code here\n    long tol = 0.1;\n    //double cbrtOfA = cbrt(a);\n    //if (a\
    \ == 0)\n    //{\n    //    return true;\n    //}\n    //double cbrtOfA_i = cbrtOfA;\n\
    \    //double cbrtOfA_f = cbrtOfA - cbrtOfA_i;\n    //return cbrtOfA_f <= tol;\n\
    \    long cbrtOfA = cbrt(a);\n    return cbrtOfA * cbrtOfA * cbrtOfA == a;\n}\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp33g8p7en.d(26): Error: cannot implicitly convert expression `0.1`
    of type `double` to `long`

    /tmp/tmp33g8p7en.d(35): Error: cannot implicitly convert expression `cbrt(cast(real)a)`
    of type `real` to `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp33g8p7en.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a ==\
    \ 0 || a == 1) || (a % 2 != 0 && cast(long)pow(cast(double)a, 1.0/3.0) == pow(cast(double)a,\
    \ 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppemrhy6g.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428985]

    ??:? void tmppemrhy6g.__unittest_L27_C1() [0x427d4c]

    ??:? void tmppemrhy6g.__modtest() [0x428708]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c753]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430779]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c28]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430705]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5bd]

    ??:? runModuleUnitTests [0x42c529]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428dd4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // your code\
    \ here\n    int tmp = a > 0 ? a : -a;\n    for (int i = 0; i <= (tmp >> 1); i++)\
    \ {\n        if (i * i * i == tmp) {\n            return true;\n        }\n  \
    \  }\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n   \
    \ assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbyjitknm.d(26): Error: cannot implicitly convert expression `a
    > 0L ? a : -a` of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbyjitknm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return istuple!(tuple,typeof(isPow(a,3)))&&(!a<0||a==0);\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpukca01l6.d(25): Error: template instance `istuple!(tuple, typeof(isPow(a,
    3)))` template `istuple` is not defined, did you mean isTuple(T)?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukca01l6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // it is assumed\
    \ that the input is always valid.\n    // therefore, we don't need to check if\
    \ a is negative.\n    if (a == 0) return true;\n    auto b = cast(long)pow(abs(a),\
    \ 1.0 / 3.0);\n    return b * b * b == a;\n}\n/*\n    Write a function that takes\
    \ a float number a, return true \n    if it is a prime number and false otherwise.\n\
    \    Note: you may assume the input is always valid.\n    Examples:\n    >>> isprime(0.0)\n\
    \    false\n    >>> isprime(1.0)\n    false\n    >>> isprime(2.0)\n    true\n\
    \    >>> isprime(2.0)\n    true\n    >>> isprime(5.0)\n    true\n    >>> isprime(6.0)\n\
    \    false\n    >>> isprime(11.0)\n    true\n*/\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe9xaf210.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a0d]

    ??:? void tmpe9xaf210.__unittest_L51_C1() [0x427dac]

    ??:? void tmpe9xaf210.__modtest() [0x428790]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7db]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430801]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43078d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b645]

    ??:? runModuleUnitTests [0x42c5b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e5c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    bool cube =\
    \ false;\n    if (a < 0) a = -a;\n    if (a == 0) cube = true;\n    else {\n \
    \       int i = 1;\n        while (i < a) {\n            i++;\n            if\
    \ (i*i*i == a) {\n                cube = true;\n                break;\n     \
    \       }\n        }\n    }\n    return cube;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpybjfnxji.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpybjfnxji.__unittest_L40_C1() [0x427a6c]

    ??:? void tmpybjfnxji.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (long)pow(a,\
    \ 1.0/3.0) == pow(a, 1.0/3.0);\n}\n/*\n    Write a function that takes in an array\
    \ of integers\n    and returns a tuple containing the length of the longest\n\
    \    subarray with all positive integers and the length of\n    the longest subarray\
    \ with all negative integers.\n    Examples:\n    >>> longestSubarray([1,2,3,4,5])\n\
    \    (5, 0)\n    >>> longestSubarray([1,2,3,4,5,-1,-2,-3,-4,-5])\n    (5, 5)\n\
    \    >>> longestSubarray([1,2,3,4,5,-1,-2,-3,-4,-5,10,11,12])\n    (3, 5)\n  \
    \  >>> longestSubarray([-1,-2,-3,-4,-5,10,11,12])\n    (3, 5)\n    >>> longestSubarray([])\n\
    \    (0, 0)\n    >>> longestSubarray([1,2,3,4,5,6,7,8,9,0])\n    (1, 1)\n    >>>\
    \ longestSubarray([-1,-2,-3,-4,-5,0,1,2,3,4,5])\n    (1, 5)\n    >>> longestSubarray([0,0,0,0,0,0,0,0,0,0])\n\
    \    (0, 0)\n*/\nTuple!(ulong, ulong) longestSubarray(int[] array)\n{\n    ulong\
    \ lenPos = 0, lenNeg = 0, maxPos = 0, maxNeg = 0;\n    foreach(int el; array)\n\
    \    {\n        if(el > 0)\n        {\n            if(lenNeg > maxNeg)\n     \
    \           maxNeg = lenNeg;\n            lenNeg = 0;\n            lenPos++;\n\
    \        }\n        else if(el < 0)\n        {\n            if(lenPos > maxPos)\n\
    \                maxPos = lenPos;\n            lenPos = 0;\n            lenNeg++;\n\
    \        }\n        else\n        {\n            if(lenPos > maxPos)\n       \
    \         maxPos = lenPos;\n\nunittest\n{\n    alias candidate = iscube;\n\n \
    \   assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L)\
    \ == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) ==\
    \ false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) ==\
    \ true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw82idxa_.d(25): Error: C style cast illegal, use `cast(long)pow(a,
    1.00000 / 3.00000)`

    /tmp/tmpw82idxa_.d(74): Error: found `unittest` instead of statement

    /tmp/tmpw82idxa_.d(87): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpw82idxa_.d(87): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw82idxa_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return modf(cbrt(a))\
    \ == 0.0;\n}\n/*\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0t149hzw.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0t149hzw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return is(typeof(0L))(a)\
    \ && a > 0;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbu8ybx8a.d(25): Error: function expected before `()`, not `true`
    of type `bool`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbu8ybx8a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)cbrt(a);\n\
    \    return a == b * b * b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwqhk1mfi.d(25): Error: C style cast illegal, use `cast(long)cbrt(a)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqhk1mfi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    float i = cbrt(a);\n\
    \    return (i == (int)i);\n}\nunittest\n{\n    alias candidate = iscube;\n\n\
    \    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n   \
    \ assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcdmw0a_2.d(26): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdmw0a_2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return is_perfect_cube(a);\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5k26mt8w.d(25): Error: undefined identifier `is_perfect_cube`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5k26mt8w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163921
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cbrt =\
    \ cast(long)cbrt(cast(double)a);\n    return pow(cbrt, 3) == a;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    int i = 0;\n\
    \    for (i = 1; i <= a; i++)\n    {\n        if (i * i * i == a)\n        {\n\
    \            return true;\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb3zmizxd.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dc5]

    ??:? void tmpb3zmizxd.__unittest_L35_C1() [0x427a98]

    ??:? void tmpb3zmizxd.__modtest() [0x427b44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]

    ??:? runModuleUnitTests [0x42b8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (pow(a,1.0/3)\
    \ % 1 == 0);\n}\n/*\n    Write a function that takes an array of integers and\
    \ a long number k and \n    returns true if a and b are two integers such that\
    \ a^3+b^3=k.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> findCubeSum({1L,2L,3L,4L,5L,6L,7L,8L,9L,10L}, 1729L)\n    true\n    >>>\
    \ findCubeSum({1L,2L,3L,4L,5L,6L,7L,8L,9L,10L}, 20L)\n    false\n    >>> findCubeSum({1L,2L,3L,4L,5L,6L,7L,8L,9L,10L},\
    \ 3L)\n    true\n    >>> findCubeSum({1L,2L,3L,4L,5L,6L,7L,8L,9L,10L}, 1L)\n \
    \   true\n    >>> findCubeSum({1L,2L,3L,4L,5L,6L,7L,8L,9L,10L}, -1L)\n    false\n\
    \    >>> findCubeSum({1L,2L,3L,4L,5L,6L,7L,8L,9L,10L}, 0L)\n    true\n*/\nunittest\n\
    {\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgqm2v809.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x428995]

    ??:? void tmpgqm2v809.__unittest_L45_C1() [0x427d4c]

    ??:? void tmpgqm2v809.__modtest() [0x428718]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c763]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430789]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c38]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430715]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5cd]

    ??:? runModuleUnitTests [0x42c539]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428de4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163922
