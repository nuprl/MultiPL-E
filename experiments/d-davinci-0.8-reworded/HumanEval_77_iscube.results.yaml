name: HumanEval_77_iscube
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return typeof(a)\
    \ == long ? (a ^^ 3).sign == 0 : false;\n}\n/*\n    Write a function that takes\
    \ a tuple of integers and returns \n    the tuple of products of all items except\
    \ ith, where i is \n    the index of the item in the tuple.\n    Note: you may\
    \ assume that all items in the tuple are positive.\n    Examples:\n    >>> products((1,\
    \ 2, 3, 4))\n    (24, 12, 8, 6)\n    >>> products((1, 2, 3, 4, 5))\n    (120,\
    \ 60, 40, 30, 24)\n    >>> products((1, 2, 3, 4, 5, 6))\n    (720, 360, 240, 180,\
    \ 144, 120)\n    >>> products((1, 2, 3, 4, 5, 6, 7))\n    (5040, 2520, 1680, 1260,\
    \ 1008, 840, 720)\n    >>> products((1, 2, 3, 4, 5, 6, 7, 8))\n    (40320, 20160,\
    \ 13440, 10080, 8064, 6720, 5760, 5040)\n    >>> products((1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9))\n    (362880, 181440, 120960, 90720, 72576, 60480, 51840, 45360, 40320)\n\
    \    >>> products((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n    (3628800, 1814400, 1209600,\
    \ 907200, 7257600, 60480, 518400, 453600, 403200, 362880)\n*/\nauto products(T)(T\
    \ items)\n{\n    static if(__traits(compiles, staticMap!((a, b) => a * b, items)))\n\
    \    {\n        return staticMap!((a, b) => a * b, items);\n    }\n    else\n\
    \    {\n        import std.algorithm.iteration;\n        return items.reduce!((a,\
    \ b) => a * b);\n    }\n}\n/*\n    Write a function that takes a tuple of integers\
    \ of length N\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprid8a_ns.d(25): Error: found `?` when expecting `.` following\
    \ long\\n/tmp/tmprid8a_ns.d(25): Error: found `(` when expecting identifier following\
    \ `long`.\\n/tmp/tmprid8a_ns.d(25): Error: found `a` when expecting `;` following\
    \ `return` statement\\n/tmp/tmprid8a_ns.d(25): Error: found `^^` instead of statement\\\
    n/tmp/tmprid8a_ns.d(60): Error: unterminated /* */ comment\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprid8a_ns.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (((long)round(pow(a,\
    \ 1./3)))**3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt5hadz1v.d(25): Error: C style cast illegal, use `cast(long)round(pow(a,\
    \ 1.00000 / 3))`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt5hadz1v.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ return true;\n    if (a == 1) return true;\n    if (a == -1) return true;\n\
    \    if (a < 0) return false;\n    long cbrt = pow(a, 1.0/3.0);\n    if (pow(cbrt,\
    \ 3) == a) return true;\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmbyok5v7.d(29): Error: cannot implicitly convert expression `pow(a,\
    \ 0.333333)` of type `real` to `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpmbyok5v7.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    auto cbrt_a\
    \ = cbrt(a);\n    return cbrt_a == int(cbrt_a);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzzxxb1tu.d(26): Error: cannot implicitly convert expression `cbrt_a`\
    \ of type `real` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpzzxxb1tu.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ pow(round(pow(a, 1.0/3.0)), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplcx2c_qd.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a5d]\\n??:? void tmplcx2c_qd.__unittest_L27_C1()\
    \ [0x427e14]\\n??:? void tmplcx2c_qd.__modtest() [0x4287e0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c843]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b6d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430869]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d18]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b6ad]\\n??:? runModuleUnitTests [0x42c619]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428eac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428e33]\\n??:? _d_run_main [0x428d9e]\\n??:? main [0x4287f3]\\\
    n??:? __libc_start_main [0x7d3a8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0L)\
    \ return true;\n    long b = abs(a);\n    long t = pow(b, 1.0 / 3.0);\n    if\
    \ (t * t * t == b) return true;\n    else return false;\n}\n/*\n    Write a function\
    \ that takes an integer a and returns true \n    if this ingeger is a square of\
    \ some integer number.\n    Note: you may assume the input is always valid.\n\
    \    Examples:\n    >>> issquare(1L)\n    true\n    >>> issquare(2L)\n    false\n\
    \    >>> issquare(-1L)\n    true\n    >>> issquare(0L)\n    true\n    >>> issquare(64L)\n\
    \    true\n    >>> issquare(180L)\n    false\n    \n*/\nunittest\n{\n    alias\
    \ candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L)\
    \ == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) ==\
    \ true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) ==\
    \ true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpms6_308v.d(27): Error: cannot implicitly convert expression `pow(b,\
    \ 0.333333)` of type `real` to `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpms6_308v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\
    \ \n        return true;\n    double x = abs(a);\n    double x3 = pow(x, 1.0/3.0);\n\
    \    int r = int(x3);\n    return r*r*r == a;\n}\n//version (2)\nauto iscube2\
    \ = [](long a) { return !a || pow(abs(a), 1.0/3.0) == int(pow(abs(a), 1.0/3.0));\
    \ };\n//version (3)\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8nmchmhg.d(33): Error: found `a` when expecting `.` following\
    \ long\\n/tmp/tmp8nmchmhg.d(33): Error: found `)` when expecting identifier following\
    \ `long`.\\n/tmp/tmp8nmchmhg.d(33): Error: found `{` when expecting `,`\\n/tmp/tmp8nmchmhg.d(33):\
    \ Error: expression expected, not `return`\\n/tmp/tmp8nmchmhg.d(33): Error: found\
    \ `!` when expecting `,`\\n/tmp/tmp8nmchmhg.d(33): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp8nmchmhg.d(33): Error: expression expected, not `}`\\n/tmp/tmp8nmchmhg.d(33):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmp8nmchmhg.d(35): Error: expression\
    \ expected, not `unittest`\\n/tmp/tmp8nmchmhg.d(36): Error: found `{` when expecting\
    \ `,`\\n/tmp/tmp8nmchmhg.d(37): Error: expression expected, not `alias`\\n/tmp/tmp8nmchmhg.d(37):\
    \ Error: found `candidate` when expecting `,`\\n/tmp/tmp8nmchmhg.d(37): Error:\
    \ expression expected, not `=`\\n/tmp/tmp8nmchmhg.d(37): Error: found `iscube`\
    \ when expecting `,`\\n/tmp/tmp8nmchmhg.d(37): Error: expression expected, not\
    \ `;`\\n/tmp/tmp8nmchmhg.d(39): Error: found `assert` when expecting `,`\\n/tmp/tmp8nmchmhg.d(39):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmp8nmchmhg.d(40): Error: found `;`\
    \ when expecting `,`\\n/tmp/tmp8nmchmhg.d(41): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmp8nmchmhg.d(42): Error: found `;` when expecting `,`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8nmchmhg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return sqrt(a)\
    \ == round(sqrt(a));\n}\n/*\n    You're given a list of integers alist.\n    You\
    \ have to write a function iseven that \n    returns a list of booleans that tell\
    \ if a given element \n    in alist is even or not.\n    >>> iseven([2, 3, 5,\
    \ 1, 6, 9, 11])\n    [true, false, false, false, true, false, false]\n    >>>\
    \ iseven([])\n    []\n    >>> iseven([1, 3, 5, 7, 9])\n    [false, false, false,\
    \ false, false]\n    >>> iseven([2, 4, 6, 8, 10])\n    [true, true, true, true,\
    \ true]\n*/\nstatic auto iseven(alias predicate = \"a % 2 == 0\")(int[] a)\n{\n\
    \    return a.map!(x => predicate(x))();\n}\n// version without a parameter\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2o6vpqyo.d(25): Error: `std.math.sqrt` called with argument types\
    \ `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\n/tmp/tmp2o6vpqyo.d(25): Error: `std.math.sqrt`\
    \ called with argument types `(long)` matches both:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):\
    \     `std.math.sqrt(float x)`\\nand:\\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):\
    \     `std.math.sqrt(real x)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp2o6vpqyo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    double b = cbrt(a);\n\
    \    return (a==(long)b*(long)b*(long)b);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplyzckbjb.d(26): Error: C style cast illegal, use `cast(long)b`\\\
    n/tmp/tmplyzckbjb.d(26): Error: C style cast illegal, use `cast(long)b`\\n/tmp/tmplyzckbjb.d(26):\
    \ Error: C style cast illegal, use `cast(long)b`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmplyzckbjb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a ==\
    \ pow(cast(long)pow(cast(double)a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpafd8u2c_.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428a25]\\n??:? void tmpafd8u2c_.__unittest_L27_C1()\
    \ [0x427d50]\\n??:? void tmpafd8u2c_.__modtest() [0x4287a4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c7f3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b686]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430819]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307a5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b65d]\\n??:? runModuleUnitTests [0x42c5c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428e74]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428dfb]\\n??:? _d_run_main [0x428d66]\\n??:? main [0x4287b7]\\\
    n??:? __libc_start_main [0xfc065554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a==0L\
    \ || cast(int)pow(a,0.333333)==pow(a,0.333333);\n}\nunittest\n{\n    alias candidate\
    \ = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) ==\
    \ false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n\
    \    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n\
    \    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnsdsjbii.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4289c5]\\n??:? void tmpnsdsjbii.__unittest_L27_C1()\
    \ [0x427d78]\\n??:? void tmpnsdsjbii.__modtest() [0x428744]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c793]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b626]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4307b9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430745]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b5fd]\\n??:? runModuleUnitTests [0x42c569]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428e14]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428d9b]\\n??:? _d_run_main [0x428d06]\\n??:? main [0x428757]\\\
    n??:? __libc_start_main [0xa794c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long temp;\n\
    \    temp = round(pow(a, 1.0 / 3.0));\n    temp = temp * temp * temp;\n    return\
    \ temp == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk02pdq2t.d(26): Error: cannot implicitly convert expression `round(pow(a,\
    \ 0.333333))` of type `real` to `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmpk02pdq2t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cube_root_long\
    \ = long(pow(a, 1.0/3.0));\n    double cube_root_double = pow(a, 1.0/3.0);\n \
    \   double x = cube_root_double-cube_root_long;\n    bool is_cube = (x==0);\n\
    \    return is_cube;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L)\
    \ == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) ==\
    \ true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n\
    \    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n \
    \   assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8dq_n0tn.d(25): Error: cannot implicitly convert expression `pow(a,\
    \ 0.333333)` of type `real` to `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp8dq_n0tn.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0L)\n\
    \        return true;\n    if (a < 0L)\n        a = -a;\n    long b = rint(pow(cast(double)a,\
    \ 1.0/3.0));\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1gw696je.d(29): Error: cannot implicitly convert expression `rint(pow(cast(double)a,\
    \ 0.333333))` of type `double` to `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp1gw696je.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0L)\n\
    \        return true;\n    else if (a < 0L)\n        return iscube(-a);\n    else\
    \ {\n        double cbrt = Math.cbrt(a);\n        if (Math.ceil(cbrt) == Math.floor(cbrt))\n\
    \            return true;\n        else\n            return false;\n    }\n}\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp11jdvsjh.d(30): Error: undefined identifier `Math`\\n/tmp/tmp11jdvsjh.d(31):\
    \ Error: undefined identifier `Math`\\n/tmp/tmp11jdvsjh.d(31): Error: undefined\
    \ identifier `Math`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp11jdvsjh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    bool result\
    \ = false;\n    if (a == 0L)\n    {\n        result = true;\n    } else if (a\
    \ > 0L)\n    {\n        result = a == pow(round(pow(a, (1.0/3.0))), 3);\n    }\
    \ else if (a < 0L)\n    {\n        result = a == -pow(round(pow(-a, (1.0/3.0))),\
    \ 3);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = iscube;\n\
    \n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n  \
    \  assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L)\
    \ == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L)\
    \ == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // double cube_root\
    \ = pow(a, 1.0/3.0);\n    // return a == cube_root * cube_root * cube_root;\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbqufl32r.d(27): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbqufl32r.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n  if (a == 0)\n\
    \    return true;\n  else if (a < 0)\n    return iscube(-a);\n  else {\n    double\
    \ aRoot = exp(log(a) / 3);\n    return aRoot == ceil(aRoot);\n  }\n}\n#endif\n\
    unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf1wrjib2.d(34): Error: declaration expected, not `#`\\n/tmp/tmpf1wrjib2.d(39):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpf1wrjib2.d(40): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpf1wrjib2.d(41): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpf1wrjib2.d(42): Error: declaration expected, not `assert`\\\
    n/tmp/tmpf1wrjib2.d(43): Error: declaration expected, not `assert`\\n/tmp/tmpf1wrjib2.d(44):\
    \ Error: declaration expected, not `assert`\\n/tmp/tmpf1wrjib2.d(45): Error: declaration\
    \ expected, not `assert`\\n/tmp/tmpf1wrjib2.d(46): Error: declaration expected,\
    \ not `assert`\\n/tmp/tmpf1wrjib2.d(47): Error: unrecognized declaration\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1wrjib2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return isPerfectCube(a);\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp82wdxcna.d(25): Error: undefined identifier `isPerfectCube`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82wdxcna.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function that\
    \ takes an integer a and returns true \n    if this ingeger is a cube of some\
    \ integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n\
    \    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>>\
    \ iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long cbrt;\n\
    \    cbrt = cast(long) round(cbrt(a));\n    return(cbrt * cbrt * cbrt == a);\n\
    }\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n\
    \    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n  \
    \  assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n  \
    \  assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n   \
    \ assert(candidate(1729L) == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0rogkt8l.d(26): Error: function expected before `()`, not `cbrt`\
    \ of type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0rogkt8l.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
