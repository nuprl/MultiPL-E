language: d
name: HumanEval_152_compare
results:
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    return map!(a => abs(a[0] - a[1]))(zip(game, guess));\n}\nunittest\n{\n\
    \    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9tvvlat.d(23): Error: template instance `map!((a) => abs(a[0]
    - a[1]))` template `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9tvvlat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    return game.zip(guess).map!(a => abs(a[0] - a[1]));\n}\nunittest\n{\n \
    \   alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9e1xkqbe.d(23): Error: no property `zip` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9e1xkqbe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, ref x; game)\n \
    \   {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n\tauto result = new long[game.length];\n\tforeach(i, v; game)\n\t{\n\t\tresult[i]\
    \ = game[i] - guess[i];\n\t\tif(result[i] < 0)\n\t\t\tresult[i] *= -1;\n\t}\n\t\
    return result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] output = new long[game.length];\n    for(size_t i = 0; i < game.length;\
    \ i++)\n    {\n        output[i] = (game[i] - guess[i]).abs;\n    }\n    return\
    \ output;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] a = new long[game.length];\n    foreach(int i, ln; game)\n    {\n\
    \        if(game[i] == guess[i])\n        {\n            a[i] = 0L;\n        }\n\
    \        else\n        {\n            a[i] = abs(game[i] - guess[i]);\n      \
    \  }\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = compare;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] array = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        if(game[i] > guess[i])\n        {\n            array[i]\
    \ = game[i] - guess[i];\n        }\n        else if(game[i] < guess[i])\n    \
    \    {\n            array[i] = guess[i] - game[i];\n        }\n        else if(game[i]\
    \ == guess[i])\n        {\n            array[i] = 0;\n        }\n    }\n    return\
    \ array;\n}\n/*\nA common theme in popular culture is that of the superhero who,\
    \ in a time of need, takes up the mantle of an ordinary person in order to protect\
    \ and save them. \nThe act of transforming into a superhero is called suiting\
    \ up.\nAs such, we want to explore the possibility of determining when someone\
    \ has successfully suited up by looking at their power levels.\nunittest\n{\n\
    \    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph4q8vah9.d(41): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4q8vah9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    if(game.length != guess.length) \n        return null;\n    long[] res\
    \ = new long[game.length];\n    for(size_t i = 0; i < game.length; i++)\n    {\n\
    \        res[i] = game[i] - guess[i];\n        if(res[i] < 0)\n            res[i]\
    \ = -res[i];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    \n    long[] res = new long[game.length];\n    auto i = 0;\n    foreach(int\
    \ x; game)\n    {\n        res[i] = abs(game[i] - guess[i]);\n        i++;\n \
    \   }\n    return res;\n    \n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4xywgawg.d(26): Error: cannot implicitly convert expression `__r73[__key74]`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4xywgawg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    { \n    long[] result = game.dup;\n    foreach(index, val; result)\n    {\n  \
    \      result[index] = abs(game[index] - guess[index]);\n    }\n    return result;\n\
    } \nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(immutable i, ref r;\
    \ result)\n    {\n        if(guess[i] == game[i])\n            r = 0;\n      \
    \  else\n            r = abs(guess[i] - game[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i,v;game)\n    {\n\
    \        if(v == guess[i]) \n        {\n            result[i] = 0L;\n        }\n\
    \        else\n        {\n            result[i] = abs(v - guess[i]);\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(elem; game.length)\n\
    \    {\n       result[elem] = abs(game[elem] - guess[elem]);\n    }\n    return\
    \ result;\n}\n/*\nI think we all remember that feeling when the result of some\
    \ long-awaited\n    event is finally known. The feelings and thoughts you have\
    \ at that moment are\n    definitely worth noting down and comparing.\n    Your\
    \ task is to determine if a person correctly guessed the results of a number of\
    \ matches.\n    You are given two arrays of scores and guesses of equal length,\
    \ where each index shows a match. \n    Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    \n    \n    example:\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjwjyj_tx.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjwjyj_tx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    return game.zip(guess).map!(ab => std.math.abs(ab[0] - ab[1]));\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2g7_tz3m.d(23): Error: no property `zip` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2g7_tz3m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, e; game) \n    {\n\
    \        result[i] = abs(e - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] diffs = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        diffs[i] = abs(g - guess[i]);\n    }\n    return diffs;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] ret = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        ret[i] = abs(game[i] - guess[i]);\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(long i = 0; i < game.length;\
    \ i++) \n    {\n        long a = game[cast(int)i];\n        long b = guess[cast(int)i];\n\
    \        result[cast(int)i] = abs(a - b);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach( i, elem; game)\n \
    \   {\n        result[i] = abs(elem - guess[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] diffs = new long[game.length];\n    foreach(int i, long g; zip(game,\
    \ guess)) {\n        diffs[i] = abs(g - game[i]);\n    }\n    return diffs;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_jh8thme.d(24): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_jh8thme.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(int i, elem; game)\n\
    \    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] res = new long[game.length];\n    foreach(int i, long j;game)\n\
    \    {\n        if(game[i] == guess[i])\n            res[i] = 0;\n        else\n\
    \            res[i] = abs(game[i] - guess[i]);\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] res = new long[game.length];\n    for(size_t i = 0; i < game.length;\
    \ i++)\n    {\n        res[i] = abs(game[i] - guess[i]);\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        long diff = game[i] - guess[i];\n        result[i] = abs(diff);\n\
    \    }\n    return result;\n}\n//******************************\n/*\nGiven an\
    \ array of integers, return a new array where each element in the new array is\
    \ the number of smaller \n    elements to the right of that element in the original\
    \ input array.\n    For example, given the array [3, 4, 9, 6, 1], return [1, 1,\
    \ 2, 1, 0], since:\n    There is 1 smaller element to the right of 3\n    There\
    \ is 1 smaller element to the right of 4\n    There are 2 smaller elements to\
    \ the right of 9\n    There is 1 smaller element to the right of 6\n    There\
    \ are no smaller elements to the right of 1\n*/\nunittest\n{\n    alias candidate\
    \ = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L,\
    \ 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L,\
    \ 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = game[i] - guess[i];\n        if(result[i] <\
    \ 0)\n            result[i] *= -1;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    import std.conv;\n    long[] mis = new long[game.length];\n    for(int\
    \ i = 0; i < game.length; i++)\n    {\n        mis[i] = abs(game[i] - guess[i]);\n\
    \    }\n    return mis;\n}\nunittest\n{\n    alias candidate = compare;\n\n  \
    \  assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L,\
    \ 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L,\
    \ 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L,\
    \ 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L],\
    \ [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n\t//or you can use the zip function\n\t//return zip(game, guess).map!(tuple\
    \ => abs(tuple[0] - tuple[1]));\n\tauto result = new long[](game.length);\n\t\
    int i;\n\tfor(i = 0; i < game.length; i++)\n\t{\n\t\tresult[i] = abs(game[i] -\
    \ guess[i]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto result = new long[game.length];\n    for(size_t i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    //printf(\"game %d %d %d %d %d %d\\n\", game[0], game[1], game[2], game[3],\
    \ game[4], game[5]);\n    //printf(\"guess %d %d %d %d %d %d\\n\", guess[0], guess[1],\
    \ guess[2], guess[3], guess[4], guess[5]);\n    long[] result = new long[game.length];\n\
    \    foreach(i,j; zip(game, guess))\n    {\n        result[i] = abs(j[0] - j[1]);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = compare;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr2x1xsyy.d(26): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr2x1xsyy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] res = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        res[i] = abs(game[i] - guess[i]);\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto ret = new long[$];\n    for(long i = 0; i < game.length; i++)\n  \
    \  {\n        ret[i] = abs(game[i] - guess[i]);\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpah9evbmj.d(23): Error: undefined identifier `__dollar`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpah9evbmj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n\tlong[] tab;\n\tforeach(i; 0..game.length)\n\t{\n\t\tif(game[i] == guess[i])\n\
    \t\t\ttab ~= 0L;\n\t\telse\n\t\t\ttab ~= abs(game[i] - guess[i]);\n\t}\n\treturn\
    \ tab;\n}\n/*\ndef compare(game, guess):\n    return [abs(x - y) for x, y in zip(game,\
    \ guess)]\n*/\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n     return zip(game, guess).map!(a => abs(a[0] - a[1]));\n}\nunittest\n{\n\
    \    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ri_zq3y.d(23): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ri_zq3y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(size_t i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, ref v; result)\n\
    \    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] res;\n    res.length = game.length;\n    foreach(i, v; game)\n \
    \   {\n        res[i] = abs(v - guess[i]);\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result;\n    foreach(i, g; guess)\n    {\n        if(g == game[i])\n\
    \            result ~= 0L;\n        else\n            result ~= abs(g - game[i]);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = compare;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = Math.abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ydd5g47.d(26): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ydd5g47.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, ref a; zip(game,\
    \ guess)) \n    {\n        result[i] = abs(a[0] - a[1]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm2711umo.d(24): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm2711umo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result;\n    import std.algorithm.iteration : zip;\n    foreach(tuple;\
    \ zip(game, guess))\n    {\n        result ~= abs(tuple[0] - tuple[1]);\n    }\n\
    \    return result;\n}\n \nunittest\n{\n    alias candidate = compare;\n\n   \
    \ assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L,\
    \ 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L,\
    \ 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L,\
    \ 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L],\
    \ [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt6rgen4e.d(24): Error: module `std.algorithm.iteration` import
    `zip` not found

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6rgen4e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto dresult = game.dup;\n    foreach(i,ref val; dresult)\n    {\n    \
    \    dresult[i] = abs(game[i] - guess[i]);\n    }\n    return dresult;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n  long[] result = new long[game.length];\n  for(size_t i = 0; i < game.length;\
    \ i++)\n    result[i] = abs(game[i] - guess[i]);\n  return result;\n}\n/*\n  \
    \ Cheater! You were found cheating at a local casino by writing down the results\n\
    \    of the roulette wheel. You claim that you were only trying to predict the\
    \ next number. \n    Can you?\n    You are given the results of the last spins,\
    \ the roulette wheel has the following numbers:\n    0, 00, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\
    \ 27, 28, 29, 30, 31, 32, 33, 34, 35, 36.\n    The 0 and 00 are represented as\
    \ 0, and the rest of the numbers are represented by their actual number.\n   \
    \ Return an array of zeros and ones, where each index corresponds to the number\
    \ of the slot in the roulette wheel. \n    A 1 means you should bet on that number,\
    \ and a 0 means you should not.\n    \n    For example:\nunittest\n{\n    alias\
    \ candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L,\
    \ 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6559mpki.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6559mpki.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto res = new long[game.length];\n    foreach(immutable idx, immutable\
    \ score; game)\n    {\n        res[idx] = abs(guess[idx] - score);\n    }\n  \
    \  return res;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    /*\n    What I want to do is create a new array, equal to the length of\
    \ the score array and\n    guess array, and then I want to iterate through these\
    \ arrays and compare \n    the two numbers, and if they're the same put it into\
    \ the new array, if they're not\n    then find the difference and put that in\
    \ the new array.\n    */\n    long[] result = new long[game.length];\n    for(int\
    \ i = 0; i < game.length; i++)\n    {\n        if(game[i] == guess[i])\n     \
    \   {\n            result[i] = 0;\n        }\n        else\n        {\n      \
    \      result[i] = abs(game[i] - guess[i]);\n        }\n    }\n    return result;\n\
    }\n/*\n    I took this array solution from another person, I had it figured out\
    \ with the \n    array, just not with something that actually made sense, but\
    \ I like this \n    solution, so I'm going to leave it. This is the version that\
    \ I want to use \n    in my project.\n*/\nlong[] compare_better(long[] game, long[]\
    \ guess) \n{\n    long[] results = new long[game.length];\n    foreach(i, ref\
    \ a; results)\n    {\n        results[i] = abs(game[i] - guess[i]);\n    }\n \
    \   return results;\n}\n/*\n    Here I took the advice from another user, and\
    \ tried to do the same thing \n    without the use of arrays, only using 2 ints.\
    \ Which while I was looking \n    around for help, I noticed that this is the\
    \ most used way to do this.\n*/\nTuple!(long, long) compare_without_array(long\
    \ game, long guess) \n{\n    if(game == guess)\n    {\n        return tuple(0L,\
    \ 0L);\n    }\n    else\n    {\n        return tuple(abs(game - guess), 0L);\n\
    \    }\n}\n/*\n    I forgot that i could just pass the score and guess array through\
    \ to this \n    function and then i could just call the compare_without_array\
    \ function inside of it,\n    and then it should return what I want\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp87hk60zo.d(74): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp87hk60zo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    int[] results = new int[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        results[i] = Math.abs(game[i] - guess[i]);\n    }\n   \
    \ return results;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq_eq591c.d(26): Error: undefined identifier `Math`

    /tmp/tmpq_eq591c.d(28): Error: cannot implicitly convert expression `results`
    of type `int[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_eq591c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    return zip(game, guess).map!(a => abs(a[0] - a[1]));\n}\nunittest\n{\n\
    \    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ba3w056.d(23): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ba3w056.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] score = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        score[i] = Math.abs(game[i] - guess[i]);\n    }\n    return\
    \ score;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7azznfts.d(26): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7azznfts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    int j = 0;\n    foreach(e;\
    \ game)\n    {\n        long t = abs(e - guess[j]);\n        j++;\n        result\
    \ ~= t;\n    }\n    return result;\n}\n \nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1x12tw3q.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42867d]

    ??:? void tmp1x12tw3q.__unittest_L34_C1() [0x428088]

    ??:? void tmp1x12tw3q.__modtest() [0x4283fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d147]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bfda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430b25]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430fd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430ab1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfb1]

    ??:? runModuleUnitTests [0x42cf1d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b40]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    // this makes a new array the size of game\n    long[] difference = new\
    \ long[game.length];\n    long temp, temp2;\n    // iterates through the size\
    \ of game\n    for(int i = 0; i < game.length; i++)\n    {\n        // sets the\
    \ temp equal to the absolute difference of the two arrays at i\n        temp =\
    \ abs(game[i] - guess[i]);\n        temp2 = abs(game[i] - guess[i]);\n       \
    \ // checks if the temp equals the temp2\n        if(temp == temp2)\n        {\n\
    \            // if they are the same sets the difference at i equal to 0\n   \
    \         difference[i] = 0;\n        }\n        else\n        {\n           \
    \ // if they are not the same sets the difference at i equal to the difference\
    \ of the two arrays at i\n            difference[i] = abs(game[i] - guess[i]);\n\
    \        }\n    }\n    // returns the difference array\n    return difference;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn5n3my5f.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x4287a5]

    ??:? void tmpn5n3my5f.__unittest_L47_C1() [0x4281b0]

    ??:? void tmpn5n3my5f.__modtest() [0x428524]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c883]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b716]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4309a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430e50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43092d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6ed]

    ??:? runModuleUnitTests [0x42c659]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c68]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++) \n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] temp = new long[game.length];\n    foreach(var i; 0..game.length)\n\
    \    {\n        temp[i] = abs(game[i] - guess[i]);\n    }\n    return temp;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgmmj2rqw.d(24): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgmmj2rqw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result;\n    foreach(i,element; game)\n    {\n        if(game[i]>guess[i])\n\
    \        {\n            result ~= game[i]-guess[i];\n        }\n        else if(game[i]<guess[i])\n\
    \        {\n            result ~= guess[i]-game[i];\n        }\n        else\n\
    \        {\n            result ~= game[i]-guess[i];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(int i, ref long num;\
    \ game) \n    {\n        result[i] = abs(num - guess[i]);\n    }\n    return result;\n\
    }\n//by neovintage\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] longs = new long[game.length];\n    longs = game.map!(a => a - guess[game.indexOf(a)]);\n\
    \    return longs.map!(a => abs(a));\n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0cevg9bi.d(24): Error: no property `map` for type `long[]`

    /tmp/tmp0cevg9bi.d(25): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0cevg9bi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    // result will be the same size as each array.\n    long[] result = new\
    \ long[game.length];\n    //looping through each element of the arrays.\n    for(int\
    \ i = 0; i < game.length; i++)\n    {\n        if(game[i] == guess[i])\n     \
    \   {\n            result[i] = 0;\n        }\n        else\n        {\n      \
    \      result[i] = abs(game[i] - guess[i]);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n     long[] res = new long[game.length];\n     foreach(int i,d; zip(game,guess))\n\
    \     {\n         res[i] = abs(d[0] - d[1]);\n     }\n     return res;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprqpinpsy.d(24): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprqpinpsy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto res = new long[](game.length);\n    for(int i = 0; i < game.length;\
    \ i++) \n    {\n        res[i] = Math.abs(game[i] - guess[i]);\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpusia6v99.d(26): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpusia6v99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] results = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        results[i] = Math.abs(game[i] - guess[i]);\n    }\n   \
    \ return results;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp90120utu.d(26): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp90120utu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] answer = new long[game.length];\n    for(long i = 0; i < game.length;\
    \ i++)\n    {\n        long g = guess[i];\n        long s = game[i];\n       \
    \ if(g == s)\n        {\n            answer[i] = 0;\n        }\n        else\n\
    \        {\n            answer[i] = abs(g - s);\n        }\n    }\n    return\
    \ answer;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    { \n  long[] result = new long[game.length];\n  foreach(i, val; game)\n  {\n \
    \   if(val >= 0)\n      result[i] = abs(val - guess[i]);\n    else\n      result[i]\
    \ = abs(abs(val) - guess[i]);\n  }\n  return result;\n}\nunittest\n{\n    alias\
    \ candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L,\
    \ 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] score = new long[guess.length];\n    size_t i = 0;\n    foreach(value;guess)\n\
    \    {\n        if(value < 0L)\n        {\n            score[i] = abs(game[i]\
    \ - (value * -1L));\n        }\n        else\n        {\n            score[i]\
    \ = abs(game[i] - value);\n        }\n        i++;\n    }\n    return score;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2dfz64ja.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286ed]

    ??:? void tmp2dfz64ja.__unittest_L39_C1() [0x4280f8]

    ??:? void tmp2dfz64ja.__modtest() [0x42846c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b65e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430875]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b635]

    ??:? runModuleUnitTests [0x42c5a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i,e; game)\n    {\n\
    \        result[i] = abs(e - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n\tauto out = new long[game.length];\n\tfor(int i = 0; i < game.length; i++)\n\
    \t{\n\t\tout[i] = abs(game[i] - guess[i]);\n\t}\n\treturn out;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ddw6fn2.d(23): Error: basic type expected, not `out`

    /tmp/tmp6ddw6fn2.d(23): Error: no identifier for declarator `_error_`

    /tmp/tmp6ddw6fn2.d(23): Error: found `out` instead of statement

    /tmp/tmp6ddw6fn2.d(26): Error: found `out` instead of statement

    /tmp/tmp6ddw6fn2.d(28): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ddw6fn2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result;\n    result = new long[game.length];\n    foreach(int i;\
    \ 0..game.length)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgw8z757i.d(25): Error: cannot implicitly convert expression `game.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgw8z757i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        if(game[i] == guess[i])\n        {\n            result[i]\
    \ = 0;\n        }\n        else\n        {\n            result[i] = abs(game[i]\
    \ - guess[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L,\
    \ 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        if(game[i] == guess[i])\n        {\n            result[i]\
    \ = 0;\n        }else\n        {\n            result[i] = abs(game[i] - guess[i]);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n\tlong[] result = [];\n\tgame.length.times!((i) => result ~= abs(game[i] -\
    \ guess[i]));\n\treturn result;\n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbu8u3v43.d(24): Error: no property `times` for type `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbu8u3v43.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    //write your code here\n    long[] result = new long[game.length];\n  \
    \  foreach(i, ref a; result) \n    {\n        a = abs(game[i] - guess[i]);\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = compare;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] out = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        out[i] = abs(game[i] - guess[i]);\n    }\n    return out;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpda7869gg.d(23): Error: no identifier for declarator `long[]`

    /tmp/tmpda7869gg.d(23): Error: found `out` instead of statement

    /tmp/tmpda7869gg.d(26): Error: found `out` instead of statement

    /tmp/tmpda7869gg.d(28): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpda7869gg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\n/*\nIn the Land of Wallachia, there is a special kind of clock.\
    \ It has an hour hand and a minute hand, \nbut not a second hand. The hour hand\
    \ makes one revolution (clockwise) every twelve hours,\nand the minute hand makes\
    \ one revolution every hour.\nAt noon, they both point straight up. At midnight,\
    \ they both point straight down.\nIn between, they point at various angles.\n\
    If an observer were to watch the clock for twelve hours, starting at noon,\nand\
    \ record the angle between the hands at each hour, he or she would find that the\
    \ hands first make an angle of 0 degrees,\nthen 11, then 22, then 33, and so on.\
    \ Since the hour hand moves more quickly than the minute hand,\nif the observer\
    \ then waited another twelve hours and recorded the angles again, \nhe or she\
    \ would find that the second time they started at 11 and ended at 22, \nso the\
    \ angle between the hands increased by only 11 degrees the second time.\nThe 12-hour\
    \ clock is a cyclical mechanism, and the time of day can be represented\nby a\
    \ number of revolutions of the minute hand and a number of revolutions of the\
    \ hour hand.\nGiven a number of revolutions of the minute hand and a number of\
    \ revolutions of the hour hand,\nyour task is to find the angle between the hands.\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbuyfhgy6.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbuyfhgy6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] differences = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        differences[i] = std.abs(game[i] - guess[i]);\n    }\n\
    \    return differences;\n}\nunittest\n{\n    alias candidate = compare;\n\n \
    \   assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L,\
    \ 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L,\
    \ 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L,\
    \ 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L],\
    \ [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp74t1y5mo.d(26): Error: undefined identifier `abs` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp74t1y5mo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    immutable int n = game.length;\n    long[] result = new long[n];\n    foreach(int\
    \ i; 0..n)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm42w27tz.d(23): Error: cannot implicitly convert expression `game.length`
    of type `ulong` to `immutable(int)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm42w27tz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    { \n    long[] x = game.dup; \n    long[] y = guess.dup; \n    long[] diff = new\
    \ long[game.length]; \n    for (int i = 0; i < x.length; i++) \n    { \n     \
    \   if (x[i] == y[i]) \n        { \n            diff[i] = 0; \n        } \n  \
    \      else \n        { \n            diff[i] = abs(x[i] - y[i]); \n        }\
    \ \n    } \n    return diff; \n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        if(v == guess[i])\n            result[i] = 0;\n        else\n       \
    \     result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] r = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        long g = game[i];\n        long h = guess[i];\n       \
    \ if(g == h)\n            r[i] = 0;\n        else\n            r[i] = abs(g -\
    \ h);\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = compare;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[guess.length];\n    for(int i = 0; i < guess.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    immutable(long)[] result;\n    foreach(index, item; game)\n    {\n    \
    \    if(game[index] == guess[index])\n        {\n            result ~= 0L;\n \
    \       }\n        else\n        {\n            result ~= abs(game[index] - guess[index]);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0dbish6g.d(35): Error: cannot implicitly convert expression `result`
    of type `immutable(long)[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0dbish6g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    immutable long[] difference = new long[game.length];\n    size_t i;\n \
    \   foreach(i, value; game)\n    {\n        if(guess[i] >= 0)\n        {\n   \
    \         if(game[i] == guess[i]) difference[i] = 0;\n            else difference[i]\
    \ = abs(game[i] - guess[i]);\n        }\n        else\n        {\n           \
    \ if(game[i] == abs(guess[i])) difference[i] = 0;\n            else difference[i]\
    \ = abs(game[i] - abs(guess[i]));\n        }\n    }\n    return difference;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqinumxq4.d(25): Error: variable `i` is shadowing variable `tmpqinumxq4.compare.i`

    /tmp/tmpqinumxq4.d(29): Error: cannot modify `immutable` expression `difference[i]`

    /tmp/tmpqinumxq4.d(30): Error: cannot modify `immutable` expression `difference[i]`

    /tmp/tmpqinumxq4.d(34): Error: cannot modify `immutable` expression `difference[i]`

    /tmp/tmpqinumxq4.d(35): Error: cannot modify `immutable` expression `difference[i]`

    /tmp/tmpqinumxq4.d(38): Error: cannot implicitly convert expression `difference`
    of type `immutable(long[])` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqinumxq4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    return zip(game, guess).map!(tuple(a, b) => abs(a - b));\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu09fidte.d(23): Error: found `=>` when expecting `)` following
    template argument list

    /tmp/tmpu09fidte.d(23): Error: found `abs` when expecting `;` following `return`
    statement

    /tmp/tmpu09fidte.d(23): Error: found `)` when expecting `;` following statement

    /tmp/tmpu09fidte.d(23): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu09fidte.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        if(guess[i] >= 0 && game[i] >= 0)\n        {\n        \
    \    result[i] = abs(game[i] - guess[i]);\n        }\n        else if(guess[i]\
    \ < 0 && game[i] < 0)\n        {\n            result[i] = abs(game[i] - guess[i]);\n\
    \        }\n        else if(guess[i] < 0 && game[i] >= 0)\n        {\n       \
    \     result[i] = abs(game[i] + guess[i]);\n        }\n        else if(guess[i]\
    \ >= 0 && game[i] < 0)\n        {\n            result[i] = abs(game[i] + guess[i]);\n\
    \        }\n    }\n    return result;\n}\nlong[] compare(long[] game, long[] guess)\
    \ \n{\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\n//for each, which is better than loop\nlong[] compare(long[] game,\
    \ long[] guess) \n{\n    long[] result = new long[game.length];\n    foreach(int\
    \ i, int g; zip(iota(game.length), game, guess))\n    {\n        result[i] = abs(g[0]\
    \ - g[1]);\n    }\n    return result;\n}\n//using map, which is best\nlong[] compare(long[]\
    \ game, long[] guess) \n{\n    return map!((x, y) => abs(x - y))(game, guess);\n\
    }\n//using zip, who knows\nlong[] compare(long[] game, long[] guess) \n{\n   \
    \ return map!((i, j) => abs(i - j))(zip(game, guess));\n}\n//the real thing\n\
    long[] compare(long[] game, long[] guess) \n{\n    return\nunittest\n{\n    alias\
    \ candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L,\
    \ 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0_ykgox2.d(78): Error: expression expected, not `unittest`

    /tmp/tmp0_ykgox2.d(79): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_ykgox2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto a = game.map!(a => a).array;\n    auto b = guess.map!(a => a).array;\n\
    \    auto result = new long[game.length];\n    foreach(mut i, j; zip(a, b))\n\
    \    {\n        result[i] = abs(j - game[i]);\n    }\n    return result;\n}\n\
    /*\n    In this kata, you have to write a method to verify the validity of IPv4\
    \ addresses.\n    An IPv4 address consists of four dot-separated numbers in the\
    \ range 0..255, i.e. 127.0.0.1 is a valid IPv4 address.\n    Implement this function\
    \ so that it returns true for valid IPv4 addresses and false for invalid IPv4\
    \ addresses.\n    \n    >>> isValidIPv4Address(\"172.16.254.1\")\n    true\n \
    \   >>> isValidIPv4Address(\"172.316.254.1\")\n    false\n    >>> isValidIPv4Address(\"\
    .254.255.0\")\n    false\n*/\nunittest\n{\n    alias candidate = compare;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5clzhgmc.d(23): Error: no property `map` for type `long[]`

    /tmp/tmp5clzhgmc.d(24): Error: no property `map` for type `long[]`

    /tmp/tmp5clzhgmc.d(26): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5clzhgmc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    size_t len = game.length;\n    long[] res = new long[len];\n    foreach(size_t\
    \ i; 0..len)\n    {\n        res[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] difference = new long[game.length];\n    for(long i = 0; i < game.length;\
    \ i++)\n    {\n        difference[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ difference;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] res = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        res[i] = abs(game[i] - guess[i]);\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    size_t len = game.length;\n    long[] result = new long[len];\n    foreach(i,\
    \ _; result) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] ans = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        ans[i] = game[i] > guess[i] ? game[i] - guess[i] : guess[i]\
    \ - game[i];\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] list = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        list[i] = abs(game[i] - guess[i]);\n    }\n    return list;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    //long[] result = new long[6];\n    return game.zip(guess).map!((a, b)\
    \ => abs(a - b)).array;\n}\nunittest\n{\n    alias candidate = compare;\n\n  \
    \  assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L,\
    \ 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L,\
    \ 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L,\
    \ 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L],\
    \ [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5rtr_7ui.d(24): Error: no property `zip` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5rtr_7ui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] finalResult = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        finalResult[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ finalResult;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto res = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        res[i] = abs(game[i] - guess[i]);\n    }\n    return res;\n\
    }\n/*\n    Write a function that, given a number n, will return all the integers\
    \ from n to n + n.\n    \n    example:\n    \n    >>> addN(3)\n    [3, 4, 5, 6,\
    \ 7, 8, 9]\n    >>> addN(1)\n    [1, 2, 3, 4, 5, 6, 7]\n*/\nunittest\n{\n    alias\
    \ candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L,\
    \ 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(long i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++) \n    {\n        if(guess[i] > game[i]) \n        {\n            result[i]\
    \ = guess[i] - game[i];\n        }\n        else if(guess[i] < game[i]) \n   \
    \     {\n            result[i] = game[i] - guess[i];\n        }\n        else\
    \ \n        {\n            result[i] = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    { \n    return game.map!(a => abs(a - guess[$-1])).array;\n}\nunittest\n{\n  \
    \  alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpndakn_uu.d(23): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpndakn_uu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    \n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        if(game[i] == guess[i])\n        {\n            result[i]\
    \ = 0;\n        }\n        else\n        {\n            result[i] = abs(game[i]\
    \ - guess[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L,\
    \ 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    int n = game.length;\n    long[] dif = new long[n];\n    for (int i = 0;\
    \ i < n; i++)\n    {\n        dif[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ dif;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8qvph50o.d(23): Error: cannot implicitly convert expression `game.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8qvph50o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result;\n    result = new long[game.length];\n    int i = 0;\n \
    \   while(i<game.length)\n    {\n        result[i] = abs(game[i]-guess[i]);\n\
    \        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L,\
    \ 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L,\
    \ 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    { \n   size_t len = game.length;\n   long[] res = new long[len];\n   for(size_t\
    \ i = 0; i < len; i++)\n   {\n       res[i] = abs(game[i] - guess[i]);\n   }\n\
    \   return res;\n}\n/*\n    Given a string, , matching the regular expression\
    \ [A-Za-z !,?._'@]+, split the string into tokens.\n    We define a token to be\
    \ one or more consecutive English alphabetic letters. Then, print the number of\
    \ tokens,\n    followed by each token on a new line.\n    \n    >>> stringTokenizer(\"\
    He is a very very good boy, isn't he?\")\n    >>>10\n    >>>He\n    >>>is\n  \
    \  >>>a\n    >>>very\n    >>>very\n    >>>good\n    >>>boy\n    >>>isn\n    >>>t\n\
    \    >>>he\n*/\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    int i;\n    int n;\n    n = game.length;\n    long[] result = new long[n];\n\
    \    for (i = 0; i < n; i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = compare;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzu7xh06a.d(25): Error: cannot implicitly convert expression `game.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzu7xh06a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        if(game[i] == guess[i])\n        {\n            result[i]\
    \ = 0;\n        }\n        else\n        {\n            result[i] = abs(game[i]\
    \ - guess[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L,\
    \ 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n     return game.zip(guess).map!(a => Math.abs(a[0] - a[1]));\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsy06u9ib.d(23): Error: no property `zip` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsy06u9ib.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, item; game)\n  \
    \  {\n        if(game[i] == guess[i])\n        {\n            result[i] = 0;\n\
    \        }\n        else\n        {\n            result[i] = abs(game[i] - guess[i]);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\n \nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] res = new long[game.length];\n    int i = 0;\n    foreach(var x,var\
    \ y;zip(game,guess))\n    {\n        res[i] = x < y ? y - x : x - y;\n       \
    \ i++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_wlxe4ko.d(25): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_wlxe4ko.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto result = long[game.length];\n    foreach(i, a; game)\n    {\n    \
    \    if(a > guess[i])\n            result[i] = a - guess[i];\n        else if(a\
    \ < guess[i])\n            result[i] = guess[i] - a;\n        else \n        \
    \    result[i] = 0;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L,\
    \ 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L,\
    \ 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9n__3x44.d(23): Error: found `[` when expecting `.` following long

    /tmp/tmp9n__3x44.d(23): Error: semicolon expected following auto declaration,
    not `]`

    /tmp/tmp9n__3x44.d(23): Error: found `]` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9n__3x44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    \n    \n    \n    \n    //long[] result = new long[game.length];\n    int\
    \ i = 0;\n    long[] result = new long[game.length];\n    for(i = 0; i < game.length;\
    \ i++)\n    {\n        if(game[i] == guess[i])\n        {\n            result[i]\
    \ = 0;\n        }\n        else\n        {\n            result[i] = Math.abs(game[i]\
    \ - guess[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L,\
    \ 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbvd8_cdc.d(38): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbvd8_cdc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] res = new long[guess.length];\n    foreach(i, g; guess)\n    {\n\
    \        res[i] = abs(game[i] - g);\n    }\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    return zip(game, guess).map!((a, b) => abs(a - b));\n}\nunittest\n{\n \
    \   alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp89bpmvyr.d(23): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp89bpmvyr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    { \n    long[] counter = new long[game.length];\n    long[] newcounter = new long[game.length];\n\
    \    foreach(index, value; counter)\n    {\n        if(value != game[index])\n\
    \        {\n            newcounter[index] = abs(value - game[index]);\n      \
    \  }\n        else\n        {\n            newcounter[index] = 0;\n        }\n\
    \    }\n    return newcounter;\n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9zzx1s2n.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286ed]

    ??:? void tmp9zzx1s2n.__unittest_L38_C1() [0x4280f8]

    ??:? void tmp9zzx1s2n.__modtest() [0x42846c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b65e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430875]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b635]

    ??:? runModuleUnitTests [0x42c5a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n  auto map = std.range(0, guess.length).map!(i => abs(game[i] - guess[i]));\n\
    \  return map.array;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ju3euo6.d(23): Deprecation: package `std.range` is not accessible
    here

    /tmp/tmp5ju3euo6.d(23): Error: function expected before `()`, not `package range`
    of type `void`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ju3euo6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n  long[] result = new long[game.length];\n  \n  for(long i = 0; i < game.length;\
    \ i++)\n  {\n    result[cast(size_t)i] = abs(game[cast(size_t)i] - guess[cast(size_t)i]);\n\
    \  }\n  \n  return result;\n}\nunittest\n{\n    alias candidate = compare;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] compare = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        compare[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ compare;\n}\n// --------------------------------------------\n/*\n# sort_by_value\n\
    Given a list of items along with their weights, sort the items by their weight\
    \ in ascending order\n    (lightest items first). If two items have the same weight,\
    \ then keep the original order they had in\n    the input list.\nunittest\n{\n\
    \    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphfgp779m.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphfgp779m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    /*\n    auto results = game.dup;\n    int counter = 0;\n    foreach(ref\
    \ result; results)\n    {\n        if(result != guess[counter])\n        {\n \
    \           result = abs(result - guess[counter]);\n        }\n        counter++;\n\
    \    }\n    return results;\n    */\n    return game.zip(guess).map!(t => abs(t[0]\
    \ - t[1]));\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp56g9hib8.d(36): Error: no property `zip` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp56g9hib8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    { \n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        if(game[i] != guess[i])\n        {\n            result[i]\
    \ = abs(game[i] - guess[i]);\n        }\n        else\n        {\n           \
    \ result[i] = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L,\
    \ 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    assert(game.length == guess.length);\n    long[] result = new long[game.length];\n\
    \    foreach(i, r; result)\n    {\n        if(game[i] == guess[i])\n         \
    \   r = 0;\n        else\n            r = abs(game[i] - guess[i]);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpidutg01z.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x4287b1]

    ??:? void tmpidutg01z.__unittest_L34_C1() [0x42810c]

    ??:? void tmpidutg01z.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c88f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b722]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4309ad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430e5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430939]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f9]

    ??:? runModuleUnitTests [0x42c665]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c74]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    immutable(long)[] a = std.array.array(game.length, (immutable(long) i)\
    \ => game[i] - guess[i]);\n    return a.map!abs.array;\n}\nunittest\n{\n    alias\
    \ candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L,\
    \ 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvvhcilfl.d(23): Error: undefined identifier `array` in package
    `std`

    /tmp/tmpvvhcilfl.d(24): Error: no property `map` for type `immutable(long)[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvvhcilfl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    \n    long[] result = new long[game.length];\n    foreach(i, idx; 0 ..\
    \ game.length)\n    {\n        if(game[idx] == guess[idx])\n        {\n      \
    \      result[idx] = 0L;\n        }\n        else\n        {\n            result[idx]\
    \ = abs(game[idx] - guess[idx]);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoopp46pu.d(25): Error: found `..` when expecting `)`

    /tmp/tmpoopp46pu.d(25): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoopp46pu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] results = new long[game.length];\n    for(size_t i = 0; i < game.length;\
    \ i++)\n    {\n        results[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ results;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    long i = 0;\n    foreach(long\
    \ g; game)\n    {\n        result[i] = abs(g - guess[i]);\n        i++;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    //the game and guess parameters will be two arrays of equal length,\n \
    \   //where for each index the game score is supplied and the corresponding\n\
    \    //guess is given.\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe3snwm0n.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe3snwm0n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(index, element; game)\n\
    \    {\n        result[index] = abs(element - guess[index]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result;\n    /*\n    import std.algorithm;\n    import std.range;\n\
    \    import std.stdio;\n    import std.typecons;\n    import std.math;\n    */\n\
    \    result = game\n        .zip(guess)\n        .map!(a => abs(a[0] - a[1]))\n\
    \        .array;\n    return result;\n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvj5i337b.d(32): Error: no property `zip` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvj5i337b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n     long[] result = new long[game.length];\n     foreach(i,curr;game)\n  \
    \   {\n         //If any of the two are negative, the difference will always be\
    \ equal to the larger of the two\n         if(curr < 0 || guess[i] < 0)\n    \
    \     {\n             result[i] = max(abs(curr),abs(guess[i]));\n         }\n\
    \         else\n         {\n             result[i] = abs(curr - guess[i]);\n \
    \        }\n     }\n     return result;\n}\nunittest\n{\n    alias candidate =\
    \ compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L,\
    \ 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L,\
    \ 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptyxeaa_j.d(29): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptyxeaa_j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    assert(game.length == guess.length);\n    import std.algorithm.comparison;\n\
    \    auto res = game.dup;\n    for(int i = 0; i < res.length; i++)\n    {\n  \
    \      if(game[i] == guess[i])\n            res[i] = 0;\n        else\n      \
    \      res[i] = abs(game[i] - guess[i]);\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        if(game[i] == guess[i])\n        {\n            result[i]\
    \ = 0;\n        }\n        else\n        {\n            result[i] = abs(game[i]\
    \ - guess[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L,\
    \ 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] res = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        res[i] = Math.abs(game[i] - guess[i]);\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5sp13h5e.d(26): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5sp13h5e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, j; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto result = long[](game.length);\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\n/*\nDetermine if a triangle is possible based on the side lengths.\n\
    \ A triangle is possible if the sum of any two sides is greater than the third\
    \ side.\n When the sum of the lengths of any two sides of a triangle is greater\
    \ than or equal to the length of the third side,\n then the lengths describe a\
    \ triangle. \n If the sum of the lengths of any two sides is less than or equal\
    \ to the length of the third side,\n  then the lengths do not describe a triangle.\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] res = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        if(game[i] < 0 || guess[i] < 0)\n        {\n          \
    \  res[i] = -1;\n        }\n        else\n        {\n            res[i] = abs(game[i]\
    \ - guess[i]);\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L,\
    \ 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L,\
    \ 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsg_lhfoj.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x42870d]

    ??:? void tmpsg_lhfoj.__unittest_L37_C1() [0x42811c]

    ??:? void tmpsg_lhfoj.__modtest() [0x428490]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b67e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430909]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430db8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430895]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b655]

    ??:? runModuleUnitTests [0x42c5c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bd0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    \n    long[] temp = new long[game.length];\n    int i;\n    for(i = 0;\
    \ i < game.length; i++)\n    {\n        temp[i] = abs(game[i] - guess[i]);\n \
    \   }\n    return temp;\n}\nunittest\n{\n    alias candidate = compare;\n\n  \
    \  assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L,\
    \ 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L,\
    \ 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L,\
    \ 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L],\
    \ [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] results = new long[game.length];\n    foreach(i, val; game)\n  \
    \  {\n        results[i] = abs(game[i] - guess[i]);\n    }\n    return results;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    //partially applied function 'map'\n    return game.map!(a => abs(a - guess));\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptw4w7b6v.d(24): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptw4w7b6v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] res;\n    foreach(index,element; game)\n    {\n        if(game[index]\
    \ == guess[index])\n        {\n            res[index] = 0;\n        }\n      \
    \  else\n        {\n            res[index] = abs(game[index] - guess[index]);\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpsgke5szm.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4287be]

    ??:? long[] tmpsgke5szm.compare(long[], long[]) [0x427f33]

    ??:? void tmpsgke5szm.__unittest_L37_C1() [0x4280ac]

    ??:? void tmpsgke5szm.__modtest() [0x428490]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b622]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430741]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f9]

    ??:? runModuleUnitTests [0x42c565]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct'
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] ret;\n    ret.length = game.length;\n    foreach(i, value; game)\n\
    \    {\n        ret[i] = game[i] > guess[i] ? game[i] - guess[i] : guess[i] -\
    \ game[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    // result array\n    long[] result;\nunittest\n{\n    alias candidate =\
    \ compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L,\
    \ 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L,\
    \ 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptb53lsjx.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptb53lsjx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n  long[] result = new long[game.length];\n  foreach(i, index; game)\n  {\n\
    \    result[index] = abs(game[index] - guess[index]);\n  }\n  return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmptodnul5p.d(26): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428756]

    ??:? long[] tmptodnul5p.compare(long[], long[]) [0x427eea]

    ??:? void tmptodnul5p.__unittest_L30_C1() [0x42820c]

    ??:? void tmptodnul5p.__modtest() [0x428424]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c783]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b616]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43082d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]

    ??:? runModuleUnitTests [0x42c559]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct'
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result;\n    foreach(i, g ; guess)\n    {\n        if(i < guess.length)\n\
    \        {\n            result ~= abs(g - game[i]);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(long i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\n/*\nMaze\nThere is a rectangular maze of size (n x m) consisting\
    \ of non-negative integer values. The maze consists of two types of cells,\n \
    \   empty cells with value 0 and walls with value 1.\n    The maze has a single\
    \ start and a single end, represented by cells with value 2. The start and end\
    \ may be located anywhere\n    in the maze. Your task is to find the shortest\
    \ path from the start to the end.\n    You must travel only through empty cells,\
    \ moving strictly north, south, east, or west.\n    Return an array of cells that\
    \ describes the shortest path from the start to the end, including both the start\
    \ and the end.\n    If there is no path from the start to the end, return an empty\
    \ array.\n    example:\n    >>> shortestPath([[0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L],\n                       [0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L],\n\
    \                       [0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L],\n          \
    \             [0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L],\n                    \
    \   [0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L],\n                       [0L, 0L,\
    \ 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L],\n                       [0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, 0L, 0L, 0L],\n                       [0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L],\n                       [0L, 0L, 0L, 0\nunittest\n{\n    alias candidate\
    \ = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L,\
    \ 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L,\
    \ 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5zov6eu3.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5zov6eu3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    size_t[] r = new size_t[game.length];\n    foreach(i,el;game)\n    {\n\
    \        r[i] = el - guess[i];\n        if(r[i]<0)\n            r[i] = -r[i];\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt5bmjttu.d(30): Error: cannot implicitly convert expression `r`
    of type `ulong[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt5bmjttu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, item; game)\n  \
    \  {\n        result[i] = abs(item - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    if(game.length == guess.length)\n    {\n        auto result = game.dup;\n\
    \        foreach(int i, auto g; game)\n        {\n            result[i] = abs(g\
    \ - guess[i]);\n        }\n        return result;\n    }\n    return null;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcqmbulzh.d(26): Error: basic type expected, not `auto`

    /tmp/tmpcqmbulzh.d(26): Error: no identifier for declarator `_error_`

    /tmp/tmpcqmbulzh.d(26): Error: found `auto` when expecting `;`

    /tmp/tmpcqmbulzh.d(26): Error: found `;` when expecting `)`

    /tmp/tmpcqmbulzh.d(26): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcqmbulzh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    // use an array of tuple to store the values\n    auto t = new Tuple!(long,\
    \ long)[game.length];\n    // if you need to look up a value in a tuple, you have\
    \ to cast it as an array\n    // as opposed to a string which you can use indexOf\n\
    \    foreach(int i, e; t.tupleof)\n    {\n        t[i] = tuple(game[i], guess[i]);\n\
    \    }\n    // create a long[] to return\n    long[] ret = new long[game.length];\n\
    \    foreach(int i, ref e; ret)\n    {\n        // if the value of the long[]\
    \ is 0, they were correct, so set\n        // ret[i] to 0\n        if(t[i][0]\
    \ == t[i][1])\n        {\n            ret[i] = 0;\n        }\n        // else,\
    \ get the absolute difference between the two\n        else\n        {\n     \
    \       ret[i] = abs(t[i][0] - t[i][1]);\n        }\n    }\n    return ret;\n\
    }\n \n \n \n/*\nYour task is to create a function that, given a string and an\
    \ int, \n    creates a string of the same character repeated that number of times.\
    \ \n    If the first parameter is not a string or the second parameter is not\
    \ an int, \n    return false instead.\n    \n    example:\n    \n    >>> createString(\"\
    b\", 3)\n    \"bbb\"\n    >>> createString(\"*\", 8)\n    \"********\"\n    >>>\
    \ createString(\"hello\", 0)\n    \"\"\n*/\nstring createString(string s, int\
    \ i)\n{\n    // create a string to return\n    string ret = \"\";\n    // start\
    \ i at the passed value\n    // if i is less than 1, then the string needs to\
    \ be an empty string\n    if(i < 1)\n    {\n        ret = \"\";\n    }\n    //\
    \ otherwise, while i is greater than 0, add the string to the return string\n\
    \    while(i > 0)\n    {\n        ret ~= s;\n        i--;\n    }\n    return ret;\n\
    }\n \n\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_qqyo4fq.d(27): Error: no property `tupleof` for type `Tuple!(long,
    long)[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qqyo4fq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] res = new long[game.length];\n    foreach(i, element; game)\n  \
    \  {\n        res[i] = abs(element - guess[i]);\n    }\n    return res;\n}\n/*\n\
    \    description:\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsoo9efpv.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsoo9efpv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    { \n    long[] result = new long[game.length];\n    for(long i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] res = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        res[i] = abs(game[i] - guess[i]);\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto zipRange = zip(game, guess);\n    long[] result;\n    foreach(zipRange;\
    \ item)\n    {\n        result ~= abs(item[0] - item[1]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo6mxqfwg.d(23): Error: undefined identifier `zip`

    /tmp/tmpo6mxqfwg.d(25): Error: undefined identifier `item`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo6mxqfwg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        if(guess[i] == game[i])\n        {\n            result[i]\
    \ = 0;\n        }\n        else\n        {\n            result[i] = abs(guess[i]\
    \ - game[i]);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L,\
    \ 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = game.dup;\n    for(int i = 0; i < game.length; i++)\n \
    \   {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\n/*\nWe all like to save money, and I'm no exception. My only problem is that\
    \ I'm not very good at it. \n    My wife, however, is extremely good at that.\
    \ She plans our budget and keeps track of the bills \n    that need to be paid.\
    \ I can hardly do a thing without consulting her first. But even she occasionally\
    \ \n    makes mistakes, and that's where I'm good at helping. She has put on a\
    \ paper all the bills we paid \n    out in a month in a table with a single column.\
    \ To each bill she added a comment that describes \n    what the bill was for.\
    \ The comment is either \n    'correct' or of the form 'incorrect: <number>',\
    \ \n    where <number> is the amount of money that she could have saved if we\
    \ paid out the bill for the correct amount.\n    Your task is to return the sum\
    \ of all the values that are mentioned in the comments. \n    If there is no number\
    \ in the comment, ignore the comment.\n    \n    examples:\n    >>> moneySaved([['Correct',\
    \ 'Correct', 'Correct', 'Incorrect: 5', 'Correct', 'Correct', 'Correct', 'Correct',\
    \ 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct',\
    \ 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct',\
    \ 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct',\
    \ 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct',\
    \ 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct',\
    \ 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct',\
    \ 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct',\
    \ 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct',\
    \ 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct', 'Correct\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsn0_4ds4.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsn0_4ds4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] arr = new long[6];\n    int i = 0;\n    while(i < 6)\n    {\n  \
    \      arr[i] = abs(game[i] - guess[i]);\n        i++;\n    }\n    return arr;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpnptvrheq.d(27): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428726]

    ??:? long[] tmpnptvrheq.compare(long[], long[]) [0x427ef3]

    ??:? void tmpnptvrheq.__unittest_L32_C1() [0x4281dc]

    ??:? void tmpnptvrheq.__modtest() [0x4283f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c753]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430871]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5bd]

    ??:? runModuleUnitTests [0x42c529]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct'
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto ret = new long[];\n    foreach(i, e; guess)\n    {\n        ret ~=\
    \ game[i] - e;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate =\
    \ compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L,\
    \ 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L,\
    \ 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjzaryauw.d(23): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjzaryauw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(counter, element; game)\n\
    \    {\n        if(element == guess[counter])\n        {\n            result[counter]\
    \ = 0L;\n        }\n        else\n        {\n            result[counter] = abs(element\
    \ - guess[counter]);\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(idx, val; game) \n\
    \    {\n        result[idx] = Math.abs(val - guess[idx]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1xr971ul.d(26): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1xr971ul.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game) {\n   \
    \     if(guess[i] == g)\n            result[i] = 0;\n        else\n          \
    \  result[i] = abs(guess[i] - g);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    \n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        if(guess[i] == game[i])\n        {\n            result[i]\
    \ = 0;\n        }\n        else\n        {\n            result[i] = abs(guess[i]\
    \ - game[i]);\n        }\n    }\n    return result;\n}\n//better solution\nlong[]\
    \ compare(long[] game, long[] guess)\n{\n    long[] result = new long[game.length];\n\
    \    for(int i = 0; i < game.length; i++)\n    {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L,\
    \ 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L,\
    \ 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgedehs4m.d(52): Error: `tmpgedehs4m.compare` called with argument
    types `(long[], long[])` matches both:

    /tmp/tmpgedehs4m.d(21):     `tmpgedehs4m.compare(long[] game, long[] guess)`

    and:

    /tmp/tmpgedehs4m.d(39):     `tmpgedehs4m.compare(long[] game, long[] guess)`

    /tmp/tmpgedehs4m.d(53): Error: `tmpgedehs4m.compare` called with argument types
    `(long[], long[])` matches both:

    /tmp/tmpgedehs4m.d(21):     `tmpgedehs4m.compare(long[] game, long[] guess)`

    and:

    /tmp/tmpgedehs4m.d(39):     `tmpgedehs4m.compare(long[] game, long[] guess)`

    /tmp/tmpgedehs4m.d(54): Error: `tmpgedehs4m.compare` called with argument types
    `(long[], long[])` matches both:

    /tmp/tmpgedehs4m.d(21):     `tmpgedehs4m.compare(long[] game, long[] guess)`

    and:

    /tmp/tmpgedehs4m.d(39):     `tmpgedehs4m.compare(long[] game, long[] guess)`

    /tmp/tmpgedehs4m.d(55): Error: `tmpgedehs4m.compare` called with argument types
    `(long[], long[])` matches both:

    /tmp/tmpgedehs4m.d(21):     `tmpgedehs4m.compare(long[] game, long[] guess)`

    and:

    /tmp/tmpgedeh'
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\n/*\n# DIFFICULTY: very easy\n# POINTS: 1\n# LANGUAGE: D\n# SUBMISSION_DATE:\
    \ 2/12/2019\n# PROBLEM_ID: 18\n# PYTHON_VERSION: 2.7\n# PROGRAMMER: Paulina Vasquez\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoaano53h.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoaano53h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    { \n    //long[] answer = new long[game.length];\n    auto answer = new long[game.length];\n\
    \    for(uint i = 0; i < game.length; i++)\n    {\n        answer[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return answer;\n}\nunittest\n{\n    alias candidate\
    \ = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L,\
    \ 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L,\
    \ 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto res = new long[game.length];\n    foreach(i, e; zip(game, guess))\n\
    \    {\n        res[i] = abs(e[0] - e[1]);\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpygfbr3ob.d(24): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygfbr3ob.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] larr = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++) \n    {\n        if(game[i] < 0) game[i] = -game[i];\n        if(guess[i]\
    \ < 0) guess[i] = -guess[i];\n        larr[i] = abs(game[i] - guess[i]);\n   \
    \ }\n    return larr;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuqmnhl81.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42877d]

    ??:? void tmpuqmnhl81.__unittest_L32_C1() [0x428188]

    ??:? void tmpuqmnhl81.__modtest() [0x4284fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c85b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430979]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430e28]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430905]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6c5]

    ??:? runModuleUnitTests [0x42c631]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c40]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(immutable i, immutable\
    \ j; zip(game, guess))\n    {\n        result[i] = abs(j - game[i]);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbigigpq9.d(24): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbigigpq9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n\tlong[] s = [];\n\tforeach(d, index; guess)\n\t{\n\t\tlong diff = abs(game[index]\
    \ - guess[index]);\n\t\ts ~= diff;\n\t}\n\treturn s;\n}\nunittest\n{\n    alias\
    \ candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L,\
    \ 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpzoyrhylt.d(26): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42875e]

    ??:? long[] tmpzoyrhylt.compare(long[], long[]) [0x427ef1]

    ??:? void tmpzoyrhylt.__unittest_L31_C1() [0x42804c]

    ??:? void tmpzoyrhylt.__modtest() [0x428430]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d11b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bfae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430eb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43098d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf85]

    ??:? runModuleUnitTests [0x42cef1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int funct'
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    int i = 0;\n    foreach(item;\
    \ game)\n    {\n        if(item >= guess[i])\n        {\n            result[i]\
    \ = item - guess[i];\n        }\n        else\n        {\n            result[i]\
    \ = guess[i] - item;\n        }\n        i++;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    { \n  long[] x = new long[6];\n  for(int i = 0; i < game.length; i++) {\n    if(game[i]\
    \ == guess[i]) {\n      x[i] = 0;\n    }\n    else {\n      x[i] = abs(game[i]\
    \ - guess[i]);\n    }\n  }\n  return x;\n}\n//v2\nlong[] compare(long[] game,\
    \ long[] guess) \n{ \n  long[] x = new long[6];\n  for(int i = 0; i < game.length;\
    \ i++) {\n    x[i] = abs(game[i] - guess[i]);\n  }\n  return x;\n}\n//v3\nlong[]\
    \ compare(long[] game, long[] guess) \n{ \n  long[] x = new long[6];\n  for(int\
    \ i = 0; i < game.length; i++) {\n    x[i] = abs(game[i] - guess[i]);\n  }\n \
    \ return x;\n}\n//v4\nlong[] compare(long[] game, long[] guess) \n{ \n  long[]\
    \ x = new long[6];\n  for(int i = 0; i < game.length; i++) {\n    x[i] = abs(game[i]\
    \ - guess[i]);\n  }\n  return x;\n}\n//v5\nlong[] compare(long[] game, long[]\
    \ guess) \n{ \n  long[] x = new long[6];\n  for(int i = 0; i < game.length; i++)\
    \ {\n    x[i] = abs(game[i] - guess[i]);\n  }\n  return x;\n}\n//v6\nlong[] compare(long[]\
    \ game, long[] guess) \n{ \n  long[] x = new long[6];\n  for(int i = 0; i < game.length;\
    \ i++) {\n    x[i] = abs(game[i] - guess[i]);\n  }\n  return x;\n}\n//v7\nlong[]\
    \ compare(long[] game, long[] guess) \n{ \n  long[] x = new long\nunittest\n{\n\
    \    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8t69tepw.d(83): Error: semicolon expected, not `unittest`

    /tmp/tmp8t69tepw.d(83): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8t69tepw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    return zip(game, guess).map!(t => abs(t[0] - t[1]));\n}\nunittest\n{\n\
    \    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph856hzdh.d(23): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph856hzdh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n  // long[] res = new long[game.length];\n  long[] res = new long[0];\n  foreach(i,\
    \ g; game)\n  {\n    res ~= abs(g - guess[i]);\n  }\n  return res;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto res = game.dup;\n    foreach(immutable i, immutable item; guess)\n\
    \    {\n        res[i] = abs(game[i] - guess[i]);\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    int i = 0;\n    long[] answer = new long[game.length];\n    foreach(ref\
    \ long a; game)\n    {\n        answer[i] = abs(a - guess[i]);\n        i++;\n\
    \    }\n    return answer;\n}\n/*\nGiven an array of integers, sort it using the\
    \ odd-even sort algorithm.\nunittest\n{\n    alias candidate = compare;\n\n  \
    \  assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L,\
    \ 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L,\
    \ 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L,\
    \ 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L],\
    \ [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppum2vv0r.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppum2vv0r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto s = game.length;\n    auto result = new long[](s);\n    for (int i\
    \ = 0; i < s; i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n\
    \    return result;\n}\n/*\nImplement a function that takes a list of integers\
    \ lst and a single integer n, and\n    returns True if n is contained in lst,\
    \ and False otherwise. \n    \n    >>> isIn([1, 2, 3, 4, 5], 3)\n    True\n  \
    \  >>> isIn([1, 2, 3, 4, 5], 6)\n    False\n*/\nunittest\n{\n    alias candidate\
    \ = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L,\
    \ 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L,\
    \ 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for( int i = 0; i < game.length;\
    \ i++ )\n    {\n        result[i] = guess[i] == game[i] ? 0 : abs(guess[i] - game[i]);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = compare;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(long i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164046
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result;\n    int i;\n    int length;\n    length = game.length;\n\
    \    result = new long[length];\n    i = 0;\n    foreach(long l ; game)\n    {\n\
    \        if(l < guess[i])\n        {\n            result[i] = guess[i] - l;\n\
    \        }\n        else if(l > guess[i])\n        {\n            result[i] =\
    \ l - guess[i];\n        }\n        else\n        {\n            result[i] = 0;\n\
    \        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L,\
    \ 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfvfgcda0.d(26): Error: cannot implicitly convert expression `game.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfvfgcda0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    return array(zip(game, guess).map!((a, b) => (a < b) ? b - a : a - b));\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjcmzb88k.d(23): Error: undefined identifier `array`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjcmzb88k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] output = new long[game.length];\n    long diff;\n    foreach(i,\
    \ g; game)\n    {\n        diff = abs(g - guess[i]);\n        output[i] = diff;\n\
    \    }\n    return output;\n}\nunittest\n{\n    alias candidate = compare;\n\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    return zip(game, guess).map!(x => abs(x[0] - x[1]));\n}\nunittest\n{\n\
    \    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_qx47rz5.d(23): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qx47rz5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\n//OOP 2\n/*\nYour task is to construct a building which will be\
    \ a pile of n cubes. The cube at the bottom will have a volume of n^3, \nthe cube\
    \ above will have volume of (n-1)^3 and so on until the top which will have a\
    \ volume of 1^3.\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7brvzdyi.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7brvzdyi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto result = new long[game.length];\n    foreach(i,j; zip(game, guess))\n\
    \    {\n        result[i] = abs(j[0] - j[1]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9_6e30ky.d(24): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9_6e30ky.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    int len = game.length;\n    long[] res = new long[len];\n    for (int i\
    \ = 0; i < len; i++)\n    {\n        res[i] = abs(game[i] - guess[i]);\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvg0h5cha.d(23): Error: cannot implicitly convert expression `game.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvg0h5cha.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    return game.zip(guess).map!(a => abs(a[0] - a[1]));\n}\nunittest\n{\n \
    \   alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9e1xkqbe.d(23): Error: no property `zip` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9e1xkqbe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164044
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    int len = game.length;\n    long[] result = new long[len];\n    for (int\
    \ i = 0; i < len; i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n\
    \    }\n    return result;\n}\n```\n- [147. Sliding Puzzle](https://www.codewars.com/kata/5647f1bdf1c255f8d2000a6a)\n\
    ```python\ndef sliding_puzzle(puzzle):\n    import math\n    import itertools\n\
    \    import collections\n    puzzle = tuple(puzzle)\n    start = puzzle\n    target\
    \ = tuple(sorted(puzzle))\n    neighbors = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\
    \    # There is a six piece puzzle and a nine piece puzzle\n    dimensions = int(math.sqrt(len(puzzle)))\n\
    \    Q = collections.deque([(start, 0)])\n    seen = set([start])\n    while Q:\n\
    \        (state, moves) = Q.popleft()\n        if state == target:\n         \
    \   return moves\n        # Find the empty space\n        for i, s in enumerate(state):\n\
    \            if s == 0:\n                # Calculate the row and column\n    \
    \            (row, col) = (i // dimensions, i % dimensions)\n                #\
    \ Valid neighbors are those within the bounds of the grid\n                valid_neighbors\
    \ = [(row + r, col + c) for (r, c) in neighbors if (0 <= row + r < dimensions\
    \ and 0 <= col + c < dimensions)]\n                # We don't care about the order\
    \ of the tuple, so let's make a set\n                new_states = set()\n    \
    \            for (r, c) in valid_neighbors:\n                    # Swap the empty\
    \ space with the neighbor\n                    new_puzzle = list(state)\n    \
    \                new_puzzle[i], new_puzzle[r * dimensions + c] = new_puzzle[r\
    \ * dimensions + c], new_puzzle[i]\n                    new_puzzle = tuple(new_puzzle)\n\
    \                    if new_puzzle not in seen:\n                        seen\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzy8kvfgw.d(31): Error: declaration expected, not `""`

    /tmp/tmpzy8kvfgw.d(57): Error: unterminated character constant

    /tmp/tmpzy8kvfgw.d(57): Error: unterminated character constant

    /tmp/tmpzy8kvfgw.d(70): Error: declaration expected, not `assert`

    /tmp/tmpzy8kvfgw.d(71): Error: declaration expected, not `assert`

    /tmp/tmpzy8kvfgw.d(72): Error: declaration expected, not `assert`

    /tmp/tmpzy8kvfgw.d(73): Error: declaration expected, not `assert`

    /tmp/tmpzy8kvfgw.d(74): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzy8kvfgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(in i = 0; i < game.length;\
    \ i++) \n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpow0nx786.d(24): Error: found `in` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpow0nx786.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] res = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        res[i] = abs(game[i] - guess[i]);\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164045
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    \n    long[] results;\n    //results = new long[5];\n    //results = game\
    \ - guess;\n    results = game.map!(x => x - guess[x]);\n    //results = results.map!(x\
    \ => abs(x));\n    return results;\n}\nunittest\n{\n    alias candidate = compare;\n\
    \n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) ==\
    \ [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L,\
    \ 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L,\
    \ 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdpgxnir6.d(27): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpgxnir6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    { \n    return zip(game, guess).map!(t => abs(t[0] - t[1]));\n}\nunittest\n{\n\
    \    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L],\
    \ [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8mp3pdhm.d(23): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8mp3pdhm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(index, item; game)\n\
    \    {\n        result[index] = abs(item - guess[index]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    int n = game.length;\n    long[] res = new long[n];\n    for (int i = 0;\
    \ i < n; i++)\n    {\n        res[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk6nclloe.d(23): Error: cannot implicitly convert expression `game.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk6nclloe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] ret = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        ret[i] = abs(game[i] - guess[i]);\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    { \n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164048
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164044
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = game.dup;\n    foreach(i, e; game) \n    {\n        result[i]\
    \ = abs(game[i] - guess[i]);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L,\
    \ 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164047
