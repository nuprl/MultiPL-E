name: HumanEval_105_by_length
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Given an array of integers,\
  \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
  \ array, and then replace each digit by its corresponding name from\n    \"One\"\
  , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
  .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n   \
  \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
  ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
  \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
  \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n"
tests: "unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
  \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
  Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
  \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
  , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
  , \"Four\"]);\n}\nvoid main(){}"
completions: ["{\n  /*\n  TODO: Write test cases to check your function\n  */\n  long[string]\
    \ map = [\n      \"One\": 1L,\n      \"Two\": 2L,\n      \"Three\": 3L,\n    \
    \  \"Four\": 4L,\n      \"Five\": 5L,\n      \"Six\": 6L,\n      \"Seven\": 7L,\n\
    \      \"Eight\": 8L,\n      \"Nine\": 9L\n  ];\n  return arr.sort().filter!(a\
    \ => a >= 1 && a <= 9).reverse().map!(a => map.reversed[a]);\n}\n```\n### 4\n\
    ```\n/*\n    Given a non-empty array of integers, write a function that returns\
    \ the longest subarray with consecutive even integers.\n    An array is a sequence\
    \ of elements of the same type placed in contiguous memory locations that can\
    \ be individually referenced by adding an index to a unique identifier.", "{\n\
    \  string[] result;\n  foreach(i; arr)\n    if(i>0 && i<10)\n      result ~= to!string(i);\n\
    \  result.sort;\n  result.reverse;\n  foreach(i; result)\n    i = to!string(result[i]);\n\
    \  return result;\n}", "{\n    string[] digits = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    string[]\
    \ numbers = cast(string[]) arr;\n    string[] filt_nums = filter!((x) => x <=\
    \ 9)(numbers);\n    sort(filt_nums);\n    string[] rev_nums = reverse(filt_nums);\n\
    \    string[] out = map!((x) => digits[to!(int)(x - 1)])(rev_nums);\n    return\
    \ out;\n}", "{\n    auto a = arr.filter!(a => a >= 1 && a <= 9).array.sort().retro;\n\
    \    return a.map!(a => a == 1 ? \"One\"\n                : a == 2 ? \"Two\"\n\
    \                : a == 3 ? \"Three\"\n                : a == 4 ? \"Four\"\n \
    \               : a == 5 ? \"Five\"\n                : a == 6 ? \"Six\"\n    \
    \            : a == 7 ? \"Seven\"\n                : a == 8 ? \"Eight\"\n    \
    \            : a == 9 ? \"Nine\"\n                : \"\").array;\n}", "{\n   \
    \ auto size = arr.length;\n    string[] result = new string[size];\n    int[]\
    \ tmp = new int[size];\n    int i = 0;\n    foreach(l; arr)\n    {\n        if(l\
    \ > 0 && l < 10)\n        {\n            tmp[i] = cast(int)l;\n            i++;\n\
    \        }\n    }\n    sort(tmp[0..i]);\n    reverse(tmp[0..i]);\n    string[]\
    \ names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"];\n    foreach(l; tmp[0..i])\n    {\n        result ~= names[l-1];\n\
    \    }\n    return result;\n}", "{\n    //TODO - implement the function\n    return\
    \ [];\n}\n \n</pre>", "{\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    //return [];\n}", "{ \n    sort(arr);\n    auto res = appender!(string[])();\n\
    \    for (int i = arr.length - 1; i >= 0; i--)\n    {\n        string str = \"\
    \";\n        switch (arr[i])\n        {\n            case 1:\n               \
    \ str = \"One\";\n                break;\n            case 2:\n              \
    \  str = \"Two\";\n                break;\n            case 3:\n             \
    \   str = \"Three\";\n                break;\n            case 4:\n          \
    \      str = \"Four\";\n                break;\n            case 5:\n        \
    \        str = \"Five\";\n                break;\n            case 6:\n      \
    \          str = \"Six\";\n                break;\n            case 7:\n     \
    \           str = \"Seven\";\n                break;\n            case 8:\n  \
    \              str = \"Eight\";\n                break;\n            case 9:\n\
    \                str = \"Nine\";\n                break;\n            default:\n\
    \                break;\n        }\n        if (str.length != 0)\n           \
    \ res.put(str);\n    }\n    return res.data;\n}", "{\n  auto result = new string[];\n\
    \  // write your code here\n  \n  return result;\n}\n \n \n/*\n    Accepts a multidimensional\
    \ array and returns a flattened version of the array.\n    \n    For example:\n\
    \    >>> flatten([[1L, 2L], [3L, 4L], [5L, 6L]])\n    [1L, 2L, 3L, 4L, 5L, 6L]\n\
    \    \n      The multidimensional array will only be up to 2 dimensional:\n  \
    \  >>> flatten([[[1L, 2L]], [[3L], [4L]], [[5L, 6L]]])\n    [1L, 2L, 3L, 4L, 5L,\
    \ 6L]\n    \n      If the array is empty, return an empty array:\n    >>> flatten([])\n\
    \    []\n*/\nlong[] flatten(long[][] arr) \n{\n  auto result = new long[];\n \
    \ // write your code here\n  \n  return result;\n}\n \n/*\n    Accepts a range\
    \ of integers and returns a tuple of the number of odd numbers in the range,\n\
    \    the number of even numbers in the range, and the number of zeros in the range.\n\
    \    \n    For example:\n    >>> count_odd_even_zeros(0..5)\n    (3, 2, 0)\n \
    \   \n      The range can be any length:\n    >>> count_odd_even_zeros(0..20)\n\
    \    (11, 9, 0)\n    \n      Negative integers count:\n    >>> count_odd_even_zeros(-3..1)\n\
    \    (3, 2, 0)\n    \n      Only count the number of zeros between -10 and 10:\n\
    \    >>> count_odd_even_zeros(-10..10)\n    (10, 10, 1)\n*/\nTuple!(ulong, ulong,\
    \ ulong) count_odd_even_zeros(Range)\n{\n  // write your code here\n  return tuple(0,\
    \ 0, 0);\n}\n \n/*\n    Accepts a map and returns a version of the map where the\
    \ keys and values have been swapped.\n    \n   ", "{\n    immutable number_names\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"];\n    return\n        arr\n        .filter!(x => x >= 1 && x <= 9)\n\
    \        .sort()\n        .reverse()\n        .map!(x => number_names[x - 1])\n\
    \        .array;\n}", "{ \n    import std.algorithm.sorting; \n    import std.range;\
    \ \n    import std.stdio; \n    immutable n = arr.filter!(a => 1L <= a && a <=\
    \ 9L).sort.retro; \n    string[] res = new string[n.length]; \n    size_t i =\
    \ 0; \n    foreach (immutable x; n) \n    { \n        switch (x) \n        { \n\
    \            case 1L: res[i] = \"One\"; break; \n            case 2L: res[i] =\
    \ \"Two\"; break; \n            case 3L: res[i] = \"Three\"; break; \n       \
    \     case 4L: res[i] = \"Four\"; break; \n            case 5L: res[i] = \"Five\"\
    ; break; \n            case 6L: res[i] = \"Six\"; break; \n            case 7L:\
    \ res[i] = \"Seven\"; break; \n            case 8L: res[i] = \"Eight\"; break;\
    \ \n            case 9L: res[i] = \"Nine\"; break; \n        } \n        i++;\
    \ \n    } \n    return res; \n}", "{\n    // create array of names\n    string[]\
    \ names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"];\n    // create array of sorted numbers\n    long[] sorted_arr\
    \ = sort(arr).by!((a, b) => a < b && a <= 9 && b <= 9);\n    // create array of\
    \ empty strings\n    string[] output = repeat(\"\", sorted_arr.length);\n    //\
    \ loop through strings and replace with name\n    for (size_t i = 0; i < sorted_arr.length;\
    \ i++)\n    {\n        if (sorted_arr[i] <= 9)\n        {\n            output[i]\
    \ = names[sorted_arr[i] - 1];\n        }\n    }\n    // reverse output\n    reverse(output);\n\
    \    return output;\n}", "{\n    immutable int[] indexes = iota(arr.length);\n\
    \    indexes.sort!((a, b) => ((arr[a] == arr[b]) ? 0 : ((arr[a] < arr[b]) ? -1\
    \ : 1)));\n    indexes.reverse;\n    string[] ret = [null];\n    ret.length =\
    \ arr.length;\n    foreach (i; indexes)\n    {\n        if (arr[i] <= 9 && arr[i]\
    \ >= 1)\n        {\n            ret[i] = arr[i].to!string;\n        }\n    }\n\
    \    return ret.filter!(a => a !is null).map!(a => format(\"$(a[0].toUpper ~ a[1..$].toLower)\"\
    )).array;\n}\n \n/*\n \nfazit:\nder erste versuch ist nicht schlecht, nur das\
    \ hier ist doch schon k\xFCrzer und was ist das hier denn:", "{\n    long[] sort,\
    \ rev;\n    long i;\n    string[] s;\n    sort = [ 1L, 2L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L];\n    rev = [ 9L, 8L, 7L, 6L, 5L, 4L, 3L, 2L, 1L];\n    i = 0L;\n  \
    \  sort(arr);\n    s = new string[arr.length];\n    foreach(x;arr)\n    {\n  \
    \      if(x >= 1L && x <= 9L)\n        {\n            s[i] = cast(string)x;\n\
    \            i++;\n        }\n    }\n    sort(s);\n    foreach(x;s)\n    {\n \
    \       if(x == \"1\")\n        {\n            x = \"One\";\n        }\n     \
    \   else if(x == \"2\")\n        {\n            x = \"Two\";\n        }\n    \
    \    else if(x == \"3\")\n        {\n            x = \"Three\";\n        }\n \
    \       else if(x == \"4\")\n        {\n            x = \"Four\";\n        }\n\
    \        else if(x == \"5\")\n        {\n            x = \"Five\";\n        }\n\
    \        else if(x == \"6\")\n        {\n            x = \"Six\";\n        }\n\
    \        else if(x == \"7\")\n        {\n            x = \"Seven\";\n        }\n\
    \        else if(x == \"8\")\n        {\n            x = \"Eight\";\n        }\n\
    \        else if(x == \"9\")\n        {\n            x = \"Nine\";\n        }\n\
    \    }\n    return s;\n}", "{\n    int[] tmp = map!(val => val >= 1 && val <=\
    \ 9 ? val : 0)(arr);\n    string[] result = new string[tmp.length];\n    for (int\
    \ i = 0; i < tmp.length; i++) \n    {\n        switch (tmp[i]) \n        {\n \
    \           case 1:\n                result[i] = \"One\";\n                break;\n\
    \            case 2:\n                result[i] = \"Two\";\n                break;\n\
    \            case 3:\n                result[i] = \"Three\";\n               \
    \ break;\n            case 4:\n                result[i] = \"Four\";\n       \
    \         break;\n            case 5:\n                result[i] = \"Five\";\n\
    \                break;\n            case 6:\n                result[i] = \"Six\"\
    ;\n                break;\n            case 7:\n                result[i] = \"\
    Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return result.array.sort().reverse().take(tmp.length).array;\n\
    }", "{\n    import std.algorithm.sorting;\n    import std.algorithm.iteration;\n\
    \    import std.traits;\n    import std.range;\n    import std.string;\n    import\
    \ std.conv;\n    import std.array;\n    import std.algorithm;\n    import std.math;\n\
    \    import std.typecons;\n    import std.container;\n    immutable arr2 = arr.filter!(a\
    \ => a <= 9 && a >= 1);\n    //arr2.sort!((a, b) => b < a);\n    arr2.sort!((a,\
    \ b) => a < b);\n    immutable arr3 = arr2.map!(a => to!string(a));\n    immutable\
    \ arr4 = arr3.map!(a => \"One Two Three Four Five Six Seven Eight Nine\".split('\
    \ ')[to!long(a)-1]);\n    return arr4;\n}", "{\n    \n    // Sort the array\n\
    \    std.algorithm.sort(arr);\n    \n    // Get the reverse of it\n    auto rev\
    \ = arr.reverse;\n    \n    // Create the array to be returned\n    string[] nums;\n\
    \    \n    // Iterate on the array, convert each int to a string\n    // and append\
    \ it to the array to be returned\n    foreach(n; rev)\n    {\n        switch(n)\n\
    \        {\n            case 1:\n                nums ~= \"One\";\n          \
    \      break;\n            case 2:\n                nums ~= \"Two\";\n       \
    \         break;\n            case 3:\n                nums ~= \"Three\";\n  \
    \              break;\n            case 4:\n                nums ~= \"Four\";\n\
    \                break;\n            case 5:\n                nums ~= \"Five\"\
    ;\n                break;\n            case 6:\n                nums ~= \"Six\"\
    ;\n                break;\n            case 7:\n                nums ~= \"Seven\"\
    ;\n                break;\n            case 8:\n                nums ~= \"Eight\"\
    ;\n                break;\n            case 9:\n                nums ~= \"Nine\"\
    ;\n                break;\n        }\n    }\n    \n    return nums;\n}", "{\n\
    \    string[long] map = [ 1 : \"One\",\n                         2 : \"Two\",\n\
    \                         3 : \"Three\",\n                         4 : \"Four\"\
    ,\n                         5 : \"Five\",\n                         6 : \"Six\"\
    ,\n                         7 : \"Seven\",\n                         8 : \"Eight\"\
    ,\n                         9 : \"Nine\" ];\n    auto sorted = arr.filter!(x =>\
    \ 1 <= x && x <= 9).sort.retro;\n    return sorted.map!(x => map[x]).array;\n}",
  "{\n    /* \n    \n    1. Sort the array in ascending order by the length of each\
    \ element. \n    2. Reverse the sorted array.\n    3. Replace each digit by its\
    \ corresponding name from \"One\", \"Two\", \"Three\", \n    \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    */\n    if (arr.length == 0)\n\
    \    {\n        return [];\n    }\n    arr.sort;\n    arr.reverse;\n    string[]\
    \ finalArray = new string[arr.length];\n    foreach(i, ref value; arr)\n    {\n\
    \        switch(value)\n        {\n            case 1:\n                finalArray[i]\
    \ = \"One\";\n                break;\n            case 2:\n                finalArray[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                finalArray[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                finalArray[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                finalArray[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                finalArray[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                finalArray[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                finalArray[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                finalArray[i]\
    \ = \"Nine\";\n                break;\n            default:\n                finalArray[i]\
    \ = \"\";\n                break;\n        }\n    }\n    return finalArray;\n}",
  "{\n    import std.algorithm;\n    import std.range;\n    import std.array;\n  \
    \  import std.conv;\n    import std.string;\n    import std.stdio;\n    import\
    \ std.digest.md;\n    import std.digest.crc;\n    import std.math;\n    import\
    \ std.typecons;\n    import std.range;\n    import std.array;\n    import std.conv;\n\
    \    import std.string;\n    import std.stdio;\n    import std.digest.md;\n  \
    \  import std.digest.crc;\n    import std.math;\n    import std.typecons;\n  \
    \  import std.range;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.stdio;\n    import std.digest.md;\n    import std.digest.crc;\n\
    \    import std.math;\n    import std.typecons;\n    import std.range;\n    import\
    \ std.array;\n    import std.conv;\n    import std.string;\n    import std.stdio;\n\
    \    import std.digest.md;\n    import std.digest.crc;\n    import std.math;\n\
    \    import std.typecons;\n    import std.range;\n    import std.array;\n    import\
    \ std.conv;\n    import std.string;\n    import std.stdio;\n    import std.digest.md;\n\
    \    import std.digest.crc;\n    import std.math;\n    import std.typecons;\n\
    \    import std.range;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.stdio;\n    import std.digest.md;\n    import std.digest.crc;\n\
    \    import std.math;\n    import std.typecons;\n    import std.range;\n    import\
    \ std.array;\n    import std.conv;\n    import std.string;\n    import std.stdio;\n\
    \    import std.digest.md;\n    import std.digest.crc;\n    import std.math;\n\
    \    import std.type", "{\n    // Write your code here!\n    long[] newArr = arr.filter!(i\
    \ => i >= 1 && i <= 9);\n    newArr.sort!((a, b) => a > b);\n    newArr = newArr.reverse;\n\
    \    return newArr.map!(i => to!string(i)).map!(i => [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][to!size_t(i)-1]);\n\
    }", "{\n\tstring[] ret;\n\tint[] toSort;\n\tforeach(i; arr)\n\t{\n\t\tif(i>0 &&\
    \ i<10)\n\t\t{\n\t\t\ttoSort ~= i;\n\t\t}\n\t}\n\tif(toSort.length==0)\n\t{\n\t\
    \treturn ret;\n\t}\n\tsort(toSort);\n\t\n\tforeach(i; toSort)\n\t{\n\t\tret ~=\
    \ switch(i) {\n\t\t\tcase 1: \"One\";\n\t\t\tcase 2: \"Two\";\n\t\t\tcase 3: \"\
    Three\";\n\t\t\tcase 4: \"Four\";\n\t\t\tcase 5: \"Five\";\n\t\t\tcase 6: \"Six\"\
    ;\n\t\t\tcase 7: \"Seven\";\n\t\t\tcase 8: \"Eight\";\n\t\t\tcase 9: \"Nine\"\
    ;\n\t\t\tdefault: \"\";\n\t\t};\n\t}\n\treturn ret.reverse;\n}", "{\n    // TODO:\
    \ start here\n    return arr;\n}\n \n \n/*\n    Write a function `is_palindrome`\
    \ that checks whether a string is a palindrome.", "{\n    if (arr.length == 0)\
    \ return new string[0];\n    if (arr.length == 1) \n    {\n        if (arr[0]\
    \ < 1L || arr[0] > 9L) return new string[0];\n        else return [arr[0].to!string];\n\
    \    }", "{\n    // your code goes here\n    import std.algorithm : filter, sort,\
    \ filter!\"a.length > 0\";\n    return arr.sort.filter!\"a > 0 && a < 10\".map!\"\
    digits[a - 1]\".reverse.array;\n}", "{\n    auto result = new string[];\n    foreach(i;\
    \ arr) {\n        if(i <= 9 && i >= 1) {\n            result ~= to!string(i);\n\
    \        }\n    }\n    sort(result);\n    reverse(result);\n    string[] retval\
    \ = new string[result.length];\n    foreach(i, e; result) {\n        retval[i]\
    \ = to!string(e);\n    }\n    return retval;\n}\n/*\n    Given an array of integers,\
    \ filter out odd numbers and return the even numbers in the\n    order they occur.\
    \ If the array is empty, return an empty array.\n    \n    Example:\n    >>> only_even([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L])\n    [2L, 4L, 6L, 8L]\n    \n    >>> only_even([])\n\
    \    []\n*/\nlong[] only_even(long[] arr)\n{\n    if(arr.length == 0) {\n    \
    \    return [];\n    }\n    else {\n        return filter!(x => x % 2 == 0)(arr);\n\
    \    }\n}\n/*\n    Given an array of integers, filter out even numbers and return\
    \ the odd numbers in the\n    order they occur. If the array is empty, return\
    \ an empty array.\n    \n    Example:\n    >>> only_odd([1L, 2L, 3L, 4L, 5L, 6L,\
    \ 7L, 8L, 9L])\n    [1L, 3L, 5L, 7L, 9L]\n    \n    >>> only_odd([])\n    []\n\
    */\nlong[] only_odd(long[] arr)\n{\n    if(arr.length == 0) {\n        return\
    \ [];\n    }\n    else {\n        return filter!(x => x % 2 != 0)(arr);\n    }\n\
    }\n/*\n    Given an array of integers, return a tuple with two arrays of integers.\
    \ The first array should\n    be only the even numbers in the order they occur\
    \ and the second array should be only the odd\n    numbers in the order they occur.\n\
    \    \n    Example:\n    >>> split_even_odd", "{\n  string[] result;\n  foreach(long\
    \ elem; arr)\n  {\n    if(elem >=1 && elem <= 9)\n      result ~= \"One\";\n \
    \ }\n  return result;\n}", "{\n    arr = arr.filter!(a => 1 <= a && a <= 9)().sort!((a,\
    \ b) => a > b)();\n    arr = arr.reverse();\n    return arr.map!(a => [ \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    \ ][a - 1])();\n}", "{\n    // Convert to string array\n    string[] result =\
    \ cast(string[]) arr;\n    \n    // Sort the array\n    std.algorithm.sort(result);\n\
    \    \n    // Reverse the array\n    result = result.reverse();\n    \n    //\
    \ Replace 1, 2, ... with \"One\", \"Two\", ...\n    int len = result.length;\n\
    \    for (int i = 0; i < len; i++)\n    {\n        if (arr[i] == 1) {result[i]\
    \ = \"One\";}\n        else if (arr[i] == 2) {result[i] = \"Two\";}\n        else\
    \ if (arr[i] == 3) {result[i] = \"Three\";}\n        else if (arr[i] == 4) {result[i]\
    \ = \"Four\";}\n        else if (arr[i] == 5) {result[i] = \"Five\";}\n      \
    \  else if (arr[i] == 6) {result[i] = \"Six\";}\n        else if (arr[i] == 7)\
    \ {result[i] = \"Seven\";}\n        else if (arr[i] == 8) {result[i] = \"Eight\"\
    ;}\n        else if (arr[i] == 9) {result[i] = \"Nine\";}\n    }\n    \n    return\
    \ result;\n}", "{\n    long[] input = arr.filter!(a => a >= 1 && a <= 9).sort().reverse();\n\
    \    return input.map!(a => \"One\" ~ \"Two\" ~ \"Three\" ~ \"Four\" ~ \"Five\"\
    \ ~ \"Six\" ~ \"Seven\" ~ \"Eight\" ~ \"Nine\"[a - 1 .. a]);\n}", "{\n    long[]\
    \ sortedNumbers = arr.filter!(a => a > 0 && a < 10).sort;\n    sortedNumbers =\
    \ sortedNumbers.reverse;\n    string[] result = new string[sortedNumbers.length];\n\
    \    for (long i = 0; i < sortedNumbers.length; i++)\n    {\n        auto numString\
    \ = sortedNumbers[i].to!string;\n        result[i] = to!string(to!long(numString[0]));\n\
    \    }\n    return result;\n}", "{\n    assert( arr.length > 0 );\n    auto const\
    \ numbers = [ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\" ];\n    size_t len = 0;\n    foreach( long elem; arr ) \n\
    \    {\n        if( (elem > 0) && (elem < 10) ) \n        {\n            arr[len]\
    \ = elem;\n            len++;\n        }\n    }\n    if( len == 0 ) \n    {\n\
    \        return [];\n    }\n    auto l = arr[0..len];\n    std.sort( l );\n  \
    \  std.reverse( l );\n    string[] result = new string[l.length];\n    foreach(\
    \ long elem; l ) \n    {\n        size_t i = elem - 1;\n        assert( i < numbers.length\
    \ );\n        result ~= numbers[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ res;\n    res.length = arr.length;\n    int j = 0;\n    foreach(i; arr) \n \
    \   {\n        if(1 <= i && i <= 9) \n        {\n            res[j] = i.to!string;\n\
    \            j++;\n        }\n    }\n    sort(res);\n    res = res.reversed;\n\
    \    return res;\n}", "{\n    long[] res = arr.filter!(a => a > 0 && a < 10).sort.map!(a\
    \ => a).array;\n    return res.map!(a => \n    {\n        switch(a)\n        {\n\
    \            case 1: return \"One\";\n            case 2: return \"Two\";\n  \
    \          case 3: return \"Three\";\n            case 4: return \"Four\";\n \
    \           case 5: return \"Five\";\n            case 6: return \"Six\";\n  \
    \          case 7: return \"Seven\";\n            case 8: return \"Eight\";\n\
    \            case 9: return \"Nine\";\n        }\n    }).array;\n}", "{\n    /*\n\
    \        There are a lot of ways to solve this.\n        Here is one way:", "{\n\
    \    import std.algorithm;\n    string[] res = new string[];\n    foreach(e; arr)\n\
    \    {\n        if (e > 0 && e < 10)\n        {\n            e switch (0)\n  \
    \          {\n                case 1: res ~= \"One\"; break;\n               \
    \ case 2: res ~= \"Two\"; break;\n                case 3: res ~= \"Three\"; break;\n\
    \                case 4: res ~= \"Four\"; break;\n                case 5: res\
    \ ~= \"Five\"; break;\n                case 6: res ~= \"Six\"; break;\n      \
    \          case 7: res ~= \"Seven\"; break;\n                case 8: res ~= \"\
    Eight\"; break;\n                case 9: res ~= \"Nine\"; break;\n           \
    \ }\n        }\n    }\n    sort(res);\n    res = res.dup.reverse;\n    return\
    \ res;\n}", "{\n    \n    int[] a = arr.retro;\n    int[string] vals = [\n   \
    \     1 : \"One\",\n        2 : \"Two\",\n        3 : \"Three\",\n        4 :\
    \ \"Four\",\n        5 : \"Five\",\n        6 : \"Six\",\n        7 : \"Seven\"\
    ,\n        8 : \"Eight\",\n        9 : \"Nine\"\n    ];\n    return a.filter!(x\
    \ => x > 0 && x < 10).map!(x => vals[x]);\n}", "{\n    string[] numbers = [ \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\" ];\n    int[] temp = arr.filter!(a => a > 0 && a < 10)().sort().reverse();\n\
    \    string[] output = temp.map!(a => numbers[a - 1])();\n    return output;\n\
    }\n ", "{\n    string[] ret;\n    long[] sorted = arr.dup;\n    sorted.sort;\n\
    \    bool[long] present = arr.dup.mangle!(x => x <= 9 && x >= 1);\n    for (long\
    \ i = 1; i <= 9; i++)\n    {\n        if (present[i])\n        {\n           \
    \ sorted ~= i;\n        }\n    }\n    sorted.sort(std.algorithm.comparison!(\"\
    a < b\"));\n    ret = std.algorithm.map!(x => to!string(x)).array(sorted);\n \
    \   ret.reverse;\n    return ret;\n}\n/*\n    Assume that you have a function\
    \ get_next_random() that will give you\n    the next random number in a sequence.\
    \ Implement a function that\n    will return the kth random number in the sequence,\
    \ where k is an integer.\n    Note that the sequence is unbounded.\n    \n   \
    \   For example:\n    >>> get_kth_random(0)\n    4\n    >>> get_kth_random(1)\n\
    \    3\n    >>> get_kth_random(2)\n    2\n    >>> get_kth_random(3)\n    0\n \
    \   >>> get_kth_random(4)\n    8\n    >>> get_kth_random(5)\n    1\n    >>> get_kth_random(6)\n\
    \    5\n    >>> get_kth_random(7)\n    6\n    >>> get_kth_random(8)\n    7\n \
    \   >>> get_kth_random(9)\n    0\n    >>> get_kth_random(10)\n    8\n    >>> get_kth_random(11)\n\
    \    1\n    >>> get_kth_random(12)\n    5\n    >>> get_kth_random(13)\n    6\n\
    \    >>> get_kth_random(14)\n    7\n    >>> get_kth_random(15)\n    0\n    >>>\
    \ get_kth_random(16)\n    8\n    >>> get_kth_random(17)\n    1\n    >>> get_kth_random(18)\n\
    \    5\n    >>>", "{\n    string[int] dict = [1: \"One\", 2: \"Two\", 3: \"Three\"\
    , 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\
    ];\n    int[] temp = [];\n    foreach(a; arr) \n    {\n        if(a >= 1 && a\
    \ <= 9) \n        {\n            temp ~= a;\n        }\n    }\n    temp.sort();\n\
    \    temp.reverse();\n    string[] result = [];\n    foreach(t; temp) \n    {\n\
    \        result ~= dict[t];\n    }\n    return result;\n}", "{\n    string[] res\
    \ = [];\n    string[] nums = [ \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\" ];\n    //std.algorithm.sort(arr);\n\
    \    //std.algorithm.reverse(arr);\n    foreach(el; arr)\n    {\n        if (el\
    \ <= 9 && el >= 1)\n        {\n            res ~= nums[el - 1];\n        }\n \
    \   }\n    return res;\n}", "{\n    //TODO \n    string[] result = [];\n    long\
    \ temp;\n    foreach(idx, elem; arr)\n    {\n        if(elem == 1L)\n        {\n\
    \            temp = elem;\n            arr[idx] = elem;\n            result ~=\
    \ \"One\";\n        }\n        else if(elem == 2L)\n        {\n            temp\
    \ = elem;\n            arr[idx] = elem;\n            result ~= \"Two\";\n    \
    \    }\n        else if(elem == 3L)\n        {\n            temp = elem;\n   \
    \         arr[idx] = elem;\n            result ~= \"Three\";\n        }\n    \
    \    else if(elem == 4L)\n        {\n            temp = elem;\n            arr[idx]\
    \ = elem;\n            result ~= \"Four\";\n        }\n        else if(elem ==\
    \ 5L)\n        {\n            temp = elem;\n            arr[idx] = elem;\n   \
    \         result ~= \"Five\";\n        }\n        else if(elem == 6L)\n      \
    \  {\n            temp = elem;\n            arr[idx] = elem;\n            result\
    \ ~= \"Six\";\n        }\n        else if(elem == 7L)\n        {\n           \
    \ temp = elem;\n            arr[idx] = elem;\n            result ~= \"Seven\"\
    ;\n        }\n        else if(elem == 8L)\n        {\n            temp = elem;\n\
    \            arr[idx] = elem;\n            result ~= \"Eight\";\n        }\n \
    \       else if(elem == 9L)\n        {\n            temp = elem;\n           \
    \ arr[idx] = elem;\n            result ~= \"Nine\";\n        }\n        else\n\
    \        {\n            temp = elem;\n            arr[idx] = elem;\n        }\n\
    \    }\n    sort(arr);\n    reverse(result);\n    return result;\n}", "{\n  enum\
    \ strs = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"];\n  int[] pos = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  uint index\
    \ = 0;\n  int[] newArr = arr.filter!(a => a > 0 && a < 10).sort.reverse;\n  string[]\
    \ strArr = new string[newArr.length];\n  foreach(num; newArr)\n  {\n    index\
    \ = num - 1;\n    strArr[$] = strs[index];\n  }\n  return strArr;\n}", "{\n  string[]\
    \ result = [];\n  long[] sorted;\n  sorted = arr.array();\n  qsort(sorted);\n\
    \  foreach(int i; sorted)\n  {\n    switch(i)\n    {\n      case 1: result ~=\
    \ \"One\"; break;\n      case 2: result ~= \"Two\"; break;\n      case 3: result\
    \ ~= \"Three\"; break;\n      case 4: result ~= \"Four\"; break;\n      case 5:\
    \ result ~= \"Five\"; break;\n      case 6: result ~= \"Six\"; break;\n      case\
    \ 7: result ~= \"Seven\"; break;\n      case 8: result ~= \"Eight\"; break;\n\
    \      case 9: result ~= \"Nine\"; break;\n    }\n  }\n  reverse(result);\n  return\
    \ result;\n}", "{\n    long[] newArr = arr.filter!(x => x > 0 && x < 10).sort.map!(e\
    \ => 9 - e);\n    return newArr.map!(x => \n    {\n        switch(x) \n      \
    \  {\n            case 0: return \"Nine\";\n            case 1: return \"Eight\"\
    ;\n            case 2: return \"Seven\";\n            case 3: return \"Six\";\n\
    \            case 4: return \"Five\";\n            case 5: return \"Four\";\n\
    \            case 6: return \"Three\";\n            case 7: return \"Two\";\n\
    \            case 8: return \"One\";\n        }\n    }).array;\n}", "{\n    arr.sort;\n\
    \    auto toDigitName = [](long i) => i == 1 ? \"One\" : i == 2 ? \"Two\" : i\
    \ == 3 ? \"Three\" : i == 4 ? \"Four\" : i == 5 ? \"Five\" : i == 6 ? \"Six\"\
    \ : i == 7 ? \"Seven\" : i == 8 ? \"Eight\" : i == 9 ? \"Nine\" : \"\";\n    auto\
    \ res = arr.map!(toDigitName).filter!(a => a != \"\").array();\n    res.reverse;\n\
    \    return res;\n}", "{\n    string[] result;\n    auto dgts = new int[](0);\n\
    \    foreach(d; arr)\n    {\n        if(d < 1 || d > 9)\n            continue;\n\
    \        dgts ~= d;\n    }\n    std.algorithm.sort(dgts);\n    std.algorithm.reverse(dgts);\n\
    \    result = new string[](dgts.length);\n    foreach(i, d; dgts)\n    {\n   \
    \     switch(d)\n        {\n            case 1:\n                result[i] = \"\
    One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}",
  "{\n    if (arr.length == 0)\n    {\n        return [];\n    }\n    const strings\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"];\n    auto a = arr.filter!(x => x >= 1 && x <= 9).sort;\n    a = a.reverse;\n\
    \    return a.map!(x => strings[x - 1]).array;\n}", "{\n    \n    long[] myArr\
    \ = arr.filter!(x => x >= 1 && x <= 9).sort!((a, b) => a < b);\n    // long[]\
    \ myArr = arr.filter!(x => x >= 1 && x <= 9).sort!((a, b) => a > b);\n    return\
    \ myArr.map!(x => to!string(x)).map!(x => x.toUpper);\n}", "{\n    enum Digits\
    \ = \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\";\n    alias DigitsType = AliasSeq!Digits;\n    DigitsType[] result;\n\
    \    foreach(i; arr)\n    {\n        if(i >= 1 && i <= 9)\n        {\n       \
    \     result ~= Digits[i - 1];\n        }\n    }\n    return result.sort().reverse;\n\
    }", "{\n\t/*\n\t\tConvert all the integers in the array to strings and\n\t\tstore\
    \ them in a new array. This is done in a for loop\n\t\twith a switch statement\n\
    \t*/\n\tstring[] string_arr = new string[arr.length];\n\tforeach(i, elem; arr)\n\
    \t{\n\t\tswitch(elem)\n\t\t{\n\t\t\tcase 1:\n\t\t\t\tstring_arr[i] = \"One\";\n\
    \t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tstring_arr[i] = \"Two\";\n\t\t\t\tbreak;\n\
    \t\t\tcase 3:\n\t\t\t\tstring_arr[i] = \"Three\";\n\t\t\t\tbreak;\n\t\t\tcase\
    \ 4:\n\t\t\t\tstring_arr[i] = \"Four\";\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\
    \tstring_arr[i] = \"Five\";\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tstring_arr[i]\
    \ = \"Six\";\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tstring_arr[i] = \"Seven\"\
    ;\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\tstring_arr[i] = \"Eight\";\n\t\t\t\t\
    break;\n\t\t\tcase 9:\n\t\t\t\tstring_arr[i] = \"Nine\";\n\t\t\t\tbreak;\n\t\t\
    \tdefault:\n\t\t\t\tstring_arr[i] = \"\";\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t\
    /*\n\t\tNext we will sort the resulting array of strings.\n\t\tWe will use the\
    \ shellSort algorithm with a gap\n\t\tsequence of gap = (gap * 10) / 13. This\
    \ algorithm\n\t\tis a variable gap sequence and is considered to be\n\t\tone of\
    \ the best gap sequences.\n\t*/\n\tsize_t gap = string_arr.length;\n\twhile(gap\
    \ > 1)\n\t{\n\t\tgap = (gap * 10) / 13;\n\t\tforeach(i; gap..string_arr.length)\n\
    \t", "{\n    \n    string[] r = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    string[] digit = new string[arr.length];\n\
    \    string[] out;\n    string s;\n    int i;\n    int j;\n    int k;\n    long\
    \ x;\n    long y;\n    int n;\n    n = 0;\n    /*\n    Check arr[]\n    */\n \
    \   foreach(x; arr)\n    {\n        if(x >= 1 && x <= 9)\n        {\n        \
    \    digit[n] = x.to!string;\n            n++;\n        }\n    }\n    if(n ==\
    \ 0) return [\"\"];\n    if(n == 1) return [r[n-1]];\n    out = new string[n];\n\
    \    /*\n    Sort arr[]\n    */\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = i+1; j < n; j++)\n        {\n            if(to!long(digit[i]) > to!long(digit[j]))\n\
    \            {\n                s = digit[i];\n                digit[i] = digit[j];\n\
    \                digit[j] = s;\n            }\n        }\n    }\n    /*\n    reverse\
    \ arr[]\n    */\n    for(i = 0; i < n/2; i++)\n    {\n        s = digit[i];\n\
    \        digit[i] = digit[n-i-1];\n        digit[n-i-1] = s;\n    }\n    /*\n\
    \    replace arr[]\n    */\n    for(i = 0; i < n; i++)\n    {\n        y = to!long(digit[i]);\n\
    \        out[i] = r[y-1];\n    }\n    return out;\n}", "{\n    auto a = arr.filter!(x\
    \ => x <= 9L && x >= 1L)().dup.sort.retro;\n    string[] b = new string[a.length];\n\
    \    string[] nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    foreach(int i, long v; a)\n    {\n   \
    \     b[i] = nums[cast(int)v - 1];\n    }\n    return b;\n}\n/*\n    Given a list\
    \ of string, write a function that returns the longest common prefix.", "{\n \
    \   auto sorted = std.algorithm.sort(arr.filter!(i => 0 < i && i < 10));\n   \
    \ auto reversed = std.algorithm.reverse(sorted);\n    return reversed.map!(i =>\
    \ [ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\" ] [i - 1]);\n}", "{\n    return [for (n; arr) if (1 <= n && n <= 9)\
    \ n][$-].map!(toString);\n}\nunittest\n{\n    assert(by_length([2L, 1L, 1L, 4L,\
    \ 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(by_length([]) == []);\n    assert(by_length([1L,\
    \ -1L, 55L]) == [\"One\"]);\n}\n \n \n \n/*\n    Write a function that takes two\
    \ long[]s and return a bool if they represent the same set of numbers.\n    \n\
    \    For example:\n    >>> sameSet([1L, 2L, 3L], [1L, 2L, 3L])\n    true\n   \
    \ \n      Same numbers in different order:\n    >>> sameSet([1L, 2L, 3L], [3L,\
    \ 2L, 1L])\n    true\n    \n      Duplicates are ignored:\n    >>> sameSet([1L,\
    \ 2L, 3L], [3L, 2L, 2L, 1L])\n    true\n    \n      Different sizes should return\
    \ false:\n    >>> sameSet([1L, 2L, 3L], [1L, 2L])\n    false\n    \n      Different\
    \ numbers should return false:\n    >>> sameSet([1L, 2L, 3L], [4L, 5L, 6L])\n\
    \    false\n*/", "{\n    const string[] dict = [\"Zero\", \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    auto\
    \ filtered = arr.filter!(i => 1 <= i && i <= 9);\n    std.algorithm.sort(filtered);\n\
    \    auto r = filtered.reverse;\n    return r.map!(n => dict[n]);\n}", "{\n  \
    \  arr = arr.filter!(l => l >= 1 && l <= 9)().sort!(a => a)().reverse();\n   \
    \ auto result = new string[](arr.length);\n    foreach (n, i; arr)\n    {\n  \
    \      switch (n)\n        {\n            case 1: result[i] = \"One\"; break;\n\
    \            case 2: result[i] = \"Two\"; break;\n            case 3: result[i]\
    \ = \"Three\"; break;\n            case 4: result[i] = \"Four\"; break;\n    \
    \        case 5: result[i] = \"Five\"; break;\n            case 6: result[i] =\
    \ \"Six\"; break;\n            case 7: result[i] = \"Seven\"; break;\n       \
    \     case 8: result[i] = \"Eight\"; break;\n            case 9: result[i] = \"\
    Nine\"; break;\n        }\n    }\n    return result;\n}", "{\n    string[] digits\
    \ = [ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\" ];\n    long[] sortedArr = sort!(\"a < b\")(arr.filter!(a =>\
    \ a > 0 && a < 10));\n    sortedArr = sortedArr.reverse;\n    return map!(a =>\
    \ digits[a - 1])(sortedArr);\n}\n \n/*\n    Given a string, return an array that\
    \ contains the range of numbers that a\n    string contains. If the string is\
    \ empty or contains no numeric characters,\n    return an empty array.", "{\n\
    \    if (arr.length == 0) return new string[0];\n    if (arr.length == 1) return\
    \ [t[arr[0]]];\n    else\n    {\n        arr = arr.sort();\n        arr = arr.reverse();\n\
    \        string[] res = new string[arr.length];\n        foreach(long i, size_t\
    \ j; arr)\n        {\n            if (i <= 0 || i > 9) continue;\n           \
    \ else\n            {\n                res[j] = t[i];\n                j++;\n\
    \            }\n        }\n        return res;\n    }\n}", "{\n  auto str = arr.filter!(a\
    \ => a >= 1 && a <= 9).sort!(a => a).map!(n => to!string(n)).reverse;\n  return\
    \ str.map!(a => a.replace(\"1\", \"One\").replace(\"2\", \"Two\").replace(\"3\"\
    , \"Three\").replace(\"4\", \"Four\").replace(\"5\", \"Five\").replace(\"6\",\
    \ \"Six\").replace(\"7\", \"Seven\").replace(\"8\", \"Eight\").replace(\"9\",\
    \ \"Nine\"));\n}", "{\n    int[] number = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    string[]\
    \ names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"];\n    string[] ret;\n    foreach(var a; arr)\n    {\n \
    \       if(a in number)\n        {\n            ret ~= names[a-1];\n        }\n\
    \    }\n    sort(ret);\n    reverse(ret);\n    return ret;\n}", "{\n    static\
    \ string[] names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"];\n    return arr.filter!(x => x in 1 .. 9).sort().reverse().map!(x\
    \ => names[x - 1]).array;\n}", "{\n    int[] numbers = new int[arr.length];\n\
    \    int n = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0 && arr[i] < 10) {\n            numbers[n] = arr[i];\n            n++;\n\
    \        }\n    }\n    numbers.length = n;\n    sort(numbers);\n    string[] result\
    \ = new string[n];\n    for (int i = 0; i < n; i++) {\n        switch (numbers[i])\
    \ {\n            case 1:\n                result[i] = \"One\";\n             \
    \   break;\n            case 2:\n                result[i] = \"Two\";\n      \
    \          break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    reverse(result);\n\
    \    return result;\n}", "{\n    // create an array of array of string\n    string[][]\
    \ name = [\n        // initialize array with empty array\n        // this is to\
    \ make sure the index is 1, 2, ..., 9\n        [\"\"]*10,\n        [\"One\"],\n\
    \        [\"Two\"],\n        [\"Three\"],\n        [\"Four\"],\n        [\"Five\"\
    ],\n        [\"Six\"],\n        [\"Seven\"],\n        [\"Eight\"],\n        [\"\
    Nine\"]\n    ];\n    long[] sorted = arr.filter!(x => x >= 1 && x <= 9).sort();\n\
    \    return sorted.map!(x => name[x]).array.reverse;\n}", "{\n    auto s = arr.filter!(x\
    \ => 1L <= x && x <= 9L).sort.reverse.map!(x => x.to!string).array;\n    return\
    \ s.map!(x => x == \"1\" ? \"One\" : x == \"2\" ? \"Two\" : x == \"3\" ? \"Three\"\
    \ : x == \"4\" ? \"Four\" : x == \"5\" ? \"Five\" : x == \"6\" ? \"Six\" : x ==\
    \ \"7\" ? \"Seven\" : x == \"8\" ? \"Eight\" : x == \"9\" ? \"Nine\" : x).array;\n\
    }", "{\n    /*\n        1. sort the array\n        2. reverse the array\n    \
    \    3. convert each number to its corresponding name\n        4. return the array\
    \ as string array\n    */\n    arr.sort();\n    arr.reverse();\n    string[] result\
    \ = new string[arr.length];\n    for (int i = 0; i < arr.length; i++)\n    {\n\
    \        auto item = arr[i];\n        switch (item)\n        {\n            case\
    \ 1:\n                result[i] = \"One\";\n                break;\n         \
    \   case 2:\n                result[i] = \"Two\";\n                break;\n  \
    \          case 3:\n                result[i] = \"Three\";\n                break;\n\
    \            case 4:\n                result[i] = \"Four\";\n                break;\n\
    \            case 5:\n                result[i] = \"Five\";\n                break;\n\
    \            case 6:\n                result[i] = \"Six\";\n                break;\n\
    \            case 7:\n                result[i] = \"Seven\";\n               \
    \ break;\n            case 8:\n                result[i] = \"Eight\";\n      \
    \          break;\n            case 9:\n                result[i] = \"Nine\";\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}", "{\n    string[] res;\n    import std.algorithm.sorting\
    \ : sort;\n    immutable int [string] nToS = [1: \"One\", 2: \"Two\", 3: \"Three\"\
    , 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\
    ];\n    foreach(e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       res ~= nToS[e];\n        }\n    }\n    sort(res);\n    res = res.reverse;\n\
    \    return res;\n}", "{\n\tstring[] result = null;\n\timmutable digits = [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"];\n\tif (arr.length == 0)\n\t{\n\t\treturn [];\n\t}\n\telse\n\t{\n\t\
    \treturn [];\n\t}\n}", "{\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.range;\n    import std.stdio;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.typecons : tuple;\n  \
    \  import std.typetuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons",
  "{\n    if (arr.length == 0) return new string[0];\n    return sort!(a => a)(filter!(v\
    \ => v >= 1 && v <= 9)(arr))\n             .array.map!(e => [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][e -\
    \ 1])\n             .array.reverse;\n}\n```", "{\n    if (arr.length == 0) \n\
    \    {\n        return new string[0];\n    }\n    arr.sort;\n    arr.reverse;\n\
    \    string[] numbers = new string[arr.length];\n    foreach (index, num; arr)\
    \ \n    {\n        switch (num) \n        {\n            case 1:\n           \
    \     numbers[index] = \"One\";\n                break;\n            case 2:\n\
    \                numbers[index] = \"Two\";\n                break;\n         \
    \   case 3:\n                numbers[index] = \"Three\";\n                break;\n\
    \            case 4:\n                numbers[index] = \"Four\";\n           \
    \     break;\n            case 5:\n                numbers[index] = \"Five\";\n\
    \                break;\n            case 6:\n                numbers[index] =\
    \ \"Six\";\n                break;\n            case 7:\n                numbers[index]\
    \ = \"Seven\";\n                break;\n            case 8:\n                numbers[index]\
    \ = \"Eight\";\n                break;\n            case 9:\n                numbers[index]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return numbers;\n\
    }", "{\n    \n    /*\n    Solution:\n    1. Filter the array for numbers between\
    \ 1 and 9 inclusive\n    2. Sort the array by the number (1-9) using sort!qsort\n\
    \    3. Reverse the sorted array\n    4. Replace the numbers with the corresponding\
    \ names from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n    */\n    \n    //long[] arr = [2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L];\n    long[] arr2 = arr.filter!(a => (a > 0 && a < 10));\n    //Arrays\
    \ of type long[] or ulong[] are sorted by sort!qsort. \n    //The other primitive\
    \ types are sorted by sort!(\"a < b\").\n    sort!qsort(arr2);\n    //Reverse\
    \ array\n    arr2 = arr2.array.reverse();\n   \n    \n    //Map number to string\n\
    \    string[] result = arr2.map!(a => \n    (\n        a == 1 ? \"One\" : \n \
    \       a == 2 ? \"Two\" : \n        a == 3 ? \"Three\" : \n        a == 4 ? \"\
    Four\" : \n        a == 5 ? \"Five\" : \n        a == 6 ? \"Six\" : \n       \
    \ a == 7 ? \"Seven\" : \n        a == 8 ? \"Eight\" : \n        a == 9 ? \"Nine\"\
    \ : \n        \"error\"\n    )).array;\n    return result;\n}", "{\n    if (arr.length\
    \ == 0) return [];\n    arr = arr.sort.array.filter!(x => x > 0 && x < 10).array.reverse.array;\n\
    \    return arr.map!(long x => [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x]).array;\n}", "{\n    auto\
    \ res = arr.filter!(a => 1 <= a && a <= 9).sort!(a => a).sort!(a => -a).map!(a\
    \ => [\n        \"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"\n    ][a]);\n    return res;\n}", "{\n    if\
    \ (arr.length == 0)\n    {\n        return new string[0];\n    }\n    auto num\
    \ = arr.filter!(a => a > 0 && a < 10)().sort.map!(to!string).reverse;\n    auto\
    \ numToStr = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"];\n    return num.map!(a => numToStr[to!int(a) - 1]).array;\n\
    }", "{\n    arr = sort(filter!(a => a > 0 && a < 10)(arr))[];\n    arr = arr.reverse();\n\
    \    return map!(a => to!string(a))(arr);\n}\n/*\n  The following is a template\
    \ for the exercise.\n  You can use the following code to test your implementation.\n\
    \  To start with, you can just write your implementation into the template.\n\
    \  Once you are satisfied with your implementation, you can use the auto-tester.\n\
    \  You can find more info on this in the auto-tester tab.\n*/", "{\n    import\
    \ std.typecons;\n    long[] nums = arr.filter!(i => i > 0 && i < 10)();\n    auto\
    \ numMap = [\n      \"One\",\n      \"Two\",\n      \"Three\",\n      \"Four\"\
    ,\n      \"Five\",\n      \"Six\",\n      \"Seven\",\n      \"Eight\",\n     \
    \ \"Nine\"\n    ];\n    long[] sortedNums = nums.sort();\n    string[] mapped\
    \ = sortedNums.map!(i => numMap[i-1]);\n    return mapped.reverse();\n}", "{\n\
    \    return arr.array.sort.reverse.map!(a => a > 0 && a < 10 ? to!string(a) :\
    \ \"\");\n}", "{\n    auto len = arr.length;\n    if (len == 0)\n        return\
    \ new string[0];\n    string[] res = new string[len];\n    arr.sort();\n    arr.reverse();\n\
    \    auto index = 0;\n    foreach (item; arr) \n    {\n        if (item >= 1 &&\
    \ item <= 9) \n        {\n            switch (item) \n            {\n        \
    \        case 1:\n                    res[index] = \"One\";\n                \
    \    break;\n                case 2:\n                    res[index] = \"Two\"\
    ;\n                    break;\n                case 3:\n                    res[index]\
    \ = \"Three\";\n                    break;\n                case 4:\n        \
    \            res[index] = \"Four\";\n                    break;\n            \
    \    case 5:\n                    res[index] = \"Five\";\n                   \
    \ break;\n                case 6:\n                    res[index] = \"Six\";\n\
    \                    break;\n                case 7:\n                    res[index]\
    \ = \"Seven\";\n                    break;\n                case 8:\n        \
    \            res[index] = \"Eight\";\n                    break;\n           \
    \     case 9:\n                    res[index] = \"Nine\";\n                  \
    \  break;\n            }\n            index++;\n        }\n    }\n    return res[0..index];\n\
    }", "{\n    string[] result = new string[0];\n    if (arr.length == 0) \n    {\n\
    \        return result;\n    }\n    long[] nums = new long[0];\n    foreach (n;\
    \ arr) \n    {\n        if (n > 0 && n < 10) \n        {\n            nums ~=\
    \ n;\n        }\n    }\n    nums.sort;\n    nums.reverse;\n    foreach (i; nums)\
    \ \n    {\n        switch (i) \n        {\n            case 1:\n             \
    \   result ~= \"One\";\n                break;\n            case 2:\n        \
    \        result ~= \"Two\";\n                break;\n            case 3:\n   \
    \             result ~= \"Three\";\n                break;\n            case 4:\n\
    \                result ~= \"Four\";\n                break;\n            case\
    \ 5:\n                result ~= \"Five\";\n                break;\n          \
    \  case 6:\n                result ~= \"Six\";\n                break;\n     \
    \       case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}", "{\n    import std.algorithm.sorting\
    \ : sort;\n    import std.algorithm.comparison : equal;\n    import std.algorithm.iteration\
    \ : find;\n    import std.array : reverse;\n    import std.conv : to;\n    import\
    \ std.stdio : writeln;\n    string[] names = [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    auto digits =\
    \ arr.filter!(a => 1 <= a && a <= 9);\n    digits.sort;\n    digits.reverse;\n\
    \    return digits.map!(d => names[d - 1]).array;\n}", "{\n    // TODO: Write\
    \ the implementation here\n    auto l1 = arr.filter!(a => a >= 1 && a <= 9);\n\
    \    l1.sort;\n    l1.reverse;\n    auto l2 = l1.map!(b => \n        switch(b)\n\
    \        {\n            case 1: return \"One\";\n            case 2: return \"\
    Two\";\n            case 3: return \"Three\";\n            case 4: return \"Four\"\
    ;\n            case 5: return \"Five\";\n            case 6: return \"Six\";\n\
    \            case 7: return \"Seven\";\n            case 8: return \"Eight\";\n\
    \            case 9: return \"Nine\";\n        }\n    );\n    return l2;\n}",
  "{\n    sort!((a, b) => a > b)(arr);\n    immutable map = [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    string[]\
    \ res = [];\n    foreach(n; arr) {\n        if(n > 0 && n < 10)\n            res\
    \ ~= map[n-1];\n    }\n    return res;\n}", "{\n    arr = arr.filter!(x => x >=\
    \ 1 && x <= 9).sort.retro;\n    string[] result = new string[arr.length];\n  \
    \  for (size_t i = 0; i < arr.length; i++) \n    {\n        string s = arr[i].to!string;\n\
    \        if (s == \"1\")\n            result[i] = \"One\";\n        else if (s\
    \ == \"2\")\n            result[i] = \"Two\";\n        else if (s == \"3\")\n\
    \            result[i] = \"Three\";\n        else if (s == \"4\")\n          \
    \  result[i] = \"Four\";\n        else if (s == \"5\")\n            result[i]\
    \ = \"Five\";\n        else if (s == \"6\")\n            result[i] = \"Six\";\n\
    \        else if (s == \"7\")\n            result[i] = \"Seven\";\n        else\
    \ if (s == \"8\")\n            result[i] = \"Eight\";\n        else if (s == \"\
    9\")\n            result[i] = \"Nine\";\n    }\n    return result;\n}\n// @exercises/4/4.4.4.4.d\n\
    /*", "{\n    return appender()\n        .sort(arr.filter!(x => x > 0 && x < 10))\n\
    \        .map!(x => to!string(x))\n        .map!(x => replace(x, \"1\", \"One\"\
    ))\n        .map!(x => replace(x, \"2\", \"Two\"))\n        .map!(x => replace(x,\
    \ \"3\", \"Three\"))\n        .map!(x => replace(x, \"4\", \"Four\"))\n      \
    \  .map!(x => replace(x, \"5\", \"Five\"))\n        .map!(x => replace(x, \"6\"\
    , \"Six\"))\n        .map!(x => replace(x, \"7\", \"Seven\"))\n        .map!(x\
    \ => replace(x, \"8\", \"Eight\"))\n        .map!(x => replace(x, \"9\", \"Nine\"\
    ))\n        .data;\n}\n/*\n    Takes a vector of strings v, and returns a vector\
    \ of strings containing\n    all the strings in v with uppercase characters converted\
    \ to lowercase.", "{\n    string[] by_length(long[] arr) \n    {\n        int[]\
    \ number_order = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n        string[] number_names =\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"];\n        string[] letters = new string[arr.length];\n        int\
    \ letter_index = 0;\n        foreach(long el; arr)\n        {\n            foreach(int\
    \ i; number_order)\n            {\n                if(el == i)\n             \
    \   {\n                    letters[letter_index] = number_names[i - 1];\n    \
    \                letter_index++;\n                }\n            }\n        }\n\
    \        letters = letters.retro;\n        return letters;\n    }\n}", "{\n  \
    \  long[] arr1 = arr.filter!(a => a > 0 && a < 10).map!(a => 9 - a);\n    auto\
    \ arr2 = arr1.map!(a => to!string(a));\n    return arr2;\n}", "{\n    size_t swapCount\
    \ = 0;\n    for (size_t i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ > 0 && arr[i] < 10)\n        {\n            for (size_t j = 0; j < arr.length;\
    \ j++)\n            {\n                if (arr[j] > 0 && arr[j] < 10)\n      \
    \          {\n                    if (arr[i] < arr[j])\n                    {\n\
    \                        swapCount++;\n                        long[] temp = arr;\n\
    \                        temp[i] = arr[j];\n                        temp[j] =\
    \ arr[i];\n                        arr = temp;\n                    }\n      \
    \          }\n            }\n        }\n    }\n    if (swapCount == 0) return\
    \ [];\n    size_t num = arr.length;\n    size_t i = 0;\n    string[] strArr =\
    \ new string[];\n    foreach (long l; arr)\n    {\n        switch (l)\n      \
    \  {\n            case 1:\n                strArr ~= \"One\";\n              \
    \  break;\n            case 2:\n                strArr ~= \"Two\";\n         \
    \       break;\n            case 3:\n                strArr ~= \"Three\";\n  \
    \              break;\n            case 4:\n                strArr ~= \"Four\"\
    ;\n                break;\n            case 5:\n                strArr ~= \"Five\"\
    ;\n                break;\n            case 6:\n                strArr ~= \"Six\"\
    ;\n                break;\n            case 7:\n                strArr ~= \"Seven\"\
    ;\n                break;\n            case 8:\n                strArr ~= \"Eight\"\
    ;\n                break;\n            case 9:\n                strArr ~= \"Nine\"\
    ;\n                break;\n        }\n    }\n    string[] reverseStrArr = new\
    \ string[num];\n    foreach (string s; strArr)\n    {\n        reverseStrArr[i]\
    \ = s;\n        i++;\n    }\n    return reverseStrArr;\n}", "{\n  auto func =\
    \ (x)\n  {\n    switch(x)\n    {\n      case 1:\n        return \"One\";\n   \
    \   case 2:\n        return \"Two\";\n      case 3:\n        return \"Three\"\
    ;\n      case 4:\n        return \"Four\";\n      case 5:\n        return \"Five\"\
    ;\n      case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\"\
    ;\n      case 8:\n        return \"Eight\";\n      case 9:\n        return \"\
    Nine\";\n      default:\n        return \"\";\n    }\n  };\n  arr.retain!(a =>\
    \ a <= 9 && a >= 1);\n  arr.sort!(a => a);\n  arr.reverse();\n  return arr.map!(a\
    \ => func(a)).array;\n}", "{\n    auto m = map!(\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    auto r = arr.filter!(x\
    \ => (1 <= x && x <= 9)).sort().reverse;\n    return r.map!(x => m[x]).array;\n\
    }", "{ \n    auto sorted = arr.filter!(x => x>0 && x<10)();\n    sorted.sort;\n\
    \    sorted.reverse;\n    return sorted.map!(x => alias[] string = [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]; string[x-1])();\n}", "{\n  string[] res = new string[0];\n  long[] before =\
    \ new long[0];\n  long[] after = new long[0];\n  foreach(l; arr)\n  {\n    if(1\
    \ <= l && l <= 9)\n    {\n      before ~= l;\n    }\n    else\n    {\n      after\
    \ ~= l;\n    }\n  }\n  sort(before);\n  res = before.map!(x => x.to!string);\n\
    \  res.reverse;\n  auto sub = new Subroutine;\n  sub.numbers = res;\n  sub.digits\
    \ = after;\n  return sub;\n}", "{\n    int len = arr.length;\n    if (len == 0)\n\
    \    {\n        return [];\n    }\n    else\n    {\n        string[] res = [];\n\
    \        string[] tmp = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n        foreach (e; arr)\n        {\n    \
    \        if (e > 0 && e < 10)\n            {\n                res ~= tmp[e - 1];\n\
    \            }\n        }\n        res.sort;\n        res.reverse;\n        return\
    \ res;\n    }\n}", "{\n \n  arr = arr.filter!(x => x > 0 && x < 10).array.sort.reverse;\n\
    \  string[] results = new string[arr.length];\n  string[] numbers = [\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ];\n  foreach(n, i; arr) results[i] = numbers[n - 1];\n  return results;\n}",
  "{ \n  arr = arr.filter!(a => a > 0 && a < 10)().sort().frontInsert(0L).reverse().array();\n\
    \  return arr.map!(a => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"][cast(size_t)a - 1]).array();\n}", "{\n    immutable\
    \ int[] lengths = [3,5,4,4,4,3,5,5,4];\n    return arr.filter!(a => a > 0 && a\
    \ < 10).sort.map!(a => lengths[a-1]).reverse.map!(a => lengths[a-1]).map!(\n \
    \       a => typeof(a) == int ? \"One\" :\n            a == \"Five\" ? \"Five\"\
    \ :\n            a == \"Four\" ? \"Four\" :\n            a == \"One\" ? \"One\"\
    \ :\n            a == \"Three\" ? \"Three\" :\n            a == \"Two\" ? \"Two\"\
    \ : \"Eight\"\n    );\n}\n```\n**[Execute Code](https://rextester.com/CQQG56784)**",
  "{\n    import std.algorithm.sorting : sort;\n    import std.algorithm.comparison\
    \ : unaryFun;\n    import std.typecons : tuple;\n    import std.array : array;\n\
    \    import std.range : take;\n    import std.range : chain;\n    import std.algorithm.iteration\
    \ : map;\n    import std.algorithm.searching : binarySearch;\n    import std.algorithm.mutation\
    \ : reverse;\n    import std.conv : to;\n    import std.conv : to;\n    import\
    \ std.algorithm.comparison : unaryFun;\n    import std.stdio : writeln;\n    int[string]\
    \ dict = [\"One\":1, \"Two\":2, \"Three\":3, \"Four\":4, \"Five\":5, \"Six\":6,\
    \ \"Seven\":7, \"Eight\":8, \"Nine\":9];\n    auto result = arr.filter!(a => a\
    \ > 0 && a < 10).sort(unaryFun!((a, b) => a < b)).reverse().map!((a) => dict.byKey(a.to!string)[0]);\n\
    \    return result;\n}", "{\n    const string[] arrString = [\"Zero\", \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ];\n    long[] arrFilter = arr.filter!(a => a >= 1 && a <= 9)();\n    arrFilter.sort!((a,\
    \ b) => a > b)();\n    arrFilter.reverse();\n    return arrFilter.map!(a => arrString[a])();\n\
    }", "{\n    import std.algorithm.comparison : sort;\n    import std.functional\
    \ : toLower;\n    import std.range : filter, map;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.string : replace;\n    import\
    \ std.string : replace;\n    auto ret = arr.filter!(a => a > 0 && a < 10).sort().map!(a\
    \ => to!string(a)).map!(a => tuple(a, a.replace(\"1\", \"One\").replace(\"2\"\
    , \"Two\").replace(\"3\", \"Three\").replace(\"4\", \"Four\").replace(\"5\", \"\
    Five\").replace(\"6\", \"Six\").replace(\"7\", \"Seven\").replace(\"8\", \"Eight\"\
    ).replace(\"9\", \"Nine\").toLower())).map!(a => a[1]).retro;\n    return ret;\n\
    }", "{\n    auto range = 1 .. 9;\n    string[] result = [];\n    auto it = arr.filter!(a\
    \ => range.any!(b => a == b));\n    it.sort();\n    it.reverse();\n    foreach(itn;\
    \ it) \n    {\n        switch(itn)\n        {\n            case 1: result ~= \"\
    One\"; break;\n            case 2: result ~= \"Two\"; break;\n            case\
    \ 3: result ~= \"Three\"; break;\n            case 4: result ~= \"Four\"; break;\n\
    \            case 5: result ~= \"Five\"; break;\n            case 6: result ~=\
    \ \"Six\"; break;\n            case 7: result ~= \"Seven\"; break;\n         \
    \   case 8: result ~= \"Eight\"; break;\n            case 9: result ~= \"Nine\"\
    ; break;\n        }\n    }\n    return result;\n}\n/*", "{\n    if (arr.length\
    \ == 0)\n    {\n        return [];\n    }\n    else\n    {\n        arr = arr.sort;\n\
    \        arr = arr.reverse;\n        string[] sarr = new string[arr.length];\n\
    \        foreach(a; arr)\n        {\n            switch(a)\n            {\n  \
    \              case 1:\n                    sarr ~= \"One\";\n               \
    \     break;\n                case 2:\n                    sarr ~= \"Two\";\n\
    \                    break;\n                case 3:\n                    sarr\
    \ ~= \"Three\";\n                    break;\n                case 4:\n       \
    \             sarr ~= \"Four\";\n                    break;\n                case\
    \ 5:\n                    sarr ~= \"Five\";\n                    break;\n    \
    \            case 6:\n                    sarr ~= \"Six\";\n                 \
    \   break;\n                case 7:\n                    sarr ~= \"Seven\";\n\
    \                    break;\n                case 8:\n                    sarr\
    \ ~= \"Eight\";\n                    break;\n                case 9:\n       \
    \             sarr ~= \"Nine\";\n                    break;\n            }\n \
    \       }\n        return sarr;\n    }\n}", "{\n    auto by_length = new string[](arr.length);\n\
    \    auto sorted = new long[](arr.length);\n    int it = 0;\n    foreach(index,\
    \ i; arr)\n    {\n        // if the number is between 1-9\n        if (i > 0 &&\
    \ i < 10)\n        {\n            sorted[it] = i;\n            it++;\n       \
    \ }\n    }\n    sort(sorted);\n    for (int i = 0; i < it; i++)\n    {\n     \
    \   switch (sorted[i])\n        {\n            case 1:\n                by_length[i]\
    \ = \"One\";\n                break;\n            case 2:\n                by_length[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                by_length[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                by_length[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                by_length[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                by_length[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                by_length[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                by_length[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                by_length[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    reverse(by_length);\n\
    \    return by_length;\n}", "{\n    string[] ret;\n    string[] res;\n    int\
    \ max = arr.length;\n    int counter = 0;\n    int[] sorted_array;\n    sorted_array\
    \ = new int[max];\n    foreach(int item; arr)\n    {\n        if(item > 0 && item\
    \ < 10)\n        {\n            sorted_array[counter] = item;\n            counter++;\n\
    \        }\n    }\n    sort(sorted_array);\n    ret = new string[counter];\n \
    \   foreach(int item; sorted_array)\n    {\n        auto z = cast(int)item;\n\
    \        ret[counter-1] = z.to!string;\n        counter--;\n    }\n    string[]\
    \ res;\n    auto map = [1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5:\
    \ \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"];\n    foreach(int\
    \ item; ret)\n    {\n        int i = cast(int)item;\n        res ~= map[i];\n\
    \    }\n    return res;\n}", "{\n    auto res = new string[arr.length];\n    long[]\
    \ num = new long[arr.length];\n    long[] num2 = new long[arr.length];\n    long\
    \ num3;\n    long num4;\n    foreach(i,value;arr)\n    {\n        if(value<10&&value>0)\n\
    \        {\n            num[i] = value;\n        }\n    }\n    foreach(i,value;num)\n\
    \    {\n        if(value!=0)\n        {\n            num2[i] = value;\n      \
    \  }\n    }\n    num3 = num2.length;\n    num4 = num3;\n    foreach(i,value;num2)\n\
    \    {\n        if(value!=0)\n        {\n            num4--;\n            switch(value)\n\
    \            {\n                case 1:\n                    res[num4] = \"One\"\
    ;\n                    break;\n                case 2:\n                    res[num4]\
    \ = \"Two\";\n                    break;\n                case 3:\n          \
    \          res[num4] = \"Three\";\n                    break;\n              \
    \  case 4:\n                    res[num4] = \"Four\";\n                    break;\n\
    \                case 5:\n                    res[num4] = \"Five\";\n        \
    \            break;\n                case 6:\n                    res[num4] =\
    \ \"Six\";\n                    break;\n                case 7:\n            \
    \        res[num4] = \"Seven\";\n                    break;\n                case\
    \ 8:\n                    res[num4] = \"Eight\";\n                    break;\n\
    \                case 9:\n                    res[num4] = \"Nine\";\n        \
    \            break;\n            }\n        }\n    }\n    return res;\n}", "{\n\
    \    //TODO\n}", "{ \n    arr.sort;\n    arr.reverse;\n    string[] result;\n\
    \    foreach(long x; arr)\n    {\n        //If the array has any strange number\
    \ ignore it\n        if(x < 1 || x > 9)\n            continue;\n        //Get\
    \ corresponding name from array\n        string name = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x - 1];\n     \
    \   result ~= name;\n    }\n    return result;\n}\n \n/*", "{\n    // Your code\
    \ here\n    \n}\n \n \n \n/*\n    Sort the integer array given using the bubble\
    \ sort method\n    Don't use D's built-in sort()", "{\n\tauto s_arr = arr.map!(x\
    \ => format(\"%s\", x));\n\tsort!(\"a > b\", s_arr);\n\treverse(s_arr);\n\treturn\
    \ s_arr.map!(x => x.stripSuffix(\"L\")).map!(x => x == \"1\" ? \"One\" :\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t x == \"2\" ? \"Two\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t x == \"3\" ? \"Three\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t x == \"4\" ?\
    \ \"Four\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t x == \"5\" ? \"Five\" :\n\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t x == \"6\" ? \"Six\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t x == \"7\" ? \"Seven\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t x == \"8\" ? \"\
    Eight\" :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t x == \"9\" ? \"Nine\" : x);\n}", "{\n\
    \    string[] result;\n    long[] numbers = arr.filter!(a => a > 0 && a < 10).sort().reverse();\n\
    \    foreach(n; numbers)\n    {\n        switch(n)\n        {\n            case\
    \ 1:\n                result ~= \"One\";\n                break;\n           \
    \ case 2:\n                result ~= \"Two\";\n                break;\n      \
    \      case 3:\n                result ~= \"Three\";\n                break;\n\
    \            case 4:\n                result ~= \"Four\";\n                break;\n\
    \            case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}", "{\n    // solution code here\n   \
    \ return arr;\n}", "{\n    if (arr.length == 0)\n        return [];\n    string[]\
    \ result = new string[arr.length];\n    arr = arr.sort();\n    int i = 0;\n  \
    \  int j = arr.length - 1;\n    while (i <= j)\n    {\n        if (arr[i] < 1\
    \ || arr[i] > 9)\n        {\n            i++;\n            continue;\n       \
    \ }\n        if (arr[j] < 1 || arr[j] > 9)\n        {\n            j--;\n    \
    \        continue;\n        }\n        switch (arr[i])\n        {\n          \
    \  case 1:\n                result[i] = \"One\";\n                break;\n   \
    \         case 2:\n                result[i] = \"Two\";\n                break;\n\
    \            case 3:\n                result[i] = \"Three\";\n               \
    \ break;\n            case 4:\n                result[i] = \"Four\";\n       \
    \         break;\n            case 5:\n                result[i] = \"Five\";\n\
    \                break;\n            case 6:\n                result[i] = \"Six\"\
    ;\n                break;\n            case 7:\n                result[i] = \"\
    Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n        switch (arr[j])\n  \
    \      {\n            case 1:\n                result[j] = \"One\";\n        \
    \        break;\n            case 2:\n                result[j] = \"Two\";\n \
    \               break;\n            case 3:\n                result[j] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[j] = \"\
    Four\";\n                break;\n            case 5:\n                result[j]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[j]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[j]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[j]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[j]\
    \ = \"Nine\";\n                break;\n        }\n        i++;\n        j--;\n\
    \   ", "{\n    long[] nums = arr.filter!(x => x > 0 && x < 10).sort().reverse;\n\
    \    string[] names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    return nums.map!(x => names[x - 1]);\n\
    }\n \n/*\n    Given a two dimensional array of strings,\n    return the lengths\
    \ of each string in the array.\n    \n    For example:\n    >>> by_length([[\"\
    One\", \"Two\", \"Three\"], [\"Four\", \"Five\", \"Six\"], [\"Seven\", \"Eight\"\
    , \"Nine\"]])\n    [[3, 3, 5], [4, 4, 3], [5, 5, 4]]\n    \n    Note: Don't forget\
    \ to use nested function calls.\n*/\nlong[][] by_length(string[][] arr) \n{\n\
    \    return arr.map!(x => x.map!(y => y.length)).array;\n}\n \n/*\n    Given a\
    \ two dimensional array of strings,\n    return true if the 2D array has a column\
    \ where all the strings\n    have the same length and false otherwise.\n    \n\
    \    For example:\n    >>> by_length([[\"One\", \"Two\", \"Three\"], [\"Four\"\
    , \"Five\", \"Six\"], [\"Seven\", \"Eight\", \"Nine\"]])\n    true\n    \n   \
    \ >>> by_length([[\"One\", \"Two\", \"Three\"], [\"Four\", \"Five\", \"Six\"],\
    \ [\"Seven\", \"Eight\", \"Nine\"], [\"Ten\", \"Eleven\", \"Twelve\"]])\n    false\n\
    \    \n    Note: Don't forget to use nested function calls.\n*/", "{\n    string[]\
    \ result;\n    long[] not_in_arr = [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L];\n   \
    \ foreach(number; arr)\n    {\n        foreach(elem; not_in_arr)\n        {\n\
    \            if(number == elem)\n            {\n                result ~= number.to!string;\n\
    \            }\n        }\n    }\n    if(result.length != 0)\n    {\n        result.sort;\n\
    \        result.reverse;\n        long[] from = [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L,\
    \ 9L];\n        string[] to = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n        result = result.replace(from,\
    \ to);\n    }\n    return result;\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    string[] res = new string[];\n    foreach (x; arr)\n    {\n       \
    \ if (x >= 1 && x <= 9)\n            res ~= x.to!string;\n    }\n    res.sort!((a,\
    \ b) => a.length < b.length);\n    res.reverse;\n    for (i, v; res)\n    {\n\
    \        switch (v)\n        {\n            case \"1\":\n                res[i]\
    \ = \"One\";\n                break;\n            case \"2\":\n              \
    \  res[i] = \"Two\";\n                break;\n            case \"3\":\n      \
    \          res[i] = \"Three\";\n                break;\n            case \"4\"\
    :\n                res[i] = \"Four\";\n                break;\n            case\
    \ \"5\":\n                res[i] = \"Five\";\n                break;\n       \
    \     case \"6\":\n                res[i] = \"Six\";\n                break;\n\
    \            case \"7\":\n                res[i] = \"Seven\";\n              \
    \  break;\n            case \"8\":\n                res[i] = \"Eight\";\n    \
    \            break;\n            case \"9\":\n                res[i] = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return res;\n}", "{\n    static\
    \ immutable string[] map = [ \"Zero\", \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" ];\n    return map[10 - sort!((a,\
    \ b) => a < b)(arr.filter!(e => e >= 1 && e <= 9))].retro;\n}", "{\n    /*\n \
    \       Create a structure like this:\n        std.typecons.Tuple!(int, string)(1,\
    \ \"One\");\n        Create an array of this structure and fill with data\n  \
    \      Then sort by the first field and reverse the array\n        Then create\
    \ an string array of the second fields\n    */\n    int[] sort_arr = [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9];\n    string[] names = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    Tuple!(int, string)[]\
    \ new_arr;\n    new_arr.length = arr.length;\n    foreach(i, a; arr)\n    {\n\
    \        if(a > 0 && a < 10)\n        {\n            new_arr[i] = Tuple!(int,\
    \ string)(a, names[a - 1]);\n        }\n    }\n    sort!(\"a.field1 < b.field1\"\
    )(new_arr);\n    new_arr.reverse;\n    string[] result;\n    result.length = new_arr.length;\n\
    \    foreach(i, a; new_arr)\n    {\n        result[i] = a.field2;\n    }\n   \
    \ return result;\n}", "{ \n    auto a = arr.array.reversed.filter!(x => x >= 1\
    \ && x <= 9).sort!(a, b => a < b).map!(x => to!string(x));\n    return a;\n}\n\
    /*\n    Given an array of string arrays, return only those arrays with all distinct\
    \ elements.\n    For example:\n    >>> by_length([[], [\"One\"], [\"Two\", \"\
    Two\"], [\"Three\", \"Three\", \"Three\"], [\"Four\", \"Four\", \"Four\", \"Four\"\
    ]])\n    [[\"One\"], [\"Two\", \"Two\"], [\"Three\", \"Three\", \"Three\"], [\"\
    Four\", \"Four\", \"Four\", \"Four\"]]\n    \n*/\nstring[][] by_length(string[][]\
    \ arr) \n{ \n    return arr.filter!(a => a.length == a.array.sort.length).array;\n\
    }\n/*\n    Given an integer array, return an array of the same length, where each\n\
    \    element is the sum of all the elements of the previous array. For example:\n\
    \    >>> by_length([1L, 2L, 3L, 4L])\n    [1L, 3L, 6L, 10L]\n    \n*/\nlong[]\
    \ by_length(long[] arr) \n{ \n    long sum = 0;\n    return arr.map!(x => sum\
    \ += x).array;\n}\n/*\n    Given a structure that has a string representing a\
    \ color, return a tuple of\n    a string (name of the color) and a boolean (whether\
    \ it is a primary color).\n    For example:\n    >>> by_length(Color(\"red\"))\n\
    \    (\"red\", true)\n    >>> by_length(Color(\"blue\"))\n    (\"blue\", true)\n\
    \    >>> by_length(Color(\"green\"))\n    (\"green\", true)\n    >>> by_length(Color(\"\
    brown\"))\n    (\"brown\", false)\n    >>> by_length(Color(\"orange\"))\n    (\"\
    orange\", false)\n    \n*/\ntuple!(string, bool) by_length(Color color) \n{ \n\
    \    bool pri = (color.value == \"red\" || color.value == \"blue\" || color.value\
    \ == \"green\");\n    return", "{\n    if (arr.length == 0) return [];\n    auto\
    \ sorted = arr.array.sort.filter!(x => 1 <= x && x <= 9);\n    string[] digits\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"];\n    return sorted.map!(x => digits[x-1]).reverse;\n}", "{\n  //\
    \ return null;\n  // L\xF6sung:\n  /*\n    Verschachtelte Funktionen und\n   \
    \ Multiple return Werte\n  */\n  // sortieren und umkehren\n  auto sorted = arr.filter!(x\
    \ => x in 1..9).sort!((a, b) => a < b).reversed;\n  if (sorted.empty) return sorted;\n\
    \  // Ziffern abgleichen\n  auto mapping = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  return sorted.map!(x\
    \ => mapping[x - 1]).array;\n}", "{\n    import std.algorithm;\n    arr = arr.sort.filter!(i\
    \ => i >= 1 && i <= 9).array;\n    return arr.map!(i => [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][i - 1]).array;\n\
    }", "{\n    int[] digits = arr.filter!(x => x >= 1 && x <= 9).sort.array;\n  \
    \  digits.reverse;\n    return digits.map!(x => Numbers.stringOf(x)).array;\n}",
  "{\n    arr = arr.filter!(x => x > 0 && x < 10)().sort().reverse();\n    return\
    \ arr.map!(string)(x => \"One Two Three Four Five Six Seven Eight Nine\".split(\"\
    \ \")[x - 1]);\n}\n \n/*\n    Given a string, write a function that finds the\
    \ longest substring of unique characters.\n    If there are multiple instances,\
    \ return the first one.\n    \n    For example:\n    >>> longest_unique_substring(\"\
    abcabcbb\")\n    \"abc\"\n    \n      If the given string is empty, return an\
    \ empty string:\n    >>> longest_unique_substring(\"\")\n    \"\"\n    \n    \
    \  If the string is only a single character, return that string:\n    >>> longest_unique_substring(\"\
    a\")\n    \"a\"\n*/\nstring longest_unique_substring(string str) \n{\n    size_t\
    \ longest = 0;\n    size_t longest_index = 0;\n    size_t current = 0;\n    size_t\
    \ current_index = 0;\n    string sub = \"\";\n    foreach (c; str) {\n       \
    \ auto index = sub.indexOf(c);\n        if (index == -1) {\n            sub ~=\
    \ c;\n            current++;\n        } else {\n            if (current > longest)\
    \ {\n                longest = current;\n                longest_index = current_index;\n\
    \            }\n            sub = sub[index + 1 .. $];\n            current_index\
    \ += index + 1;\n            current = sub.length;\n            sub ~= c;\n  \
    \          current++;\n        }\n    }\n    if (current > longest) {\n      \
    \  longest = current;\n        longest_index = current_index;\n    }\n    return\
    \ str[longest_index .. longest_index + longest];\n}\n \n/*\n    Given an array\
    \ of strings, find the longest string in the array.\n    If there are multiple\
    \ instances, return the first one.\n    \n    For example:\n    >>> longest_string([\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\"])\n    \"Five\"\n    \n      If\
    \ the given array is empty, return an empty string:\n    >>> longest_string([])\n\
    \   ", "{ \n    if (arr.length == 0) return [];\n    immutable string[] words\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"];\n    int[] sorted = \n        arr.map!(a =>\n            a > 0 &&\
    \ a < 10 ? a : -1\n        ).filter!(a => a != -1).sort;\n    return words[sorted.reverse.map!(a\
    \ => a - 1)];\n}", "{\n    if (arr.length == 0) return [];\n    else \n    {\n\
    \        string[] res = [];\n        foreach (a; arr)\n        {\n           \
    \ switch (a)\n            {\n                case 1: res ~= \"One\"; break;\n\
    \                case 2: res ~= \"Two\"; break;\n                case 3: res ~=\
    \ \"Three\"; break;\n                case 4: res ~= \"Four\"; break;\n       \
    \         case 5: res ~= \"Five\"; break;\n                case 6: res ~= \"Six\"\
    ; break;\n                case 7: res ~= \"Seven\"; break;\n                case\
    \ 8: res ~= \"Eight\"; break;\n                case 9: res ~= \"Nine\"; break;\n\
    \            }\n        }\n        return res.reverse;\n    }\n}", "{\n\treturn\
    \ !arr.empty ? arr.filter!(i => i > 0 && i < 10).sort.reverse.map!(i => to!string(i)).array\
    \ : [];\n}", "{\n    return [];\n}", "{\n    version(all) {\n        int[string]\
    \ names = [\"One\": 1, \"Two\": 2, \"Three\": 3, \"Four\": 4, \"Five\": 5, \"\
    Six\": 6, \"Seven\": 7, \"Eight\": 8, \"Nine\": 9];\n        return names.byKey.values.array.idup.reverse;\n\
    \    }\n    else {\n        return [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].array.idup.reverse;\n    }\n}",
  "{\n  long[] temp = arr.filter!(a => a > 0 && a < 10)();\n  temp.sort();\n  temp.reverse();\n\
    \  return temp.map!(a => switch(a) { case 1: return \"One\"; case 2: return \"\
    Two\"; case 3: return \"Three\"; case 4: return \"Four\"; case 5: return \"Five\"\
    ; case 6: return \"Six\"; case 7: return \"Seven\"; case 8: return \"Eight\";\
    \ case 9: return \"Nine\"; })();\n}", "{\n    long[] numbers = arr.filter!(e =>\
    \ e >= 1 && e <= 9).sort.reverse;\n    string[] result = new string[];\n    foreach(var\
    \ i; numbers)\n    {\n        switch(i)\n        {\n            case 1: result\
    \ ~= \"One\"; break;\n            case 2: result ~= \"Two\"; break;\n        \
    \    case 3: result ~= \"Three\"; break;\n            case 4: result ~= \"Four\"\
    ; break;\n            case 5: result ~= \"Five\"; break;\n            case 6:\
    \ result ~= \"Six\"; break;\n            case 7: result ~= \"Seven\"; break;\n\
    \            case 8: result ~= \"Eight\"; break;\n            case 9: result ~=\
    \ \"Nine\"; break;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ final_arr = [];\n    int[] num_arr = [];\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > 0 && arr[i] < 10)\n        {\n           \
    \ num_arr ~= arr[i];\n        }\n    }\n    sort(num_arr);\n    num_arr = num_arr.reversed;\n\
    \    for (int i = 0; i < num_arr.length; i++)\n    {\n        if (num_arr[i] ==\
    \ 1)\n        {\n            final_arr ~= \"One\";\n        }\n        else if\
    \ (num_arr[i] == 2)\n        {\n            final_arr ~= \"Two\";\n        }\n\
    \        else if (num_arr[i] == 3)\n        {\n            final_arr ~= \"Three\"\
    ;\n        }\n        else if (num_arr[i] == 4)\n        {\n            final_arr\
    \ ~= \"Four\";\n        }\n        else if (num_arr[i] == 5)\n        {\n    \
    \        final_arr ~= \"Five\";\n        }\n        else if (num_arr[i] == 6)\n\
    \        {\n            final_arr ~= \"Six\";\n        }\n        else if (num_arr[i]\
    \ == 7)\n        {\n            final_arr ~= \"Seven\";\n        }\n        else\
    \ if (num_arr[i] == 8)\n        {\n            final_arr ~= \"Eight\";\n     \
    \   }\n        else if (num_arr[i] == 9)\n        {\n            final_arr ~=\
    \ \"Nine\";\n        }\n    }\n    return final_arr;\n}", "{\n    if (arr.length\
    \ == 0)\n        return new string[0];\n    bool[] filter = arr.map!(a => a >=\
    \ 1 && a <= 9).array;\n    arr = arr.filter!(a => a >= 1 && a <= 9).array;\n \
    \   sort(arr);\n    foreach (index, i; filter)\n    {\n        if (i)\n      \
    \      arr[index] = arr[index].to!string;\n        else\n            arr[index]\
    \ = \"\";\n    }\n    return arr.reverse.array;\n}", "{ \n    int len = arr.length;\n\
    \    string[] a = new string[len];\n    int i = 0;\n    int[] arr1 = new int[len];\n\
    \    foreach(long element; arr)\n    {\n        if(element == 1L)\n        {\n\
    \            a[i] = \"One\";\n            arr1[i] = 1;\n            i = i + 1;\n\
    \        }\n        else if(element == 2L)\n        {\n            a[i] = \"Two\"\
    ;\n            arr1[i] = 2;\n            i = i + 1;\n        }\n        else if(element\
    \ == 3L)\n        {\n            a[i] = \"Three\";\n            arr1[i] = 3;\n\
    \            i = i + 1;\n        }\n        else if(element == 4L)\n        {\n\
    \            a[i] = \"Four\";\n            arr1[i] = 4;\n            i = i + 1;\n\
    \        }\n        else if(element == 5L)\n        {\n            a[i] = \"Five\"\
    ;\n            arr1[i] = 5;\n            i = i + 1;\n        }\n        else if(element\
    \ == 6L)\n        {\n            a[i] = \"Six\";\n            arr1[i] = 6;\n \
    \           i = i + 1;\n        }\n        else if(element == 7L)\n        {\n\
    \            a[i] = \"Seven\";\n            arr1[i] = 7;\n            i = i +\
    \ 1;\n        }\n        else if(element == 8L)\n        {\n            a[i] =\
    \ \"Eight\";\n            arr1[i] = 8;\n            i = i + 1;\n        }\n  \
    \      else if(element == 9L)\n        {\n            a[i] = \"Nine\";\n     \
    \       arr1[i] = 9;\n            i = i + 1;\n        }\n    }\n    sort(arr1);\n\
    \    reverse(arr1);\n    return a;\n}", "{\n    if (arr.length == 0) \n    {\n\
    \        return new string[0];\n    }\n    auto res = arr.dup;\n    std.algorithm.sort(res);\n\
    \    // foreach (ref e; res) \n    // {\n    //     switch (e) \n    //     {\n\
    \    //         case 1:\n    //             e = \"One\";\n    //             break;\n\
    \    //         case 2:\n    //             e = \"Two\";\n    //             break;\n\
    \    //         case 3:\n    //             e = \"Three\";\n    //           \
    \  break;\n    //         case 4:\n    //             e = \"Four\";\n    //  \
    \           break;\n    //         case 5:\n    //             e = \"Five\";\n\
    \    //             break;\n    //         case 6:\n    //             e = \"\
    Six\";\n    //             break;\n    //         case 7:\n    //            \
    \ e = \"Seven\";\n    //             break;\n    //         case 8:\n    //  \
    \           e = \"Eight\";\n    //             break;\n    //         case 9:\n\
    \    //             e = \"Nine\";\n    //             break;\n    //         default:\n\
    \    //             res.remove(e);\n    //             break;\n    //     }\n\
    \    // }\n    std.algorithm.reverse(res);\n    return res;\n}", "{ \n    long[]\
    \ v = arr.filter!(x => x >= 1 && x <= 9).sort.reverse;\n    return v.map!(x =>\
    \ [null, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"][cast(int)x]).array;\n}", "{\n    if (arr.length == 0)\n\
    \    {\n        return [];\n    }\n    return arr.filter!(a => 1 <= a && a <=\
    \ 9).map!(a => \"One Two Three Four Five Six Seven Eight Nine\".split(\" \")[a\
    \ - 1]).\n        array.sort.array.reverse;\n}", "{\n    string[] names = [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"];\n    long[] sorted = arr.filter!(e => e >= 1 && e <= 9).sort();\n\
    \    return sorted.map!(e => names[e - 1]).reverse();\n}", "{\n  auto l = new\
    \ string[0];\n  arr = arr.filter!(a => a >= 1 && a <= 9).sort().reversed;\n  foreach(i;arr)\n\
    \    l ~= \"One Two Three Four Five Six Seven Eight Nine\".split(\" \")[i-1];\n\
    \  return l;\n}", "{\n    const char[] names = [\n            \"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n   \
    \ ];\n    int[] sortedNums = (arr.filter!(x => x > 0 && x < 10)).array;\n    std.algorithm.sort(sortedNums);\n\
    \    std.algorithm.reverse(sortedNums);\n    string[] reversedSortedNames = new\
    \ string[sortedNums.length];\n    foreach(i, num; sortedNums)\n    {\n       \
    \ reversedSortedNames[i] = names[num - 1];\n    }\n    return reversedSortedNames;\n\
    }", "{\n    string[] result = null;\n    int cnt = 0;\n    long[] original = new\
    \ long[arr.length];\n    //double[] original_0 = new double[arr.length];\n   \
    \ //double[] sorted = new double[arr.length];\n    //long[] sorted_0 = new long[arr.length];\n\
    \    //string[] sorted_1 = new string[arr.length];\n    //double[] original_0\
    \ = new double[arr.length];\n    //double[] sorted = new double[arr.length];\n\
    \    string[] sorted_1 = new string[arr.length];\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > 0 && arr[i] < 10)\n        {\n           \
    \ cnt++;\n            original[i] = arr[i];\n        }\n    }\n    if (cnt ==\
    \ 0)\n    {\n        return result;\n    }\n    else\n    {\n        result =\
    \ new string[cnt];\n        for (int i = 0; i < cnt; i++)\n        {\n       \
    \     //sorted[i] = arr[i];\n            //sorted_0[i] = arr[i];\n           \
    \ //sorted_1[i] = arr[i];\n            sorted_1[i] = to!string(arr[i]);\n    \
    \    }\n        //sort(sorted_0);\n        //sort(sorted);\n        sort(sorted_1);\n\
    \        //sort(sorted_1);\n        //std.algorithm.reverse(sorted_0);\n     \
    \   //std.algorithm.reverse(sorted);\n        std.algorithm.reverse(sorted_1);\n\
    \        //std.algorithm.reverse(sorted_1);\n        for (int i = 0; i < cnt;\
    \ i++)\n        {\n            //if (sorted_0[i] == 1)\n            //{\n    \
    \        //    result[i] = \"One\";\n            //}\n            //else if (sorted_0[i]\
    \ == 2)\n            //{\n            //    result[i] = \"Two\";\n           \
    \ //}\n            //else if (sorted_", "{ \n    auto result = appender!(string[])();\n\
    \    foreach(num; arr)\n    {\n        if(0 < num < 10)\n        {\n         \
    \   import std.conv : to;\n            result.put(to!string(num));\n        }\n\
    \    }\n    result.put(result.data.sort!q{a > b});\n    return result.data;\n}",
  "{\n    // write your code here\n    ulong[] my_list = \n        arr.map!(\n   \
    \     (x) => {\n            int num = cast(int)x;\n            if(num >= 1 &&\
    \ num <= 9) {\n                return cast(ulong)num;\n            } else {\n\
    \                return ulong.max;\n            }\n        }\n    ).filter!(\n\
    \        (x) => x != ulong.max\n    ).array();\n    if(my_list.length == 0) {\n\
    \        return new string[0];\n    }\n    int[] sorted_list = my_list.array().sort().array();\n\
    \    Tuple!(string,string,string,string,string,string,string,string,string) numbers\
    \ = tuple(\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\"\
    ,\"Nine\");\n    return sorted_list.map!(\n        (x) => numbers[x-1]\n    ).array().reverse();\n\
    }", "{\n    auto mapped = arr.filter!(a => a >= 1 && a <= 9).sort.map!(a => \"\
    OneTwoThreeFourFiveSixSevenEightNine\"[a-1..$]).array;\n    mapped.reverse;\n\
    \    return mapped;\n}", "{\n    // use length to determine the order.\n    enum\
    \ Name = tuple(int num, string name);\n    Name[] names = [ tuple(1, \"One\"),\
    \ tuple(2, \"Two\"), tuple(3, \"Three\"), tuple(4, \"Four\"), tuple(5, \"Five\"\
    ), tuple(6, \"Six\"), tuple(7, \"Seven\"), tuple(8, \"Eight\"), tuple(9, \"Nine\"\
    ) ];\n    string[] result = arr.filter!(a => (a >= 1 && a <= 9)).sort!(a => a).map!(a\
    \ => names.filter!(n => n.num == a)[0].name).reverse.array;\n    return result;\n\
    }", "{ \n    const string[] nums = [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    size_t i;\n    long[] arr2\
    \ = new long[arr.length];\n    string[] result = new string[arr.length];\n   \
    \ foreach(i, e; arr) {\n        if (e > 0 && e < 10)\n            arr2 ~= e;\n\
    \    }\n    //arr2 = sort(arr2);\n    arr2 = sort(arr2, (a, b) => b < a);\n  \
    \  foreach(i, e; arr2) {\n        result ~= nums[e - 1];\n    }\n    return result;\n\
    }", "{\n    // In this function, the number in arr\n    // will be replaced by\
    \ its English name\n    // <18L is the name of this function\n    // \"Eighteen\"\
    \n    string replace(long number) = \n    {\n        import std.string : toString;\n\
    \        string num_str = toString(number);\n        auto fun = [\"Zero\", \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"];\n        foreach(ch; num_str)\n        {\n            if (ch < '0'\
    \ || ch > '9')\n                return \"\";\n            num_str = fun[ch - '0']\
    \ ~ num_str[1 .. $];\n        }\n        return num_str;\n    };\n    // If a\
    \ number is invalid, just ignore it\n    // I will use the filter function\n \
    \   // It will filter the invalid number out\n    auto arr_clean = arr.filter!(e\
    \ => e >= 1L && e <= 9L);\n    // Don't forget to sort the array\n    // Because\
    \ the question requires\n    arr_clean.sort!(a, b => a > b);\n    // Then reverse\
    \ the array\n    arr_clean.reverse();\n    // Now we can apply the replace function\n\
    \    // to each element of the array\n    return arr_clean.map!replace.array;\n\
    }\n/*", "{\n    long[] y = arr.filter!(a => a <= 9L && a >= 1L);\n    string[]\
    \ result = new string[y.length];\n    for (int i = 0; i < y.length; i++) \n  \
    \  {\n        switch(y[i]) \n        {\n            case 1L:\n               \
    \ result[i] = \"One\";\n                break;\n            case 2L:\n       \
    \         result[i] = \"Two\";\n                break;\n            case 3L:\n\
    \                result[i] = \"Three\";\n                break;\n            case\
    \ 4L:\n                result[i] = \"Four\";\n                break;\n       \
    \     case 5L:\n                result[i] = \"Five\";\n                break;\n\
    \            case 6L:\n                result[i] = \"Six\";\n                break;\n\
    \            case 7L:\n                result[i] = \"Seven\";\n              \
    \  break;\n            case 8L:\n                result[i] = \"Eight\";\n    \
    \            break;\n            case 9L:\n                result[i] = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return result.reverse;\n}", "{\n\
    \    import std.algorithm;\n    import std.range;\n    import std.string;\n  \
    \  import std.format;\n    import std.conv;\n    auto S = arr.filter!(a => (a\
    \ > 0 && a < 10)).map!(to!string).sort!((a, b) => a.length > b.length).reverse.map!(a\
    \ => to!string(a.length));\n    return S;\n}\n/*\n    Given a two-dimensional\
    \ array, containing an x and y coordinate in each\n    sub-array, use the x and\
    \ y coordinate to calculate the distance between\n    the two points, and return\
    \ an array containing all points which have a\n    distance less than a given\
    \ number \"dist\".", "{\n    string[] answer = new string[];\n    foreach(elt;\
    \ arr)\n    {\n        if(elt >= 1 && elt <= 9)\n        {\n            switch(elt)\n\
    \            {\n                case 1: answer ~= \"One\"; break;\n          \
    \      case 2: answer ~= \"Two\"; break;\n                case 3: answer ~= \"\
    Three\"; break;\n                case 4: answer ~= \"Four\"; break;\n        \
    \        case 5: answer ~= \"Five\"; break;\n                case 6: answer ~=\
    \ \"Six\"; break;\n                case 7: answer ~= \"Seven\"; break;\n     \
    \           case 8: answer ~= \"Eight\"; break;\n                case 9: answer\
    \ ~= \"Nine\"; break;\n            }\n        }\n    }\n    answer.sort;\n   \
    \ return answer;\n}", "{\n    return arr.sort().reverse()\n        .map!((num)\
    \ =>\n            num > 0 && num < 10 \n                ? num.to!string\n    \
    \            : \"\")\n        .array.array;\n}", "{\n    string[] res;\n    foreach(x;\
    \ arr) \n    {\n        if (x > 0 && x < 10) \n        {\n            res ~= x.stringof;\n\
    \        }\n    }\n    sort(res);\n    res = res.reverse;\n    foreach(i, x; res)\
    \ \n    {\n        res[i] = [\n            \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n        ][to!long(x) - 1];\n\
    \    }\n    return res;\n}", "{\n    assert (arr.length <= 10);\n    string[]\
    \ res = new string[0];\n    long[] sorted = std.algorithm.sorting.mergeSort(arr);\n\
    \    foreach(elem; sorted) \n    {\n        if (1 <= elem && elem <= 9) \n   \
    \     {\n            res ~= to!string(elem);\n        }\n    }\n    res = res.reverse;\n\
    \    alias reversemap = Map!(string, long, \"One\": 1L, \"Two\": 2L, \"Three\"\
    : 3L, \"Four\": 4L, \"Five\": 5L, \"Six\": 6L, \"Seven\": 7L, \"Eight\": 8L, \"\
    Nine\": 9L);\n    foreach(i, elem; res) \n    {\n        res[i] = reversemap[elem];\n\
    \    }\n    return res;\n}\n/*\n    Write a function that returns the power set\
    \ of the input set. The power set is the set of all subsets.", "{\n    string[]\
    \ res = [];\n    bool[] included = false;\n    foreach(a; arr) \n    {\n     \
    \   if(a >= 1 && a <= 9) \n        {\n            res ~= to!string(a);\n     \
    \       included[a - 1] = true;\n        }\n    }\n    sort(res);\n    res.reverse;\n\
    \    replace(res, 1, \"One\");\n    replace(res, 2, \"Two\");\n    replace(res,\
    \ 3, \"Three\");\n    replace(res, 4, \"Four\");\n    replace(res, 5, \"Five\"\
    );\n    replace(res, 6, \"Six\");\n    replace(res, 7, \"Seven\");\n    replace(res,\
    \ 8, \"Eight\");\n    replace(res, 9, \"Nine\");\n    return res;\n}\n \n/*\n\
    \    You're given a string of the form \"X+Y=Z\".\n    Return a tuple that contains\
    \ X, Y, and Z, with appropriate types.\n    If the string is of the wrong form,\
    \ throw an exception.\n    \n    For example:\n    >>> parseSum(\"2+3=5\")\n \
    \   (2, 3, 5)\n    \n      If the string is of the wrong form, throw an exception:\n\
    \    >>> parseSum(\"2+3=5+7\")\n    Exception\n    >>> parseSum(\"2+3=7=8\")\n\
    \    Exception\n    >>> parseSum(\"2+3=7 \")\n    Exception\n    \n*/\ntuple!(long,\
    \ long, long) parseSum(string s) \n{\n    string[] xyz = split(s, \"+\");\n  \
    \  if(xyz.length != 2)\n        throw new Exception(\"Exception\");\n    string[]\
    \ zx = split(xyz[1], \"=\");\n    if(zx.length != 2)\n        throw new Exception(\"\
    Exception\");\n    return tuple(to!long(xyz[0]), to!long(zx[0]), to!long(zx[1]));\n\
    }\n \n/*\n    You're given a string of the form \"X+Y=Z\",\n    where X, Y, and\
    \ Z are either a single digit or the word \"Double\".\n    Return a tuple that",
  "{\n    return arr.filter!(isInRange(1L, 9L)).sort.reverse.map!num2string;\n}",
  "{\n  int number_names_index = 0;\n  string[] number_names = [\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n \
    \ long[] arr_filtered;\n  string[] arr_reverse;\n  string[] arr_name = new string[arr.length];\n\
    \  long[] new_arr;\n  long[] temp_arr;\n  long[] temp_arr2;\n  long[] temp_arr3;\n\
    \  int i = 0;\n  int j = 0;\n  int k = 0;\n  int m = 0;\n  int i_filter = 0;\n\
    \  int i_reverse = 0;\n  int i_name = 0;\n  long temp = 0;\n  long temp2 = 0;\n\
    \  long temp3 = 0;\n  long temp4 = 0;\n  long temp5 = 0;\n  long temp6 = 0;\n\
    \  long temp7 = 0;\n  long temp8 = 0;\n  long temp9 = 0;\n  long temp10 = 0;\n\
    \  long temp11 = 0;\n  long temp12 = 0;\n  long temp13 = 0;\n  long temp14 = 0;\n\
    \  long temp15 = 0;\n  long temp16 = 0;\n  long temp17 = 0;\n  long temp18 = 0;\n\
    \  long temp19 = 0;\n  long temp20 = 0;\n  long temp21 = 0;\n  long temp22 = 0;\n\
    \  long temp23 = 0;\n  long temp24 = 0;\n  long temp25 = 0;\n  long temp26 = 0;\n\
    \  long temp27 = 0;\n  long temp28 = 0;\n  long temp29 = 0;\n  long temp30 = 0;\n\
    \  long temp31 = 0;\n  long temp32 = 0;\n  long temp33 = 0;\n  long temp34 = 0;\n\
    \  long temp35 = 0;\n  long temp36 = 0;\n  long temp37 = 0;\n  long temp38 = 0;\n\
    \  long temp39 = 0;\n  long temp40 = 0;\n  long temp41 = 0;\n  long temp42 = 0;\n\
    \  long temp43 = 0", "{\n    long[][] work = [arr.dup];\n    auto sorted = work[0].sort!((a,\
    \ b) => (a < b));\n    auto reversed = sorted.reverse;\n    string[] result =\
    \ [];\n    foreach (n; reversed)\n    {\n        result ~= n == 1 ? \"One\" :\n\
    \                 n == 2 ? \"Two\" :\n                 n == 3 ? \"Three\" :\n\
    \                 n == 4 ? \"Four\" :\n                 n == 5 ? \"Five\" :\n\
    \                 n == 6 ? \"Six\" :\n                 n == 7 ? \"Seven\" :\n\
    \                 n == 8 ? \"Eight\" :\n                 n == 9 ? \"Nine\" : \"\
    \";\n    }\n    return result;\n}", "{\n    // PUT YOUR CODE HERE\n    //    real[]\
    \ arr2 = arr.map!(x => to!real(x)).filter!(x => x > 0 && x < 10).sort.reverse;\n\
    \    //    return arr2.map!(x => to!string(x));\n    int[] arr2 = arr.filter!(x\
    \ => x > 0 && x < 10).sort.reverse;\n    return arr2.map!(x => to!string(x));\n\
    \    /*\n    return arr.filter!(x => x > 0 && x < 10).sort.reverse.map!(x => to!string(x));\n\
    \    */\n}", "{\n    string[long] map = [\n    1: \"One\", 2: \"Two\", 3: \"Three\"\
    , 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\
    \n    ];\n    long[] filter_arr = filter!(a => a > 0 && a < 10)(arr);\n    sort(filter_arr);\n\
    \    reverse(filter_arr);\n    return map.values(filter_arr);\n}\n \n/*\n    Given\
    \ a number, return a string in the following form:\n    \"number is odd\", if\
    \ the number is odd,\n    \"number is even\", if the number is even,\n    \"number\
    \ is prime\", if the number is prime,\n    \"number is composite\", if the number\
    \ is composite,\n    \"number is perfect\", if the number is perfect,\n    \"\
    number is deficient\", if the number is deficient.\n    \n    If the number is\
    \ not positive, return \"Input should be positive number\".\n    \n    For example:\n\
    \    >>> is_perfect(28L)\n    \"28 is perfect\"\n    \n      The 1 is neither\
    \ prime nor composite, but all the other options are true:\n    >>> is_perfect(1L)\n\
    \    \"1 is deficient\"\n    \n      Zero is not positive:\n    >>> is_perfect(0L)\n\
    \    \"Input should be positive number\"\n    \n      Negative numbers are not\
    \ positive:\n    >>> is_perfect(-28L)\n    \"Input should be positive number\"\
    \n*/\nstring is_perfect(long n) \n{\n    import std.algorithm.comparison : equal;\n\
    \    import std.math : isPrime, isPerfect;\n    if (n <= 0) \n    {\n        return\
    \ \"Input should be positive number\";\n    }\n    if (n.isEven) \n    {\n   \
    \     return format(\"%s is even\", n);\n    }\n    if (n.isOdd) \n    {\n   \
    \     return format(\"%s is odd\", n);\n    }\n    if (n.isPrime) \n    {\n  \
    \      return format(\"%s is prime\", n);\n    }\n    if (n.isPerfect) \n    {\n\
    \       ", "{\n    assert(arr.length >= 0);\n    int len = 0;\n    foreach(e;\
    \ arr)\n    {\n        if (e >= 1 && e <= 9)\n            len++;\n    }\n    string[]\
    \ ret = new string[len];\n    int i = 0;\n    foreach(e; arr)\n    {\n       \
    \ if (e >= 1 && e <= 9)\n        {\n            string s = to!string(e);\n   \
    \         ret[i] = s;\n            i++;\n        }\n    }\n    ret.sort();\n \
    \   reverse(ret);\n    return ret;\n}", "{\n  string[] result;\n  foreach(l; arr)\n\
    \  {\n    if(l > 0 && l < 10)\n    {\n      switch(l)\n      {\n        case 1:\n\
    \          result ~= \"One\";\n          break;\n        case 2:\n          result\
    \ ~= \"Two\";\n          break;\n        case 3:\n          result ~= \"Three\"\
    ;\n          break;\n        case 4:\n          result ~= \"Four\";\n        \
    \  break;\n        case 5:\n          result ~= \"Five\";\n          break;\n\
    \        case 6:\n          result ~= \"Six\";\n          break;\n        case\
    \ 7:\n          result ~= \"Seven\";\n          break;\n        case 8:\n    \
    \      result ~= \"Eight\";\n          break;\n        case 9:\n          result\
    \ ~= \"Nine\";\n          break;\n      }\n    }\n  }\n  return result.reverse;\n\
    }\n ", "{\n    \n    bool[9] found = void;\n    foreach(e; arr)\n    {\n     \
    \   if(e < 1 || e > 9) continue;\n        found[e - 1] = true;\n    }\n    \n\
    \    arr.sort(a, b => a - b).reversed.map!(a => a.stringof);\n    string[] ret\
    \ = found.map!(a => a ? \"One\" : \"\").array;\n    return ret;\n}", "{\n    if\
    \ (arr.length == 0)\n    {\n        return arr;\n    }\n    else\n    {\n    \
    \    int[] filtered = arr.filter!(x => x > 0 && x < 10).array;\n        int[]\
    \ reversed = filtered.reverse.array;\n        string[] output = new string[reversed.length];\n\
    \        foreach(i, item; reversed)\n        {\n            output[i] = to!string(item);\n\
    \        }\n        return output;\n    }\n}", "{\n    string[] r = new string[arr.length];\n\
    \    int i = 0;\n    foreach(immutable long n;arr)\n    {\n        if(n<1||n>9)\
    \ continue;\n        r[i++] = to!string(n);\n    }\n    std.algorithm.sort(r);\n\
    \    r = r.retro;\n    auto dic = [\"One\",\"Two\",\"Three\",\"Four\",\"Five\"\
    ,\"Six\",\"Seven\",\"Eight\",\"Nine\"];\n    foreach(i,ref s;r)\n    {\n     \
    \   s = dic[to!int(s)-1];\n    }\n    return r;\n}", "{\n    string[] r = [ \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\" ];\n    auto temp = arr.filter!(a => a > 0 && a < 10)().sort();\n \
    \   temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp = temp.array();\n\
    \    temp = temp.array();\n    temp = temp.array();\n    temp =", "{\n  auto unique\
    \ = arr.filter!(x => x > 0 && x < 10).array.unique.sort;\n  unique = unique.reversed;\n\
    \  return unique.map!(a => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"][a - 1L]);\n}", "{\n    string[string] hash\
    \ = [\"One\": \"1\", \"Two\": \"2\", \"Three\": \"3\", \"Four\": \"4\", \"Five\"\
    : \"5\", \"Six\": \"6\", \"Seven\": \"7\", \"Eight\": \"8\", \"Nine\": \"9\"];\n\
    \    string[] nnumbers = [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"One\"];\n    string[] result = [];\n    result =\
    \ arr.sort().map!((x) => hash[nnumbers[x - 1]]).array;\n    return result.sort.reverse;\n\
    }\n```", "{\n    long[] sorted = arr.dup.sort.array;\n    long[] nums = sorted.filter!(a\
    \ => a.between(1L, 9L));\n    string[] numsString = nums.map!(x => \"OneTwoThreeFourFiveSixSevenEightNine\"\
    [x-1..x]).array;\n    return numsString.reverse.array;\n}", "{\n    return arr.sort().reverse().filter!(a\
    \ => a>0 && a<10).map!(a => \"One Two Three Four Five Six Seven Eight Nine\"[(a-1)*5..(a*5-1)]).array;\n\
    }", "{\n    // insert into ret[] the words for each 1,2,3,4,5,6,7,8,9 in this\
    \ order\n    string[] ret = [];", "{\n    string[] result = [];\n    int[] arr_int\
    \ = cast(int[]) arr;\n    arr_int = arr_int.sort().reverse();\n    foreach(int\
    \ i; arr_int)\n    {\n        switch(i)\n        {\n            case 1:\n    \
    \            result ~= \"One\";\n                break;\n            case 2:\n\
    \                result ~= \"Two\";\n                break;\n            case\
    \ 3:\n                result ~= \"Three\";\n                break;\n         \
    \   case 4:\n                result ~= \"Four\";\n                break;\n   \
    \         case 5:\n                result ~= \"Five\";\n                break;\n\
    \            case 6:\n                result ~= \"Six\";\n                break;\n\
    \            case 7:\n                result ~= \"Seven\";\n                break;\n\
    \            case 8:\n                result ~= \"Eight\";\n                break;\n\
    \            case 9:\n                result ~= \"Nine\";\n                break;\n\
    \        }\n    }\n    return result;\n}\n \n/*\n    Given an array of integers\
    \ between 0 and 9 inclusive, add a random number between 0 and 9 inclusive\n \
    \   to the end of the array.\n    If the array is empty, add a single random number\
    \ between 0 and 9 inclusive.\n    \n    For example:\n    >>> random_number([2L,\
    \ 3L, 5L])\n    [2L, 3L, 5L, 4L]\n    >>> random_number([])\n    [8L]\n*/\nlong[]\
    \ random_number(long[] arr)\n{\n    import std.random;\n    arr ~= uniform(0L,\
    \ 9L);\n    return arr;\n}\n \n/*\n    You will be given a string and a dictionary\
    \ of words. \n    The dictionary will contain words of different lengths. \n \
    \   You need to find the longest word in the dictionary which can be made out\
    \ of \n    the letters contained in the string. \n    If no such word can be found,\
    \ return an empty string. \n    The letters contained in the word you return should\
    \ be all lowercase.\n    If there are two or more words of the same length, return\
    \ the first word from the dictionary.\n    \n    For example:\n    >>> longest_word(\"\
    abcdefg\", [\"abc\", \"", "{\n    auto arr2 = arr.filter!(e => (e > 0 && e < 10)).sort;\n\
    \    auto numbers = new string[arr2.length];\n    int i = 0;\n    foreach(e; arr2)\n\
    \    {\n        numbers[i] = e.to!string;\n        i++;\n    }\n    return numbers.reverse;\n\
    }", "{\n    string[] copy = new string[10];\n    copy[1] = \"One\";\n    copy[2]\
    \ = \"Two\";\n    copy[3] = \"Three\";\n    copy[4] = \"Four\";\n    copy[5] =\
    \ \"Five\";\n    copy[6] = \"Six\";\n    copy[7] = \"Seven\";\n    copy[8] = \"\
    Eight\";\n    copy[9] = \"Nine\";\n    string[] ans = new string[arr.length];\n\
    \    sort(arr);\n    foreach(i; 0..arr.length)\n    {\n        foreach(key; 1..10)\n\
    \        {\n            if(arr[i] == key)\n            {\n                ans[i]\
    \ = copy[key];\n            }\n        }\n    }\n    reverse(ans);\n    return\
    \ ans;\n}", "{\n    auto integers = arr.filter!(a => a > 0 && a < 10).sort().reverse();\n\
    \    return integers.map!(a => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"][a-1]);\n}", "{\n  // Check for empty\
    \ array\n  if (arr.length == 0)\n    return arr;\n  \n  // Sort numbers\n  arr.sort();\n\
    \  \n  // Convert numbers to corresponding words\n  string[] res = new string[arr.length];\n\
    \  string[] words = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"];\n  foreach (index, item; arr)\n  {\n \
    \   if (item >= 1 && item <= 9)\n      res[index] = words[item];\n  }\n  \n  //\
    \ Reverse words\n  res.reverse;\n  \n  return res;\n}", "{\n    string[] nums\
    \ = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"};\n    auto arr_result = arr.filter!(a => a < 10 && a > 0).array;\n\
    \    std.algorithm.sort(arr_result);\n    std.algorithm.reverse(arr_result);\n\
    \    return arr_result.map!(n => nums[n - 1]);\n}", "{\n    import std.algorithm;\n\
    \    import std.array;\n    int[] nums = arr.filter!( a => (a >= 1) && (a <= 9)\
    \ ).sort!( \"a > b\" ).reverse.array;\n    return nums.map!( a => [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][a - 1] ).array;\n}\n/*\n      If the array is empty, return an empty array:\n\
    \    >>> by_length([])\n    []\n*/", "{\n    auto tmp = arr\n                .filter!(a\
    \ => a>0 && a<10)\n                .sort\n                .reverse;\n    return\
    \ tmp.map!(toString);\n}", "{\n    arr.sort;\n    arr.reverse;\n    string[] result;\n\
    \    foreach(a; arr)\n    {\n        if(a == 1)\n        {\n            result\
    \ ~= \"One\";\n        }\n        else if(a == 2)\n        {\n            result\
    \ ~= \"Two\";\n        }\n        else if(a == 3)\n        {\n            result\
    \ ~= \"Three\";\n        }\n        else if(a == 4)\n        {\n            result\
    \ ~= \"Four\";\n        }\n        else if(a == 5)\n        {\n            result\
    \ ~= \"Five\";\n        }\n        else if(a == 6)\n        {\n            result\
    \ ~= \"Six\";\n        }\n        else if(a == 7)\n        {\n            result\
    \ ~= \"Seven\";\n        }\n        else if(a == 8)\n        {\n            result\
    \ ~= \"Eight\";\n        }\n        else if(a == 9)\n        {\n            result\
    \ ~= \"Nine\";\n        }\n        else\n        {\n            continue;\n  \
    \      }\n    }\n    return result;\n}\n/*", "{\n    // write your code here\n\
    \    return arr.filter!(i => i > 0 && i < 10).sort.reverse.map!(i => [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][i - 1]).array;\n}", "{\n  return arr.filter!(a => a > 0 && a < 10)\n    .sort!(a\
    \ => a)\n    .reverse\n    .map!(a => [\"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][a - 1]);\n}", "{\n     if\
    \ (arr.length == 0)\n     {\n          return arr;\n     }\n     \n     auto list\
    \ =  arr.filter!(i => i > 0 && i < 10).sort().map!(i => (i, string(i))).sort!((a,\
    \ b) => a[0] > b[0]).map!(x => x[1]).array();\n     return list;\n}", "{\n   \
    \ alias numbers = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    alias numbers_tuple = tuple(numbers);\n\
    \    return arr.filter!(x => x > 0 && x < 10).sort.map!(x => numbers_tuple[x]).reverse;\n\
    }", "{\n    return typeof(by_length).parameters;\n}", "{\n   \n    string[] result;\n\
    \    string[] numbers = [\n        \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    ];\n    if (arr.length != 0)\n\
    \    {\n        // sorts arr;\n        sort(arr);\n        // reverses arr\n \
    \       arr = arr.dup.reverse;\n        // removes any out of range integer\n\
    \        for (int i = 0; i < arr.length; i++)\n        {\n            if (arr[i]\
    \ > 9 || arr[i] < 1)\n            {\n                arr.remove(i);\n        \
    \    }\n        }\n        result = new string[arr.length];\n        // replaces\
    \ all integers with their respective names\n        for (int i = 0; i < arr.length;\
    \ i++)\n        {\n            result[i] = numbers[cast(int)arr[i] - 1];\n   \
    \     }\n    }\n    else\n    {\n        result = [];\n    }\n    return result;\n\
    }\n/*", "{\n    if (arr.length == 0)\n    {\n        return [];\n    }\n    auto\
    \ sorted_arr = arr.sort();\n    auto result = [];\n    foreach (val; sorted_arr)\n\
    \    {\n        if (val >= 1 && val <= 9)\n        {\n            int index =\
    \ val - 1;\n            result ~= [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"][index];\n        }\n    }\n    return\
    \ result.reverse;\n}", "{\n    string[] to_return = null;\n    auto x = arr.filter!(a\
    \ => a >= 1 && a <= 9);\n    x.sort();\n    to_return = x.map!(to_number).reverse.map!(to_name);\n\
    \    return to_return;\n}\nlong to_number(long x) \n{\n    return x;\n}\nstring\
    \ to_name(long number) \n{\n    string to_return = \"\";\n    switch (number)\
    \ \n    {\n        case 1:\n            to_return = \"One\";\n            break;\n\
    \        case 2:\n            to_return = \"Two\";\n            break;\n     \
    \   case 3:\n            to_return = \"Three\";\n            break;\n        case\
    \ 4:\n            to_return = \"Four\";\n            break;\n        case 5:\n\
    \            to_return = \"Five\";\n            break;\n        case 6:\n    \
    \        to_return = \"Six\";\n            break;\n        case 7:\n         \
    \   to_return = \"Seven\";\n            break;\n        case 8:\n            to_return\
    \ = \"Eight\";\n            break;\n        case 9:\n            to_return = \"\
    Nine\";\n            break;\n    }\n    return to_return;\n}\nstring[] by_length(long[]\
    \ arr)\n{\n    long[][] buckets = new long[9][];\n    foreach (idx, n; arr) {\n\
    \        if (n > 0 && n <= 9) {\n            buckets[n - 1].push(n);\n       \
    \ }\n    }\n    string[] result = [];\n    foreach (bucket; buckets) {\n     \
    \   result ~= bucket.map!(x => \"One Two Three Four Five Six Seven Eight Nine\"\
    [2 * x - 2 .. 2 * x]);\n    }\n    return result.join;\n}\nstring[] by_length(long[]\
    \ arr)\n{\n    import std.algorithm : count;\n    string[] result = [];\n    foreach\
    \ (n; 1 .. 10) {\n        auto c = arr.count(n);\n        if (c > 0) {\n     \
    \       result ~= repeat(\"One Two Three Four Five Six Seven Eight Nine\"[2 *\
    \ n -", "{ \n    long[][] res = new long[9][];\n    foreach(var i; arr)\n    {\n\
    \        if(i > 0 && i < 10)\n        {\n            res[i-1] ~= i;\n        }\n\
    \    }\n    foreach(i,e; res)\n    {\n        e.sort();\n    }\n    res.reverse();\n\
    \    string[] temp = new string[0];\n    foreach(i,e; res)\n    {\n        foreach(var\
    \ k; e)\n        {\n            temp ~= to!string(i+1);\n        }\n    }\n  \
    \  return temp;\n}\n \n void main()\n {\n     writeln(by_length([2L, 1L, 1L, 4L,\
    \ 5L, 8L, 2L, 3L]));\n     writeln(by_length([]));\n     writeln(by_length([1L,\
    \ -1L, 55L]));\n }", "{\n    //\n    // 1) Sort the array\n    // 2) Reverse the\
    \ array\n    // 3) Convert the array to a string array\n    // 4) Return the string\
    \ array\n    //", "{\n    enum Digits = \"One Two Three Four Five Six Seven Eight\
    \ Nine\";\n    auto result = Digits.split;\n    result.sort!((a, b) => a.length\
    \ > b.length);\n    result.reverse;\n    auto dict = result.assocArray;\n    return\
    \ arr.retro.map!(e => (dict.byKey.get(e) ?? \"\").idup).filter!(a => a.length).array;\n\
    }", "{\n  // TODO: Implement\n  return array();\n}\n/*\n    Given an array of\
    \ arrays of integers, sort the integers that are between 1 and 9 inclusive,\n\
    \    reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\".", "{\n    return arr.filter!(a => 1 <= a && a <=\
    \ 9).sort().reverse().map!(a => [\n        \"One\",\n        \"Two\",\n      \
    \  \"Three\",\n        \"Four\",\n        \"Five\",\n        \"Six\",\n      \
    \  \"Seven\",\n        \"Eight\",\n        \"Nine\"\n    ][a - 1]);\n}", "{\n\
    \    if (arr.length == 0) \n    {\n        return arr;\n    }\n    long[] nums\
    \ = arr.filter!(a => a > 0 && a < 10)();\n    immutable ints = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9];\n    immutable strings = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    return nums.sort().reverse().map!(a\
    \ => strings[a - 1])();\n}", "{\n    return arr.\n        filter!(x => x > 0 &&\
    \ x < 10).\n        sort!(x => x).\n        reverse.\n        map!(to!string).\n\
    \        map!(x => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"][to!int(x)-1]).\n        array;\n}", "{\n   \
    \ arr = arr.filter!(a => (1 <= a && a <= 9)).array;\n    string[] strings = new\
    \ string[arr.length];\n    int i = 0;\n    foreach(e; arr)\n    {\n        switch(e)\n\
    \        {\n            case 1: strings[i] = \"One\"; break;\n            case\
    \ 2: strings[i] = \"Two\"; break;\n            case 3: strings[i] = \"Three\"\
    ; break;\n            case 4: strings[i] = \"Four\"; break;\n            case\
    \ 5: strings[i] = \"Five\"; break;\n            case 6: strings[i] = \"Six\";\
    \ break;\n            case 7: strings[i] = \"Seven\"; break;\n            case\
    \ 8: strings[i] = \"Eight\"; break;\n            case 9: strings[i] = \"Nine\"\
    ; break;\n        }\n        i++;\n    }\n    return strings.reverse;\n}", "{\n\
    \    string[] result;\n    long[] t = [];\n    int size = arr.length;\n    int\
    \ i = 0;\n    int j = 0;\n    while(i < size)\n    {\n        if(arr[i] >= 1 &&\
    \ arr[i] <= 9)\n        {\n            t ~= arr[i];\n        }\n        i++;\n\
    \    }\n    t.sort();\n    result = t.map!(a => to!string(a));\n    while(j <\
    \ result.length)\n    {\n        if(result[j] == \"1\")\n        {\n         \
    \   result[j] = \"One\";\n        }\n        else if(result[j] == \"2\")\n   \
    \     {\n            result[j] = \"Two\";\n        }\n        else if(result[j]\
    \ == \"3\")\n        {\n            result[j] = \"Three\";\n        }\n      \
    \  else if(result[j] == \"4\")\n        {\n            result[j] = \"Four\";\n\
    \        }\n        else if(result[j] == \"5\")\n        {\n            result[j]\
    \ = \"Five\";\n        }\n        else if(result[j] == \"6\")\n        {\n   \
    \         result[j] = \"Six\";\n        }\n        else if(result[j] == \"7\"\
    )\n        {\n            result[j] = \"Seven\";\n        }\n        else if(result[j]\
    \ == \"8\")\n        {\n            result[j] = \"Eight\";\n        }\n      \
    \  else if(result[j] == \"9\")\n        {\n            result[j] = \"Nine\";\n\
    \        }\n        j++;\n    }\n    result.reverse;\n    return result;\n}",
  "{\n    enum S = Tuple!(string);\n    auto lst = arr.map!(a => S(a > 0 && a < 10\
    \ ? a.to!string : \"\").expand)\n        .sort!((a, b) => a[0] > b[0])\n     \
    \   .map!(a => a[0])\n        .array;\n    lst.reverse;\n    lst = lst.map!(a\
    \ => a == \"1\" ? \"One\" : a == \"2\" ? \"Two\" : a == \"3\" ? \"Three\" :\n\
    \    a == \"4\" ? \"Four\" : a == \"5\" ? \"Five\" : a == \"6\" ? \"Six\" : a\
    \ == \"7\" ? \"Seven\" :\n    a == \"8\" ? \"Eight\" : a == \"9\" ? \"Nine\" :\
    \ a);\n    return lst;\n}", "{\n    auto init = [](int x) {\n        switch(x)\
    \ {\n            case 1: return \"One\";\n            case 2: return \"Two\";\n\
    \            case 3: return \"Three\";\n            case 4: return \"Four\";\n\
    \            case 5: return \"Five\";\n            case 6: return \"Six\";\n \
    \           case 7: return \"Seven\";\n            case 8: return \"Eight\";\n\
    \            case 9: return \"Nine\";\n            default: return \"\";\n   \
    \     }\n    };\n    auto is_valid = [&](long x) {\n        if (x > 9) return\
    \ false;\n        if (x < 1) return false;\n        return true;\n    };\n   \
    \ arr.retain!is_valid;\n    std.algorithm.sort!((a, b) => a > b)(arr);\n    arr.reverse;\n\
    \    return arr.map!init.array;\n}", "{\n    string[] res = arr.filter!(a => a\
    \ > 0 && a < 10).sort.map!((a => to!string(a))).reverse.map!(a => \n    {\n  \
    \      import std.format;\n        string str = \"\";\n        //writefln(\"%s\"\
    , a);\n        switch(a)\n        {\n            case \"1\":\n               \
    \ str = \"One\";\n                break;\n            case \"2\":\n          \
    \      str = \"Two\";\n                break;\n            case \"3\":\n     \
    \           str = \"Three\";\n                break;\n            case \"4\":\n\
    \                str = \"Four\";\n                break;\n            case \"\
    5\":\n                str = \"Five\";\n                break;\n            case\
    \ \"6\":\n                str = \"Six\";\n                break;\n           \
    \ case \"7\":\n                str = \"Seven\";\n                break;\n    \
    \        case \"8\":\n                str = \"Eight\";\n                break;\n\
    \            case \"9\":\n                str = \"Nine\";\n                break;\n\
    \        }\n        return str;\n    });\n    return res;\n}", "{\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n\
    \    import std.stdio;\n    import std.string;\n    import std.typecons;\n   \
    \ import std.math;\n    auto names = [ \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" ];\n    auto res = [];\n \
    \   string i;\n    foreach(num; arr)\n    {\n        if(num < 1 || num > 9)\n\
    \            continue;\n        i = to!string(num);\n        res ~= names[to!int(i)-1];\n\
    \    }\n    res = res.sort.array;\n    res = res.retro;\n    return res;\n}",
  "{\n    auto result = appender!(string[])();\n   \n    arr.sort!((a, b) => a < b);\n\
    \    arr.filter!(a => 1 <= a && a <= 9).array.reverse();\n    \n    foreach(elem;\
    \ arr)\n    {\n        switch(elem)\n        {\n            case 1: result.put(\"\
    One\"); break;\n            case 2: result.put(\"Two\"); break;\n            case\
    \ 3: result.put(\"Three\"); break;\n            case 4: result.put(\"Four\");\
    \ break;\n            case 5: result.put(\"Five\"); break;\n            case 6:\
    \ result.put(\"Six\"); break;\n            case 7: result.put(\"Seven\"); break;\n\
    \            case 8: result.put(\"Eight\"); break;\n            case 9: result.put(\"\
    Nine\"); break;\n        }\n    }\n    \n    return result.data;\n}", "{\n   \
    \ auto arrTemp = map!(to!string)(arr.filter!(isValid)(arr));\n    arrTemp.sort;\n\
    \    arrTemp.reverse;\n    return map!(toWord)(arrTemp);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
