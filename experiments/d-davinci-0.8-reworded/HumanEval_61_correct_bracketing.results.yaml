name: HumanEval_61_correct_bracketing
language: d
results:
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int balance = 0;\n    foreach(char c; brackets) {\n        if (c == '(') balance++;\n\
    \        else if (c == ')') balance--;\n        if (balance < 0) return false;\n\
    \    }\n    return balance == 0;\n}\n/*\n    Write a function that will take a\
    \ string of brackets (\"(\" and \")\") and return\n    the number of missing brackets.\n\
    \   \n    >>> num_missing_brackets(\"(\")\n    1\n    >>> num_missing_brackets(\"\
    ()\")\n    0\n    >>> num_missing_brackets(\"(()())\")\n    0\n    >>> num_missing_brackets(\"\
    )(()\")\n    2\n*/\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n\
    \    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    int count=0;\n\tforeach(ch;brackets)\n\t{\n\t\tif(ch=='(')\n\t\t\tcount++;\n\t\
    \telse if(ch==')')\n\t\t\tcount--;\n\t\tif(count<0)\n\t\t\treturn false;\n\t}\n\
    \treturn count==0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   uint count = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\n/*\n    return true if every opening bracket has a corresponding closing bracket.\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplz55hkbg.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplz55hkbg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int counter = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            counter++;\n        else if(c == ')')\n            counter--;\n \
    \       if(counter < 0)\n            return false;\n    }\n    return counter\
    \ == 0;\n}\n/*\n  take a list of numbers and return a tuple of two lists where\
    \ the first list\n  contains all the even numbers and the second list contains\
    \ all the odd numbers.\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5tylspih.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5tylspih.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int l = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n     \
    \       l++;\n        else\n            l--;\n        if (l < 0)\n           \
    \ return false;\n    }\n    return l == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto stack = new Stack!int();\n    foreach(c; brackets)\n    {\n        switch(c)\n\
    \        {\n            case '(':\n                stack.push(1);\n          \
    \      break;\n            case ')':\n                if(stack.empty) return false;\n\
    \                stack.pop();\n                break;\n        }\n    }\n    return\
    \ stack.empty;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n\
    \    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz5h4t299.d(19): Error: template instance `Stack!int` template\
    \ `Stack` is not defined\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmpz5h4t299.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto left_count=0, right_count=0;\n    foreach(bracket; brackets) {\n    \
    \    if(bracket == '(')\n            left_count++;\n        else\n           \
    \ right_count++;\n        if(right_count > left_count)\n            return false;\n\
    \    }\n    return right_count == left_count;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   if(brackets.length == 0)\n    {\n        return true;\n    }\n    if(brackets.length\
    \ == 1)\n    {\n        return false;\n    }\n    int n_left = 0;\n    int n_right\
    \ = 0;\n    foreach(char s; brackets)\n    {\n        if(s == \"(\")\n       \
    \ {\n            n_left++;\n        }\n        else if(s == \")\")\n        {\n\
    \            n_right++;\n        }\n        if(n_right > n_left)\n        {\n\
    \            return false;\n        }\n    }\n    if(n_left != n_right)\n    {\n\
    \        return false;\n    }\n    return true;\n}\n/*\n If a string matches a\
    \ pattern of the form \"***\\***\", return true.\n    Otherwise, return false.\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg71ogkqm.d(50): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg71ogkqm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int balance = 0;\n    int i = 0;\n    foreach(char bracket; brackets)\n  \
    \  {\n        if(bracket == '(') balance++;\n        else if(bracket == ')') balance--;\n\
    \        else throw new Exception(\"brackets contains non-bracket characters\"\
    );\n        \n        if(balance < 0) return false;\n        i++;\n    }\n   \
    \ return balance == 0;\n}\n// test\nunittest\n{\n    assert(correct_bracketing(\"\
    ()\"));\n    assert(correct_bracketing(\"(()())\"));\n    assert(!correct_bracketing(\"\
    (\"));\n    assert(!correct_bracketing(\")(()\"));\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{ \n\
    \    int balance = 0; \n    for (immutable char c : brackets) { \n        if (c\
    \ == '(') \n            balance++; \n        else if (c == ')') \n           \
    \ balance--; \n        if (balance < 0) \n            return false; \n    } \n\
    \    return balance == 0; \n} \nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmkwzur9f.d(20): Error: semicolon expected, not `:`\\n/tmp/tmpmkwzur9f.d(20):\
    \ Error: expression expected, not `:`\\n/tmp/tmpmkwzur9f.d(20): Error: found `brackets`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpmkwzur9f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   scope(exit) writeln(\"!\");\n    int cnt = 0;\n    for (immutable char c :\
    \ brackets)\n    {\n        if (c == '(')\n            cnt++;\n        else if\
    \ (c == ')')\n            cnt--;\n        if (cnt < 0)\n            return false;\n\
    \    }\n    return cnt == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuojntudm.d(21): Error: semicolon expected, not `:`\\n/tmp/tmpuojntudm.d(21):\
    \ Error: expression expected, not `:`\\n/tmp/tmpuojntudm.d(21): Error: found `brackets`\
    \ when expecting `;` following `for` condition\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpuojntudm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int num = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n\
    \            num++;\n        else if(c == ')')\n            num--;\n        if(num\
    \ < 0)\n            return false;\n    }\n    return num == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(ch; brackets) \n    {\n        if (ch == '(')\
    \ \n        {\n            count++;\n        } \n        else if (ch == ')') \n\
    \        {\n            count--;\n        }\n        if (count < 0) \n       \
    \ {\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i < n; i++)\n\
    \    {\n        if (brackets[i] == '(')\n        {\n            count++;\n   \
    \     }\n        else\n        {\n            count--;\n        }\n        if\
    \ (count < 0)\n        {\n            return false;\n        }\n    }\n    return\
    \ count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n \
    \   assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n\
    \    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpube6h100.d(19): Error: cannot implicitly convert expression `brackets.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpube6h100.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n  \
    \          count++;\n        else if(c == ')')\n            count--;\n       \
    \ if(count < 0)\n            return false;\n    }\n    return count == 0;\n}\n\
    /*\n Reorder the elements of the array such that they are in the order of their\
    \ parities.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpueix4_02.d(31): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpueix4_02.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int length = brackets.length;\n    int count = 0;\n    for (int i = 0; i <\
    \ length; i++)\n    {\n        if (brackets[i] == '(')\n        {\n          \
    \  count += 1;\n        }\n        else\n        {\n            count -= 1;\n\
    \        }\n        if (count < 0) return false;\n    }\n    return count == 0;\n\
    }\n// /*\n//    rnd_select takes an array and a number of elements.\n//    It\
    \ returns a new array that contains elements chosen\n//    randomly from the original\
    \ array.\n//    */\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n\
    \    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa965ml7h.d(19): Error: cannot implicitly convert expression `brackets.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpa965ml7h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   return brackets.count('(') == brackets.count(')');\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps3mcjk1r.d(19): Error: no property `count` for type `string`\\\
    n/tmp/tmps3mcjk1r.d(19): Error: no property `count` for type `string`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps3mcjk1r.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n\
    \    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbdq5fz15.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e8d]\\n??:? void tmpbdq5fz15.__unittest_L21_C1()\
    \ [0x427ada]\\n??:? void tmpbdq5fz15.__modtest() [0x427c0c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbb3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa46]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbd9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430088]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb65]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa1d]\\n??:? runModuleUnitTests [0x42b989]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428263]\\n??:? _d_run_main [0x4281ce]\\n??:? main [0x427c1f]\\\
    n??:? __libc_start_main [0x13931554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    int size = brackets.length;\n    foreach(i; 0..size)\n\
    \    {\n        if(brackets[i] == '(')\n        {\n            count++;\n    \
    \    }\n        else if(brackets[i] == ')')\n        {\n            count--;\n\
    \        }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbj2t4f4u.d(20): Error: cannot implicitly convert expression `brackets.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpbj2t4f4u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
    ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
    )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   //*\n    int i;\n    int sum = 0;\n    foreach(ch;brackets)\n    {\n     \
    \   i++;\n        if(ch == '(')\n            sum++;\n        else if(ch == ')')\n\
    \            sum--;\n        if(sum < 0)\n            return false;\n    }\n \
    \   if(sum != 0)\n        return false;\n    return true;\n    //*/\n    //return\
    \ ((brackets.count('(') == brackets.count(')')) \n    //        && (brackets.count('(')\
    \ == brackets.count(')') + brackets.count('(') ));\n}\n/*\n    return true if\
    \ parentheses are correctly balanced in the string.\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp48uy8xgj.d(39): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48uy8xgj.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
