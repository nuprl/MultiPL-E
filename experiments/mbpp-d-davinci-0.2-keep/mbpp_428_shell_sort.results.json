{
  "name": "mbpp_428_shell_sort",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; gap..my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1..gap)\n\t\t{\n\t\t\tforeach(j; i..my_list.length)\n\t\t\t{\n\t\t\t\tlong temp = my_list[j];\n\t\t\t\tlong k = j;\n\t\t\t\twhile(k >= gap && my_list[k - gap] > temp)\n\t\t\t\t{\n\t\t\t\t\tmy_list[k] = my_list[k - gap];\n\t\t\t\t\tk -= gap;\n\t\t\t\t}\n\t\t\t\tmy_list[k] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpz6b4fabq.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpz6b4fabq.__unittest_L30_C1() [0x428164]\n??:? void tmpz6b4fabq.__modtest() [0x4283cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b562]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b539]\n??:? runModuleUnitTests [0x42c4a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; gap..my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tauto n = my_list.length;\n\tauto gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (auto i = gap; i < n; i += 1) \n\t\t{\n\t\t\tauto temp = my_list[i];\n\t\t\tauto j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4j9u3u84.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4j9u3u84.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j9u3u84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j;\n\t\t\tfor(j = i; j >= gap && my_list[j - gap] > temp; j -= gap) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach (gap; gaps) \n\t{\n\t\tforeach (i; gap .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach (gap; gaps) \n\t{\n\t\tforeach (i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4j9u3u84.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4j9u3u84.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j9u3u84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j;\n\t\t\tfor(j = i; j >= gap && my_list[j - gap] > temp; j -= gap) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint i, j, k, h, m = my_list.length;\n\tlong temp;\n\tfor (h = m / 2; h > 0; h /= 2) \n\t{\n\t\tfor (i = h; i < m; i++) \n\t\t{\n\t\t\ttemp = my_list[i];\n\t\t\tfor (j = i; j >= h; j -= h) \n\t\t\t{\n\t\t\t\tif (temp < my_list[j - h]) \n\t\t\t\t{\n\t\t\t\t\tmy_list[j] = my_list[j - h];\n\t\t\t\t} \n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp7a9tzs8g.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7a9tzs8g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1..my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1..my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint gap = my_list.length / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tint j = i;\n\t\t\tint temp = my_list[i];\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj = j - gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap = gap / 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmp1n81a38d.d(10): Error: cannot implicitly convert expression `my_list.length / 2LU` of type `ulong` to `int`\n/tmp/tmp1n81a38d.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1n81a38d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint gap = my_list.length / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmpxhjoin1k.d(10): Error: cannot implicitly convert expression `my_list.length / 2LU` of type `ulong` to `int`\n/tmp/tmpxhjoin1k.d(15): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxhjoin1k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor(long i = gap; i < my_list.length; i++)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n/2;\n\twhile(gap > 0) \n\t{\n\t\tfor(int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile(j >= gap && my_list[j-gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j-gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmp68lkgko6.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp68lkgko6.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68lkgko6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint len = my_list.length;\n\tint gap = len / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < len; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmp2yvmeteg.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp2yvmeteg.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2yvmeteg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j;\n\t\t\tfor(j = i; j >= gap && my_list[j - gap] > temp; j -= gap) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1..my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; gap..my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n/2;\n\twhile(gap > 0)\n\t{\n\t\tfor(int i = gap; i < n; i++)\n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile(j >= gap && my_list[j-gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j-gap];\n\t\t\t\tj = j - gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap = gap/2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmp4e4dsd3o.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4e4dsd3o.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4e4dsd3o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint gap = my_list.length / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tint j = i;\n\t\t\tlong temp = my_list[i];\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmpservvp9g.d(10): Error: cannot implicitly convert expression `my_list.length / 2LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpservvp9g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach (gap; gaps) \n\t{\n\t\tfor (long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j;\n\t\t\tfor(j = i; j >= gap && my_list[j - gap] > temp; j -= gap) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 0 .. my_list.length - gap) \n\t\t{\n\t\t\tlong j = i;\n\t\t\twhile(j >= 0 && my_list[j] > my_list[j + gap]) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j] ^ my_list[j + gap];\n\t\t\t\tmy_list[j + gap] = my_list[j] ^ my_list[j + gap];\n\t\t\t\tmy_list[j] = my_list[j] ^ my_list[j + gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp6kjp14di.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4287a6]\n??:? long[] tmp6kjp14di.shell_sort(long[]) [0x427f44]\n??:? void tmp6kjp14di.__unittest_L27_C1() [0x42816a]\n??:? void tmp6kjp14di.__modtest() [0x428474]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c777]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43079d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c4c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430729]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e1]\n??:? runModuleUnitTests [0x42c54d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint i, j, k, h;\n\tlong temp;\n\tint n = my_list.length;\n\tint[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(int gap; gaps) \n\t{\n\t\tfor (i = gap; i < n; i++) \n\t\t{\n\t\t\ttemp = my_list[i];\n\t\t\tfor (j = i; j >= gap && my_list[j - gap] > temp; j -= gap) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmphffozu0n.d(12): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphffozu0n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj = j - gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor (long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j;\n\t\t\tfor (j = i; j >= gap && my_list[j - gap] > temp; j -= gap) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor (long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j;\n\t\t\tfor (j = i; j >= gap && my_list[j - gap] > temp; j -= gap) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tauto n = my_list.length;\n\tauto gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (auto i = gap; i < n; i += 1) \n\t\t{\n\t\t\tauto temp = my_list[i];\n\t\t\tauto j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1 .. my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor(long i = gap; i < my_list.length; i++)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor (long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor(long i = gap; i < my_list.length; i++)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor(long i = gap; i < my_list.length; i++)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4j9u3u84.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4j9u3u84.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j9u3u84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor(long i = gap; i < my_list.length; i++)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j;\n\t\t\tfor(j = i; j >= gap && my_list[j - gap] > temp; j -= gap) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4j9u3u84.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4j9u3u84.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j9u3u84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1..my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j;\n\t\t\tfor(j = i; j >= gap && my_list[j - gap] > temp; j -= gap) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4j9u3u84.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4j9u3u84.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j9u3u84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach (gap; gaps) \n\t{\n\t\tforeach (i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint gap = my_list.length / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmpxhjoin1k.d(10): Error: cannot implicitly convert expression `my_list.length / 2LU` of type `ulong` to `int`\n/tmp/tmpxhjoin1k.d(15): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxhjoin1k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4j9u3u84.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4j9u3u84.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j9u3u84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint gap = my_list.length / 2;\n\twhile(gap > 0) \n\t{\n\t\tfor(int i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tint j = i;\n\t\t\tlong temp = my_list[i];\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmppk7onve8.d(10): Error: cannot implicitly convert expression `my_list.length / 2LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppk7onve8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor(long i = gap; i < my_list.length; i++)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1..my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n/2;\n\twhile(gap > 0) \n\t{\n\t\tfor(int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile(j >= gap && my_list[j-gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j-gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmp68lkgko6.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp68lkgko6.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68lkgko6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. gap) \n\t\t{\n\t\t\tforeach(j; i .. my_list.length) \n\t\t\t{\n\t\t\t\tlong temp = my_list[j];\n\t\t\t\tlong k = j;\n\t\t\t\twhile(k >= gap && my_list[k - gap] > temp) \n\t\t\t\t{\n\t\t\t\t\tmy_list[k] = my_list[k - gap];\n\t\t\t\t\tk -= gap;\n\t\t\t\t}\n\t\t\t\tmy_list[k] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmlryzhdp.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpmlryzhdp.__unittest_L30_C1() [0x428164]\n??:? void tmpmlryzhdp.__modtest() [0x4283cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b562]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b539]\n??:? runModuleUnitTests [0x42c4a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1 .. my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. gap) \n\t\t{\n\t\t\tforeach(j; i .. my_list.length) \n\t\t\t{\n\t\t\t\tlong temp = my_list[j];\n\t\t\t\tlong k = j;\n\t\t\t\twhile(k >= gap && my_list[k - gap] > temp) \n\t\t\t\t{\n\t\t\t\t\tmy_list[k] = my_list[k - gap];\n\t\t\t\t\tk -= gap;\n\t\t\t\t}\n\t\t\t\tmy_list[k] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmlryzhdp.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpmlryzhdp.__unittest_L30_C1() [0x428164]\n??:? void tmpmlryzhdp.__modtest() [0x4283cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b562]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b539]\n??:? runModuleUnitTests [0x42c4a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint len = my_list.length;\n\tint gap = len / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < len; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmp2yvmeteg.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp2yvmeteg.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2yvmeteg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor (long i = gap; i < my_list.length; i += 1)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4j9u3u84.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4j9u3u84.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j9u3u84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint gap = my_list.length / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmpxhjoin1k.d(10): Error: cannot implicitly convert expression `my_list.length / 2LU` of type `ulong` to `int`\n/tmp/tmpxhjoin1k.d(15): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxhjoin1k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. gap) \n\t\t{\n\t\t\tforeach(j; i .. my_list.length) \n\t\t\t{\n\t\t\t\tlong temp = my_list[j];\n\t\t\t\tlong k = j;\n\t\t\t\twhile(k >= gap && my_list[k - gap] > temp) \n\t\t\t\t{\n\t\t\t\t\tmy_list[k] = my_list[k - gap];\n\t\t\t\t\tk -= gap;\n\t\t\t\t}\n\t\t\t\tmy_list[k] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmlryzhdp.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpmlryzhdp.__unittest_L30_C1() [0x428164]\n??:? void tmpmlryzhdp.__modtest() [0x4283cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b562]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b539]\n??:? runModuleUnitTests [0x42c4a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gap_list = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gap_list)\n\t{\n\t\tforeach(i; 0 .. my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj = j - gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor (long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j;\n\t\t\tfor (j = i; j >= gap && my_list[j - gap] > temp; j -= gap) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmp2c69zgtt.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp2c69zgtt.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2c69zgtt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; gap..my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1 .. my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4j9u3u84.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4j9u3u84.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j9u3u84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1..gap) \n\t\t{\n\t\t\tforeach(j; i..my_list.length) \n\t\t\t{\n\t\t\t\tlong temp = my_list[j];\n\t\t\t\tlong k = j;\n\t\t\t\twhile(k >= gap && my_list[k - gap] > temp) \n\t\t\t\t{\n\t\t\t\t\tmy_list[k] = my_list[k - gap];\n\t\t\t\t\tk -= gap;\n\t\t\t\t}\n\t\t\t\tmy_list[k] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8zttvhwh.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmp8zttvhwh.__unittest_L30_C1() [0x428164]\n??:? void tmp8zttvhwh.__modtest() [0x4283cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b562]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b539]\n??:? runModuleUnitTests [0x42c4a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 0 .. my_list.length - gap) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpbnnzggj8.d(15): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286ce]\n??:? long[] tmpbnnzggj8.shell_sort(long[]) [0x427efe]\n??:? void tmpbnnzggj8.__unittest_L27_C1() [0x428096]\n??:? void tmpbnnzggj8.__modtest() [0x4283a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c69f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b532]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b74]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430651]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b509]\n??:? runModuleUnitTests [0x42c475]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4j9u3u84.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4j9u3u84.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j9u3u84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj = j - gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j;\n\t\t\tfor(j = i; j >= gap && my_list[j - gap] > temp; j -= gap) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor(long i = gap; i < my_list.length; i++)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j;\n\t\t\tfor(j = i; j >= gap && my_list[j - gap] > temp; j -= gap)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor (long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j;\n\t\t\tfor (j = i; j >= gap and my_list[j - gap] > temp; j -= gap) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmpbam34pof.d(17): Error: found `and` when expecting `;` following `for` condition\n/tmp/tmpbam34pof.d(17): Error: found `;` when expecting `)`\n/tmp/tmpbam34pof.d(17): Error: found `)` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbam34pof.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach (gap; gaps) \n\t{\n\t\tforeach (i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; gap..my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4j9u3u84.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4j9u3u84.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j9u3u84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile((j >= gap) && (my_list[j - gap] > temp)) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4j9u3u84.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4j9u3u84.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j9u3u84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 0 .. my_list.length - gap) \n\t\t{\n\t\t\tlong j = i + gap;\n\t\t\tlong temp = my_list[j];\n\t\t\twhile(j >= gap && temp < my_list[j - gap]) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpzfowga4d.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4286d6]\n??:? long[] tmpzfowga4d.shell_sort(long[]) [0x427f0a]\n??:? void tmpzfowga4d.__unittest_L27_C1() [0x42809e]\n??:? void tmpzfowga4d.__modtest() [0x4283a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b53a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430b7c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430659]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b511]\n??:? runModuleUnitTests [0x42c47d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1..my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj = j - gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. gap) \n\t\t{\n\t\t\tforeach(j; i .. my_list.length) \n\t\t\t{\n\t\t\t\tlong temp = my_list[j];\n\t\t\t\tlong k = j;\n\t\t\t\twhile(k >= gap && my_list[k - gap] > temp) \n\t\t\t\t{\n\t\t\t\t\tmy_list[k] = my_list[k - gap];\n\t\t\t\t\tk -= gap;\n\t\t\t\t}\n\t\t\t\tmy_list[k] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmlryzhdp.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpmlryzhdp.__unittest_L30_C1() [0x428164]\n??:? void tmpmlryzhdp.__modtest() [0x4283cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b562]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b539]\n??:? runModuleUnitTests [0x42c4a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1 .. my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach (gap; gaps) \n\t{\n\t\tforeach (i; 0 .. my_list.length - gap) \n\t\t{\n\t\t\tlong j = i;\n\t\t\twhile (j >= 0 && my_list[j] > my_list[j + gap]) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j] ^ my_list[j + gap];\n\t\t\t\tmy_list[j + gap] = my_list[j] ^ my_list[j + gap];\n\t\t\t\tmy_list[j] = my_list[j] ^ my_list[j + gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpccgav4h3.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4287a6]\n??:? long[] tmpccgav4h3.shell_sort(long[]) [0x427f44]\n??:? void tmpccgav4h3.__unittest_L27_C1() [0x42816a]\n??:? void tmpccgav4h3.__modtest() [0x428474]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c777]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43079d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c4c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430729]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e1]\n??:? runModuleUnitTests [0x42c54d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor(long i = gap; i < my_list.length; i++)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor(long i = gap; i < my_list.length; i++)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj = j - gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4j9u3u84.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4j9u3u84.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j9u3u84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint gap = my_list.length / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = 0; i < my_list.length - gap; i++) \n\t\t{\n\t\t\tint j = i + gap;\n\t\t\tlong temp = my_list[j];\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj = j - gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap = gap / 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmpzcajyg7c.d(10): Error: cannot implicitly convert expression `my_list.length / 2LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzcajyg7c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 0 .. my_list.length - gap) \n\t\t{\n\t\t\tlong j = i;\n\t\t\twhile(j >= 0 && my_list[j] > my_list[j + gap]) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j] ^ my_list[j + gap];\n\t\t\t\tmy_list[j + gap] = my_list[j] ^ my_list[j + gap];\n\t\t\t\tmy_list[j] = my_list[j] ^ my_list[j + gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp6kjp14di.d(16): Range violation\n----------------\n??:? _d_arrayboundsp [0x4287a6]\n??:? long[] tmp6kjp14di.shell_sort(long[]) [0x427f44]\n??:? void tmp6kjp14di.__unittest_L27_C1() [0x42816a]\n??:? void tmp6kjp14di.__modtest() [0x428474]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c777]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43079d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c4c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430729]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e1]\n??:? runModuleUnitTests [0x42c54d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint i, j, k, h;\n\tlong temp;\n\tint n = my_list.length;\n\tint[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor (i = gap; i < n; i++)\n\t\t{\n\t\t\ttemp = my_list[i];\n\t\t\tfor (j = i; j >= gap && my_list[j - gap] > temp; j -= gap)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmpwmlprvos.d(12): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmlprvos.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor(long i = gap; i < my_list.length; i++)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1..my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint gap = my_list.length / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > my_list[j]) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j] ^ my_list[j - gap];\n\t\t\t\tmy_list[j - gap] = my_list[j] ^ my_list[j - gap];\n\t\t\t\tmy_list[j] = my_list[j] ^ my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmphso2znwj.d(10): Error: cannot implicitly convert expression `my_list.length / 2LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphso2znwj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong gap = my_list.length / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach (gap; gaps)\n\t{\n\t\tfor (long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach (gap; gaps) \n\t{\n\t\tforeach (i; gap .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j;\n\t\t\tfor(j = i; j >= gap && my_list[j - gap] > temp; j -= gap) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint i, j, increment;\n\tlong temp;\n\t\n\tincrement = my_list.length / 2;\n\t\n\twhile (increment > 0) \n\t{\n\t\tfor (i = increment; i < my_list.length; i++) \n\t\t{\n\t\t\tj = i;\n\t\t\ttemp = my_list[i];\n\t\t\t\n\t\t\twhile (j >= increment && my_list[j - increment] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - increment];\n\t\t\t\tj = j - increment;\n\t\t\t}\n\t\t\t\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\t\n\t\tif (increment == 2) \n\t\t{\n\t\t\tincrement = 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tincrement = (int) (increment / 2.2);\n\t\t}\n\t}\n\t\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmpd4vrapfh.d(37): Error: C style cast illegal, use `cast(int)(increment / 2.2)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd4vrapfh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1..my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj = j - gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1 .. my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1..my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint i, j, k, h;\n\tlong temp;\n\t\n\tforeach(i; 0 .. my_list.length)\n\t{\n\t\th = i;\n\t\twhile(h > 0 && my_list[h] < my_list[h-1])\n\t\t{\n\t\t\ttemp = my_list[h];\n\t\t\tmy_list[h] = my_list[h-1];\n\t\t\tmy_list[h-1] = temp;\n\t\t\th--;\n\t\t}\n\t}\n\t\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmpi1956ecz.d(13): Error: variable `i` is shadowing variable `tmpi1956ecz.shell_sort.i`\n/tmp/tmpi1956ecz.d(15): Error: cannot implicitly convert expression `i` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1956ecz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong gap = my_list.length / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 0 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor(long i = gap; i < my_list.length; i++)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1..my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; gap .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1 .. my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; gap .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1 .. my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj = j - gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor (long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. gap) \n\t\t{\n\t\t\tforeach(j; i .. my_list.length) \n\t\t\t{\n\t\t\t\tlong temp = my_list[j];\n\t\t\t\tlong k = j;\n\t\t\t\twhile(k >= gap && my_list[k - gap] > temp) \n\t\t\t\t{\n\t\t\t\t\tmy_list[k] = my_list[k - gap];\n\t\t\t\t\tk -= gap;\n\t\t\t\t}\n\t\t\t\tmy_list[k] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmlryzhdp.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpmlryzhdp.__unittest_L30_C1() [0x428164]\n??:? void tmpmlryzhdp.__modtest() [0x4283cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b562]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b539]\n??:? runModuleUnitTests [0x42c4a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; gap..my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; gap..my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach (gap; gaps) \n\t{\n\t\tforeach (i; gap .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1..my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj = j - gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint gap = my_list.length;\n\twhile (gap > 1) \n\t{\n\t\tgap = gap / 2;\n\t\tfor (int i = 0; i < gap; i++) \n\t\t{\n\t\t\tfor (int j = i + gap; j < my_list.length; j += gap) \n\t\t\t{\n\t\t\t\tlong temp = my_list[j];\n\t\t\t\tint k;\n\t\t\t\tfor (k = j - gap; k >= 0 && my_list[k] > temp; k -= gap) \n\t\t\t\t{\n\t\t\t\t\tmy_list[k + gap] = my_list[k];\n\t\t\t\t}\n\t\t\t\tmy_list[k + gap] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmp7hannlb7.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7hannlb7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint len = my_list.length;\n\tint gap = len / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < len; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmp2yvmeteg.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp2yvmeteg.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2yvmeteg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i += 1) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j;\n\t\t\tfor(j = i; j >= gap && my_list[j - gap] > temp; j -= gap) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4j9u3u84.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4j9u3u84.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j9u3u84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 0 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1..my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor(long i = gap; i < my_list.length; i++)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach (gap; gaps) \n\t{\n\t\tforeach (i; 1 .. gap) \n\t\t{\n\t\t\tforeach (j; i .. my_list.length) \n\t\t\t{\n\t\t\t\tlong temp = my_list[j];\n\t\t\t\tlong k = j;\n\t\t\t\twhile (k > gap && my_list[k - gap] > temp) \n\t\t\t\t{\n\t\t\t\t\tmy_list[k] = my_list[k - gap];\n\t\t\t\t\tk -= gap;\n\t\t\t\t}\n\t\t\t\tmy_list[k] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpx86ql13x.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpx86ql13x.__unittest_L30_C1() [0x428164]\n??:? void tmpx86ql13x.__modtest() [0x4283cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b562]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b539]\n??:? runModuleUnitTests [0x42c4a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor(long i = gap; i < my_list.length; i++)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. gap) \n\t\t{\n\t\t\tforeach(j; i .. my_list.length) \n\t\t\t{\n\t\t\t\tlong temp = my_list[j];\n\t\t\t\tlong k = j;\n\t\t\t\twhile(k >= gap && my_list[k - gap] > temp) \n\t\t\t\t{\n\t\t\t\t\tmy_list[k] = my_list[k - gap];\n\t\t\t\t\tk -= gap;\n\t\t\t\t}\n\t\t\t\tmy_list[k] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmlryzhdp.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42864d]\n??:? void tmpmlryzhdp.__unittest_L30_C1() [0x428164]\n??:? void tmpmlryzhdp.__modtest() [0x4283cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b562]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4306f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430681]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b539]\n??:? runModuleUnitTests [0x42c4a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4j9u3u84.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4j9u3u84.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j9u3u84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor(int i = gap; i < my_list.length; i++)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "/tmp/tmpflai9rts.d(13): Error: cannot implicitly convert expression `gap` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpflai9rts.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tfor(long i = gap; i < my_list.length; i++)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps)\n\t{\n\t\tforeach(i; 1 .. my_list.length)\n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp)\n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tint n = my_list.length;\n\tint gap = n / 2;\n\twhile (gap > 0) \n\t{\n\t\tfor (int i = gap; i < n; i++) \n\t\t{\n\t\t\tint temp = my_list[i];\n\t\t\tint j = i;\n\t\t\twhile (j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t\tgap /= 2;\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "/tmp/tmp4j9u3u84.d(10): Error: cannot implicitly convert expression `my_list.length` of type `ulong` to `int`\n/tmp/tmp4j9u3u84.d(16): Error: cannot implicitly convert expression `my_list[cast(ulong)i]` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j9u3u84.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j;\n\t\t\tfor(j = i; j >= gap && my_list[j - gap] > temp; j -= gap) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1666122516,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tfor(long i = gap; i < my_list.length; i++) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; 1 .. my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to sort the given array by using shell sort.\n\t\n*/\nlong[] shell_sort(long[] my_list) \n{\n\tlong[] gaps = [701, 301, 132, 57, 23, 10, 4, 1];\n\tforeach(gap; gaps) \n\t{\n\t\tforeach(i; gap..my_list.length) \n\t\t{\n\t\t\tlong temp = my_list[i];\n\t\t\tlong j = i;\n\t\t\twhile(j >= gap && my_list[j - gap] > temp) \n\t\t\t{\n\t\t\t\tmy_list[j] = my_list[j - gap];\n\t\t\t\tj -= gap;\n\t\t\t}\n\t\t\tmy_list[j] = temp;\n\t\t}\n\t}\n\treturn my_list;\n}\nunittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}",
      "timestamp": 1665517370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}