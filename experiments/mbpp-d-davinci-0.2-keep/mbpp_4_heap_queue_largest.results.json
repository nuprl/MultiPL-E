{
  "name": "mbpp_4_heap_queue_largest",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpj6obybpi.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpj6obybpi.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpj6obybpi.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6obybpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmprcves5w0.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmprcves5w0.d(26): Error: undefined identifier `heapify_down`\n/tmp/tmprcves5w0.d(36): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcves5w0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpkd63fhk3.d(19): Error: undefined identifier `heapify`\n/tmp/tmpkd63fhk3.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkd63fhk3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmprcs2u_19.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmprcs2u_19.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmprcs2u_19.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcs2u_19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_sift_down(heap, 0, heap_size - 1);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp5ts9n9on.d(18): Error: undefined identifier `heap_sift_up`\n/tmp/tmp5ts9n9on.d(25): Error: undefined identifier `heap_sift_down`\n/tmp/tmp5ts9n9on.d(34): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ts9n9on.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result;\n\tlong[] heap;\n\tlong i;\n\tlong j;\n\tlong temp;\n\t\n\tif (n == 0)\n\t{\n\t\treturn [];\n\t}\n\t\n\theap = nums[0..n];\n\t\n\tfor (i = n / 2; i >= 0; i--)\n\t{\n\t\tj = i;\n\t\twhile (j < n)\n\t\t{\n\t\t\tif (2 * j + 1 < n && heap[2 * j + 1] > heap[j])\n\t\t\t{\n\t\t\t\ttemp = heap[j];\n\t\t\t\theap[j] = heap[2 * j + 1];\n\t\t\t\theap[2 * j + 1] = temp;\n\t\t\t\tj = 2 * j + 1;\n\t\t\t}\n\t\t\telse if (2 * j + 2 < n && heap[2 * j + 2] > heap[j])\n\t\t\t{\n\t\t\t\ttemp = heap[j];\n\t\t\t\theap[j] = heap[2 * j + 2];\n\t\t\t\theap[2 * j + 2] = temp;\n\t\t\t\tj = 2 * j + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\tj = 0;\n\t\t\twhile (j < n)\n\t\t\t{\n\t\t\t\tif (2 * j + 1 < n && heap[2 * j + 1] > heap[j])\n\t\t\t\t{\n\t\t\t\t\ttemp = heap[j];\n\t\t\t\t\theap[j] = heap[2 * j + 1];\n\t\t\t\t\theap[2 * j + 1] = temp;\n\t\t\t\t\tj = 2 * j + 1;\n\t\t\t\t\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpbgviamkb.d(63): Error: found `unittest` instead of statement\n/tmp/tmpbgviamkb.d(71): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpbgviamkb.d(71): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpbgviamkb.d(71): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpbgviamkb.d(71): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbgviamkb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpfp9wxlr6.d(18): Error: undefined identifier `heap_sift_up`\n/tmp/tmpfp9wxlr6.d(25): Error: undefined identifier `heap_sift_down`\n/tmp/tmpfp9wxlr6.d(35): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfp9wxlr6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_insert(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpgnv_c_sa.d(19): Error: undefined identifier `heap_insert`\n/tmp/tmpgnv_c_sa.d(26): Error: undefined identifier `heap_insert`\n/tmp/tmpgnv_c_sa.d(36): Error: undefined identifier `heap_insert`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgnv_c_sa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_swap(heap, 0, heap_size - 1);\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpbuvs2zn_.d(22): Error: undefined identifier `heap_build`\n/tmp/tmpbuvs2zn_.d(30): Error: undefined identifier `heap_sift_down`\n/tmp/tmpbuvs2zn_.d(38): Error: undefined identifier `heap_swap`\n/tmp/tmpbuvs2zn_.d(40): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbuvs2zn_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\t// create a heap queue\n\tauto pq = new PriorityQueue!(long, \"a > b\");\n\t\n\t// add all the numbers to the queue\n\tforeach(num; nums)\n\t{\n\t\tpq.put(num);\n\t}\n\t\n\t// get the n largest numbers\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = pq.get();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpk1f4n20u.d(12): Error: template instance `PriorityQueue!(long, \"a > b\")` template `PriorityQueue` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk1f4n20u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tif (n <= 0)\n\t\treturn new long[0];\n\t\n\tlong[] result = new long[n];\n\t\n\tforeach (num; nums)\n\t{\n\t\tif (num > result[0])\n\t\t{\n\t\t\tresult[0] = num;\n\t\t\t\n\t\t\tlong i = 0;\n\t\t\twhile (i < n)\n\t\t\t{\n\t\t\t\tlong left = 2 * i + 1;\n\t\t\t\tlong right = 2 * i + 2;\n\t\t\t\t\n\t\t\t\tif (left < n && result[left] > result[i])\n\t\t\t\t{\n\t\t\t\t\tlong temp = result[i];\n\t\t\t\t\tresult[i] = result[left];\n\t\t\t\t\tresult[left] = temp;\n\t\t\t\t\ti = left;\n\t\t\t\t}\n\t\t\t\telse if (right < n && result[right] > result[i])\n\t\t\t\t{\n\t\t\t\t\tlong temp = result[i];\n\t\t\t\t\tresult[i] = result[right];\n\t\t\t\t\tresult[right] = temp;\n\t\t\t\t\ti = right;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0n015i6x.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x4286bd]\n??:? void tmp0n015i6x.__unittest_L48_C1() [0x4281fb]\n??:? void tmp0n015i6x.__modtest() [0x42843c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c777]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430895]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d44]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430821]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e1]\n??:? runModuleUnitTests [0x42c54d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b80]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tif (n > nums.length)\n\t\treturn result;\n\t\n\tlong[] heap = new long[n];\n\t\n\tforeach (long num; nums)\n\t{\n\t\tif (num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, n);\n\t\t}\n\t}\n\t\n\tforeach (long i; 0 .. n)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpkgik200d.d(20): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgik200d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpoi3zl6ce.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpoi3zl6ce.d(24): Error: undefined identifier `heap_sift_down`\n/tmp/tmpoi3zl6ce.d(33): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoi3zl6ce.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tif (nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n - i - 1];\n\t\theapify(heap, 0, n - i - 1);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpe1kt_ldp.d(26): Error: undefined identifier `heapify`\n/tmp/tmpe1kt_ldp.d(34): Error: undefined identifier `heapify`\n/tmp/tmpe1kt_ldp.d(42): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1kt_ldp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp84xo45x4.d(18): Error: undefined identifier `heap_sift_up`\n/tmp/tmp84xo45x4.d(23): Error: undefined identifier `heap_sift_down`\n/tmp/tmp84xo45x4.d(31): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84xo45x4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpta8hyizz.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmpta8hyizz.d(26): Error: undefined identifier `heapify_down`\n/tmp/tmpta8hyizz.d(36): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpta8hyizz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_size;\n\t\t\t}\n\t\t}\n\t}\n\t\n\theap_size = heap_size;\n\t\n\twhile(heap_size > 0)\n\t{\n\t\tresult[heap_size - 1] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\t\n\t\tlong i = 0;\n\t\twhile(i < heap_size)\n\t\t{\n\t\t\tlong left = 2 * i + 1;\n\t\t\tlong right = 2 * i + 2;\n\t\t\tlong largest = i;\n\t\t\t\n\t\t\tif(left < heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\t\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\ti = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_f9jvs65.d(75): unittest failure\n----------------\n??:? _d_unittestp [0x42874d]\n??:? void tmp_f9jvs65.__unittest_L71_C1() [0x42828b]\n??:? void tmp_f9jvs65.__modtest() [0x4284cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428c10]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap.length < n)\n\t\t{\n\t\t\theap ~= num;\n\t\t\theap_push(heap);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(heap[0] < num)\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_push(heap);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[$-1];\n\t\theap.length--;\n\t\theap_pop(heap);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp7qdkcqgz.d(17): Error: undefined identifier `heap_push`\n/tmp/tmp7qdkcqgz.d(24): Error: undefined identifier `heap_push`\n/tmp/tmp7qdkcqgz.d(34): Error: undefined identifier `heap_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7qdkcqgz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size-1);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpb3xzlg3z.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpb3xzlg3z.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpb3xzlg3z.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb3xzlg3z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result;\n\tlong[] heap;\n\tlong i, j, k, temp;\n\t\n\tif (n > nums.length)\n\t\tn = nums.length;\n\t\n\tresult = new long[n];\n\theap = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (i = n / 2; i >= 0; i--)\n\t{\n\t\tj = i;\n\t\twhile (j < n)\n\t\t{\n\t\t\tk = j * 2 + 1;\n\t\t\tif (k + 1 < n && heap[k] < heap[k + 1])\n\t\t\t\tk++;\n\t\t\tif (k < n && heap[j] < heap[k])\n\t\t\t{\n\t\t\t\ttemp = heap[j];\n\t\t\t\theap[j] = heap[k];\n\t\t\t\theap[k] = temp;\n\t\t\t\tj = k;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfor (i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\tj = 0;\n\t\t\twhile (j < n)\n\t\t\t{\n\t\t\t\tk = j * 2 + 1;\n\t\t\t\tif (k + 1 < n && heap[k] < heap[k + 1])\n\t\t\t\t\tk++;\n\t\t\t\tif (k < n && heap[j] < heap[k])\n\t\t\t\t{\n\t\t\t\t\ttemp = heap[j];\n\t\t\t\t\theap[j] = heap[k];\n\t\t\t\t\theap[k] = temp;\n\t\t\t\t\tj = k;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmp3fap296b.d(65): Error: found `unittest` instead of statement\n/tmp/tmp3fap296b.d(73): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3fap296b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpfr42cybd.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmpfr42cybd.d(24): Error: undefined identifier `heapify_down`\n/tmp/tmpfr42cybd.d(33): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfr42cybd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_sift_down(heap, 0, heap_size-1);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp_7u6yxwl.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmp_7u6yxwl.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmp_7u6yxwl.d(35): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_7u6yxwl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmprcs2u_19.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmprcs2u_19.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmprcs2u_19.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcs2u_19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] ret = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\theap_sort(heap);\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tret[i] = heap[i];\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmprygd_4jd.d(29): Error: undefined identifier `heap_sort`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprygd_4jd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tif (nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t\t\n\t\tlong j = i;\n\t\twhile (j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif (heap[parent] < heap[j])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t\tj = parent;\n\t\t}\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (heap[0] < nums[i])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\t\n\t\t\tlong j = 0;\n\t\t\twhile (j < n)\n\t\t\t{\n\t\t\t\tlong left = 2 * j + 1;\n\t\t\t\tlong right = 2 * j + 2;\n\t\t\t\tlong largest = j;\n\t\t\t\t\n\t\t\t\tif (left < n && heap[left] > heap[largest])\n\t\t\t\t\tlargest = left;\n\t\t\t\tif (right < n && heap[right] > heap[largest])\n\t\t\t\t\tlargest = right;\n\t\t\t\t\n\t\t\t\tif (largest != j)\n\t\t\t\t{\n\t\t\t\t\tlong temp = heap[largest];\n\t\t\t\t\theap[largest] = heap[j];\n\t\t\t\t\theap[j] = temp;\n\t\t\t\t\tj = largest;\n\t\t\t\t}\n\t\t\t\telse\n\t\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpvxwjia4j.d(66): Error: found `unittest` instead of statement\n/tmp/tmpvxwjia4j.d(74): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpvxwjia4j.d(74): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpvxwjia4j.d(74): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvxwjia4j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tif (n <= 0) \n\t\treturn new long[0];\n\t\n\tlong[] result = new long[n];\n\t\n\t// Create a min-heap\n\tlong[] heap = new long[n];\n\t\n\t// Initialize the heap with the first n elements\n\tfor (long i = 0; i < n; i++) \n\t\theap[i] = nums[i];\n\t\n\t// Heapify the heap\n\tfor (long i = n / 2; i >= 0; i--) \n\t\theapify(heap, i, n);\n\t\n\t// Iterate through the rest of the elements\n\tfor (long i = n; i < nums.length; i++) \n\t{\n\t\t// If the current element is greater than the root of the heap,\n\t\t// replace the root with the current element and heapify the heap\n\t\tif (nums[i] > heap[0]) \n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\t// Copy the elements from the heap to the result array\n\tfor (long i = 0; i < n; i++) \n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpghgozscp.d(23): Error: undefined identifier `heapify`\n/tmp/tmpghgozscp.d(33): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpghgozscp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tif (n == 0) return new long[0];\n\tif (n == 1) return [max(nums)];\n\t\n\tlong[] ret = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tforeach (num; nums)\n\t{\n\t\tif (num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, n);\n\t\t}\n\t}\n\t\n\tforeach (i; 0 .. n)\n\t{\n\t\tret[i] = heap[0];\n\t\theap[0] = heap[n - i - 1];\n\t\theap_sift_down(heap, 0, n - i - 1);\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpmz_ntr2l.d(10): Error: undefined identifier `max`, did you mean function `fmax`?\n/tmp/tmpmz_ntr2l.d(20): Error: undefined identifier `heap_sift_down`\n/tmp/tmpmz_ntr2l.d(28): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz_ntr2l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] res = new long[n];\n\t\n\tif (n == 0)\n\t\treturn res;\n\t\n\tif (nums.length == 0)\n\t\treturn res;\n\t\n\tif (nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\t// Initialize the heap with the first n elements of the array\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\t// Build the heap\n\tfor (long i = n / 2; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\t// Iterate through the rest of the array\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\t// If the current element is greater than the root of the heap, replace the root with the current element\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\t// Copy the heap into the result array\n\tfor (long i = 0; i < n; i++)\n\t\tres[i] = heap[i];\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmprc3p8i79.d(28): Error: undefined identifier `heapify`\n/tmp/tmprc3p8i79.d(37): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprc3p8i79.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpdtkv5ds5.d(20): Error: undefined identifier `heapify`\n/tmp/tmpdtkv5ds5.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdtkv5ds5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp493gibb1.d(18): Error: undefined identifier `heap_sift_up`\n/tmp/tmp493gibb1.d(25): Error: undefined identifier `heap_sift_down`\n/tmp/tmp493gibb1.d(35): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp493gibb1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tif (nums.length < n)\n\t\tn = nums.length;\n\t\n\t// create a heap queue\n\tauto hq = new HeapQueue!(long, \"a > b\");\n\t\n\tforeach (num; nums)\n\t{\n\t\thq.put(num);\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = hq.get();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp7e4vniex.d(18): Error: template instance `HeapQueue!(long, \"a > b\")` template `HeapQueue` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e4vniex.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build_max(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_max_heapify(heap, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_max_heapify(heap, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpli_34x_i.d(22): Error: undefined identifier `heap_build_max`\n/tmp/tmpli_34x_i.d(30): Error: undefined identifier `heap_max_heapify`\n/tmp/tmpli_34x_i.d(40): Error: undefined identifier `heap_max_heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpli_34x_i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpelseiobi.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmpelseiobi.d(26): Error: undefined identifier `heapify_down`\n/tmp/tmpelseiobi.d(36): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpelseiobi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_make(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n - 1];\n\t\theap_sift_down(heap, 0, n - 1);\n\t\tn--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp4ioczzr3.d(21): Error: undefined identifier `heap_make`\n/tmp/tmp4ioczzr3.d(29): Error: undefined identifier `heap_sift_down`\n/tmp/tmp4ioczzr3.d(38): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ioczzr3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong min = heap[0];\n\t\t\tif(num > min)\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\theap_size = heap_build_heap(heap, heap_size);\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size = heap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmppwbmpedm.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmppwbmpedm.d(31): Error: undefined identifier `heap_build_heap`\n/tmp/tmppwbmpedm.d(37): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppwbmpedm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong i = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\theap[i] = num;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong min = min(heap);\n\t\t\tif(num > min)\n\t\t\t{\n\t\t\t\tlong index = indexOf(heap, min);\n\t\t\t\theap[index] = num;\n\t\t\t}\n\t\t}\n\t}\n\tsort(heap);\n\treturn heap;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpw50f06ol.d(21): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpw50f06ol.d(24): Error: undefined identifier `indexOf`\n/tmp/tmpw50f06ol.d(29): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw50f06ol.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmppy742n4z.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmppy742n4z.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmppy742n4z.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppy742n4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmphzizspdt.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmphzizspdt.d(26): Error: undefined identifier `heapify_down`\n/tmp/tmphzizspdt.d(36): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphzizspdt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp7xagc_35.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmp7xagc_35.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmp7xagc_35.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xagc_35.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_insert(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpzrtd4oa9.d(18): Error: undefined identifier `heap_insert`\n/tmp/tmpzrtd4oa9.d(25): Error: undefined identifier `heap_insert`\n/tmp/tmpzrtd4oa9.d(35): Error: undefined identifier `heap_insert`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrtd4oa9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp4yuyssao.d(19): Error: undefined identifier `heapify`\n/tmp/tmp4yuyssao.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4yuyssao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpnu71mbtz.d(18): Error: undefined identifier `heap_sift_up`\n/tmp/tmpnu71mbtz.d(23): Error: undefined identifier `heap_sift_down`\n/tmp/tmpnu71mbtz.d(31): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnu71mbtz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_size - 1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\theap_sort(heap);\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpt9ik7j1g.d(29): Error: undefined identifier `heap_sort`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt9ik7j1g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\t// create a heap queue\n\tauto heap = new HeapPriorityQueue!(long)();\n\t\n\t// add all numbers to the heap queue\n\tforeach(num; nums)\n\t\theap.add(num);\n\t\n\t// pop the n largest numbers from the heap queue\n\tfor(long i = 0; i < n; i++)\n\t\tresult[i] = heap.pop();\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpei3gawal.d(12): Error: template instance `HeapPriorityQueue!long` template `HeapPriorityQueue` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpei3gawal.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tif (nums.length < n) \n\t{\n\t\treturn nums;\n\t}\n\t\n\tlong[] result = new long[n];\n\t\n\tforeach (i, num; nums) \n\t{\n\t\tif (i < n) \n\t\t{\n\t\t\tresult[i] = num;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tlong min = result[0];\n\t\t\tlong min_index = 0;\n\t\t\tforeach (j, r; result) \n\t\t\t{\n\t\t\t\tif (r < min) \n\t\t\t\t{\n\t\t\t\t\tmin = r;\n\t\t\t\t\tmin_index = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (num > min) \n\t\t\t{\n\t\t\t\tresult[min_index] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjd8pix8w.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x428565]\n??:? void tmpjd8pix8w.__unittest_L43_C1() [0x4280a3]\n??:? void tmpjd8pix8w.__modtest() [0x4282e4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c61f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43073d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306c9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b489]\n??:? runModuleUnitTests [0x42c3f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a28]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpkd63fhk3.d(19): Error: undefined identifier `heapify`\n/tmp/tmpkd63fhk3.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkd63fhk3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result;\n\tlong i, j, temp;\n\t\n\tif (nums.length < n)\n\t{\n\t\treturn nums;\n\t}\n\t\n\tresult = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tresult[i] = nums[i];\n\t}\n\t\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tfor (j = i; j * 2 + 1 < n;)\n\t\t{\n\t\t\tif (j * 2 + 2 == n)\n\t\t\t{\n\t\t\t\tif (result[j] < result[j * 2 + 1])\n\t\t\t\t{\n\t\t\t\t\ttemp = result[j];\n\t\t\t\t\tresult[j] = result[j * 2 + 1];\n\t\t\t\t\tresult[j * 2 + 1] = temp;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (result[j] < result[j * 2 + 1] || result[j] < result[j * 2 + 2])\n\t\t\t\t{\n\t\t\t\t\tif (result[j * 2 + 1] > result[j * 2 + 2])\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = result[j];\n\t\t\t\t\t\tresult[j] = result[j * 2 + 1];\n\t\t\t\t\t\tresult[j * 2 + 1] = temp;\n\t\t\t\t\t\tj = j * 2 + 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = result[j];\n\t\t\t\t\t\tresult[j] = result[j * 2 + 2];\n\t\t\t\t\t\tresult[j * 2 + 2] = temp;\n\t\t\t\t\t\tj = j * 2 + 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpomr4ke8m.d(60): Error: found `unittest` instead of statement\n/tmp/tmpomr4ke8m.d(68): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpomr4ke8m.d(68): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpomr4ke8m.d(68): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpomr4ke8m.d(68): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpomr4ke8m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_pop(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpqb8hs9hb.d(19): Error: undefined identifier `heap_push`\n/tmp/tmpqb8hs9hb.d(26): Error: undefined identifier `heap_pop`\n/tmp/tmpqb8hs9hb.d(34): Error: undefined identifier `heap_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqb8hs9hb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpdvjcxhay.d(22): Error: undefined identifier `heap_build`\n/tmp/tmpdvjcxhay.d(30): Error: undefined identifier `heap_sift_down`\n/tmp/tmpdvjcxhay.d(40): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdvjcxhay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tif (nums.length < n)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach (num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach (i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpw10lluaj.d(22): Error: undefined identifier `heapify_up`\n/tmp/tmpw10lluaj.d(29): Error: undefined identifier `heapify_down`\n/tmp/tmpw10lluaj.d(39): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw10lluaj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tauto h = new Heap(nums);\n\th.sort();\n\treturn h.getLargest(n);\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmprnpyxad5.d(9): Error: undefined identifier `Heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprnpyxad5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_adjust(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_adjust(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpwewf1syl.d(19): Error: undefined identifier `heap_insert`\n/tmp/tmpwewf1syl.d(26): Error: undefined identifier `heap_adjust`\n/tmp/tmpwewf1syl.d(36): Error: undefined identifier `heap_adjust`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwewf1syl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tif (nums.length < n) \n\t{\n\t\treturn nums;\n\t}\n\t\n\tauto h = new Heap!(long)();\n\t\n\tforeach(num; nums) \n\t{\n\t\th.insert(num);\n\t}\n\t\n\tlong[] result = new long[n];\n\t\n\tforeach(i; 0..n) \n\t{\n\t\tresult[i] = h.pop();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpwft3nm_k.d(14): Error: template instance `Heap!long` template `Heap` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwft3nm_k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmplnc0199z.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmplnc0199z.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmplnc0199z.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplnc0199z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpgyt1st0m.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpgyt1st0m.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpgyt1st0m.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgyt1st0m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpp5dh7m97.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpp5dh7m97.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpp5dh7m97.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp5dh7m97.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpjp_z964t.d(18): Error: undefined identifier `heap_sift_up`\n/tmp/tmpjp_z964t.d(25): Error: undefined identifier `heap_sift_down`\n/tmp/tmpjp_z964t.d(35): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjp_z964t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\tif(heap_size == n)\n\t\t\t\theap_build(heap);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n-1-i];\n\t\theap_sift_down(heap, 0, n-1-i);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp38pqv5p7.d(20): Error: undefined identifier `heap_build`\n/tmp/tmp38pqv5p7.d(27): Error: undefined identifier `heap_sift_down`\n/tmp/tmp38pqv5p7.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38pqv5p7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tif (n <= 0) \n\t{\n\t\treturn [];\n\t}\n\t\n\tif (n > nums.length) \n\t{\n\t\tn = nums.length;\n\t}\n\t\n\tlong[] heap = new long[n];\n\t\n\tforeach (long num; nums) \n\t{\n\t\tif (heap.length < n) \n\t\t{\n\t\t\theap ~= num;\n\t\t\theap_push(heap, heap.length - 1);\n\t\t} \n\t\telse if (num > heap[0]) \n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_pop(heap, 0);\n\t\t}\n\t}\n\t\n\treturn heap;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpfeawt_11.d(26): Error: undefined identifier `heap_push`\n/tmp/tmpfeawt_11.d(31): Error: undefined identifier `heap_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfeawt_11.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tif (n > nums.length)\n\t\treturn nums;\n\t\n\tlong[] result = new long[n];\n\t\n\t// Create a heap queue with the first n elements\n\theap_queue hq = new heap_queue(n);\n\tfor (long i = 0; i < n; i++)\n\t\thq.push(nums[i]);\n\t\n\t// For each element in the list, if it is larger than the smallest element in the heap queue,\n\t// replace the smallest element with the new element.\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > hq.peek())\n\t\t{\n\t\t\thq.pop();\n\t\t\thq.push(nums[i]);\n\t\t}\n\t}\n\t\n\t// Pop the elements from the heap queue and put them in the result array\n\tfor (long i = 0; i < n; i++)\n\t\tresult[i] = hq.pop();\n\t\n\t// Reverse the result array\n\tfor (long i = 0; i < n/2; i++)\n\t{\n\t\tlong temp = result[i];\n\t\tresult[i] = result[n-i-1];\n\t\tresult[n-i-1] = temp;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpndp7n5va.d(15): Error: undefined identifier `heap_queue`\n/tmp/tmpndp7n5va.d(15): Error: undefined identifier `heap_queue`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpndp7n5va.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmplyzw6ou3.d(18): Error: undefined identifier `heap_sift_up`\n/tmp/tmplyzw6ou3.d(25): Error: undefined identifier `heap_sift_down`\n/tmp/tmplyzw6ou3.d(35): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplyzw6ou3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n-1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpf6459fd9.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmpf6459fd9.d(26): Error: undefined identifier `heapify_down`\n/tmp/tmpf6459fd9.d(36): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf6459fd9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tif (nums.length < n)\n\t\treturn nums;\n\t\n\tlong[] result = new long[n];\n\t\n\t// create a heap\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\t// insert all numbers into the heap\n\tforeach (num; nums)\n\t{\n\t\theap[heap_size] = num;\n\t\theap_size++;\n\t\t\n\t\t// sift up\n\t\tlong i = heap_size - 1;\n\t\twhile (i > 0)\n\t\t{\n\t\t\tlong parent = (i - 1) / 2;\n\t\t\tif (heap[i] > heap[parent])\n\t\t\t{\n\t\t\t\tlong tmp = heap[i];\n\t\t\t\theap[i] = heap[parent];\n\t\t\t\theap[parent] = tmp;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t\t\n\t\t\ti = parent;\n\t\t}\n\t}\n\t\n\t// extract n largest numbers from the heap\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\t\n\t\t// sift down\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\t\n\t\tlong j = 0;\n\t\twhile (true)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\t\n\t\t\tif (left >= heap_size)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tlong largest = j;\n\t\t\tif (heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\tif (right < heap_size && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\t\n\t\t\tif (largest != j)\n\t\t\t{\n\t\t\t\tlong tmp = heap[j];\n\t\t\t\the\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpc145mlc4.d(70): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpc145mlc4.d(78): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpc145mlc4.d(78): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpc145mlc4.d(78): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpc145mlc4.d(78): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc145mlc4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_size - 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\theap_size = heap_sort(heap, heap_size);\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpb3_3921l.d(29): Error: undefined identifier `heap_sort`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb3_3921l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tif (n <= 0)\n\t\treturn new long[0];\n\t\n\tlong[] result = new long[n];\n\t\n\t// Create a heap queue\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach (long num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\t// Sift up\n\t\t\tlong i = heap_size - 1;\n\t\t\twhile (i > 0)\n\t\t\t{\n\t\t\t\tlong parent = (i - 1) / 2;\n\t\t\t\tif (heap[parent] < heap[i])\n\t\t\t\t{\n\t\t\t\t\tlong tmp = heap[parent];\n\t\t\t\t\theap[parent] = heap[i];\n\t\t\t\t\theap[i] = tmp;\n\t\t\t\t\ti = parent;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\t\n\t\t\t\t// Sift down\n\t\t\t\tlong i = 0;\n\t\t\t\twhile (i < heap_size)\n\t\t\t\t{\n\t\t\t\t\tlong left = 2 * i + 1;\n\t\t\t\t\tlong right = 2 * i + 2;\n\t\t\t\t\t\n\t\t\t\t\tlong max = i;\n\t\t\t\t\tif (left < heap_size && heap[left] > heap[max])\n\t\t\t\t\t\tmax = left;\n\t\t\t\t\tif (right < heap_size && heap[right] > heap[max])\n\t\t\t\t\t\tmax = right;\n\t\t\t\t\t\n\t\t\t\t\tif (max != i)\n\t\t\t\t\t{\n\t\t\t\t\t\tlong tmp =\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmphjs2gyo6.d(63): Error: expression expected, not `unittest`\n/tmp/tmphjs2gyo6.d(64): Error: semicolon expected, not `{`\n/tmp/tmphjs2gyo6.d(71): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphjs2gyo6.d(71): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphjs2gyo6.d(71): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphjs2gyo6.d(71): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphjs2gyo6.d(71): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmphjs2gyo6.d(71): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjs2gyo6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpnz90ej9m.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpnz90ej9m.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpnz90ej9m.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnz90ej9m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpawu_dszq.d(18): Error: undefined identifier `heap_sift_up`\n/tmp/tmpawu_dszq.d(25): Error: undefined identifier `heap_sift_down`\n/tmp/tmpawu_dszq.d(35): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpawu_dszq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\t// Initialize the heap with the first n elements of nums\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\t// Heapify the heap\n\tfor (long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\t// Iterate through the rest of the elements in nums\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\t// If the current element is larger than the root of the heap,\n\t\t// replace the root with the current element and heapify the heap\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\t// Sort the heap\n\tfor (long i = n - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\theapify(heap, 0, i);\n\t}\n\t\n\t// Copy the heap into the result array\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp3httz06w.d(21): Error: undefined identifier `heapify`\n/tmp/tmp3httz06w.d(32): Error: undefined identifier `heapify`\n/tmp/tmp3httz06w.d(42): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3httz06w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpd4n0qek9.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpd4n0qek9.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpd4n0qek9.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd4n0qek9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpzsdevzr5.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmpzsdevzr5.d(26): Error: undefined identifier `heapify_down`\n/tmp/tmpzsdevzr5.d(36): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzsdevzr5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpoi3zl6ce.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpoi3zl6ce.d(24): Error: undefined identifier `heap_sift_down`\n/tmp/tmpoi3zl6ce.d(33): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoi3zl6ce.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpiap10ap8.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpiap10ap8.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpiap10ap8.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiap10ap8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_pop(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmppcljgu4z.d(19): Error: undefined identifier `heap_push`\n/tmp/tmppcljgu4z.d(26): Error: undefined identifier `heap_pop`\n/tmp/tmppcljgu4z.d(34): Error: undefined identifier `heap_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcljgu4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tauto h = new Heap!(long)();\n\tforeach(num; nums)\n\t{\n\t\th.insert(num);\n\t}\n\t\n\tlong[] result;\n\tforeach(i; 0..n)\n\t{\n\t\tresult ~= h.pop();\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp9v7y6dhj.d(9): Error: template instance `Heap!long` template `Heap` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9v7y6dhj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_sift_down(heap, 0, heap_size - i);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp6tuso12y.d(21): Error: undefined identifier `heap_build`\n/tmp/tmp6tuso12y.d(29): Error: undefined identifier `heap_sift_down`\n/tmp/tmp6tuso12y.d(37): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6tuso12y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpwcmdrisq.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpwcmdrisq.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpwcmdrisq.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwcmdrisq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tauto hq = new HeapQueue!(long, \"a > b\");\n\tforeach(num; nums)\n\t{\n\t\thq.put(num);\n\t}\n\t\n\tlong[] result;\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult ~= hq.get();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpzijafi13.d(9): Error: template instance `HeapQueue!(long, \"a > b\")` template `HeapQueue` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzijafi13.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap.length < n)\n\t\t{\n\t\t\theap ~= num;\n\t\t\theap.sort;\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap.sort;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[n-1-i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpwukm98l3.d(17): Error: no property `sort` for type `long[]`\n/tmp/tmpwukm98l3.d(22): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwukm98l3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpkd63fhk3.d(19): Error: undefined identifier `heapify`\n/tmp/tmpkd63fhk3.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkd63fhk3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n-1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp2714jc8g.d(19): Error: undefined identifier `heap_up`\n/tmp/tmp2714jc8g.d(26): Error: undefined identifier `heap_down`\n/tmp/tmp2714jc8g.d(36): Error: undefined identifier `heap_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2714jc8g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size-1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0..heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp9yu_sk1x.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmp9yu_sk1x.d(24): Error: undefined identifier `heapify_down`\n/tmp/tmp9yu_sk1x.d(33): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yu_sk1x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_insert(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpx_mwqiff.d(19): Error: undefined identifier `heap_insert`\n/tmp/tmpx_mwqiff.d(26): Error: undefined identifier `heap_insert`\n/tmp/tmpx_mwqiff.d(36): Error: undefined identifier `heap_insert`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_mwqiff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_sort(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sort(heap);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i, j; heap)\n\t{\n\t\tresult[i] = heap[j];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpfum41mrb.d(22): Error: undefined identifier `heap_sort`\n/tmp/tmpfum41mrb.d(30): Error: undefined identifier `heap_sort`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfum41mrb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] ret = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_size;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tret[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_size = heap_size;\n\t\ti++;\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsv8ibial.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x42859d]\n??:? void tmpsv8ibial.__unittest_L42_C1() [0x4280db]\n??:? void tmpsv8ibial.__modtest() [0x42831c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c657]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430775]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430701]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4c1]\n??:? runModuleUnitTests [0x42c42d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a60]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tif (n > nums.length)\n\t\treturn null;\n\t\n\tlong[] result = new long[n];\n\t\n\t// Initialize the heap\n\tlong[] heap = new long[n];\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\t// Heapify\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t\theapify(heap, n, i);\n\t\n\t// Replace the root with the next number in the array\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\t// Sort the heap\n\tfor (long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpdywmtfj2.d(21): Error: undefined identifier `heapify`\n/tmp/tmpdywmtfj2.d(29): Error: undefined identifier `heapify`\n/tmp/tmpdywmtfj2.d(38): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdywmtfj2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpelseiobi.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmpelseiobi.d(26): Error: undefined identifier `heapify_down`\n/tmp/tmpelseiobi.d(36): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpelseiobi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpfoyrz94x.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpfoyrz94x.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpfoyrz94x.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfoyrz94x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpl58mb4v4.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmpl58mb4v4.d(26): Error: undefined identifier `heapify_down`\n/tmp/tmpl58mb4v4.d(36): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl58mb4v4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmprcs2u_19.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmprcs2u_19.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmprcs2u_19.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcs2u_19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp6s_rx8z1.d(22): Error: undefined identifier `heap_build`\n/tmp/tmp6s_rx8z1.d(30): Error: undefined identifier `heap_sift_down`\n/tmp/tmp6s_rx8z1.d(40): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6s_rx8z1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, heap_size - 1);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size - 1);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp01ptecyi.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmp01ptecyi.d(24): Error: undefined identifier `heap_sift_down`\n/tmp/tmp01ptecyi.d(33): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp01ptecyi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result;\n\tlong i, j, temp;\n\t\n\tif (nums.length < n)\n\t\treturn null;\n\t\n\tresult = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t\tresult[i] = nums[i];\n\t\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tj = i;\n\t\twhile (j < n / 2)\n\t\t{\n\t\t\tif (2 * j + 1 < n && result[2 * j + 1] > result[j])\n\t\t\t{\n\t\t\t\ttemp = result[j];\n\t\t\t\tresult[j] = result[2 * j + 1];\n\t\t\t\tresult[2 * j + 1] = temp;\n\t\t\t}\n\t\t\tif (2 * j + 2 < n && result[2 * j + 2] > result[j])\n\t\t\t{\n\t\t\t\ttemp = result[j];\n\t\t\t\tresult[j] = result[2 * j + 2];\n\t\t\t\tresult[2 * j + 2] = temp;\n\t\t\t}\n\t\t\tj = 2 * j + 1;\n\t\t}\n\t}\n\t\n\tfor (i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > result[0])\n\t\t{\n\t\t\tresult[0] = nums[i];\n\t\t\tj = 0;\n\t\t\twhile (j < n / 2)\n\t\t\t{\n\t\t\t\tif (2 * j + 1 < n && result[2 * j + 1] > result[j])\n\t\t\t\t{\n\t\t\t\t\ttemp = result[j];\n\t\t\t\t\tresult[j] = result[2 * j + 1];\n\t\t\t\t\tresult[2 * j + 1] = temp;\n\t\t\t\t}\n\t\t\t\tif (2 * j + 2 < n && result[2 * j + 2] > result[j])\n\t\t\t\t{\n\t\t\t\t\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpn_spkuux.d(58): Error: found `unittest` instead of statement\n/tmp/tmpn_spkuux.d(66): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpn_spkuux.d(66): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpn_spkuux.d(66): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpn_spkuux.d(66): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn_spkuux.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tauto h = new Heap(nums);\n\treturn h.largest(n);\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpfbiih1on.d(9): Error: undefined identifier `Heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfbiih1on.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpjwuk3kf4.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpjwuk3kf4.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpjwuk3kf4.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjwuk3kf4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpoi3zl6ce.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpoi3zl6ce.d(24): Error: undefined identifier `heap_sift_down`\n/tmp/tmpoi3zl6ce.d(33): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoi3zl6ce.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] ret = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tret[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpv6_29qv5.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpv6_29qv5.d(24): Error: undefined identifier `heap_sift_down`\n/tmp/tmpv6_29qv5.d(33): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv6_29qv5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theapify(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpym8x8jbu.d(22): Error: undefined identifier `heapify`\n/tmp/tmpym8x8jbu.d(30): Error: undefined identifier `heapify`\n/tmp/tmpym8x8jbu.d(40): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpym8x8jbu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_up(heap, heap_size - 1);\n\t\t}\n\t\telse if (num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpmy0rlk5d.d(19): Error: undefined identifier `heap_up`\n/tmp/tmpmy0rlk5d.d(24): Error: undefined identifier `heap_down`\n/tmp/tmpmy0rlk5d.d(33): Error: undefined identifier `heap_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmy0rlk5d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\theap_sort(heap);\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theap_sort(heap);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpdpmmv_3p.d(17): Error: undefined identifier `heap_sort`\n/tmp/tmpdpmmv_3p.d(24): Error: undefined identifier `heap_sort`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdpmmv_3p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmplnc0199z.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmplnc0199z.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmplnc0199z.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplnc0199z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tif (nums.length < n)\n\t\treturn result;\n\t\n\tlong[] heap = new long[n];\n\tforeach(i, x; nums[0..n])\n\t\theap[i] = x;\n\t\n\tmake_heap(heap);\n\t\n\tforeach(i, x; nums[n..$])\n\t{\n\t\tif (x > heap[0])\n\t\t{\n\t\t\theap[0] = x;\n\t\t\theap_adjust(heap, 0, n);\n\t\t}\n\t}\n\t\n\tforeach(i, x; heap)\n\t\tresult[i] = x;\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpil9jrnzd.d(17): Error: undefined identifier `make_heap`\n/tmp/tmpil9jrnzd.d(24): Error: undefined identifier `heap_adjust`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpil9jrnzd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif (n > nums.length)\n\t{\n\t\treturn result;\n\t}\n\t\n\tlong[] heap = new long[n];\n\t\n\tforeach(i, num; nums)\n\t{\n\t\tif (i < n)\n\t\t{\n\t\t\theap[i] = num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\theap_sort(heap);\n\t\n\tforeach(i, num; heap)\n\t{\n\t\tresult[i] = num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpno_qh2b9.d(33): Error: undefined identifier `heap_sort`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpno_qh2b9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tif (nums.length < n)\n\t{\n\t\treturn nums;\n\t}\n\t\n\tlong[] result = new long[n];\n\t\n\tlong[] heap = new long[n];\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tforeach(i; n .. nums.length)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theap_sift_down(heap, 0);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n - 1 - i];\n\t\theap_sift_down(heap, 0, n - 1 - i);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpdvm7_iu3.d(28): Error: undefined identifier `heap_sift_down`\n/tmp/tmpdvm7_iu3.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdvm7_iu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif(nums.length < n)\n\t{\n\t\treturn result;\n\t}\n\t\n\t// create a heap queue\n\tauto hq = new HeapQueue!(long)(nums[0]);\n\t\n\t// add all the numbers to the heap queue\n\tforeach(num; nums)\n\t{\n\t\thq.add(num);\n\t}\n\t\n\t// remove the largest n numbers from the heap queue\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = hq.remove();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpugld7jgf.d(17): Error: template instance `HeapQueue!long` template `HeapQueue` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpugld7jgf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (long i = n / 2; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp_ygs4622.d(20): Error: undefined identifier `heapify`\n/tmp/tmp_ygs4622.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ygs4622.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_size;\n\t\t\t}\n\t\t}\n\t}\n\t\n\theap_size = heap_size;\n\t\n\twhile(heap_size > 0)\n\t{\n\t\tresult[heap_size - 1] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_size = heap_size;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyrvm2uol.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x42859d]\n??:? void tmpyrvm2uol.__unittest_L42_C1() [0x4280df]\n??:? void tmpyrvm2uol.__modtest() [0x428320]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c657]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b4ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430775]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c24]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430701]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4c1]\n??:? runModuleUnitTests [0x42c42d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a60]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t\tresult[i] = heap[0];\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpfqsq762c.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpfqsq762c.d(24): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfqsq762c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size-1);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpvlv3_mtv.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpvlv3_mtv.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpvlv3_mtv.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvlv3_mtv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp8pkkmey8.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmp8pkkmey8.d(24): Error: undefined identifier `heapify_down`\n/tmp/tmp8pkkmey8.d(33): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8pkkmey8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong i = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\theap[i] = num;\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n-i-1];\n\t\theap_sift_down(heap, 0, n-i-1);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpm0f6fa82.d(24): Error: undefined identifier `heap_sift_down`\n/tmp/tmpm0f6fa82.d(29): Error: variable `i` is shadowing variable `tmpm0f6fa82.heap_queue_largest.i`\n/tmp/tmpm0f6fa82.d(33): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm0f6fa82.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++) \n\t{\n\t\tif (nums[i] > heap[0]) \n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp02f5kual.d(19): Error: undefined identifier `heapify`\n/tmp/tmp02f5kual.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02f5kual.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] ret;\n\tlong i, j, k, l, m, t;\n\t\n\tret = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tret[i] = nums[i];\n\t}\n\t\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tj = i;\n\t\twhile (j < n)\n\t\t{\n\t\t\tk = 2 * j + 1;\n\t\t\tl = 2 * j + 2;\n\t\t\tm = j;\n\t\t\tif (k < n && ret[k] > ret[m])\n\t\t\t{\n\t\t\t\tm = k;\n\t\t\t}\n\t\t\tif (l < n && ret[l] > ret[m])\n\t\t\t{\n\t\t\t\tm = l;\n\t\t\t}\n\t\t\tif (m != j)\n\t\t\t{\n\t\t\t\tt = ret[j];\n\t\t\t\tret[j] = ret[m];\n\t\t\t\tret[m] = t;\n\t\t\t\tj = m;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > ret[0])\n\t\t{\n\t\t\tret[0] = nums[i];\n\t\t\tj = 0;\n\t\t\twhile (j < n)\n\t\t\t{\n\t\t\t\tk = 2 * j + 1;\n\t\t\t\tl = 2 * j + 2;\n\t\t\t\tm = j;\n\t\t\t\tif (k < n && ret[k] > ret[m])\n\t\t\t\t{\n\t\t\t\t\tm = k;\n\t\t\t\t}\n\t\t\t\tif (l < n && ret[l] > ret[m])\n\t\t\t\t{\n\t\t\t\t\tm = l;\n\t\t\t\t\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp3ahvwahl.d(68): Error: found `unittest` instead of statement\n/tmp/tmp3ahvwahl.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp3ahvwahl.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp3ahvwahl.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp3ahvwahl.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ahvwahl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpkd63fhk3.d(19): Error: undefined identifier `heapify`\n/tmp/tmpkd63fhk3.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkd63fhk3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tauto hq = new HeapQueue!(long)();\n\tforeach(i; nums)\n\t{\n\t\thq.insert(i);\n\t}\n\t\n\tlong[] result;\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult ~= hq.pop();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpyxgob94z.d(9): Error: template instance `HeapQueue!long` template `HeapQueue` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxgob94z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0) \n\t{\n\t\treturn result;\n\t}\n\t\n\tif (nums.length < n) \n\t{\n\t\treturn nums;\n\t}\n\t\n\tlong[] heap = new long[n];\n\t\n\t// fill the heap with the first n elements\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\t// heapify\n\tfor (long i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\t// replace the root with the next element if it's larger than the root\n\tfor (long i = n; i < nums.length; i++) \n\t{\n\t\tif (nums[i] > heap[0]) \n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\t// sort the heap\n\tfor (long i = n - 1; i >= 0; i--) \n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theapify(heap, 0, i);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpgzhe906a.d(32): Error: undefined identifier `heapify`\n/tmp/tmpgzhe906a.d(41): Error: undefined identifier `heapify`\n/tmp/tmpgzhe906a.d(50): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzhe906a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmptsd8ipoz.d(21): Error: undefined identifier `heap_build`\n/tmp/tmptsd8ipoz.d(29): Error: undefined identifier `heap_sift_down`\n/tmp/tmptsd8ipoz.d(39): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptsd8ipoz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmptzszff6b.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmptzszff6b.d(24): Error: undefined identifier `heap_sift_down`\n/tmp/tmptzszff6b.d(33): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptzszff6b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpbqiir0c_.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpbqiir0c_.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpbqiir0c_.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbqiir0c_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_push(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_push(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpski6orzx.d(19): Error: undefined identifier `heap_push`\n/tmp/tmpski6orzx.d(26): Error: undefined identifier `heap_push`\n/tmp/tmpski6orzx.d(36): Error: undefined identifier `heap_push`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpski6orzx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_insert(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpysf3_8cn.d(19): Error: undefined identifier `heap_insert`\n/tmp/tmpysf3_8cn.d(26): Error: undefined identifier `heap_insert`\n/tmp/tmpysf3_8cn.d(36): Error: undefined identifier `heap_insert`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpysf3_8cn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_pop(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpydihhyc_.d(19): Error: undefined identifier `heap_push`\n/tmp/tmpydihhyc_.d(26): Error: undefined identifier `heap_pop`\n/tmp/tmpydihhyc_.d(34): Error: undefined identifier `heap_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpydihhyc_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\t\n\tfor (long i = 0; i < nums.length; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (long i = nums.length / 2; i >= 0; i--)\n\t\theapify(heap, i, nums.length);\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[nums.length - i - 1];\n\t\theapify(heap, 0, nums.length - i - 1);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpj66_ujzd.d(20): Error: undefined identifier `heapify`\n/tmp/tmpj66_ujzd.d(26): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj66_ujzd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_insert(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpv_ksz03y.d(19): Error: undefined identifier `heap_insert`\n/tmp/tmpv_ksz03y.d(26): Error: undefined identifier `heap_insert`\n/tmp/tmpv_ksz03y.d(36): Error: undefined identifier `heap_insert`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv_ksz03y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif (heap_size == n)\n\t\t\t{\n\t\t\t\theap_build_max(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_max_heapify(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_max_heapify(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpvw4rl7v4.d(22): Error: undefined identifier `heap_build_max`\n/tmp/tmpvw4rl7v4.d(30): Error: undefined identifier `heap_max_heapify`\n/tmp/tmpvw4rl7v4.d(40): Error: undefined identifier `heap_max_heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvw4rl7v4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp26gmnqmp.d(19): Error: undefined identifier `heapify`\n/tmp/tmp26gmnqmp.d(27): Error: undefined identifier `heapify`\n/tmp/tmp26gmnqmp.d(35): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp26gmnqmp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmplnc0199z.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmplnc0199z.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmplnc0199z.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplnc0199z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpi_pt96n4.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmpi_pt96n4.d(24): Error: undefined identifier `heapify_down`\n/tmp/tmpi_pt96n4.d(33): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi_pt96n4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmprcs2u_19.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmprcs2u_19.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmprcs2u_19.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprcs2u_19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_adjust(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_adjust(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpwewf1syl.d(19): Error: undefined identifier `heap_insert`\n/tmp/tmpwewf1syl.d(26): Error: undefined identifier `heap_adjust`\n/tmp/tmpwewf1syl.d(36): Error: undefined identifier `heap_adjust`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwewf1syl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpnz90ej9m.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpnz90ej9m.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpnz90ej9m.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnz90ej9m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpfiwlfze5.d(19): Error: undefined identifier `heap_insert`\n/tmp/tmpfiwlfze5.d(24): Error: undefined identifier `heap_insert`\n/tmp/tmpfiwlfze5.d(33): Error: undefined identifier `heap_insert`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfiwlfze5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(heap[0] < num)\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmprq7cdm6q.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmprq7cdm6q.d(26): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprq7cdm6q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpflqg03ph.d(19): Error: undefined identifier `heap_up`\n/tmp/tmpflqg03ph.d(24): Error: undefined identifier `heap_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpflqg03ph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpt172zxnd.d(18): Error: undefined identifier `heap_sift_up`\n/tmp/tmpt172zxnd.d(23): Error: undefined identifier `heap_sift_down`\n/tmp/tmpt172zxnd.d(32): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt172zxnd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] ret = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t\theap_build(heap);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tret[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn ret;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp7sjp7b29.d(21): Error: undefined identifier `heap_build`\n/tmp/tmp7sjp7b29.d(28): Error: undefined identifier `heap_sift_down`\n/tmp/tmp7sjp7b29.d(38): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7sjp7b29.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result;\n\tlong[] heap;\n\tlong i, j, temp;\n\t\n\tif (n < 1)\n\t\treturn null;\n\t\n\theap = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tj = i;\n\t\twhile (j * 2 + 1 < n)\n\t\t{\n\t\t\tif (j * 2 + 2 < n)\n\t\t\t{\n\t\t\t\tif (heap[j * 2 + 1] > heap[j * 2 + 2])\n\t\t\t\t{\n\t\t\t\t\tif (heap[j] < heap[j * 2 + 1])\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = heap[j];\n\t\t\t\t\t\theap[j] = heap[j * 2 + 1];\n\t\t\t\t\t\theap[j * 2 + 1] = temp;\n\t\t\t\t\t\tj = j * 2 + 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (heap[j] < heap[j * 2 + 2])\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = heap[j];\n\t\t\t\t\t\theap[j] = heap[j * 2 + 2];\n\t\t\t\t\t\theap[j * 2 + 2] = temp;\n\t\t\t\t\t\tj = j * 2 + 2;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (heap[j] < heap[j * 2 + 1])\n\t\t\t\t{\n\t\t\t\t\ttemp = heap[j];\n\t\t\t\t\theap[j] = heap[j\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpug3r5i2e.d(59): Error: found `unittest` when expecting `,`\n/tmp/tmpug3r5i2e.d(67): Error: found `void` when expecting `,`\n/tmp/tmpug3r5i2e.d(67): Error: found `{` when expecting `,`\n/tmp/tmpug3r5i2e.d(67): Error: expression expected, not `}`\n/tmp/tmpug3r5i2e.d(67): Error: found `End of File` when expecting `,`\n/tmp/tmpug3r5i2e.d(67): Error: found `End of File` when expecting `]`\n/tmp/tmpug3r5i2e.d(67): Error: found `End of File` when expecting `;` following statement\n/tmp/tmpug3r5i2e.d(67): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpug3r5i2e.d(67): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpug3r5i2e.d(67): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpug3r5i2e.d(67): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpug3r5i2e.d(67): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp9lqk_n8n.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmp9lqk_n8n.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmp9lqk_n8n.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lqk_n8n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\t// Create a heap queue\n\tHeapQueue!(long, \"a > b\") heap = new HeapQueue!(long, \"a > b\");\n\t\n\t// Add all the numbers to the heap queue\n\tforeach (num; nums)\n\t\theap.put(num);\n\t\n\t// Pop the largest numbers from the heap queue\n\tforeach (i; 0 .. n)\n\t\tresult[i] = heap.get();\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpktib1zse.d(15): Error: template instance `HeapQueue!(long, \"a > b\")` template `HeapQueue` is not defined\n/tmp/tmpktib1zse.d(15): Error: template instance `HeapQueue!(long, \"a > b\")` template `HeapQueue` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpktib1zse.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpynsejt8b.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpynsejt8b.d(24): Error: undefined identifier `heap_sift_down`\n/tmp/tmpynsejt8b.d(33): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynsejt8b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif(nums.length < n)\n\t\treturn result;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor(long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpl7ldsnb1.d(23): Error: undefined identifier `heapify`\n/tmp/tmpl7ldsnb1.d(31): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl7ldsnb1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] heap = new long[n];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0);\n\t\t}\n\t}\n\t\n\treturn heap;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpfbg9obs4.d(16): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfbg9obs4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp0oe8ivnf.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmp0oe8ivnf.d(24): Error: undefined identifier `heapify_down`\n/tmp/tmp0oe8ivnf.d(33): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0oe8ivnf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n-i-1];\n\t\theap_sift_down(heap, 0, n-i-1);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp2vspeye1.d(21): Error: undefined identifier `heap_build`\n/tmp/tmp2vspeye1.d(29): Error: undefined identifier `heap_sift_down`\n/tmp/tmp2vspeye1.d(38): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2vspeye1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tauto heap = new Heap!(long)();\n\tforeach(num; nums)\n\t{\n\t\theap.push(num);\n\t}\n\t\n\tlong[] result = new long[n];\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap.pop();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp9xzc46a0.d(9): Error: template instance `Heap!long` template `Heap` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9xzc46a0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_insert(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_insert(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_insert(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpv_ksz03y.d(19): Error: undefined identifier `heap_insert`\n/tmp/tmpv_ksz03y.d(26): Error: undefined identifier `heap_insert`\n/tmp/tmpv_ksz03y.d(36): Error: undefined identifier `heap_insert`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv_ksz03y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpxwgk0_66.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpxwgk0_66.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpxwgk0_66.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwgk0_66.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length < n)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif (heap_size == n)\n\t\t\t\theap_build(heap);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpn772s_5p.d(25): Error: undefined identifier `heap_build`\n/tmp/tmpn772s_5p.d(32): Error: undefined identifier `heap_sift_down`\n/tmp/tmpn772s_5p.d(42): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn772s_5p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size-1);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpi2u0_xgc.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmpi2u0_xgc.d(26): Error: undefined identifier `heapify_down`\n/tmp/tmpi2u0_xgc.d(36): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi2u0_xgc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\treturn heap;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpbaspanid.d(17): Error: undefined identifier `heap_push`\n/tmp/tmpbaspanid.d(24): Error: undefined identifier `heap_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbaspanid.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_push(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_push(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpvi5omcim.d(19): Error: undefined identifier `heap_push`\n/tmp/tmpvi5omcim.d(26): Error: undefined identifier `heap_push`\n/tmp/tmpvi5omcim.d(36): Error: undefined identifier `heap_push`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi5omcim.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpl58mb4v4.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmpl58mb4v4.d(26): Error: undefined identifier `heapify_down`\n/tmp/tmpl58mb4v4.d(36): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl58mb4v4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(heap_size == n)\n\t\t{\n\t\t\theap_sort(heap);\n\t\t}\n\t}\n\t\n\theap_sort(heap);\n\t\n\tforeach(i, num; heap)\n\t{\n\t\tresult[i] = num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp1x67k3ko.d(30): Error: undefined identifier `heap_sort`\n/tmp/tmp1x67k3ko.d(34): Error: undefined identifier `heap_sort`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1x67k3ko.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpk94fepcf.d(18): Error: undefined identifier `heapify_up`\n/tmp/tmpk94fepcf.d(23): Error: undefined identifier `heapify_down`\n/tmp/tmpk94fepcf.d(32): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk94fepcf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmptw6h8za8.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmptw6h8za8.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmptw6h8za8.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptw6h8za8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmp4yuyssao.d(19): Error: undefined identifier `heapify`\n/tmp/tmp4yuyssao.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4yuyssao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmprx0v5rn2.d(20): Error: undefined identifier `heap_sift_up`\n/tmp/tmprx0v5rn2.d(27): Error: undefined identifier `heap_sift_down`\n/tmp/tmprx0v5rn2.d(37): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprx0v5rn2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif(heap_size == n)\n\t\t\t\theap_build(heap);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, n);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[n - 1 - i];\n\t\theap_sift_down(heap, 0, n - 1 - i);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpf39tjcm1.d(21): Error: undefined identifier `heap_build`\n/tmp/tmpf39tjcm1.d(28): Error: undefined identifier `heap_sift_down`\n/tmp/tmpf39tjcm1.d(37): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf39tjcm1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tif (n == 0) \n\t\treturn [];\n\t\n\tif (n > nums.length) \n\t\tn = nums.length;\n\t\n\tlong[] result = new long[n];\n\t\n\t// Create a heap queue with the first n elements\n\tauto heap = new HeapPriorityQueue!(long)(nums[0..n], (a, b) => a > b);\n\t\n\tforeach (i, num; nums[n..$]) \n\t{\n\t\tif (num > heap.front) \n\t\t{\n\t\t\theap.popFront();\n\t\t\theap.put(num);\n\t\t}\n\t}\n\t\n\tforeach (i, num; heap) \n\t{\n\t\tresult[i] = num;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpmpkvvabz.d(18): Error: template instance `HeapPriorityQueue!long` template `HeapPriorityQueue` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmpkvvabz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif (n > nums.length)\n\t{\n\t\treturn result;\n\t}\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpr9pualh3.d(25): Error: undefined identifier `heapify`\n/tmp/tmpr9pualh3.d(33): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr9pualh3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpkd63fhk3.d(19): Error: undefined identifier `heapify`\n/tmp/tmpkd63fhk3.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkd63fhk3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif (heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_heapify(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_heapify(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp8o5bi_he.d(22): Error: undefined identifier `heap_build`\n/tmp/tmp8o5bi_he.d(30): Error: undefined identifier `heap_heapify`\n/tmp/tmp8o5bi_he.d(40): Error: undefined identifier `heap_heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8o5bi_he.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpp5dh7m97.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpp5dh7m97.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpp5dh7m97.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp5dh7m97.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp12xq6ies.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmp12xq6ies.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmp12xq6ies.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp12xq6ies.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpw2ql45wf.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpw2ql45wf.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpw2ql45wf.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2ql45wf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif(nums.length == 0)\n\t\treturn result;\n\t\t\n\tif(nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor(long i = n / 2 - 1; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpdqm85ws_.d(23): Error: undefined identifier `heapify`\n/tmp/tmpdqm85ws_.d(30): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdqm85ws_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpsn4t5qi8.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpsn4t5qi8.d(24): Error: undefined identifier `heap_sift_down`\n/tmp/tmpsn4t5qi8.d(33): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsn4t5qi8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, n);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp1883ktll.d(17): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1883ktll.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmppy742n4z.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmppy742n4z.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmppy742n4z.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppy742n4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(size < n)\n\t\t{\n\t\t\theap[size] = num;\n\t\t\tsize++;\n\t\t\theap_sift_up(heap, size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[size - 1];\n\t\tsize--;\n\t\theap_sift_down(heap, 0, size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmphfq4vbaj.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmphfq4vbaj.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmphfq4vbaj.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphfq4vbaj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor(long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, n, 0);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp5o6obtb5.d(19): Error: undefined identifier `heapify`\n/tmp/tmp5o6obtb5.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5o6obtb5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp3cpxi9lm.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmp3cpxi9lm.d(26): Error: undefined identifier `heapify_down`\n/tmp/tmp3cpxi9lm.d(36): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3cpxi9lm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_size = heap_size;\n\t\t\t}\n\t\t}\n\t}\n\t\n\theap_sort(heap);\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpfeh53wrj.d(30): Error: undefined identifier `heap_sort`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfeh53wrj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif(nums.length < n)\n\t\treturn result;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor(long i = n/2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp6_fcec2z.d(23): Error: undefined identifier `heapify`\n/tmp/tmp6_fcec2z.d(31): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_fcec2z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result;\n\tlong i, j, temp;\n\t\n\tresult = new long[n];\n\t\n\t// copy the first n elements of nums to result\n\tfor (i = 0; i < n; i++)\n\t\tresult[i] = nums[i];\n\t\n\t// heapify the result array\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tj = i;\n\t\twhile (j < n / 2)\n\t\t{\n\t\t\tif (2 * j + 2 < n)\n\t\t\t{\n\t\t\t\tif (result[2 * j + 1] > result[2 * j + 2])\n\t\t\t\t{\n\t\t\t\t\tif (result[j] < result[2 * j + 1])\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = result[j];\n\t\t\t\t\t\tresult[j] = result[2 * j + 1];\n\t\t\t\t\t\tresult[2 * j + 1] = temp;\n\t\t\t\t\t\tj = 2 * j + 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (result[j] < result[2 * j + 2])\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = result[j];\n\t\t\t\t\t\tresult[j] = result[2 * j + 2];\n\t\t\t\t\t\tresult[2 * j + 2] = temp;\n\t\t\t\t\t\tj = 2 * j + 2;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (result[j] < result[2 * j + 1])\n\t\t\t\t{\n\t\t\t\t\ttemp = result[j];\n\t\t\t\t\tresult[j] = result[2 * j + 1];\n\t\t\t\t\tresult[2\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp1ufmspvp.d(58): Error: found `unittest` when expecting `,`\n/tmp/tmp1ufmspvp.d(66): Error: found `void` when expecting `,`\n/tmp/tmp1ufmspvp.d(66): Error: found `{` when expecting `,`\n/tmp/tmp1ufmspvp.d(66): Error: expression expected, not `}`\n/tmp/tmp1ufmspvp.d(66): Error: found `End of File` when expecting `,`\n/tmp/tmp1ufmspvp.d(66): Error: found `End of File` when expecting `]`\n/tmp/tmp1ufmspvp.d(66): Error: found `End of File` when expecting `;` following statement\n/tmp/tmp1ufmspvp.d(66): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp1ufmspvp.d(66): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp1ufmspvp.d(66): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp1ufmspvp.d(66): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp1ufmspvp.d(66): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tlong[] heap = new long[nums.length];\n\t\n\t// build heap\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\theap[i] = nums[i];\n\t\t\n\t\t// bubble up\n\t\tlong j = i;\n\t\twhile (j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif (heap[j] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t// extract max\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\t\n\t\t// bubble down\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\tlong j = 0;\n\t\twhile (j < heap.length - 1 - i)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tif (left < heap.length - 1 - i && right < heap.length - 1 - i)\n\t\t\t{\n\t\t\t\tif (heap[j] < heap[left] || heap[j] < heap[right])\n\t\t\t\t{\n\t\t\t\t\tif (heap[left] > heap[right])\n\t\t\t\t\t{\n\t\t\t\t\t\tlong temp = heap[j];\n\t\t\t\t\t\theap[j] = heap[left];\n\t\t\t\t\t\theap[left] = temp;\n\t\t\t\t\t\tj = left;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpzw6wvvf8.d(63): Error: found `unittest` instead of statement\n/tmp/tmpzw6wvvf8.d(71): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzw6wvvf8.d(71): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzw6wvvf8.d(71): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpzw6wvvf8.d(71): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzw6wvvf8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tauto heap = new Heap!(long)();\n\tforeach(num; nums)\n\t{\n\t\theap.push(num);\n\t}\n\t\n\tlong[] result;\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult ~= heap.pop();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpyy8y0qvc.d(9): Error: template instance `Heap!long` template `Heap` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyy8y0qvc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result;\n\tlong i, j, k, temp;\n\t\n\tresult = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\tresult[i] = nums[i];\n\t}\n\t\n\tfor (i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\tk = i;\n\t\twhile (k * 2 + 1 < n)\n\t\t{\n\t\t\tj = k * 2 + 1;\n\t\t\tif (j + 1 < n && result[j] < result[j + 1])\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (result[k] < result[j])\n\t\t\t{\n\t\t\t\ttemp = result[k];\n\t\t\t\tresult[k] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\tk = j;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > result[0])\n\t\t{\n\t\t\tresult[0] = nums[i];\n\t\t\tk = 0;\n\t\t\twhile (k * 2 + 1 < n)\n\t\t\t{\n\t\t\t\tj = k * 2 + 1;\n\t\t\t\tif (j + 1 < n && result[j] < result[j + 1])\n\t\t\t\t{\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\tif (result[k] < result[j])\n\t\t\t\t{\n\t\t\t\t\ttemp = result[k];\n\t\t\t\t\tresult[k] = result[j];\n\t\t\t\t\tresult[j] = temp;\n\t\t\t\t\tk = j;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpl4h386wh.d(68): Error: found `unittest` instead of statement\n/tmp/tmpl4h386wh.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpl4h386wh.d(76): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpl4h386wh.d(76): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl4h386wh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tauto q = new PriorityQueue!(long)();\n\tforeach(num; nums)\n\t{\n\t\tq.put(num);\n\t}\n\t\n\tlong[] result = new long[n];\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = q.get();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpc8t7jl20.d(9): Error: template instance `PriorityQueue!long` template `PriorityQueue` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc8t7jl20.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1665517590,
      "stdout": "",
      "stderr": "/tmp/tmpoi3zl6ce.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpoi3zl6ce.d(24): Error: undefined identifier `heap_sift_down`\n/tmp/tmpoi3zl6ce.d(33): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoi3zl6ce.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tauto q = new PriorityQueue!(long[])();\n\tforeach(num; nums)\n\t{\n\t\tq.put(num);\n\t}\n\t\n\tlong[] result = new long[n];\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = q.get();\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpu197nl91.d(9): Error: template instance `PriorityQueue!(long[])` template `PriorityQueue` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu197nl91.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tauto heap = new long[n];\n\tforeach(i, nums)\n\t{\n\t\tif(i < n)\n\t\t{\n\t\t\theap[i] = nums[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tauto min = min_element(heap);\n\t\t\tif(nums[i] > heap[min])\n\t\t\t{\n\t\t\t\theap[min] = nums[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn heap;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpdnmlktyr.d(10): Error: no identifier for declarator `nums`\n/tmp/tmpdnmlktyr.d(10): Error: found `)` when expecting `;`\n/tmp/tmpdnmlktyr.d(25): Error: found `return` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdnmlktyr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap.length < n)\n\t\t{\n\t\t\theap ~= num;\n\t\t\theap_insert(heap);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theap_adjust(heap, 0);\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[$-1];\n\t\theap_adjust(heap[0..$-1], 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp94xy1b5l.d(17): Error: undefined identifier `heap_insert`\n/tmp/tmp94xy1b5l.d(22): Error: undefined identifier `heap_adjust`\n/tmp/tmp94xy1b5l.d(30): Error: undefined identifier `heap_adjust`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp94xy1b5l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums) {\n\t\tif(heap_size < n) {\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t} else {\n\t\t\tif(num > heap[0]) {\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++) {\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmprt0m3443.d(17): Error: undefined identifier `heap_sift_up`\n/tmp/tmprt0m3443.d(21): Error: undefined identifier `heap_sift_down`\n/tmp/tmprt0m3443.d(30): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprt0m3443.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0..n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpgyt1st0m.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpgyt1st0m.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpgyt1st0m.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgyt1st0m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmppy742n4z.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmppy742n4z.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmppy742n4z.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppy742n4z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp4ql8i0xu.d(19): Error: undefined identifier `heapify`\n/tmp/tmp4ql8i0xu.d(27): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ql8i0xu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tif (n == 0) return new long[0];\n\tif (n == 1) return new long[1] { max(nums) };\n\t\n\tlong[] result = new long[n];\n\t\n\t// Initialize the heap\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = nums[i];\n\t}\n\t\n\t// Heapify the array\n\tfor (long i = n / 2; i >= 0; i--)\n\t{\n\t\theapify(result, i, n);\n\t}\n\t\n\t// Insert the rest of the elements\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > result[0])\n\t\t{\n\t\t\tresult[0] = nums[i];\n\t\t\theapify(result, 0, n);\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpd3oltgps.d(10): Error: found `{` when expecting `;` following `return` statement\n/tmp/tmpd3oltgps.d(10): Error: found `}` when expecting `;` following statement\n/tmp/tmpd3oltgps.d(10): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd3oltgps.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\t\n\tlong i = 0;\n\tlong j = 0;\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor (i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theap_sift_down(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[j] = heap[0];\n\t\theap[0] = heap[i];\n\t\theap_sift_down(heap, 0, i);\n\t\tj++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp9nbp30v3.d(25): Error: undefined identifier `heap_sift_down`\n/tmp/tmp9nbp30v3.d(33): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9nbp30v3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_queue_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_queue_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_queue_pop(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp7407ckct.d(19): Error: undefined identifier `heap_queue_push`\n/tmp/tmp7407ckct.d(26): Error: undefined identifier `heap_queue_pop`\n/tmp/tmp7407ckct.d(34): Error: undefined identifier `heap_queue_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7407ckct.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size - 1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size - 1);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpltfebn7f.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpltfebn7f.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpltfebn7f.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpltfebn7f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size);\n\t\t}\n\t\telse if(num > heap[0])\n\t\t{\n\t\t\theap[0] = num;\n\t\t\theapify_down(heap, heap_size);\n\t\t}\n\t}\n\t\n\tfor(long i = n - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp0gdzj0vh.d(18): Error: undefined identifier `heapify_up`\n/tmp/tmp0gdzj0vh.d(23): Error: undefined identifier `heapify_down`\n/tmp/tmp0gdzj0vh.d(32): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0gdzj0vh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size-1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpyjtr64ie.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpyjtr64ie.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpyjtr64ie.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyjtr64ie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif(nums.length == 0)\n\t\treturn result;\n\t\n\tif(nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\theap[i] = nums[i];\n\t}\n\t\n\tfor(long i = n/2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, n);\n\t}\n\t\n\tfor(long i = n; i < nums.length; i++)\n\t{\n\t\tif(nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[i];\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp8v_5ve8h.d(26): Error: undefined identifier `heapify`\n/tmp/tmp8v_5ve8h.d(34): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8v_5ve8h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[nums.length];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theapify_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theapify_down(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpuaek773z.d(19): Error: undefined identifier `heapify_up`\n/tmp/tmpuaek773z.d(26): Error: undefined identifier `heapify_down`\n/tmp/tmpuaek773z.d(36): Error: undefined identifier `heapify_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuaek773z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tauto h = new Heap(nums);\n\th.sort();\n\treturn h.get_sorted_list();\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp6gnr5ihd.d(9): Error: undefined identifier `Heap`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6gnr5ihd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_push(heap, heap_size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_pop(heap, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap_pop(heap, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpme95jgn5.d(19): Error: undefined identifier `heap_push`\n/tmp/tmpme95jgn5.d(26): Error: undefined identifier `heap_pop`\n/tmp/tmpme95jgn5.d(34): Error: undefined identifier `heap_pop`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpme95jgn5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\theap_sift_up(heap, heap_size - 1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123573,
      "stdout": "",
      "stderr": "/tmp/tmpnz90ej9m.d(19): Error: undefined identifier `heap_sift_up`\n/tmp/tmpnz90ej9m.d(26): Error: undefined identifier `heap_sift_down`\n/tmp/tmpnz90ej9m.d(36): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnz90ej9m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\tif(heap_size == n)\n\t\t\t{\n\t\t\t\theap_build_max(heap, heap_size);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_max_heapify(heap, 0, heap_size);\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_max_heapify(heap, 0, heap_size);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpmp2zy19p.d(20): Error: undefined identifier `heap_build_max`\n/tmp/tmpmp2zy19p.d(28): Error: undefined identifier `heap_max_heapify`\n/tmp/tmpmp2zy19p.d(37): Error: undefined identifier `heap_max_heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmp2zy19p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\t\n\tif (nums.length == 0)\n\t\treturn result;\n\t\n\tif (nums.length < n)\n\t\tn = nums.length;\n\t\n\tlong[] heap = new long[n];\n\t\n\tfor (long i = 0; i < n; i++)\n\t\theap[i] = nums[i];\n\t\n\tfor (long i = n / 2 - 1; i >= 0; i--)\n\t\theapify(heap, i, n);\n\t\n\tfor (long i = n; i < nums.length; i++)\n\t{\n\t\tif (nums[i] > heap[0])\n\t\t{\n\t\t\theap[0] = nums[i];\n\t\t\theapify(heap, 0, n);\n\t\t}\n\t}\n\t\n\tfor (long i = 0; i < n; i++)\n\t\tresult[i] = heap[i];\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmp7u4ozaxg.d(23): Error: undefined identifier `heapify`\n/tmp/tmp7u4ozaxg.d(30): Error: undefined identifier `heapify`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7u4ozaxg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n{\n\tlong[] result = new long[n];\n\tlong[] heap = new long[n];\n\tlong heap_size = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif (heap_size < n)\n\t\t{\n\t\t\theap[heap_size] = num;\n\t\t\theap_size++;\n\t\t\t\n\t\t\tif (heap_size == n)\n\t\t\t{\n\t\t\t\theap_build(heap);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (num > heap[0])\n\t\t\t{\n\t\t\t\theap[0] = num;\n\t\t\t\theap_sift_down(heap, 0);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach_reverse(i; 0 .. n)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theap_sift_down(heap, 0);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}",
      "timestamp": 1666123574,
      "stdout": "",
      "stderr": "/tmp/tmpkjfvkbhz.d(22): Error: undefined identifier `heap_build`\n/tmp/tmpkjfvkbhz.d(30): Error: undefined identifier `heap_sift_down`\n/tmp/tmpkjfvkbhz.d(40): Error: undefined identifier `heap_sift_down`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkjfvkbhz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}