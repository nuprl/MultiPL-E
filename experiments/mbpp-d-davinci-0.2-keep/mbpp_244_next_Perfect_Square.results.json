{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t\ti++;\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong x = 1;\n\twhile(x*x < N)\n\t{\n\t\tx++;\n\t}\n\treturn x*x;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfppcshk4.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpfppcshk4.__unittest_L17_C1() [0x427a9e]\n??:? void tmpfppcshk4.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp54rq7396.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp54rq7396.__unittest_L17_C1() [0x427a9e]\n??:? void tmp54rq7396.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong next_Perfect_Square = (long)ceil(sqrt(N));\n\treturn next_Perfect_Square * next_Perfect_Square;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "/tmp/tmppyjo85d1.d(10): Error: C style cast illegal, use `cast(long)ceil(sqrt(N))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppyjo85d1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i * i <= N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = (long)sqrt(N);\n\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "/tmp/tmpown9jcqq.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpown9jcqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = (long)sqrt(N);\n\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "/tmp/tmpown9jcqq.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpown9jcqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = cast(long)sqrt(N);\n\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpyyj6bjud.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyj6bjud.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i < N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4c6xy_h0.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp4c6xy_h0.__unittest_L15_C1() [0x427a9e]\n??:? void tmp4c6xy_h0.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N) \n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i < N) \n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp20au0f34.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp20au0f34.__unittest_L17_C1() [0x427a9e]\n??:? void tmp20au0f34.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 0;\n\twhile (i * i < N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc19c1co1.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpc19c1co1.__unittest_L15_C1() [0x427a9e]\n??:? void tmpc19c1co1.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i < N)\n\t{\n\t\ti = i + 1;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprxom3ghh.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmprxom3ghh.__unittest_L17_C1() [0x427a5c]\n??:? void tmprxom3ghh.__modtest() [0x427ab8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = cast(long)sqrt(N);\n\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpyyj6bjud.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyj6bjud.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrtN = cast(long)sqrt(N);\n\treturn (sqrtN + 1) * (sqrtN + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp8m455y77.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8m455y77.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = sqrt(N);\n\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpkgypwp_2.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgypwp_2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\treturn cast(long)(ceil(sqrt(N)) + 1) * cast(long)(ceil(sqrt(N)) + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpadj6_vln.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\n/tmp/tmpadj6_vln.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpadj6_vln.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = (long)sqrt(N);\n\tif(sqrt_N * sqrt_N == N)\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n\telse\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpgjm9w_e0.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjm9w_e0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\treturn cast(long)(ceil(sqrt(N))+1)*cast(long)(ceil(sqrt(N))+1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpy58hncni.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\n/tmp/tmpy58hncni.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy58hncni.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i<N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0r4ic9zv.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp0r4ic9zv.__unittest_L17_C1() [0x427a9e]\n??:? void tmp0r4ic9zv.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(true)\n\t{\n\t\tif(i*i > N)\n\t\t\treturn i*i;\n\t\telse\n\t\t\ti++;\n\t}\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t\ti++;\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_dlhb_mg.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp_dlhb_mg.__unittest_L15_C1() [0x427a9e]\n??:? void tmp_dlhb_mg.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = (long)sqrt(N);\n\tif (sqrt_N * sqrt_N == N)\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n\telse\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpwljsgdqp.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwljsgdqp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong next_Perfect_Square = 0;\n\tlong sqrt_N = (long)sqrt(N);\n\tif(sqrt_N * sqrt_N == N)\n\t{\n\t\tnext_Perfect_Square = (sqrt_N + 1) * (sqrt_N + 1);\n\t}\n\telse\n\t{\n\t\tnext_Perfect_Square = (sqrt_N + 1) * (sqrt_N + 1);\n\t}\n\treturn next_Perfect_Square;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpozvi2o1k.d(11): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpozvi2o1k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = cast(long)sqrt(N);\n\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpyyj6bjud.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyj6bjud.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong next_Perfect_Square = N;\n\twhile(true)\n\t{\n\t\tif(next_Perfect_Square == (long)sqrt(next_Perfect_Square))\n\t\t{\n\t\t\treturn next_Perfect_Square;\n\t\t}\n\t\tnext_Perfect_Square++;\n\t}\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpcqnu614a.d(13): Error: C style cast illegal, use `cast(long)sqrt(next_Perfect_Square)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcqnu614a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i < N)\n\t{\n\t\ti = i + 1;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpoy1ju_hq.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpoy1ju_hq.__unittest_L17_C1() [0x427a58]\n??:? void tmpoy1ju_hq.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong n = (long)sqrt(N);\n\treturn (n+1)*(n+1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpnrex8ldz.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrex8ldz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t\ti++;\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_dlhb_mg.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp_dlhb_mg.__unittest_L15_C1() [0x427a9e]\n??:? void tmp_dlhb_mg.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = cast(long)sqrt(N);\n\t\n\tif(sqrt_N * sqrt_N == N)\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n\telse\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpz374dcm_.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz374dcm_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\treturn cast(long) ceil(sqrt(N)) + 1;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpbn1yg3it.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbn1yg3it.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\tlong j = 1;\n\twhile (i < N)\n\t{\n\t\ti = i + j;\n\t\tj = j + 2;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmu9m16o3.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d4d]\n??:? void tmpmu9m16o3.__unittest_L19_C1() [0x427a70]\n??:? void tmpmu9m16o3.__modtest() [0x427acc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a906]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8dd]\n??:? runModuleUnitTests [0x42b849]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42819c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i < N) \n\t{\n\t\ti *= 2;\n\t}\n\treturn i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp66u0_b3x.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp66u0_b3x.__unittest_L17_C1() [0x427a50]\n??:? void tmp66u0_b3x.__modtest() [0x427aac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrtN = cast(long)sqrt(N);\n\treturn (sqrtN + 1) * (sqrtN + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp8m455y77.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8m455y77.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrtN = cast(long)sqrt(N);\n\treturn (sqrtN + 1) * (sqrtN + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp8m455y77.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8m455y77.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t\ti++;\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\treturn (long) ceil(sqrt(N)) * (long) ceil(sqrt(N));\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpyl29cqgi.d(10): Error: C style cast illegal, use `cast(long)ceil(sqrt(N))`\n/tmp/tmpyl29cqgi.d(10): Error: C style cast illegal, use `cast(long)ceil(sqrt(N))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyl29cqgi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = cast(long)sqrt(N);\n\tlong next_Perfect_Square = (sqrt_N + 1) * (sqrt_N + 1);\n\treturn next_Perfect_Square;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp8fspx92s.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fspx92s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N) \n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong result = 0;\n\tlong sqrt_N = (long)sqrt(N);\n\tif(sqrt_N*sqrt_N == N)\n\t{\n\t\tresult = (sqrt_N+1)*(sqrt_N+1);\n\t}\n\telse\n\t{\n\t\tresult = (sqrt_N+1)*(sqrt_N+1);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp419trp10.d(11): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp419trp10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong x = (long)sqrt(N);\n\treturn (x+1)*(x+1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp35vw1f8x.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp35vw1f8x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = sqrt(N);\n\tif (sqrt_N * sqrt_N == N)\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n\telse\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpo4zrtzda.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4zrtzda.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong temp = sqrt(N);\n\tif(temp * temp == N)\n\t\treturn (temp + 1) * (temp + 1);\n\telse\n\t\treturn (temp + 2) * (temp + 2);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp50o3cj8y.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp50o3cj8y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\treturn (long)ceil(sqrt(N)) * (long)ceil(sqrt(N));\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp94bnupwm.d(10): Error: C style cast illegal, use `cast(long)ceil(sqrt(N))`\n/tmp/tmp94bnupwm.d(10): Error: C style cast illegal, use `cast(long)ceil(sqrt(N))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp94bnupwm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = (long)sqrt(N);\n\tif (sqrt_N * sqrt_N == N)\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n\telse\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpwljsgdqp.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwljsgdqp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N) \n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrtN = cast(long)sqrt(N);\n\tif (sqrtN * sqrtN == N)\n\t\treturn N;\n\telse\n\t\treturn (sqrtN + 1) * (sqrtN + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp1sirzr62.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1sirzr62.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = cast(long)sqrt(N);\n\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpyyj6bjud.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyj6bjud.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N) \n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = N;\n\twhile(true)\n\t{\n\t\tif(i*i > N)\n\t\t\treturn i;\n\t\ti++;\n\t}\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprcfb9ylh.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmprcfb9ylh.__unittest_L18_C1() [0x427a50]\n??:? void tmprcfb9ylh.__modtest() [0x427aac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t\ti++;\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t\ti++;\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_dlhb_mg.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp_dlhb_mg.__unittest_L15_C1() [0x427a9e]\n??:? void tmp_dlhb_mg.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N) \n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(true)\n\t{\n\t\tif(i*i > N)\n\t\t\treturn i*i;\n\t\ti++;\n\t}\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = cast(long)sqrt(N);\n\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpyyj6bjud.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyj6bjud.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\treturn cast(long)ceil(sqrt(N)) * cast(long)ceil(sqrt(N));\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp4arcggzr.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\n/tmp/tmp4arcggzr.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4arcggzr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong n = (long)sqrt(N);\n\tif (n * n == N)\n\t\treturn (n + 1) * (n + 1);\n\telse\n\t\treturn -1;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmprmqpfbfo.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmqpfbfo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\treturn cast(long)ceil(sqrt(N))*cast(long)ceil(sqrt(N));\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpctjoguey.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\n/tmp/tmpctjoguey.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpctjoguey.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t\ti++;\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_dlhb_mg.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp_dlhb_mg.__unittest_L15_C1() [0x427a9e]\n??:? void tmp_dlhb_mg.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(true)\n\t{\n\t\tif(i*i > N)\n\t\t\treturn i*i;\n\t\ti++;\n\t}\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i * i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk_t0a85k.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpk_t0a85k.__unittest_L17_C1() [0x427a9e]\n??:? void tmpk_t0a85k.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\treturn cast(long)(ceil(sqrt(N)) * sqrt(N));\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpf7tttpz3.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\n/tmp/tmpf7tttpz3.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf7tttpz3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrtN = (long)sqrt(N);\n\treturn (sqrtN + 1) * (sqrtN + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpepgmc_d0.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpepgmc_d0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\treturn cast(long)ceil(sqrt(N)) * cast(long)ceil(sqrt(N));\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp4arcggzr.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\n/tmp/tmp4arcggzr.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4arcggzr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i * i <= N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(true)\n\t{\n\t\tif(i*i > N)\n\t\t{\n\t\t\treturn i*i;\n\t\t}\n\t\ti++;\n\t}\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong result = 0;\n\tlong square = 0;\n\tlong i = 1;\n\twhile(square < N)\n\t{\n\t\tsquare = i * i;\n\t\ti++;\n\t}\n\tresult = square;\n\treturn result;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5bgfgy3n.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427d45]\n??:? void tmp5bgfgy3n.__unittest_L21_C1() [0x427ab2]\n??:? void tmp5bgfgy3n.__modtest() [0x427ac8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8d5]\n??:? runModuleUnitTests [0x42b841]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428194]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N) \n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\treturn cast(long)(ceil(sqrt(N)) + 1) * cast(long)(ceil(sqrt(N)) + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpadj6_vln.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\n/tmp/tmpadj6_vln.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpadj6_vln.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong n = (long)sqrt(N);\n\treturn (n+1)*(n+1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpnrex8ldz.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrex8ldz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i < N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4c6xy_h0.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp4c6xy_h0.__unittest_L15_C1() [0x427a9e]\n??:? void tmp4c6xy_h0.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i*i < N) \n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn2xwpl6_.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpn2xwpl6_.__unittest_L17_C1() [0x427a9e]\n??:? void tmpn2xwpl6_.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong n = (long)sqrt(N);\n\treturn (n+1)*(n+1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpnrex8ldz.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrex8ldz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t\ti++;\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_dlhb_mg.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp_dlhb_mg.__unittest_L15_C1() [0x427a9e]\n??:? void tmp_dlhb_mg.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong x = N;\n\twhile(true)\n\t{\n\t\tif(x*x > N)\n\t\t\treturn x;\n\t\tx++;\n\t}\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0z58m3c5.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x427d2d]\n??:? void tmp0z58m3c5.__unittest_L18_C1() [0x427a50]\n??:? void tmp0z58m3c5.__modtest() [0x427aac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba53]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8bd]\n??:? runModuleUnitTests [0x42b829]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42817c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N) \n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t\ti++;\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_dlhb_mg.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp_dlhb_mg.__unittest_L15_C1() [0x427a9e]\n??:? void tmp_dlhb_mg.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i*i < N) \n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn2xwpl6_.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpn2xwpl6_.__unittest_L17_C1() [0x427a9e]\n??:? void tmpn2xwpl6_.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i * i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk_t0a85k.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpk_t0a85k.__unittest_L17_C1() [0x427a9e]\n??:? void tmpk_t0a85k.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong root = (long)sqrt(N);\n\treturn (root+1)*(root+1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpjru7bdk5.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjru7bdk5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N) \n\t{\n\t\ti += 1;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i*i <= N) \n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = (long)sqrt(N);\n\tif (sqrt_N * sqrt_N == N)\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n\telse\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpwljsgdqp.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwljsgdqp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i * i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpk_t0a85k.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpk_t0a85k.__unittest_L17_C1() [0x427a9e]\n??:? void tmpk_t0a85k.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = cast(long)sqrt(N);\n\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpyyj6bjud.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyj6bjud.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong result = 0;\n\tlong i = 1;\n\twhile(result < N)\n\t{\n\t\tresult = i * i;\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgjxtopj0.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d3d]\n??:? void tmpgjxtopj0.__unittest_L19_C1() [0x427aaa]\n??:? void tmpgjxtopj0.__modtest() [0x427ac0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff38]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8cd]\n??:? runModuleUnitTests [0x42b839]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42818c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i < N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4c6xy_h0.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp4c6xy_h0.__unittest_L15_C1() [0x427a9e]\n??:? void tmp4c6xy_h0.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i * i < N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpiv0_g1i5.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpiv0_g1i5.__unittest_L15_C1() [0x427a9e]\n??:? void tmpiv0_g1i5.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = (long)sqrt(N);\n\tif (sqrt_N * sqrt_N == N)\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n\telse\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpwljsgdqp.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwljsgdqp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i;\n\tfor (i = N; ; i++) \n\t{\n\t\tif (i == sqrt(i) * sqrt(i)) \n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpxfv6zc_y.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\n/tmp/tmpxfv6zc_y.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxfv6zc_y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\treturn cast(long)ceil(sqrt(N)) * cast(long)ceil(sqrt(N));\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp4arcggzr.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\n/tmp/tmp4arcggzr.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4arcggzr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i < N) \n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp20au0f34.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp20au0f34.__unittest_L17_C1() [0x427a9e]\n??:? void tmp20au0f34.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{ \n    long i = 1; \n    while (i * i <= N) \n        i++; \n    return i * i; \n} \nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrtN = cast(long)sqrt(N);\n\treturn (sqrtN+1)*(sqrtN+1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpp538n1rj.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp538n1rj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph1a7a8q2.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmph1a7a8q2.__unittest_L17_C1() [0x427a9e]\n??:? void tmph1a7a8q2.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong next_Perfect_Square = N;\n\twhile(true)\n\t{\n\t\tif(next_Perfect_Square % sqrt(next_Perfect_Square) == 0)\n\t\t\treturn next_Perfect_Square;\n\t\telse\n\t\t\tnext_Perfect_Square++;\n\t}\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpl_0te2kx.d(13): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl_0te2kx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = sqrt(N);\n\tif (sqrt_N * sqrt_N == N)\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n\telse\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpo4zrtzda.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4zrtzda.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrtN = (long)sqrt(N);\n\treturn (sqrtN + 1) * (sqrtN + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpepgmc_d0.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpepgmc_d0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\treturn cast(long)ceil(sqrt(N)) * cast(long)ceil(sqrt(N));\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp4arcggzr.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\n/tmp/tmp4arcggzr.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4arcggzr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp54rq7396.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp54rq7396.__unittest_L17_C1() [0x427a9e]\n??:? void tmp54rq7396.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N) \n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpm0yzt5r9.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmpm0yzt5r9.__unittest_L17_C1() [0x427a9e]\n??:? void tmpm0yzt5r9.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = (long)sqrt(N);\n\tif(sqrt_N * sqrt_N == N)\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n\telse\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpgjm9w_e0.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgjm9w_e0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i < N)\n\t\ti++;\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_dlhb_mg.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp_dlhb_mg.__unittest_L15_C1() [0x427a9e]\n??:? void tmp_dlhb_mg.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(true)\n\t{\n\t\tif(i*i > N)\n\t\t\treturn i*i;\n\t\ti++;\n\t}\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\treturn cast(long)ceil(sqrt(N)) * cast(long)ceil(sqrt(N));\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp4arcggzr.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\n/tmp/tmp4arcggzr.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4arcggzr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(true)\n\t{\n\t\tif(i*i > N)\n\t\t\treturn i*i;\n\t\ti++;\n\t}\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i <= N)\n\t\ti++;\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong next_Perfect_Square = N;\n\twhile(!is_Perfect_Square(next_Perfect_Square))\n\t{\n\t\tnext_Perfect_Square++;\n\t}\n\treturn next_Perfect_Square;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpucylidvg.d(11): Error: undefined identifier `is_Perfect_Square`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpucylidvg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 0;\n\twhile (i * i < N)\n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7prbmrfg.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp7prbmrfg.__unittest_L17_C1() [0x427a9e]\n??:? void tmp7prbmrfg.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\treturn cast(long)ceil(sqrt(N)) + 1;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpmmi60q5i.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmmi60q5i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrtN = cast(long)sqrt(N);\n\treturn (sqrtN + 1) * (sqrtN + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp8m455y77.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8m455y77.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\treturn cast(long)ceil(sqrt(N)) * cast(long)ceil(sqrt(N));\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp4arcggzr.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\n/tmp/tmp4arcggzr.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4arcggzr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong square = 0;\n\tlong i = 1;\n\twhile(square < N)\n\t{\n\t\tsquare = i * i;\n\t\ti++;\n\t}\n\treturn square;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2wp59uk2.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d3d]\n??:? void tmp2wp59uk2.__unittest_L19_C1() [0x427aaa]\n??:? void tmp2wp59uk2.__modtest() [0x427ac0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff38]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8cd]\n??:? runModuleUnitTests [0x42b839]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42818c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = sqrt(N);\n\tif (sqrt_N * sqrt_N == N)\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n\telse\n\t\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmpo4zrtzda.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4zrtzda.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i * i < N) \n\t{\n\t\ti++;\n\t}\n\treturn i * i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp20au0f34.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x427d35]\n??:? void tmp20au0f34.__unittest_L17_C1() [0x427a9e]\n??:? void tmp20au0f34.__modtest() [0x427ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa0d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8c5]\n??:? runModuleUnitTests [0x42b831]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428184]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = cast(long) sqrt(N);\n\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp2pwpaab_.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2pwpaab_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile(i*i <= N)\n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrtN = cast(long)sqrt(N);\n\treturn (sqrtN + 1) * (sqrtN + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122773,
      "stdout": "",
      "stderr": "/tmp/tmp8m455y77.d(10): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8m455y77.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong i = 1;\n\twhile (i*i <= N) \n\t{\n\t\ti++;\n\t}\n\treturn i*i;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong sqrt_N = (long)sqrt(N);\n\treturn (sqrt_N + 1) * (sqrt_N + 1);\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1665517311,
      "stdout": "",
      "stderr": "/tmp/tmpown9jcqq.d(10): Error: C style cast illegal, use `cast(long)sqrt(N)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpown9jcqq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\n*/\nlong next_Perfect_Square(long N) \n{\n\tlong next_Perfect_Square = 0;\n\tlong i = 1;\n\twhile (next_Perfect_Square < N)\n\t{\n\t\tnext_Perfect_Square = i * i;\n\t\ti++;\n\t}\n\treturn next_Perfect_Square;\n}\nunittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqzkqlj1r.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427d3d]\n??:? void tmpqzkqlj1r.__unittest_L19_C1() [0x427aaa]\n??:? void tmpqzkqlj1r.__modtest() [0x427ac0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff38]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8cd]\n??:? runModuleUnitTests [0x42b839]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42818c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}