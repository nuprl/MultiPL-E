{
  "name": "mbpp_79_word_len",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether the length of the word is odd or not.\n\t\n*/\nbool word_len(string s) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = word_len;\n\n    assert(candidate(\"Hadoop\") == false);\n    assert(candidate(\"great\") == true);\n    assert(candidate(\"structure\") == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn (s.length % 2 == 1);\n}",
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn s.length % 2 == 0;\n}",
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn s.length % 2 == 1;\n}",
    "{\n\treturn s.length % 2 == 1;\n}\n/*\n\tWrite a python function to check whether the length of the word is odd or not.\n*/",
    "{\n\treturn s.length % 2 == 0;\n}"
  ]
}