{
  "name": "mbpp_760_unique_Element",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tbool result = false;\n\t\n\tif(arr.length == 1)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tforeach(i; 0 .. arr.length)\n\t\t{\n\t\t\tforeach(j; 0 .. arr.length)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j] && i != j)\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(result == false)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}",
    "{\n\treturn arr.length == arr.length.uniq;\n}",
    "{\n\tbool flag = true;\n\tforeach(element; arr)\n\t{\n\t\tif(arr.count(element) > 1)\n\t\t{\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n}",
    "{\n\t//return arr.length == arr.sort().length;\n\treturn arr.length == arr.sort().uniq.length;\n}",
    "{\n\treturn arr.length == arr.length.uniq.length;\n}",
    "{\n\treturn arr.length == 1;\n}",
    "{\n    long[] unique = arr.dup.sort().uniq;\n    return unique.length == 1;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tbool flag = true;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i,j;temp)\n\t{\n\t\tif(i==j)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\tif(unique_arr.length == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}",
    "{\n    long[] arr2 = arr.dup;\n    arr2.sort;\n    foreach (i; 0 .. arr2.length - 1) \n    {\n        if (arr2[i] == arr2[i + 1]) \n        {\n            return false;\n        }\n    }\n    return true;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0 .. arr2.length - 1)\n\t{\n\t\tif(arr2[i] == arr2[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.dup.length;\n}",
    "{\n\tif (arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tlong[] temp = arr[1..$];\n\t\tif (arr[0] in temp)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn unique_Element(temp);\n\t}\n}",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\treturn arr.length == arr.length.uniq;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.sort().uniq.length;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\treturn arr.length == arr.sort.uniq.length;\n}",
    "{\n\tif (arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tlong[] temp = arr.dup;\n\t\ttemp.sort;\n\t\tfor (int i = 0; i < temp.length - 1; i++)\n\t\t{\n\t\t\tif (temp[i] == temp[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}",
    "{\n\treturn arr.length == arr.unique.length;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint i;\n\tint j;\n\tint n = arr.length;\n\tint count = 0;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tfor (j = 0; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > 1) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i,j; zip(arr2[0..$-1], arr2[1..$]))\n\t{\n\t\tif(i == j)\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint[] counts = new int[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tcounts[i] = 0;\n\t}\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tcounts[arr[i]]++;\n\t}\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(counts[i] > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint[] count = new int[arr.length];\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < count.length; i++)\n\t{\n\t\tif(count[i] > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn false;\n\telse if(arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tlong[] arr2 = arr.dup;\n\t\tarr2.sort;\n\t\tfor(int i = 0; i < arr2.length-1; i++)\n\t\t{\n\t\t\tif(arr2[i] == arr2[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}",
    "{\n\tbool result = false;\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tif(temp.length == 1)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tfor(int i = 0; i < temp.length - 1; i++)\n\t\t{\n\t\t\tif(temp[i] != temp[i+1])\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto set = arr.toHashSet;\n\treturn set.length == 1;\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i,j; zip(arr_copy[0..$-1], arr_copy[1..$]))\n\t{\n\t\tif(i == j)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(arr[0] == i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count == arr.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tif (arr.length == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (arr.length == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tlong[] arr2 = arr[1..$];\n\t\tif (arr[0] in arr2)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn unique_Element(arr2);\n\t\t}\n\t}\n}",
    "{\n\t\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(arr[0] == i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count == arr.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\treturn arr.length == arr.unique.length;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tauto set = arr.toHashSet;\n\treturn set.length == 1;\n}",
    "{\n\tbool unique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif (i != j)\n\t\t\t{\n\t\t\t\tif (arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tunique = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn unique;\n}",
    "{\n\tbool result = true;\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(i == j)\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool flag = false;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\treturn unique.length == 1;\n}",
    "{\n\tauto set = arr.toHashSet;\n\treturn set.length == 1;\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}",
    "{\n\treturn arr.length == arr.dup.length;\n}",
    "{ \n    return arr.length == arr.distinct.length; \n} \n/*\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\n*/",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\treturn arr.length == arr.length.uniq.length;\n}",
    "{ \n    // Find the first element \n    // that repeats \n    long first = arr[0]; \n    for (long i = 1; i < arr.length; i++) \n    { \n        if (arr[i] == first) \n            return false; \n    } \n  \n    // Find the second element \n    // that repeats \n    long second = arr[1]; \n    for (long i = 2; i < arr.length; i++) \n    { \n        if (arr[i] == second) \n            return false; \n    } \n  \n    return true; \n} ",
    "{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\tunique.unique;\n\treturn unique.length == 1;\n}",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn false;\n\t\n\tif(arr.length == 1)\n\t\treturn true;\n\t\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\t\n\tfor(int i = 0; i < temp.length - 1; i++)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tauto set = arr.toSet;\n\treturn set.length == 1;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tint n = arr.length;\n\tint count = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == 1) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tif (arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tauto arr2 = arr[1..$];\n\t\tif (arr[0] in arr2)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn unique_Element(arr2);\n\t}\n}",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\tif (unique_arr.length == 1)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\tint[] unique_Elements = arr.dup.sort.uniq;\n\treturn unique_Elements.length == 1;\n}",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\treturn arr.length == arr.sort().unique.length;\n}",
    "{\n\tbool isUnique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tisUnique = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn isUnique;\n}",
    "{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\tunique.unique;\n\treturn unique.length == 1;\n}",
    "{\n\tbool flag = false;\n\tforeach(i; arr) \n\t{\n\t\tforeach(j; arr) \n\t\t{\n\t\t\tif(i == j) \n\t\t\t{\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}",
    "{\n\tint i;\n\tint j;\n\tint len = arr.length;\n\tint count = 0;\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tfor (j = i + 1; j < len; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif (count == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tforeach(i; arr)\n\t{\n\t\tif(arr.count(i) > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.sort().uniq.length;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0..arr2.length-1)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tif(arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tlong[] temp = arr[0..$-1];\n\t\tif(arr[$-1] in temp)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn unique_Element(temp);\n\t}\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn false;\n\t\n\tlong first = arr[0];\n\tforeach(i; arr)\n\t{\n\t\tif (i != first)\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\treturn arr.length == arr.length.uniq;\n}",
    "{ \n    // Find the first element \n    // and the last element \n    long first = arr[0]; \n    long last = arr[arr.length - 1]; \n  \n    // If there is only one element \n    if (first == last) \n        return true; \n  \n    // If there are more than one elements, \n    // then sort the array \n    arr.sort(); \n  \n    // Traverse the sorted array \n    for (int i = 0; i < arr.length - 1; i++) { \n  \n        // If there is a duplicate element \n        if (arr[i] == arr[i + 1]) \n            return false; \n    } \n  \n    // No duplicate element is found \n    return true; \n} ",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i; 0 .. arr_copy.length - 1)\n\t{\n\t\tif(arr_copy[i] == arr_copy[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tif (arr.length == 1)\n\t\treturn true;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif (i != j)\n\t\t\t{\n\t\t\t\tif (arr[i] == arr[j])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tbool isUnique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tisUnique = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn isUnique;\n}",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\treturn arr.length == arr.sort().uniq.length;\n}",
    "{\n\treturn arr.length == arr.sort().uniq.length;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i,j; zip(arr2[0..$-1], arr2[1..$]))\n\t{\n\t\tif(i == j)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(arr[0] == i)\n\t\t\tcount++;\n\t}\n\tif(count == arr.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tauto set = arr.sort().uniq;\n\treturn set.length == 1;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\t//return arr.length == arr.distinct.length;\n\treturn arr.length == arr.length.sort.uniq.length;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0 .. arr2.length - 1)\n\t{\n\t\tif(arr2[i] == arr2[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\tunique.uniq;\n\treturn unique.length == 1;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn false;\n\t\n\tlong first = arr[0];\n\t\n\tforeach(num; arr)\n\t{\n\t\tif (num != first)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tbool result = false;\n\tif(arr.length == 1)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tforeach(i; 0 .. arr.length)\n\t\t{\n\t\t\tforeach(j; 0 .. arr.length)\n\t\t\t{\n\t\t\t\tif(i != j)\n\t\t\t\t{\n\t\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(result == false)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tauto s = set(arr);\n\treturn s.length == 1;\n}",
    "{\n\tauto set = arr.toHashSet();\n\treturn set.length == 1;\n}",
    "{\n\treturn arr.length == arr.sort().unique.length;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tfor (int i = 0; i < arr2.length; i++)\n\t{\n\t\tif (arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto result = true;\n\tforeach(i,j; arr)\n\t{\n\t\tif(i != j)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tfor(int i = 0; i < arr2.length; i++)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tauto set = arr.toHashSet();\n\treturn set.length == 1;\n}",
    "{\n\treturn arr.length == arr.uniq.length;\n}",
    "{\n\treturn arr.length == arr.length.uniq;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0 .. arr2.length - 1)\n\t{\n\t\tif(arr2[i] == arr2[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong[] unique = arr.dup.sort.uniq;\n\treturn unique.length == 1;\n}",
    "{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\tunique.unique;\n\treturn unique.length == 1;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\treturn arr_copy.length == arr_copy.uniq.length;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tfor(int i = 0; i < arr2.length; i++)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.length.uniq;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn false;\n\t\n\tlong first = arr[0];\n\t\n\tforeach(i; arr)\n\t{\n\t\tif (i != first)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0..arr2.length-1)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\tif(unique_arr.length == 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\treturn arr.length == arr.sort().unique.length;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0..arr.length)\n\t{\n\t\tforeach(j; 0..arr.length)\n\t\t{\n\t\t\tif(i != j && arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tbool result = true;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j] && i != j)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}",
    "{\n\tif (arr.length == 0)\n\t\treturn false;\n\t\n\tlong first = arr[0];\n\t\n\tforeach(i; 1..arr.length)\n\t{\n\t\tif (arr[i] != first)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.sort().uniq.length;\n}",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\treturn arr.length == arr.sort().uniq.length;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tint n = arr.length;\n\tif (n == 0 || n == 1)\n\t\treturn true;\n\t\n\tarr.sort();\n\t\n\tfor (int i = 1; i < n; i++)\n\t\tif (arr[i] == arr[i - 1])\n\t\t\treturn false;\n\t\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tif (arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tfor (int i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tfor (int j = i + 1; j < arr.length; j++)\n\t\t\t{\n\t\t\t\tif (arr[i] == arr[j])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}",
    "{ \n\treturn arr.length == arr.distinct.length; \n} ",
    "{\n\tif (arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tforeach(i; 1..arr.length)\n\t\t{\n\t\t\tif (arr[0] != arr[i])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.sort().uniq.length;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort();\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\treturn arr.length == arr.length.uniq;\n}",
    "{\n\tlong[] distinct = arr.dup;\n\tdistinct.sort;\n\tdistinct.uniq;\n\treturn distinct.length == 1;\n}",
    "{\n\treturn arr.length == arr.unique.length;\n}",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\tauto s = set(arr);\n\treturn s.length == 1;\n}",
    "{\n\treturn arr.length == arr.dup.length;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}",
    "{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\tif (arr.length == 1)\n\t\treturn true;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif (i != j && arr[i] == arr[j])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tforeach(i; arr)\n\t{\n\t\tif(arr.count(i) > 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\tauto set = arr.toHashSet;\n\treturn set.length == 1;\n}",
    "{\n\tbool unique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tunique = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}",
    "{\n\tif (arr.length == 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (arr.length == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tforeach(i; arr) \n\t\t{\n\t\t\tforeach(j; arr) \n\t\t\t{\n\t\t\t\tif (i != j) \n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}",
    "{\n\tif(arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tforeach(i; 0..arr.length)\n\t\t{\n\t\t\tforeach(j; 0..arr.length)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j] && i != j)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}",
    "{\n\treturn arr.length == arr.dup.length;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tfor(int i=0;i<arr2.length-1;i++)\n\t{\n\t\tif(arr2[i]==arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n    if (arr.length == 1) \n    {\n        return true;\n    }\n    else \n    {\n        auto arr_set = arr.toHashSet();\n        if (arr_set.length == 1) \n        {\n            return true;\n        }\n        else \n        {\n            return false;\n        }\n    }\n}",
    "{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = 0;\n\t}\n\treturn true;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tif(arr.length == 0)\n\t\treturn false;\n\t\n\tif(arr.length == 1)\n\t\treturn true;\n\t\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\t\n\tfor(int i = 0; i < arr2.length - 1; i++)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}",
    "{\n\tif(arr.length == 0) \n\t{\n\t\treturn false;\n\t}\n\telse if(arr.length == 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\tlong[] temp = arr.dup;\n\t\ttemp.sort;\n\t\tfor(int i = 0; i < temp.length - 1; i++) \n\t\t{\n\t\t\tif(temp[i] == temp[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}",
    "{\n\treturn arr.length == arr.sort.length;\n}",
    "{\n\tauto result = arr.front;\n\tforeach(i; arr)\n\t{\n\t\tif(i != result)\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint count = 0;\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = 0;\n\t}\n\treturn true;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\tbool flag = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}",
    "{\n\tbool isUnique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tisUnique = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn isUnique;\n}",
    "{\n\treturn arr.length == 1;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0 .. arr2.length - 1)\n\t{\n\t\tif(arr2[i] == arr2[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}",
    "{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}",
    "{\n\treturn arr.length == arr.distinct.length;\n}",
    "{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}",
    "{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\tunique.unique;\n\treturn unique.length == 1;\n}",
    "{\n\treturn arr.length == arr.sort().uniq.length;\n}",
    "{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0 .. arr2.length-1)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tauto set = arr.toSet;\n\treturn set.length == 1;\n}",
    "{ \n    // Find the first element \n    // and the last element \n    long first = arr[0]; \n    long last = arr[arr.length - 1]; \n  \n    // If the first and last element \n    // are same then there is only \n    // one element \n    if (first == last) \n        return true; \n  \n    // If the first and last element \n    // are not same then there are \n    // more than one elements \n    return false; \n} ",
    "{\n\treturn arr.length == arr.distinct.length;\n}"
  ]
}