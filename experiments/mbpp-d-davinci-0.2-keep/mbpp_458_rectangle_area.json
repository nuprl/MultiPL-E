{
  "name": "mbpp_458_rectangle_area",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to find the area of a rectangle.\n\t\n*/\nlong rectangle_area(long l, long b) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = rectangle_area;\n\n    assert(candidate(10L, 20L) == 200L);\n    assert(candidate(10L, 5L) == 50L);\n    assert(candidate(4L, 2L) == 8L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l*b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{ \n    return l * b; \n} ",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{ \n\treturn l * b; \n} ",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}\n/*",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{ \n    return l * b; \n} ",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}\n/*",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{ \n\treturn l * b; \n} ",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{ \n    return l * b; \n} ",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l*b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}",
    "{\n\treturn l * b;\n}"
  ]
}