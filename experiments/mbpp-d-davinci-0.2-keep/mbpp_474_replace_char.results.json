{
  "name": "mbpp_474_replace_char",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tint i;\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpo33d5er9.d(12): Error: variable `i` is shadowing variable `tmpo33d5er9.replace_char.i`\n/tmp/tmpo33d5er9.d(14): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo33d5er9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnon1eeqw.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnon1eeqw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpulf76n_u.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulf76n_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmphgy2u5hm.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgy2u5hm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach (c; str1) \n\t{\n\t\tif (c == ch) \n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp34tb5e0z.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp34tb5e0z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint len = str1.length;\n\tstring str2 = \"\";\n\tfor (int i = 0; i < len; i++) {\n\t\tif (str1[i] == ch[0]) {\n\t\t\tstr2 = str2 ~ newch;\n\t\t} else {\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpwj38x6su.d(10): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwj38x6su.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmphgy2u5hm.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgy2u5hm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\tstr2 = \"\";\n\tfor (i = 0; i < str1.length; i++) \n\t{\n\t\tif (str1[i] == ch[0]) \n\t\t{\n\t\t\tstr2 = str2 + newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 = str2 + str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp992m2h6w.d(17): Error: invalid array operation `str2 + newch` (possible missing [])\n/tmp/tmp992m2h6w.d(21): Error: incompatible types for `(str2) + (str1[cast(ulong)i])`: `string` and `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp992m2h6w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0pvbq04c.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pvbq04c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmphgy2u5hm.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgy2u5hm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpulf76n_u.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulf76n_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tint len = str1.length;\n\tstring str2;\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tif (str1[i] == ch) \n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmpyagwbfrb.d(11): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\n/tmp/tmpyagwbfrb.d(15): Error: incompatible types for `(str1[cast(ulong)i]) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyagwbfrb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\tstr2 = \"\";\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] == ch[0])\n\t\t\tstr2 += newch;\n\t\telse\n\t\t\tstr2 += str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmpuhvh02tr.d(16): Error: slice `str2` is not mutable\n/tmp/tmpuhvh02tr.d(18): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuhvh02tr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmphgy2u5hm.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgy2u5hm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmpfajn96m8.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfajn96m8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach (i; 0 .. str1.length)\n\t{\n\t\tif (str1[i] == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmp42_93txa.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42_93txa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmp4zw6zk4m.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zw6zk4m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i; 0 .. str1.length)\n\t{\n\t\tif(str1[i] == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmpuw7vp2yg.d(13): Error: incompatible types for `(str1[i]) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuw7vp2yg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\t\n\tstr2 = \"\";\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmpdt7sfa7w.d(15): Error: variable `i` is shadowing variable `tmpdt7sfa7w.replace_char.i`\n/tmp/tmpdt7sfa7w.d(17): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdt7sfa7w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i = 0;\n\tstring str2 = \"\";\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] == ch[0])\n\t\t{\n\t\t\tstr2 = str2 ~ newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1) {\n\t\tif(c == ch) {\n\t\t\tstr2 ~= newch;\n\t\t} else {\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmpuw6089jo.d(12): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuw6089jo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnon1eeqw.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnon1eeqw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmp3im6ojt2.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3im6ojt2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpnon1eeqw.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnon1eeqw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmp4zw6zk4m.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zw6zk4m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1) {\n\t\tif(c == ch[0]) {\n\t\t\tstr2 ~= newch;\n\t\t} else {\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint len = str1.length;\n\tstring result = \"\";\n\tforeach(i; 0 .. len) {\n\t\tif(str1[i] == ch[0]) {\n\t\t\tresult ~= newch;\n\t\t} else {\n\t\t\tresult ~= str1[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmppo3squnc.d(10): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppo3squnc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\tstr2 = \"\";\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] == ch[0])\n\t\t{\n\t\t\tstr2 = str2 ~ newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0pvbq04c.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pvbq04c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach (c; str1)\n\t{\n\t\tif (c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1) {\n\t\tif(c == ch[0]) {\n\t\t\tstr2 ~= newch;\n\t\t} else {\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach (c; str1) \n\t{\n\t\tif (c == ch) \n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmprqn97uv7.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqn97uv7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0pvbq04c.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pvbq04c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpulf76n_u.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulf76n_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i; 0 .. str1.length)\n\t{\n\t\tif(str1[i] == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\tstr2 = \"\";\n\tfor (i = 0; i < str1.length; i++) {\n\t\tif (str1[i] == ch) {\n\t\t\tstr2 += newch;\n\t\t} else {\n\t\t\tstr2 += str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmpwfle4ged.d(14): Error: incompatible types for `(str1[cast(ulong)i]) == (ch)`: `immutable(char)` and `string`\n/tmp/tmpwfle4ged.d(15): Error: slice `str2` is not mutable\n/tmp/tmpwfle4ged.d(17): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwfle4ged.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpulf76n_u.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulf76n_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\tstr2 = \"\";\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] == ch[0])\n\t\t{\n\t\t\tstr2 = str2 ~ newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0pvbq04c.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pvbq04c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmpf1pja59g.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1pja59g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i, c; str1) \n\t{\n\t\tif(c == ch) \n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmpq_n5z_3c.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_n5z_3c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tint i;\n\tfor (i = 0; i < str1.length; i++) \n\t{\n\t\tif (str1[i] == ch[0]) \n\t\t{\n\t\t\tstr2 += newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 += str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmp079gnj5b.d(16): Error: slice `str2` is not mutable\n/tmp/tmp079gnj5b.d(20): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp079gnj5b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i; 0 .. str1.length)\n\t{\n\t\tif(str1[i] == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0pvbq04c.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pvbq04c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\t\n\tfor(i = 0; i < str1.length; i++)\n\t{\n\t\tif(str1[i] == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmphgy2u5hm.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgy2u5hm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmp3im6ojt2.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3im6ojt2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tint i;\n\t\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmphgy2u5hm.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgy2u5hm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint len = str1.length;\n\tint i;\n\tstring str2 = \"\";\n\tfor (i = 0; i < len; i++) {\n\t\tif (str1[i] == ch) {\n\t\t\tstr2 = str2 ~ newch;\n\t\t} else {\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmp4r81kt14.d(10): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\n/tmp/tmp4r81kt14.d(14): Error: incompatible types for `(str1[cast(ulong)i]) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4r81kt14.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring result = \"\";\n\tforeach(i, ch; str1)\n\t{\n\t\tif(str1[i] == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= str1[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmpg3qiseul.d(12): Error: variable `ch` is shadowing variable `tmpg3qiseul.replace_char.ch`\n/tmp/tmpg3qiseul.d(12): Error: variable `i` is shadowing variable `tmpg3qiseul.replace_char.i`\n/tmp/tmpg3qiseul.d(14): Error: only one index allowed to index `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg3qiseul.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmphgy2u5hm.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgy2u5hm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1) \n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i = 0;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr1[i] = newch[0];\n\t\t}\n\t\ti++;\n\t}\n\treturn str1;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmp6uu8q544.d(15): Error: cannot modify `immutable` expression `str1[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6uu8q544.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpulf76n_u.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulf76n_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint len = str1.length;\n\tstring str2 = \"\";\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tif (str1[i] != ch[0]) \n\t\t{\n\t\t\tstr2 += str1[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 += newch[0];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmp9xhlbucu.d(10): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\n/tmp/tmp9xhlbucu.d(16): Error: slice `str2` is not mutable\n/tmp/tmp9xhlbucu.d(20): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9xhlbucu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmphgy2u5hm.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgy2u5hm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpulf76n_u.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulf76n_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach (i, c; str1) {\n\t\tif (c == ch) {\n\t\t\tstr2 ~= newch;\n\t\t} else {\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmpfywcexcr.d(12): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfywcexcr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint len = str1.length;\n\tstring result = \"\";\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tif (str1[i] == ch[0]) \n\t\t{\n\t\t\tresult += newch;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult += str1[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmp_6cdcrsd.d(10): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\n/tmp/tmp_6cdcrsd.d(16): Error: slice `result` is not mutable\n/tmp/tmp_6cdcrsd.d(20): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_6cdcrsd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\tstr2 = \"\";\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] == ch[0])\n\t\t{\n\t\t\tstr2 = str2 ~ newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(char c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpulf76n_u.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulf76n_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\t\n\tstr2 = \"\";\n\t\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] == ch)\n\t\t{\n\t\t\tstr2 = str2 ~ newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmp7psc2qj7.d(17): Error: incompatible types for `(str1[cast(ulong)i]) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7psc2qj7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tfor (int i = 0; i < str1.length; i++) \n\t{\n\t\tif (str1[i] == ch[0]) \n\t\t{\n\t\t\tstr2 += newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 += str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmp1tylliu4.d(15): Error: slice `str2` is not mutable\n/tmp/tmp1tylliu4.d(19): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1tylliu4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i = 0;\n\tint len = str1.length;\n\tstring str2 = \"\";\n\twhile (i < len)\n\t{\n\t\tif (str1[i] == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmpdbx7yx1f.d(11): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\n/tmp/tmpdbx7yx1f.d(15): Error: incompatible types for `(str1[cast(ulong)i]) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdbx7yx1f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmp4zw6zk4m.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zw6zk4m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1) {\n\t\tif(c == ch) {\n\t\t\tstr2 ~= newch;\n\t\t} else {\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmpuw6089jo.d(12): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuw6089jo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmp4zw6zk4m.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zw6zk4m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\tstr2 = \"\";\n\tfor (i = 0; i < str1.length; i++) {\n\t\tif (str1[i] == ch[0]) {\n\t\t\tstr2 = str2 ~ newch;\n\t\t} else {\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpulf76n_u.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulf76n_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1) \n\t{\n\t\tif(c == ch[0]) \n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\tstr2 = \"\";\n\tfor (i = 0; i < str1.length; i++) \n\t{\n\t\tif (str1[i] == ch[0]) \n\t\t{\n\t\t\tstr2 = str2 ~ newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmphgy2u5hm.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgy2u5hm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1) \n\t{\n\t\tif(c == ch) \n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmpvboxw9v4.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvboxw9v4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1) \n\t{\n\t\tif (c == ch) \n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp7dzfyjtq.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dzfyjtq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1) \n\t{\n\t\tif(c == ch[0]) \n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmpulf76n_u.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulf76n_u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0pvbq04c.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0pvbq04c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach (c; str1) {\n\t\tif (c == ch) {\n\t\t\tresult ~= newch;\n\t\t} else {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmptfkmh_1q.d(12): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptfkmh_1q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\tstr2 = \"\";\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp83x7fi9p.d(13): Error: variable `i` is shadowing variable `tmp83x7fi9p.replace_char.i`\n/tmp/tmp83x7fi9p.d(15): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83x7fi9p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\tstr2 = \"\";\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] == ch[0])\n\t\t\tstr2 = str2 ~ newch;\n\t\telse\n\t\t\tstr2 = str2 ~ str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i; 0 .. str1.length)\n\t{\n\t\tif(str1[i] == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i; 0 .. str1.length)\n\t{\n\t\tif(str1[i] == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint pos = str1.find(ch);\n\twhile (pos != -1) {\n\t\tstr1 = str1[0..pos] ~ newch ~ str1[pos+1..$];\n\t\tpos = str1.find(ch);\n\t}\n\treturn str1;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp4j5s0404.d(10): Error: no property `find` for type `string`\n/tmp/tmp4j5s0404.d(13): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4j5s0404.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmp4zw6zk4m.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zw6zk4m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "/tmp/tmpfajn96m8.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfajn96m8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring res = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tres ~= newch;\n\t\telse\n\t\t\tres ~= c;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tint i;\n\t\n\tstr2 = str1;\n\t\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] == ch[0])\n\t\t{\n\t\t\tstr2[i] = newch[0];\n\t\t}\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmpq8eowb9l.d(19): Error: cannot modify `immutable` expression `str2[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq8eowb9l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517344,
      "stdout": "",
      "stderr": "/tmp/tmp0vk86i9q.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vk86i9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i; 0 .. str1.length)\n\t{\n\t\tif(str1[i] == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmpn_uiwn9f.d(13): Error: incompatible types for `(str1[i]) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn_uiwn9f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}