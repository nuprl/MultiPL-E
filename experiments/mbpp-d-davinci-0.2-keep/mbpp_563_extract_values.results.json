{
  "name": "mbpp_563_extract_values",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq05aetyy.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpq05aetyy.__unittest_L31_C1() [0x427d4a]\n??:? void tmpq05aetyy.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp51j4u34t.d(16): Error: no property `find` for type `string`\n/tmp/tmp51j4u34t.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51j4u34t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp614cy8kw.d(16): Error: no property `find` for type `string`\n/tmp/tmp614cy8kw.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp614cy8kw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] values;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tvalues ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn values;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp3ims32ck.d(16): Error: no property `find` for type `string`\n/tmp/tmp3ims32ck.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ims32ck.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (start < text.length) \n\t{\n\t\tstart = text.indexOf('\"', start);\n\t\tif (start == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tend = text.indexOf('\"', start + 1);\n\t\tif (end == -1) \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpjqo9gszz.d(15): Error: no property `indexOf` for type `string`\n/tmp/tmpjqo9gszz.d(20): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqo9gszz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\twhile (text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2ic0wf8a.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428dbd]\n??:? void tmp2ic0wf8a.__unittest_L30_C1() [0x427d46]\n??:? void tmp2ic0wf8a.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afa5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b034]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af31]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428aed]\n??:? runModuleUnitTests [0x42decd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429280]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tint start = 0;\n\tint end = 0;\n\tstring[] result;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpeksqx15s.d(16): Error: no property `find` for type `string`\n/tmp/tmpeksqx15s.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeksqx15s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i + 1;\n\t\t\tend = text.indexOf('\"', start);\n\t\t\tresult ~= text[start..end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8f0nocm6.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8f0nocm6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\t\n\twhile (start < text.length)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp6ipnyt5f.d(17): Error: no property `find` for type `string`\n/tmp/tmp6ipnyt5f.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ipnyt5f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint index = 0;\n\twhile (true)\n\t{\n\t\tstart = text.indexOf(\"\\\"\", index);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tindex = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmptjuoh8fw.d(16): Error: no property `indexOf` for type `string`\n/tmp/tmptjuoh8fw.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptjuoh8fw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] values;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tvalues ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn values;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp5qodanwk.d(15): Error: no property `find` for type `string`\n/tmp/tmp5qodanwk.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5qodanwk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] values;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\twhile (text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tvalues ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn values;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5eact9_i.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428dbd]\n??:? void tmp5eact9_i.__unittest_L30_C1() [0x427d46]\n??:? void tmp5eact9_i.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afa5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b034]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af31]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428aed]\n??:? runModuleUnitTests [0x42decd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429280]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmprusakjnl.d(15): Error: no property `find` for type `string`\n/tmp/tmprusakjnl.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprusakjnl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp74dj7_a1.d(16): Error: no property `find` for type `string`\n/tmp/tmp74dj7_a1.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74dj7_a1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find('\"', start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp_nop7x49.d(15): Error: no property `find` for type `string`\n/tmp/tmp_nop7x49.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_nop7x49.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\",start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\",start+1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end+1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpo1caz9d_.d(15): Error: no property `find` for type `string`\n/tmp/tmpo1caz9d_.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo1caz9d_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\twhile (i < text.length && text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517375,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpo1q_cdop.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpo1q_cdop.__unittest_L30_C1() [0x427d4a]\n??:? void tmpo1q_cdop.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) break;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) break;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp6gzpi_pl.d(16): Error: no property `find` for type `string`\n/tmp/tmp6gzpi_pl.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6gzpi_pl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\tend = text.indexOf('\"', i + 1);\n\t\t\tresult ~= text[start + 1 .. end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpab5w6n40.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpab5w6n40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = text.split(\"\\\"\");\n\treturn result[1..$-1];\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmppjjz9v68.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjjz9v68.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\t\n\t\tif(start == -1 || end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpgzatovqh.d(16): Error: no property `find` for type `string`\n/tmp/tmpgzatovqh.d(17): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzatovqh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length) \n\t{\n\t\tif(text[i] == '\"') \n\t\t{\n\t\t\tstart = i + 1;\n\t\t\tend = text.indexOf('\"', start);\n\t\t\tresult ~= text[start .. end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpe81v1gtv.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe81v1gtv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpjxwgz2uj.d(15): Error: no property `find` for type `string`\n/tmp/tmpjxwgz2uj.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxwgz2uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start_pos = 0;\n\tint end_pos = 0;\n\twhile(true)\n\t{\n\t\tstart_pos = text.find(\"\\\"\", start_pos);\n\t\tif(start_pos == -1)\n\t\t\tbreak;\n\t\tend_pos = text.find(\"\\\"\", start_pos + 1);\n\t\tif(end_pos == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start_pos + 1 .. end_pos];\n\t\tstart_pos = end_pos + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpvd73j99s.d(15): Error: no property `find` for type `string`\n/tmp/tmpvd73j99s.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvd73j99s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i;\n\t\t\tend = text.find('\"', i + 1);\n\t\t\tif (end == -1) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tresult ~= text[start + 1 .. end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp_fqi3zqz.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_fqi3zqz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1) break;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1) break;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpf6ur2iy8.d(16): Error: no property `find` for type `string`\n/tmp/tmpf6ur2iy8.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf6ur2iy8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpjxwgz2uj.d(15): Error: no property `find` for type `string`\n/tmp/tmpjxwgz2uj.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxwgz2uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\t\n\t\tif (start == -1 || end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\t\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpkkh5gfnc.d(16): Error: no property `find` for type `string`\n/tmp/tmpkkh5gfnc.d(17): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkkh5gfnc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start+1..end];\n\t\t\t\tstart = 0;\n\t\t\t\tend = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxru113ao.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428da5]\n??:? void tmpxru113ao.__unittest_L34_C1() [0x427d2a]\n??:? void tmpxru113ao.__modtest() [0x42800c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428afe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af8d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b01c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af19]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ad5]\n??:? runModuleUnitTests [0x42deb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429268]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (start < text.length)\n\t{\n\t\tstart = text.indexOf(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmphoilwi4f.d(15): Error: no property `indexOf` for type `string`\n/tmp/tmphoilwi4f.d(18): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphoilwi4f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp614cy8kw.d(16): Error: no property `find` for type `string`\n/tmp/tmp614cy8kw.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp614cy8kw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpgg8ocdtw.d(16): Error: no property `find` for type `string`\n/tmp/tmpgg8ocdtw.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgg8ocdtw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\tend = text.indexOf('\"', start + 1);\n\t\t\tresult ~= text[start + 1 .. end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpu0guhuv_.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0guhuv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1) break;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1) break;\n\t\t\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpskcd5fe9.d(16): Error: no property `find` for type `string`\n/tmp/tmpskcd5fe9.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpskcd5fe9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint ab = 0;\n\tint ac = 0;\n\tint ad = 0;\n\tint ae = 0;\n\tint af = 0;\n\tint ag = 0;\n\tint ah = 0;\n\tint ai = 0;\n\tint aj = 0;\n\tint ak = 0;\n\tint al = 0;\n\tint am = 0;\n\tint an = 0;\n\tint ao = 0;\n\tint ap = 0;\n\tint aq = 0;\n\tint ar = 0;\n\tint as = 0;\n\tint at = 0;\n\tint au = 0;\n\tint av = 0;\n\tint aw = 0;\n\tint ax = 0;\n\tint ay = 0;\n\tint az = 0;\n\tint ba = 0;\n\tint bb = 0;\n\tint bc = 0;\n\tint bd = 0;\n\tint be = 0;\n\tint bf = 0;\n\tint bg = 0;\n\tint bh = 0;\n\tint bi = 0;\n\tint bj = 0;\n\tint bk = 0;\n\tint bl = 0;\n\tint bm = 0;\n\tint bn = 0;\n\tint bo = 0;\n\tint bp = 0;\n\tint bq = 0;\n\tint br = 0;\n\tint bs = 0;\n\tint bt = 0;\n\tint bu = 0;\n\tint bv = 0;\n\tint bw = 0;\n\tint bx = 0;\n\tint by = 0\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123015,
      "stdout": "",
      "stderr": "/tmp/tmp38uvsdzj.d(80): Error: semicolon expected, not `unittest`\n/tmp/tmp38uvsdzj.d(80): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38uvsdzj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp0i6d6u34.d(17): Error: no property `find` for type `string`\n/tmp/tmp0i6d6u34.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0i6d6u34.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tif (start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start+1..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl283gg55.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428da5]\n??:? void tmpl283gg55.__unittest_L33_C1() [0x427d2e]\n??:? void tmpl283gg55.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428afe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af8d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b01c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af19]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ad5]\n??:? runModuleUnitTests [0x42deb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429268]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\t\n\twhile(start < len) {\n\t\tstart = text.find('\"', start);\n\t\tif(start == -1) break;\n\t\tend = text.find('\"', start + 1);\n\t\tif(end == -1) break;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp6skfqmmk.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp6skfqmmk.d(16): Error: no property `find` for type `string`\n/tmp/tmp6skfqmmk.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6skfqmmk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(start < text.length)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp72c7f1ds.d(15): Error: no property `find` for type `string`\n/tmp/tmp72c7f1ds.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72c7f1ds.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp8ddwk3_n.d(17): Error: no property `find` for type `string`\n/tmp/tmp8ddwk3_n.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ddwk3_n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t\tcount++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpj5eucddq.d(17): Error: no property `find` for type `string`\n/tmp/tmpj5eucddq.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5eucddq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = text.split(\"\\\"\");\n\tresult.remove(0);\n\tresult.remove(result.length - 1);\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpx_mmgr3o.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_mmgr3o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpjxwgz2uj.d(15): Error: no property `find` for type `string`\n/tmp/tmpjxwgz2uj.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxwgz2uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpvvhhwbz_.d(16): Error: no property `find` for type `string`\n/tmp/tmpvvhhwbz_.d(21): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvhhwbz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\tint j = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile (text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplbnz9ozm.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428dcd]\n??:? void tmplbnz9ozm.__unittest_L36_C1() [0x427d52]\n??:? void tmplbnz9ozm.__modtest() [0x428034]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e107]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b044]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428afd]\n??:? runModuleUnitTests [0x42dedd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429290]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result = [];\n\tint start = 0;\n\tint end = 0;\n\tbool in_quotes = false;\n\tforeach(i, c; text)\n\t{\n\t\tif(c == '\"')\n\t\t{\n\t\t\tif(in_quotes)\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tin_quotes = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstart = i + 1;\n\t\t\t\tin_quotes = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpferufg19.d(20): Error: cannot implicitly convert expression `i` of type `ulong` to `int`\n/tmp/tmpferufg19.d(26): Error: cannot implicitly convert expression `i + 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpferufg19.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i + 1;\n\t\t\tend = text.indexOf('\"', start);\n\t\t\tresult ~= text[start..end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8f0nocm6.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8f0nocm6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (start < text.length)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmplp_pwgvz.d(16): Error: no property `find` for type `string`\n/tmp/tmplp_pwgvz.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplp_pwgvz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp929d1phi.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmp929d1phi.__unittest_L33_C1() [0x427d4a]\n??:? void tmp929d1phi.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start+1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end+1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp_a0cj2ya.d(16): Error: no property `find` for type `string`\n/tmp/tmp_a0cj2ya.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_a0cj2ya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\twhile(start < len)\n\t{\n\t\tstart = text.indexOf(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmps8hicewa.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmps8hicewa.d(16): Error: no property `indexOf` for type `string`\n/tmp/tmps8hicewa.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8hicewa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\twhile (text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2ic0wf8a.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428dbd]\n??:? void tmp2ic0wf8a.__unittest_L30_C1() [0x427d46]\n??:? void tmp2ic0wf8a.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afa5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b034]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af31]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428aed]\n??:? runModuleUnitTests [0x42decd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429280]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) {\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) {\n\t\t\tbreak;\n\t\t}\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) {\n\t\t\tbreak;\n\t\t}\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp_n_nbsxv.d(14): Error: no property `find` for type `string`\n/tmp/tmp_n_nbsxv.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_n_nbsxv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t\t++count;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp4w5_i8zy.d(16): Error: no property `find` for type `string`\n/tmp/tmp4w5_i8zy.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4w5_i8zy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint index = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", index);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tindex = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp9ace9m6g.d(16): Error: no property `find` for type `string`\n/tmp/tmp9ace9m6g.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ace9m6g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i + 1;\n\t\t\tend = text.indexOf('\"', start);\n\t\t\tresult ~= text[start .. end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse\n\t\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp4lkhqx6f.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4lkhqx6f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp614cy8kw.d(16): Error: no property `find` for type `string`\n/tmp/tmp614cy8kw.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp614cy8kw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\twhile (start < len)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpzxexom2w.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpzxexom2w.d(16): Error: no property `find` for type `string`\n/tmp/tmpzxexom2w.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxexom2w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile (i < text.length && text[i] != '\"') \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start + 1 .. end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = text.find('\"');\n\twhile (start != -1) \n\t{\n\t\tauto end = text.find('\"', start + 1);\n\t\tif (end != -1) \n\t\t{\n\t\t\tresult ~= text[start + 1 .. end];\n\t\t\tstart = text.find('\"', end + 1);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpsk1bl_i_.d(11): Error: no property `find` for type `string`\n/tmp/tmpsk1bl_i_.d(14): Error: no property `find` for type `string`\n/tmp/tmpsk1bl_i_.d(25): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsk1bl_i_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i + 1;\n\t\t\ti++;\n\t\t\twhile (text[i] != '\"') \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\t\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp2c8i8wxj.d(17): Error: no property `find` for type `string`\n/tmp/tmp2c8i8wxj.d(21): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2c8i8wxj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t\tcount++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp77h0eb59.d(17): Error: no property `find` for type `string`\n/tmp/tmp77h0eb59.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp77h0eb59.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start_index = 0;\n\tint end_index = 0;\n\tint index = 0;\n\twhile(index < text.length) \n\t{\n\t\tif(text[index] == '\"') \n\t\t{\n\t\t\tstart_index = index;\n\t\t\tend_index = text.indexOf('\"', start_index + 1);\n\t\t\tresult ~= text[start_index..end_index];\n\t\t\tindex = end_index + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp2qctb89i.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2qctb89i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (start < text.length)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpd1fg9hz8.d(15): Error: no property `find` for type `string`\n/tmp/tmpd1fg9hz8.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd1fg9hz8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp51j4u34t.d(16): Error: no property `find` for type `string`\n/tmp/tmp51j4u34t.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51j4u34t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tend = text.find('\"', start + 1);\n\t\t\n\t\tif (start == -1 || end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\t\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpz04zwop8.d(16): Error: no property `find` for type `string`\n/tmp/tmpz04zwop8.d(17): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz04zwop8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp74dj7_a1.d(16): Error: no property `find` for type `string`\n/tmp/tmp74dj7_a1.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74dj7_a1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpjxwgz2uj.d(15): Error: no property `find` for type `string`\n/tmp/tmpjxwgz2uj.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxwgz2uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp51j4u34t.d(16): Error: no property `find` for type `string`\n/tmp/tmp51j4u34t.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51j4u34t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\",start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\",start+1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end+1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpo1caz9d_.d(15): Error: no property `find` for type `string`\n/tmp/tmpo1caz9d_.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo1caz9d_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tif (start == 0) \n\t\t\t{\n\t\t\t\tstart = i + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start .. end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpdy3lhznz.d(16): Error: no property `find` for type `string`\n/tmp/tmpdy3lhznz.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdy3lhznz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(start < text.length)\n\t{\n\t\tstart = text.indexOf(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpauti2_sq.d(15): Error: no property `indexOf` for type `string`\n/tmp/tmpauti2_sq.d(18): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpauti2_sq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp8ddwk3_n.d(17): Error: no property `find` for type `string`\n/tmp/tmp8ddwk3_n.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ddwk3_n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp1795stdx.d(16): Error: no property `find` for type `string`\n/tmp/tmp1795stdx.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1795stdx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp614cy8kw.d(16): Error: no property `find` for type `string`\n/tmp/tmp614cy8kw.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp614cy8kw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\t\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tj = i + 1;\n\t\t\twhile(text[j] != '\"')\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tresult ~= text[i..j];\n\t\t\ti = j + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7z5h0v5f.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428dcd]\n??:? void tmp7z5h0v5f.__unittest_L35_C1() [0x427d52]\n??:? void tmp7z5h0v5f.__modtest() [0x428034]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e107]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b044]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428afd]\n??:? runModuleUnitTests [0x42dedd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429290]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp22kb8z10.d(16): Error: no property `find` for type `string`\n/tmp/tmp22kb8z10.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp22kb8z10.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\twhile (start < len) \n\t{\n\t\tstart = text.indexOf('\"', start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf('\"', start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp5w6o6nvb.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp5w6o6nvb.d(16): Error: no property `indexOf` for type `string`\n/tmp/tmp5w6o6nvb.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5w6o6nvb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile (text[i] != '\"') \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphbesfwa_.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmphbesfwa_.__unittest_L31_C1() [0x427d4a]\n??:? void tmphbesfwa_.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start+1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end+1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpdzzs684w.d(15): Error: no property `find` for type `string`\n/tmp/tmpdzzs684w.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzzs684w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = text.split(\"\\\"\");\n\tresult.remove(0);\n\tresult.remove(result.length - 1);\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpx_mmgr3o.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_mmgr3o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start+1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end+1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp1fw_5dtd.d(16): Error: no property `find` for type `string`\n/tmp/tmp1fw_5dtd.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fw_5dtd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpifano1vp.d(16): Error: no property `find` for type `string`\n/tmp/tmpifano1vp.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpifano1vp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i + 1;\n\t\t\ti++;\n\t\t\twhile(i < text.length)\n\t\t\t{\n\t\t\t\tif(text[i] == '\"')\n\t\t\t\t{\n\t\t\t\t\tend = i;\n\t\t\t\t\tresult ~= text[start..end];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpifano1vp.d(16): Error: no property `find` for type `string`\n/tmp/tmpifano1vp.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpifano1vp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp74dj7_a1.d(16): Error: no property `find` for type `string`\n/tmp/tmp74dj7_a1.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74dj7_a1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpjxwgz2uj.d(15): Error: no property `find` for type `string`\n/tmp/tmpjxwgz2uj.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxwgz2uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpww7pjvev.d(15): Error: no property `find` for type `string`\n/tmp/tmpww7pjvev.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpww7pjvev.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp1grmkuyz.d(16): Error: no property `find` for type `string`\n/tmp/tmp1grmkuyz.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1grmkuyz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(i < text.length)\n\t\t\t{\n\t\t\t\tif(text[i] == '\"')\n\t\t\t\t{\n\t\t\t\t\tend = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0mwvquz7.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428dd5]\n??:? void tmp0mwvquz7.__unittest_L35_C1() [0x427d5a]\n??:? void tmp0mwvquz7.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e10f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afbd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b04c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af49]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b05]\n??:? runModuleUnitTests [0x42dee5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429298]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\twhile (start < len)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpzxexom2w.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpzxexom2w.d(16): Error: no property `find` for type `string`\n/tmp/tmpzxexom2w.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxexom2w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1) break;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1) break;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp8qrc48g0.d(16): Error: no property `find` for type `string`\n/tmp/tmp8qrc48g0.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8qrc48g0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp51j4u34t.d(16): Error: no property `find` for type `string`\n/tmp/tmp51j4u34t.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51j4u34t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\t\n\twhile (start < len)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp3wx2qxik.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp3wx2qxik.d(17): Error: no property `find` for type `string`\n/tmp/tmp3wx2qxik.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3wx2qxik.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1) break;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1) break;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpdx7tacv0.d(15): Error: no property `find` for type `string`\n/tmp/tmpdx7tacv0.d(17): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdx7tacv0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = 0;\n\tauto end = 0;\n\t\n\twhile (true) {\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) break;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) break;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp4obdcnsc.d(15): Error: no property `find` for type `string`\n/tmp/tmp4obdcnsc.d(17): Error: no property `find` for type `string`\n/tmp/tmp4obdcnsc.d(19): Error: cannot append type `string` to type `void[]`\n/tmp/tmp4obdcnsc.d(23): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4obdcnsc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\twhile (true) \n\t{\n\t\tauto pos = text.find(\"\\\"\", start);\n\t\tif (pos == -1)\n\t\t\tbreak;\n\t\tstart = pos + 1;\n\t\tpos = text.find(\"\\\"\", start);\n\t\tif (pos == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start .. pos];\n\t\tstart = pos + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp129ipcg4.d(14): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp129ipcg4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tif (start == 0)\n\t\t\t{\n\t\t\t\tstart = i + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t\tend = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\t\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\t\n\t\tif(start == -1 || end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\t\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpn48a0tyc.d(17): Error: no property `find` for type `string`\n/tmp/tmpn48a0tyc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn48a0tyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\tint j = 0;\n\t\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\tend = text.indexOf('\"', i + 1);\n\t\t\tresult ~= text[start + 1..end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp3epgr10d.d(21): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3epgr10d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpjxwgz2uj.d(15): Error: no property `find` for type `string`\n/tmp/tmpjxwgz2uj.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxwgz2uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = text.find(\"\\\"\");\n\twhile (start != -1) \n\t{\n\t\tauto end = text.find(\"\\\"\", start + 1);\n\t\tif (end != -1) \n\t\t{\n\t\t\tresult ~= text[start + 1 .. end];\n\t\t\tstart = text.find(\"\\\"\", end + 1);\n\t\t}\n\t\telse\n\t\t\tbreak;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpli221hce.d(11): Error: no property `find` for type `string`\n/tmp/tmpli221hce.d(14): Error: no property `find` for type `string`\n/tmp/tmpli221hce.d(23): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpli221hce.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start+1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start+1..end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpuqglh16g.d(15): Error: no property `find` for type `string`\n/tmp/tmpuqglh16g.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuqglh16g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\tend = text.find('\"', start + 1);\n\t\t\tresult ~= text[start..end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpql0pdck2.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpql0pdck2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq05aetyy.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpq05aetyy.__unittest_L31_C1() [0x427d4a]\n??:? void tmpq05aetyy.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] values;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) break;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) break;\n\t\tvalues ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn values;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpus6nz4fl.d(16): Error: no property `find` for type `string`\n/tmp/tmpus6nz4fl.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus6nz4fl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpjxwgz2uj.d(15): Error: no property `find` for type `string`\n/tmp/tmpjxwgz2uj.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxwgz2uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t\tcount++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp9x2x0mgt.d(17): Error: no property `find` for type `string`\n/tmp/tmp9x2x0mgt.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x2x0mgt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\t\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start+1..end];\n\t\t\t\tstart = 0;\n\t\t\t\tend = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc8cmfpzt.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428da5]\n??:? void tmpc8cmfpzt.__unittest_L35_C1() [0x427d2a]\n??:? void tmpc8cmfpzt.__modtest() [0x42800c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428afe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af8d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b01c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af19]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ad5]\n??:? runModuleUnitTests [0x42deb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429268]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile (text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpicwzsmn_.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpicwzsmn_.__unittest_L31_C1() [0x427d4a]\n??:? void tmpicwzsmn_.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1) \n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) \n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpgnasc3lo.d(15): Error: no property `find` for type `string`\n/tmp/tmpgnasc3lo.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgnasc3lo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i + 1;\n\t\t\tend = text.indexOf('\"', start);\n\t\t\tresult ~= text[start..end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp8lv5u5by.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8lv5u5by.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] values;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\t\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tif (start == 0) \n\t\t\t{\n\t\t\t\tstart = i + 1;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tvalues ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t\tend = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn values;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpq24frjz_.d(16): Error: no property `find` for type `string`\n/tmp/tmpq24frjz_.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq24frjz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv1p95dhi.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428dbd]\n??:? void tmpv1p95dhi.__unittest_L30_C1() [0x427d46]\n??:? void tmpv1p95dhi.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afa5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b034]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af31]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428aed]\n??:? runModuleUnitTests [0x42decd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429280]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start+1..end];\n\t\t\t\tstart = 0;\n\t\t\t\tend = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxru113ao.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428da5]\n??:? void tmpxru113ao.__unittest_L34_C1() [0x427d2a]\n??:? void tmpxru113ao.__modtest() [0x42800c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428afe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af8d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b01c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af19]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ad5]\n??:? runModuleUnitTests [0x42deb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429268]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.indexOf('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.indexOf('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmppuy5bvi3.d(15): Error: no property `indexOf` for type `string`\n/tmp/tmppuy5bvi3.d(18): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppuy5bvi3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start_pos = 0;\n\tint end_pos = 0;\n\twhile (start_pos != -1) \n\t{\n\t\tstart_pos = text.find(\"\\\"\", start_pos);\n\t\tif (start_pos != -1) \n\t\t{\n\t\t\tend_pos = text.find(\"\\\"\", start_pos + 1);\n\t\t\tif (end_pos != -1) \n\t\t\t{\n\t\t\t\tresult ~= text[start_pos + 1 .. end_pos];\n\t\t\t\tstart_pos = end_pos + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmprgh3aajt.d(15): Error: no property `find` for type `string`\n/tmp/tmprgh3aajt.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprgh3aajt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tint start = 0;\n\tint end = 0;\n\tstring[] result;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\t\n\t\tend = text.find('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpd59vpenw.d(16): Error: no property `find` for type `string`\n/tmp/tmpd59vpenw.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd59vpenw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpq24frjz_.d(16): Error: no property `find` for type `string`\n/tmp/tmpq24frjz_.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq24frjz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = text.split(\"\\\"\");\n\treturn result[1..$-1];\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmppjjz9v68.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjjz9v68.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpjxwgz2uj.d(15): Error: no property `find` for type `string`\n/tmp/tmpjxwgz2uj.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxwgz2uj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint pos = 0;\n\twhile (true) \n\t{\n\t\tint start = text.find(\"\\\"\", pos);\n\t\tif (start == -1) \n\t\t\tbreak;\n\t\tint end = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1) \n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tpos = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp_gp7kqz4.d(14): Error: no property `find` for type `string`\n/tmp/tmp_gp7kqz4.d(17): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_gp7kqz4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = text.split(\"\\\"\");\n\treturn result[1..$-1];\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmppjjz9v68.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjjz9v68.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq05aetyy.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpq05aetyy.__unittest_L31_C1() [0x427d4a]\n??:? void tmpq05aetyy.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv1p95dhi.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428dbd]\n??:? void tmpv1p95dhi.__unittest_L30_C1() [0x427d46]\n??:? void tmpv1p95dhi.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afa5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b034]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af31]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428aed]\n??:? runModuleUnitTests [0x42decd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429280]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tif (start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start+1..end];\n\t\t\t\tstart = 0;\n\t\t\t\tend = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdw53mhnb.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428da5]\n??:? void tmpdw53mhnb.__unittest_L34_C1() [0x427d2a]\n??:? void tmpdw53mhnb.__modtest() [0x42800c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428afe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af8d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b01c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af19]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ad5]\n??:? runModuleUnitTests [0x42deb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429268]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start+1..end];\n\t\t\t\tstart = 0;\n\t\t\t\tend = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxru113ao.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428da5]\n??:? void tmpxru113ao.__unittest_L34_C1() [0x427d2a]\n??:? void tmpxru113ao.__modtest() [0x42800c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428afe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af8d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b01c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af19]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ad5]\n??:? runModuleUnitTests [0x42deb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429268]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmprusakjnl.d(15): Error: no property `find` for type `string`\n/tmp/tmprusakjnl.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprusakjnl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp614cy8kw.d(16): Error: no property `find` for type `string`\n/tmp/tmp614cy8kw.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp614cy8kw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp51j4u34t.d(16): Error: no property `find` for type `string`\n/tmp/tmp51j4u34t.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51j4u34t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq05aetyy.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpq05aetyy.__unittest_L31_C1() [0x427d4a]\n??:? void tmpq05aetyy.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp614cy8kw.d(16): Error: no property `find` for type `string`\n/tmp/tmp614cy8kw.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp614cy8kw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp614cy8kw.d(16): Error: no property `find` for type `string`\n/tmp/tmp614cy8kw.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp614cy8kw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpifano1vp.d(16): Error: no property `find` for type `string`\n/tmp/tmpifano1vp.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpifano1vp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint length = text.length;\n\t\n\twhile(start < length)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp1b6tuhfa.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp1b6tuhfa.d(17): Error: no property `find` for type `string`\n/tmp/tmp1b6tuhfa.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1b6tuhfa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (start < text.length)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpd1fg9hz8.d(15): Error: no property `find` for type `string`\n/tmp/tmpd1fg9hz8.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd1fg9hz8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start_pos = 0;\n\tint end_pos = 0;\n\twhile(true)\n\t{\n\t\tstart_pos = text.find(\"\\\"\", start_pos);\n\t\tif(start_pos == -1)\n\t\t\tbreak;\n\t\tend_pos = text.find(\"\\\"\", start_pos + 1);\n\t\tif(end_pos == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start_pos + 1 .. end_pos];\n\t\tstart_pos = end_pos + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpvd73j99s.d(15): Error: no property `find` for type `string`\n/tmp/tmpvd73j99s.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvd73j99s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = 0;\n\tauto end = 0;\n\twhile ((start = text.find(\"\\\"\", start)) != -1) {\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpvy903ojf.d(13): Error: no property `find` for type `string`\n/tmp/tmpvy903ojf.d(14): Error: no property `find` for type `string`\n/tmp/tmpvy903ojf.d(15): Error: cannot append type `string` to type `void[]`\n/tmp/tmpvy903ojf.d(18): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvy903ojf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq05aetyy.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpq05aetyy.__unittest_L31_C1() [0x427d4a]\n??:? void tmpq05aetyy.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true) \n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp2jepg1q2.d(16): Error: no property `find` for type `string`\n/tmp/tmp2jepg1q2.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jepg1q2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq05aetyy.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpq05aetyy.__unittest_L31_C1() [0x427d4a]\n??:? void tmpq05aetyy.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t{\n\t\t\t\tstart = i + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\t\n\t\tif(start == -1 || end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpgzatovqh.d(16): Error: no property `find` for type `string`\n/tmp/tmpgzatovqh.d(17): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzatovqh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpq24frjz_.d(16): Error: no property `find` for type `string`\n/tmp/tmpq24frjz_.d(20): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq24frjz_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length) \n\t{\n\t\tif(text[i] == '\"') \n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"') \n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpyh8zbkn8.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpyh8zbkn8.__unittest_L31_C1() [0x427d4a]\n??:? void tmpyh8zbkn8.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp51j4u34t.d(16): Error: no property `find` for type `string`\n/tmp/tmp51j4u34t.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51j4u34t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start+1..end];\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_som167y.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428da5]\n??:? void tmp_som167y.__unittest_L33_C1() [0x427d2e]\n??:? void tmp_som167y.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428afe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af8d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b01c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af19]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ad5]\n??:? runModuleUnitTests [0x42deb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429268]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] == '\"') \n\t\t{\n\t\t\tstart = i + 1;\n\t\t\tend = text.indexOf('\"', start);\n\t\t\tresult ~= text[start..end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\t++i;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpudx0urq7.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpudx0urq7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\t\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\t\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\t\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\t\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\t\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmp1r58w7qx.d(17): Error: no property `find` for type `string`\n/tmp/tmp1r58w7qx.d(22): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1r58w7qx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tauto result = [];\n\tauto start = 0;\n\tauto end = 0;\n\tauto in_quotes = false;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(in_quotes)\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start..end];\n\t\t\t\tin_quotes = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstart = i + 1;\n\t\t\t\tin_quotes = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpe9xvpyhn.d(22): Error: cannot append type `string` to type `void[]`\n/tmp/tmpe9xvpyhn.d(33): Error: cannot implicitly convert expression `result` of type `void[]` to `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe9xvpyhn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpxhqi22wj.d(15): Error: no property `find` for type `string`\n/tmp/tmpxhqi22wj.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxhqi22wj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpyp7meemr.d(15): Error: no property `find` for type `string`\n/tmp/tmpyp7meemr.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp7meemr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\t\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\t\n\t\tif(start == -1 || end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpgzatovqh.d(16): Error: no property `find` for type `string`\n/tmp/tmpgzatovqh.d(17): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgzatovqh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile(true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif(start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif(end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1..end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "/tmp/tmpzh3y80cm.d(15): Error: no property `find` for type `string`\n/tmp/tmpzh3y80cm.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzh3y80cm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find('\"', start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find('\"', start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "/tmp/tmpyea0s_ph.d(15): Error: no property `find` for type `string`\n/tmp/tmpyea0s_ph.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyea0s_ph.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\tend = i;\n\t\t\twhile (text[end] != '\"')\n\t\t\t{\n\t\t\t\tend++;\n\t\t\t}\n\t\t\tresult ~= text[start..end];\n\t\t\ti = end;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg0b53osq.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpg0b53osq.__unittest_L31_C1() [0x427d4e]\n??:? void tmpg0b53osq.__modtest() [0x428030]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\ti++;\n\t\t\twhile(text[i] != '\"')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tend = i;\n\t\t\tresult ~= text[start..end];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq05aetyy.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428dc5]\n??:? void tmpq05aetyy.__unittest_L31_C1() [0x427d4a]\n??:? void tmpq05aetyy.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428b1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42afad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b03c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428af5]\n??:? runModuleUnitTests [0x42ded5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429288]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint len = text.length;\n\twhile (start < len)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "/tmp/tmpzxexom2w.d(13): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpzxexom2w.d(16): Error: no property `find` for type `string`\n/tmp/tmpzxexom2w.d(19): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxexom2w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '\"')\n\t\t{\n\t\t\tif(start == 0)\n\t\t\t{\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tend = i;\n\t\t\t\tresult ~= text[start+1..end];\n\t\t\t\tstart = 0;\n\t\t\t\tend = 0;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123016,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxru113ao.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x428da5]\n??:? void tmpxru113ao.__unittest_L34_C1() [0x427d2a]\n??:? void tmpxru113ao.__modtest() [0x42800c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e0df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x428afe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42af8d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b01c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42af19]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ad5]\n??:? runModuleUnitTests [0x42deb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429268]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '\"')\n\t\t{\n\t\t\tstart = i;\n\t\t\tend = text.indexOf('\"', start + 1);\n\t\t\tresult ~= text[start + 1 .. end];\n\t\t\ti = end + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "/tmp/tmpggwu6e0q.d(19): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpggwu6e0q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\tint count = 0;\n\t\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\t\n\t\tif (start == -1 || end == -1)\n\t\t\tbreak;\n\t\t\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t\tcount++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1666123017,
      "stdout": "",
      "stderr": "/tmp/tmp5cbhw1_4.d(17): Error: no property `find` for type `string`\n/tmp/tmp5cbhw1_4.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5cbhw1_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a function to extract values between quotation marks from a string.\n\t\n*/\nstring[] extract_values(string text) \n{\n\tstring[] result;\n\tint start = 0;\n\tint end = 0;\n\twhile (true)\n\t{\n\t\tstart = text.find(\"\\\"\", start);\n\t\tif (start == -1)\n\t\t\tbreak;\n\t\tend = text.find(\"\\\"\", start + 1);\n\t\tif (end == -1)\n\t\t\tbreak;\n\t\tresult ~= text[start + 1 .. end];\n\t\tstart = end + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp8gxlriuc.d(15): Error: no property `find` for type `string`\n/tmp/tmp8gxlriuc.d(18): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gxlriuc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}