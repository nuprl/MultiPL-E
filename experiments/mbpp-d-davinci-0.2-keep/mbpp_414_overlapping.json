{
  "name": "mbpp_414_overlapping",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(elem; list1)\n\t{\n\t\tif(elem in list2)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(elem; list1)\n\t{\n\t\tforeach(elem2; list2)\n\t\t{\n\t\t\tif(elem == elem2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tforeach(list1; list2)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}