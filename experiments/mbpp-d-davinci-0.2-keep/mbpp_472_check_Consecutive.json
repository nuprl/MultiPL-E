{
  "name": "mbpp_472_check_Consecutive",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\n*/\nbool check_Consecutive(long[] l) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tl = l.sort();\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(int i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\treturn false;\n}",
    "{\n\tlong[] l2 = l.dup;\n\tl2.sort;\n\tforeach(long i; 0 .. l2.length - 1)\n\t{\n\t\tif(l2[i] + 1 != l2[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(int i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\treturn false;\n}",
    "{\n\tint n = l.length;\n\tif (n <= 1)\n\t\treturn false;\n\t\n\tlong min = l[0];\n\tlong max = l[0];\n\t\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\n\tif (max - min + 1 == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tl.sort;\n\tforeach(i;0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i]!=1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint len = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tfor (int i = 1; i < len; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\t\n\tif (max - min + 1 == len) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tint n = l.length;\n\tif(n < 1) \n\t\treturn false;\n\t\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tforeach(int i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\t\n\tif(max - min + 1 == n)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1) \n\t{\n\t\tif (l[i] + 1 != l[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tint min = l[0];\n\tint max = l[0];\n\tforeach(i; l) \n\t{\n\t\tif(i < min) \n\t\t{\n\t\t\tmin = i;\n\t\t}\n\t\tif(i > max) \n\t\t{\n\t\t\tmax = i;\n\t\t}\n\t}\n\tif(max - min + 1 == l.length) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}",
    "{\n\tl.sort();\n\tforeach(i; 0 .. l.length - 1) \n\t{\n\t\tif(l[i] + 1 != l[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tlong min = l[0];\n\tlong max = l[0];\n\tforeach(long i; l)\n\t{\n\t\tif(i < min)\n\t\t\tmin = i;\n\t\tif(i > max)\n\t\t\tmax = i;\n\t}\n\tif(max - min + 1 == l.length)\n\t\treturn true;\n\telse\n\t\treturn false;\n}",
    "{\n\tint n = l.length;\n\tif (n < 1)\n\t\treturn false;\n\t\n\tint min = l[0];\n\tint max = l[0];\n\t\n\tforeach (int i; l)\n\t{\n\t\tif (i < min)\n\t\t\tmin = i;\n\t\tif (i > max)\n\t\t\tmax = i;\n\t}\n\t\n\tif (max - min + 1 == n)\n\t\treturn true;\n\t\n\treturn false;\n}",
    "{\n\tl.sort;\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1] - l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tl.sort();\n\tforeach(i; 0..l.length-1)\n\t{\n\t\tif(l[i+1]-l[i] != 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}",
    "{\n\tl.sort;\n\tforeach(i; 0 .. l.length - 1)\n\t{\n\t\tif(l[i] + 1 != l[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}",
    "{\n\tint n = l.length;\n\tint min = l[0];\n\tint max = l[0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\tif (max - min + 1 == n) \n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}"
  ]
}