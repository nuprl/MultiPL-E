{
  "name": "mbpp_635_heap_sort",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to sort the given list.\n\t\n*/\nlong[] heap_sort(long[] iterable) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(2*j <= heap_size && heap[2*j] > heap[k])\n\t\t\t{\n\t\t\t\tk = 2*j;\n\t\t\t}\n\t\t\tif(2*j+1 <= heap_size && heap[2*j+1] > heap[k])\n\t\t\t{\n\t\t\t\tk = 2*j+1;\n\t\t\t}\n\t\t\tif(k == j)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_size = new long[1];\n\theap_size[0] = 0;\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\theap_insert(heap, iterable[i], heap_size);\n\t}\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] sorted = new long[iterable.length];\n\t\n\t// Copy the iterable to the heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\t// Build the heap\n\tfor (int i = 0; i < heap.length; i++)\n\t{\n\t\theapify(heap, i);\n\t}\n\t\n\t// Sort the heap\n\tfor (int i = 0; i < heap.length; i++)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - i - 1];\n\t\theapify(heap, 0, heap.length - i - 1);\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tlong parent = (i - 1) / 2;\n\t\tlong child = i;\n\t\t\n\t\twhile(parent >= 0)\n\t\t{\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tchild = parent;\n\t\t\tparent = (parent - 1) / 2;\n\t\t}\n\t}\n\t\n\tlong index = iterable.length - 1;\n\t\n\twhile(index >= 0)\n\t{\n\t\tresult[index] = heap[0];\n\t\theap[0] = heap[index];\n\t\theap[index] = 0;\n\t\t\n\t\tlong parent = 0;\n\t\tlong child = 1;\n\t\t\n\t\twhile(child < index)\n\t\t{\n\t\t\tif(child + 1 < index && heap[child] < heap[child + 1])\n\t\t\t{\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\t\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tparent = child;\n\t\t\tchild = 2 * child + 1;\n\t\t}\n\t\t\n\t\tindex--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\ti++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max_index = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max_index])\n\t\t\t\tmax_index = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max_index])\n\t\t\t\tmax_index = j*2+1;\n\t\t\tif(max_index == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max_index];\n\t\t\theap[max_index] = temp;\n\t\t\tj = max_index;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable) \n\t{\n\t\theap_size = heap_insert(heap, heap_size, item);\n\t}\n\t\n\tforeach(ref long item; result) \n\t{\n\t\titem = heap_extract(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\theapify(heap, heap.length - 1 - i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] sorted = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length--;\n\t\theapify(heap);\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tint n = iterable.length;\n\tfor (int i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(iterable, n, i);\n\t}\n\tfor (int i = n - 1; i >= 0; i--) \n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\theapify(iterable, i, 0);\n\t}\n\treturn iterable;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t}\n\t\n\tfor(long i = heap.length / 2; i >= 0; i--)\n\t{\n\t\theap = heapify(heap, i);\n\t}\n\t\n\tfor(long i = heap.length - 1; i >= 0; i--)\n\t{\n\t\theap = swap(heap, 0, i);\n\t\theap = heapify(heap, 0);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result;\n\tlong[] heap;\n\tlong[] tmp;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong n;\n\tlong tmp_value;\n\t\n\tn = iterable.length;\n\tresult = new long[n];\n\theap = new long[n];\n\t\n\tfor (i = 0; i < n; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\tk = i;\n\t\ttmp_value = heap[i];\n\t\twhile (k * 2 + 1 < n) \n\t\t{\n\t\t\tj = k * 2 + 1;\n\t\t\tif (j < n - 1) \n\t\t\t{\n\t\t\t\tif (heap[j] < heap[j + 1]) \n\t\t\t\t{\n\t\t\t\t\tj += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (tmp_value < heap[j]) \n\t\t\t{\n\t\t\t\theap[k] = heap[j];\n\t\t\t\tk = j;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\theap[k] = tmp_value;\n\t}\n\t\n\tfor (i = n - 1; i > 0; i--) \n\t{\n\t\ttmp_value = heap[i];\n\t\theap[i] = heap[0];\n\t\tk = 0;\n\t\twhile (k * 2 + 1 < i) \n\t\t{\n\t\t\tj = k * 2 + 1;\n\t\t\tif (j < i - 1) \n\t\t\t{\n\t\t\t\tif (heap[j] < heap[j + 1]) \n\t\t\t\t{\n\t\t\t\t\tj += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (tmp_value < heap[j]) \n\t\t",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\tresult[i] = item;\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\t\n\tlong heap_size = 0;\n\t\n\tforeach(i, item; result)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong j = heap_size;\n\t\twhile(j > 1)\n\t\t{\n\t\t\tif(heap[j] > heap[j/2])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[j/2];\n\t\t\t\theap[j/2] = temp;\n\t\t\t\tj = j/2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i, item; result)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j < heap_size)\n\t\t{\n\t\t\tif(heap[j] < heap[j*2] || heap[j] < heap[j*2+1])\n\t\t\t{\n\t\t\t\tif(heap[j*2] > heap[j*2+1])\n\t\t\t\t{\n\t\t\t\t\tlong temp = heap[j];\n\t\t\t\t\theap[j] = heap[j*2];\n\t\t\t\t\theap[j*2] = temp;\n\t\t\t\t\tj = j*2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlong temp = heap[j];\n\t\t\t\t\theap[j] = heap[j*2+1];\n\t\t\t\t\theap[j*2+1] = temp",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\t// build heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t\tint j = i;\n\t\twhile (j > 0)\n\t\t{\n\t\t\tint parent = (j - 1) / 2;\n\t\t\tif (heap[j] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[iterable.length - i - 1];\n\t\tint j = 0;\n\t\twhile (j < iterable.length - i - 1)\n\t\t{\n\t\t\tint left = 2 * j + 1;\n\t\t\tint right = 2 * j + 2;\n\t\t\tint largest = j;\n\t\t\tif (left < iterable.length - i - 1 && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif (right < iterable.length - i - 1 && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif (largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Create a heap\n\tHeap heap = new Heap();\n\t\n\t// Insert all elements into the heap\n\tforeach(elem; iterable)\n\t{\n\t\theap.insert(elem);\n\t}\n\t\n\t// Extract all elements from the heap\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap.extract_min();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] < heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size/2)\n\t\t{\n\t\t\tlong k = 2*j;\n\t\t\tif(k < heap_size && heap[k] > heap[k+1])\n\t\t\t\tk++;\n\t\t\tif(heap[j] < heap[k])\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_pop(heap);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// Pop the heap and store the result in the array\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap.pop();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i,v; iterable)\n\t\theap[i] = v;\n\t\n\tfor(long i = (heap.length-1)/2; i >= 0; i--)\n\t\theapify(heap, i);\n\t\n\tfor(long i = heap.length-1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\theapify(heap, 0, i);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; heap)\n\t{\n\t\tlong parent = (i - 1) / 2;\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\t\n\t\tif(left < iterable.length && heap[left] > heap[i])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[left];\n\t\t\theap[left] = temp;\n\t\t}\n\t\t\n\t\tif(right < iterable.length && heap[right] > heap[i])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[right];\n\t\t\theap[right] = temp;\n\t\t}\n\t\t\n\t\tif(parent >= 0 && heap[parent] < heap[i])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[parent];\n\t\t\theap[parent] = temp;\n\t\t}\n\t}\n\t\n\tlong j = 0;\n\t\n\tforeach(long i; heap)\n\t{\n\t\tresult[j] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap[heap.length - 1] = 0;\n\t\t\n\t\tlong parent = (i - 1) / 2;\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\t\n\t\tif(left < iterable.length && heap[left] > heap[i])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[left];\n\t\t\theap[left] = temp;\n\t\t}\n\t\t\n\t\tif(right",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\tlong i = 0;\n\tfor (i = 0; i < iterable.length; i++) \n\t{\n\t\theap_index[i] = -1;\n\t}\n\tfor (i = 0; i < iterable.length; i++) \n\t{\n\t\theap_insert(heap, heap_index, heap_size, iterable[i], i);\n\t\theap_size++;\n\t}\n\tfor (i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_pop(heap, heap_index, heap_size);\n\t\theap_size--;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long x; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = x;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] < heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong left = 2*i;\n\t\t\tlong right = 2*i + 1;\n\t\t\tlong smallest = i;\n\t\t\tif(left <= heap_size && heap[left] < heap[smallest])\n\t\t\t\tsmallest = left;\n\t\t\tif(right <= heap_size && heap[right] < heap[smallest])\n\t\t\t\tsmallest = right;\n\t\t\tif(smallest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[smallest];\n\t\t\t\theap[smallest] = temp;\n\t\t\t\ti = smallest;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length + 1];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_size] = heap[1];\n\t\tresult_size++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong left = i * 2;\n\t\t\tlong right = i * 2 + 1;\n\t\t\tlong largest = i;\n\t\t\tif(left <= heap_size && heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\tif(right <= heap_size && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\tif(largest == i)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[largest];\n\t\t\theap[largest] = temp;\n\t\t\ti = largest;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(long i; iterable)\n\t{\n\t\theap.length++;\n\t\theap[heap.length - 1] = i;\n\t\tlong j = heap.length - 1;\n\t\twhile(j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif(heap[parent] < heap[j])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong[] result = new long[heap.length];\n\tforeach(long i; heap)\n\t{\n\t\tresult.length++;\n\t\tresult[result.length - 1] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length--;\n\t\tlong j = 0;\n\t\twhile(j < heap.length)\n\t\t{\n\t\t\tlong left = j * 2 + 1;\n\t\t\tlong right = j * 2 + 2;\n\t\t\tlong largest = j;\n\t\t\tif(left < heap.length && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap.length && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[largest];\n\t\t\t\theap[largest] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// Pop the elements from the heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap.pop();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, e; iterable)\n\t{\n\t\theap[i] = e;\n\t}\n\t\n\tauto n = heap.length;\n\t\n\tfor(int i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, n, i);\n\t}\n\t\n\tfor(int i = n - 1; i >= 0; i--)\n\t{\n\t\tauto temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tforeach(i; 0 .. result.length)\n\t{\n\t\theap[i] = result[i];\n\t}\n\t\n\tlong[] sorted = new long[result.length];\n\tlong[] unsorted = new long[result.length];\n\t\n\tlong[] temp = new long[result.length];\n\t\n\tlong[] temp2 = new long[result.length];\n\t\n\tlong[] temp3 = new long[result.length];\n\t\n\tlong[] temp4 = new long[result.length];\n\t\n\tlong[] temp5 = new long[result.length];\n\t\n\tlong[] temp6 = new long[result.length];\n\t\n\tlong[] temp7 = new long[result.length];\n\t\n\tlong[] temp8 = new long[result.length];\n\t\n\tlong[] temp9 = new long[result.length];\n\t\n\tlong[] temp10 = new long[result.length];\n\t\n\tlong[] temp11 = new long[result.length];\n\t\n\tlong[] temp12 = new long[result.length];\n\t\n\tlong[] temp13 = new long[result.length];\n\t\n\tlong[] temp14 = new long[result.length];\n\t\n\tlong[] temp15 = new long[result.length];\n\t\n\tlong[] temp16 = new long[result.length];\n\t\n\tlong[] temp17 = new long[result.length];\n\t\n\tlong[] temp18 = new long[result.length];\n\t\n\tlong[] temp19 = new long[result.length];\n\t\n\tlong[] temp20 = new long[result.length];\n\t\n\tlong[] temp21 = new long[result.length];\n\t\n\tlong[] temp22 = new long[result.length];\n\t\n\tlong[] temp23 = new long[result.length];\n\t\n\tlong[] temp24 = new long[result.length];\n\t\n\t",
    "{\n\tint[] heap = new int[iterable.length];\n\tint heap_size = 0;\n\t\n\tvoid heap_push(int value)\n\t{\n\t\theap[heap_size] = value;\n\t\tint i = heap_size;\n\t\twhile(i > 0)\n\t\t{\n\t\t\tint parent = (i - 1) / 2;\n\t\t\tif(heap[i] > heap[parent])\n\t\t\t{\n\t\t\t\tint temp = heap[i];\n\t\t\t\theap[i] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t\ti = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\theap_size++;\n\t}\n\t\n\tint heap_pop()\n\t{\n\t\tint value = heap[0];\n\t\theap_size--;\n\t\theap[0] = heap[heap_size];\n\t\tint i = 0;\n\t\twhile(i < heap_size)\n\t\t{\n\t\t\tint left = 2 * i + 1;\n\t\t\tint right = 2 * i + 2;\n\t\t\tif(left >= heap_size)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tint largest = i;\n\t\t\tif(heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tint temp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\ti = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\ti++;\n\t\tlong j = 1;\n\t\twhile(true)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(2*j <= heap_size && heap[2*j] > heap[max])\n\t\t\t\tmax = 2*j;\n\t\t\tif(2*j+1 <= heap_size && heap[2*j+1] > heap[max])\n\t\t\t\tmax = 2*j+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint n = iterable.length;\n\tlong[] arr = new long[n];\n\tfor (int i = 0; i < n; i++)\n\t\tarr[i] = iterable[i];\n\t\n\tfor (int i = n / 2 - 1; i >= 0; i--)\n\t\theapify(arr, n, i);\n\t\n\tfor (int i = n - 1; i >= 0; i--)\n\t{\n\t\tlong temp = arr[0];\n\t\tarr[0] = arr[i];\n\t\tarr[i] = temp;\n\t\theapify(arr, i, 0);\n\t}\n\treturn arr;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap[heap.length - 1] = temp;\n\t\t\n\t\tresult[i] = heap[heap.length - 1];\n\t\theap = heap[0 .. heap.length - 1];\n\t\t\n\t\tlong index = 0;\n\t\tlong left = 2 * index + 1;\n\t\tlong right = 2 * index + 2;\n\t\t\n\t\twhile(left < heap.length)\n\t\t{\n\t\t\tlong largest = index;\n\t\t\t\n\t\t\tif(heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\t\n\t\t\tif(right < heap.length && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(largest != index)\n\t\t\t{\n\t\t\t\tlong temp = heap[index];\n\t\t\t\theap[index] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\t\n\t\t\t\tindex = largest;\n\t\t\t\tleft = 2 * index + 1;\n\t\t\t\tright = 2 * index + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\theap[i] = result[i];\n\t}\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong j = i;\n\t\t\n\t\twhile(j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\t\n\t\t\tif(heap[j] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tj = parent;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[result.length - 1 - i];\n\t\theap[result.length - 1 - i] = temp;\n\t\t\n\t\tlong j = 0;\n\t\t\n\t\twhile(true)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong largest = j;\n\t\t\t\n\t\t\tif(left < result.length - i && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\t\n\t\t\tif(right < result.length - i && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\tfor(long i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tif (iterable.length == 0)\n\t\treturn result;\n\t\n\tresult[0] = iterable[0];\n\t\n\tfor (int i = 1; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t\t\n\t\tint j = i;\n\t\twhile (j > 0)\n\t\t{\n\t\t\tint parent = (j - 1) / 2;\n\t\t\t\n\t\t\tif (result[j] > result[parent])\n\t\t\t{\n\t\t\t\tlong temp = result[j];\n\t\t\t\tresult[j] = result[parent];\n\t\t\t\tresult[parent] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tj = parent;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[result.length - 1 - i];\n\t\tresult[result.length - 1 - i] = temp;\n\t\t\n\t\tint j = 0;\n\t\twhile (j < result.length - 1 - i)\n\t\t{\n\t\t\tint left = 2 * j + 1;\n\t\t\tint right = 2 * j + 2;\n\t\t\t\n\t\t\tint max = j;\n\t\t\t\n\t\t\tif (left < result.length - 1 - i && result[left] > result[max])\n\t\t\t\tmax = left;\n\t\t\t\n\t\t\tif (right < result.length - 1 - i && result[right] > result[max])\n\t\t\t\tmax = right;\n\t\t\t\n\t\t\tif (max != j)\n\t\t\t{\n\t\t\t\tlong temp2 = result[j];\n\t\t\t\tresult[j] = result[max];\n\t\t\t\tresult[max] = temp2;\n\t\t\t\t\n\t\t\t\tj = max;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size - 1] = element;\n\t\tlong i = heap_size - 1;\n\t\twhile(i > 0 && heap[(i - 1) / 2] < heap[i])\n\t\t{\n\t\t\tlong temp = heap[(i - 1) / 2];\n\t\t\theap[(i - 1) / 2] = heap[i];\n\t\t\theap[i] = temp;\n\t\t\ti = (i - 1) / 2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_size] = heap[0];\n\t\tresult_size++;\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\tlong i = 0;\n\t\twhile(i < heap_size)\n\t\t{\n\t\t\tlong left = 2 * i + 1;\n\t\t\tlong right = 2 * i + 2;\n\t\t\tlong largest = i;\n\t\t\tif(left < heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\ti = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong left = 2*j;\n\t\t\tlong right = 2*j + 1;\n\t\t\tlong largest = j;\n\t\t\tif(left <= heap_size && heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\tif(right <= heap_size && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t}\n\t\n\tfor(int i = heap.length / 2; i >= 0; i--)\n\t{\n\t\theap = heapify(heap, i);\n\t}\n\t\n\tfor(int i = heap.length - 1; i >= 0; i--)\n\t{\n\t\theap[0] = heap[i];\n\t\theap[i] = heap[0];\n\t\theap = heapify(heap, 0);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Build a max heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t\tint current = i;\n\t\twhile (current != 0)\n\t\t{\n\t\t\tint parent = (current - 1) / 2;\n\t\t\tif (result[current] > result[parent])\n\t\t\t{\n\t\t\t\tlong temp = result[current];\n\t\t\t\tresult[current] = result[parent];\n\t\t\t\tresult[parent] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurrent = parent;\n\t\t}\n\t}\n\t\n\t// Heap sort\n\tfor (int i = iterable.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tint current = 0;\n\t\tint left = 2 * current + 1;\n\t\tint right = 2 * current + 2;\n\t\twhile (left < i)\n\t\t{\n\t\t\tint max = current;\n\t\t\tif (result[left] > result[max])\n\t\t\t{\n\t\t\t\tmax = left;\n\t\t\t}\n\t\t\tif (right < i && result[right] > result[max])\n\t\t\t{\n\t\t\t\tmax = right;\n\t\t\t}\n\t\t\tif (max == current)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlong temp2 = result[max];\n\t\t\t\tresult[max] = result[current];\n\t\t\t\tresult[current] = temp2;\n\t\t\t\tcurrent = max;\n\t\t\t\tleft = 2 * current + 1;\n\t\t\t\tright = 2 * current + 2;\n\t\t\t}\n\t\t}\n\t}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor (int i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] arr = iterable.dup;\n\tlong n = arr.length;\n\tfor (long i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(arr, n, i);\n\t}\n\tfor (long i = n - 1; i >= 0; i--) \n\t{\n\t\tlong temp = arr[0];\n\t\tarr[0] = arr[i];\n\t\tarr[i] = temp;\n\t\theapify(arr, i, 0);\n\t}\n\treturn arr;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\theap = heapify(heap, 0, heap.length - 1 - i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] < heap[j/2])\n\t\t{\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = tmp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size/2)\n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(heap[j] > heap[j*2])\n\t\t\t\tk = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[k] > heap[j*2+1])\n\t\t\t\tk = j*2+1;\n\t\t\tif(k == j)\n\t\t\t\tbreak;\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = tmp;\n\t\t\tj = k;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length + 1];\n\tint heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tint j = heap_size;\n\t\twhile(j > 1 && heap[j] < heap[j / 2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j / 2];\n\t\t\theap[j / 2] = temp;\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\tint result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tint j = 1;\n\t\twhile(j * 2 <= heap_size)\n\t\t{\n\t\t\tint k = j * 2;\n\t\t\tif(k + 1 <= heap_size && heap[k + 1] < heap[k])\n\t\t\t\tk++;\n\t\t\tif(heap[j] < heap[k])\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tlong[] heap = new long[iterable.length];\n\t\n\tint heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[heap_size] = i;\n\t\t\n\t\tint current_index = heap_size;\n\t\t\n\t\twhile(current_index > 0)\n\t\t{\n\t\t\tint parent_index = (current_index - 1) / 2;\n\t\t\t\n\t\t\tif(heap[current_index] > heap[parent_index])\n\t\t\t{\n\t\t\t\tlong temp = heap[current_index];\n\t\t\t\theap[current_index] = heap[parent_index];\n\t\t\t\theap[parent_index] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tcurrent_index = parent_index;\n\t\t}\n\t\t\n\t\theap_size++;\n\t}\n\t\n\tint result_index = 0;\n\t\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[0];\n\t\t\n\t\theap[0] = heap[heap_size - 1];\n\t\t\n\t\theap_size--;\n\t\t\n\t\tint current_index = 0;\n\t\t\n\t\twhile(current_index < heap_size)\n\t\t{\n\t\t\tint left_child_index = 2 * current_index + 1;\n\t\t\tint right_child_index = 2 * current_index + 2;\n\t\t\t\n\t\t\tif(left_child_index >= heap_size)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tint max_index = current_index;\n\t\t\t\n\t\t\tif(heap[max_index] < heap[left_child_index])\n\t\t\t{\n\t\t\t\tmax_index = left_child_index;\n\t\t\t",
    "{\n\t// Create a heap from the iterable\n\tHeap heap = new Heap(iterable);\n\t\n\t// Sort the heap\n\theap.sort();\n\t\n\t// Return the sorted heap\n\treturn heap.toArray();\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tlong k = i;\n\t\tlong v = heap[k];\n\t\tbool heapified = false;\n\t\t\n\t\twhile(!heapified && (2*k + 1) < iterable.length)\n\t\t{\n\t\t\tlong j = 2*k + 1;\n\t\t\t\n\t\t\tif(j < (iterable.length - 1))\n\t\t\t{\n\t\t\t\tif(heap[j] < heap[j + 1])\n\t\t\t\t{\n\t\t\t\t\tj += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(v >= heap[j])\n\t\t\t{\n\t\t\t\theapified = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\theap[k] = heap[j];\n\t\t\t\tk = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\theap[k] = v;\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\t\n\t\tlong v = heap[iterable.length - i - 1];\n\t\theap[iterable.length - i - 1] = heap[0];\n\t\t\n\t\tlong k = 0;\n\t\tbool heapified = false;\n\t\t\n\t\twhile(!heapified && (2*k + 1) < (iterable.length - i - 1))\n\t\t{\n\t\t\tlong j = 2*k + 1;\n\t\t\t\n\t\t\tif(j < (iterable.length - i - 2))\n\t\t\t{\n\t\t\t\tif(heap[j] < heap[j + 1])\n",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(long i; iterable)\n\t\tresult ~= i;\n\t\n\tlong[] heap = new long[result.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; result)\n\t{\n\t\theap[heap_size] = i;\n\t\theap_size++;\n\t\t\n\t\tlong current = heap_size - 1;\n\t\tlong parent = (current - 1) / 2;\n\t\t\n\t\twhile(parent >= 0 && heap[current] > heap[parent])\n\t\t{\n\t\t\tlong temp = heap[current];\n\t\t\theap[current] = heap[parent];\n\t\t\theap[parent] = temp;\n\t\t\t\n\t\t\tcurrent = parent;\n\t\t\tparent = (current - 1) / 2;\n\t\t}\n\t}\n\t\n\twhile(heap_size > 0)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap[heap_size - 1] = temp;\n\t\t\n\t\theap_size--;\n\t\t\n\t\tlong current = 0;\n\t\tlong left = 2 * current + 1;\n\t\tlong right = 2 * current + 2;\n\t\t\n\t\twhile(left < heap_size)\n\t\t{\n\t\t\tlong largest = current;\n\t\t\t\n\t\t\tif(heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\t\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\t\n\t\t\tif(largest == current)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\ttemp = heap[current];\n\t\t\theap[current] = heap[largest];\n\t\t\theap[largest] = temp;\n\t\t\t\n\t\t\tcurrent = largest;\n\t\t\tleft = 2 * current + 1;\n\t\t\tright = 2 * current +",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\tlong heap_size = 0;\n\tlong i = 0;\n\tfor (i = 0; i < iterable.length; i++) \n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\tfor (i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_pop(heap, heap_size);\n\t\theap_size--;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, i);\n\t}\n\t\n\tforeach(ref long i; result)\n\t{\n\t\ti = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto heap = new Heap!(long)(iterable);\n\treturn heap.toArray();\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tlong heap_size = 0;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, result[i]);\n\t}\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto heap = new Heap!(long)();\n\tforeach(i; iterable)\n\t{\n\t\theap.push(i);\n\t}\n\tauto result = new long[];\n\twhile(heap.size)\n\t{\n\t\tresult ~= heap.pop();\n\t}\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - i - 1];\n\t\theapify(heap, 0, heap.length - i - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong temp = 0;\n\tlong temp_index = 0;\n\tlong temp_index_2 = 0;\n\tlong temp_index_3 = 0;\n\tlong temp_index_4 = 0;\n\tlong temp_index_5 = 0;\n\tlong temp_index_6 = 0;\n\tlong temp_index_7 = 0;\n\tlong temp_index_8 = 0;\n\tlong temp_index_9 = 0;\n\tlong temp_index_10 = 0;\n\tlong temp_index_11 = 0;\n\tlong temp_index_12 = 0;\n\tlong temp_index_13 = 0;\n\tlong temp_index_14 = 0;\n\tlong temp_index_15 = 0;\n\tlong temp_index_16 = 0;\n\tlong temp_index_17 = 0;\n\tlong temp_index_18 = 0;\n\tlong temp_index_19 = 0;\n\tlong temp_index_20 = 0;\n\tlong temp_index_21 = 0;\n\tlong temp_index_22 = 0;\n\tlong temp_index_23 = 0;\n\tlong temp_index_24 = 0;\n\tlong temp_index_25 = 0;\n\tlong temp_index_26 = 0;\n\tlong temp_index_27 = 0;\n\tlong temp_index_28 = 0;\n\tlong temp_index_29 = 0;\n\tlong temp_index_30 = 0;\n\tlong temp_index_31 = 0;\n\tlong temp_index_32 = 0;\n\tlong temp_index_33 = 0;\n\tlong temp_index_34 = 0;\n\tlong temp_index_35 = 0;\n\tlong temp_index_36 = 0;\n\tlong temp_index_37 = 0;\n\tlong temp_index_38 = 0;\n\tlong temp_index_39 = 0;\n\tlong temp_index_40 =",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap[heap_size] = item;\n\t\theap_size++;\n\t\theapify_up(heap, heap_size);\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[0];\n\t\tresult_index++;\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap[heap_size] = element;\n\t\theap_size++;\n\t\theapify_up(heap, heap_size);\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(long item; iterable)\n\t{\n\t\tresult ~= item;\n\t}\n\t\n\tfor(int i = 0; i < result.length; i++)\n\t{\n\t\tfor(int j = i; j < result.length; j++)\n\t\t{\n\t\t\tif(result[i] > result[j])\n\t\t\t{\n\t\t\t\tlong temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tint i = 0;\n\tforeach(long item; iterable)\n\t{\n\t\theap[i] = item;\n\t\ti++;\n\t}\n\t\n\theapify(heap);\n\t\n\tint j = 0;\n\twhile(heap.length > 0)\n\t{\n\t\tresult[j] = heap[0];\n\t\theap[0] = heap[heap.length-1];\n\t\theap = heap[0..heap.length-2];\n\t\t\n\t\tsift_down(heap, 0);\n\t\tj++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = tmp;\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[j])\n\t\t\t\tk = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[k])\n\t\t\t\tk = j*2+1;\n\t\t\tif(k == j)\n\t\t\t\tbreak;\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = tmp;\n\t\t\tj = k;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor(int i = 0; i < result.length; i++)\n\t{\n\t\tfor(int j = 0; j < result.length; j++)\n\t\t{\n\t\t\tif(result[i] > result[j])\n\t\t\t{\n\t\t\t\tlong temp = result[i];\n\t\t\t\tresult[i] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// extract elements from the heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap.extract_min();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\theap = heapify(heap, 0, heap.length - 1 - i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = element;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\ti++;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max_child = j;\n\t\t\tif(j * 2 <= heap_size && heap[j * 2] > heap[max_child])\n\t\t\t\tmax_child = j * 2;\n\t\t\tif(j * 2 + 1 <= heap_size && heap[j * 2 + 1] > heap[max_child])\n\t\t\t\tmax_child = j * 2 + 1;\n\t\t\tif(max_child == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max_child];\n\t\t\theap[max_child] = temp;\n\t\t\tj = max_child;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// Pop all elements from the heap\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap.pop();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length) \n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\theap[i] = result[i];\n\t}\n\t\n\tlong[] sorted = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\tsorted[i] = result[i];\n\t}\n\t\n\tlong[] temp = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\ttemp[i] = result[i];\n\t}\n\t\n\tlong[] temp2 = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\ttemp2[i] = result[i];\n\t}\n\t\n\tlong[] temp3 = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\ttemp3[i] = result[i];\n\t}\n\t\n\tlong[] temp4 = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\ttemp4[i] = result[i];\n\t}\n\t\n\tlong[] temp5 = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\ttemp5[i] = result[i];\n\t}\n\t\n\tlong[] temp6 = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\ttemp6[i] = result[i];\n\t}\n\t\n\tlong[] temp7 = new long[result.length];\n\tforeach(i; 0 .. result.length) \n\t{\n\t\ttemp7[i] = result[i];\n\t}\n\t\n\tlong[] temp8 = new long[result.length];\n\tforeach(i; 0 ..",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size = heap_size + 1;\n\t\theap[heap_size] = i;\n\t\theap_index[i] = heap_size;\n\t\t\n\t\tlong current_index = heap_size;\n\t\tlong parent_index = (long)floor(current_index / 2);\n\t\t\n\t\twhile(parent_index > 0 && heap[current_index] > heap[parent_index])\n\t\t{\n\t\t\tlong temp = heap[current_index];\n\t\t\theap[current_index] = heap[parent_index];\n\t\t\theap[parent_index] = temp;\n\t\t\t\n\t\t\theap_index[heap[current_index]] = current_index;\n\t\t\theap_index[heap[parent_index]] = parent_index;\n\t\t\t\n\t\t\tcurrent_index = parent_index;\n\t\t\tparent_index = (long)floor(current_index / 2);\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index = result_index + 1;\n\t\t\n\t\theap[1] = heap[heap_size];\n\t\theap_size = heap_size - 1;\n\t\t\n\t\theap_index[heap[1]] = 1;\n\t\t\n\t\tlong current_index = 1;\n\t\tlong left_child_index = 2 * current_index;\n\t\tlong right_child_index = 2 * current_index + 1;\n\t\t\n\t\twhile(left_child_index <= heap_size)\n\t\t{\n\t\t\tlong max_child_index = left_child_index;\n\t\t\tif(right_child_",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tforeach(long item; iterable)\n\t{\n\t\tresult[heap_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong left = 2 * i;\n\t\t\tlong right = 2 * i + 1;\n\t\t\tlong largest = i;\n\t\t\tif(left <= heap_size && heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\tif(right <= heap_size && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\ti = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[heap_size++] = i;\n\t\tint j = heap_size-1;\n\t\twhile(j > 0 && heap[(j-1)/2] < heap[j])\n\t\t{\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[(j-1)/2];\n\t\t\theap[(j-1)/2] = tmp;\n\t\t\tj = (j-1)/2;\n\t\t}\n\t}\n\t\n\tint result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_size++] = heap[0];\n\t\theap[0] = heap[--heap_size];\n\t\tint i = 0;\n\t\twhile(i < heap_size)\n\t\t{\n\t\t\tint left = 2*i+1;\n\t\t\tint right = 2*i+2;\n\t\t\tint largest = i;\n\t\t\tif(left < heap_size && heap[left] > heap[largest])\n\t\t\t\tlargest = left;\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t\tlargest = right;\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong tmp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = tmp;\n\t\t\t\ti = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tint i = 0;\n\tforeach(long item; iterable)\n\t{\n\t\theap[i] = item;\n\t\ti++;\n\t}\n\t\n\theapify(heap);\n\t\n\tfor(i = heap.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\tsiftDown(heap, 0, i);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < heap.length; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < heap.length; i++) \n\t{\n\t\tint index = i;\n\t\t\n\t\twhile (index != 0) \n\t\t{\n\t\t\tint parent = (index - 1) / 2;\n\t\t\t\n\t\t\tif (heap[index] > heap[parent]) \n\t\t\t{\n\t\t\t\tlong temp = heap[index];\n\t\t\t\theap[index] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tindex = parent;\n\t\t}\n\t}\n\t\n\tfor (int i = heap.length - 1; i >= 0; i--) \n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\tint index = 0;\n\t\tint leftChild = 2 * index + 1;\n\t\tint rightChild = 2 * index + 2;\n\t\t\n\t\twhile (leftChild < i) \n\t\t{\n\t\t\tint max = leftChild;\n\t\t\t\n\t\t\tif (rightChild < i) \n\t\t\t{\n\t\t\t\tif (heap[max] < heap[rightChild]) \n\t\t\t\t{\n\t\t\t\t\tmax = rightChild;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (heap[index] < heap[max]) \n\t\t\t{\n\t\t\t\tlong temp = heap[index];\n\t\t\t\theap[index] = heap[max];",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tint j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tint i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tint j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tint max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] sorted = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[iterable.length - i - 1];\n\t\theapify(heap, iterable.length - i - 1);\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// build heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t\tint j = i;\n\t\twhile (j > 0)\n\t\t{\n\t\t\tint parent = (j - 1) / 2;\n\t\t\tif (result[j] > result[parent])\n\t\t\t{\n\t\t\t\tlong temp = result[j];\n\t\t\t\tresult[j] = result[parent];\n\t\t\t\tresult[parent] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort\n\tfor (int i = iterable.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tint j = 0;\n\t\twhile (j < i)\n\t\t{\n\t\t\tint left = 2 * j + 1;\n\t\t\tint right = 2 * j + 2;\n\t\t\tint largest = j;\n\t\t\tif (left < i && result[left] > result[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif (right < i && result[right] > result[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif (largest != j)\n\t\t\t{\n\t\t\t\ttemp = result[j];\n\t\t\t\tresult[j] = result[largest];\n\t\t\t\tresult[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tint index = i;\n\t\twhile (index != 0) \n\t\t{\n\t\t\tint parent = (index - 1) / 2;\n\t\t\tif (heap[index] > heap[parent]) \n\t\t\t{\n\t\t\t\tlong temp = heap[index];\n\t\t\t\theap[index] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t}\n\t\t\tindex = parent;\n\t\t}\n\t}\n\t\n\tfor (int i = iterable.length - 1; i >= 0; i--) \n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\tint index = 0;\n\t\tint leftChild = 1;\n\t\tint rightChild = 2;\n\t\t\n\t\twhile (leftChild < i) \n\t\t{\n\t\t\tif (rightChild < i && heap[index] < heap[rightChild] && heap[rightChild] >= heap[leftChild]) \n\t\t\t{\n\t\t\t\tlong temp2 = heap[index];\n\t\t\t\theap[index] = heap[rightChild];\n\t\t\t\theap[rightChild] = temp2;\n\t\t\t\tindex = rightChild;\n\t\t\t} \n\t\t\telse if (heap[index] < heap[leftChild]) \n\t\t\t{\n\t\t\t\tlong temp2 = heap[index];\n\t\t\t\theap[index] = heap[leftChild];\n\t\t\t\theap[leftChild] = temp2;\n\t\t\t\tindex = leftChild;",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tlong heap_size = 0;\n\t\n\t// Build the heap\n\tforeach(i; 0..result.length)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, result[i]);\n\t}\n\t\n\t// Sort the heap\n\tforeach(i; 0..result.length)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong[] heap_size = new long[1];\n\theap_size[0] = 0;\n\t\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\theap_insert(heap, heap_index, heap_size, iterable[i], i);\n\t}\n\t\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_pop(heap, heap_index, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(2*j <= heap_size && heap[2*j] > heap[j])\n\t\t\t\tk = 2*j;\n\t\t\tif(2*j+1 <= heap_size && heap[2*j+1] > heap[k])\n\t\t\t\tk = 2*j+1;\n\t\t\tif(k == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[k];\n\t\t\theap[k] = heap[j];\n\t\t\theap[j] = temp;\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto heap = new Heap!(long)();\n\tforeach(i; iterable)\n\t\theap.push(i);\n\t\n\tlong[] result;\n\twhile(heap.length)\n\t\tresult ~= heap.pop();\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] < heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong left = j*2;\n\t\t\tlong right = j*2 + 1;\n\t\t\tlong smallest = j;\n\t\t\tif(left <= heap_size && heap[left] < heap[smallest])\n\t\t\t\tsmallest = left;\n\t\t\tif(right <= heap_size && heap[right] < heap[smallest])\n\t\t\t\tsmallest = right;\n\t\t\tif(smallest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[smallest];\n\t\t\t\theap[smallest] = temp;\n\t\t\t\tj = smallest;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length + 1];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = element;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti = i / 2;\n\t\t}\n\t}\n\t\n\tlong n = heap_size;\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong left = 2 * j;\n\t\t\tlong right = 2 * j + 1;\n\t\t\tlong largest = j;\n\t\t\tif(left <= heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right <= heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tint n = iterable.length;\n\tfor (int i = n / 2 - 1; i >= 0; i--) \n\t{\n\t\theapify(iterable, n, i);\n\t}\n\tfor (int i = n - 1; i >= 0; i--) \n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\theapify(iterable, i, 0);\n\t}\n\treturn iterable;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult.length++;\n\t\tresult[$-1] = i;\n\t}\n\t\n\tfor(long i = result.length / 2; i >= 0; i--)\n\t{\n\t\tresult = heapify(result, i, result.length);\n\t}\n\t\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\tresult = swap(result, 0, i);\n\t\tresult = heapify(result, 0, i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// copy the iterable to the result\n\tforeach(i, v; iterable)\n\t\tresult[i] = v;\n\t\n\t// create the heap\n\tHeap heap = new Heap(result);\n\t\n\t// sort the heap\n\theap.sort();\n\t\n\treturn heap.get_sorted();\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tlong parent = (i - 1) / 2;\n\t\tlong child = i;\n\t\t\n\t\twhile(parent >= 0 && heap[parent] < heap[child])\n\t\t{\n\t\t\tlong temp = heap[parent];\n\t\t\theap[parent] = heap[child];\n\t\t\theap[child] = temp;\n\t\t\t\n\t\t\tchild = parent;\n\t\t\tparent = (child - 1) / 2;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\t\n\t\theap[0] = heap[iterable.length - i - 1];\n\t\t\n\t\tlong parent = 0;\n\t\tlong child = 1;\n\t\t\n\t\twhile(child < iterable.length - i - 1)\n\t\t{\n\t\t\tif(child + 1 < iterable.length - i - 1 && heap[child + 1] > heap[child])\n\t\t\t{\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\t\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t\t\n\t\t\t\tparent = child;\n\t\t\t\tchild = parent * 2 + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = iterable.length;\n\t\n\tfor(long i = heap_size / 2; i >= 0; i--)\n\t{\n\t\theapify(heap, heap_size, i);\n\t}\n\t\n\tfor(long i = heap_size - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theap_size--;\n\t\theapify(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// build a heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t\tint j = i;\n\t\twhile (j > 0)\n\t\t{\n\t\t\tint parent = (j - 1) / 2;\n\t\t\tif (result[j] > result[parent])\n\t\t\t{\n\t\t\t\tlong temp = result[j];\n\t\t\t\tresult[j] = result[parent];\n\t\t\t\tresult[parent] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort the heap\n\tfor (int i = iterable.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tint j = 0;\n\t\twhile (j < i)\n\t\t{\n\t\t\tint left = 2 * j + 1;\n\t\t\tint right = 2 * j + 2;\n\t\t\tif (left >= i)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (right >= i)\n\t\t\t{\n\t\t\t\tif (result[j] < result[left])\n\t\t\t\t{\n\t\t\t\t\tlong temp2 = result[j];\n\t\t\t\t\tresult[j] = result[left];\n\t\t\t\t\tresult[left] = temp2;\n\t\t\t\t\tj = left;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (result[left] > result[right])\n\t\t\t\t{\n\t\t\t\t\tif (result[j] < result[left",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\t\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Build a max heap\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tint current = i;\n\t\twhile (current != 0)\n\t\t{\n\t\t\tint parent = (current - 1) / 2;\n\t\t\tif (iterable[current] > iterable[parent])\n\t\t\t{\n\t\t\t\tlong temp = iterable[current];\n\t\t\t\titerable[current] = iterable[parent];\n\t\t\t\titerable[parent] = temp;\n\t\t\t}\n\t\t\tcurrent = parent;\n\t\t}\n\t}\n\t\n\t// Heap sort\n\tfor (int i = iterable.length - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = iterable[0];\n\t\t\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = 0;\n\t\t\n\t\tint current = 0;\n\t\twhile (true)\n\t\t{\n\t\t\tint left = 2 * current + 1;\n\t\t\tint right = 2 * current + 2;\n\t\t\tint largest = current;\n\t\t\t\n\t\t\tif (left < i && iterable[left] > iterable[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\t\n\t\t\tif (right < i && iterable[right] > iterable[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif (largest != current)\n\t\t\t{\n\t\t\t\tlong temp = iterable[current];\n\t\t\t\titerable[current] = iterable[largest];\n\t\t\t\titerable[largest] = temp;\n\t\t\t\tcurrent = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] list = iterable.dup;\n\tlong[] heap = new long[list.length];\n\tlong heap_size = 0;\n\t\n\tvoid heapify(long[] list, long i) \n\t{\n\t\tlong left = 2 * i + 1;\n\t\tlong right = 2 * i + 2;\n\t\tlong largest = i;\n\t\t\n\t\tif (left < heap_size && list[left] > list[largest]) \n\t\t{\n\t\t\tlargest = left;\n\t\t}\n\t\t\n\t\tif (right < heap_size && list[right] > list[largest]) \n\t\t{\n\t\t\tlargest = right;\n\t\t}\n\t\t\n\t\tif (largest != i) \n\t\t{\n\t\t\tlong temp = list[i];\n\t\t\tlist[i] = list[largest];\n\t\t\tlist[largest] = temp;\n\t\t\t\n\t\t\theapify(list, largest);\n\t\t}\n\t}\n\t\n\tvoid build_heap(long[] list) \n\t{\n\t\theap_size = list.length;\n\t\t\n\t\tfor (long i = floor(list.length / 2); i >= 0; i--) \n\t\t{\n\t\t\theapify(list, i);\n\t\t}\n\t}\n\t\n\tvoid sort(long[] list) \n\t{\n\t\tbuild_heap(list);\n\t\t\n\t\tfor (long i = list.length - 1; i >= 0; i--) \n\t\t{\n\t\t\tlong temp = list[0];\n\t\t\tlist[0] = list[i];\n\t\t\tlist[i] = temp;\n\t\t\t\n\t\t\theap_size--;\n\t\t\theapify(list, 0);\n\t\t}\n\t}\n\t\n\tsort(list);\n\treturn list;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(long item; iterable)\n\t{\n\t\theap.length++;\n\t\theap[heap.length - 1] = item;\n\t\tlong i = heap.length - 1;\n\t\twhile(i > 0 && heap[(i - 1) / 2] < heap[i])\n\t\t{\n\t\t\tlong tmp = heap[(i - 1) / 2];\n\t\t\theap[(i - 1) / 2] = heap[i];\n\t\t\theap[i] = tmp;\n\t\t\ti = (i - 1) / 2;\n\t\t}\n\t}\n\tlong[] result = new long[heap.length];\n\tlong i = 0;\n\twhile(heap.length > 0)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length--;\n\t\tlong j = 0;\n\t\twhile(2 * j + 1 < heap.length)\n\t\t{\n\t\t\tlong k = 2 * j + 1;\n\t\t\tif(k + 1 < heap.length && heap[k + 1] > heap[k])\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(heap[j] >= heap[k])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = tmp;\n\t\t\tj = k;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong left = i * 2;\n\t\t\tlong right = i * 2 + 1;\n\t\t\tlong largest = i;\n\t\t\tif(left <= heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right <= heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\ti = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result[1..result_size];\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1)\n\t\t{\n\t\t\tif(heap[j] > heap[j/2])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[j/2];\n\t\t\t\theap[j/2] = temp;\n\t\t\t\tj = j/2;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\telse\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[max];\n\t\t\t\theap[max] = temp;\n\t\t\t\tj = max;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tint n = iterable.length;\n\tint i;\n\tfor (i = n/2 - 1; i >= 0; i--)\n\t\theapify(iterable, n, i);\n\tfor (i = n-1; i >= 0; i--)\n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\theapify(iterable, i, 0);\n\t}\n\treturn iterable;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Create the heap\n\tlong[] heap = new long[iterable.length + 1];\n\theap[0] = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[++heap[0]] = i;\n\t\t\n\t\tlong j = heap[0];\n\t\twhile(j > 1 && heap[j] < heap[j / 2])\n\t\t{\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[j / 2];\n\t\t\theap[j / 2] = tmp;\n\t\t\t\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\t// Pop the heap\n\tlong i = 0;\n\twhile(heap[0] > 0)\n\t{\n\t\tresult[i++] = heap[1];\n\t\t\n\t\theap[1] = heap[heap[0]--];\n\t\t\n\t\tlong j = 1;\n\t\twhile(true)\n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(j * 2 <= heap[0] && heap[j * 2] < heap[j])\n\t\t\t\tk = j * 2;\n\t\t\tif(j * 2 + 1 <= heap[0] && heap[j * 2 + 1] < heap[k])\n\t\t\t\tk = j * 2 + 1;\n\t\t\tif(k == j)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = tmp;\n\t\t\t\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t}\n\t\n\tfor(long i = floor(heap.length / 2); i >= 0; i--)\n\t{\n\t\theap = heapify(heap, i);\n\t}\n\t\n\tfor(long i = heap.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\theap = heapify(heap, 0, i);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tforeach (long item; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, item);\n\t}\n\t\n\tint i = 0;\n\twhile (heap_size > 0)\n\t{\n\t\tresult[i] = heap_extract(heap, heap_size);\n\t\theap_size--;\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[0];\n\tforeach(long i; iterable)\n\t{\n\t\theap.insert(i);\n\t}\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tlong[] heap = new long[iterable.length + 1];\n\t\n\tint heap_size = 0;\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tint i = 0;\n\tforeach(long e; iterable)\n\t{\n\t\tresult[i] = e;\n\t\ti++;\n\t}\n\t\n\tint length = result.length;\n\t\n\tfor(int i = length / 2; i >= 0; i--)\n\t{\n\t\tresult = heapify(result, i, length);\n\t}\n\t\n\tfor(int i = length - 1; i > 0; i--)\n\t{\n\t\tresult = swap(result, 0, i);\n\t\tresult = heapify(result, 0, i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong left_child = i*2;\n\t\t\tlong right_child = i*2 + 1;\n\t\t\tlong max_child = left_child;\n\t\t\tif(right_child <= heap_size && heap[right_child] > heap[left_child])\n\t\t\t{\n\t\t\t\tmax_child = right_child;\n\t\t\t}\n\t\t\tif(max_child <= heap_size && heap[max_child] > heap[i])\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[max_child];\n\t\t\t\theap[max_child] = temp;\n\t\t\t\ti = max_child;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\theap[i] = result[i];\n\t}\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong index = i;\n\t\twhile(index > 0)\n\t\t{\n\t\t\tlong parent = (index - 1) / 2;\n\t\t\tif(heap[parent] < heap[index])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[index];\n\t\t\t\theap[index] = temp;\n\t\t\t}\n\t\t\tindex = parent;\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tlong end = result.length - i - 1;\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[end];\n\t\theap[end] = temp;\n\t\t\n\t\tlong index = 0;\n\t\twhile(index < end)\n\t\t{\n\t\t\tlong left = 2 * index + 1;\n\t\t\tlong right = 2 * index + 2;\n\t\t\tlong largest = index;\n\t\t\tif(left < end && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < end && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != index)\n\t\t\t{\n\t\t\t\tlong temp = heap[largest];\n\t\t\t\theap[largest] = heap[index];\n\t\t\t\theap[index] = temp;\n\t\t\t\tindex = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(long i; iterable)\n\t{\n\t\theap.length++;\n\t\theap[heap.length - 1] = i;\n\t\tlong current = heap.length - 1;\n\t\twhile(current > 0)\n\t\t{\n\t\t\tlong parent = (current - 1) / 2;\n\t\t\tif(heap[current] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[current];\n\t\t\t\theap[current] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurrent = parent;\n\t\t}\n\t}\n\tlong[] result = new long[heap.length];\n\tforeach(long i; 0 .. heap.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length--;\n\t\tlong current = 0;\n\t\twhile(current < heap.length)\n\t\t{\n\t\t\tlong left = current * 2 + 1;\n\t\t\tlong right = current * 2 + 2;\n\t\t\tlong largest = current;\n\t\t\tif(left < heap.length && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap.length && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != current)\n\t\t\t{\n\t\t\t\tlong temp = heap[largest];\n\t\t\t\theap[largest] = heap[current];\n\t\t\t\theap[current] = temp;\n\t\t\t\tcurrent = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1)\n\t\t{\n\t\t\tif(heap[j] < heap[j / 2])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[j / 2];\n\t\t\t\theap[j / 2] = temp;\n\t\t\t\tj /= 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(j * 2 <= heap_size && heap[j * 2] < heap[j])\n\t\t\t{\n\t\t\t\tk = j * 2;\n\t\t\t}\n\t\t\tif(j * 2 + 1 <= heap_size && heap[j * 2 + 1] < heap[k])\n\t\t\t{\n\t\t\t\tk = j * 2 + 1;\n\t\t\t}\n\t\t\tif(k == j)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[k];\n\t\t\t\theap[k] = temp;\n\t\t\t\tj = k;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; heap)\n\t{\n\t\tlong j = i;\n\t\twhile(j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif(heap[j] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong index = 0;\n\twhile(index < iterable.length)\n\t{\n\t\tresult[index] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap[heap.length - 1] = 0;\n\t\t\n\t\tlong j = 0;\n\t\twhile(j < heap.length)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong largest = j;\n\t\t\t\n\t\t\tif(left < heap.length && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap.length && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n",
    "{\n\tlong[] heap = new long[0];\n\tforeach(long i; iterable) \n\t{\n\t\theap ~= i;\n\t\theap = heap_push(heap, i);\n\t}\n\t\n\tlong[] result = new long[0];\n\twhile(heap.length > 0) \n\t{\n\t\tresult ~= heap_pop(heap);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong max_index = i;\n\t\t\tif(2*i <= heap_size && heap[2*i] > heap[max_index])\n\t\t\t\tmax_index = 2*i;\n\t\t\tif(2*i+1 <= heap_size && heap[2*i+1] > heap[max_index])\n\t\t\t\tmax_index = 2*i+1;\n\t\t\tif(max_index == i)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[max_index];\n\t\t\theap[max_index] = temp;\n\t\t\ti = max_index;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1)\n\t\t{\n\t\t\tlong parent = j / 2;\n\t\t\tif(heap[parent] < heap[j])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tj = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong left = j * 2;\n\t\t\tlong right = left + 1;\n\t\t\tlong max = j;\n\t\t\tif(left <= heap_size && heap[left] > heap[max])\n\t\t\t\tmax = left;\n\t\t\tif(right <= heap_size && heap[right] > heap[max])\n\t\t\t\tmax = right;\n\t\t\tif(max != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[max];\n\t\t\t\theap[max] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tj = max;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\ti++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length -= 1;\n\t\theapify(heap, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j / 2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j / 2];\n\t\t\theap[j / 2] = temp;\n\t\t\tj = j / 2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j * 2 <= heap_size)\n\t\t{\n\t\t\tlong k = j * 2;\n\t\t\tif(k + 1 <= heap_size && heap[k + 1] > heap[k])\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(heap[j] >= heap[k])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t}\n\t\n\tlong heap_size = heap.length;\n\t\n\tfor(long i = floor(heap_size / 2) - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, heap_size, i);\n\t}\n\t\n\tfor(long i = heap_size - 1; i >= 0; i--)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\theapify(heap, i, 0);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tforeach(i; 0 .. result.length)\n\t{\n\t\theap[i] = result[i];\n\t}\n\t\n\tlong[] sorted = new long[result.length];\n\t\n\t// build heap\n\tforeach(i; 0 .. heap.length)\n\t{\n\t\tlong parent = (i - 1) / 2;\n\t\tlong child = i;\n\t\twhile(parent >= 0)\n\t\t{\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t\tchild = parent;\n\t\t\t\tparent = (child - 1) / 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// sort heap\n\tlong sorted_index = 0;\n\twhile(sorted_index < sorted.length)\n\t{\n\t\tsorted[sorted_index] = heap[0];\n\t\theap[0] = heap[heap.length - sorted_index - 1];\n\t\t\n\t\tlong parent = 0;\n\t\tlong child = 1;\n\t\twhile(child < heap.length - sorted_index)\n\t\t{\n\t\t\tif(child + 1 < heap.length - sorted_index && heap[child] < heap[child + 1])\n\t\t\t{\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t\tparent = child;",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\t\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\t\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\t\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong max_index = i;\n\t\t\tif(2*i <= heap_size && heap[2*i] > heap[max_index])\n\t\t\t\tmax_index = 2*i;\n\t\t\tif(2*i+1 <= heap_size && heap[2*i+1] > heap[max_index])\n\t\t\t\tmax_index = 2*i+1;\n\t\t\t\n\t\t\tif(max_index == i)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[max_index];\n\t\t\theap[max_index] = temp;\n\t\t\t\n\t\t\ti = max_index;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tlong[] heap = new long[iterable.length + 1];\n\theap[0] = 0;\n\t\n\tforeach(i; 0 .. iterable.length) \n\t{\n\t\theap[i + 1] = iterable[i];\n\t\theap[0]++;\n\t\t\n\t\t// sift up\n\t\tlong j = i + 1;\n\t\twhile(j > 1 && heap[j] > heap[j / 2]) \n\t\t{\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[j / 2];\n\t\t\theap[j / 2] = tmp;\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\t// sort\n\tforeach(i; 0 .. iterable.length) \n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap[0]];\n\t\theap[0]--;\n\t\t\n\t\t// sift down\n\t\tlong j = 1;\n\t\twhile(j * 2 <= heap[0]) \n\t\t{\n\t\t\tlong k = j * 2;\n\t\t\tif(k + 1 <= heap[0] && heap[k + 1] > heap[k]) \n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t\t\n\t\t\tif(heap[j] < heap[k]) \n\t\t\t{\n\t\t\t\tlong tmp = heap[j];\n\t\t\t\theap[j] = heap[k];\n\t\t\t\theap[k] = tmp;\n\t\t\t\tj = k;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0..heap_size)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, item);\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t\tresult[i] = iterable[i];\n\t\n\t// build max heap\n\tforeach(i; 0 .. result.length)\n\t\theapify(result, i);\n\t\n\t// sort\n\tforeach(i; result.length .. 0)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\theapify(result, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint n = iterable.length;\n\tint i = n / 2;\n\tint parent;\n\tint child;\n\tlong t;\n\t\n\tfor (;;) {\n\t\tif (i > 0) {\n\t\t\ti--;\n\t\t\tt = iterable[i];\n\t\t} else {\n\t\t\tn--;\n\t\t\tif (n == 0)\n\t\t\t\treturn iterable;\n\t\t\tt = iterable[n];\n\t\t\titerable[n] = iterable[0];\n\t\t}\n\t\t\n\t\tparent = i;\n\t\tchild = i * 2 + 1;\n\t\twhile (child < n) {\n\t\t\tif (child + 1 < n  &&  iterable[child + 1] > iterable[child])\n\t\t\t\tchild++;\n\t\t\tif (iterable[child] > t) {\n\t\t\t\titerable[parent] = iterable[child];\n\t\t\t\tparent = child;\n\t\t\t\tchild = parent * 2 + 1;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\titerable[parent] = t;\n\t}\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Create a heap\n\tHeap heap = new Heap(iterable.length);\n\t\n\t// Insert all elements into the heap\n\tforeach(long element; iterable)\n\t{\n\t\theap.insert(element);\n\t}\n\t\n\t// Extract all elements from the heap\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap.extract();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tlong[] heap = new long[iterable.length];\n\t\n\t// insert each element into the heap\n\tforeach(long element; iterable)\n\t{\n\t\theap.length++;\n\t\theap[heap.length - 1] = element;\n\t\t\n\t\t// sift up\n\t\tlong index = heap.length - 1;\n\t\twhile(index > 0)\n\t\t{\n\t\t\tlong parent = (index - 1) / 2;\n\t\t\tif(heap[parent] < heap[index])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[index];\n\t\t\t\theap[index] = temp;\n\t\t\t\tindex = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// remove each element from the heap\n\tforeach(long element; iterable)\n\t{\n\t\tresult[result.length - 1] = heap[0];\n\t\tresult.length--;\n\t\t\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length--;\n\t\t\n\t\t// sift down\n\t\tlong index = 0;\n\t\twhile(index < heap.length)\n\t\t{\n\t\t\tlong left = index * 2 + 1;\n\t\t\tlong right = index * 2 + 2;\n\t\t\t\n\t\t\tlong max = index;\n\t\t\tif(left < heap.length && heap[left] > heap[max])\n\t\t\t{\n\t\t\t\tmax = left;\n\t\t\t}\n\t\t\tif(right < heap.length && heap[right] > heap[max])\n\t\t\t{\n\t\t\t\tmax = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(max != index)\n\t\t\t{\n\t\t\t\tlong temp = heap[max];\n\t\t\t\theap[max",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] < heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(2*j <= heap_size)\n\t\t{\n\t\t\tlong k = 2*j;\n\t\t\tif(k+1 <= heap_size && heap[k+1] < heap[k])\n\t\t\t\tk++;\n\t\t\tif(heap[j] <= heap[k])\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// sort the heap\n\theap.sort();\n\t\n\t// copy the heap to the result\n\tforeach(i, v; heap.heap)\n\t\tresult[i] = v;\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tlong[] heap = new long[iterable.length];\n\t\n\t// copy the iterable to the heap\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\t// heapify the heap\n\theapify(heap);\n\t\n\t// sort the heap\n\tfor (int i = iterable.length - 1; i >= 0; i--) \n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theapify(heap, i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] sorted = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = iterable.length;\n\t\n\tfor(long i = floor(heap_size/2); i >= 0; i--)\n\t{\n\t\theapify(heap, i, heap_size);\n\t}\n\t\n\tfor(long i = heap_size - 1; i >= 0; i--)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theap_size--;\n\t\theapify(heap, 0, heap_size);\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Build a max heap\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = iterable[i];\n\t\tint current = i;\n\t\twhile (current != 0) \n\t\t{\n\t\t\tint parent = (current - 1) / 2;\n\t\t\tif (result[current] > result[parent]) \n\t\t\t{\n\t\t\t\tlong temp = result[current];\n\t\t\t\tresult[current] = result[parent];\n\t\t\t\tresult[parent] = temp;\n\t\t\t}\n\t\t\tcurrent = parent;\n\t\t}\n\t}\n\t\n\t// Heap sort\n\tfor (int i = result.length - 1; i > 0; i--) \n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tint current = 0;\n\t\twhile (true) \n\t\t{\n\t\t\tint left = 2 * current + 1;\n\t\t\tint right = 2 * current + 2;\n\t\t\tint largest = current;\n\t\t\tif (left < i && result[left] > result[largest]) \n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif (right < i && result[right] > result[largest]) \n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif (largest != current) \n\t\t\t{\n\t\t\t\tlong temp1 = result[largest];\n\t\t\t\tresult[largest] = result[current];\n\t\t\t\tresult[current] = temp1;\n\t\t\t\tcurrent = largest;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\t// Insertion\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = iterable[i];\n\t\tlong j = heap_size;\n\t\twhile (j > 1 && heap[j] > heap[j / 2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j / 2];\n\t\t\theap[j / 2] = temp;\n\t\t\tj /= 2;\n\t\t}\n\t}\n\t\n\t// Deletion\n\tfor (long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile (2 * j <= heap_size)\n\t\t{\n\t\t\tlong k = 2 * j;\n\t\t\tif (k + 1 <= heap_size && heap[k + 1] > heap[k])\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif (heap[j] >= heap[k])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap.length++;\n\t\theap[heap.length - 1] = item;\n\t\t\n\t\tlong i = heap.length - 1;\n\t\t\n\t\twhile(i > 0)\n\t\t{\n\t\t\tlong parent = (i - 1) / 2;\n\t\t\t\n\t\t\tif(heap[parent] < heap[i])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[i];\n\t\t\t\theap[i] = temp;\n\t\t\t\t\n\t\t\t\ti = parent;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\t\n\twhile(heap.length > 0)\n\t{\n\t\tresult[result_index] = heap[0];\n\t\tresult_index++;\n\t\t\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length--;\n\t\t\n\t\tlong i = 0;\n\t\t\n\t\twhile(i < heap.length)\n\t\t{\n\t\t\tlong left = 2 * i + 1;\n\t\t\tlong right = 2 * i + 2;\n\t\t\t\n\t\t\tlong largest = i;\n\t\t\t\n\t\t\tif(left < heap.length && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\t\n\t\t\tif(right < heap.length && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[largest];\n\t\t\t\theap[largest] = heap[i];\n\t\t",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable) \n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// Copy the array\n\tforeach(i, v; iterable)\n\t\tresult[i] = v;\n\t\n\t// Build the heap\n\tfor(long i = result.length / 2 - 1; i >= 0; i--)\n\t\theapify(result, result.length, i);\n\t\n\t// Extract elements from the heap\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\t// Move current root to end\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\t// Call max heapify on the reduced heap\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\tfor(long i = result.length / 2; i >= 0; i--)\n\t{\n\t\tresult = heapify(result, i, result.length);\n\t}\n\t\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\tresult = swap(result, 0, i);\n\t\tresult = heapify(result, 0, i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = iterable.length;\n\t\n\tfor(long i = heap_size/2; i >= 0; i--)\n\t{\n\t\theapify(heap, i, heap_size);\n\t}\n\t\n\tfor(long i = heap_size-1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[i];\n\t\theap_size--;\n\t\theapify(heap, 0, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size = heap_insert(heap, item, heap_size);\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = result.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, result.length, i);\n\t}\n\t\n\tfor (int i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, i);\n\t}\n\t\n\tforeach(ref long i; result)\n\t{\n\t\ti = heap_extract(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = element;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong max_index = i;\n\t\t\tif(2*i <= heap_size && heap[2*i] > heap[max_index])\n\t\t\t\tmax_index = 2*i;\n\t\t\tif(2*i+1 <= heap_size && heap[2*i+1] > heap[max_index])\n\t\t\t\tmax_index = 2*i+1;\n\t\t\tif(max_index == i)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[max_index];\n\t\t\theap[max_index] = temp;\n\t\t\ti = max_index;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, element);\n\t}\n\t\n\tforeach(ref long element; result)\n\t{\n\t\telement = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_pop(heap);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, i);\n\t}\n\t\n\tforeach(long i; 0..result.length)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong current = heap_size;\n\t\twhile(current > 1 && heap[current] > heap[current / 2])\n\t\t{\n\t\t\tlong temp = heap[current / 2];\n\t\t\theap[current / 2] = heap[current];\n\t\t\theap[current] = temp;\n\t\t\tcurrent /= 2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong current = 1;\n\t\twhile(current * 2 <= heap_size)\n\t\t{\n\t\t\tlong child = current * 2;\n\t\t\tif(child + 1 <= heap_size && heap[child + 1] > heap[child])\n\t\t\t{\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\tif(heap[current] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[current];\n\t\t\t\theap[current] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurrent = child;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, element);\n\t}\n\t\n\tforeach(ref long element; result)\n\t{\n\t\telement = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tfor(int i = 0; i < iterable.length; i++)\n\t\tresult[i] = iterable[i];\n\t\n\tfor(int i = 0; i < result.length; i++)\n\t{\n\t\tint j = i;\n\t\twhile(j > 0)\n\t\t{\n\t\t\tint k = (j - 1) / 2;\n\t\t\tif(result[k] < result[j])\n\t\t\t{\n\t\t\t\tlong temp = result[k];\n\t\t\t\tresult[k] = result[j];\n\t\t\t\tresult[j] = temp;\n\t\t\t\tj = k;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfor(int i = result.length - 1; i > 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\tint j = 0;\n\t\twhile(true)\n\t\t{\n\t\t\tint k = 2 * j + 1;\n\t\t\tif(k >= i)\n\t\t\t\tbreak;\n\t\t\tif(k + 1 < i && result[k] < result[k + 1])\n\t\t\t\tk++;\n\t\t\tif(result[j] < result[k])\n\t\t\t{\n\t\t\t\tlong temp2 = result[j];\n\t\t\t\tresult[j] = result[k];\n\t\t\t\tresult[k] = temp2;\n\t\t\t\tj = k;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\t\n\tlong heap_size = 0;\n\t\n\tforeach(long i; result)\n\t{\n\t\theap[heap_size] = result[i];\n\t\theap_size++;\n\t\theapify_up(heap, heap_size);\n\t}\n\t\n\tforeach(long i; result)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size-1];\n\t\theap_size--;\n\t\theapify_down(heap, heap_size);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint n = iterable.length;\n\t\n\tfor (int i = n / 2 - 1; i >= 0; i--)\n\t\theapify(iterable, n, i);\n\t\n\tfor (int i = n - 1; i >= 0; i--)\n\t{\n\t\tlong temp = iterable[0];\n\t\titerable[0] = iterable[i];\n\t\titerable[i] = temp;\n\t\t\n\t\theapify(iterable, i, 0);\n\t}\n\t\n\treturn iterable;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tint i = 0;\n\tforeach(elem; iterable)\n\t{\n\t\tresult[i] = elem;\n\t\ti++;\n\t}\n\t\n\tint n = result.length;\n\t\n\tfor(int i = n / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, n, i);\n\t}\n\t\n\tfor(int i = n - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong tmp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = tmp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong i = 1;\n\t\twhile(i*2 <= heap_size)\n\t\t{\n\t\t\tlong j = i*2;\n\t\t\tif(j+1 <= heap_size && heap[j+1] > heap[j])\n\t\t\t\tj++;\n\t\t\tif(heap[i] >= heap[j])\n\t\t\t\tbreak;\n\t\t\tlong tmp = heap[i];\n\t\t\theap[i] = heap[j];\n\t\t\theap[j] = tmp;\n\t\t\ti = j;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor(long i = 0; i < iterable.length; i++)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\theap[heap.length - 1 - i] = temp;\n\t\t\n\t\tlong j = 0;\n\t\twhile(j < heap.length - 1 - i)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\t\n\t\t\tif(left < heap.length - 1 - i && right < heap.length - 1 - i)\n\t\t\t{\n\t\t\t\tif(heap[left] > heap[right])\n\t\t\t\t{\n\t\t\t\t\tif(heap[left] > heap[j])\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = heap[j];\n\t\t\t\t\t\theap[j] = heap[left];\n\t\t\t\t\t\theap[left] = temp;\n\t\t\t\t\t\tj = left;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(heap[right] > heap[j])\n\t\t\t\t\t{\n\t\t\t\t\t\ttemp = heap[j];\n\t\t\t\t\t\theap[j] = heap[right];\n\t\t\t\t\t\theap[right] = temp;\n\t\t\t\t\t\tj = right;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length + 1];\n\tint heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tint i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti = i / 2;\n\t\t}\n\t}\n\t\n\tint i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\ti++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tint j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tint max = j;\n\t\t\tif(j * 2 <= heap_size && heap[j * 2] > heap[max])\n\t\t\t{\n\t\t\t\tmax = j * 2;\n\t\t\t}\n\t\t\tif(j * 2 + 1 <= heap_size && heap[j * 2 + 1] > heap[max])\n\t\t\t{\n\t\t\t\tmax = j * 2 + 1;\n\t\t\t}\n\t\t\tif(max == j)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length + 1];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable) \n\t{\n\t\theap_size++;\n\t\theap[heap_size] = element;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] < heap[i / 2]) \n\t\t{\n\t\t\tlong tmp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = tmp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0) \n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size) \n\t\t{\n\t\t\tlong k = j;\n\t\t\tif(2 * j <= heap_size && heap[2 * j] < heap[k]) \n\t\t\t{\n\t\t\t\tk = 2 * j;\n\t\t\t}\n\t\t\tif(2 * j + 1 <= heap_size && heap[2 * j + 1] < heap[k]) \n\t\t\t{\n\t\t\t\tk = 2 * j + 1;\n\t\t\t}\n\t\t\tif(k == j) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong tmp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = tmp;\n\t\t\tj = k;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tlong result_size = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult_size++;\n\t\tresult[result_size] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong i = 1;\n\t\twhile(2*i <= heap_size)\n\t\t{\n\t\t\tlong j = 2*i;\n\t\t\tif(j < heap_size && heap[j] < heap[j+1])\n\t\t\t\tj++;\n\t\t\tif(heap[i] >= heap[j])\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[j];\n\t\t\theap[j] = temp;\n\t\t\ti = j;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(long i; iterable)\n\t{\n\t\tresult ~= i;\n\t}\n\t\n\tlong n = result.length;\n\t\n\tfor(long i = n/2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, n, i);\n\t}\n\t\n\tfor(long i = n-1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_size = new long[1];\n\theap_size[0] = 0;\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\theap_insert(heap, heap_size, iterable[i]);\n\t}\n\tfor (long i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\t\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t\tmax = j*2;\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t\tmax = j*2+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tauto n = iterable.length;\n\tauto heap = new long[n];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theapify(heap, i);\n\t}\n\t\n\tforeach(i; 0 .. n)\n\t{\n\t\titerable[i] = heap[0];\n\t\theap[0] = heap[n - i - 1];\n\t\theapify(heap[0 .. n - i - 1], 0);\n\t}\n\t\n\treturn iterable;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\t\n\tlong heap_size = 0;\n\t\n\tforeach(long i; result)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = result[i];\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tforeach(long i; result)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(j*2 <= heap_size && heap[j*2] > heap[max])\n\t\t\t{\n\t\t\t\tmax = j*2;\n\t\t\t}\n\t\t\tif(j*2+1 <= heap_size && heap[j*2+1] > heap[max])\n\t\t\t{\n\t\t\t\tmax = j*2+1;\n\t\t\t}\n\t\t\tif(max == j)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_pop(heap);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\theap_size = heap_insert(heap, heap_size, iterable[i]);\n\t}\n\tfor (int i = 0; i < iterable.length; i++) \n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(int i, long item; iterable)\n\t{\n\t\theap[i] = item;\n\t}\n\t\n\tforeach(int i; 0 .. iterable.length)\n\t{\n\t\theapify(heap, i);\n\t}\n\t\n\tforeach(int i; iterable.length .. 0)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\theapify(heap, 0, i);\n\t}\n\t\n\treturn heap;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, item);\n\t}\n\t\n\tforeach(long item; iterable)\n\t{\n\t\tresult[item] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, i);\n\t}\n\t\n\tforeach(long i; 0 .. heap_size)\n\t{\n\t\tresult[i] = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0..heap.length)\n\t{\n\t\tlong left = 2*i+1;\n\t\tlong right = 2*i+2;\n\t\tlong max = i;\n\t\t\n\t\tif(left < heap.length && heap[left] > heap[max])\n\t\t{\n\t\t\tmax = left;\n\t\t}\n\t\tif(right < heap.length && heap[right] > heap[max])\n\t\t{\n\t\t\tmax = right;\n\t\t}\n\t\tif(max != i)\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[max];\n\t\t\theap[max] = temp;\n\t\t}\n\t}\n\t\n\tlong[] sorted = new long[heap.length];\n\tforeach(long i; 0..heap.length)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length-i-1];\n\t\theap[heap.length-i-1] = 0;\n\t\t\n\t\tforeach(long j; 0..heap.length)\n\t\t{\n\t\t\tlong left = 2*j+1;\n\t\t\tlong right = 2*j+2;\n\t\t\tlong max = j;\n\t\t\n\t\t\tif(left < heap.length && heap[left] > heap[max])\n\t\t\t{\n\t\t\t\tmax = left;\n\t\t\t}\n\t\t\tif(right < heap.length && heap[right] > heap[max])\n\t\t\t{\n\t\t\t\tmax = right;\n\t\t\t}\n\t\t\tif(max != j)\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[max];\n\t\t\t\theap[max] = temp;",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong[] heap_index = new long[iterable.length];\n\tlong[] heap_index_reverse = new long[iterable.length];\n\tlong heap_size = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong temp = 0;\n\tlong temp_index = 0;\n\tlong temp_index_reverse = 0;\n\tlong parent = 0;\n\tlong left = 0;\n\tlong right = 0;\n\tlong largest = 0;\n\tlong index = 0;\n\tlong index_reverse = 0;\n\t\n\tfor (i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t\theap_index[i] = i;\n\t\theap_index_reverse[i] = i;\n\t}\n\t\n\theap_size = iterable.length;\n\t\n\tfor (i = floor(heap_size / 2) - 1; i >= 0; i--)\n\t{\n\t\tparent = i;\n\t\ttemp = heap[i];\n\t\ttemp_index = heap_index[i];\n\t\ttemp_index_reverse = heap_index_reverse[i];\n\t\t\n\t\twhile (parent <= floor(heap_size / 2) - 1)\n\t\t{\n\t\t\tleft = 2 * parent + 1;\n\t\t\tright = 2 * parent + 2;\n\t\t\t\n\t\t\tif (left < heap_size && heap[left] > temp)\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlargest = parent;\n\t\t\t}\n\t\t\t\n\t\t\tif (right < heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif (largest != parent)\n\t\t\t{\n\t\t\t\theap[parent] = heap[largest];\n\t\t",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tlong parent = (i - 1) / 2;\n\t\tlong child = i;\n\t\t\n\t\twhile(parent >= 0)\n\t\t{\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tchild = parent;\n\t\t\tparent = (parent - 1) / 2;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\t\n\t\theap[0] = heap[iterable.length - i - 1];\n\t\theap[iterable.length - i - 1] = 0;\n\t\t\n\t\tlong parent = 0;\n\t\tlong child = 1;\n\t\t\n\t\twhile(child < iterable.length - i)\n\t\t{\n\t\t\tif(child + 1 < iterable.length - i && heap[child] < heap[child + 1])\n\t\t\t{\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\t\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tparent = child;\n\t\t\tchild = parent * 2 + 1;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = item;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i / 2];\n\t\t\theap[i / 2] = temp;\n\t\t\ti /= 2;\n\t\t}\n\t}\n\t\n\tforeach(long i; 0 .. result.length)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(2 * j <= heap_size)\n\t\t{\n\t\t\tlong k = 2 * j;\n\t\t\tif(k + 1 <= heap_size && heap[k + 1] > heap[k])\n\t\t\t\tk++;\n\t\t\tif(heap[j] >= heap[k])\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[k];\n\t\t\theap[k] = temp;\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] sorted = new long[iterable.length];\n\t\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = heap.length;\n\t\n\tbuild_max_heap(heap);\n\t\n\tforeach(long i; heap_size .. 1)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap_size];\n\t\theap_size -= 1;\n\t\tmax_heapify(heap, 0, heap_size);\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tHeap heap = new Heap();\n\t\n\t// insert all elements into the heap\n\tforeach(long i; iterable)\n\t{\n\t\theap.insert(i);\n\t}\n\t\n\t// extract all elements from the heap\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap.extract();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tlong[] heap = new long[iterable.length];\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\theapify(heap);\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap[heap.length - 1] = 0;\n\t\theap.length -= 1;\n\t\theapify(heap);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap_pop(heap);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] a = iterable.dup;\n\tlong[] b = new long[a.length];\n\tlong[] c = new long[a.length];\n\tlong[] d = new long[a.length];\n\tlong[] e = new long[a.length];\n\tlong[] f = new long[a.length];\n\tlong[] g = new long[a.length];\n\tlong[] h = new long[a.length];\n\tlong[] i = new long[a.length];\n\tlong[] j = new long[a.length];\n\tlong[] k = new long[a.length];\n\tlong[] l = new long[a.length];\n\tlong[] m = new long[a.length];\n\tlong[] n = new long[a.length];\n\tlong[] o = new long[a.length];\n\tlong[] p = new long[a.length];\n\tlong[] q = new long[a.length];\n\tlong[] r = new long[a.length];\n\tlong[] s = new long[a.length];\n\tlong[] t = new long[a.length];\n\tlong[] u = new long[a.length];\n\tlong[] v = new long[a.length];\n\tlong[] w = new long[a.length];\n\tlong[] x = new long[a.length];\n\tlong[] y = new long[a.length];\n\tlong[] z = new long[a.length];\n\tlong[] aa = new long[a.length];\n\tlong[] ab = new long[a.length];\n\tlong[] ac = new long[a.length];\n\tlong[] ad = new long[a.length];\n\tlong[] ae = new long[a.length];\n\tlong[] af = new long[a.length];\n\tlong[] ag = new long[a.length];\n\tlong[] ah = new long[a.length];\n\tlong[] ai = new long[a.length];\n\tlong[] aj = new long[a.length];\n\tlong[] ak = new long[a.length];\n\tlong[] al = new long[a.length];\n\tlong[] am = new long[a.length];",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size = insert_heap(heap, heap_size, item);\n\t}\n\t\n\tforeach(long i; 0 .. heap_size)\n\t{\n\t\tresult[i] = extract_heap(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// copy the iterable to result\n\tforeach(long i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\t// heapify the list\n\tforeach(long i; 0 .. result.length)\n\t{\n\t\tlong j = i;\n\t\tlong temp = result[i];\n\t\twhile(j > 0 && temp > result[(j - 1) / 2])\n\t\t{\n\t\t\tresult[j] = result[(j - 1) / 2];\n\t\t\tj = (j - 1) / 2;\n\t\t}\n\t\tresult[j] = temp;\n\t}\n\t\n\t// sort the list\n\tforeach(long i; 0 .. result.length)\n\t{\n\t\tlong j = 0;\n\t\tlong temp = result[result.length - i - 1];\n\t\tresult[result.length - i - 1] = result[0];\n\t\twhile((2 * j + 1) < (result.length - i - 1))\n\t\t{\n\t\t\tlong k = 2 * j + 1;\n\t\t\tif(k + 1 < (result.length - i - 1) && result[k] < result[k + 1])\n\t\t\t{\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tif(result[k] > temp)\n\t\t\t{\n\t\t\t\tresult[j] = result[k];\n\t\t\t\tj = k;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tresult[j] = temp;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong heap_size = iterable.length;\n\t\n\tfor(long i = iterable.length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(heap, heap_size, i);\n\t}\n\t\n\tfor(long i = iterable.length - 1; i >= 0; i--)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\theapify(heap, heap_size, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tlong temp = heap[0];\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\theap[heap.length - 1 - i] = temp;\n\t\t\n\t\tlong j = 0;\n\t\twhile(true)\n\t\t{\n\t\t\tlong left = 2 * j + 1;\n\t\t\tlong right = 2 * j + 2;\n\t\t\tlong largest = j;\n\t\t\t\n\t\t\tif(left < heap.length - 1 - i && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\t\n\t\t\tif(right < heap.length - 1 - i && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\t\n\t\t\tif(largest != j)\n\t\t\t{\n\t\t\t\ttemp = heap[j];\n\t\t\t\theap[j] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\tj = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tresult[i] = heap[heap.length - 1 - i];\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] sorted = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap = heap[0..heap.length - 1];\n\t\theap = heapify(heap);\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong index = heap_size;\n\t\twhile(index > 1 && heap[index] > heap[index/2])\n\t\t{\n\t\t\tlong temp = heap[index];\n\t\t\theap[index] = heap[index/2];\n\t\t\theap[index/2] = temp;\n\t\t\tindex /= 2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong index = 1;\n\t\twhile(index <= heap_size)\n\t\t{\n\t\t\tlong left = index*2;\n\t\t\tlong right = index*2+1;\n\t\t\tlong max = index;\n\t\t\tif(left <= heap_size && heap[left] > heap[max])\n\t\t\t\tmax = left;\n\t\t\tif(right <= heap_size && heap[right] > heap[max])\n\t\t\t\tmax = right;\n\t\t\tif(max == index)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[index];\n\t\t\theap[index] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tindex = max;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tint heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, i);\n\t}\n\t\n\tfor(int i = 0; i < iterable.length; i++)\n\t{\n\t\titerable[i] = heap_extract(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn iterable;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// make a heap\n\tlong[] heap = new long[iterable.length + 1];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i + 1] = iterable[i];\n\t}\n\t\n\t// heapify\n\tfor (int i = heap.length / 2; i >= 1; i--)\n\t{\n\t\theapify(heap, i);\n\t}\n\t\n\t// sort\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[1];\n\t\theap[1] = heap[heap.length - i - 1];\n\t\theapify(heap, 1, heap.length - i - 1);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// sort the heap\n\theap.sort();\n\t\n\t// copy the sorted heap to the result array\n\tfor (int i = 0; i < iterable.length; i++)\n\t\tresult[i] = heap.pop();\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length = heap.length - 1;\n\t\t\n\t\tfor (int j = 0; j < heap.length; j++)\n\t\t{\n\t\t\tif (heap[j] < heap[j + 1])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[j + 1];\n\t\t\t\theap[j + 1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(long item; iterable)\n\t{\n\t\tresult ~= item;\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; result)\n\t{\n\t\theap_size = heap_size + 1;\n\t\theap[heap_size - 1] = item;\n\t\tlong i = heap_size - 1;\n\t\twhile(i > 0 && heap[i] > heap[(i - 1) / 2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[(i - 1) / 2];\n\t\t\theap[(i - 1) / 2] = temp;\n\t\t\ti = (i - 1) / 2;\n\t\t}\n\t}\n\t\n\tlong[] result_heap = new long[result.length];\n\tlong result_heap_size = 0;\n\t\n\twhile(heap_size > 0)\n\t{\n\t\tresult_heap_size = result_heap_size + 1;\n\t\tresult_heap[result_heap_size - 1] = heap[0];\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size = heap_size - 1;\n\t\t\n\t\tlong i = 0;\n\t\twhile(i < heap_size)\n\t\t{\n\t\t\tlong left = 2 * i + 1;\n\t\t\tlong right = 2 * i + 2;\n\t\t\tlong largest = i;\n\t\t\tif(left < heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\t",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] sorted = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < heap.length; i++)\n\t{\n\t\theapify(heap, i);\n\t}\n\t\n\tfor (int i = 0; i < sorted.length; i++)\n\t{\n\t\tsorted[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1 - i];\n\t\theap[heap.length - 1 - i] = 0;\n\t\theapify(heap, 0);\n\t}\n\t\n\treturn sorted;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i; 0 .. iterable.length)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong[] heap = new long[result.length];\n\tlong heap_size = 0;\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\theap_size = heap_insert(heap, result[i], heap_size);\n\t}\n\t\n\tforeach(i; 0 .. result.length)\n\t{\n\t\tresult[i] = heap_extract(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long element; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, element);\n\t}\n\t\n\tforeach(ref long element; result)\n\t{\n\t\telement = heap_extract(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\tlong[] temp = new long[iterable.length];\n\tlong[] temp2 = new long[iterable.length];\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\ttemp[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\ttemp2[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tfor (int i = 0; i < iterable.length; i++)\n\t",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = i;\n\t\tlong j = heap_size;\n\t\twhile(j > 1 && heap[j] > heap[j/2])\n\t\t{\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[j/2];\n\t\t\theap[j/2] = temp;\n\t\t\tj = j/2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[1];\n\t\tresult_index++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong i = 1;\n\t\twhile(i <= heap_size)\n\t\t{\n\t\t\tlong j = i;\n\t\t\tlong left = 2*i;\n\t\t\tlong right = 2*i + 1;\n\t\t\tif(left <= heap_size && heap[left] > heap[j])\n\t\t\t{\n\t\t\t\tj = left;\n\t\t\t}\n\t\t\tif(right <= heap_size && heap[right] > heap[j])\n\t\t\t{\n\t\t\t\tj = right;\n\t\t\t}\n\t\t\tif(j == i)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[j];\n\t\t\theap[j] = temp;\n\t\t\ti = j;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long x; iterable)\n\t{\n\t\theap_size++;\n\t\theap[heap_size] = x;\n\t\tlong i = heap_size;\n\t\twhile(i > 1 && heap[i] > heap[i/2])\n\t\t{\n\t\t\tlong temp = heap[i];\n\t\t\theap[i] = heap[i/2];\n\t\t\theap[i/2] = temp;\n\t\t\ti = i/2;\n\t\t}\n\t}\n\t\n\tlong i = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[i] = heap[1];\n\t\ti++;\n\t\theap[1] = heap[heap_size];\n\t\theap_size--;\n\t\tlong j = 1;\n\t\twhile(j <= heap_size)\n\t\t{\n\t\t\tlong max = j;\n\t\t\tif(2*j <= heap_size && heap[2*j] > heap[max])\n\t\t\t\tmax = 2*j;\n\t\t\tif(2*j+1 <= heap_size && heap[2*j+1] > heap[max])\n\t\t\t\tmax = 2*j+1;\n\t\t\tif(max == j)\n\t\t\t\tbreak;\n\t\t\tlong temp = heap[j];\n\t\t\theap[j] = heap[max];\n\t\t\theap[max] = temp;\n\t\t\tj = max;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[heap_size] = i;\n\t\theap_size++;\n\t\tlong j = heap_size - 1;\n\t\twhile(j > 0)\n\t\t{\n\t\t\tlong parent = (j - 1) / 2;\n\t\t\tif(heap[j] > heap[parent])\n\t\t\t{\n\t\t\t\tlong temp = heap[j];\n\t\t\t\theap[j] = heap[parent];\n\t\t\t\theap[parent] = temp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj = parent;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\twhile(heap_size > 0)\n\t{\n\t\tresult[result_index] = heap[0];\n\t\tresult_index++;\n\t\theap[0] = heap[heap_size - 1];\n\t\theap_size--;\n\t\tlong i = 0;\n\t\twhile(i < heap_size)\n\t\t{\n\t\t\tlong left = 2 * i + 1;\n\t\t\tlong right = 2 * i + 2;\n\t\t\tlong largest = i;\n\t\t\tif(left < heap_size && heap[left] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = left;\n\t\t\t}\n\t\t\tif(right < heap_size && heap[right] > heap[largest])\n\t\t\t{\n\t\t\t\tlargest = right;\n\t\t\t}\n\t\t\tif(largest != i)\n\t\t\t{\n\t\t\t\tlong temp = heap[i];\n\t\t\t\theap[i] = heap[largest];\n\t\t\t\theap[largest] = temp;\n\t\t\t\ti = largest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t",
    "{\n\tlong[] result;\n\tlong[] heap;\n\tlong temp;\n\tlong i;\n\tlong j;\n\tlong k;\n\tlong n;\n\t\n\tn = iterable.length;\n\t\n\tresult = new long[n];\n\theap = new long[n];\n\t\n\tfor (i = 0; i < n; i++)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tfor (i = 1; i < n; i++)\n\t{\n\t\tj = i;\n\t\t\n\t\twhile (j > 0)\n\t\t{\n\t\t\tk = (j - 1) / 2;\n\t\t\t\n\t\t\tif (heap[k] < heap[j])\n\t\t\t{\n\t\t\t\ttemp = heap[k];\n\t\t\t\theap[k] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t}\n\t\t\t\n\t\t\tj = k;\n\t\t}\n\t}\n\t\n\tfor (i = n - 1; i > 0; i--)\n\t{\n\t\ttemp = heap[0];\n\t\theap[0] = heap[i];\n\t\theap[i] = temp;\n\t\t\n\t\tk = 0;\n\t\t\n\t\twhile (k < i)\n\t\t{\n\t\t\tj = 2 * k + 1;\n\t\t\t\n\t\t\tif ((j < i - 1) && (heap[j] < heap[j + 1]))\n\t\t\t{\n\t\t\t\tj += 1;\n\t\t\t}\n\t\t\t\n\t\t\tif (j < i && heap[k] < heap[j])\n\t\t\t{\n\t\t\t\ttemp = heap[k];\n\t\t\t\theap[k] = heap[j];\n\t\t\t\theap[j] = temp;\n\t\t\t\tk = j;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (i =",
    "{\n\tlong[] heap = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\theap[i] = item;\n\t\theap_up(heap, i);\n\t}\n\t\n\tlong[] result = new long[iterable.length];\n\tforeach(i, item; iterable)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap_down(heap, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\theap[i] = iterable[i];\n\t\tresult[i] = 0;\n\t}\n\t\n\theapify(heap);\n\t\n\tforeach(long i; 0..iterable.length)\n\t{\n\t\tresult[i] = heap[0];\n\t\theap[0] = heap[heap.length - 1];\n\t\theap.length = heap.length - 1;\n\t\theapify(heap);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\tresult[i] = iterable[i];\n\t}\n\t\n\tlong length = result.length;\n\t\n\tfor(long i = length / 2 - 1; i >= 0; i--)\n\t{\n\t\theapify(result, length, i);\n\t}\n\t\n\tfor(long i = length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, i, 0);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] heap = new long[iterable.length];\n\tlong[] result = new long[iterable.length];\n\t\n\tforeach(long i; iterable)\n\t{\n\t\theap[i] = iterable[i];\n\t}\n\t\n\tforeach(long i; heap)\n\t{\n\t\tlong parent = (i - 1) / 2;\n\t\tlong child = i;\n\t\t\n\t\twhile(heap[parent] < heap[child])\n\t\t{\n\t\t\tlong temp = heap[parent];\n\t\t\theap[parent] = heap[child];\n\t\t\theap[child] = temp;\n\t\t\t\n\t\t\tchild = parent;\n\t\t\tparent = (child - 1) / 2;\n\t\t}\n\t}\n\t\n\tlong result_index = 0;\n\t\n\twhile(heap.length > 0)\n\t{\n\t\tresult[result_index++] = heap[0];\n\t\t\n\t\theap[0] = heap[heap.length - 1];\n\t\theap = heap[0..heap.length - 2];\n\t\t\n\t\tlong parent = 0;\n\t\tlong child = parent * 2 + 1;\n\t\t\n\t\twhile(child < heap.length)\n\t\t{\n\t\t\tif(child + 1 < heap.length && heap[child] < heap[child + 1])\n\t\t\t{\n\t\t\t\tchild++;\n\t\t\t}\n\t\t\t\n\t\t\tif(heap[parent] < heap[child])\n\t\t\t{\n\t\t\t\tlong temp = heap[parent];\n\t\t\t\theap[parent] = heap[child];\n\t\t\t\theap[child] = temp;\n\t\t\t\t\n\t\t\t\tparent = child;\n\t\t\t\tchild = parent * 2 + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tforeach(i, v; iterable)\n\t{\n\t\tresult[i] = v;\n\t}\n\t\n\t// Build the heap\n\tfor(long i = result.length / 2; i >= 0; i--)\n\t{\n\t\theapify(result, i, result.length);\n\t}\n\t\n\t// Sort the heap\n\tfor(long i = result.length - 1; i >= 0; i--)\n\t{\n\t\tlong temp = result[0];\n\t\tresult[0] = result[i];\n\t\tresult[i] = temp;\n\t\t\n\t\theapify(result, 0, i);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\t\n\t// create a heap\n\tHeap heap = new Heap(iterable);\n\t\n\t// sort the heap\n\theap.sort();\n\t\n\t// copy the sorted heap into the result\n\tfor (int i = 0; i < iterable.length; i++)\n\t{\n\t\tresult[i] = heap.pop();\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[iterable.length];\n\tlong[] heap = new long[iterable.length];\n\tlong heap_size = 0;\n\t\n\tforeach(long item; iterable)\n\t{\n\t\theap_size = heap_insert(heap, heap_size, item);\n\t}\n\t\n\tforeach(long item; result)\n\t{\n\t\titem = heap_extract_max(heap, heap_size);\n\t\theap_size--;\n\t}\n\t\n\treturn result;\n}"
  ]
}