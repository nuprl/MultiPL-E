{
  "name": "mbpp_572_two_unique_nums",
  "language": "d",
  "prompt": "import std.math;\nimport std.typecons;\n/*\n\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\n*/\nlong[] two_unique_nums(long[] nums) \n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "unittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[0] == num)\n\t\t{\n\t\t\tunique_nums[0] = 0;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tunique_nums[1] = num;\n\t\t}\n\t\telse if(unique_nums[1] == num)\n\t\t{\n\t\t\tunique_nums[1] = 0;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong right_most_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[0] == num)\n\t\t{\n\t\t\tunique_nums[0] = 0;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tunique_nums[1] = num;\n\t\t}\n\t\telse if(unique_nums[1] == num)\n\t\t{\n\t\t\tunique_nums[1] = 0;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tfor (long num : nums) \n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tfor (long num : nums) \n\t{\n\t\tif ((num & bit) != 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\txor ^= nums[i];\n\t}\n\t\n\tint right_most_set_bit = xor & ~(xor - 1);\n\t\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tif ((nums[i] & right_most_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= nums[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= nums[i];\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tunique_nums[0] = xor;\n\tunique_nums[1] = xor;\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// find the rightmost set bit\n\tlong right_set_bit = xor & ~(xor - 1);\n\t\n\t// divide the numbers into two groups\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// Find the rightmost set bit\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\t// Divide the numbers into two groups\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tret[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret[1] ^= num;\n\t\t}\n\t}\n\treturn ret;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\t// Get the rightmost set bit in xor\n\tlong set_bit_no = (xor & ~(xor - 1));\n\t\n\t// Now divide elements in two sets by comparing rightmost set\n\t// bit of xor with bit at same position in each element.\n\tforeach(num; nums)\n\t{\n\t\tif((num & set_bit_no) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_num ^= num;\n\t}\n\t\n\tlong last_bit = xor_num & ~(xor_num - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong[] unique_nums_index = new long[2];\n\tlong[] unique_nums_count = new long[2];\n\t\n\tunique_nums[0] = nums[0];\n\tunique_nums[1] = nums[1];\n\tunique_nums_index[0] = 0;\n\tunique_nums_index[1] = 1;\n\tunique_nums_count[0] = 1;\n\tunique_nums_count[1] = 1;\n\t\n\tforeach(i, num; nums)\n\t{\n\t\tif(num == unique_nums[0])\n\t\t{\n\t\t\tunique_nums_count[0]++;\n\t\t}\n\t\telse if(num == unique_nums[1])\n\t\t{\n\t\t\tunique_nums_count[1]++;\n\t\t}\n\t\telse if(unique_nums_count[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t\tunique_nums_index[0] = i;\n\t\t\tunique_nums_count[0] = 1;\n\t\t}\n\t\telse if(unique_nums_count[1] == 0)\n\t\t{\n\t\t\tunique_nums[1] = num;\n\t\t\tunique_nums_index[1] = i;\n\t\t\tunique_nums_count[1] = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums_count[0]--;\n\t\t\tunique_nums_count[1]--;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong[] nums_copy = nums.dup;\n\tnums_copy.sort;\n\t\n\tif (nums_copy[0] != nums_copy[1])\n\t{\n\t\tunique_nums[0] = nums_copy[0];\n\t\tunique_nums[1] = nums_copy[1];\n\t}\n\telse\n\t{\n\t\tunique_nums[0] = nums_copy[2];\n\t\tunique_nums[1] = nums_copy[3];\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tforeach (n; nums) \n\t{\n\t\tif (n in result) \n\t\t{\n\t\t\tresult.remove(n);\n\t\t} \n\t\telse \n\t\t{\n\t\t\tresult ~= n;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// Get the rightmost set bit\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\t// Split the numbers into two groups\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong bit = xor & ~(xor-1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tunique_nums[0] ^= num;\n\t\telse\n\t\t\tunique_nums[1] ^= num;\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num != unique_nums[0] && num != unique_nums[1])\n\t\t{\n\t\t\tif(unique_nums[0] == 0)\n\t\t\t{\n\t\t\t\tunique_nums[0] = num;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong right_most_set_bit = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums;\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums.length < 2)\n\t\t{\n\t\t\tunique_nums ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num != unique_nums[0] && num != unique_nums[1])\n\t\t\t{\n\t\t\t\tunique_nums ~= num;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums[0..2];\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[0] == num)\n\t\t{\n\t\t\tunique_nums[0] = 0;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tunique_nums[1] = num;\n\t\t}\n\t\telse if(unique_nums[1] == num)\n\t\t{\n\t\t\tunique_nums[1] = 0;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong right_most_set_bit = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// Find the rightmost bit that is '1'\n\tlong rightmost_set_bit = xor & ~(xor-1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit_mask = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong[] temp = new long[nums.length];\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint count = 0;\n\t\n\twhile(i < nums.length)\n\t{\n\t\tj = 0;\n\t\tcount = 0;\n\t\twhile(j < nums.length)\n\t\t{\n\t\t\tif(nums[i] == nums[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif(count == 1)\n\t\t{\n\t\t\ttemp[k] = nums[i];\n\t\t\tk++;\n\t\t}\n\t\ti++;\n\t}\n\tresult[0] = temp[0];\n\tresult[1] = temp[1];\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong bit_pos = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_pos) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong[] temp = new long[2];\n\tlong[] temp2 = new long[2];\n\tlong[] temp3 = new long[2];\n\tlong[] temp4 = new long[2];\n\tlong[] temp5 = new long[2];\n\tlong[] temp6 = new long[2];\n\tlong[] temp7 = new long[2];\n\tlong[] temp8 = new long[2];\n\tlong[] temp9 = new long[2];\n\tlong[] temp10 = new long[2];\n\tlong[] temp11 = new long[2];\n\tlong[] temp12 = new long[2];\n\tlong[] temp13 = new long[2];\n\tlong[] temp14 = new long[2];\n\tlong[] temp15 = new long[2];\n\tlong[] temp16 = new long[2];\n\tlong[] temp17 = new long[2];\n\tlong[] temp18 = new long[2];\n\tlong[] temp19 = new long[2];\n\tlong[] temp20 = new long[2];\n\tlong[] temp21 = new long[2];\n\tlong[] temp22 = new long[2];\n\tlong[] temp23 = new long[2];\n\tlong[] temp24 = new long[2];\n\tlong[] temp25 = new long[2];\n\tlong[] temp26 = new long[2];\n\tlong[] temp27 = new long[2];\n\tlong[] temp28 = new long[2];\n\tlong[] temp29 = new long[2];\n\tlong[] temp30 = new long[2];\n\tlong[] temp31 = new long[2];\n\tlong[] temp32 = new long[2];\n\tlong[] temp33 = new long[2];\n\tlong[] temp34 = new long[2];\n\tlong[] temp35 = new long[2];\n\tlong[] temp36 = new long[2];\n\tlong[] temp37 = new long[2];\n\tlong[] temp38 = new long[2];\n\tlong[] temp39 = new long[2];\n\tlong[] temp40 = new long[2];\n\tlong[] temp41 = new long[2];\n\tlong[] temp42 = new",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tresult[0] ^= num;\n\t}\n\tresult[1] = result[0];\n\tforeach(num; nums)\n\t{\n\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong[] nums_copy = nums.dup;\n\tnums_copy.sort;\n\tif (nums_copy[0] != nums_copy[1])\n\t{\n\t\tunique_nums[0] = nums_copy[0];\n\t\tunique_nums[1] = nums_copy[1];\n\t}\n\telse\n\t{\n\t\tunique_nums[0] = nums_copy[2];\n\t\tunique_nums[1] = nums_copy[3];\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong[] temp_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(num != temp_nums[0] && num != temp_nums[1])\n\t\t{\n\t\t\tunique_nums ~= num;\n\t\t\ttemp_nums = unique_nums;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((bit & num) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(num in result)\n\t\t{\n\t\t\tresult.remove(num);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\t\n\t// Iterate through the array\n\tfor (long i = 0; i < nums.length; i++)\n\t{\n\t\t// Check if the number is already in the unique_nums array\n\t\tif (unique_nums[0] == nums[i] || unique_nums[1] == nums[i])\n\t\t{\n\t\t\t// If it is, then do nothing\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// If it isn't, then add it to the unique_nums array\n\t\t\tif (unique_nums[0] == 0)\n\t\t\t{\n\t\t\t\tunique_nums[0] = nums[i];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums[1] = nums[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong[] temp = new long[2];\n\tlong[] temp_nums = nums;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(temp_nums.length == 1)\n\t\t{\n\t\t\tunique_nums ~= num;\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttemp_nums = temp_nums[1..$];\n\t\t\tif(num !in temp_nums)\n\t\t\t{\n\t\t\t\tunique_nums ~= num;\n\t\t\t\tif(unique_nums.length == 2)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong last_bit = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor-1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tresult[0] ^= num;\n\t}\n\tresult[1] = result[0] & ~(result[0] - 1);\n\tresult[0] = 0;\n\tforeach(num; nums)\n\t{\n\t\tif((num & result[1]) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tret[0] ^= num;\n\t\telse\n\t\t\tret[1] ^= num;\n\t}\n\treturn ret;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tlong num1 = 0;\n\tlong num2 = 0;\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tnum1 ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnum2 ^= num;\n\t\t}\n\t}\n\tresult[0] = num1;\n\tresult[1] = num2;\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// find the rightmost bit that is 1\n\tlong rightmost_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong bit_pos = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_pos) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong set_bit = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tres[0] ^= num;\n\t\telse\n\t\t\tres[1] ^= num;\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(n; nums)\n\t{\n\t\txor ^= n;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(n; nums)\n\t{\n\t\tif((n & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= n;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= n;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong[] temp = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num != temp[0] && num != temp[1])\n\t\t{\n\t\t\tif(temp[0] == 0)\n\t\t\t{\n\t\t\t\ttemp[0] = num;\n\t\t\t}\n\t\t\telse if(temp[1] == 0)\n\t\t\t{\n\t\t\t\ttemp[1] = num;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums[0] = temp[0];\n\t\t\t\tunique_nums[1] = temp[1];\n\t\t\t\treturn unique_nums;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] ret = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tret[0] ^= num;\n\t\telse\n\t\t\tret[1] ^= num;\n\t}\n\treturn ret;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(num != unique_nums[0] && num != unique_nums[1])\n\t\t{\n\t\t\tif(unique_nums[0] == 0)\n\t\t\t{\n\t\t\t\tunique_nums[0] = num;\n\t\t\t}\n\t\t\telse if(unique_nums[1] == 0)\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & -xor;\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\t\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif (nums[i] != nums[i+1]) \n\t\t{\n\t\t\tunique_nums[0] = nums[i];\n\t\t\tunique_nums[1] = nums[i+1];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tif(unique_nums[0] != num)\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num == unique_nums[0])\n\t\t\t{\n\t\t\t\tunique_nums[1] = 0;\n\t\t\t}\n\t\t\telse if(num == unique_nums[1])\n\t\t\t{\n\t\t\t\tunique_nums[0] = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums[0] = num;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tunique_nums[0] = xor;\n\tunique_nums[1] = xor;\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong last_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tif(unique_nums[0] != num)\n\t\t\t{\n\t\t\t\tunique_nums[1] = num;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(unique_nums[0] == num)\n\t\t\t{\n\t\t\t\tunique_nums[0] = 0;\n\t\t\t}\n\t\t\telse if(unique_nums[1] == num)\n\t\t\t{\n\t\t\t\tunique_nums[1] = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\txor_num ^= nums[i];\n\t}\n\t\n\tint right_most_set_bit = xor_num & ~(xor_num - 1);\n\t\n\tfor (int i = 0; i < nums.length; i++) \n\t{\n\t\tif ((nums[i] & right_most_set_bit) != 0) \n\t\t{\n\t\t\tunique_nums[0] ^= nums[i];\n\t\t}\n\t\telse \n\t\t{\n\t\t\tunique_nums[1] ^= nums[i];\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & (-xor);\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\t\n\tlong xor = 0;\n\tfor (long num : nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tfor (long num : nums)\n\t{\n\t\tif ((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong[] temp = new long[2];\n\tlong[] temp2 = new long[2];\n\t\n\tif(nums.length == 2)\n\t{\n\t\tunique_nums = nums;\n\t}\n\telse\n\t{\n\t\ttemp = nums[0..2];\n\t\ttemp2 = nums[2..$];\n\t\t\n\t\tunique_nums = two_unique_nums(temp);\n\t\tunique_nums ~= two_unique_nums(temp2);\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums) \n\t{\n\t\tif((num & bit) == 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num != unique_nums[0])\n\t\t{\n\t\t\tunique_nums[1] = unique_nums[0];\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\t// find the rightmost set bit\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\t// divide the numbers into two groups\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong[] temp = new long[2];\n\tint i = 0;\n\tforeach(num; nums)\n\t{\n\t\tif(num != temp[0] && num != temp[1])\n\t\t{\n\t\t\tunique_nums[i] = num;\n\t\t\ti++;\n\t\t}\n\t\ttemp[0] = temp[1];\n\t\ttemp[1] = num;\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tfor (long num : nums) \n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tfor (long num : nums) \n\t{\n\t\tif ((num & bit) != 0) \n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong last_bit = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// Find the first bit that is set\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\t\n\tforeach(num; nums)\n\t{\n\t\tif(num != unique_nums[0])\n\t\t{\n\t\t\tunique_nums[1] = unique_nums[0];\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t\tunique_nums[0] ^= num;\n\t\telse\n\t\t\tunique_nums[1] ^= num;\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tunique_nums[0] = xor;\n\tunique_nums[1] = xor;\n\treturn unique_nums;\n}",
    "{\n\tlong[] res = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tres[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tres[1] ^= num;\n\t\t}\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tint bit = xor & ~(xor-1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong mask = xor & -xor;\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_num ^= num;\n\t}\n\t\n\tlong last_bit = xor_num & ~(xor_num - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\t\n\tfor (int i = 0; i < nums.length; i++)\n\t{\n\t\tif (nums[i] != nums[i+1])\n\t\t{\n\t\t\tunique_nums[0] = nums[i];\n\t\t\tunique_nums[1] = nums[i+1];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong rightmost_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((rightmost_bit & num) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(n; nums)\n\t\txor ^= n;\n\tresult[0] = xor;\n\tresult[1] = xor;\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong[] nums_copy = nums.dup;\n\tnums_copy.sort;\n\t\n\tif (nums_copy[0] != nums_copy[1])\n\t{\n\t\tunique_nums[0] = nums_copy[0];\n\t\tunique_nums[1] = nums_copy[1];\n\t}\n\telse\n\t{\n\t\tunique_nums[0] = nums_copy[0];\n\t\tunique_nums[1] = nums_copy[2];\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\tunique_nums[0] = xor;\n\tunique_nums[1] = xor;\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong last_bit = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong bit_mask = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_mask) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\t// find the rightmost set bit\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\tlong bit_mask = xor_result & ~(xor_result - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_mask) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tint bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong[] unique_nums_count = new long[2];\n\tunique_nums[0] = nums[0];\n\tunique_nums[1] = nums[1];\n\tunique_nums_count[0] = 1;\n\tunique_nums_count[1] = 1;\n\t\n\tforeach(num; nums[2..$])\n\t{\n\t\tif(num == unique_nums[0])\n\t\t{\n\t\t\tunique_nums_count[0]++;\n\t\t}\n\t\telse if(num == unique_nums[1])\n\t\t{\n\t\t\tunique_nums_count[1]++;\n\t\t}\n\t\telse if(unique_nums_count[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t\tunique_nums_count[0] = 1;\n\t\t}\n\t\telse if(unique_nums_count[1] == 0)\n\t\t{\n\t\t\tunique_nums[1] = num;\n\t\t\tunique_nums_count[1] = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums_count[0]--;\n\t\t\tunique_nums_count[1]--;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(num != unique_nums[0])\n\t\t{\n\t\t\tunique_nums[1] = unique_nums[0];\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tunique_nums[0] = xor_result;\n\tunique_nums[1] = xor_result;\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tif(nums[i] != nums[i+1])\n\t\t{\n\t\t\tresult[0] = nums[i];\n\t\t\tresult[1] = nums[i+1];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_num = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_num ^= num;\n\t}\n\t\n\tlong bit_num = xor_num & ~(xor_num - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit_num) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tint pos = 0;\n\twhile((xor & (1 << pos)) == 0)\n\t\tpos++;\n\t\n\tlong mask = 1 << pos;\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach (num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach (num; nums)\n\t{\n\t\tif ((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tunique_nums[0] ^= num;\n\t\telse\n\t\t\tunique_nums[1] ^= num;\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] ret = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong mask = xor & -xor;\n\tlong first = 0;\n\tlong second = 0;\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t\tfirst ^= num;\n\t\telse\n\t\t\tsecond ^= num;\n\t}\n\t\n\tret[0] = first;\n\tret[1] = second;\n\treturn ret;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong right_most_set_bit = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_result = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_result ^= num;\n\t}\n\t\n\tlong last_bit = xor_result & ~(xor_result - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((last_bit & num) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums) \n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\tforeach(num; nums) \n\t{\n\t\tif((num & rightmost_set_bit) != 0) \n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] res = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong right_most_set_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_set_bit) != 0)\n\t\t\tres[0] ^= num;\n\t\telse\n\t\t\tres[1] ^= num;\n\t}\n\treturn res;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor_res = 0;\n\tforeach(num; nums)\n\t{\n\t\txor_res ^= num;\n\t}\n\t\n\tlong mask = xor_res & ~(xor_res - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\t// find the rightmost set bit\n\tlong rightmost_set_bit = xor & ~(xor - 1);\n\t\n\t// divide the numbers into two groups\n\tforeach(num; nums)\n\t{\n\t\tif((num & rightmost_set_bit) != 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\t\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong right_most_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & right_most_bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] ret = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong last_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) != 0)\n\t\t\tret[0] ^= num;\n\t\telse\n\t\t\tret[1] ^= num;\n\t}\n\treturn ret;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\tlong mask = xor & ~(xor - 1);\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong last_bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & last_bit) == 0)\n\t\t\tresult[0] ^= num;\n\t\telse\n\t\t\tresult[1] ^= num;\n\t}\n\treturn result;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tforeach(num; nums)\n\t{\n\t\tif(unique_nums[0] == 0)\n\t\t{\n\t\t\tunique_nums[0] = num;\n\t\t}\n\t\telse if(unique_nums[1] == 0)\n\t\t{\n\t\t\tunique_nums[1] = num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(num == unique_nums[0])\n\t\t\t{\n\t\t\t\tunique_nums[1] = 0;\n\t\t\t}\n\t\t\telse if(num == unique_nums[1])\n\t\t\t{\n\t\t\t\tunique_nums[0] = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tunique_nums[0] = num;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_nums;\n}",
    "{\n\tlong[] unique_nums = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) == 0)\n\t\t{\n\t\t\tunique_nums[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_nums[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn unique_nums;\n}",
    "{\n\tlong[] result = new long[2];\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tif(nums[i] != 0)\n\t\t{\n\t\t\tresult[0] = nums[i];\n\t\t\tnums[i] = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tforeach(i; 0 .. nums.length)\n\t{\n\t\tif(nums[i] != 0)\n\t\t{\n\t\t\tresult[1] = nums[i];\n\t\t\tnums[i] = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] res = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong mask = xor & -xor;\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & mask) == 0)\n\t\t{\n\t\t\tres[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tres[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn res;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t\txor ^= num;\n\t\n\tlong bit = xor & ~(xor - 1);\n\tlong num1 = 0;\n\tlong num2 = 0;\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t\tnum1 ^= num;\n\t\telse\n\t\t\tnum2 ^= num;\n\t}\n\tresult[0] = num1;\n\tresult[1] = num2;\n\treturn result;\n}",
    "{\n\tlong[] result = new long[2];\n\tlong xor = 0;\n\tforeach(num; nums)\n\t{\n\t\txor ^= num;\n\t}\n\t\n\tlong bit = xor & ~(xor - 1);\n\t\n\tforeach(num; nums)\n\t{\n\t\tif((num & bit) != 0)\n\t\t{\n\t\t\tresult[0] ^= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult[1] ^= num;\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] result;\n\tforeach(num; nums)\n\t{\n\t\tif(result.length == 0)\n\t\t{\n\t\t\tresult ~= num;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(result.length == 1)\n\t\t\t{\n\t\t\t\tif(result[0] != num)\n\t\t\t\t{\n\t\t\t\t\tresult ~= num;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(result[0] != num && result[1] != num)\n\t\t\t\t{\n\t\t\t\t\tresult ~= num;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}"
  ]
}